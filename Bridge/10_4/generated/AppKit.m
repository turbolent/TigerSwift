#include "w2c2_base.h"

extern wasmMemory* w2c2BridgeMemory(void* instance);

// getter for constant 'NSAFMAscender'
U32 env___get_NSAFMAscender(void *_instance) {
    id _result = (id)NSAFMAscender;
    return (U32)_result;
}

// setter for constant 'NSAFMAscender'
void env___set_NSAFMAscender(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMAscender = _t1;
}

// getter for constant 'NSAFMCapHeight'
U32 env___get_NSAFMCapHeight(void *_instance) {
    id _result = (id)NSAFMCapHeight;
    return (U32)_result;
}

// setter for constant 'NSAFMCapHeight'
void env___set_NSAFMCapHeight(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMCapHeight = _t1;
}

// getter for constant 'NSAFMCharacterSet'
U32 env___get_NSAFMCharacterSet(void *_instance) {
    id _result = (id)NSAFMCharacterSet;
    return (U32)_result;
}

// setter for constant 'NSAFMCharacterSet'
void env___set_NSAFMCharacterSet(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMCharacterSet = _t1;
}

// getter for constant 'NSAFMDescender'
U32 env___get_NSAFMDescender(void *_instance) {
    id _result = (id)NSAFMDescender;
    return (U32)_result;
}

// setter for constant 'NSAFMDescender'
void env___set_NSAFMDescender(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMDescender = _t1;
}

// getter for constant 'NSAFMEncodingScheme'
U32 env___get_NSAFMEncodingScheme(void *_instance) {
    id _result = (id)NSAFMEncodingScheme;
    return (U32)_result;
}

// setter for constant 'NSAFMEncodingScheme'
void env___set_NSAFMEncodingScheme(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMEncodingScheme = _t1;
}

// getter for constant 'NSAFMFamilyName'
U32 env___get_NSAFMFamilyName(void *_instance) {
    id _result = (id)NSAFMFamilyName;
    return (U32)_result;
}

// setter for constant 'NSAFMFamilyName'
void env___set_NSAFMFamilyName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMFamilyName = _t1;
}

// getter for constant 'NSAFMFontName'
U32 env___get_NSAFMFontName(void *_instance) {
    id _result = (id)NSAFMFontName;
    return (U32)_result;
}

// setter for constant 'NSAFMFontName'
void env___set_NSAFMFontName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMFontName = _t1;
}

// getter for constant 'NSAFMFormatVersion'
U32 env___get_NSAFMFormatVersion(void *_instance) {
    id _result = (id)NSAFMFormatVersion;
    return (U32)_result;
}

// setter for constant 'NSAFMFormatVersion'
void env___set_NSAFMFormatVersion(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMFormatVersion = _t1;
}

// getter for constant 'NSAFMFullName'
U32 env___get_NSAFMFullName(void *_instance) {
    id _result = (id)NSAFMFullName;
    return (U32)_result;
}

// setter for constant 'NSAFMFullName'
void env___set_NSAFMFullName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMFullName = _t1;
}

// getter for constant 'NSAFMItalicAngle'
U32 env___get_NSAFMItalicAngle(void *_instance) {
    id _result = (id)NSAFMItalicAngle;
    return (U32)_result;
}

// setter for constant 'NSAFMItalicAngle'
void env___set_NSAFMItalicAngle(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMItalicAngle = _t1;
}

// getter for constant 'NSAFMMappingScheme'
U32 env___get_NSAFMMappingScheme(void *_instance) {
    id _result = (id)NSAFMMappingScheme;
    return (U32)_result;
}

// setter for constant 'NSAFMMappingScheme'
void env___set_NSAFMMappingScheme(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMMappingScheme = _t1;
}

// getter for constant 'NSAFMNotice'
U32 env___get_NSAFMNotice(void *_instance) {
    id _result = (id)NSAFMNotice;
    return (U32)_result;
}

// setter for constant 'NSAFMNotice'
void env___set_NSAFMNotice(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMNotice = _t1;
}

// getter for constant 'NSAFMUnderlinePosition'
U32 env___get_NSAFMUnderlinePosition(void *_instance) {
    id _result = (id)NSAFMUnderlinePosition;
    return (U32)_result;
}

// setter for constant 'NSAFMUnderlinePosition'
void env___set_NSAFMUnderlinePosition(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMUnderlinePosition = _t1;
}

// getter for constant 'NSAFMUnderlineThickness'
U32 env___get_NSAFMUnderlineThickness(void *_instance) {
    id _result = (id)NSAFMUnderlineThickness;
    return (U32)_result;
}

// setter for constant 'NSAFMUnderlineThickness'
void env___set_NSAFMUnderlineThickness(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMUnderlineThickness = _t1;
}

// getter for constant 'NSAFMVersion'
U32 env___get_NSAFMVersion(void *_instance) {
    id _result = (id)NSAFMVersion;
    return (U32)_result;
}

// setter for constant 'NSAFMVersion'
void env___set_NSAFMVersion(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMVersion = _t1;
}

// getter for constant 'NSAFMWeight'
U32 env___get_NSAFMWeight(void *_instance) {
    id _result = (id)NSAFMWeight;
    return (U32)_result;
}

// setter for constant 'NSAFMWeight'
void env___set_NSAFMWeight(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMWeight = _t1;
}

// getter for constant 'NSAFMXHeight'
U32 env___get_NSAFMX58Height(void *_instance) {
    id _result = (id)NSAFMXHeight;
    return (U32)_result;
}

// setter for constant 'NSAFMXHeight'
void env___set_NSAFMX58Height(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAFMXHeight = _t1;
}

// getter for constant 'NSAbortModalException'
U32 env___get_NSAbortModalException(void *_instance) {
    id _result = (id)NSAbortModalException;
    return (U32)_result;
}

// setter for constant 'NSAbortModalException'
void env___set_NSAbortModalException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAbortModalException = _t1;
}

// getter for constant 'NSAbortPrintingException'
U32 env___get_NSAbortPrintingException(void *_instance) {
    id _result = (id)NSAbortPrintingException;
    return (U32)_result;
}

// setter for constant 'NSAbortPrintingException'
void env___set_NSAbortPrintingException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAbortPrintingException = _t1;
}

// getter for constant 'NSAccessibilityAllowedValuesAttribute'
U32 env___get_NSAccessibilityAllowedValuesAttribute(void *_instance) {
    id _result = (id)NSAccessibilityAllowedValuesAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityApplicationActivatedNotification'
U32 env___get_NSAccessibilityApplicationActivatedNotification(void *_instance) {
    id _result = (id)NSAccessibilityApplicationActivatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityApplicationDeactivatedNotification'
U32 env___get_NSAccessibilityApplicationDeactivatedNotification(void *_instance) {
    id _result = (id)NSAccessibilityApplicationDeactivatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityApplicationHiddenNotification'
U32 env___get_NSAccessibilityApplicationHiddenNotification(void *_instance) {
    id _result = (id)NSAccessibilityApplicationHiddenNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityApplicationRole'
U32 env___get_NSAccessibilityApplicationRole(void *_instance) {
    id _result = (id)NSAccessibilityApplicationRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityApplicationShownNotification'
U32 env___get_NSAccessibilityApplicationShownNotification(void *_instance) {
    id _result = (id)NSAccessibilityApplicationShownNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityAscendingSortDirectionValue'
U32 env___get_NSAccessibilityAscendingSortDirectionValue(void *_instance) {
    id _result = (id)NSAccessibilityAscendingSortDirectionValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityAttachmentTextAttribute'
U32 env___get_NSAccessibilityAttachmentTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityAttachmentTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityAttributedStringForRangeParameterizedAttribute'
U32 env___get_NSAccessibilityAttributedStringForRangeParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityAttributedStringForRangeParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityBackgroundColorTextAttribute'
U32 env___get_NSAccessibilityBackgroundColorTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityBackgroundColorTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityBoundsForRangeParameterizedAttribute'
U32 env___get_NSAccessibilityBoundsForRangeParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityBoundsForRangeParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityBrowserRole'
U32 env___get_NSAccessibilityBrowserRole(void *_instance) {
    id _result = (id)NSAccessibilityBrowserRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityBusyIndicatorRole'
U32 env___get_NSAccessibilityBusyIndicatorRole(void *_instance) {
    id _result = (id)NSAccessibilityBusyIndicatorRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityButtonRole'
U32 env___get_NSAccessibilityButtonRole(void *_instance) {
    id _result = (id)NSAccessibilityButtonRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCancelAction'
U32 env___get_NSAccessibilityCancelAction(void *_instance) {
    id _result = (id)NSAccessibilityCancelAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCancelButtonAttribute'
U32 env___get_NSAccessibilityCancelButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityCancelButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCenterTabStopMarkerTypeValue'
U32 env___get_NSAccessibilityCenterTabStopMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityCenterTabStopMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCentimetersUnitValue'
U32 env___get_NSAccessibilityCentimetersUnitValue(void *_instance) {
    id _result = (id)NSAccessibilityCentimetersUnitValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCheckBoxRole'
U32 env___get_NSAccessibilityCheckBoxRole(void *_instance) {
    id _result = (id)NSAccessibilityCheckBoxRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityChildrenAttribute'
U32 env___get_NSAccessibilityChildrenAttribute(void *_instance) {
    id _result = (id)NSAccessibilityChildrenAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityClearButtonAttribute'
U32 env___get_NSAccessibilityClearButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityClearButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCloseButtonAttribute'
U32 env___get_NSAccessibilityCloseButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityCloseButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCloseButtonSubrole'
U32 env___get_NSAccessibilityCloseButtonSubrole(void *_instance) {
    id _result = (id)NSAccessibilityCloseButtonSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityColorWellRole'
U32 env___get_NSAccessibilityColorWellRole(void *_instance) {
    id _result = (id)NSAccessibilityColorWellRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityColumnRole'
U32 env___get_NSAccessibilityColumnRole(void *_instance) {
    id _result = (id)NSAccessibilityColumnRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityColumnTitlesAttribute'
U32 env___get_NSAccessibilityColumnTitlesAttribute(void *_instance) {
    id _result = (id)NSAccessibilityColumnTitlesAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityColumnsAttribute'
U32 env___get_NSAccessibilityColumnsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityColumnsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityComboBoxRole'
U32 env___get_NSAccessibilityComboBoxRole(void *_instance) {
    id _result = (id)NSAccessibilityComboBoxRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityConfirmAction'
U32 env___get_NSAccessibilityConfirmAction(void *_instance) {
    id _result = (id)NSAccessibilityConfirmAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityContentsAttribute'
U32 env___get_NSAccessibilityContentsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityContentsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityCreatedNotification'
U32 env___get_NSAccessibilityCreatedNotification(void *_instance) {
    id _result = (id)NSAccessibilityCreatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDecimalTabStopMarkerTypeValue'
U32 env___get_NSAccessibilityDecimalTabStopMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityDecimalTabStopMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDecrementAction'
U32 env___get_NSAccessibilityDecrementAction(void *_instance) {
    id _result = (id)NSAccessibilityDecrementAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDecrementArrowSubrole'
U32 env___get_NSAccessibilityDecrementArrowSubrole(void *_instance) {
    id _result = (id)NSAccessibilityDecrementArrowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDecrementButtonAttribute'
U32 env___get_NSAccessibilityDecrementButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDecrementButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDecrementPageSubrole'
U32 env___get_NSAccessibilityDecrementPageSubrole(void *_instance) {
    id _result = (id)NSAccessibilityDecrementPageSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDefaultButtonAttribute'
U32 env___get_NSAccessibilityDefaultButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDefaultButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDeleteAction'
U32 env___get_NSAccessibilityDeleteAction(void *_instance) {
    id _result = (id)NSAccessibilityDeleteAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDescendingSortDirectionValue'
U32 env___get_NSAccessibilityDescendingSortDirectionValue(void *_instance) {
    id _result = (id)NSAccessibilityDescendingSortDirectionValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDescriptionAttribute'
U32 env___get_NSAccessibilityDescriptionAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDescriptionAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDialogSubrole'
U32 env___get_NSAccessibilityDialogSubrole(void *_instance) {
    id _result = (id)NSAccessibilityDialogSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDisclosedByRowAttribute'
U32 env___get_NSAccessibilityDisclosedByRowAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDisclosedByRowAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDisclosedRowsAttribute'
U32 env___get_NSAccessibilityDisclosedRowsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDisclosedRowsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDisclosingAttribute'
U32 env___get_NSAccessibilityDisclosingAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDisclosingAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDisclosureLevelAttribute'
U32 env___get_NSAccessibilityDisclosureLevelAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDisclosureLevelAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDocumentAttribute'
U32 env___get_NSAccessibilityDocumentAttribute(void *_instance) {
    id _result = (id)NSAccessibilityDocumentAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDrawerCreatedNotification'
U32 env___get_NSAccessibilityDrawerCreatedNotification(void *_instance) {
    id _result = (id)NSAccessibilityDrawerCreatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityDrawerRole'
U32 env___get_NSAccessibilityDrawerRole(void *_instance) {
    id _result = (id)NSAccessibilityDrawerRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityEditedAttribute'
U32 env___get_NSAccessibilityEditedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityEditedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityEnabledAttribute'
U32 env___get_NSAccessibilityEnabledAttribute(void *_instance) {
    id _result = (id)NSAccessibilityEnabledAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityErrorCodeExceptionInfo'
U32 env___get_NSAccessibilityErrorCodeExceptionInfo(void *_instance) {
    id _result = (id)NSAccessibilityErrorCodeExceptionInfo;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityException'
U32 env___get_NSAccessibilityException(void *_instance) {
    id _result = (id)NSAccessibilityException;
    return (U32)_result;
}

// setter for constant 'NSAccessibilityException'
void env___set_NSAccessibilityException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAccessibilityException = _t1;
}

// getter for constant 'NSAccessibilityExpandedAttribute'
U32 env___get_NSAccessibilityExpandedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityExpandedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFilenameAttribute'
U32 env___get_NSAccessibilityFilenameAttribute(void *_instance) {
    id _result = (id)NSAccessibilityFilenameAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFirstLineIndentMarkerTypeValue'
U32 env___get_NSAccessibilityFirstLineIndentMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityFirstLineIndentMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFloatingWindowSubrole'
U32 env___get_NSAccessibilityFloatingWindowSubrole(void *_instance) {
    id _result = (id)NSAccessibilityFloatingWindowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFocusedAttribute'
U32 env___get_NSAccessibilityFocusedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityFocusedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFocusedUIElementAttribute'
U32 env___get_NSAccessibilityFocusedUIElementAttribute(void *_instance) {
    id _result = (id)NSAccessibilityFocusedUIElementAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFocusedUIElementChangedNotification'
U32 env___get_NSAccessibilityFocusedUIElementChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilityFocusedUIElementChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFocusedWindowAttribute'
U32 env___get_NSAccessibilityFocusedWindowAttribute(void *_instance) {
    id _result = (id)NSAccessibilityFocusedWindowAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFocusedWindowChangedNotification'
U32 env___get_NSAccessibilityFocusedWindowChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilityFocusedWindowChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFontFamilyKey'
U32 env___get_NSAccessibilityFontFamilyKey(void *_instance) {
    id _result = (id)NSAccessibilityFontFamilyKey;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFontNameKey'
U32 env___get_NSAccessibilityFontNameKey(void *_instance) {
    id _result = (id)NSAccessibilityFontNameKey;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFontSizeKey'
U32 env___get_NSAccessibilityFontSizeKey(void *_instance) {
    id _result = (id)NSAccessibilityFontSizeKey;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFontTextAttribute'
U32 env___get_NSAccessibilityFontTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityFontTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityForegroundColorTextAttribute'
U32 env___get_NSAccessibilityForegroundColorTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityForegroundColorTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityFrontmostAttribute'
U32 env___get_NSAccessibilityFrontmostAttribute(void *_instance) {
    id _result = (id)NSAccessibilityFrontmostAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityGroupRole'
U32 env___get_NSAccessibilityGroupRole(void *_instance) {
    id _result = (id)NSAccessibilityGroupRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityGrowAreaAttribute'
U32 env___get_NSAccessibilityGrowAreaAttribute(void *_instance) {
    id _result = (id)NSAccessibilityGrowAreaAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityGrowAreaRole'
U32 env___get_NSAccessibilityGrowAreaRole(void *_instance) {
    id _result = (id)NSAccessibilityGrowAreaRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHeadIndentMarkerTypeValue'
U32 env___get_NSAccessibilityHeadIndentMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityHeadIndentMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHeaderAttribute'
U32 env___get_NSAccessibilityHeaderAttribute(void *_instance) {
    id _result = (id)NSAccessibilityHeaderAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHelpAttribute'
U32 env___get_NSAccessibilityHelpAttribute(void *_instance) {
    id _result = (id)NSAccessibilityHelpAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHelpTagCreatedNotification'
U32 env___get_NSAccessibilityHelpTagCreatedNotification(void *_instance) {
    id _result = (id)NSAccessibilityHelpTagCreatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHelpTagRole'
U32 env___get_NSAccessibilityHelpTagRole(void *_instance) {
    id _result = (id)NSAccessibilityHelpTagRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHiddenAttribute'
U32 env___get_NSAccessibilityHiddenAttribute(void *_instance) {
    id _result = (id)NSAccessibilityHiddenAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHorizontalOrientationValue'
U32 env___get_NSAccessibilityHorizontalOrientationValue(void *_instance) {
    id _result = (id)NSAccessibilityHorizontalOrientationValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityHorizontalScrollBarAttribute'
U32 env___get_NSAccessibilityHorizontalScrollBarAttribute(void *_instance) {
    id _result = (id)NSAccessibilityHorizontalScrollBarAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityImageRole'
U32 env___get_NSAccessibilityImageRole(void *_instance) {
    id _result = (id)NSAccessibilityImageRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityInchesUnitValue'
U32 env___get_NSAccessibilityInchesUnitValue(void *_instance) {
    id _result = (id)NSAccessibilityInchesUnitValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityIncrementAction'
U32 env___get_NSAccessibilityIncrementAction(void *_instance) {
    id _result = (id)NSAccessibilityIncrementAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityIncrementArrowSubrole'
U32 env___get_NSAccessibilityIncrementArrowSubrole(void *_instance) {
    id _result = (id)NSAccessibilityIncrementArrowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityIncrementButtonAttribute'
U32 env___get_NSAccessibilityIncrementButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityIncrementButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityIncrementPageSubrole'
U32 env___get_NSAccessibilityIncrementPageSubrole(void *_instance) {
    id _result = (id)NSAccessibilityIncrementPageSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityIncrementorRole'
U32 env___get_NSAccessibilityIncrementorRole(void *_instance) {
    id _result = (id)NSAccessibilityIncrementorRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityIndexAttribute'
U32 env___get_NSAccessibilityIndexAttribute(void *_instance) {
    id _result = (id)NSAccessibilityIndexAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityInsertionPointLineNumberAttribute'
U32 env___get_NSAccessibilityInsertionPointLineNumberAttribute(void *_instance) {
    id _result = (id)NSAccessibilityInsertionPointLineNumberAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLabelUIElementsAttribute'
U32 env___get_NSAccessibilityLabelUIElementsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityLabelUIElementsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLabelValueAttribute'
U32 env___get_NSAccessibilityLabelValueAttribute(void *_instance) {
    id _result = (id)NSAccessibilityLabelValueAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLeftTabStopMarkerTypeValue'
U32 env___get_NSAccessibilityLeftTabStopMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityLeftTabStopMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLineForIndexParameterizedAttribute'
U32 env___get_NSAccessibilityLineForIndexParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityLineForIndexParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLinkRole'
U32 env___get_NSAccessibilityLinkRole(void *_instance) {
    id _result = (id)NSAccessibilityLinkRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLinkTextAttribute'
U32 env___get_NSAccessibilityLinkTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityLinkTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityLinkedUIElementsAttribute'
U32 env___get_NSAccessibilityLinkedUIElementsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityLinkedUIElementsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityListRole'
U32 env___get_NSAccessibilityListRole(void *_instance) {
    id _result = (id)NSAccessibilityListRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMainAttribute'
U32 env___get_NSAccessibilityMainAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMainAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMainWindowAttribute'
U32 env___get_NSAccessibilityMainWindowAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMainWindowAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMainWindowChangedNotification'
U32 env___get_NSAccessibilityMainWindowChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilityMainWindowChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMarkerGroupUIElementAttribute'
U32 env___get_NSAccessibilityMarkerGroupUIElementAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMarkerGroupUIElementAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMarkerTypeAttribute'
U32 env___get_NSAccessibilityMarkerTypeAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMarkerTypeAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMarkerTypeDescriptionAttribute'
U32 env___get_NSAccessibilityMarkerTypeDescriptionAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMarkerTypeDescriptionAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMarkerUIElementsAttribute'
U32 env___get_NSAccessibilityMarkerUIElementsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMarkerUIElementsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMarkerValuesAttribute'
U32 env___get_NSAccessibilityMarkerValuesAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMarkerValuesAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMatteContentUIElementAttribute'
U32 env___get_NSAccessibilityMatteContentUIElementAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMatteContentUIElementAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMatteHoleAttribute'
U32 env___get_NSAccessibilityMatteHoleAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMatteHoleAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMatteRole'
U32 env___get_NSAccessibilityMatteRole(void *_instance) {
    id _result = (id)NSAccessibilityMatteRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMaxValueAttribute'
U32 env___get_NSAccessibilityMaxValueAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMaxValueAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMenuBarAttribute'
U32 env___get_NSAccessibilityMenuBarAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMenuBarAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMenuBarRole'
U32 env___get_NSAccessibilityMenuBarRole(void *_instance) {
    id _result = (id)NSAccessibilityMenuBarRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMenuButtonRole'
U32 env___get_NSAccessibilityMenuButtonRole(void *_instance) {
    id _result = (id)NSAccessibilityMenuButtonRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMenuItemRole'
U32 env___get_NSAccessibilityMenuItemRole(void *_instance) {
    id _result = (id)NSAccessibilityMenuItemRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMenuRole'
U32 env___get_NSAccessibilityMenuRole(void *_instance) {
    id _result = (id)NSAccessibilityMenuRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMinValueAttribute'
U32 env___get_NSAccessibilityMinValueAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMinValueAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMinimizeButtonAttribute'
U32 env___get_NSAccessibilityMinimizeButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMinimizeButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMinimizeButtonSubrole'
U32 env___get_NSAccessibilityMinimizeButtonSubrole(void *_instance) {
    id _result = (id)NSAccessibilityMinimizeButtonSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMinimizedAttribute'
U32 env___get_NSAccessibilityMinimizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMinimizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMisspelledTextAttribute'
U32 env___get_NSAccessibilityMisspelledTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityMisspelledTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityModalAttribute'
U32 env___get_NSAccessibilityModalAttribute(void *_instance) {
    id _result = (id)NSAccessibilityModalAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityMovedNotification'
U32 env___get_NSAccessibilityMovedNotification(void *_instance) {
    id _result = (id)NSAccessibilityMovedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityNextContentsAttribute'
U32 env___get_NSAccessibilityNextContentsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityNextContentsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityNumberOfCharactersAttribute'
U32 env___get_NSAccessibilityNumberOfCharactersAttribute(void *_instance) {
    id _result = (id)NSAccessibilityNumberOfCharactersAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityOrientationAttribute'
U32 env___get_NSAccessibilityOrientationAttribute(void *_instance) {
    id _result = (id)NSAccessibilityOrientationAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityOutlineRole'
U32 env___get_NSAccessibilityOutlineRole(void *_instance) {
    id _result = (id)NSAccessibilityOutlineRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityOutlineRowSubrole'
U32 env___get_NSAccessibilityOutlineRowSubrole(void *_instance) {
    id _result = (id)NSAccessibilityOutlineRowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityOverflowButtonAttribute'
U32 env___get_NSAccessibilityOverflowButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityOverflowButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityParentAttribute'
U32 env___get_NSAccessibilityParentAttribute(void *_instance) {
    id _result = (id)NSAccessibilityParentAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPicasUnitValue'
U32 env___get_NSAccessibilityPicasUnitValue(void *_instance) {
    id _result = (id)NSAccessibilityPicasUnitValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPickAction'
U32 env___get_NSAccessibilityPickAction(void *_instance) {
    id _result = (id)NSAccessibilityPickAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPointsUnitValue'
U32 env___get_NSAccessibilityPointsUnitValue(void *_instance) {
    id _result = (id)NSAccessibilityPointsUnitValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPopUpButtonRole'
U32 env___get_NSAccessibilityPopUpButtonRole(void *_instance) {
    id _result = (id)NSAccessibilityPopUpButtonRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPositionAttribute'
U32 env___get_NSAccessibilityPositionAttribute(void *_instance) {
    id _result = (id)NSAccessibilityPositionAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPressAction'
U32 env___get_NSAccessibilityPressAction(void *_instance) {
    id _result = (id)NSAccessibilityPressAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityPreviousContentsAttribute'
U32 env___get_NSAccessibilityPreviousContentsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityPreviousContentsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityProgressIndicatorRole'
U32 env___get_NSAccessibilityProgressIndicatorRole(void *_instance) {
    id _result = (id)NSAccessibilityProgressIndicatorRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityProxyAttribute'
U32 env___get_NSAccessibilityProxyAttribute(void *_instance) {
    id _result = (id)NSAccessibilityProxyAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRTFForRangeParameterizedAttribute'
U32 env___get_NSAccessibilityRTFForRangeParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRTFForRangeParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRadioButtonRole'
U32 env___get_NSAccessibilityRadioButtonRole(void *_instance) {
    id _result = (id)NSAccessibilityRadioButtonRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRadioGroupRole'
U32 env___get_NSAccessibilityRadioGroupRole(void *_instance) {
    id _result = (id)NSAccessibilityRadioGroupRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRaiseAction'
U32 env___get_NSAccessibilityRaiseAction(void *_instance) {
    id _result = (id)NSAccessibilityRaiseAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRangeForIndexParameterizedAttribute'
U32 env___get_NSAccessibilityRangeForIndexParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRangeForIndexParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRangeForLineParameterizedAttribute'
U32 env___get_NSAccessibilityRangeForLineParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRangeForLineParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRangeForPositionParameterizedAttribute'
U32 env___get_NSAccessibilityRangeForPositionParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRangeForPositionParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityResizedNotification'
U32 env___get_NSAccessibilityResizedNotification(void *_instance) {
    id _result = (id)NSAccessibilityResizedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRightTabStopMarkerTypeValue'
U32 env___get_NSAccessibilityRightTabStopMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityRightTabStopMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRoleAttribute'
U32 env___get_NSAccessibilityRoleAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRoleAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRoleDescriptionAttribute'
U32 env___get_NSAccessibilityRoleDescriptionAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRoleDescriptionAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRowCountChangedNotification'
U32 env___get_NSAccessibilityRowCountChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilityRowCountChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRowRole'
U32 env___get_NSAccessibilityRowRole(void *_instance) {
    id _result = (id)NSAccessibilityRowRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRowsAttribute'
U32 env___get_NSAccessibilityRowsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityRowsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRulerMarkerRole'
U32 env___get_NSAccessibilityRulerMarkerRole(void *_instance) {
    id _result = (id)NSAccessibilityRulerMarkerRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityRulerRole'
U32 env___get_NSAccessibilityRulerRole(void *_instance) {
    id _result = (id)NSAccessibilityRulerRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityScrollAreaRole'
U32 env___get_NSAccessibilityScrollAreaRole(void *_instance) {
    id _result = (id)NSAccessibilityScrollAreaRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityScrollBarRole'
U32 env___get_NSAccessibilityScrollBarRole(void *_instance) {
    id _result = (id)NSAccessibilityScrollBarRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySearchButtonAttribute'
U32 env___get_NSAccessibilitySearchButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySearchButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySearchFieldSubrole'
U32 env___get_NSAccessibilitySearchFieldSubrole(void *_instance) {
    id _result = (id)NSAccessibilitySearchFieldSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySearchMenuAttribute'
U32 env___get_NSAccessibilitySearchMenuAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySearchMenuAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySecureTextFieldSubrole'
U32 env___get_NSAccessibilitySecureTextFieldSubrole(void *_instance) {
    id _result = (id)NSAccessibilitySecureTextFieldSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedAttribute'
U32 env___get_NSAccessibilitySelectedAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySelectedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedChildrenAttribute'
U32 env___get_NSAccessibilitySelectedChildrenAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySelectedChildrenAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedChildrenChangedNotification'
U32 env___get_NSAccessibilitySelectedChildrenChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilitySelectedChildrenChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedColumnsAttribute'
U32 env___get_NSAccessibilitySelectedColumnsAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySelectedColumnsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedColumnsChangedNotification'
U32 env___get_NSAccessibilitySelectedColumnsChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilitySelectedColumnsChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedRowsAttribute'
U32 env___get_NSAccessibilitySelectedRowsAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySelectedRowsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedRowsChangedNotification'
U32 env___get_NSAccessibilitySelectedRowsChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilitySelectedRowsChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedTextAttribute'
U32 env___get_NSAccessibilitySelectedTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySelectedTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedTextChangedNotification'
U32 env___get_NSAccessibilitySelectedTextChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilitySelectedTextChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySelectedTextRangeAttribute'
U32 env___get_NSAccessibilitySelectedTextRangeAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySelectedTextRangeAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityServesAsTitleForUIElementsAttribute'
U32 env___get_NSAccessibilityServesAsTitleForUIElementsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityServesAsTitleForUIElementsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityShadowTextAttribute'
U32 env___get_NSAccessibilityShadowTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityShadowTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySharedCharacterRangeAttribute'
U32 env___get_NSAccessibilitySharedCharacterRangeAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySharedCharacterRangeAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySharedTextUIElementsAttribute'
U32 env___get_NSAccessibilitySharedTextUIElementsAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySharedTextUIElementsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySheetCreatedNotification'
U32 env___get_NSAccessibilitySheetCreatedNotification(void *_instance) {
    id _result = (id)NSAccessibilitySheetCreatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySheetRole'
U32 env___get_NSAccessibilitySheetRole(void *_instance) {
    id _result = (id)NSAccessibilitySheetRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityShowMenuAction'
U32 env___get_NSAccessibilityShowMenuAction(void *_instance) {
    id _result = (id)NSAccessibilityShowMenuAction;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityShownMenuAttribute'
U32 env___get_NSAccessibilityShownMenuAttribute(void *_instance) {
    id _result = (id)NSAccessibilityShownMenuAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySizeAttribute'
U32 env___get_NSAccessibilitySizeAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySizeAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySliderRole'
U32 env___get_NSAccessibilitySliderRole(void *_instance) {
    id _result = (id)NSAccessibilitySliderRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySortButtonRole'
U32 env___get_NSAccessibilitySortButtonRole(void *_instance) {
    id _result = (id)NSAccessibilitySortButtonRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySortDirectionAttribute'
U32 env___get_NSAccessibilitySortDirectionAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySortDirectionAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySplitGroupRole'
U32 env___get_NSAccessibilitySplitGroupRole(void *_instance) {
    id _result = (id)NSAccessibilitySplitGroupRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySplitterRole'
U32 env___get_NSAccessibilitySplitterRole(void *_instance) {
    id _result = (id)NSAccessibilitySplitterRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySplittersAttribute'
U32 env___get_NSAccessibilitySplittersAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySplittersAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityStandardWindowSubrole'
U32 env___get_NSAccessibilityStandardWindowSubrole(void *_instance) {
    id _result = (id)NSAccessibilityStandardWindowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityStaticTextRole'
U32 env___get_NSAccessibilityStaticTextRole(void *_instance) {
    id _result = (id)NSAccessibilityStaticTextRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityStrikethroughColorTextAttribute'
U32 env___get_NSAccessibilityStrikethroughColorTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityStrikethroughColorTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityStrikethroughTextAttribute'
U32 env___get_NSAccessibilityStrikethroughTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityStrikethroughTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityStringForRangeParameterizedAttribute'
U32 env___get_NSAccessibilityStringForRangeParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityStringForRangeParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityStyleRangeForIndexParameterizedAttribute'
U32 env___get_NSAccessibilityStyleRangeForIndexParameterizedAttribute(void *_instance) {
    id _result = (id)NSAccessibilityStyleRangeForIndexParameterizedAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySubroleAttribute'
U32 env___get_NSAccessibilitySubroleAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySubroleAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySuperscriptTextAttribute'
U32 env___get_NSAccessibilitySuperscriptTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilitySuperscriptTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySystemDialogSubrole'
U32 env___get_NSAccessibilitySystemDialogSubrole(void *_instance) {
    id _result = (id)NSAccessibilitySystemDialogSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySystemFloatingWindowSubrole'
U32 env___get_NSAccessibilitySystemFloatingWindowSubrole(void *_instance) {
    id _result = (id)NSAccessibilitySystemFloatingWindowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilitySystemWideRole'
U32 env___get_NSAccessibilitySystemWideRole(void *_instance) {
    id _result = (id)NSAccessibilitySystemWideRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTabGroupRole'
U32 env___get_NSAccessibilityTabGroupRole(void *_instance) {
    id _result = (id)NSAccessibilityTabGroupRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTableRole'
U32 env___get_NSAccessibilityTableRole(void *_instance) {
    id _result = (id)NSAccessibilityTableRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTableRowSubrole'
U32 env___get_NSAccessibilityTableRowSubrole(void *_instance) {
    id _result = (id)NSAccessibilityTableRowSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTabsAttribute'
U32 env___get_NSAccessibilityTabsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityTabsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTailIndentMarkerTypeValue'
U32 env___get_NSAccessibilityTailIndentMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityTailIndentMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTextAreaRole'
U32 env___get_NSAccessibilityTextAreaRole(void *_instance) {
    id _result = (id)NSAccessibilityTextAreaRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTextAttachmentSubrole'
U32 env___get_NSAccessibilityTextAttachmentSubrole(void *_instance) {
    id _result = (id)NSAccessibilityTextAttachmentSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTextFieldRole'
U32 env___get_NSAccessibilityTextFieldRole(void *_instance) {
    id _result = (id)NSAccessibilityTextFieldRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTextLinkSubrole'
U32 env___get_NSAccessibilityTextLinkSubrole(void *_instance) {
    id _result = (id)NSAccessibilityTextLinkSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTitleAttribute'
U32 env___get_NSAccessibilityTitleAttribute(void *_instance) {
    id _result = (id)NSAccessibilityTitleAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTitleChangedNotification'
U32 env___get_NSAccessibilityTitleChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilityTitleChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTitleUIElementAttribute'
U32 env___get_NSAccessibilityTitleUIElementAttribute(void *_instance) {
    id _result = (id)NSAccessibilityTitleUIElementAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityToolbarButtonAttribute'
U32 env___get_NSAccessibilityToolbarButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityToolbarButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityToolbarButtonSubrole'
U32 env___get_NSAccessibilityToolbarButtonSubrole(void *_instance) {
    id _result = (id)NSAccessibilityToolbarButtonSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityToolbarRole'
U32 env___get_NSAccessibilityToolbarRole(void *_instance) {
    id _result = (id)NSAccessibilityToolbarRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityTopLevelUIElementAttribute'
U32 env___get_NSAccessibilityTopLevelUIElementAttribute(void *_instance) {
    id _result = (id)NSAccessibilityTopLevelUIElementAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUIElementDestroyedNotification'
U32 env___get_NSAccessibilityUIElementDestroyedNotification(void *_instance) {
    id _result = (id)NSAccessibilityUIElementDestroyedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityURLAttribute'
U32 env___get_NSAccessibilityURLAttribute(void *_instance) {
    id _result = (id)NSAccessibilityURLAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnderlineColorTextAttribute'
U32 env___get_NSAccessibilityUnderlineColorTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityUnderlineColorTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnderlineTextAttribute'
U32 env___get_NSAccessibilityUnderlineTextAttribute(void *_instance) {
    id _result = (id)NSAccessibilityUnderlineTextAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnitDescriptionAttribute'
U32 env___get_NSAccessibilityUnitDescriptionAttribute(void *_instance) {
    id _result = (id)NSAccessibilityUnitDescriptionAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnitsAttribute'
U32 env___get_NSAccessibilityUnitsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityUnitsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnknownMarkerTypeValue'
U32 env___get_NSAccessibilityUnknownMarkerTypeValue(void *_instance) {
    id _result = (id)NSAccessibilityUnknownMarkerTypeValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnknownRole'
U32 env___get_NSAccessibilityUnknownRole(void *_instance) {
    id _result = (id)NSAccessibilityUnknownRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnknownSortDirectionValue'
U32 env___get_NSAccessibilityUnknownSortDirectionValue(void *_instance) {
    id _result = (id)NSAccessibilityUnknownSortDirectionValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnknownSubrole'
U32 env___get_NSAccessibilityUnknownSubrole(void *_instance) {
    id _result = (id)NSAccessibilityUnknownSubrole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityUnknownUnitValue'
U32 env___get_NSAccessibilityUnknownUnitValue(void *_instance) {
    id _result = (id)NSAccessibilityUnknownUnitValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityValueAttribute'
U32 env___get_NSAccessibilityValueAttribute(void *_instance) {
    id _result = (id)NSAccessibilityValueAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityValueChangedNotification'
U32 env___get_NSAccessibilityValueChangedNotification(void *_instance) {
    id _result = (id)NSAccessibilityValueChangedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityValueIndicatorRole'
U32 env___get_NSAccessibilityValueIndicatorRole(void *_instance) {
    id _result = (id)NSAccessibilityValueIndicatorRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVerticalOrientationValue'
U32 env___get_NSAccessibilityVerticalOrientationValue(void *_instance) {
    id _result = (id)NSAccessibilityVerticalOrientationValue;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVerticalScrollBarAttribute'
U32 env___get_NSAccessibilityVerticalScrollBarAttribute(void *_instance) {
    id _result = (id)NSAccessibilityVerticalScrollBarAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVisibleCharacterRangeAttribute'
U32 env___get_NSAccessibilityVisibleCharacterRangeAttribute(void *_instance) {
    id _result = (id)NSAccessibilityVisibleCharacterRangeAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVisibleChildrenAttribute'
U32 env___get_NSAccessibilityVisibleChildrenAttribute(void *_instance) {
    id _result = (id)NSAccessibilityVisibleChildrenAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVisibleColumnsAttribute'
U32 env___get_NSAccessibilityVisibleColumnsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityVisibleColumnsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVisibleNameKey'
U32 env___get_NSAccessibilityVisibleNameKey(void *_instance) {
    id _result = (id)NSAccessibilityVisibleNameKey;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityVisibleRowsAttribute'
U32 env___get_NSAccessibilityVisibleRowsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityVisibleRowsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowAttribute'
U32 env___get_NSAccessibilityWindowAttribute(void *_instance) {
    id _result = (id)NSAccessibilityWindowAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowCreatedNotification'
U32 env___get_NSAccessibilityWindowCreatedNotification(void *_instance) {
    id _result = (id)NSAccessibilityWindowCreatedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowDeminiaturizedNotification'
U32 env___get_NSAccessibilityWindowDeminiaturizedNotification(void *_instance) {
    id _result = (id)NSAccessibilityWindowDeminiaturizedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowMiniaturizedNotification'
U32 env___get_NSAccessibilityWindowMiniaturizedNotification(void *_instance) {
    id _result = (id)NSAccessibilityWindowMiniaturizedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowMovedNotification'
U32 env___get_NSAccessibilityWindowMovedNotification(void *_instance) {
    id _result = (id)NSAccessibilityWindowMovedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowResizedNotification'
U32 env___get_NSAccessibilityWindowResizedNotification(void *_instance) {
    id _result = (id)NSAccessibilityWindowResizedNotification;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowRole'
U32 env___get_NSAccessibilityWindowRole(void *_instance) {
    id _result = (id)NSAccessibilityWindowRole;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityWindowsAttribute'
U32 env___get_NSAccessibilityWindowsAttribute(void *_instance) {
    id _result = (id)NSAccessibilityWindowsAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityZoomButtonAttribute'
U32 env___get_NSAccessibilityZoomButtonAttribute(void *_instance) {
    id _result = (id)NSAccessibilityZoomButtonAttribute;
    return (U32)_result;
}

// getter for constant 'NSAccessibilityZoomButtonSubrole'
U32 env___get_NSAccessibilityZoomButtonSubrole(void *_instance) {
    id _result = (id)NSAccessibilityZoomButtonSubrole;
    return (U32)_result;
}

// getter for constant 'NSAlignmentBinding'
U32 env___get_NSAlignmentBinding(void *_instance) {
    id _result = (id)NSAlignmentBinding;
    return (U32)_result;
}

// setter for constant 'NSAlignmentBinding'
void env___set_NSAlignmentBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAlignmentBinding = _t1;
}

// getter for constant 'NSAllowsEditingMultipleValuesSelectionBindingOption'
U32 env___get_NSAllowsEditingMultipleValuesSelectionBindingOption(void *_instance) {
    id _result = (id)NSAllowsEditingMultipleValuesSelectionBindingOption;
    return (U32)_result;
}

// setter for constant 'NSAllowsEditingMultipleValuesSelectionBindingOption'
void env___set_NSAllowsEditingMultipleValuesSelectionBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAllowsEditingMultipleValuesSelectionBindingOption = _t1;
}

// getter for constant 'NSAllowsNullArgumentBindingOption'
U32 env___get_NSAllowsNullArgumentBindingOption(void *_instance) {
    id _result = (id)NSAllowsNullArgumentBindingOption;
    return (U32)_result;
}

// setter for constant 'NSAllowsNullArgumentBindingOption'
void env___set_NSAllowsNullArgumentBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAllowsNullArgumentBindingOption = _t1;
}

// getter for constant 'NSAlternateImageBinding'
U32 env___get_NSAlternateImageBinding(void *_instance) {
    id _result = (id)NSAlternateImageBinding;
    return (U32)_result;
}

// setter for constant 'NSAlternateImageBinding'
void env___set_NSAlternateImageBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAlternateImageBinding = _t1;
}

// getter for constant 'NSAlternateTitleBinding'
U32 env___get_NSAlternateTitleBinding(void *_instance) {
    id _result = (id)NSAlternateTitleBinding;
    return (U32)_result;
}

// setter for constant 'NSAlternateTitleBinding'
void env___set_NSAlternateTitleBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAlternateTitleBinding = _t1;
}

// getter for constant 'NSAlwaysPresentsApplicationModalAlertsBindingOption'
U32 env___get_NSAlwaysPresentsApplicationModalAlertsBindingOption(void *_instance) {
    id _result = (id)NSAlwaysPresentsApplicationModalAlertsBindingOption;
    return (U32)_result;
}

// setter for constant 'NSAlwaysPresentsApplicationModalAlertsBindingOption'
void env___set_NSAlwaysPresentsApplicationModalAlertsBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAlwaysPresentsApplicationModalAlertsBindingOption = _t1;
}

// getter for constant 'NSAnimateBinding'
U32 env___get_NSAnimateBinding(void *_instance) {
    id _result = (id)NSAnimateBinding;
    return (U32)_result;
}

// setter for constant 'NSAnimateBinding'
void env___set_NSAnimateBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAnimateBinding = _t1;
}

// getter for constant 'NSAnimationDelayBinding'
U32 env___get_NSAnimationDelayBinding(void *_instance) {
    id _result = (id)NSAnimationDelayBinding;
    return (U32)_result;
}

// setter for constant 'NSAnimationDelayBinding'
void env___set_NSAnimationDelayBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAnimationDelayBinding = _t1;
}

// getter for constant 'NSAnimationProgressMark'
U32 env___get_NSAnimationProgressMark(void *_instance) {
    id _result = (id)NSAnimationProgressMark;
    return (U32)_result;
}

// setter for constant 'NSAnimationProgressMark'
void env___set_NSAnimationProgressMark(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAnimationProgressMark = _t1;
}

// getter for constant 'NSAnimationProgressMarkNotification'
U32 env___get_NSAnimationProgressMarkNotification(void *_instance) {
    id _result = (id)NSAnimationProgressMarkNotification;
    return (U32)_result;
}

// setter for constant 'NSAnimationProgressMarkNotification'
void env___set_NSAnimationProgressMarkNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAnimationProgressMarkNotification = _t1;
}

// getter for constant 'NSAntialiasThresholdChangedNotification'
U32 env___get_NSAntialiasThresholdChangedNotification(void *_instance) {
    id _result = (id)NSAntialiasThresholdChangedNotification;
    return (U32)_result;
}

// setter for constant 'NSAntialiasThresholdChangedNotification'
void env___set_NSAntialiasThresholdChangedNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAntialiasThresholdChangedNotification = _t1;
}

// getter for constant 'NSApp'
U32 env___get_NSApp(void *_instance) {
    id _result = (id)NSApp;
    return (U32)_result;
}

// setter for constant 'NSApp'
void env___set_NSApp(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApp = _t1;
}

// getter for constant 'NSAppKitIgnoredException'
U32 env___get_NSAppKitIgnoredException(void *_instance) {
    id _result = (id)NSAppKitIgnoredException;
    return (U32)_result;
}

// setter for constant 'NSAppKitIgnoredException'
void env___set_NSAppKitIgnoredException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAppKitIgnoredException = _t1;
}

// getter for constant 'NSAppKitVersionNumber'
F64 env___get_NSAppKitVersionNumber(void *_instance) {
    double _result = (double)NSAppKitVersionNumber;
    return (F64)_result;
}

// getter for constant 'NSAppKitVirtualMemoryException'
U32 env___get_NSAppKitVirtualMemoryException(void *_instance) {
    id _result = (id)NSAppKitVirtualMemoryException;
    return (U32)_result;
}

// setter for constant 'NSAppKitVirtualMemoryException'
void env___set_NSAppKitVirtualMemoryException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAppKitVirtualMemoryException = _t1;
}

// getter for constant 'NSApplicationDidBecomeActiveNotification'
U32 env___get_NSApplicationDidBecomeActiveNotification(void *_instance) {
    id _result = (id)NSApplicationDidBecomeActiveNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidBecomeActiveNotification'
void env___set_NSApplicationDidBecomeActiveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidBecomeActiveNotification = _t1;
}

// getter for constant 'NSApplicationDidChangeScreenParametersNotification'
U32 env___get_NSApplicationDidChangeScreenParametersNotification(void *_instance) {
    id _result = (id)NSApplicationDidChangeScreenParametersNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidChangeScreenParametersNotification'
void env___set_NSApplicationDidChangeScreenParametersNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidChangeScreenParametersNotification = _t1;
}

// getter for constant 'NSApplicationDidFinishLaunchingNotification'
U32 env___get_NSApplicationDidFinishLaunchingNotification(void *_instance) {
    id _result = (id)NSApplicationDidFinishLaunchingNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidFinishLaunchingNotification'
void env___set_NSApplicationDidFinishLaunchingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidFinishLaunchingNotification = _t1;
}

// getter for constant 'NSApplicationDidHideNotification'
U32 env___get_NSApplicationDidHideNotification(void *_instance) {
    id _result = (id)NSApplicationDidHideNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidHideNotification'
void env___set_NSApplicationDidHideNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidHideNotification = _t1;
}

// getter for constant 'NSApplicationDidResignActiveNotification'
U32 env___get_NSApplicationDidResignActiveNotification(void *_instance) {
    id _result = (id)NSApplicationDidResignActiveNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidResignActiveNotification'
void env___set_NSApplicationDidResignActiveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidResignActiveNotification = _t1;
}

// getter for constant 'NSApplicationDidUnhideNotification'
U32 env___get_NSApplicationDidUnhideNotification(void *_instance) {
    id _result = (id)NSApplicationDidUnhideNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidUnhideNotification'
void env___set_NSApplicationDidUnhideNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidUnhideNotification = _t1;
}

// getter for constant 'NSApplicationDidUpdateNotification'
U32 env___get_NSApplicationDidUpdateNotification(void *_instance) {
    id _result = (id)NSApplicationDidUpdateNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationDidUpdateNotification'
void env___set_NSApplicationDidUpdateNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationDidUpdateNotification = _t1;
}

// getter for constant 'NSApplicationFileType'
U32 env___get_NSApplicationFileType(void *_instance) {
    id _result = (id)NSApplicationFileType;
    return (U32)_result;
}

// setter for constant 'NSApplicationFileType'
void env___set_NSApplicationFileType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationFileType = _t1;
}

// getter for constant 'NSApplicationWillBecomeActiveNotification'
U32 env___get_NSApplicationWillBecomeActiveNotification(void *_instance) {
    id _result = (id)NSApplicationWillBecomeActiveNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillBecomeActiveNotification'
void env___set_NSApplicationWillBecomeActiveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillBecomeActiveNotification = _t1;
}

// getter for constant 'NSApplicationWillFinishLaunchingNotification'
U32 env___get_NSApplicationWillFinishLaunchingNotification(void *_instance) {
    id _result = (id)NSApplicationWillFinishLaunchingNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillFinishLaunchingNotification'
void env___set_NSApplicationWillFinishLaunchingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillFinishLaunchingNotification = _t1;
}

// getter for constant 'NSApplicationWillHideNotification'
U32 env___get_NSApplicationWillHideNotification(void *_instance) {
    id _result = (id)NSApplicationWillHideNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillHideNotification'
void env___set_NSApplicationWillHideNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillHideNotification = _t1;
}

// getter for constant 'NSApplicationWillResignActiveNotification'
U32 env___get_NSApplicationWillResignActiveNotification(void *_instance) {
    id _result = (id)NSApplicationWillResignActiveNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillResignActiveNotification'
void env___set_NSApplicationWillResignActiveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillResignActiveNotification = _t1;
}

// getter for constant 'NSApplicationWillTerminateNotification'
U32 env___get_NSApplicationWillTerminateNotification(void *_instance) {
    id _result = (id)NSApplicationWillTerminateNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillTerminateNotification'
void env___set_NSApplicationWillTerminateNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillTerminateNotification = _t1;
}

// getter for constant 'NSApplicationWillUnhideNotification'
U32 env___get_NSApplicationWillUnhideNotification(void *_instance) {
    id _result = (id)NSApplicationWillUnhideNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillUnhideNotification'
void env___set_NSApplicationWillUnhideNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillUnhideNotification = _t1;
}

// getter for constant 'NSApplicationWillUpdateNotification'
U32 env___get_NSApplicationWillUpdateNotification(void *_instance) {
    id _result = (id)NSApplicationWillUpdateNotification;
    return (U32)_result;
}

// setter for constant 'NSApplicationWillUpdateNotification'
void env___set_NSApplicationWillUpdateNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSApplicationWillUpdateNotification = _t1;
}

// getter for constant 'NSArgumentBinding'
U32 env___get_NSArgumentBinding(void *_instance) {
    id _result = (id)NSArgumentBinding;
    return (U32)_result;
}

// setter for constant 'NSArgumentBinding'
void env___set_NSArgumentBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSArgumentBinding = _t1;
}

// getter for constant 'NSAttachmentAttributeName'
U32 env___get_NSAttachmentAttributeName(void *_instance) {
    id _result = (id)NSAttachmentAttributeName;
    return (U32)_result;
}

// setter for constant 'NSAttachmentAttributeName'
void env___set_NSAttachmentAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAttachmentAttributeName = _t1;
}

// getter for constant 'NSAttributedStringBinding'
U32 env___get_NSAttributedStringBinding(void *_instance) {
    id _result = (id)NSAttributedStringBinding;
    return (U32)_result;
}

// setter for constant 'NSAttributedStringBinding'
void env___set_NSAttributedStringBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAttributedStringBinding = _t1;
}

// getter for constant 'NSAuthorDocumentAttribute'
U32 env___get_NSAuthorDocumentAttribute(void *_instance) {
    id _result = (id)NSAuthorDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSAuthorDocumentAttribute'
void env___set_NSAuthorDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSAuthorDocumentAttribute = _t1;
}

// getter for constant 'NSBackgroundColorAttributeName'
U32 env___get_NSBackgroundColorAttributeName(void *_instance) {
    id _result = (id)NSBackgroundColorAttributeName;
    return (U32)_result;
}

// setter for constant 'NSBackgroundColorAttributeName'
void env___set_NSBackgroundColorAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBackgroundColorAttributeName = _t1;
}

// getter for constant 'NSBackgroundColorDocumentAttribute'
U32 env___get_NSBackgroundColorDocumentAttribute(void *_instance) {
    id _result = (id)NSBackgroundColorDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSBackgroundColorDocumentAttribute'
void env___set_NSBackgroundColorDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBackgroundColorDocumentAttribute = _t1;
}

// getter for constant 'NSBadBitmapParametersException'
U32 env___get_NSBadBitmapParametersException(void *_instance) {
    id _result = (id)NSBadBitmapParametersException;
    return (U32)_result;
}

// setter for constant 'NSBadBitmapParametersException'
void env___set_NSBadBitmapParametersException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBadBitmapParametersException = _t1;
}

// getter for constant 'NSBadComparisonException'
U32 env___get_NSBadComparisonException(void *_instance) {
    id _result = (id)NSBadComparisonException;
    return (U32)_result;
}

// setter for constant 'NSBadComparisonException'
void env___set_NSBadComparisonException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBadComparisonException = _t1;
}

// getter for constant 'NSBadRTFColorTableException'
U32 env___get_NSBadRTFColorTableException(void *_instance) {
    id _result = (id)NSBadRTFColorTableException;
    return (U32)_result;
}

// setter for constant 'NSBadRTFColorTableException'
void env___set_NSBadRTFColorTableException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBadRTFColorTableException = _t1;
}

// getter for constant 'NSBadRTFDirectiveException'
U32 env___get_NSBadRTFDirectiveException(void *_instance) {
    id _result = (id)NSBadRTFDirectiveException;
    return (U32)_result;
}

// setter for constant 'NSBadRTFDirectiveException'
void env___set_NSBadRTFDirectiveException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBadRTFDirectiveException = _t1;
}

// getter for constant 'NSBadRTFFontTableException'
U32 env___get_NSBadRTFFontTableException(void *_instance) {
    id _result = (id)NSBadRTFFontTableException;
    return (U32)_result;
}

// setter for constant 'NSBadRTFFontTableException'
void env___set_NSBadRTFFontTableException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBadRTFFontTableException = _t1;
}

// getter for constant 'NSBadRTFStyleSheetException'
U32 env___get_NSBadRTFStyleSheetException(void *_instance) {
    id _result = (id)NSBadRTFStyleSheetException;
    return (U32)_result;
}

// setter for constant 'NSBadRTFStyleSheetException'
void env___set_NSBadRTFStyleSheetException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBadRTFStyleSheetException = _t1;
}

// getter for constant 'NSBaseURLDocumentOption'
U32 env___get_NSBaseURLDocumentOption(void *_instance) {
    id _result = (id)NSBaseURLDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSBaseURLDocumentOption'
void env___set_NSBaseURLDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBaseURLDocumentOption = _t1;
}

// getter for constant 'NSBaselineOffsetAttributeName'
U32 env___get_NSBaselineOffsetAttributeName(void *_instance) {
    id _result = (id)NSBaselineOffsetAttributeName;
    return (U32)_result;
}

// setter for constant 'NSBaselineOffsetAttributeName'
void env___set_NSBaselineOffsetAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBaselineOffsetAttributeName = _t1;
}

// getter for constant 'NSBlack'
F32 env___get_NSBlack(void *_instance) {
    float _result = (float)NSBlack;
    return (F32)_result;
}

// getter for constant 'NSBottomMarginDocumentAttribute'
U32 env___get_NSBottomMarginDocumentAttribute(void *_instance) {
    id _result = (id)NSBottomMarginDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSBottomMarginDocumentAttribute'
void env___set_NSBottomMarginDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBottomMarginDocumentAttribute = _t1;
}

// getter for constant 'NSBrowserColumnConfigurationDidChangeNotification'
U32 env___get_NSBrowserColumnConfigurationDidChangeNotification(void *_instance) {
    id _result = (id)NSBrowserColumnConfigurationDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSBrowserColumnConfigurationDidChangeNotification'
void env___set_NSBrowserColumnConfigurationDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBrowserColumnConfigurationDidChangeNotification = _t1;
}

// getter for constant 'NSBrowserIllegalDelegateException'
U32 env___get_NSBrowserIllegalDelegateException(void *_instance) {
    id _result = (id)NSBrowserIllegalDelegateException;
    return (U32)_result;
}

// setter for constant 'NSBrowserIllegalDelegateException'
void env___set_NSBrowserIllegalDelegateException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSBrowserIllegalDelegateException = _t1;
}

// getter for constant 'NSCalibratedBlackColorSpace'
U32 env___get_NSCalibratedBlackColorSpace(void *_instance) {
    id _result = (id)NSCalibratedBlackColorSpace;
    return (U32)_result;
}

// setter for constant 'NSCalibratedBlackColorSpace'
void env___set_NSCalibratedBlackColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCalibratedBlackColorSpace = _t1;
}

// getter for constant 'NSCalibratedRGBColorSpace'
U32 env___get_NSCalibratedRGBColorSpace(void *_instance) {
    id _result = (id)NSCalibratedRGBColorSpace;
    return (U32)_result;
}

// setter for constant 'NSCalibratedRGBColorSpace'
void env___set_NSCalibratedRGBColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCalibratedRGBColorSpace = _t1;
}

// getter for constant 'NSCalibratedWhiteColorSpace'
U32 env___get_NSCalibratedWhiteColorSpace(void *_instance) {
    id _result = (id)NSCalibratedWhiteColorSpace;
    return (U32)_result;
}

// setter for constant 'NSCalibratedWhiteColorSpace'
void env___set_NSCalibratedWhiteColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCalibratedWhiteColorSpace = _t1;
}

// getter for constant 'NSCharacterEncodingDocumentAttribute'
U32 env___get_NSCharacterEncodingDocumentAttribute(void *_instance) {
    id _result = (id)NSCharacterEncodingDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSCharacterEncodingDocumentAttribute'
void env___set_NSCharacterEncodingDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCharacterEncodingDocumentAttribute = _t1;
}

// getter for constant 'NSCharacterEncodingDocumentOption'
U32 env___get_NSCharacterEncodingDocumentOption(void *_instance) {
    id _result = (id)NSCharacterEncodingDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSCharacterEncodingDocumentOption'
void env___set_NSCharacterEncodingDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCharacterEncodingDocumentOption = _t1;
}

// getter for constant 'NSCharacterShapeAttributeName'
U32 env___get_NSCharacterShapeAttributeName(void *_instance) {
    id _result = (id)NSCharacterShapeAttributeName;
    return (U32)_result;
}

// setter for constant 'NSCharacterShapeAttributeName'
void env___set_NSCharacterShapeAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCharacterShapeAttributeName = _t1;
}

// getter for constant 'NSCocoaVersionDocumentAttribute'
U32 env___get_NSCocoaVersionDocumentAttribute(void *_instance) {
    id _result = (id)NSCocoaVersionDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSCocoaVersionDocumentAttribute'
void env___set_NSCocoaVersionDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCocoaVersionDocumentAttribute = _t1;
}

// getter for constant 'NSColorListDidChangeNotification'
U32 env___get_NSColorListDidChangeNotification(void *_instance) {
    id _result = (id)NSColorListDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSColorListDidChangeNotification'
void env___set_NSColorListDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSColorListDidChangeNotification = _t1;
}

// getter for constant 'NSColorListIOException'
U32 env___get_NSColorListIOException(void *_instance) {
    id _result = (id)NSColorListIOException;
    return (U32)_result;
}

// setter for constant 'NSColorListIOException'
void env___set_NSColorListIOException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSColorListIOException = _t1;
}

// getter for constant 'NSColorListNotEditableException'
U32 env___get_NSColorListNotEditableException(void *_instance) {
    id _result = (id)NSColorListNotEditableException;
    return (U32)_result;
}

// setter for constant 'NSColorListNotEditableException'
void env___set_NSColorListNotEditableException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSColorListNotEditableException = _t1;
}

// getter for constant 'NSColorPanelColorDidChangeNotification'
U32 env___get_NSColorPanelColorDidChangeNotification(void *_instance) {
    id _result = (id)NSColorPanelColorDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSColorPanelColorDidChangeNotification'
void env___set_NSColorPanelColorDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSColorPanelColorDidChangeNotification = _t1;
}

// getter for constant 'NSColorPboardType'
U32 env___get_NSColorPboardType(void *_instance) {
    id _result = (id)NSColorPboardType;
    return (U32)_result;
}

// setter for constant 'NSColorPboardType'
void env___set_NSColorPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSColorPboardType = _t1;
}

// getter for constant 'NSComboBoxSelectionDidChangeNotification'
U32 env___get_NSComboBoxSelectionDidChangeNotification(void *_instance) {
    id _result = (id)NSComboBoxSelectionDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSComboBoxSelectionDidChangeNotification'
void env___set_NSComboBoxSelectionDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSComboBoxSelectionDidChangeNotification = _t1;
}

// getter for constant 'NSComboBoxSelectionIsChangingNotification'
U32 env___get_NSComboBoxSelectionIsChangingNotification(void *_instance) {
    id _result = (id)NSComboBoxSelectionIsChangingNotification;
    return (U32)_result;
}

// setter for constant 'NSComboBoxSelectionIsChangingNotification'
void env___set_NSComboBoxSelectionIsChangingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSComboBoxSelectionIsChangingNotification = _t1;
}

// getter for constant 'NSComboBoxWillDismissNotification'
U32 env___get_NSComboBoxWillDismissNotification(void *_instance) {
    id _result = (id)NSComboBoxWillDismissNotification;
    return (U32)_result;
}

// setter for constant 'NSComboBoxWillDismissNotification'
void env___set_NSComboBoxWillDismissNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSComboBoxWillDismissNotification = _t1;
}

// getter for constant 'NSComboBoxWillPopUpNotification'
U32 env___get_NSComboBoxWillPopUpNotification(void *_instance) {
    id _result = (id)NSComboBoxWillPopUpNotification;
    return (U32)_result;
}

// setter for constant 'NSComboBoxWillPopUpNotification'
void env___set_NSComboBoxWillPopUpNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSComboBoxWillPopUpNotification = _t1;
}

// getter for constant 'NSCommentDocumentAttribute'
U32 env___get_NSCommentDocumentAttribute(void *_instance) {
    id _result = (id)NSCommentDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSCommentDocumentAttribute'
void env___set_NSCommentDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCommentDocumentAttribute = _t1;
}

// getter for constant 'NSCompanyDocumentAttribute'
U32 env___get_NSCompanyDocumentAttribute(void *_instance) {
    id _result = (id)NSCompanyDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSCompanyDocumentAttribute'
void env___set_NSCompanyDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCompanyDocumentAttribute = _t1;
}

// getter for constant 'NSConditionallySetsEditableBindingOption'
U32 env___get_NSConditionallySetsEditableBindingOption(void *_instance) {
    id _result = (id)NSConditionallySetsEditableBindingOption;
    return (U32)_result;
}

// setter for constant 'NSConditionallySetsEditableBindingOption'
void env___set_NSConditionallySetsEditableBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSConditionallySetsEditableBindingOption = _t1;
}

// getter for constant 'NSConditionallySetsEnabledBindingOption'
U32 env___get_NSConditionallySetsEnabledBindingOption(void *_instance) {
    id _result = (id)NSConditionallySetsEnabledBindingOption;
    return (U32)_result;
}

// setter for constant 'NSConditionallySetsEnabledBindingOption'
void env___set_NSConditionallySetsEnabledBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSConditionallySetsEnabledBindingOption = _t1;
}

// getter for constant 'NSConditionallySetsHiddenBindingOption'
U32 env___get_NSConditionallySetsHiddenBindingOption(void *_instance) {
    id _result = (id)NSConditionallySetsHiddenBindingOption;
    return (U32)_result;
}

// setter for constant 'NSConditionallySetsHiddenBindingOption'
void env___set_NSConditionallySetsHiddenBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSConditionallySetsHiddenBindingOption = _t1;
}

// getter for constant 'NSContentArrayBinding'
U32 env___get_NSContentArrayBinding(void *_instance) {
    id _result = (id)NSContentArrayBinding;
    return (U32)_result;
}

// setter for constant 'NSContentArrayBinding'
void env___set_NSContentArrayBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentArrayBinding = _t1;
}

// getter for constant 'NSContentArrayForMultipleSelectionBinding'
U32 env___get_NSContentArrayForMultipleSelectionBinding(void *_instance) {
    id _result = (id)NSContentArrayForMultipleSelectionBinding;
    return (U32)_result;
}

// setter for constant 'NSContentArrayForMultipleSelectionBinding'
void env___set_NSContentArrayForMultipleSelectionBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentArrayForMultipleSelectionBinding = _t1;
}

// getter for constant 'NSContentBinding'
U32 env___get_NSContentBinding(void *_instance) {
    id _result = (id)NSContentBinding;
    return (U32)_result;
}

// setter for constant 'NSContentBinding'
void env___set_NSContentBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentBinding = _t1;
}

// getter for constant 'NSContentHeightBinding'
U32 env___get_NSContentHeightBinding(void *_instance) {
    id _result = (id)NSContentHeightBinding;
    return (U32)_result;
}

// setter for constant 'NSContentHeightBinding'
void env___set_NSContentHeightBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentHeightBinding = _t1;
}

// getter for constant 'NSContentObjectBinding'
U32 env___get_NSContentObjectBinding(void *_instance) {
    id _result = (id)NSContentObjectBinding;
    return (U32)_result;
}

// setter for constant 'NSContentObjectBinding'
void env___set_NSContentObjectBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentObjectBinding = _t1;
}

// getter for constant 'NSContentObjectsBinding'
U32 env___get_NSContentObjectsBinding(void *_instance) {
    id _result = (id)NSContentObjectsBinding;
    return (U32)_result;
}

// setter for constant 'NSContentObjectsBinding'
void env___set_NSContentObjectsBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentObjectsBinding = _t1;
}

// getter for constant 'NSContentSetBinding'
U32 env___get_NSContentSetBinding(void *_instance) {
    id _result = (id)NSContentSetBinding;
    return (U32)_result;
}

// setter for constant 'NSContentSetBinding'
void env___set_NSContentSetBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentSetBinding = _t1;
}

// getter for constant 'NSContentValuesBinding'
U32 env___get_NSContentValuesBinding(void *_instance) {
    id _result = (id)NSContentValuesBinding;
    return (U32)_result;
}

// setter for constant 'NSContentValuesBinding'
void env___set_NSContentValuesBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentValuesBinding = _t1;
}

// getter for constant 'NSContentWidthBinding'
U32 env___get_NSContentWidthBinding(void *_instance) {
    id _result = (id)NSContentWidthBinding;
    return (U32)_result;
}

// setter for constant 'NSContentWidthBinding'
void env___set_NSContentWidthBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContentWidthBinding = _t1;
}

// getter for constant 'NSContextHelpModeDidActivateNotification'
U32 env___get_NSContextHelpModeDidActivateNotification(void *_instance) {
    id _result = (id)NSContextHelpModeDidActivateNotification;
    return (U32)_result;
}

// setter for constant 'NSContextHelpModeDidActivateNotification'
void env___set_NSContextHelpModeDidActivateNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContextHelpModeDidActivateNotification = _t1;
}

// getter for constant 'NSContextHelpModeDidDeactivateNotification'
U32 env___get_NSContextHelpModeDidDeactivateNotification(void *_instance) {
    id _result = (id)NSContextHelpModeDidDeactivateNotification;
    return (U32)_result;
}

// setter for constant 'NSContextHelpModeDidDeactivateNotification'
void env___set_NSContextHelpModeDidDeactivateNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContextHelpModeDidDeactivateNotification = _t1;
}

// getter for constant 'NSContinuouslyUpdatesValueBindingOption'
U32 env___get_NSContinuouslyUpdatesValueBindingOption(void *_instance) {
    id _result = (id)NSContinuouslyUpdatesValueBindingOption;
    return (U32)_result;
}

// setter for constant 'NSContinuouslyUpdatesValueBindingOption'
void env___set_NSContinuouslyUpdatesValueBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSContinuouslyUpdatesValueBindingOption = _t1;
}

// getter for constant 'NSControlTextDidBeginEditingNotification'
U32 env___get_NSControlTextDidBeginEditingNotification(void *_instance) {
    id _result = (id)NSControlTextDidBeginEditingNotification;
    return (U32)_result;
}

// setter for constant 'NSControlTextDidBeginEditingNotification'
void env___set_NSControlTextDidBeginEditingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSControlTextDidBeginEditingNotification = _t1;
}

// getter for constant 'NSControlTextDidChangeNotification'
U32 env___get_NSControlTextDidChangeNotification(void *_instance) {
    id _result = (id)NSControlTextDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSControlTextDidChangeNotification'
void env___set_NSControlTextDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSControlTextDidChangeNotification = _t1;
}

// getter for constant 'NSControlTextDidEndEditingNotification'
U32 env___get_NSControlTextDidEndEditingNotification(void *_instance) {
    id _result = (id)NSControlTextDidEndEditingNotification;
    return (U32)_result;
}

// setter for constant 'NSControlTextDidEndEditingNotification'
void env___set_NSControlTextDidEndEditingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSControlTextDidEndEditingNotification = _t1;
}

// getter for constant 'NSControlTintDidChangeNotification'
U32 env___get_NSControlTintDidChangeNotification(void *_instance) {
    id _result = (id)NSControlTintDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSControlTintDidChangeNotification'
void env___set_NSControlTintDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSControlTintDidChangeNotification = _t1;
}

// getter for constant 'NSConvertedDocumentAttribute'
U32 env___get_NSConvertedDocumentAttribute(void *_instance) {
    id _result = (id)NSConvertedDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSConvertedDocumentAttribute'
void env___set_NSConvertedDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSConvertedDocumentAttribute = _t1;
}

// getter for constant 'NSCopyrightDocumentAttribute'
U32 env___get_NSCopyrightDocumentAttribute(void *_instance) {
    id _result = (id)NSCopyrightDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSCopyrightDocumentAttribute'
void env___set_NSCopyrightDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCopyrightDocumentAttribute = _t1;
}

// getter for constant 'NSCreatesSortDescriptorBindingOption'
U32 env___get_NSCreatesSortDescriptorBindingOption(void *_instance) {
    id _result = (id)NSCreatesSortDescriptorBindingOption;
    return (U32)_result;
}

// setter for constant 'NSCreatesSortDescriptorBindingOption'
void env___set_NSCreatesSortDescriptorBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCreatesSortDescriptorBindingOption = _t1;
}

// getter for constant 'NSCreationTimeDocumentAttribute'
U32 env___get_NSCreationTimeDocumentAttribute(void *_instance) {
    id _result = (id)NSCreationTimeDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSCreationTimeDocumentAttribute'
void env___set_NSCreationTimeDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCreationTimeDocumentAttribute = _t1;
}

// getter for constant 'NSCriticalValueBinding'
U32 env___get_NSCriticalValueBinding(void *_instance) {
    id _result = (id)NSCriticalValueBinding;
    return (U32)_result;
}

// setter for constant 'NSCriticalValueBinding'
void env___set_NSCriticalValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCriticalValueBinding = _t1;
}

// getter for constant 'NSCursorAttributeName'
U32 env___get_NSCursorAttributeName(void *_instance) {
    id _result = (id)NSCursorAttributeName;
    return (U32)_result;
}

// setter for constant 'NSCursorAttributeName'
void env___set_NSCursorAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCursorAttributeName = _t1;
}

// getter for constant 'NSCustomColorSpace'
U32 env___get_NSCustomColorSpace(void *_instance) {
    id _result = (id)NSCustomColorSpace;
    return (U32)_result;
}

// setter for constant 'NSCustomColorSpace'
void env___set_NSCustomColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSCustomColorSpace = _t1;
}

// getter for constant 'NSDarkGray'
F32 env___get_NSDarkGray(void *_instance) {
    float _result = (float)NSDarkGray;
    return (F32)_result;
}

// getter for constant 'NSDataBinding'
U32 env___get_NSDataBinding(void *_instance) {
    id _result = (id)NSDataBinding;
    return (U32)_result;
}

// setter for constant 'NSDataBinding'
void env___set_NSDataBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDataBinding = _t1;
}

// getter for constant 'NSDefaultAttributesDocumentOption'
U32 env___get_NSDefaultAttributesDocumentOption(void *_instance) {
    id _result = (id)NSDefaultAttributesDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSDefaultAttributesDocumentOption'
void env___set_NSDefaultAttributesDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDefaultAttributesDocumentOption = _t1;
}

// getter for constant 'NSDefaultTabIntervalDocumentAttribute'
U32 env___get_NSDefaultTabIntervalDocumentAttribute(void *_instance) {
    id _result = (id)NSDefaultTabIntervalDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSDefaultTabIntervalDocumentAttribute'
void env___set_NSDefaultTabIntervalDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDefaultTabIntervalDocumentAttribute = _t1;
}

// getter for constant 'NSDeletesObjectsOnRemoveBindingsOption'
U32 env___get_NSDeletesObjectsOnRemoveBindingsOption(void *_instance) {
    id _result = (id)NSDeletesObjectsOnRemoveBindingsOption;
    return (U32)_result;
}

// setter for constant 'NSDeletesObjectsOnRemoveBindingsOption'
void env___set_NSDeletesObjectsOnRemoveBindingsOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeletesObjectsOnRemoveBindingsOption = _t1;
}

// getter for constant 'NSDeviceBitsPerSample'
U32 env___get_NSDeviceBitsPerSample(void *_instance) {
    id _result = (id)NSDeviceBitsPerSample;
    return (U32)_result;
}

// setter for constant 'NSDeviceBitsPerSample'
void env___set_NSDeviceBitsPerSample(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceBitsPerSample = _t1;
}

// getter for constant 'NSDeviceBlackColorSpace'
U32 env___get_NSDeviceBlackColorSpace(void *_instance) {
    id _result = (id)NSDeviceBlackColorSpace;
    return (U32)_result;
}

// setter for constant 'NSDeviceBlackColorSpace'
void env___set_NSDeviceBlackColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceBlackColorSpace = _t1;
}

// getter for constant 'NSDeviceCMYKColorSpace'
U32 env___get_NSDeviceCMYKColorSpace(void *_instance) {
    id _result = (id)NSDeviceCMYKColorSpace;
    return (U32)_result;
}

// setter for constant 'NSDeviceCMYKColorSpace'
void env___set_NSDeviceCMYKColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceCMYKColorSpace = _t1;
}

// getter for constant 'NSDeviceColorSpaceName'
U32 env___get_NSDeviceColorSpaceName(void *_instance) {
    id _result = (id)NSDeviceColorSpaceName;
    return (U32)_result;
}

// setter for constant 'NSDeviceColorSpaceName'
void env___set_NSDeviceColorSpaceName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceColorSpaceName = _t1;
}

// getter for constant 'NSDeviceIsPrinter'
U32 env___get_NSDeviceIsPrinter(void *_instance) {
    id _result = (id)NSDeviceIsPrinter;
    return (U32)_result;
}

// setter for constant 'NSDeviceIsPrinter'
void env___set_NSDeviceIsPrinter(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceIsPrinter = _t1;
}

// getter for constant 'NSDeviceIsScreen'
U32 env___get_NSDeviceIsScreen(void *_instance) {
    id _result = (id)NSDeviceIsScreen;
    return (U32)_result;
}

// setter for constant 'NSDeviceIsScreen'
void env___set_NSDeviceIsScreen(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceIsScreen = _t1;
}

// getter for constant 'NSDeviceRGBColorSpace'
U32 env___get_NSDeviceRGBColorSpace(void *_instance) {
    id _result = (id)NSDeviceRGBColorSpace;
    return (U32)_result;
}

// setter for constant 'NSDeviceRGBColorSpace'
void env___set_NSDeviceRGBColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceRGBColorSpace = _t1;
}

// getter for constant 'NSDeviceResolution'
U32 env___get_NSDeviceResolution(void *_instance) {
    id _result = (id)NSDeviceResolution;
    return (U32)_result;
}

// setter for constant 'NSDeviceResolution'
void env___set_NSDeviceResolution(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceResolution = _t1;
}

// getter for constant 'NSDeviceSize'
U32 env___get_NSDeviceSize(void *_instance) {
    id _result = (id)NSDeviceSize;
    return (U32)_result;
}

// setter for constant 'NSDeviceSize'
void env___set_NSDeviceSize(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceSize = _t1;
}

// getter for constant 'NSDeviceWhiteColorSpace'
U32 env___get_NSDeviceWhiteColorSpace(void *_instance) {
    id _result = (id)NSDeviceWhiteColorSpace;
    return (U32)_result;
}

// setter for constant 'NSDeviceWhiteColorSpace'
void env___set_NSDeviceWhiteColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDeviceWhiteColorSpace = _t1;
}

// getter for constant 'NSDirectoryFileType'
U32 env___get_NSDirectoryFileType(void *_instance) {
    id _result = (id)NSDirectoryFileType;
    return (U32)_result;
}

// setter for constant 'NSDirectoryFileType'
void env___set_NSDirectoryFileType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDirectoryFileType = _t1;
}

// getter for constant 'NSDisplayNameBindingOption'
U32 env___get_NSDisplayNameBindingOption(void *_instance) {
    id _result = (id)NSDisplayNameBindingOption;
    return (U32)_result;
}

// setter for constant 'NSDisplayNameBindingOption'
void env___set_NSDisplayNameBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDisplayNameBindingOption = _t1;
}

// getter for constant 'NSDisplayPatternBindingOption'
U32 env___get_NSDisplayPatternBindingOption(void *_instance) {
    id _result = (id)NSDisplayPatternBindingOption;
    return (U32)_result;
}

// setter for constant 'NSDisplayPatternBindingOption'
void env___set_NSDisplayPatternBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDisplayPatternBindingOption = _t1;
}

// getter for constant 'NSDisplayPatternTitleBinding'
U32 env___get_NSDisplayPatternTitleBinding(void *_instance) {
    id _result = (id)NSDisplayPatternTitleBinding;
    return (U32)_result;
}

// setter for constant 'NSDisplayPatternTitleBinding'
void env___set_NSDisplayPatternTitleBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDisplayPatternTitleBinding = _t1;
}

// getter for constant 'NSDisplayPatternValueBinding'
U32 env___get_NSDisplayPatternValueBinding(void *_instance) {
    id _result = (id)NSDisplayPatternValueBinding;
    return (U32)_result;
}

// setter for constant 'NSDisplayPatternValueBinding'
void env___set_NSDisplayPatternValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDisplayPatternValueBinding = _t1;
}

// getter for constant 'NSDocFormatTextDocumentType'
U32 env___get_NSDocFormatTextDocumentType(void *_instance) {
    id _result = (id)NSDocFormatTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSDocFormatTextDocumentType'
void env___set_NSDocFormatTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDocFormatTextDocumentType = _t1;
}

// getter for constant 'NSDocumentEditedBinding'
U32 env___get_NSDocumentEditedBinding(void *_instance) {
    id _result = (id)NSDocumentEditedBinding;
    return (U32)_result;
}

// setter for constant 'NSDocumentEditedBinding'
void env___set_NSDocumentEditedBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDocumentEditedBinding = _t1;
}

// getter for constant 'NSDocumentTypeDocumentAttribute'
U32 env___get_NSDocumentTypeDocumentAttribute(void *_instance) {
    id _result = (id)NSDocumentTypeDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSDocumentTypeDocumentAttribute'
void env___set_NSDocumentTypeDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDocumentTypeDocumentAttribute = _t1;
}

// getter for constant 'NSDocumentTypeDocumentOption'
U32 env___get_NSDocumentTypeDocumentOption(void *_instance) {
    id _result = (id)NSDocumentTypeDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSDocumentTypeDocumentOption'
void env___set_NSDocumentTypeDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDocumentTypeDocumentOption = _t1;
}

// getter for constant 'NSDoubleClickArgumentBinding'
U32 env___get_NSDoubleClickArgumentBinding(void *_instance) {
    id _result = (id)NSDoubleClickArgumentBinding;
    return (U32)_result;
}

// setter for constant 'NSDoubleClickArgumentBinding'
void env___set_NSDoubleClickArgumentBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDoubleClickArgumentBinding = _t1;
}

// getter for constant 'NSDoubleClickTargetBinding'
U32 env___get_NSDoubleClickTargetBinding(void *_instance) {
    id _result = (id)NSDoubleClickTargetBinding;
    return (U32)_result;
}

// setter for constant 'NSDoubleClickTargetBinding'
void env___set_NSDoubleClickTargetBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDoubleClickTargetBinding = _t1;
}

// getter for constant 'NSDragPboard'
U32 env___get_NSDragPboard(void *_instance) {
    id _result = (id)NSDragPboard;
    return (U32)_result;
}

// setter for constant 'NSDragPboard'
void env___set_NSDragPboard(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDragPboard = _t1;
}

// getter for constant 'NSDraggingException'
U32 env___get_NSDraggingException(void *_instance) {
    id _result = (id)NSDraggingException;
    return (U32)_result;
}

// setter for constant 'NSDraggingException'
void env___set_NSDraggingException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDraggingException = _t1;
}

// getter for constant 'NSDrawerDidCloseNotification'
U32 env___get_NSDrawerDidCloseNotification(void *_instance) {
    id _result = (id)NSDrawerDidCloseNotification;
    return (U32)_result;
}

// setter for constant 'NSDrawerDidCloseNotification'
void env___set_NSDrawerDidCloseNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDrawerDidCloseNotification = _t1;
}

// getter for constant 'NSDrawerDidOpenNotification'
U32 env___get_NSDrawerDidOpenNotification(void *_instance) {
    id _result = (id)NSDrawerDidOpenNotification;
    return (U32)_result;
}

// setter for constant 'NSDrawerDidOpenNotification'
void env___set_NSDrawerDidOpenNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDrawerDidOpenNotification = _t1;
}

// getter for constant 'NSDrawerWillCloseNotification'
U32 env___get_NSDrawerWillCloseNotification(void *_instance) {
    id _result = (id)NSDrawerWillCloseNotification;
    return (U32)_result;
}

// setter for constant 'NSDrawerWillCloseNotification'
void env___set_NSDrawerWillCloseNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDrawerWillCloseNotification = _t1;
}

// getter for constant 'NSDrawerWillOpenNotification'
U32 env___get_NSDrawerWillOpenNotification(void *_instance) {
    id _result = (id)NSDrawerWillOpenNotification;
    return (U32)_result;
}

// setter for constant 'NSDrawerWillOpenNotification'
void env___set_NSDrawerWillOpenNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSDrawerWillOpenNotification = _t1;
}

// getter for constant 'NSEditableBinding'
U32 env___get_NSEditableBinding(void *_instance) {
    id _result = (id)NSEditableBinding;
    return (U32)_result;
}

// setter for constant 'NSEditableBinding'
void env___set_NSEditableBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSEditableBinding = _t1;
}

// getter for constant 'NSEditorDocumentAttribute'
U32 env___get_NSEditorDocumentAttribute(void *_instance) {
    id _result = (id)NSEditorDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSEditorDocumentAttribute'
void env___set_NSEditorDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSEditorDocumentAttribute = _t1;
}

// getter for constant 'NSEnabledBinding'
U32 env___get_NSEnabledBinding(void *_instance) {
    id _result = (id)NSEnabledBinding;
    return (U32)_result;
}

// setter for constant 'NSEnabledBinding'
void env___set_NSEnabledBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSEnabledBinding = _t1;
}

// getter for constant 'NSEventTrackingRunLoopMode'
U32 env___get_NSEventTrackingRunLoopMode(void *_instance) {
    id _result = (id)NSEventTrackingRunLoopMode;
    return (U32)_result;
}

// setter for constant 'NSEventTrackingRunLoopMode'
void env___set_NSEventTrackingRunLoopMode(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSEventTrackingRunLoopMode = _t1;
}

// getter for constant 'NSExcludedElementsDocumentAttribute'
U32 env___get_NSExcludedElementsDocumentAttribute(void *_instance) {
    id _result = (id)NSExcludedElementsDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSExcludedElementsDocumentAttribute'
void env___set_NSExcludedElementsDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSExcludedElementsDocumentAttribute = _t1;
}

// getter for constant 'NSExpansionAttributeName'
U32 env___get_NSExpansionAttributeName(void *_instance) {
    id _result = (id)NSExpansionAttributeName;
    return (U32)_result;
}

// setter for constant 'NSExpansionAttributeName'
void env___set_NSExpansionAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSExpansionAttributeName = _t1;
}

// getter for constant 'NSFileContentsPboardType'
U32 env___get_NSFileContentsPboardType(void *_instance) {
    id _result = (id)NSFileContentsPboardType;
    return (U32)_result;
}

// setter for constant 'NSFileContentsPboardType'
void env___set_NSFileContentsPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFileContentsPboardType = _t1;
}

// getter for constant 'NSFilenamesPboardType'
U32 env___get_NSFilenamesPboardType(void *_instance) {
    id _result = (id)NSFilenamesPboardType;
    return (U32)_result;
}

// setter for constant 'NSFilenamesPboardType'
void env___set_NSFilenamesPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFilenamesPboardType = _t1;
}

// getter for constant 'NSFilesPromisePboardType'
U32 env___get_NSFilesPromisePboardType(void *_instance) {
    id _result = (id)NSFilesPromisePboardType;
    return (U32)_result;
}

// setter for constant 'NSFilesPromisePboardType'
void env___set_NSFilesPromisePboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFilesPromisePboardType = _t1;
}

// getter for constant 'NSFilesystemFileType'
U32 env___get_NSFilesystemFileType(void *_instance) {
    id _result = (id)NSFilesystemFileType;
    return (U32)_result;
}

// setter for constant 'NSFilesystemFileType'
void env___set_NSFilesystemFileType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFilesystemFileType = _t1;
}

// getter for constant 'NSFilterPredicateBinding'
U32 env___get_NSFilterPredicateBinding(void *_instance) {
    id _result = (id)NSFilterPredicateBinding;
    return (U32)_result;
}

// setter for constant 'NSFilterPredicateBinding'
void env___set_NSFilterPredicateBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFilterPredicateBinding = _t1;
}

// getter for constant 'NSFindPboard'
U32 env___get_NSFindPboard(void *_instance) {
    id _result = (id)NSFindPboard;
    return (U32)_result;
}

// setter for constant 'NSFindPboard'
void env___set_NSFindPboard(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFindPboard = _t1;
}

// getter for constant 'NSFontAttributeName'
U32 env___get_NSFontAttributeName(void *_instance) {
    id _result = (id)NSFontAttributeName;
    return (U32)_result;
}

// setter for constant 'NSFontAttributeName'
void env___set_NSFontAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontAttributeName = _t1;
}

// getter for constant 'NSFontBinding'
U32 env___get_NSFontBinding(void *_instance) {
    id _result = (id)NSFontBinding;
    return (U32)_result;
}

// setter for constant 'NSFontBinding'
void env___set_NSFontBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontBinding = _t1;
}

// getter for constant 'NSFontBoldBinding'
U32 env___get_NSFontBoldBinding(void *_instance) {
    id _result = (id)NSFontBoldBinding;
    return (U32)_result;
}

// setter for constant 'NSFontBoldBinding'
void env___set_NSFontBoldBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontBoldBinding = _t1;
}

// getter for constant 'NSFontCascadeListAttribute'
U32 env___get_NSFontCascadeListAttribute(void *_instance) {
    id _result = (id)NSFontCascadeListAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontCascadeListAttribute'
void env___set_NSFontCascadeListAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontCascadeListAttribute = _t1;
}

// getter for constant 'NSFontCharacterSetAttribute'
U32 env___get_NSFontCharacterSetAttribute(void *_instance) {
    id _result = (id)NSFontCharacterSetAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontCharacterSetAttribute'
void env___set_NSFontCharacterSetAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontCharacterSetAttribute = _t1;
}

// getter for constant 'NSFontColorAttribute'
U32 env___get_NSFontColorAttribute(void *_instance) {
    id _result = (id)NSFontColorAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontColorAttribute'
void env___set_NSFontColorAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontColorAttribute = _t1;
}

// getter for constant 'NSFontFaceAttribute'
U32 env___get_NSFontFaceAttribute(void *_instance) {
    id _result = (id)NSFontFaceAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontFaceAttribute'
void env___set_NSFontFaceAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontFaceAttribute = _t1;
}

// getter for constant 'NSFontFamilyAttribute'
U32 env___get_NSFontFamilyAttribute(void *_instance) {
    id _result = (id)NSFontFamilyAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontFamilyAttribute'
void env___set_NSFontFamilyAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontFamilyAttribute = _t1;
}

// getter for constant 'NSFontFamilyNameBinding'
U32 env___get_NSFontFamilyNameBinding(void *_instance) {
    id _result = (id)NSFontFamilyNameBinding;
    return (U32)_result;
}

// setter for constant 'NSFontFamilyNameBinding'
void env___set_NSFontFamilyNameBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontFamilyNameBinding = _t1;
}

// getter for constant 'NSFontFixedAdvanceAttribute'
U32 env___get_NSFontFixedAdvanceAttribute(void *_instance) {
    id _result = (id)NSFontFixedAdvanceAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontFixedAdvanceAttribute'
void env___set_NSFontFixedAdvanceAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontFixedAdvanceAttribute = _t1;
}

// getter for constant 'NSFontIdentityMatrix'
U32 env___get_NSFontIdentityMatrix(void *_instance) {
    float* _result = (float*)NSFontIdentityMatrix;
    return (U32)_result;
}

// getter for constant 'NSFontItalicBinding'
U32 env___get_NSFontItalicBinding(void *_instance) {
    id _result = (id)NSFontItalicBinding;
    return (U32)_result;
}

// setter for constant 'NSFontItalicBinding'
void env___set_NSFontItalicBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontItalicBinding = _t1;
}

// getter for constant 'NSFontMatrixAttribute'
U32 env___get_NSFontMatrixAttribute(void *_instance) {
    id _result = (id)NSFontMatrixAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontMatrixAttribute'
void env___set_NSFontMatrixAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontMatrixAttribute = _t1;
}

// getter for constant 'NSFontNameAttribute'
U32 env___get_NSFontNameAttribute(void *_instance) {
    id _result = (id)NSFontNameAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontNameAttribute'
void env___set_NSFontNameAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontNameAttribute = _t1;
}

// getter for constant 'NSFontNameBinding'
U32 env___get_NSFontNameBinding(void *_instance) {
    id _result = (id)NSFontNameBinding;
    return (U32)_result;
}

// setter for constant 'NSFontNameBinding'
void env___set_NSFontNameBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontNameBinding = _t1;
}

// getter for constant 'NSFontPboard'
U32 env___get_NSFontPboard(void *_instance) {
    id _result = (id)NSFontPboard;
    return (U32)_result;
}

// setter for constant 'NSFontPboard'
void env___set_NSFontPboard(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontPboard = _t1;
}

// getter for constant 'NSFontPboardType'
U32 env___get_NSFontPboardType(void *_instance) {
    id _result = (id)NSFontPboardType;
    return (U32)_result;
}

// setter for constant 'NSFontPboardType'
void env___set_NSFontPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontPboardType = _t1;
}

// getter for constant 'NSFontSetChangedNotification'
U32 env___get_NSFontSetChangedNotification(void *_instance) {
    id _result = (id)NSFontSetChangedNotification;
    return (U32)_result;
}

// setter for constant 'NSFontSetChangedNotification'
void env___set_NSFontSetChangedNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontSetChangedNotification = _t1;
}

// getter for constant 'NSFontSizeAttribute'
U32 env___get_NSFontSizeAttribute(void *_instance) {
    id _result = (id)NSFontSizeAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontSizeAttribute'
void env___set_NSFontSizeAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontSizeAttribute = _t1;
}

// getter for constant 'NSFontSizeBinding'
U32 env___get_NSFontSizeBinding(void *_instance) {
    id _result = (id)NSFontSizeBinding;
    return (U32)_result;
}

// setter for constant 'NSFontSizeBinding'
void env___set_NSFontSizeBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontSizeBinding = _t1;
}

// getter for constant 'NSFontSlantTrait'
U32 env___get_NSFontSlantTrait(void *_instance) {
    id _result = (id)NSFontSlantTrait;
    return (U32)_result;
}

// setter for constant 'NSFontSlantTrait'
void env___set_NSFontSlantTrait(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontSlantTrait = _t1;
}

// getter for constant 'NSFontSymbolicTrait'
U32 env___get_NSFontSymbolicTrait(void *_instance) {
    id _result = (id)NSFontSymbolicTrait;
    return (U32)_result;
}

// setter for constant 'NSFontSymbolicTrait'
void env___set_NSFontSymbolicTrait(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontSymbolicTrait = _t1;
}

// getter for constant 'NSFontTraitsAttribute'
U32 env___get_NSFontTraitsAttribute(void *_instance) {
    id _result = (id)NSFontTraitsAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontTraitsAttribute'
void env___set_NSFontTraitsAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontTraitsAttribute = _t1;
}

// getter for constant 'NSFontUnavailableException'
U32 env___get_NSFontUnavailableException(void *_instance) {
    id _result = (id)NSFontUnavailableException;
    return (U32)_result;
}

// setter for constant 'NSFontUnavailableException'
void env___set_NSFontUnavailableException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontUnavailableException = _t1;
}

// getter for constant 'NSFontVariationAttribute'
U32 env___get_NSFontVariationAttribute(void *_instance) {
    id _result = (id)NSFontVariationAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontVariationAttribute'
void env___set_NSFontVariationAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVariationAttribute = _t1;
}

// getter for constant 'NSFontVariationAxisDefaultValueKey'
U32 env___get_NSFontVariationAxisDefaultValueKey(void *_instance) {
    id _result = (id)NSFontVariationAxisDefaultValueKey;
    return (U32)_result;
}

// setter for constant 'NSFontVariationAxisDefaultValueKey'
void env___set_NSFontVariationAxisDefaultValueKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVariationAxisDefaultValueKey = _t1;
}

// getter for constant 'NSFontVariationAxisIdentifierKey'
U32 env___get_NSFontVariationAxisIdentifierKey(void *_instance) {
    id _result = (id)NSFontVariationAxisIdentifierKey;
    return (U32)_result;
}

// setter for constant 'NSFontVariationAxisIdentifierKey'
void env___set_NSFontVariationAxisIdentifierKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVariationAxisIdentifierKey = _t1;
}

// getter for constant 'NSFontVariationAxisMaximumValueKey'
U32 env___get_NSFontVariationAxisMaximumValueKey(void *_instance) {
    id _result = (id)NSFontVariationAxisMaximumValueKey;
    return (U32)_result;
}

// setter for constant 'NSFontVariationAxisMaximumValueKey'
void env___set_NSFontVariationAxisMaximumValueKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVariationAxisMaximumValueKey = _t1;
}

// getter for constant 'NSFontVariationAxisMinimumValueKey'
U32 env___get_NSFontVariationAxisMinimumValueKey(void *_instance) {
    id _result = (id)NSFontVariationAxisMinimumValueKey;
    return (U32)_result;
}

// setter for constant 'NSFontVariationAxisMinimumValueKey'
void env___set_NSFontVariationAxisMinimumValueKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVariationAxisMinimumValueKey = _t1;
}

// getter for constant 'NSFontVariationAxisNameKey'
U32 env___get_NSFontVariationAxisNameKey(void *_instance) {
    id _result = (id)NSFontVariationAxisNameKey;
    return (U32)_result;
}

// setter for constant 'NSFontVariationAxisNameKey'
void env___set_NSFontVariationAxisNameKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVariationAxisNameKey = _t1;
}

// getter for constant 'NSFontVisibleNameAttribute'
U32 env___get_NSFontVisibleNameAttribute(void *_instance) {
    id _result = (id)NSFontVisibleNameAttribute;
    return (U32)_result;
}

// setter for constant 'NSFontVisibleNameAttribute'
void env___set_NSFontVisibleNameAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontVisibleNameAttribute = _t1;
}

// getter for constant 'NSFontWeightTrait'
U32 env___get_NSFontWeightTrait(void *_instance) {
    id _result = (id)NSFontWeightTrait;
    return (U32)_result;
}

// setter for constant 'NSFontWeightTrait'
void env___set_NSFontWeightTrait(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontWeightTrait = _t1;
}

// getter for constant 'NSFontWidthTrait'
U32 env___get_NSFontWidthTrait(void *_instance) {
    id _result = (id)NSFontWidthTrait;
    return (U32)_result;
}

// setter for constant 'NSFontWidthTrait'
void env___set_NSFontWidthTrait(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSFontWidthTrait = _t1;
}

// getter for constant 'NSForegroundColorAttributeName'
U32 env___get_NSForegroundColorAttributeName(void *_instance) {
    id _result = (id)NSForegroundColorAttributeName;
    return (U32)_result;
}

// setter for constant 'NSForegroundColorAttributeName'
void env___set_NSForegroundColorAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSForegroundColorAttributeName = _t1;
}

// getter for constant 'NSGeneralPboard'
U32 env___get_NSGeneralPboard(void *_instance) {
    id _result = (id)NSGeneralPboard;
    return (U32)_result;
}

// setter for constant 'NSGeneralPboard'
void env___set_NSGeneralPboard(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSGeneralPboard = _t1;
}

// getter for constant 'NSGlyphInfoAttributeName'
U32 env___get_NSGlyphInfoAttributeName(void *_instance) {
    id _result = (id)NSGlyphInfoAttributeName;
    return (U32)_result;
}

// setter for constant 'NSGlyphInfoAttributeName'
void env___set_NSGlyphInfoAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSGlyphInfoAttributeName = _t1;
}

// getter for constant 'NSGraphicsContextDestinationAttributeName'
U32 env___get_NSGraphicsContextDestinationAttributeName(void *_instance) {
    id _result = (id)NSGraphicsContextDestinationAttributeName;
    return (U32)_result;
}

// setter for constant 'NSGraphicsContextDestinationAttributeName'
void env___set_NSGraphicsContextDestinationAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSGraphicsContextDestinationAttributeName = _t1;
}

// getter for constant 'NSGraphicsContextPDFFormat'
U32 env___get_NSGraphicsContextPDFFormat(void *_instance) {
    id _result = (id)NSGraphicsContextPDFFormat;
    return (U32)_result;
}

// setter for constant 'NSGraphicsContextPDFFormat'
void env___set_NSGraphicsContextPDFFormat(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSGraphicsContextPDFFormat = _t1;
}

// getter for constant 'NSGraphicsContextPSFormat'
U32 env___get_NSGraphicsContextPSFormat(void *_instance) {
    id _result = (id)NSGraphicsContextPSFormat;
    return (U32)_result;
}

// setter for constant 'NSGraphicsContextPSFormat'
void env___set_NSGraphicsContextPSFormat(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSGraphicsContextPSFormat = _t1;
}

// getter for constant 'NSGraphicsContextRepresentationFormatAttributeName'
U32 env___get_NSGraphicsContextRepresentationFormatAttributeName(void *_instance) {
    id _result = (id)NSGraphicsContextRepresentationFormatAttributeName;
    return (U32)_result;
}

// setter for constant 'NSGraphicsContextRepresentationFormatAttributeName'
void env___set_NSGraphicsContextRepresentationFormatAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSGraphicsContextRepresentationFormatAttributeName = _t1;
}

// getter for constant 'NSHTMLPboardType'
U32 env___get_NSHTMLPboardType(void *_instance) {
    id _result = (id)NSHTMLPboardType;
    return (U32)_result;
}

// setter for constant 'NSHTMLPboardType'
void env___set_NSHTMLPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSHTMLPboardType = _t1;
}

// getter for constant 'NSHTMLTextDocumentType'
U32 env___get_NSHTMLTextDocumentType(void *_instance) {
    id _result = (id)NSHTMLTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSHTMLTextDocumentType'
void env___set_NSHTMLTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSHTMLTextDocumentType = _t1;
}

// getter for constant 'NSHandlesContentAsCompoundValueBindingOption'
U32 env___get_NSHandlesContentAsCompoundValueBindingOption(void *_instance) {
    id _result = (id)NSHandlesContentAsCompoundValueBindingOption;
    return (U32)_result;
}

// setter for constant 'NSHandlesContentAsCompoundValueBindingOption'
void env___set_NSHandlesContentAsCompoundValueBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSHandlesContentAsCompoundValueBindingOption = _t1;
}

// getter for constant 'NSHeaderTitleBinding'
U32 env___get_NSHeaderTitleBinding(void *_instance) {
    id _result = (id)NSHeaderTitleBinding;
    return (U32)_result;
}

// setter for constant 'NSHeaderTitleBinding'
void env___set_NSHeaderTitleBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSHeaderTitleBinding = _t1;
}

// getter for constant 'NSHiddenBinding'
U32 env___get_NSHiddenBinding(void *_instance) {
    id _result = (id)NSHiddenBinding;
    return (U32)_result;
}

// setter for constant 'NSHiddenBinding'
void env___set_NSHiddenBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSHiddenBinding = _t1;
}

// getter for constant 'NSHyphenationFactorDocumentAttribute'
U32 env___get_NSHyphenationFactorDocumentAttribute(void *_instance) {
    id _result = (id)NSHyphenationFactorDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSHyphenationFactorDocumentAttribute'
void env___set_NSHyphenationFactorDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSHyphenationFactorDocumentAttribute = _t1;
}

// getter for constant 'NSIllegalSelectorException'
U32 env___get_NSIllegalSelectorException(void *_instance) {
    id _result = (id)NSIllegalSelectorException;
    return (U32)_result;
}

// setter for constant 'NSIllegalSelectorException'
void env___set_NSIllegalSelectorException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSIllegalSelectorException = _t1;
}

// getter for constant 'NSImageBinding'
U32 env___get_NSImageBinding(void *_instance) {
    id _result = (id)NSImageBinding;
    return (U32)_result;
}

// setter for constant 'NSImageBinding'
void env___set_NSImageBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageBinding = _t1;
}

// getter for constant 'NSImageCacheException'
U32 env___get_NSImageCacheException(void *_instance) {
    id _result = (id)NSImageCacheException;
    return (U32)_result;
}

// setter for constant 'NSImageCacheException'
void env___set_NSImageCacheException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageCacheException = _t1;
}

// getter for constant 'NSImageColorSyncProfileData'
U32 env___get_NSImageColorSyncProfileData(void *_instance) {
    id _result = (id)NSImageColorSyncProfileData;
    return (U32)_result;
}

// setter for constant 'NSImageColorSyncProfileData'
void env___set_NSImageColorSyncProfileData(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageColorSyncProfileData = _t1;
}

// getter for constant 'NSImageCompressionFactor'
U32 env___get_NSImageCompressionFactor(void *_instance) {
    id _result = (id)NSImageCompressionFactor;
    return (U32)_result;
}

// setter for constant 'NSImageCompressionFactor'
void env___set_NSImageCompressionFactor(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageCompressionFactor = _t1;
}

// getter for constant 'NSImageCompressionMethod'
U32 env___get_NSImageCompressionMethod(void *_instance) {
    id _result = (id)NSImageCompressionMethod;
    return (U32)_result;
}

// setter for constant 'NSImageCompressionMethod'
void env___set_NSImageCompressionMethod(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageCompressionMethod = _t1;
}

// getter for constant 'NSImageCurrentFrame'
U32 env___get_NSImageCurrentFrame(void *_instance) {
    id _result = (id)NSImageCurrentFrame;
    return (U32)_result;
}

// setter for constant 'NSImageCurrentFrame'
void env___set_NSImageCurrentFrame(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageCurrentFrame = _t1;
}

// getter for constant 'NSImageCurrentFrameDuration'
U32 env___get_NSImageCurrentFrameDuration(void *_instance) {
    id _result = (id)NSImageCurrentFrameDuration;
    return (U32)_result;
}

// setter for constant 'NSImageCurrentFrameDuration'
void env___set_NSImageCurrentFrameDuration(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageCurrentFrameDuration = _t1;
}

// getter for constant 'NSImageDitherTransparency'
U32 env___get_NSImageDitherTransparency(void *_instance) {
    id _result = (id)NSImageDitherTransparency;
    return (U32)_result;
}

// setter for constant 'NSImageDitherTransparency'
void env___set_NSImageDitherTransparency(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageDitherTransparency = _t1;
}

// getter for constant 'NSImageEXIFData'
U32 env___get_NSImageEX58IFData(void *_instance) {
    id _result = (id)NSImageEXIFData;
    return (U32)_result;
}

// setter for constant 'NSImageEXIFData'
void env___set_NSImageEX58IFData(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageEXIFData = _t1;
}

// getter for constant 'NSImageFrameCount'
U32 env___get_NSImageFrameCount(void *_instance) {
    id _result = (id)NSImageFrameCount;
    return (U32)_result;
}

// setter for constant 'NSImageFrameCount'
void env___set_NSImageFrameCount(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageFrameCount = _t1;
}

// getter for constant 'NSImageGamma'
U32 env___get_NSImageGamma(void *_instance) {
    id _result = (id)NSImageGamma;
    return (U32)_result;
}

// setter for constant 'NSImageGamma'
void env___set_NSImageGamma(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageGamma = _t1;
}

// getter for constant 'NSImageInterlaced'
U32 env___get_NSImageInterlaced(void *_instance) {
    id _result = (id)NSImageInterlaced;
    return (U32)_result;
}

// setter for constant 'NSImageInterlaced'
void env___set_NSImageInterlaced(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageInterlaced = _t1;
}

// getter for constant 'NSImageLoopCount'
U32 env___get_NSImageLoopCount(void *_instance) {
    id _result = (id)NSImageLoopCount;
    return (U32)_result;
}

// setter for constant 'NSImageLoopCount'
void env___set_NSImageLoopCount(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageLoopCount = _t1;
}

// getter for constant 'NSImageProgressive'
U32 env___get_NSImageProgressive(void *_instance) {
    id _result = (id)NSImageProgressive;
    return (U32)_result;
}

// setter for constant 'NSImageProgressive'
void env___set_NSImageProgressive(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageProgressive = _t1;
}

// getter for constant 'NSImageRGBColorTable'
U32 env___get_NSImageRGBColorTable(void *_instance) {
    id _result = (id)NSImageRGBColorTable;
    return (U32)_result;
}

// setter for constant 'NSImageRGBColorTable'
void env___set_NSImageRGBColorTable(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageRGBColorTable = _t1;
}

// getter for constant 'NSImageRepRegistryDidChangeNotification'
U32 env___get_NSImageRepRegistryDidChangeNotification(void *_instance) {
    id _result = (id)NSImageRepRegistryDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSImageRepRegistryDidChangeNotification'
void env___set_NSImageRepRegistryDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSImageRepRegistryDidChangeNotification = _t1;
}

// getter for constant 'NSInkTextPboardType'
U32 env___get_NSInkTextPboardType(void *_instance) {
    id _result = (id)NSInkTextPboardType;
    return (U32)_result;
}

// setter for constant 'NSInkTextPboardType'
void env___set_NSInkTextPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSInkTextPboardType = _t1;
}

// getter for constant 'NSInsertsNullPlaceholderBindingOption'
U32 env___get_NSInsertsNullPlaceholderBindingOption(void *_instance) {
    id _result = (id)NSInsertsNullPlaceholderBindingOption;
    return (U32)_result;
}

// setter for constant 'NSInsertsNullPlaceholderBindingOption'
void env___set_NSInsertsNullPlaceholderBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSInsertsNullPlaceholderBindingOption = _t1;
}

// getter for constant 'NSInterfaceStyleDefault'
U32 env___get_NSInterfaceStyleDefault(void *_instance) {
    id _result = (id)NSInterfaceStyleDefault;
    return (U32)_result;
}

// setter for constant 'NSInterfaceStyleDefault'
void env___set_NSInterfaceStyleDefault(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSInterfaceStyleDefault = _t1;
}

// getter for constant 'NSInvokesSeparatelyWithArrayObjectsBindingOption'
U32 env___get_NSInvokesSeparatelyWithArrayObjectsBindingOption(void *_instance) {
    id _result = (id)NSInvokesSeparatelyWithArrayObjectsBindingOption;
    return (U32)_result;
}

// setter for constant 'NSInvokesSeparatelyWithArrayObjectsBindingOption'
void env___set_NSInvokesSeparatelyWithArrayObjectsBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSInvokesSeparatelyWithArrayObjectsBindingOption = _t1;
}

// getter for constant 'NSIsIndeterminateBinding'
U32 env___get_NSIsIndeterminateBinding(void *_instance) {
    id _result = (id)NSIsIndeterminateBinding;
    return (U32)_result;
}

// setter for constant 'NSIsIndeterminateBinding'
void env___set_NSIsIndeterminateBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSIsIndeterminateBinding = _t1;
}

// getter for constant 'NSKernAttributeName'
U32 env___get_NSKernAttributeName(void *_instance) {
    id _result = (id)NSKernAttributeName;
    return (U32)_result;
}

// setter for constant 'NSKernAttributeName'
void env___set_NSKernAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSKernAttributeName = _t1;
}

// getter for constant 'NSKeywordsDocumentAttribute'
U32 env___get_NSKeywordsDocumentAttribute(void *_instance) {
    id _result = (id)NSKeywordsDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSKeywordsDocumentAttribute'
void env___set_NSKeywordsDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSKeywordsDocumentAttribute = _t1;
}

// getter for constant 'NSLabelBinding'
U32 env___get_NSLabelBinding(void *_instance) {
    id _result = (id)NSLabelBinding;
    return (U32)_result;
}

// setter for constant 'NSLabelBinding'
void env___set_NSLabelBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSLabelBinding = _t1;
}

// getter for constant 'NSLeftMarginDocumentAttribute'
U32 env___get_NSLeftMarginDocumentAttribute(void *_instance) {
    id _result = (id)NSLeftMarginDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSLeftMarginDocumentAttribute'
void env___set_NSLeftMarginDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSLeftMarginDocumentAttribute = _t1;
}

// getter for constant 'NSLigatureAttributeName'
U32 env___get_NSLigatureAttributeName(void *_instance) {
    id _result = (id)NSLigatureAttributeName;
    return (U32)_result;
}

// setter for constant 'NSLigatureAttributeName'
void env___set_NSLigatureAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSLigatureAttributeName = _t1;
}

// getter for constant 'NSLightGray'
F32 env___get_NSLightGray(void *_instance) {
    float _result = (float)NSLightGray;
    return (F32)_result;
}

// getter for constant 'NSLinkAttributeName'
U32 env___get_NSLinkAttributeName(void *_instance) {
    id _result = (id)NSLinkAttributeName;
    return (U32)_result;
}

// setter for constant 'NSLinkAttributeName'
void env___set_NSLinkAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSLinkAttributeName = _t1;
}

// getter for constant 'NSMacSimpleTextDocumentType'
U32 env___get_NSMacSimpleTextDocumentType(void *_instance) {
    id _result = (id)NSMacSimpleTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSMacSimpleTextDocumentType'
void env___set_NSMacSimpleTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMacSimpleTextDocumentType = _t1;
}

// getter for constant 'NSManagedObjectContextBinding'
U32 env___get_NSManagedObjectContextBinding(void *_instance) {
    id _result = (id)NSManagedObjectContextBinding;
    return (U32)_result;
}

// setter for constant 'NSManagedObjectContextBinding'
void env___set_NSManagedObjectContextBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSManagedObjectContextBinding = _t1;
}

// getter for constant 'NSMaxValueBinding'
U32 env___get_NSMaxValueBinding(void *_instance) {
    id _result = (id)NSMaxValueBinding;
    return (U32)_result;
}

// setter for constant 'NSMaxValueBinding'
void env___set_NSMaxValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMaxValueBinding = _t1;
}

// getter for constant 'NSMaxWidthBinding'
U32 env___get_NSMaxWidthBinding(void *_instance) {
    id _result = (id)NSMaxWidthBinding;
    return (U32)_result;
}

// setter for constant 'NSMaxWidthBinding'
void env___set_NSMaxWidthBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMaxWidthBinding = _t1;
}

// getter for constant 'NSMaximumRecentsBinding'
U32 env___get_NSMaximumRecentsBinding(void *_instance) {
    id _result = (id)NSMaximumRecentsBinding;
    return (U32)_result;
}

// setter for constant 'NSMaximumRecentsBinding'
void env___set_NSMaximumRecentsBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMaximumRecentsBinding = _t1;
}

// getter for constant 'NSMenuDidAddItemNotification'
U32 env___get_NSMenuDidAddItemNotification(void *_instance) {
    id _result = (id)NSMenuDidAddItemNotification;
    return (U32)_result;
}

// setter for constant 'NSMenuDidAddItemNotification'
void env___set_NSMenuDidAddItemNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMenuDidAddItemNotification = _t1;
}

// getter for constant 'NSMenuDidChangeItemNotification'
U32 env___get_NSMenuDidChangeItemNotification(void *_instance) {
    id _result = (id)NSMenuDidChangeItemNotification;
    return (U32)_result;
}

// setter for constant 'NSMenuDidChangeItemNotification'
void env___set_NSMenuDidChangeItemNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMenuDidChangeItemNotification = _t1;
}

// getter for constant 'NSMenuDidEndTrackingNotification'
U32 env___get_NSMenuDidEndTrackingNotification(void *_instance) {
    id _result = (id)NSMenuDidEndTrackingNotification;
    return (U32)_result;
}

// setter for constant 'NSMenuDidEndTrackingNotification'
void env___set_NSMenuDidEndTrackingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMenuDidEndTrackingNotification = _t1;
}

// getter for constant 'NSMenuDidRemoveItemNotification'
U32 env___get_NSMenuDidRemoveItemNotification(void *_instance) {
    id _result = (id)NSMenuDidRemoveItemNotification;
    return (U32)_result;
}

// setter for constant 'NSMenuDidRemoveItemNotification'
void env___set_NSMenuDidRemoveItemNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMenuDidRemoveItemNotification = _t1;
}

// getter for constant 'NSMenuDidSendActionNotification'
U32 env___get_NSMenuDidSendActionNotification(void *_instance) {
    id _result = (id)NSMenuDidSendActionNotification;
    return (U32)_result;
}

// setter for constant 'NSMenuDidSendActionNotification'
void env___set_NSMenuDidSendActionNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMenuDidSendActionNotification = _t1;
}

// getter for constant 'NSMenuWillSendActionNotification'
U32 env___get_NSMenuWillSendActionNotification(void *_instance) {
    id _result = (id)NSMenuWillSendActionNotification;
    return (U32)_result;
}

// setter for constant 'NSMenuWillSendActionNotification'
void env___set_NSMenuWillSendActionNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMenuWillSendActionNotification = _t1;
}

// getter for constant 'NSMinValueBinding'
U32 env___get_NSMinValueBinding(void *_instance) {
    id _result = (id)NSMinValueBinding;
    return (U32)_result;
}

// setter for constant 'NSMinValueBinding'
void env___set_NSMinValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMinValueBinding = _t1;
}

// getter for constant 'NSMinWidthBinding'
U32 env___get_NSMinWidthBinding(void *_instance) {
    id _result = (id)NSMinWidthBinding;
    return (U32)_result;
}

// setter for constant 'NSMinWidthBinding'
void env___set_NSMinWidthBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMinWidthBinding = _t1;
}

// getter for constant 'NSMixedStateImageBinding'
U32 env___get_NSMixedStateImageBinding(void *_instance) {
    id _result = (id)NSMixedStateImageBinding;
    return (U32)_result;
}

// setter for constant 'NSMixedStateImageBinding'
void env___set_NSMixedStateImageBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMixedStateImageBinding = _t1;
}

// getter for constant 'NSModalPanelRunLoopMode'
U32 env___get_NSModalPanelRunLoopMode(void *_instance) {
    id _result = (id)NSModalPanelRunLoopMode;
    return (U32)_result;
}

// setter for constant 'NSModalPanelRunLoopMode'
void env___set_NSModalPanelRunLoopMode(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSModalPanelRunLoopMode = _t1;
}

// getter for constant 'NSModificationTimeDocumentAttribute'
U32 env___get_NSModificationTimeDocumentAttribute(void *_instance) {
    id _result = (id)NSModificationTimeDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSModificationTimeDocumentAttribute'
void env___set_NSModificationTimeDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSModificationTimeDocumentAttribute = _t1;
}

// getter for constant 'NSMultipleValuesMarker'
U32 env___get_NSMultipleValuesMarker(void *_instance) {
    id _result = (id)NSMultipleValuesMarker;
    return (U32)_result;
}

// setter for constant 'NSMultipleValuesMarker'
void env___set_NSMultipleValuesMarker(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMultipleValuesMarker = _t1;
}

// getter for constant 'NSMultipleValuesPlaceholderBindingOption'
U32 env___get_NSMultipleValuesPlaceholderBindingOption(void *_instance) {
    id _result = (id)NSMultipleValuesPlaceholderBindingOption;
    return (U32)_result;
}

// setter for constant 'NSMultipleValuesPlaceholderBindingOption'
void env___set_NSMultipleValuesPlaceholderBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSMultipleValuesPlaceholderBindingOption = _t1;
}

// getter for constant 'NSNamedColorSpace'
U32 env___get_NSNamedColorSpace(void *_instance) {
    id _result = (id)NSNamedColorSpace;
    return (U32)_result;
}

// setter for constant 'NSNamedColorSpace'
void env___set_NSNamedColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNamedColorSpace = _t1;
}

// getter for constant 'NSNibLoadingException'
U32 env___get_NSNibLoadingException(void *_instance) {
    id _result = (id)NSNibLoadingException;
    return (U32)_result;
}

// setter for constant 'NSNibLoadingException'
void env___set_NSNibLoadingException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNibLoadingException = _t1;
}

// getter for constant 'NSNibOwner'
U32 env___get_NSNibOwner(void *_instance) {
    id _result = (id)NSNibOwner;
    return (U32)_result;
}

// setter for constant 'NSNibOwner'
void env___set_NSNibOwner(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNibOwner = _t1;
}

// getter for constant 'NSNibTopLevelObjects'
U32 env___get_NSNibTopLevelObjects(void *_instance) {
    id _result = (id)NSNibTopLevelObjects;
    return (U32)_result;
}

// setter for constant 'NSNibTopLevelObjects'
void env___set_NSNibTopLevelObjects(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNibTopLevelObjects = _t1;
}

// getter for constant 'NSNoSelectionMarker'
U32 env___get_NSNoSelectionMarker(void *_instance) {
    id _result = (id)NSNoSelectionMarker;
    return (U32)_result;
}

// setter for constant 'NSNoSelectionMarker'
void env___set_NSNoSelectionMarker(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNoSelectionMarker = _t1;
}

// getter for constant 'NSNoSelectionPlaceholderBindingOption'
U32 env___get_NSNoSelectionPlaceholderBindingOption(void *_instance) {
    id _result = (id)NSNoSelectionPlaceholderBindingOption;
    return (U32)_result;
}

// setter for constant 'NSNoSelectionPlaceholderBindingOption'
void env___set_NSNoSelectionPlaceholderBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNoSelectionPlaceholderBindingOption = _t1;
}

// getter for constant 'NSNotApplicableMarker'
U32 env___get_NSNotApplicableMarker(void *_instance) {
    id _result = (id)NSNotApplicableMarker;
    return (U32)_result;
}

// setter for constant 'NSNotApplicableMarker'
void env___set_NSNotApplicableMarker(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNotApplicableMarker = _t1;
}

// getter for constant 'NSNotApplicablePlaceholderBindingOption'
U32 env___get_NSNotApplicablePlaceholderBindingOption(void *_instance) {
    id _result = (id)NSNotApplicablePlaceholderBindingOption;
    return (U32)_result;
}

// setter for constant 'NSNotApplicablePlaceholderBindingOption'
void env___set_NSNotApplicablePlaceholderBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNotApplicablePlaceholderBindingOption = _t1;
}

// getter for constant 'NSNullPlaceholderBindingOption'
U32 env___get_NSNullPlaceholderBindingOption(void *_instance) {
    id _result = (id)NSNullPlaceholderBindingOption;
    return (U32)_result;
}

// setter for constant 'NSNullPlaceholderBindingOption'
void env___set_NSNullPlaceholderBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSNullPlaceholderBindingOption = _t1;
}

// getter for constant 'NSObliquenessAttributeName'
U32 env___get_NSObliquenessAttributeName(void *_instance) {
    id _result = (id)NSObliquenessAttributeName;
    return (U32)_result;
}

// setter for constant 'NSObliquenessAttributeName'
void env___set_NSObliquenessAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSObliquenessAttributeName = _t1;
}

// getter for constant 'NSObservedKeyPathKey'
U32 env___get_NSObservedKeyPathKey(void *_instance) {
    id _result = (id)NSObservedKeyPathKey;
    return (U32)_result;
}

// setter for constant 'NSObservedKeyPathKey'
void env___set_NSObservedKeyPathKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSObservedKeyPathKey = _t1;
}

// getter for constant 'NSObservedObjectKey'
U32 env___get_NSObservedObjectKey(void *_instance) {
    id _result = (id)NSObservedObjectKey;
    return (U32)_result;
}

// setter for constant 'NSObservedObjectKey'
void env___set_NSObservedObjectKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSObservedObjectKey = _t1;
}

// getter for constant 'NSOffStateImageBinding'
U32 env___get_NSOffStateImageBinding(void *_instance) {
    id _result = (id)NSOffStateImageBinding;
    return (U32)_result;
}

// setter for constant 'NSOffStateImageBinding'
void env___set_NSOffStateImageBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOffStateImageBinding = _t1;
}

// getter for constant 'NSOnStateImageBinding'
U32 env___get_NSOnStateImageBinding(void *_instance) {
    id _result = (id)NSOnStateImageBinding;
    return (U32)_result;
}

// setter for constant 'NSOnStateImageBinding'
void env___set_NSOnStateImageBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOnStateImageBinding = _t1;
}

// getter for constant 'NSOptionsKey'
U32 env___get_NSOptionsKey(void *_instance) {
    id _result = (id)NSOptionsKey;
    return (U32)_result;
}

// setter for constant 'NSOptionsKey'
void env___set_NSOptionsKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOptionsKey = _t1;
}

// getter for constant 'NSOutlineViewColumnDidMoveNotification'
U32 env___get_NSOutlineViewColumnDidMoveNotification(void *_instance) {
    id _result = (id)NSOutlineViewColumnDidMoveNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewColumnDidMoveNotification'
void env___set_NSOutlineViewColumnDidMoveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewColumnDidMoveNotification = _t1;
}

// getter for constant 'NSOutlineViewColumnDidResizeNotification'
U32 env___get_NSOutlineViewColumnDidResizeNotification(void *_instance) {
    id _result = (id)NSOutlineViewColumnDidResizeNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewColumnDidResizeNotification'
void env___set_NSOutlineViewColumnDidResizeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewColumnDidResizeNotification = _t1;
}

// getter for constant 'NSOutlineViewItemDidCollapseNotification'
U32 env___get_NSOutlineViewItemDidCollapseNotification(void *_instance) {
    id _result = (id)NSOutlineViewItemDidCollapseNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewItemDidCollapseNotification'
void env___set_NSOutlineViewItemDidCollapseNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewItemDidCollapseNotification = _t1;
}

// getter for constant 'NSOutlineViewItemDidExpandNotification'
U32 env___get_NSOutlineViewItemDidExpandNotification(void *_instance) {
    id _result = (id)NSOutlineViewItemDidExpandNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewItemDidExpandNotification'
void env___set_NSOutlineViewItemDidExpandNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewItemDidExpandNotification = _t1;
}

// getter for constant 'NSOutlineViewItemWillCollapseNotification'
U32 env___get_NSOutlineViewItemWillCollapseNotification(void *_instance) {
    id _result = (id)NSOutlineViewItemWillCollapseNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewItemWillCollapseNotification'
void env___set_NSOutlineViewItemWillCollapseNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewItemWillCollapseNotification = _t1;
}

// getter for constant 'NSOutlineViewItemWillExpandNotification'
U32 env___get_NSOutlineViewItemWillExpandNotification(void *_instance) {
    id _result = (id)NSOutlineViewItemWillExpandNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewItemWillExpandNotification'
void env___set_NSOutlineViewItemWillExpandNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewItemWillExpandNotification = _t1;
}

// getter for constant 'NSOutlineViewSelectionDidChangeNotification'
U32 env___get_NSOutlineViewSelectionDidChangeNotification(void *_instance) {
    id _result = (id)NSOutlineViewSelectionDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewSelectionDidChangeNotification'
void env___set_NSOutlineViewSelectionDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewSelectionDidChangeNotification = _t1;
}

// getter for constant 'NSOutlineViewSelectionIsChangingNotification'
U32 env___get_NSOutlineViewSelectionIsChangingNotification(void *_instance) {
    id _result = (id)NSOutlineViewSelectionIsChangingNotification;
    return (U32)_result;
}

// setter for constant 'NSOutlineViewSelectionIsChangingNotification'
void env___set_NSOutlineViewSelectionIsChangingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSOutlineViewSelectionIsChangingNotification = _t1;
}

// getter for constant 'NSPDFPboardType'
U32 env___get_NSPDFPboardType(void *_instance) {
    id _result = (id)NSPDFPboardType;
    return (U32)_result;
}

// setter for constant 'NSPDFPboardType'
void env___set_NSPDFPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPDFPboardType = _t1;
}

// getter for constant 'NSPICTPboardType'
U32 env___get_NSPICTPboardType(void *_instance) {
    id _result = (id)NSPICTPboardType;
    return (U32)_result;
}

// setter for constant 'NSPICTPboardType'
void env___set_NSPICTPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPICTPboardType = _t1;
}

// getter for constant 'NSPPDIncludeNotFoundException'
U32 env___get_NSPPDIncludeNotFoundException(void *_instance) {
    id _result = (id)NSPPDIncludeNotFoundException;
    return (U32)_result;
}

// setter for constant 'NSPPDIncludeNotFoundException'
void env___set_NSPPDIncludeNotFoundException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPPDIncludeNotFoundException = _t1;
}

// getter for constant 'NSPPDIncludeStackOverflowException'
U32 env___get_NSPPDIncludeStackOverflowException(void *_instance) {
    id _result = (id)NSPPDIncludeStackOverflowException;
    return (U32)_result;
}

// setter for constant 'NSPPDIncludeStackOverflowException'
void env___set_NSPPDIncludeStackOverflowException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPPDIncludeStackOverflowException = _t1;
}

// getter for constant 'NSPPDIncludeStackUnderflowException'
U32 env___get_NSPPDIncludeStackUnderflowException(void *_instance) {
    id _result = (id)NSPPDIncludeStackUnderflowException;
    return (U32)_result;
}

// setter for constant 'NSPPDIncludeStackUnderflowException'
void env___set_NSPPDIncludeStackUnderflowException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPPDIncludeStackUnderflowException = _t1;
}

// getter for constant 'NSPPDParseException'
U32 env___get_NSPPDParseException(void *_instance) {
    id _result = (id)NSPPDParseException;
    return (U32)_result;
}

// setter for constant 'NSPPDParseException'
void env___set_NSPPDParseException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPPDParseException = _t1;
}

// getter for constant 'NSPaperSizeDocumentAttribute'
U32 env___get_NSPaperSizeDocumentAttribute(void *_instance) {
    id _result = (id)NSPaperSizeDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSPaperSizeDocumentAttribute'
void env___set_NSPaperSizeDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPaperSizeDocumentAttribute = _t1;
}

// getter for constant 'NSParagraphStyleAttributeName'
U32 env___get_NSParagraphStyleAttributeName(void *_instance) {
    id _result = (id)NSParagraphStyleAttributeName;
    return (U32)_result;
}

// setter for constant 'NSParagraphStyleAttributeName'
void env___set_NSParagraphStyleAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSParagraphStyleAttributeName = _t1;
}

// getter for constant 'NSPasteboardCommunicationException'
U32 env___get_NSPasteboardCommunicationException(void *_instance) {
    id _result = (id)NSPasteboardCommunicationException;
    return (U32)_result;
}

// setter for constant 'NSPasteboardCommunicationException'
void env___set_NSPasteboardCommunicationException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPasteboardCommunicationException = _t1;
}

// getter for constant 'NSPatternColorSpace'
U32 env___get_NSPatternColorSpace(void *_instance) {
    id _result = (id)NSPatternColorSpace;
    return (U32)_result;
}

// setter for constant 'NSPatternColorSpace'
void env___set_NSPatternColorSpace(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPatternColorSpace = _t1;
}

// getter for constant 'NSPlainFileType'
U32 env___get_NSPlainFileType(void *_instance) {
    id _result = (id)NSPlainFileType;
    return (U32)_result;
}

// setter for constant 'NSPlainFileType'
void env___set_NSPlainFileType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPlainFileType = _t1;
}

// getter for constant 'NSPlainTextDocumentType'
U32 env___get_NSPlainTextDocumentType(void *_instance) {
    id _result = (id)NSPlainTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSPlainTextDocumentType'
void env___set_NSPlainTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPlainTextDocumentType = _t1;
}

// getter for constant 'NSPopUpButtonCellWillPopUpNotification'
U32 env___get_NSPopUpButtonCellWillPopUpNotification(void *_instance) {
    id _result = (id)NSPopUpButtonCellWillPopUpNotification;
    return (U32)_result;
}

// setter for constant 'NSPopUpButtonCellWillPopUpNotification'
void env___set_NSPopUpButtonCellWillPopUpNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPopUpButtonCellWillPopUpNotification = _t1;
}

// getter for constant 'NSPopUpButtonWillPopUpNotification'
U32 env___get_NSPopUpButtonWillPopUpNotification(void *_instance) {
    id _result = (id)NSPopUpButtonWillPopUpNotification;
    return (U32)_result;
}

// setter for constant 'NSPopUpButtonWillPopUpNotification'
void env___set_NSPopUpButtonWillPopUpNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPopUpButtonWillPopUpNotification = _t1;
}

// getter for constant 'NSPostScriptPboardType'
U32 env___get_NSPostScriptPboardType(void *_instance) {
    id _result = (id)NSPostScriptPboardType;
    return (U32)_result;
}

// setter for constant 'NSPostScriptPboardType'
void env___set_NSPostScriptPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPostScriptPboardType = _t1;
}

// getter for constant 'NSPredicateBinding'
U32 env___get_NSPredicateBinding(void *_instance) {
    id _result = (id)NSPredicateBinding;
    return (U32)_result;
}

// setter for constant 'NSPredicateBinding'
void env___set_NSPredicateBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPredicateBinding = _t1;
}

// getter for constant 'NSPredicateFormatBindingOption'
U32 env___get_NSPredicateFormatBindingOption(void *_instance) {
    id _result = (id)NSPredicateFormatBindingOption;
    return (U32)_result;
}

// setter for constant 'NSPredicateFormatBindingOption'
void env___set_NSPredicateFormatBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPredicateFormatBindingOption = _t1;
}

// getter for constant 'NSPrefixSpacesDocumentAttribute'
U32 env___get_NSPrefixSpacesDocumentAttribute(void *_instance) {
    id _result = (id)NSPrefixSpacesDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSPrefixSpacesDocumentAttribute'
void env___set_NSPrefixSpacesDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrefixSpacesDocumentAttribute = _t1;
}

// getter for constant 'NSPrintAllPages'
U32 env___get_NSPrintAllPages(void *_instance) {
    id _result = (id)NSPrintAllPages;
    return (U32)_result;
}

// setter for constant 'NSPrintAllPages'
void env___set_NSPrintAllPages(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintAllPages = _t1;
}

// getter for constant 'NSPrintBottomMargin'
U32 env___get_NSPrintBottomMargin(void *_instance) {
    id _result = (id)NSPrintBottomMargin;
    return (U32)_result;
}

// setter for constant 'NSPrintBottomMargin'
void env___set_NSPrintBottomMargin(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintBottomMargin = _t1;
}

// getter for constant 'NSPrintCancelJob'
U32 env___get_NSPrintCancelJob(void *_instance) {
    id _result = (id)NSPrintCancelJob;
    return (U32)_result;
}

// setter for constant 'NSPrintCancelJob'
void env___set_NSPrintCancelJob(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintCancelJob = _t1;
}

// getter for constant 'NSPrintCopies'
U32 env___get_NSPrintCopies(void *_instance) {
    id _result = (id)NSPrintCopies;
    return (U32)_result;
}

// setter for constant 'NSPrintCopies'
void env___set_NSPrintCopies(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintCopies = _t1;
}

// getter for constant 'NSPrintDetailedErrorReporting'
U32 env___get_NSPrintDetailedErrorReporting(void *_instance) {
    id _result = (id)NSPrintDetailedErrorReporting;
    return (U32)_result;
}

// setter for constant 'NSPrintDetailedErrorReporting'
void env___set_NSPrintDetailedErrorReporting(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintDetailedErrorReporting = _t1;
}

// getter for constant 'NSPrintFaxCoverSheetName'
U32 env___get_NSPrintFaxCoverSheetName(void *_instance) {
    id _result = (id)NSPrintFaxCoverSheetName;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxCoverSheetName'
void env___set_NSPrintFaxCoverSheetName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxCoverSheetName = _t1;
}

// getter for constant 'NSPrintFaxHighResolution'
U32 env___get_NSPrintFaxHighResolution(void *_instance) {
    id _result = (id)NSPrintFaxHighResolution;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxHighResolution'
void env___set_NSPrintFaxHighResolution(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxHighResolution = _t1;
}

// getter for constant 'NSPrintFaxJob'
U32 env___get_NSPrintFaxJob(void *_instance) {
    id _result = (id)NSPrintFaxJob;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxJob'
void env___set_NSPrintFaxJob(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxJob = _t1;
}

// getter for constant 'NSPrintFaxModem'
U32 env___get_NSPrintFaxModem(void *_instance) {
    id _result = (id)NSPrintFaxModem;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxModem'
void env___set_NSPrintFaxModem(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxModem = _t1;
}

// getter for constant 'NSPrintFaxNumber'
U32 env___get_NSPrintFaxNumber(void *_instance) {
    id _result = (id)NSPrintFaxNumber;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxNumber'
void env___set_NSPrintFaxNumber(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxNumber = _t1;
}

// getter for constant 'NSPrintFaxReceiverNames'
U32 env___get_NSPrintFaxReceiverNames(void *_instance) {
    id _result = (id)NSPrintFaxReceiverNames;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxReceiverNames'
void env___set_NSPrintFaxReceiverNames(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxReceiverNames = _t1;
}

// getter for constant 'NSPrintFaxReceiverNumbers'
U32 env___get_NSPrintFaxReceiverNumbers(void *_instance) {
    id _result = (id)NSPrintFaxReceiverNumbers;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxReceiverNumbers'
void env___set_NSPrintFaxReceiverNumbers(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxReceiverNumbers = _t1;
}

// getter for constant 'NSPrintFaxReturnReceipt'
U32 env___get_NSPrintFaxReturnReceipt(void *_instance) {
    id _result = (id)NSPrintFaxReturnReceipt;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxReturnReceipt'
void env___set_NSPrintFaxReturnReceipt(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxReturnReceipt = _t1;
}

// getter for constant 'NSPrintFaxSendTime'
U32 env___get_NSPrintFaxSendTime(void *_instance) {
    id _result = (id)NSPrintFaxSendTime;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxSendTime'
void env___set_NSPrintFaxSendTime(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxSendTime = _t1;
}

// getter for constant 'NSPrintFaxTrimPageEnds'
U32 env___get_NSPrintFaxTrimPageEnds(void *_instance) {
    id _result = (id)NSPrintFaxTrimPageEnds;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxTrimPageEnds'
void env___set_NSPrintFaxTrimPageEnds(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxTrimPageEnds = _t1;
}

// getter for constant 'NSPrintFaxUseCoverSheet'
U32 env___get_NSPrintFaxUseCoverSheet(void *_instance) {
    id _result = (id)NSPrintFaxUseCoverSheet;
    return (U32)_result;
}

// setter for constant 'NSPrintFaxUseCoverSheet'
void env___set_NSPrintFaxUseCoverSheet(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFaxUseCoverSheet = _t1;
}

// getter for constant 'NSPrintFirstPage'
U32 env___get_NSPrintFirstPage(void *_instance) {
    id _result = (id)NSPrintFirstPage;
    return (U32)_result;
}

// setter for constant 'NSPrintFirstPage'
void env___set_NSPrintFirstPage(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFirstPage = _t1;
}

// getter for constant 'NSPrintFormName'
U32 env___get_NSPrintFormName(void *_instance) {
    id _result = (id)NSPrintFormName;
    return (U32)_result;
}

// setter for constant 'NSPrintFormName'
void env___set_NSPrintFormName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintFormName = _t1;
}

// getter for constant 'NSPrintHeaderAndFooter'
U32 env___get_NSPrintHeaderAndFooter(void *_instance) {
    id _result = (id)NSPrintHeaderAndFooter;
    return (U32)_result;
}

// setter for constant 'NSPrintHeaderAndFooter'
void env___set_NSPrintHeaderAndFooter(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintHeaderAndFooter = _t1;
}

// getter for constant 'NSPrintHorizontalPagination'
U32 env___get_NSPrintHorizontalPagination(void *_instance) {
    id _result = (id)NSPrintHorizontalPagination;
    return (U32)_result;
}

// setter for constant 'NSPrintHorizontalPagination'
void env___set_NSPrintHorizontalPagination(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintHorizontalPagination = _t1;
}

// getter for constant 'NSPrintHorizontallyCentered'
U32 env___get_NSPrintHorizontallyCentered(void *_instance) {
    id _result = (id)NSPrintHorizontallyCentered;
    return (U32)_result;
}

// setter for constant 'NSPrintHorizontallyCentered'
void env___set_NSPrintHorizontallyCentered(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintHorizontallyCentered = _t1;
}

// getter for constant 'NSPrintJobDisposition'
U32 env___get_NSPrintJobDisposition(void *_instance) {
    id _result = (id)NSPrintJobDisposition;
    return (U32)_result;
}

// setter for constant 'NSPrintJobDisposition'
void env___set_NSPrintJobDisposition(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintJobDisposition = _t1;
}

// getter for constant 'NSPrintJobFeatures'
U32 env___get_NSPrintJobFeatures(void *_instance) {
    id _result = (id)NSPrintJobFeatures;
    return (U32)_result;
}

// setter for constant 'NSPrintJobFeatures'
void env___set_NSPrintJobFeatures(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintJobFeatures = _t1;
}

// getter for constant 'NSPrintLastPage'
U32 env___get_NSPrintLastPage(void *_instance) {
    id _result = (id)NSPrintLastPage;
    return (U32)_result;
}

// setter for constant 'NSPrintLastPage'
void env___set_NSPrintLastPage(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintLastPage = _t1;
}

// getter for constant 'NSPrintLeftMargin'
U32 env___get_NSPrintLeftMargin(void *_instance) {
    id _result = (id)NSPrintLeftMargin;
    return (U32)_result;
}

// setter for constant 'NSPrintLeftMargin'
void env___set_NSPrintLeftMargin(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintLeftMargin = _t1;
}

// getter for constant 'NSPrintManualFeed'
U32 env___get_NSPrintManualFeed(void *_instance) {
    id _result = (id)NSPrintManualFeed;
    return (U32)_result;
}

// setter for constant 'NSPrintManualFeed'
void env___set_NSPrintManualFeed(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintManualFeed = _t1;
}

// getter for constant 'NSPrintMustCollate'
U32 env___get_NSPrintMustCollate(void *_instance) {
    id _result = (id)NSPrintMustCollate;
    return (U32)_result;
}

// setter for constant 'NSPrintMustCollate'
void env___set_NSPrintMustCollate(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintMustCollate = _t1;
}

// getter for constant 'NSPrintOperationExistsException'
U32 env___get_NSPrintOperationExistsException(void *_instance) {
    id _result = (id)NSPrintOperationExistsException;
    return (U32)_result;
}

// setter for constant 'NSPrintOperationExistsException'
void env___set_NSPrintOperationExistsException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintOperationExistsException = _t1;
}

// getter for constant 'NSPrintOrientation'
U32 env___get_NSPrintOrientation(void *_instance) {
    id _result = (id)NSPrintOrientation;
    return (U32)_result;
}

// setter for constant 'NSPrintOrientation'
void env___set_NSPrintOrientation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintOrientation = _t1;
}

// getter for constant 'NSPrintPackageException'
U32 env___get_NSPrintPackageException(void *_instance) {
    id _result = (id)NSPrintPackageException;
    return (U32)_result;
}

// setter for constant 'NSPrintPackageException'
void env___set_NSPrintPackageException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPackageException = _t1;
}

// getter for constant 'NSPrintPagesAcross'
U32 env___get_NSPrintPagesAcross(void *_instance) {
    id _result = (id)NSPrintPagesAcross;
    return (U32)_result;
}

// setter for constant 'NSPrintPagesAcross'
void env___set_NSPrintPagesAcross(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPagesAcross = _t1;
}

// getter for constant 'NSPrintPagesDown'
U32 env___get_NSPrintPagesDown(void *_instance) {
    id _result = (id)NSPrintPagesDown;
    return (U32)_result;
}

// setter for constant 'NSPrintPagesDown'
void env___set_NSPrintPagesDown(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPagesDown = _t1;
}

// getter for constant 'NSPrintPagesPerSheet'
U32 env___get_NSPrintPagesPerSheet(void *_instance) {
    id _result = (id)NSPrintPagesPerSheet;
    return (U32)_result;
}

// setter for constant 'NSPrintPagesPerSheet'
void env___set_NSPrintPagesPerSheet(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPagesPerSheet = _t1;
}

// getter for constant 'NSPrintPaperFeed'
U32 env___get_NSPrintPaperFeed(void *_instance) {
    id _result = (id)NSPrintPaperFeed;
    return (U32)_result;
}

// setter for constant 'NSPrintPaperFeed'
void env___set_NSPrintPaperFeed(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPaperFeed = _t1;
}

// getter for constant 'NSPrintPaperName'
U32 env___get_NSPrintPaperName(void *_instance) {
    id _result = (id)NSPrintPaperName;
    return (U32)_result;
}

// setter for constant 'NSPrintPaperName'
void env___set_NSPrintPaperName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPaperName = _t1;
}

// getter for constant 'NSPrintPaperSize'
U32 env___get_NSPrintPaperSize(void *_instance) {
    id _result = (id)NSPrintPaperSize;
    return (U32)_result;
}

// setter for constant 'NSPrintPaperSize'
void env___set_NSPrintPaperSize(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPaperSize = _t1;
}

// getter for constant 'NSPrintPhotoJobStyleHint'
U32 env___get_NSPrintPhotoJobStyleHint(void *_instance) {
    id _result = (id)NSPrintPhotoJobStyleHint;
    return (U32)_result;
}

// setter for constant 'NSPrintPhotoJobStyleHint'
void env___set_NSPrintPhotoJobStyleHint(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPhotoJobStyleHint = _t1;
}

// getter for constant 'NSPrintPreviewJob'
U32 env___get_NSPrintPreviewJob(void *_instance) {
    id _result = (id)NSPrintPreviewJob;
    return (U32)_result;
}

// setter for constant 'NSPrintPreviewJob'
void env___set_NSPrintPreviewJob(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPreviewJob = _t1;
}

// getter for constant 'NSPrintPrinter'
U32 env___get_NSPrintPrinter(void *_instance) {
    id _result = (id)NSPrintPrinter;
    return (U32)_result;
}

// setter for constant 'NSPrintPrinter'
void env___set_NSPrintPrinter(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPrinter = _t1;
}

// getter for constant 'NSPrintPrinterName'
U32 env___get_NSPrintPrinterName(void *_instance) {
    id _result = (id)NSPrintPrinterName;
    return (U32)_result;
}

// setter for constant 'NSPrintPrinterName'
void env___set_NSPrintPrinterName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintPrinterName = _t1;
}

// getter for constant 'NSPrintReversePageOrder'
U32 env___get_NSPrintReversePageOrder(void *_instance) {
    id _result = (id)NSPrintReversePageOrder;
    return (U32)_result;
}

// setter for constant 'NSPrintReversePageOrder'
void env___set_NSPrintReversePageOrder(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintReversePageOrder = _t1;
}

// getter for constant 'NSPrintRightMargin'
U32 env___get_NSPrintRightMargin(void *_instance) {
    id _result = (id)NSPrintRightMargin;
    return (U32)_result;
}

// setter for constant 'NSPrintRightMargin'
void env___set_NSPrintRightMargin(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintRightMargin = _t1;
}

// getter for constant 'NSPrintSaveJob'
U32 env___get_NSPrintSaveJob(void *_instance) {
    id _result = (id)NSPrintSaveJob;
    return (U32)_result;
}

// setter for constant 'NSPrintSaveJob'
void env___set_NSPrintSaveJob(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintSaveJob = _t1;
}

// getter for constant 'NSPrintSavePath'
U32 env___get_NSPrintSavePath(void *_instance) {
    id _result = (id)NSPrintSavePath;
    return (U32)_result;
}

// setter for constant 'NSPrintSavePath'
void env___set_NSPrintSavePath(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintSavePath = _t1;
}

// getter for constant 'NSPrintScalingFactor'
U32 env___get_NSPrintScalingFactor(void *_instance) {
    id _result = (id)NSPrintScalingFactor;
    return (U32)_result;
}

// setter for constant 'NSPrintScalingFactor'
void env___set_NSPrintScalingFactor(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintScalingFactor = _t1;
}

// getter for constant 'NSPrintSpoolJob'
U32 env___get_NSPrintSpoolJob(void *_instance) {
    id _result = (id)NSPrintSpoolJob;
    return (U32)_result;
}

// setter for constant 'NSPrintSpoolJob'
void env___set_NSPrintSpoolJob(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintSpoolJob = _t1;
}

// getter for constant 'NSPrintTime'
U32 env___get_NSPrintTime(void *_instance) {
    id _result = (id)NSPrintTime;
    return (U32)_result;
}

// setter for constant 'NSPrintTime'
void env___set_NSPrintTime(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintTime = _t1;
}

// getter for constant 'NSPrintTopMargin'
U32 env___get_NSPrintTopMargin(void *_instance) {
    id _result = (id)NSPrintTopMargin;
    return (U32)_result;
}

// setter for constant 'NSPrintTopMargin'
void env___set_NSPrintTopMargin(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintTopMargin = _t1;
}

// getter for constant 'NSPrintVerticalPagination'
U32 env___get_NSPrintVerticalPagination(void *_instance) {
    id _result = (id)NSPrintVerticalPagination;
    return (U32)_result;
}

// setter for constant 'NSPrintVerticalPagination'
void env___set_NSPrintVerticalPagination(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintVerticalPagination = _t1;
}

// getter for constant 'NSPrintVerticallyCentered'
U32 env___get_NSPrintVerticallyCentered(void *_instance) {
    id _result = (id)NSPrintVerticallyCentered;
    return (U32)_result;
}

// setter for constant 'NSPrintVerticallyCentered'
void env___set_NSPrintVerticallyCentered(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintVerticallyCentered = _t1;
}

// getter for constant 'NSPrintingCommunicationException'
U32 env___get_NSPrintingCommunicationException(void *_instance) {
    id _result = (id)NSPrintingCommunicationException;
    return (U32)_result;
}

// setter for constant 'NSPrintingCommunicationException'
void env___set_NSPrintingCommunicationException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSPrintingCommunicationException = _t1;
}

// getter for constant 'NSRTFDPboardType'
U32 env___get_NSRTFDPboardType(void *_instance) {
    id _result = (id)NSRTFDPboardType;
    return (U32)_result;
}

// setter for constant 'NSRTFDPboardType'
void env___set_NSRTFDPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRTFDPboardType = _t1;
}

// getter for constant 'NSRTFDTextDocumentType'
U32 env___get_NSRTFDTextDocumentType(void *_instance) {
    id _result = (id)NSRTFDTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSRTFDTextDocumentType'
void env___set_NSRTFDTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRTFDTextDocumentType = _t1;
}

// getter for constant 'NSRTFPboardType'
U32 env___get_NSRTFPboardType(void *_instance) {
    id _result = (id)NSRTFPboardType;
    return (U32)_result;
}

// setter for constant 'NSRTFPboardType'
void env___set_NSRTFPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRTFPboardType = _t1;
}

// getter for constant 'NSRTFPropertyStackOverflowException'
U32 env___get_NSRTFPropertyStackOverflowException(void *_instance) {
    id _result = (id)NSRTFPropertyStackOverflowException;
    return (U32)_result;
}

// setter for constant 'NSRTFPropertyStackOverflowException'
void env___set_NSRTFPropertyStackOverflowException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRTFPropertyStackOverflowException = _t1;
}

// getter for constant 'NSRTFTextDocumentType'
U32 env___get_NSRTFTextDocumentType(void *_instance) {
    id _result = (id)NSRTFTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSRTFTextDocumentType'
void env___set_NSRTFTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRTFTextDocumentType = _t1;
}

// getter for constant 'NSRaisesForNotApplicableKeysBindingOption'
U32 env___get_NSRaisesForNotApplicableKeysBindingOption(void *_instance) {
    id _result = (id)NSRaisesForNotApplicableKeysBindingOption;
    return (U32)_result;
}

// setter for constant 'NSRaisesForNotApplicableKeysBindingOption'
void env___set_NSRaisesForNotApplicableKeysBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRaisesForNotApplicableKeysBindingOption = _t1;
}

// getter for constant 'NSReadOnlyDocumentAttribute'
U32 env___get_NSReadOnlyDocumentAttribute(void *_instance) {
    id _result = (id)NSReadOnlyDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSReadOnlyDocumentAttribute'
void env___set_NSReadOnlyDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSReadOnlyDocumentAttribute = _t1;
}

// getter for constant 'NSRecentSearchesBinding'
U32 env___get_NSRecentSearchesBinding(void *_instance) {
    id _result = (id)NSRecentSearchesBinding;
    return (U32)_result;
}

// setter for constant 'NSRecentSearchesBinding'
void env___set_NSRecentSearchesBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRecentSearchesBinding = _t1;
}

// getter for constant 'NSRepresentedFilenameBinding'
U32 env___get_NSRepresentedFilenameBinding(void *_instance) {
    id _result = (id)NSRepresentedFilenameBinding;
    return (U32)_result;
}

// setter for constant 'NSRepresentedFilenameBinding'
void env___set_NSRepresentedFilenameBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRepresentedFilenameBinding = _t1;
}

// getter for constant 'NSRightMarginDocumentAttribute'
U32 env___get_NSRightMarginDocumentAttribute(void *_instance) {
    id _result = (id)NSRightMarginDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSRightMarginDocumentAttribute'
void env___set_NSRightMarginDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRightMarginDocumentAttribute = _t1;
}

// getter for constant 'NSRowHeightBinding'
U32 env___get_NSRowHeightBinding(void *_instance) {
    id _result = (id)NSRowHeightBinding;
    return (U32)_result;
}

// setter for constant 'NSRowHeightBinding'
void env___set_NSRowHeightBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRowHeightBinding = _t1;
}

// getter for constant 'NSRulerPboard'
U32 env___get_NSRulerPboard(void *_instance) {
    id _result = (id)NSRulerPboard;
    return (U32)_result;
}

// setter for constant 'NSRulerPboard'
void env___set_NSRulerPboard(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRulerPboard = _t1;
}

// getter for constant 'NSRulerPboardType'
U32 env___get_NSRulerPboardType(void *_instance) {
    id _result = (id)NSRulerPboardType;
    return (U32)_result;
}

// setter for constant 'NSRulerPboardType'
void env___set_NSRulerPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSRulerPboardType = _t1;
}

// getter for constant 'NSSelectedIdentifierBinding'
U32 env___get_NSSelectedIdentifierBinding(void *_instance) {
    id _result = (id)NSSelectedIdentifierBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedIdentifierBinding'
void env___set_NSSelectedIdentifierBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedIdentifierBinding = _t1;
}

// getter for constant 'NSSelectedIndexBinding'
U32 env___get_NSSelectedIndexBinding(void *_instance) {
    id _result = (id)NSSelectedIndexBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedIndexBinding'
void env___set_NSSelectedIndexBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedIndexBinding = _t1;
}

// getter for constant 'NSSelectedLabelBinding'
U32 env___get_NSSelectedLabelBinding(void *_instance) {
    id _result = (id)NSSelectedLabelBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedLabelBinding'
void env___set_NSSelectedLabelBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedLabelBinding = _t1;
}

// getter for constant 'NSSelectedObjectBinding'
U32 env___get_NSSelectedObjectBinding(void *_instance) {
    id _result = (id)NSSelectedObjectBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedObjectBinding'
void env___set_NSSelectedObjectBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedObjectBinding = _t1;
}

// getter for constant 'NSSelectedObjectsBinding'
U32 env___get_NSSelectedObjectsBinding(void *_instance) {
    id _result = (id)NSSelectedObjectsBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedObjectsBinding'
void env___set_NSSelectedObjectsBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedObjectsBinding = _t1;
}

// getter for constant 'NSSelectedTagBinding'
U32 env___get_NSSelectedTagBinding(void *_instance) {
    id _result = (id)NSSelectedTagBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedTagBinding'
void env___set_NSSelectedTagBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedTagBinding = _t1;
}

// getter for constant 'NSSelectedValueBinding'
U32 env___get_NSSelectedValueBinding(void *_instance) {
    id _result = (id)NSSelectedValueBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedValueBinding'
void env___set_NSSelectedValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedValueBinding = _t1;
}

// getter for constant 'NSSelectedValuesBinding'
U32 env___get_NSSelectedValuesBinding(void *_instance) {
    id _result = (id)NSSelectedValuesBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectedValuesBinding'
void env___set_NSSelectedValuesBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectedValuesBinding = _t1;
}

// getter for constant 'NSSelectionIndexPathsBinding'
U32 env___get_NSSelectionIndexPathsBinding(void *_instance) {
    id _result = (id)NSSelectionIndexPathsBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectionIndexPathsBinding'
void env___set_NSSelectionIndexPathsBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectionIndexPathsBinding = _t1;
}

// getter for constant 'NSSelectionIndexesBinding'
U32 env___get_NSSelectionIndexesBinding(void *_instance) {
    id _result = (id)NSSelectionIndexesBinding;
    return (U32)_result;
}

// setter for constant 'NSSelectionIndexesBinding'
void env___set_NSSelectionIndexesBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectionIndexesBinding = _t1;
}

// getter for constant 'NSSelectorNameBindingOption'
U32 env___get_NSSelectorNameBindingOption(void *_instance) {
    id _result = (id)NSSelectorNameBindingOption;
    return (U32)_result;
}

// setter for constant 'NSSelectorNameBindingOption'
void env___set_NSSelectorNameBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectorNameBindingOption = _t1;
}

// getter for constant 'NSSelectsAllWhenSettingContentBindingOption'
U32 env___get_NSSelectsAllWhenSettingContentBindingOption(void *_instance) {
    id _result = (id)NSSelectsAllWhenSettingContentBindingOption;
    return (U32)_result;
}

// setter for constant 'NSSelectsAllWhenSettingContentBindingOption'
void env___set_NSSelectsAllWhenSettingContentBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSelectsAllWhenSettingContentBindingOption = _t1;
}

// getter for constant 'NSShadowAttributeName'
U32 env___get_NSShadowAttributeName(void *_instance) {
    id _result = (id)NSShadowAttributeName;
    return (U32)_result;
}

// setter for constant 'NSShadowAttributeName'
void env___set_NSShadowAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSShadowAttributeName = _t1;
}

// getter for constant 'NSShellCommandFileType'
U32 env___get_NSShellCommandFileType(void *_instance) {
    id _result = (id)NSShellCommandFileType;
    return (U32)_result;
}

// setter for constant 'NSShellCommandFileType'
void env___set_NSShellCommandFileType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSShellCommandFileType = _t1;
}

// getter for constant 'NSSortDescriptorsBinding'
U32 env___get_NSSortDescriptorsBinding(void *_instance) {
    id _result = (id)NSSortDescriptorsBinding;
    return (U32)_result;
}

// setter for constant 'NSSortDescriptorsBinding'
void env___set_NSSortDescriptorsBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSortDescriptorsBinding = _t1;
}

// getter for constant 'NSSoundPboardType'
U32 env___get_NSSoundPboardType(void *_instance) {
    id _result = (id)NSSoundPboardType;
    return (U32)_result;
}

// getter for constant 'NSSplitViewDidResizeSubviewsNotification'
U32 env___get_NSSplitViewDidResizeSubviewsNotification(void *_instance) {
    id _result = (id)NSSplitViewDidResizeSubviewsNotification;
    return (U32)_result;
}

// setter for constant 'NSSplitViewDidResizeSubviewsNotification'
void env___set_NSSplitViewDidResizeSubviewsNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSplitViewDidResizeSubviewsNotification = _t1;
}

// getter for constant 'NSSplitViewWillResizeSubviewsNotification'
U32 env___get_NSSplitViewWillResizeSubviewsNotification(void *_instance) {
    id _result = (id)NSSplitViewWillResizeSubviewsNotification;
    return (U32)_result;
}

// setter for constant 'NSSplitViewWillResizeSubviewsNotification'
void env___set_NSSplitViewWillResizeSubviewsNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSplitViewWillResizeSubviewsNotification = _t1;
}

// getter for constant 'NSStrikethroughColorAttributeName'
U32 env___get_NSStrikethroughColorAttributeName(void *_instance) {
    id _result = (id)NSStrikethroughColorAttributeName;
    return (U32)_result;
}

// setter for constant 'NSStrikethroughColorAttributeName'
void env___set_NSStrikethroughColorAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSStrikethroughColorAttributeName = _t1;
}

// getter for constant 'NSStrikethroughStyleAttributeName'
U32 env___get_NSStrikethroughStyleAttributeName(void *_instance) {
    id _result = (id)NSStrikethroughStyleAttributeName;
    return (U32)_result;
}

// setter for constant 'NSStrikethroughStyleAttributeName'
void env___set_NSStrikethroughStyleAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSStrikethroughStyleAttributeName = _t1;
}

// getter for constant 'NSStringPboardType'
U32 env___get_NSStringPboardType(void *_instance) {
    id _result = (id)NSStringPboardType;
    return (U32)_result;
}

// setter for constant 'NSStringPboardType'
void env___set_NSStringPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSStringPboardType = _t1;
}

// getter for constant 'NSStrokeColorAttributeName'
U32 env___get_NSStrokeColorAttributeName(void *_instance) {
    id _result = (id)NSStrokeColorAttributeName;
    return (U32)_result;
}

// setter for constant 'NSStrokeColorAttributeName'
void env___set_NSStrokeColorAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSStrokeColorAttributeName = _t1;
}

// getter for constant 'NSStrokeWidthAttributeName'
U32 env___get_NSStrokeWidthAttributeName(void *_instance) {
    id _result = (id)NSStrokeWidthAttributeName;
    return (U32)_result;
}

// setter for constant 'NSStrokeWidthAttributeName'
void env___set_NSStrokeWidthAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSStrokeWidthAttributeName = _t1;
}

// getter for constant 'NSSubjectDocumentAttribute'
U32 env___get_NSSubjectDocumentAttribute(void *_instance) {
    id _result = (id)NSSubjectDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSSubjectDocumentAttribute'
void env___set_NSSubjectDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSubjectDocumentAttribute = _t1;
}

// getter for constant 'NSSuperscriptAttributeName'
U32 env___get_NSSuperscriptAttributeName(void *_instance) {
    id _result = (id)NSSuperscriptAttributeName;
    return (U32)_result;
}

// setter for constant 'NSSuperscriptAttributeName'
void env___set_NSSuperscriptAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSuperscriptAttributeName = _t1;
}

// getter for constant 'NSSystemColorsDidChangeNotification'
U32 env___get_NSSystemColorsDidChangeNotification(void *_instance) {
    id _result = (id)NSSystemColorsDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSSystemColorsDidChangeNotification'
void env___set_NSSystemColorsDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSSystemColorsDidChangeNotification = _t1;
}

// getter for constant 'NSTIFFException'
U32 env___get_NSTIFFException(void *_instance) {
    id _result = (id)NSTIFFException;
    return (U32)_result;
}

// setter for constant 'NSTIFFException'
void env___set_NSTIFFException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTIFFException = _t1;
}

// getter for constant 'NSTIFFPboardType'
U32 env___get_NSTIFFPboardType(void *_instance) {
    id _result = (id)NSTIFFPboardType;
    return (U32)_result;
}

// setter for constant 'NSTIFFPboardType'
void env___set_NSTIFFPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTIFFPboardType = _t1;
}

// getter for constant 'NSTabColumnTerminatorsAttributeName'
U32 env___get_NSTabColumnTerminatorsAttributeName(void *_instance) {
    id _result = (id)NSTabColumnTerminatorsAttributeName;
    return (U32)_result;
}

// setter for constant 'NSTabColumnTerminatorsAttributeName'
void env___set_NSTabColumnTerminatorsAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTabColumnTerminatorsAttributeName = _t1;
}

// getter for constant 'NSTableViewColumnDidMoveNotification'
U32 env___get_NSTableViewColumnDidMoveNotification(void *_instance) {
    id _result = (id)NSTableViewColumnDidMoveNotification;
    return (U32)_result;
}

// setter for constant 'NSTableViewColumnDidMoveNotification'
void env___set_NSTableViewColumnDidMoveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTableViewColumnDidMoveNotification = _t1;
}

// getter for constant 'NSTableViewColumnDidResizeNotification'
U32 env___get_NSTableViewColumnDidResizeNotification(void *_instance) {
    id _result = (id)NSTableViewColumnDidResizeNotification;
    return (U32)_result;
}

// setter for constant 'NSTableViewColumnDidResizeNotification'
void env___set_NSTableViewColumnDidResizeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTableViewColumnDidResizeNotification = _t1;
}

// getter for constant 'NSTableViewSelectionDidChangeNotification'
U32 env___get_NSTableViewSelectionDidChangeNotification(void *_instance) {
    id _result = (id)NSTableViewSelectionDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSTableViewSelectionDidChangeNotification'
void env___set_NSTableViewSelectionDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTableViewSelectionDidChangeNotification = _t1;
}

// getter for constant 'NSTableViewSelectionIsChangingNotification'
U32 env___get_NSTableViewSelectionIsChangingNotification(void *_instance) {
    id _result = (id)NSTableViewSelectionIsChangingNotification;
    return (U32)_result;
}

// setter for constant 'NSTableViewSelectionIsChangingNotification'
void env___set_NSTableViewSelectionIsChangingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTableViewSelectionIsChangingNotification = _t1;
}

// getter for constant 'NSTabularTextPboardType'
U32 env___get_NSTabularTextPboardType(void *_instance) {
    id _result = (id)NSTabularTextPboardType;
    return (U32)_result;
}

// setter for constant 'NSTabularTextPboardType'
void env___set_NSTabularTextPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTabularTextPboardType = _t1;
}

// getter for constant 'NSTargetBinding'
U32 env___get_NSTargetBinding(void *_instance) {
    id _result = (id)NSTargetBinding;
    return (U32)_result;
}

// setter for constant 'NSTargetBinding'
void env___set_NSTargetBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTargetBinding = _t1;
}

// getter for constant 'NSTextColorBinding'
U32 env___get_NSTextColorBinding(void *_instance) {
    id _result = (id)NSTextColorBinding;
    return (U32)_result;
}

// setter for constant 'NSTextColorBinding'
void env___set_NSTextColorBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextColorBinding = _t1;
}

// getter for constant 'NSTextDidBeginEditingNotification'
U32 env___get_NSTextDidBeginEditingNotification(void *_instance) {
    id _result = (id)NSTextDidBeginEditingNotification;
    return (U32)_result;
}

// setter for constant 'NSTextDidBeginEditingNotification'
void env___set_NSTextDidBeginEditingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextDidBeginEditingNotification = _t1;
}

// getter for constant 'NSTextDidChangeNotification'
U32 env___get_NSTextDidChangeNotification(void *_instance) {
    id _result = (id)NSTextDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSTextDidChangeNotification'
void env___set_NSTextDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextDidChangeNotification = _t1;
}

// getter for constant 'NSTextDidEndEditingNotification'
U32 env___get_NSTextDidEndEditingNotification(void *_instance) {
    id _result = (id)NSTextDidEndEditingNotification;
    return (U32)_result;
}

// setter for constant 'NSTextDidEndEditingNotification'
void env___set_NSTextDidEndEditingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextDidEndEditingNotification = _t1;
}

// getter for constant 'NSTextEncodingNameDocumentAttribute'
U32 env___get_NSTextEncodingNameDocumentAttribute(void *_instance) {
    id _result = (id)NSTextEncodingNameDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSTextEncodingNameDocumentAttribute'
void env___set_NSTextEncodingNameDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextEncodingNameDocumentAttribute = _t1;
}

// getter for constant 'NSTextEncodingNameDocumentOption'
U32 env___get_NSTextEncodingNameDocumentOption(void *_instance) {
    id _result = (id)NSTextEncodingNameDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSTextEncodingNameDocumentOption'
void env___set_NSTextEncodingNameDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextEncodingNameDocumentOption = _t1;
}

// getter for constant 'NSTextLineTooLongException'
U32 env___get_NSTextLineTooLongException(void *_instance) {
    id _result = (id)NSTextLineTooLongException;
    return (U32)_result;
}

// setter for constant 'NSTextLineTooLongException'
void env___set_NSTextLineTooLongException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextLineTooLongException = _t1;
}

// getter for constant 'NSTextNoSelectionException'
U32 env___get_NSTextNoSelectionException(void *_instance) {
    id _result = (id)NSTextNoSelectionException;
    return (U32)_result;
}

// setter for constant 'NSTextNoSelectionException'
void env___set_NSTextNoSelectionException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextNoSelectionException = _t1;
}

// getter for constant 'NSTextReadException'
U32 env___get_NSTextReadException(void *_instance) {
    id _result = (id)NSTextReadException;
    return (U32)_result;
}

// setter for constant 'NSTextReadException'
void env___set_NSTextReadException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextReadException = _t1;
}

// getter for constant 'NSTextSizeMultiplierDocumentOption'
U32 env___get_NSTextSizeMultiplierDocumentOption(void *_instance) {
    id _result = (id)NSTextSizeMultiplierDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSTextSizeMultiplierDocumentOption'
void env___set_NSTextSizeMultiplierDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextSizeMultiplierDocumentOption = _t1;
}

// getter for constant 'NSTextStorageDidProcessEditingNotification'
U32 env___get_NSTextStorageDidProcessEditingNotification(void *_instance) {
    id _result = (id)NSTextStorageDidProcessEditingNotification;
    return (U32)_result;
}

// setter for constant 'NSTextStorageDidProcessEditingNotification'
void env___set_NSTextStorageDidProcessEditingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextStorageDidProcessEditingNotification = _t1;
}

// getter for constant 'NSTextStorageWillProcessEditingNotification'
U32 env___get_NSTextStorageWillProcessEditingNotification(void *_instance) {
    id _result = (id)NSTextStorageWillProcessEditingNotification;
    return (U32)_result;
}

// setter for constant 'NSTextStorageWillProcessEditingNotification'
void env___set_NSTextStorageWillProcessEditingNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextStorageWillProcessEditingNotification = _t1;
}

// getter for constant 'NSTextViewDidChangeSelectionNotification'
U32 env___get_NSTextViewDidChangeSelectionNotification(void *_instance) {
    id _result = (id)NSTextViewDidChangeSelectionNotification;
    return (U32)_result;
}

// setter for constant 'NSTextViewDidChangeSelectionNotification'
void env___set_NSTextViewDidChangeSelectionNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextViewDidChangeSelectionNotification = _t1;
}

// getter for constant 'NSTextViewDidChangeTypingAttributesNotification'
U32 env___get_NSTextViewDidChangeTypingAttributesNotification(void *_instance) {
    id _result = (id)NSTextViewDidChangeTypingAttributesNotification;
    return (U32)_result;
}

// setter for constant 'NSTextViewDidChangeTypingAttributesNotification'
void env___set_NSTextViewDidChangeTypingAttributesNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextViewDidChangeTypingAttributesNotification = _t1;
}

// getter for constant 'NSTextViewWillChangeNotifyingTextViewNotification'
U32 env___get_NSTextViewWillChangeNotifyingTextViewNotification(void *_instance) {
    id _result = (id)NSTextViewWillChangeNotifyingTextViewNotification;
    return (U32)_result;
}

// setter for constant 'NSTextViewWillChangeNotifyingTextViewNotification'
void env___set_NSTextViewWillChangeNotifyingTextViewNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextViewWillChangeNotifyingTextViewNotification = _t1;
}

// getter for constant 'NSTextWriteException'
U32 env___get_NSTextWriteException(void *_instance) {
    id _result = (id)NSTextWriteException;
    return (U32)_result;
}

// setter for constant 'NSTextWriteException'
void env___set_NSTextWriteException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTextWriteException = _t1;
}

// getter for constant 'NSTimeoutDocumentOption'
U32 env___get_NSTimeoutDocumentOption(void *_instance) {
    id _result = (id)NSTimeoutDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSTimeoutDocumentOption'
void env___set_NSTimeoutDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTimeoutDocumentOption = _t1;
}

// getter for constant 'NSTitleBinding'
U32 env___get_NSTitleBinding(void *_instance) {
    id _result = (id)NSTitleBinding;
    return (U32)_result;
}

// setter for constant 'NSTitleBinding'
void env___set_NSTitleBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTitleBinding = _t1;
}

// getter for constant 'NSTitleDocumentAttribute'
U32 env___get_NSTitleDocumentAttribute(void *_instance) {
    id _result = (id)NSTitleDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSTitleDocumentAttribute'
void env___set_NSTitleDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTitleDocumentAttribute = _t1;
}

// getter for constant 'NSToolTipAttributeName'
U32 env___get_NSToolTipAttributeName(void *_instance) {
    id _result = (id)NSToolTipAttributeName;
    return (U32)_result;
}

// setter for constant 'NSToolTipAttributeName'
void env___set_NSToolTipAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolTipAttributeName = _t1;
}

// getter for constant 'NSToolTipBinding'
U32 env___get_NSToolTipBinding(void *_instance) {
    id _result = (id)NSToolTipBinding;
    return (U32)_result;
}

// setter for constant 'NSToolTipBinding'
void env___set_NSToolTipBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolTipBinding = _t1;
}

// getter for constant 'NSToolbarCustomizeToolbarItemIdentifier'
U32 env___get_NSToolbarCustomizeToolbarItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarCustomizeToolbarItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarCustomizeToolbarItemIdentifier'
void env___set_NSToolbarCustomizeToolbarItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarCustomizeToolbarItemIdentifier = _t1;
}

// getter for constant 'NSToolbarDidRemoveItemNotification'
U32 env___get_NSToolbarDidRemoveItemNotification(void *_instance) {
    id _result = (id)NSToolbarDidRemoveItemNotification;
    return (U32)_result;
}

// setter for constant 'NSToolbarDidRemoveItemNotification'
void env___set_NSToolbarDidRemoveItemNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarDidRemoveItemNotification = _t1;
}

// getter for constant 'NSToolbarFlexibleSpaceItemIdentifier'
U32 env___get_NSToolbarFlexibleSpaceItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarFlexibleSpaceItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarFlexibleSpaceItemIdentifier'
void env___set_NSToolbarFlexibleSpaceItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarFlexibleSpaceItemIdentifier = _t1;
}

// getter for constant 'NSToolbarPrintItemIdentifier'
U32 env___get_NSToolbarPrintItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarPrintItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarPrintItemIdentifier'
void env___set_NSToolbarPrintItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarPrintItemIdentifier = _t1;
}

// getter for constant 'NSToolbarSeparatorItemIdentifier'
U32 env___get_NSToolbarSeparatorItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarSeparatorItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarSeparatorItemIdentifier'
void env___set_NSToolbarSeparatorItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarSeparatorItemIdentifier = _t1;
}

// getter for constant 'NSToolbarShowColorsItemIdentifier'
U32 env___get_NSToolbarShowColorsItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarShowColorsItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarShowColorsItemIdentifier'
void env___set_NSToolbarShowColorsItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarShowColorsItemIdentifier = _t1;
}

// getter for constant 'NSToolbarShowFontsItemIdentifier'
U32 env___get_NSToolbarShowFontsItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarShowFontsItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarShowFontsItemIdentifier'
void env___set_NSToolbarShowFontsItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarShowFontsItemIdentifier = _t1;
}

// getter for constant 'NSToolbarSpaceItemIdentifier'
U32 env___get_NSToolbarSpaceItemIdentifier(void *_instance) {
    id _result = (id)NSToolbarSpaceItemIdentifier;
    return (U32)_result;
}

// setter for constant 'NSToolbarSpaceItemIdentifier'
void env___set_NSToolbarSpaceItemIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarSpaceItemIdentifier = _t1;
}

// getter for constant 'NSToolbarWillAddItemNotification'
U32 env___get_NSToolbarWillAddItemNotification(void *_instance) {
    id _result = (id)NSToolbarWillAddItemNotification;
    return (U32)_result;
}

// setter for constant 'NSToolbarWillAddItemNotification'
void env___set_NSToolbarWillAddItemNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSToolbarWillAddItemNotification = _t1;
}

// getter for constant 'NSTopMarginDocumentAttribute'
U32 env___get_NSTopMarginDocumentAttribute(void *_instance) {
    id _result = (id)NSTopMarginDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSTopMarginDocumentAttribute'
void env___set_NSTopMarginDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTopMarginDocumentAttribute = _t1;
}

// getter for constant 'NSTypedStreamVersionException'
U32 env___get_NSTypedStreamVersionException(void *_instance) {
    id _result = (id)NSTypedStreamVersionException;
    return (U32)_result;
}

// setter for constant 'NSTypedStreamVersionException'
void env___set_NSTypedStreamVersionException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSTypedStreamVersionException = _t1;
}

// getter for constant 'NSURLPboardType'
U32 env___get_NSURLPboardType(void *_instance) {
    id _result = (id)NSURLPboardType;
    return (U32)_result;
}

// setter for constant 'NSURLPboardType'
void env___set_NSURLPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSURLPboardType = _t1;
}

// getter for constant 'NSUnderlineByWordMask'
U32 env___get_NSUnderlineByWordMask(void *_instance) {
    unsigned int _result = (unsigned int)NSUnderlineByWordMask;
    return (U32)_result;
}

// setter for constant 'NSUnderlineByWordMask'
void env___set_NSUnderlineByWordMask(void *_instance, U32 value) {
    NSUnderlineByWordMask = value;
}

// getter for constant 'NSUnderlineColorAttributeName'
U32 env___get_NSUnderlineColorAttributeName(void *_instance) {
    id _result = (id)NSUnderlineColorAttributeName;
    return (U32)_result;
}

// setter for constant 'NSUnderlineColorAttributeName'
void env___set_NSUnderlineColorAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSUnderlineColorAttributeName = _t1;
}

// getter for constant 'NSUnderlineStrikethroughMask'
U32 env___get_NSUnderlineStrikethroughMask(void *_instance) {
    unsigned int _result = (unsigned int)NSUnderlineStrikethroughMask;
    return (U32)_result;
}

// setter for constant 'NSUnderlineStrikethroughMask'
void env___set_NSUnderlineStrikethroughMask(void *_instance, U32 value) {
    NSUnderlineStrikethroughMask = value;
}

// getter for constant 'NSUnderlineStyleAttributeName'
U32 env___get_NSUnderlineStyleAttributeName(void *_instance) {
    id _result = (id)NSUnderlineStyleAttributeName;
    return (U32)_result;
}

// setter for constant 'NSUnderlineStyleAttributeName'
void env___set_NSUnderlineStyleAttributeName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSUnderlineStyleAttributeName = _t1;
}

// getter for constant 'NSVCardPboardType'
U32 env___get_NSVCardPboardType(void *_instance) {
    id _result = (id)NSVCardPboardType;
    return (U32)_result;
}

// setter for constant 'NSVCardPboardType'
void env___set_NSVCardPboardType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVCardPboardType = _t1;
}

// getter for constant 'NSValidatesImmediatelyBindingOption'
U32 env___get_NSValidatesImmediatelyBindingOption(void *_instance) {
    id _result = (id)NSValidatesImmediatelyBindingOption;
    return (U32)_result;
}

// setter for constant 'NSValidatesImmediatelyBindingOption'
void env___set_NSValidatesImmediatelyBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSValidatesImmediatelyBindingOption = _t1;
}

// getter for constant 'NSValueBinding'
U32 env___get_NSValueBinding(void *_instance) {
    id _result = (id)NSValueBinding;
    return (U32)_result;
}

// setter for constant 'NSValueBinding'
void env___set_NSValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSValueBinding = _t1;
}

// getter for constant 'NSValuePathBinding'
U32 env___get_NSValuePathBinding(void *_instance) {
    id _result = (id)NSValuePathBinding;
    return (U32)_result;
}

// setter for constant 'NSValuePathBinding'
void env___set_NSValuePathBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSValuePathBinding = _t1;
}

// getter for constant 'NSValueTransformerBindingOption'
U32 env___get_NSValueTransformerBindingOption(void *_instance) {
    id _result = (id)NSValueTransformerBindingOption;
    return (U32)_result;
}

// setter for constant 'NSValueTransformerBindingOption'
void env___set_NSValueTransformerBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSValueTransformerBindingOption = _t1;
}

// getter for constant 'NSValueTransformerNameBindingOption'
U32 env___get_NSValueTransformerNameBindingOption(void *_instance) {
    id _result = (id)NSValueTransformerNameBindingOption;
    return (U32)_result;
}

// setter for constant 'NSValueTransformerNameBindingOption'
void env___set_NSValueTransformerNameBindingOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSValueTransformerNameBindingOption = _t1;
}

// getter for constant 'NSValueURLBinding'
U32 env___get_NSValueURLBinding(void *_instance) {
    id _result = (id)NSValueURLBinding;
    return (U32)_result;
}

// setter for constant 'NSValueURLBinding'
void env___set_NSValueURLBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSValueURLBinding = _t1;
}

// getter for constant 'NSViewAnimationEffectKey'
U32 env___get_NSViewAnimationEffectKey(void *_instance) {
    id _result = (id)NSViewAnimationEffectKey;
    return (U32)_result;
}

// setter for constant 'NSViewAnimationEffectKey'
void env___set_NSViewAnimationEffectKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewAnimationEffectKey = _t1;
}

// getter for constant 'NSViewAnimationEndFrameKey'
U32 env___get_NSViewAnimationEndFrameKey(void *_instance) {
    id _result = (id)NSViewAnimationEndFrameKey;
    return (U32)_result;
}

// setter for constant 'NSViewAnimationEndFrameKey'
void env___set_NSViewAnimationEndFrameKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewAnimationEndFrameKey = _t1;
}

// getter for constant 'NSViewAnimationFadeInEffect'
U32 env___get_NSViewAnimationFadeInEffect(void *_instance) {
    id _result = (id)NSViewAnimationFadeInEffect;
    return (U32)_result;
}

// setter for constant 'NSViewAnimationFadeInEffect'
void env___set_NSViewAnimationFadeInEffect(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewAnimationFadeInEffect = _t1;
}

// getter for constant 'NSViewAnimationFadeOutEffect'
U32 env___get_NSViewAnimationFadeOutEffect(void *_instance) {
    id _result = (id)NSViewAnimationFadeOutEffect;
    return (U32)_result;
}

// setter for constant 'NSViewAnimationFadeOutEffect'
void env___set_NSViewAnimationFadeOutEffect(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewAnimationFadeOutEffect = _t1;
}

// getter for constant 'NSViewAnimationStartFrameKey'
U32 env___get_NSViewAnimationStartFrameKey(void *_instance) {
    id _result = (id)NSViewAnimationStartFrameKey;
    return (U32)_result;
}

// setter for constant 'NSViewAnimationStartFrameKey'
void env___set_NSViewAnimationStartFrameKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewAnimationStartFrameKey = _t1;
}

// getter for constant 'NSViewAnimationTargetKey'
U32 env___get_NSViewAnimationTargetKey(void *_instance) {
    id _result = (id)NSViewAnimationTargetKey;
    return (U32)_result;
}

// setter for constant 'NSViewAnimationTargetKey'
void env___set_NSViewAnimationTargetKey(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewAnimationTargetKey = _t1;
}

// getter for constant 'NSViewBoundsDidChangeNotification'
U32 env___get_NSViewBoundsDidChangeNotification(void *_instance) {
    id _result = (id)NSViewBoundsDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSViewBoundsDidChangeNotification'
void env___set_NSViewBoundsDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewBoundsDidChangeNotification = _t1;
}

// getter for constant 'NSViewFocusDidChangeNotification'
U32 env___get_NSViewFocusDidChangeNotification(void *_instance) {
    id _result = (id)NSViewFocusDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSViewFocusDidChangeNotification'
void env___set_NSViewFocusDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewFocusDidChangeNotification = _t1;
}

// getter for constant 'NSViewFrameDidChangeNotification'
U32 env___get_NSViewFrameDidChangeNotification(void *_instance) {
    id _result = (id)NSViewFrameDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSViewFrameDidChangeNotification'
void env___set_NSViewFrameDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewFrameDidChangeNotification = _t1;
}

// getter for constant 'NSViewGlobalFrameDidChangeNotification'
U32 env___get_NSViewGlobalFrameDidChangeNotification(void *_instance) {
    id _result = (id)NSViewGlobalFrameDidChangeNotification;
    return (U32)_result;
}

// setter for constant 'NSViewGlobalFrameDidChangeNotification'
void env___set_NSViewGlobalFrameDidChangeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewGlobalFrameDidChangeNotification = _t1;
}

// getter for constant 'NSViewModeDocumentAttribute'
U32 env___get_NSViewModeDocumentAttribute(void *_instance) {
    id _result = (id)NSViewModeDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSViewModeDocumentAttribute'
void env___set_NSViewModeDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewModeDocumentAttribute = _t1;
}

// getter for constant 'NSViewSizeDocumentAttribute'
U32 env___get_NSViewSizeDocumentAttribute(void *_instance) {
    id _result = (id)NSViewSizeDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSViewSizeDocumentAttribute'
void env___set_NSViewSizeDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewSizeDocumentAttribute = _t1;
}

// getter for constant 'NSViewZoomDocumentAttribute'
U32 env___get_NSViewZoomDocumentAttribute(void *_instance) {
    id _result = (id)NSViewZoomDocumentAttribute;
    return (U32)_result;
}

// setter for constant 'NSViewZoomDocumentAttribute'
void env___set_NSViewZoomDocumentAttribute(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSViewZoomDocumentAttribute = _t1;
}

// getter for constant 'NSVisibleBinding'
U32 env___get_NSVisibleBinding(void *_instance) {
    id _result = (id)NSVisibleBinding;
    return (U32)_result;
}

// setter for constant 'NSVisibleBinding'
void env___set_NSVisibleBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVisibleBinding = _t1;
}

// getter for constant 'NSVoiceAge'
U32 env___get_NSVoiceAge(void *_instance) {
    id _result = (id)NSVoiceAge;
    return (U32)_result;
}

// setter for constant 'NSVoiceAge'
void env___set_NSVoiceAge(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceAge = _t1;
}

// getter for constant 'NSVoiceDemoText'
U32 env___get_NSVoiceDemoText(void *_instance) {
    id _result = (id)NSVoiceDemoText;
    return (U32)_result;
}

// setter for constant 'NSVoiceDemoText'
void env___set_NSVoiceDemoText(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceDemoText = _t1;
}

// getter for constant 'NSVoiceGender'
U32 env___get_NSVoiceGender(void *_instance) {
    id _result = (id)NSVoiceGender;
    return (U32)_result;
}

// setter for constant 'NSVoiceGender'
void env___set_NSVoiceGender(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceGender = _t1;
}

// getter for constant 'NSVoiceGenderFemale'
U32 env___get_NSVoiceGenderFemale(void *_instance) {
    id _result = (id)NSVoiceGenderFemale;
    return (U32)_result;
}

// setter for constant 'NSVoiceGenderFemale'
void env___set_NSVoiceGenderFemale(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceGenderFemale = _t1;
}

// getter for constant 'NSVoiceGenderMale'
U32 env___get_NSVoiceGenderMale(void *_instance) {
    id _result = (id)NSVoiceGenderMale;
    return (U32)_result;
}

// setter for constant 'NSVoiceGenderMale'
void env___set_NSVoiceGenderMale(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceGenderMale = _t1;
}

// getter for constant 'NSVoiceGenderNeuter'
U32 env___get_NSVoiceGenderNeuter(void *_instance) {
    id _result = (id)NSVoiceGenderNeuter;
    return (U32)_result;
}

// setter for constant 'NSVoiceGenderNeuter'
void env___set_NSVoiceGenderNeuter(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceGenderNeuter = _t1;
}

// getter for constant 'NSVoiceIdentifier'
U32 env___get_NSVoiceIdentifier(void *_instance) {
    id _result = (id)NSVoiceIdentifier;
    return (U32)_result;
}

// setter for constant 'NSVoiceIdentifier'
void env___set_NSVoiceIdentifier(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceIdentifier = _t1;
}

// getter for constant 'NSVoiceLanguage'
U32 env___get_NSVoiceLanguage(void *_instance) {
    id _result = (id)NSVoiceLanguage;
    return (U32)_result;
}

// setter for constant 'NSVoiceLanguage'
void env___set_NSVoiceLanguage(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceLanguage = _t1;
}

// getter for constant 'NSVoiceName'
U32 env___get_NSVoiceName(void *_instance) {
    id _result = (id)NSVoiceName;
    return (U32)_result;
}

// setter for constant 'NSVoiceName'
void env___set_NSVoiceName(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSVoiceName = _t1;
}

// getter for constant 'NSWarningValueBinding'
U32 env___get_NSWarningValueBinding(void *_instance) {
    id _result = (id)NSWarningValueBinding;
    return (U32)_result;
}

// setter for constant 'NSWarningValueBinding'
void env___set_NSWarningValueBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWarningValueBinding = _t1;
}

// getter for constant 'NSWebArchiveTextDocumentType'
U32 env___get_NSWebArchiveTextDocumentType(void *_instance) {
    id _result = (id)NSWebArchiveTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSWebArchiveTextDocumentType'
void env___set_NSWebArchiveTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWebArchiveTextDocumentType = _t1;
}

// getter for constant 'NSWebPreferencesDocumentOption'
U32 env___get_NSWebPreferencesDocumentOption(void *_instance) {
    id _result = (id)NSWebPreferencesDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSWebPreferencesDocumentOption'
void env___set_NSWebPreferencesDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWebPreferencesDocumentOption = _t1;
}

// getter for constant 'NSWebResourceLoadDelegateDocumentOption'
U32 env___get_NSWebResourceLoadDelegateDocumentOption(void *_instance) {
    id _result = (id)NSWebResourceLoadDelegateDocumentOption;
    return (U32)_result;
}

// setter for constant 'NSWebResourceLoadDelegateDocumentOption'
void env___set_NSWebResourceLoadDelegateDocumentOption(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWebResourceLoadDelegateDocumentOption = _t1;
}

// getter for constant 'NSWhite'
F32 env___get_NSWhite(void *_instance) {
    float _result = (float)NSWhite;
    return (F32)_result;
}

// getter for constant 'NSWidthBinding'
U32 env___get_NSWidthBinding(void *_instance) {
    id _result = (id)NSWidthBinding;
    return (U32)_result;
}

// setter for constant 'NSWidthBinding'
void env___set_NSWidthBinding(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWidthBinding = _t1;
}

// getter for constant 'NSWindowDidBecomeKeyNotification'
U32 env___get_NSWindowDidBecomeKeyNotification(void *_instance) {
    id _result = (id)NSWindowDidBecomeKeyNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidBecomeKeyNotification'
void env___set_NSWindowDidBecomeKeyNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidBecomeKeyNotification = _t1;
}

// getter for constant 'NSWindowDidBecomeMainNotification'
U32 env___get_NSWindowDidBecomeMainNotification(void *_instance) {
    id _result = (id)NSWindowDidBecomeMainNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidBecomeMainNotification'
void env___set_NSWindowDidBecomeMainNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidBecomeMainNotification = _t1;
}

// getter for constant 'NSWindowDidChangeScreenNotification'
U32 env___get_NSWindowDidChangeScreenNotification(void *_instance) {
    id _result = (id)NSWindowDidChangeScreenNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidChangeScreenNotification'
void env___set_NSWindowDidChangeScreenNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidChangeScreenNotification = _t1;
}

// getter for constant 'NSWindowDidChangeScreenProfileNotification'
U32 env___get_NSWindowDidChangeScreenProfileNotification(void *_instance) {
    id _result = (id)NSWindowDidChangeScreenProfileNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidChangeScreenProfileNotification'
void env___set_NSWindowDidChangeScreenProfileNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidChangeScreenProfileNotification = _t1;
}

// getter for constant 'NSWindowDidDeminiaturizeNotification'
U32 env___get_NSWindowDidDeminiaturizeNotification(void *_instance) {
    id _result = (id)NSWindowDidDeminiaturizeNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidDeminiaturizeNotification'
void env___set_NSWindowDidDeminiaturizeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidDeminiaturizeNotification = _t1;
}

// getter for constant 'NSWindowDidEndSheetNotification'
U32 env___get_NSWindowDidEndSheetNotification(void *_instance) {
    id _result = (id)NSWindowDidEndSheetNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidEndSheetNotification'
void env___set_NSWindowDidEndSheetNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidEndSheetNotification = _t1;
}

// getter for constant 'NSWindowDidExposeNotification'
U32 env___get_NSWindowDidExposeNotification(void *_instance) {
    id _result = (id)NSWindowDidExposeNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidExposeNotification'
void env___set_NSWindowDidExposeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidExposeNotification = _t1;
}

// getter for constant 'NSWindowDidMiniaturizeNotification'
U32 env___get_NSWindowDidMiniaturizeNotification(void *_instance) {
    id _result = (id)NSWindowDidMiniaturizeNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidMiniaturizeNotification'
void env___set_NSWindowDidMiniaturizeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidMiniaturizeNotification = _t1;
}

// getter for constant 'NSWindowDidMoveNotification'
U32 env___get_NSWindowDidMoveNotification(void *_instance) {
    id _result = (id)NSWindowDidMoveNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidMoveNotification'
void env___set_NSWindowDidMoveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidMoveNotification = _t1;
}

// getter for constant 'NSWindowDidResignKeyNotification'
U32 env___get_NSWindowDidResignKeyNotification(void *_instance) {
    id _result = (id)NSWindowDidResignKeyNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidResignKeyNotification'
void env___set_NSWindowDidResignKeyNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidResignKeyNotification = _t1;
}

// getter for constant 'NSWindowDidResignMainNotification'
U32 env___get_NSWindowDidResignMainNotification(void *_instance) {
    id _result = (id)NSWindowDidResignMainNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidResignMainNotification'
void env___set_NSWindowDidResignMainNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidResignMainNotification = _t1;
}

// getter for constant 'NSWindowDidResizeNotification'
U32 env___get_NSWindowDidResizeNotification(void *_instance) {
    id _result = (id)NSWindowDidResizeNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidResizeNotification'
void env___set_NSWindowDidResizeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidResizeNotification = _t1;
}

// getter for constant 'NSWindowDidUpdateNotification'
U32 env___get_NSWindowDidUpdateNotification(void *_instance) {
    id _result = (id)NSWindowDidUpdateNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowDidUpdateNotification'
void env___set_NSWindowDidUpdateNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowDidUpdateNotification = _t1;
}

// getter for constant 'NSWindowServerCommunicationException'
U32 env___get_NSWindowServerCommunicationException(void *_instance) {
    id _result = (id)NSWindowServerCommunicationException;
    return (U32)_result;
}

// setter for constant 'NSWindowServerCommunicationException'
void env___set_NSWindowServerCommunicationException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowServerCommunicationException = _t1;
}

// getter for constant 'NSWindowWillBeginSheetNotification'
U32 env___get_NSWindowWillBeginSheetNotification(void *_instance) {
    id _result = (id)NSWindowWillBeginSheetNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowWillBeginSheetNotification'
void env___set_NSWindowWillBeginSheetNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowWillBeginSheetNotification = _t1;
}

// getter for constant 'NSWindowWillCloseNotification'
U32 env___get_NSWindowWillCloseNotification(void *_instance) {
    id _result = (id)NSWindowWillCloseNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowWillCloseNotification'
void env___set_NSWindowWillCloseNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowWillCloseNotification = _t1;
}

// getter for constant 'NSWindowWillMiniaturizeNotification'
U32 env___get_NSWindowWillMiniaturizeNotification(void *_instance) {
    id _result = (id)NSWindowWillMiniaturizeNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowWillMiniaturizeNotification'
void env___set_NSWindowWillMiniaturizeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowWillMiniaturizeNotification = _t1;
}

// getter for constant 'NSWindowWillMoveNotification'
U32 env___get_NSWindowWillMoveNotification(void *_instance) {
    id _result = (id)NSWindowWillMoveNotification;
    return (U32)_result;
}

// setter for constant 'NSWindowWillMoveNotification'
void env___set_NSWindowWillMoveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWindowWillMoveNotification = _t1;
}

// getter for constant 'NSWordMLTextDocumentType'
U32 env___get_NSWordMLTextDocumentType(void *_instance) {
    id _result = (id)NSWordMLTextDocumentType;
    return (U32)_result;
}

// setter for constant 'NSWordMLTextDocumentType'
void env___set_NSWordMLTextDocumentType(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWordMLTextDocumentType = _t1;
}

// getter for constant 'NSWordTablesReadException'
U32 env___get_NSWordTablesReadException(void *_instance) {
    id _result = (id)NSWordTablesReadException;
    return (U32)_result;
}

// setter for constant 'NSWordTablesReadException'
void env___set_NSWordTablesReadException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWordTablesReadException = _t1;
}

// getter for constant 'NSWordTablesWriteException'
U32 env___get_NSWordTablesWriteException(void *_instance) {
    id _result = (id)NSWordTablesWriteException;
    return (U32)_result;
}

// setter for constant 'NSWordTablesWriteException'
void env___set_NSWordTablesWriteException(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWordTablesWriteException = _t1;
}

// getter for constant 'NSWorkspaceCompressOperation'
U32 env___get_NSWorkspaceCompressOperation(void *_instance) {
    id _result = (id)NSWorkspaceCompressOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceCompressOperation'
void env___set_NSWorkspaceCompressOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceCompressOperation = _t1;
}

// getter for constant 'NSWorkspaceCopyOperation'
U32 env___get_NSWorkspaceCopyOperation(void *_instance) {
    id _result = (id)NSWorkspaceCopyOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceCopyOperation'
void env___set_NSWorkspaceCopyOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceCopyOperation = _t1;
}

// getter for constant 'NSWorkspaceDecompressOperation'
U32 env___get_NSWorkspaceDecompressOperation(void *_instance) {
    id _result = (id)NSWorkspaceDecompressOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDecompressOperation'
void env___set_NSWorkspaceDecompressOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDecompressOperation = _t1;
}

// getter for constant 'NSWorkspaceDecryptOperation'
U32 env___get_NSWorkspaceDecryptOperation(void *_instance) {
    id _result = (id)NSWorkspaceDecryptOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDecryptOperation'
void env___set_NSWorkspaceDecryptOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDecryptOperation = _t1;
}

// getter for constant 'NSWorkspaceDestroyOperation'
U32 env___get_NSWorkspaceDestroyOperation(void *_instance) {
    id _result = (id)NSWorkspaceDestroyOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDestroyOperation'
void env___set_NSWorkspaceDestroyOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDestroyOperation = _t1;
}

// getter for constant 'NSWorkspaceDidLaunchApplicationNotification'
U32 env___get_NSWorkspaceDidLaunchApplicationNotification(void *_instance) {
    id _result = (id)NSWorkspaceDidLaunchApplicationNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDidLaunchApplicationNotification'
void env___set_NSWorkspaceDidLaunchApplicationNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDidLaunchApplicationNotification = _t1;
}

// getter for constant 'NSWorkspaceDidMountNotification'
U32 env___get_NSWorkspaceDidMountNotification(void *_instance) {
    id _result = (id)NSWorkspaceDidMountNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDidMountNotification'
void env___set_NSWorkspaceDidMountNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDidMountNotification = _t1;
}

// getter for constant 'NSWorkspaceDidPerformFileOperationNotification'
U32 env___get_NSWorkspaceDidPerformFileOperationNotification(void *_instance) {
    id _result = (id)NSWorkspaceDidPerformFileOperationNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDidPerformFileOperationNotification'
void env___set_NSWorkspaceDidPerformFileOperationNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDidPerformFileOperationNotification = _t1;
}

// getter for constant 'NSWorkspaceDidTerminateApplicationNotification'
U32 env___get_NSWorkspaceDidTerminateApplicationNotification(void *_instance) {
    id _result = (id)NSWorkspaceDidTerminateApplicationNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDidTerminateApplicationNotification'
void env___set_NSWorkspaceDidTerminateApplicationNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDidTerminateApplicationNotification = _t1;
}

// getter for constant 'NSWorkspaceDidUnmountNotification'
U32 env___get_NSWorkspaceDidUnmountNotification(void *_instance) {
    id _result = (id)NSWorkspaceDidUnmountNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDidUnmountNotification'
void env___set_NSWorkspaceDidUnmountNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDidUnmountNotification = _t1;
}

// getter for constant 'NSWorkspaceDidWakeNotification'
U32 env___get_NSWorkspaceDidWakeNotification(void *_instance) {
    id _result = (id)NSWorkspaceDidWakeNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDidWakeNotification'
void env___set_NSWorkspaceDidWakeNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDidWakeNotification = _t1;
}

// getter for constant 'NSWorkspaceDuplicateOperation'
U32 env___get_NSWorkspaceDuplicateOperation(void *_instance) {
    id _result = (id)NSWorkspaceDuplicateOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceDuplicateOperation'
void env___set_NSWorkspaceDuplicateOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceDuplicateOperation = _t1;
}

// getter for constant 'NSWorkspaceEncryptOperation'
U32 env___get_NSWorkspaceEncryptOperation(void *_instance) {
    id _result = (id)NSWorkspaceEncryptOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceEncryptOperation'
void env___set_NSWorkspaceEncryptOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceEncryptOperation = _t1;
}

// getter for constant 'NSWorkspaceLinkOperation'
U32 env___get_NSWorkspaceLinkOperation(void *_instance) {
    id _result = (id)NSWorkspaceLinkOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceLinkOperation'
void env___set_NSWorkspaceLinkOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceLinkOperation = _t1;
}

// getter for constant 'NSWorkspaceMoveOperation'
U32 env___get_NSWorkspaceMoveOperation(void *_instance) {
    id _result = (id)NSWorkspaceMoveOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceMoveOperation'
void env___set_NSWorkspaceMoveOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceMoveOperation = _t1;
}

// getter for constant 'NSWorkspaceRecycleOperation'
U32 env___get_NSWorkspaceRecycleOperation(void *_instance) {
    id _result = (id)NSWorkspaceRecycleOperation;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceRecycleOperation'
void env___set_NSWorkspaceRecycleOperation(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceRecycleOperation = _t1;
}

// getter for constant 'NSWorkspaceSessionDidBecomeActiveNotification'
U32 env___get_NSWorkspaceSessionDidBecomeActiveNotification(void *_instance) {
    id _result = (id)NSWorkspaceSessionDidBecomeActiveNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceSessionDidBecomeActiveNotification'
void env___set_NSWorkspaceSessionDidBecomeActiveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceSessionDidBecomeActiveNotification = _t1;
}

// getter for constant 'NSWorkspaceSessionDidResignActiveNotification'
U32 env___get_NSWorkspaceSessionDidResignActiveNotification(void *_instance) {
    id _result = (id)NSWorkspaceSessionDidResignActiveNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceSessionDidResignActiveNotification'
void env___set_NSWorkspaceSessionDidResignActiveNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceSessionDidResignActiveNotification = _t1;
}

// getter for constant 'NSWorkspaceWillLaunchApplicationNotification'
U32 env___get_NSWorkspaceWillLaunchApplicationNotification(void *_instance) {
    id _result = (id)NSWorkspaceWillLaunchApplicationNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceWillLaunchApplicationNotification'
void env___set_NSWorkspaceWillLaunchApplicationNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceWillLaunchApplicationNotification = _t1;
}

// getter for constant 'NSWorkspaceWillPowerOffNotification'
U32 env___get_NSWorkspaceWillPowerOffNotification(void *_instance) {
    id _result = (id)NSWorkspaceWillPowerOffNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceWillPowerOffNotification'
void env___set_NSWorkspaceWillPowerOffNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceWillPowerOffNotification = _t1;
}

// getter for constant 'NSWorkspaceWillSleepNotification'
U32 env___get_NSWorkspaceWillSleepNotification(void *_instance) {
    id _result = (id)NSWorkspaceWillSleepNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceWillSleepNotification'
void env___set_NSWorkspaceWillSleepNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceWillSleepNotification = _t1;
}

// getter for constant 'NSWorkspaceWillUnmountNotification'
U32 env___get_NSWorkspaceWillUnmountNotification(void *_instance) {
    id _result = (id)NSWorkspaceWillUnmountNotification;
    return (U32)_result;
}

// setter for constant 'NSWorkspaceWillUnmountNotification'
void env___set_NSWorkspaceWillUnmountNotification(void *_instance, U32 valuePointer) {
    id _t1 = (id)valuePointer;
    NSWorkspaceWillUnmountNotification = _t1;
}

// function 'NSAccessibilityActionDescription'
U32 env__NSAccessibilityActionDescription(void *_instance, U32 actionPointer) {
    id _t1 = (id)actionPointer;
    id _result = (id)NSAccessibilityActionDescription(_t1);
    return (U32)_result;
}

// function 'NSAccessibilityPostNotification'
void env__NSAccessibilityPostNotification(void *_instance, U32 elementPointer, U32 notificationPointer) {
    id _t1 = (id)elementPointer;
    id _t2 = (id)notificationPointer;
    NSAccessibilityPostNotification(_t1, _t2);
}

// function 'NSAccessibilityRaiseBadArgumentException'
void env__NSAccessibilityRaiseBadArgumentException(void *_instance, U32 elementPointer, U32 attributePointer, U32 valuePointer) {
    id _t1 = (id)elementPointer;
    id _t2 = (id)attributePointer;
    id _t3 = (id)valuePointer;
    NSAccessibilityRaiseBadArgumentException(_t1, _t2, _t3);
}

// function 'NSAccessibilityRoleDescription'
U32 env__NSAccessibilityRoleDescription(void *_instance, U32 rolePointer, U32 subrolePointer) {
    id _t1 = (id)rolePointer;
    id _t2 = (id)subrolePointer;
    id _result = (id)NSAccessibilityRoleDescription(_t1, _t2);
    return (U32)_result;
}

// function 'NSAccessibilityRoleDescriptionForUIElement'
U32 env__NSAccessibilityRoleDescriptionForUIElement(void *_instance, U32 elementPointer) {
    id _t1 = (id)elementPointer;
    id _result = (id)NSAccessibilityRoleDescriptionForUIElement(_t1);
    return (U32)_result;
}

// function 'NSAccessibilityUnignoredAncestor'
U32 env__NSAccessibilityUnignoredAncestor(void *_instance, U32 elementPointer) {
    id _t1 = (id)elementPointer;
    id _result = (id)NSAccessibilityUnignoredAncestor(_t1);
    return (U32)_result;
}

// function 'NSAccessibilityUnignoredChildren'
U32 env__NSAccessibilityUnignoredChildren(void *_instance, U32 originalChildrenPointer) {
    id _t1 = (id)originalChildrenPointer;
    id _result = (id)NSAccessibilityUnignoredChildren(_t1);
    return (U32)_result;
}

// function 'NSAccessibilityUnignoredChildrenForOnlyChild'
U32 env__NSAccessibilityUnignoredChildrenForOnlyChild(void *_instance, U32 originalChildPointer) {
    id _t1 = (id)originalChildPointer;
    id _result = (id)NSAccessibilityUnignoredChildrenForOnlyChild(_t1);
    return (U32)_result;
}

// function 'NSAccessibilityUnignoredDescendant'
U32 env__NSAccessibilityUnignoredDescendant(void *_instance, U32 elementPointer) {
    id _t1 = (id)elementPointer;
    id _result = (id)NSAccessibilityUnignoredDescendant(_t1);
    return (U32)_result;
}

// function 'NSApplicationLoad'
U32 env__NSApplicationLoad(void *_instance) {
    BOOL _result = (BOOL)NSApplicationLoad();
    return (U32)_result;
}

// function 'NSApplicationMain'
U32 env__NSApplicationMain(void *_instance, U32 argc, U32 argvPointer) {
    const char** _t1 = (const char**)argvPointer;
    int _result = (int)NSApplicationMain(argc, _t1);
    return (U32)_result;
}

// function 'NSAvailableWindowDepths'
U32 env__NSAvailableWindowDepths(void *_instance) {
    const int* _result = (const int*)NSAvailableWindowDepths();
    return (U32)_result;
}

// function 'NSBeep'
void env__NSBeep(void *_instance) {
    NSBeep();
}

// function 'NSBestDepth'
U32 env__NSBestDepth(void *_instance, U32 colorSpacePointer, U32 bps, U32 bpp, U32 planar, U32 exactMatchPointer) {
    id _t1 = (id)colorSpacePointer;
    BOOL* _t2 = (BOOL*)exactMatchPointer;
    int _result = (int)NSBestDepth(_t1, bps, bpp, planar, _t2);
    return (U32)_result;
}

// function 'NSBitsPerPixelFromDepth'
U32 env__NSBitsPerPixelFromDepth(void *_instance, U32 depth) {
    int _result = (int)NSBitsPerPixelFromDepth(depth);
    return (U32)_result;
}

// function 'NSBitsPerSampleFromDepth'
U32 env__NSBitsPerSampleFromDepth(void *_instance, U32 depth) {
    int _result = (int)NSBitsPerSampleFromDepth(depth);
    return (U32)_result;
}

// function 'NSColorSpaceFromDepth'
U32 env__NSColorSpaceFromDepth(void *_instance, U32 depth) {
    id _result = (id)NSColorSpaceFromDepth(depth);
    return (U32)_result;
}

// function 'NSConvertGlyphsToPackedGlyphs'
U32 env__NSConvertGlyphsToPackedGlyphs(void *_instance, U32 glBufPointer, U32 count, U32 packing, U32 packedGlyphsPointer) {
    unsigned int* _t1 = (unsigned int*)glBufPointer;
    char* _t2 = (char*)packedGlyphsPointer;
    int _result = (int)NSConvertGlyphsToPackedGlyphs(_t1, count, packing, _t2);
    return (U32)_result;
}

// function 'NSCopyBits'
void env__NSCopyBits(void *_instance, U32 srcGState, U32 srcRectIndirect, U32 destPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + srcRectIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + destPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    NSCopyBits(srcGState, _t1, _t2);
}

// function 'NSCountWindows'
void env__NSCountWindows(void *_instance, U32 countPointer) {
    int* _t1 = (int*)countPointer;
    NSCountWindows(_t1);
}

// function 'NSCountWindowsForContext'
void env__NSCountWindowsForContext(void *_instance, U32 context, U32 countPointer) {
    int* _t1 = (int*)countPointer;
    NSCountWindowsForContext(context, _t1);
}

// function 'NSCreateFileContentsPboardType'
U32 env__NSCreateFileContentsPboardType(void *_instance, U32 fileTypePointer) {
    id _t1 = (id)fileTypePointer;
    id _result = (id)NSCreateFileContentsPboardType(_t1);
    return (U32)_result;
}

// function 'NSCreateFilenamePboardType'
U32 env__NSCreateFilenamePboardType(void *_instance, U32 fileTypePointer) {
    id _t1 = (id)fileTypePointer;
    id _result = (id)NSCreateFilenamePboardType(_t1);
    return (U32)_result;
}

// function 'NSDisableScreenUpdates'
void env__NSDisableScreenUpdates(void *_instance) {
    NSDisableScreenUpdates();
}

// function 'NSDottedFrameRect'
void env__NSDottedFrameRect(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSDottedFrameRect(_t1);
}

// function 'NSDrawBitmap'
void env__NSDrawBitmap(void *_instance, U32 rectIndirect, U32 width, U32 height, U32 bps, U32 spp, U32 bpp, U32 bpr, U32 isPlanar, U32 hasAlpha, U32 colorSpaceNamePointer, U32 dataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)colorSpaceNamePointer;
    const unsigned char ** _t3 = (const unsigned char **)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSDrawBitmap(_t1, width, height, bps, spp, bpp, bpr, isPlanar, hasAlpha, _t2, _t3);
}

// function 'NSDrawButton'
void env__NSDrawButton(void *_instance, U32 aRectIndirect, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSDrawButton(_t1, _t2);
}

// function 'NSDrawColorTiledRects'
void env__NSDrawColorTiledRects(void *_instance, U32 _resultIndirect, U32 boundsRectIndirect, U32 clipRectIndirect, U32 sidesPointer, U32 colorsPointer, U32 count) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + boundsRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    const int* _t3 = (const int*)sidesPointer;
    id* _t4 = (id*)colorsPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSRect _result = (NSRect)NSDrawColorTiledRects(_t1, _t2, _t3, _t4, count);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// function 'NSDrawDarkBezel'
void env__NSDrawDarkBezel(void *_instance, U32 aRectIndirect, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSDrawDarkBezel(_t1, _t2);
}

// function 'NSDrawGrayBezel'
void env__NSDrawGrayBezel(void *_instance, U32 aRectIndirect, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSDrawGrayBezel(_t1, _t2);
}

// function 'NSDrawGroove'
void env__NSDrawGroove(void *_instance, U32 aRectIndirect, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSDrawGroove(_t1, _t2);
}

// function 'NSDrawLightBezel'
void env__NSDrawLightBezel(void *_instance, U32 aRectIndirect, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSDrawLightBezel(_t1, _t2);
}

// function 'NSDrawTiledRects'
void env__NSDrawTiledRects(void *_instance, U32 _resultIndirect, U32 boundsRectIndirect, U32 clipRectIndirect, U32 sidesPointer, U32 graysPointer, U32 count) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + boundsRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    const int* _t3 = (const int*)sidesPointer;
    const float* _t4 = (const float*)graysPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSRect _result = (NSRect)NSDrawTiledRects(_t1, _t2, _t3, _t4, count);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// function 'NSDrawWhiteBezel'
void env__NSDrawWhiteBezel(void *_instance, U32 aRectIndirect, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSDrawWhiteBezel(_t1, _t2);
}

// function 'NSDrawWindowBackground'
void env__NSDrawWindowBackground(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSDrawWindowBackground(_t1);
}

// function 'NSEnableScreenUpdates'
void env__NSEnableScreenUpdates(void *_instance) {
    NSEnableScreenUpdates();
}

// function 'NSEraseRect'
void env__NSEraseRect(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSEraseRect(_t1);
}

// function 'NSEventMaskFromType'
U32 env__NSEventMaskFromType(void *_instance, U32 type) {
    unsigned int _result = (unsigned int)NSEventMaskFromType(type);
    return (U32)_result;
}

// function 'NSFrameRect'
void env__NSFrameRect(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSFrameRect(_t1);
}

// function 'NSFrameRectWithWidth'
void env__NSFrameRectWithWidth(void *_instance, U32 aRectIndirect, F32 frameWidth) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSFrameRectWithWidth(_t1, frameWidth);
}

// function 'NSFrameRectWithWidthUsingOperation'
void env__NSFrameRectWithWidthUsingOperation(void *_instance, U32 aRectIndirect, F32 frameWidth, U32 op) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSFrameRectWithWidthUsingOperation(_t1, frameWidth, op);
}

// function 'NSGetFileType'
U32 env__NSGetFileType(void *_instance, U32 pboardTypePointer) {
    id _t1 = (id)pboardTypePointer;
    id _result = (id)NSGetFileType(_t1);
    return (U32)_result;
}

// function 'NSGetFileTypes'
U32 env__NSGetFileTypes(void *_instance, U32 pboardTypesPointer) {
    id _t1 = (id)pboardTypesPointer;
    id _result = (id)NSGetFileTypes(_t1);
    return (U32)_result;
}

// function 'NSGetWindowServerMemory'
U32 env__NSGetWindowServerMemory(void *_instance, U32 context, U32 virtualMemoryPointer, U32 windowBackingMemoryPointer, U32 windowDumpStringPointer) {
    int* _t1 = (int*)virtualMemoryPointer;
    int* _t2 = (int*)windowBackingMemoryPointer;
    id* _t3 = (id*)windowDumpStringPointer;
    int _result = (int)NSGetWindowServerMemory(context, _t1, _t2, _t3);
    return (U32)_result;
}

// function 'NSHighlightRect'
void env__NSHighlightRect(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSHighlightRect(_t1);
}

// function 'NSInterfaceStyleForKey'
U32 env__NSInterfaceStyleForKey(void *_instance, U32 keyPointer, U32 responderPointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)responderPointer;
    int _result = (int)NSInterfaceStyleForKey(_t1, _t2);
    return (U32)_result;
}

// function 'NSIsControllerMarker'
U32 env__NSIsControllerMarker(void *_instance, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    BOOL _result = (BOOL)NSIsControllerMarker(_t1);
    return (U32)_result;
}

// function 'NSNumberOfColorComponents'
U32 env__NSNumberOfColorComponents(void *_instance, U32 colorSpaceNamePointer) {
    id _t1 = (id)colorSpaceNamePointer;
    int _result = (int)NSNumberOfColorComponents(_t1);
    return (U32)_result;
}

// function 'NSOpenGLGetOption'
void env__NSOpenGLGetOption(void *_instance, U32 pname, U32 paramPointer) {
    long* _t1 = (long*)paramPointer;
    NSOpenGLGetOption(pname, _t1);
}

// function 'NSOpenGLGetVersion'
void env__NSOpenGLGetVersion(void *_instance, U32 majorPointer, U32 minorPointer) {
    long* _t1 = (long*)majorPointer;
    long* _t2 = (long*)minorPointer;
    NSOpenGLGetVersion(_t1, _t2);
}

// function 'NSOpenGLSetOption'
void env__NSOpenGLSetOption(void *_instance, U32 pname, U32 param) {
    NSOpenGLSetOption(pname, param);
}

// function 'NSPerformService'
U32 env__NSPerformService(void *_instance, U32 itemNamePointer, U32 pboardPointer) {
    id _t1 = (id)itemNamePointer;
    id _t2 = (id)pboardPointer;
    BOOL _result = (BOOL)NSPerformService(_t1, _t2);
    return (U32)_result;
}

// function 'NSPlanarFromDepth'
U32 env__NSPlanarFromDepth(void *_instance, U32 depth) {
    BOOL _result = (BOOL)NSPlanarFromDepth(depth);
    return (U32)_result;
}

// function 'NSReadPixel'
U32 env__NSReadPixel(void *_instance, U32 passedPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + passedPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)NSReadPixel(_t1);
    return (U32)_result;
}

// function 'NSRectClip'
void env__NSRectClip(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRectClip(_t1);
}

// function 'NSRectClipList'
void env__NSRectClipList(void *_instance, U32 rectsPointer, U32 count) {
    const NSRect* _t1 = (const NSRect*)rectsPointer;
    NSRectClipList(_t1, count);
}

// function 'NSRectFill'
void env__NSRectFill(void *_instance, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRectFill(_t1);
}

// function 'NSRectFillList'
void env__NSRectFillList(void *_instance, U32 rectsPointer, U32 count) {
    const NSRect* _t1 = (const NSRect*)rectsPointer;
    NSRectFillList(_t1, count);
}

// function 'NSRectFillListUsingOperation'
void env__NSRectFillListUsingOperation(void *_instance, U32 rectsPointer, U32 count, U32 op) {
    const NSRect* _t1 = (const NSRect*)rectsPointer;
    NSRectFillListUsingOperation(_t1, count, op);
}

// function 'NSRectFillListWithColors'
void env__NSRectFillListWithColors(void *_instance, U32 rectsPointer, U32 colorsPointer, U32 num) {
    const NSRect* _t1 = (const NSRect*)rectsPointer;
    id* _t2 = (id*)colorsPointer;
    NSRectFillListWithColors(_t1, _t2, num);
}

// function 'NSRectFillListWithColorsUsingOperation'
void env__NSRectFillListWithColorsUsingOperation(void *_instance, U32 rectsPointer, U32 colorsPointer, U32 num, U32 op) {
    const NSRect* _t1 = (const NSRect*)rectsPointer;
    id* _t2 = (id*)colorsPointer;
    NSRectFillListWithColorsUsingOperation(_t1, _t2, num, op);
}

// function 'NSRectFillListWithGrays'
void env__NSRectFillListWithGrays(void *_instance, U32 rectsPointer, U32 graysPointer, U32 num) {
    const NSRect* _t1 = (const NSRect*)rectsPointer;
    const float* _t2 = (const float*)graysPointer;
    NSRectFillListWithGrays(_t1, _t2, num);
}

// function 'NSRectFillUsingOperation'
void env__NSRectFillUsingOperation(void *_instance, U32 aRectIndirect, U32 op) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRectFillUsingOperation(_t1, op);
}

// function 'NSRegisterServicesProvider'
void env__NSRegisterServicesProvider(void *_instance, U32 providerPointer, U32 namePointer) {
    id _t1 = (id)providerPointer;
    id _t2 = (id)namePointer;
    NSRegisterServicesProvider(_t1, _t2);
}

// function 'NSReleaseAlertPanel'
void env__NSReleaseAlertPanel(void *_instance, U32 panelPointer) {
    id _t1 = (id)panelPointer;
    NSReleaseAlertPanel(_t1);
}

// function 'NSSetFocusRingStyle'
void env__NSSetFocusRingStyle(void *_instance, U32 placement) {
    NSSetFocusRingStyle(placement);
}

// function 'NSSetShowsServicesMenuItem'
U32 env__NSSetShowsServicesMenuItem(void *_instance, U32 itemNamePointer, U32 enabled) {
    id _t1 = (id)itemNamePointer;
    int _result = (int)NSSetShowsServicesMenuItem(_t1, enabled);
    return (U32)_result;
}

// function 'NSShowAnimationEffect'
void env__NSShowAnimationEffect(void *_instance, U32 animationEffect, U32 centerLocationIndirect, U32 sizeIndirect, U32 animationDelegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + centerLocationIndirect);
    NSSize _t2 = *(NSSize*)(_mem->data + sizeIndirect);
    id _t3 = (id)animationDelegatePointer;
    SEL _t4 = (SEL)didEndSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.width);
    swap_f(&_t2.height);
    #endif
    NSShowAnimationEffect(animationEffect, _t1, _t2, _t3, _t4, _t5);
}

// function 'NSShowsServicesMenuItem'
U32 env__NSShowsServicesMenuItem(void *_instance, U32 itemNamePointer) {
    id _t1 = (id)itemNamePointer;
    BOOL _result = (BOOL)NSShowsServicesMenuItem(_t1);
    return (U32)_result;
}

// function 'NSUnregisterServicesProvider'
void env__NSUnregisterServicesProvider(void *_instance, U32 namePointer) {
    id _t1 = (id)namePointer;
    NSUnregisterServicesProvider(_t1);
}

// function 'NSUpdateDynamicServices'
void env__NSUpdateDynamicServices(void *_instance) {
    NSUpdateDynamicServices();
}

// function 'NSWindowList'
void env__NSWindowList(void *_instance, U32 size, U32 listPointer) {
    int* _t1 = (int*)listPointer;
    NSWindowList(size, _t1);
}

// function 'NSWindowListForContext'
void env__NSWindowListForContext(void *_instance, U32 context, U32 size, U32 listPointer) {
    int* _t1 = (int*)listPointer;
    NSWindowListForContext(context, size, _t1);
}

// method '-[CIColor initWithColor:]'
U32 env___IM_CIColor_initWithColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    id _result = (id)[(CIColor*)_self initWithColor:_t1];
    return (U32)_result;
}

// method '-[CIImage drawAtPoint:fromRect:operation:fraction:]'
void env___IM_CIImage_drawAtPoint_CfromRect_Coperation_Cfraction_C(void *_instance, U32 _self, U32 pointIndirect, U32 fromRectIndirect, U32 op, F32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + fromRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(CIImage*)_self drawAtPoint:_t1 fromRect:_t2 operation:op fraction:delta];
}

// method '-[CIImage drawInRect:fromRect:operation:fraction:]'
void env___IM_CIImage_drawInRect_CfromRect_Coperation_Cfraction_C(void *_instance, U32 _self, U32 rectIndirect, U32 fromRectIndirect, U32 op, F32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + fromRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(CIImage*)_self drawInRect:_t1 fromRect:_t2 operation:op fraction:delta];
}

// method '-[CIImage initWithBitmapImageRep:]'
U32 env___IM_CIImage_initWithBitmapImageRep_C(void *_instance, U32 _self, U32 bitmapImageRepPointer) {
    id _t1 = (id)bitmapImageRepPointer;
    id _result = (id)[(CIImage*)_self initWithBitmapImageRep:_t1];
    return (U32)_result;
}

// method '+[NSATSTypesetter sharedTypesetter]'
U32 env___CM_NSATSTypesetter_sharedTypesetter(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedTypesetter];
    return (U32)_result;
}

// method '-[NSActionCell action]'
U32 env___IM_NSActionCell_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSActionCell*)_self action];
    return (U32)_result;
}

// method '-[NSActionCell controlView]'
U32 env___IM_NSActionCell_controlView(void *_instance, U32 _self) {
    id _result = (id)[(NSActionCell*)_self controlView];
    return (U32)_result;
}

// method '-[NSActionCell doubleValue]'
F64 env___IM_NSActionCell_doubleValue(void *_instance, U32 _self) {
    double _result = (double)[(NSActionCell*)_self doubleValue];
    return (F64)_result;
}

// method '-[NSActionCell floatValue]'
F32 env___IM_NSActionCell_floatValue(void *_instance, U32 _self) {
    float _result = (float)[(NSActionCell*)_self floatValue];
    return (F32)_result;
}

// method '-[NSActionCell intValue]'
U32 env___IM_NSActionCell_intValue(void *_instance, U32 _self) {
    int _result = (int)[(NSActionCell*)_self intValue];
    return (U32)_result;
}

// method '-[NSActionCell setAction:]'
void env___IM_NSActionCell_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSActionCell*)_self setAction:_t1];
}

// method '-[NSActionCell setAlignment:]'
void env___IM_NSActionCell_setAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSActionCell*)_self setAlignment:mode];
}

// method '-[NSActionCell setBezeled:]'
void env___IM_NSActionCell_setBezeled_C(void *_instance, U32 _self, U32 flag) {
    [(NSActionCell*)_self setBezeled:flag];
}

// method '-[NSActionCell setBordered:]'
void env___IM_NSActionCell_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSActionCell*)_self setBordered:flag];
}

// method '-[NSActionCell setControlView:]'
void env___IM_NSActionCell_setControlView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSActionCell*)_self setControlView:_t1];
}

// method '-[NSActionCell setEnabled:]'
void env___IM_NSActionCell_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSActionCell*)_self setEnabled:flag];
}

// method '-[NSActionCell setFloatingPointFormat:left:right:]'
void env___IM_NSActionCell_setFloatingPointFormat_Cleft_Cright_C(void *_instance, U32 _self, U32 autoRange, U32 leftDigits, U32 rightDigits) {
    [(NSActionCell*)_self setFloatingPointFormat:autoRange left:leftDigits right:rightDigits];
}

// method '-[NSActionCell setFont:]'
void env___IM_NSActionCell_setFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSActionCell*)_self setFont:_t1];
}

// method '-[NSActionCell setImage:]'
void env___IM_NSActionCell_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSActionCell*)_self setImage:_t1];
}

// method '-[NSActionCell setObjectValue:]'
void env___IM_NSActionCell_setObjectValue_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSActionCell*)_self setObjectValue:_t1];
}

// method '-[NSActionCell setTag:]'
void env___IM_NSActionCell_setTag_C(void *_instance, U32 _self, U32 anInt) {
    [(NSActionCell*)_self setTag:anInt];
}

// method '-[NSActionCell setTarget:]'
void env___IM_NSActionCell_setTarget_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSActionCell*)_self setTarget:_t1];
}

// method '-[NSActionCell stringValue]'
U32 env___IM_NSActionCell_stringValue(void *_instance, U32 _self) {
    id _result = (id)[(NSActionCell*)_self stringValue];
    return (U32)_result;
}

// method '-[NSActionCell tag]'
U32 env___IM_NSActionCell_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSActionCell*)_self tag];
    return (U32)_result;
}

// method '-[NSActionCell target]'
U32 env___IM_NSActionCell_target(void *_instance, U32 _self) {
    id _result = (id)[(NSActionCell*)_self target];
    return (U32)_result;
}

// method '-[NSAffineTransform concat]'
void env___IM_NSAffineTransform_concat(void *_instance, U32 _self) {
    [(NSAffineTransform*)_self concat];
}

// method '-[NSAffineTransform set]'
void env___IM_NSAffineTransform_set(void *_instance, U32 _self) {
    [(NSAffineTransform*)_self set];
}

// method '-[NSAffineTransform transformBezierPath:]'
U32 env___IM_NSAffineTransform_transformBezierPath_C(void *_instance, U32 _self, U32 aPathPointer) {
    id _t1 = (id)aPathPointer;
    id _result = (id)[(NSAffineTransform*)_self transformBezierPath:_t1];
    return (U32)_result;
}

// method '-[NSAlert addButtonWithTitle:]'
U32 env___IM_NSAlert_addButtonWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    id _result = (id)[(NSAlert*)_self addButtonWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSAlert alertStyle]'
U32 env___IM_NSAlert_alertStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSAlert*)_self alertStyle];
    return (U32)_result;
}

// method '+[NSAlert alertWithError:]'
U32 env___CM_NSAlert_alertWithError_C(void *_instance, U32 _class, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    id _result = (id)[(Class)_class alertWithError:_t1];
    return (U32)_result;
}

// method '-[NSAlert beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void env___IM_NSAlert_beginSheetModalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 windowPointer, U32 delegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)windowPointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didEndSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSAlert*)_self beginSheetModalForWindow:_t1 modalDelegate:_t2 didEndSelector:_t3 contextInfo:_t4];
}

// method '-[NSAlert buttons]'
U32 env___IM_NSAlert_buttons(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self buttons];
    return (U32)_result;
}

// method '-[NSAlert delegate]'
U32 env___IM_NSAlert_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self delegate];
    return (U32)_result;
}

// method '-[NSAlert helpAnchor]'
U32 env___IM_NSAlert_helpAnchor(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self helpAnchor];
    return (U32)_result;
}

// method '-[NSAlert icon]'
U32 env___IM_NSAlert_icon(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self icon];
    return (U32)_result;
}

// method '-[NSAlert informativeText]'
U32 env___IM_NSAlert_informativeText(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self informativeText];
    return (U32)_result;
}

// method '-[NSAlert messageText]'
U32 env___IM_NSAlert_messageText(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self messageText];
    return (U32)_result;
}

// method '-[NSAlert runModal]'
U32 env___IM_NSAlert_runModal(void *_instance, U32 _self) {
    int _result = (int)[(NSAlert*)_self runModal];
    return (U32)_result;
}

// method '-[NSAlert setAlertStyle:]'
void env___IM_NSAlert_setAlertStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSAlert*)_self setAlertStyle:style];
}

// method '-[NSAlert setDelegate:]'
void env___IM_NSAlert_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSAlert*)_self setDelegate:_t1];
}

// method '-[NSAlert setHelpAnchor:]'
void env___IM_NSAlert_setHelpAnchor_C(void *_instance, U32 _self, U32 anchorPointer) {
    id _t1 = (id)anchorPointer;
    [(NSAlert*)_self setHelpAnchor:_t1];
}

// method '-[NSAlert setIcon:]'
void env___IM_NSAlert_setIcon_C(void *_instance, U32 _self, U32 iconPointer) {
    id _t1 = (id)iconPointer;
    [(NSAlert*)_self setIcon:_t1];
}

// method '-[NSAlert setInformativeText:]'
void env___IM_NSAlert_setInformativeText_C(void *_instance, U32 _self, U32 informativeTextPointer) {
    id _t1 = (id)informativeTextPointer;
    [(NSAlert*)_self setInformativeText:_t1];
}

// method '-[NSAlert setMessageText:]'
void env___IM_NSAlert_setMessageText_C(void *_instance, U32 _self, U32 messageTextPointer) {
    id _t1 = (id)messageTextPointer;
    [(NSAlert*)_self setMessageText:_t1];
}

// method '-[NSAlert setShowsHelp:]'
void env___IM_NSAlert_setShowsHelp_C(void *_instance, U32 _self, U32 showsHelp) {
    [(NSAlert*)_self setShowsHelp:showsHelp];
}

// method '-[NSAlert showsHelp]'
U32 env___IM_NSAlert_showsHelp(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSAlert*)_self showsHelp];
    return (U32)_result;
}

// method '-[NSAlert window]'
U32 env___IM_NSAlert_window(void *_instance, U32 _self) {
    id _result = (id)[(NSAlert*)_self window];
    return (U32)_result;
}

// method '-[NSAnimation addProgressMark:]'
void env___IM_NSAnimation_addProgressMark_C(void *_instance, U32 _self, F32 progressMark) {
    [(NSAnimation*)_self addProgressMark:progressMark];
}

// method '-[NSAnimation animationBlockingMode]'
U32 env___IM_NSAnimation_animationBlockingMode(void *_instance, U32 _self) {
    int _result = (int)[(NSAnimation*)_self animationBlockingMode];
    return (U32)_result;
}

// method '-[NSAnimation animationCurve]'
U32 env___IM_NSAnimation_animationCurve(void *_instance, U32 _self) {
    int _result = (int)[(NSAnimation*)_self animationCurve];
    return (U32)_result;
}

// method '-[NSAnimation clearStartAnimation]'
void env___IM_NSAnimation_clearStartAnimation(void *_instance, U32 _self) {
    [(NSAnimation*)_self clearStartAnimation];
}

// method '-[NSAnimation clearStopAnimation]'
void env___IM_NSAnimation_clearStopAnimation(void *_instance, U32 _self) {
    [(NSAnimation*)_self clearStopAnimation];
}

// method '-[NSAnimation currentProgress]'
F32 env___IM_NSAnimation_currentProgress(void *_instance, U32 _self) {
    float _result = (float)[(NSAnimation*)_self currentProgress];
    return (F32)_result;
}

// method '-[NSAnimation currentValue]'
F32 env___IM_NSAnimation_currentValue(void *_instance, U32 _self) {
    float _result = (float)[(NSAnimation*)_self currentValue];
    return (F32)_result;
}

// method '-[NSAnimation delegate]'
U32 env___IM_NSAnimation_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSAnimation*)_self delegate];
    return (U32)_result;
}

// method '-[NSAnimation duration]'
F64 env___IM_NSAnimation_duration(void *_instance, U32 _self) {
    double _result = (double)[(NSAnimation*)_self duration];
    return (F64)_result;
}

// method '-[NSAnimation frameRate]'
F32 env___IM_NSAnimation_frameRate(void *_instance, U32 _self) {
    float _result = (float)[(NSAnimation*)_self frameRate];
    return (F32)_result;
}

// method '-[NSAnimation initWithDuration:animationCurve:]'
U32 env___IM_NSAnimation_initWithDuration_CanimationCurve_C(void *_instance, U32 _self, F64 duration, U32 animationCurve) {
    id _result = (id)[(NSAnimation*)_self initWithDuration:duration animationCurve:animationCurve];
    return (U32)_result;
}

// method '-[NSAnimation isAnimating]'
U32 env___IM_NSAnimation_isAnimating(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSAnimation*)_self isAnimating];
    return (U32)_result;
}

// method '-[NSAnimation progressMarks]'
U32 env___IM_NSAnimation_progressMarks(void *_instance, U32 _self) {
    id _result = (id)[(NSAnimation*)_self progressMarks];
    return (U32)_result;
}

// method '-[NSAnimation removeProgressMark:]'
void env___IM_NSAnimation_removeProgressMark_C(void *_instance, U32 _self, F32 progressMark) {
    [(NSAnimation*)_self removeProgressMark:progressMark];
}

// method '-[NSAnimation runLoopModesForAnimating]'
U32 env___IM_NSAnimation_runLoopModesForAnimating(void *_instance, U32 _self) {
    id _result = (id)[(NSAnimation*)_self runLoopModesForAnimating];
    return (U32)_result;
}

// method '-[NSAnimation setAnimationBlockingMode:]'
void env___IM_NSAnimation_setAnimationBlockingMode_C(void *_instance, U32 _self, U32 animationBlockingMode) {
    [(NSAnimation*)_self setAnimationBlockingMode:animationBlockingMode];
}

// method '-[NSAnimation setAnimationCurve:]'
void env___IM_NSAnimation_setAnimationCurve_C(void *_instance, U32 _self, U32 curve) {
    [(NSAnimation*)_self setAnimationCurve:curve];
}

// method '-[NSAnimation setCurrentProgress:]'
void env___IM_NSAnimation_setCurrentProgress_C(void *_instance, U32 _self, F32 progress) {
    [(NSAnimation*)_self setCurrentProgress:progress];
}

// method '-[NSAnimation setDelegate:]'
void env___IM_NSAnimation_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSAnimation*)_self setDelegate:_t1];
}

// method '-[NSAnimation setDuration:]'
void env___IM_NSAnimation_setDuration_C(void *_instance, U32 _self, F64 duration) {
    [(NSAnimation*)_self setDuration:duration];
}

// method '-[NSAnimation setFrameRate:]'
void env___IM_NSAnimation_setFrameRate_C(void *_instance, U32 _self, F32 framesPerSecond) {
    [(NSAnimation*)_self setFrameRate:framesPerSecond];
}

// method '-[NSAnimation setProgressMarks:]'
void env___IM_NSAnimation_setProgressMarks_C(void *_instance, U32 _self, U32 progressMarksPointer) {
    id _t1 = (id)progressMarksPointer;
    [(NSAnimation*)_self setProgressMarks:_t1];
}

// method '-[NSAnimation startAnimation]'
void env___IM_NSAnimation_startAnimation(void *_instance, U32 _self) {
    [(NSAnimation*)_self startAnimation];
}

// method '-[NSAnimation startWhenAnimation:reachesProgress:]'
void env___IM_NSAnimation_startWhenAnimation_CreachesProgress_C(void *_instance, U32 _self, U32 animationPointer, F32 startProgress) {
    id _t1 = (id)animationPointer;
    [(NSAnimation*)_self startWhenAnimation:_t1 reachesProgress:startProgress];
}

// method '-[NSAnimation stopAnimation]'
void env___IM_NSAnimation_stopAnimation(void *_instance, U32 _self) {
    [(NSAnimation*)_self stopAnimation];
}

// method '-[NSAnimation stopWhenAnimation:reachesProgress:]'
void env___IM_NSAnimation_stopWhenAnimation_CreachesProgress_C(void *_instance, U32 _self, U32 animationPointer, F32 stopProgress) {
    id _t1 = (id)animationPointer;
    [(NSAnimation*)_self stopWhenAnimation:_t1 reachesProgress:stopProgress];
}

// method '-[NSAppleScript richTextSource]'
U32 env___IM_NSAppleScript_richTextSource(void *_instance, U32 _self) {
    id _result = (id)[(NSAppleScript*)_self richTextSource];
    return (U32)_result;
}

// method '-[NSApplication abortModal]'
void env___IM_NSApplication_abortModal(void *_instance, U32 _self) {
    [(NSApplication*)_self abortModal];
}

// method '-[NSApplication activateContextHelpMode:]'
void env___IM_NSApplication_activateContextHelpMode_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self activateContextHelpMode:_t1];
}

// method '-[NSApplication activateIgnoringOtherApps:]'
void env___IM_NSApplication_activateIgnoringOtherApps_C(void *_instance, U32 _self, U32 flag) {
    [(NSApplication*)_self activateIgnoringOtherApps:flag];
}

// method '-[NSApplication addWindowsItem:title:filename:]'
void env___IM_NSApplication_addWindowsItem_Ctitle_Cfilename_C(void *_instance, U32 _self, U32 winPointer, U32 aStringPointer, U32 isFilename) {
    id _t1 = (id)winPointer;
    id _t2 = (id)aStringPointer;
    [(NSApplication*)_self addWindowsItem:_t1 title:_t2 filename:isFilename];
}

// method '-[NSApplication applicationIconImage]'
U32 env___IM_NSApplication_applicationIconImage(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self applicationIconImage];
    return (U32)_result;
}

// method '-[NSApplication arrangeInFront:]'
void env___IM_NSApplication_arrangeInFront_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self arrangeInFront:_t1];
}

// method '-[NSApplication beginModalSessionForWindow:]'
U32 env___IM_NSApplication_beginModalSessionForWindow_C(void *_instance, U32 _self, U32 theWindowPointer) {
    id _t1 = (id)theWindowPointer;
    struct _NSModalSession* _result = (struct _NSModalSession*)[(NSApplication*)_self beginModalSessionForWindow:_t1];
    return (U32)_result;
}

// method '-[NSApplication beginModalSessionForWindow:relativeToWindow:]'
U32 env___IM_NSApplication_beginModalSessionForWindow_CrelativeToWindow_C(void *_instance, U32 _self, U32 theWindowPointer, U32 docWindowPointer) {
    id _t1 = (id)theWindowPointer;
    id _t2 = (id)docWindowPointer;
    struct _NSModalSession* _result = (struct _NSModalSession*)[(NSApplication*)_self beginModalSessionForWindow:_t1 relativeToWindow:_t2];
    return (U32)_result;
}

// method '-[NSApplication beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void env___IM_NSApplication_beginSheet_CmodalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 sheetPointer, U32 docWindowPointer, U32 modalDelegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)sheetPointer;
    id _t2 = (id)docWindowPointer;
    id _t3 = (id)modalDelegatePointer;
    SEL _t4 = (SEL)didEndSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSApplication*)_self beginSheet:_t1 modalForWindow:_t2 modalDelegate:_t3 didEndSelector:_t4 contextInfo:_t5];
}

// method '-[NSApplication cancelUserAttentionRequest:]'
void env___IM_NSApplication_cancelUserAttentionRequest_C(void *_instance, U32 _self, U32 request) {
    [(NSApplication*)_self cancelUserAttentionRequest:request];
}

// method '-[NSApplication changeWindowsItem:title:filename:]'
void env___IM_NSApplication_changeWindowsItem_Ctitle_Cfilename_C(void *_instance, U32 _self, U32 winPointer, U32 aStringPointer, U32 isFilename) {
    id _t1 = (id)winPointer;
    id _t2 = (id)aStringPointer;
    [(NSApplication*)_self changeWindowsItem:_t1 title:_t2 filename:isFilename];
}

// method '-[NSApplication context]'
U32 env___IM_NSApplication_context(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self context];
    return (U32)_result;
}

// method '-[NSApplication currentEvent]'
U32 env___IM_NSApplication_currentEvent(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self currentEvent];
    return (U32)_result;
}

// method '-[NSApplication deactivate]'
void env___IM_NSApplication_deactivate(void *_instance, U32 _self) {
    [(NSApplication*)_self deactivate];
}

// method '-[NSApplication delegate]'
U32 env___IM_NSApplication_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self delegate];
    return (U32)_result;
}

// method '+[NSApplication detachDrawingThread:toTarget:withObject:]'
void env___CM_NSApplication_detachDrawingThread_CtoTarget_CwithObject_C(void *_instance, U32 _class, U32 selectorPointer, U32 targetPointer, U32 argumentPointer) {
    SEL _t1 = (SEL)selectorPointer;
    id _t2 = (id)targetPointer;
    id _t3 = (id)argumentPointer;
    [(Class)_class detachDrawingThread:_t1 toTarget:_t2 withObject:_t3];
}

// method '-[NSApplication discardEventsMatchingMask:beforeEvent:]'
void env___IM_NSApplication_discardEventsMatchingMask_CbeforeEvent_C(void *_instance, U32 _self, U32 mask, U32 lastEventPointer) {
    id _t1 = (id)lastEventPointer;
    [(NSApplication*)_self discardEventsMatchingMask:mask beforeEvent:_t1];
}

// method '-[NSApplication endModalSession:]'
void env___IM_NSApplication_endModalSession_C(void *_instance, U32 _self, U32 sessionPointer) {
    struct _NSModalSession* _t1 = (struct _NSModalSession*)sessionPointer;
    [(NSApplication*)_self endModalSession:_t1];
}

// method '-[NSApplication endSheet:]'
void env___IM_NSApplication_endSheet_C(void *_instance, U32 _self, U32 sheetPointer) {
    id _t1 = (id)sheetPointer;
    [(NSApplication*)_self endSheet:_t1];
}

// method '-[NSApplication endSheet:returnCode:]'
void env___IM_NSApplication_endSheet_CreturnCode_C(void *_instance, U32 _self, U32 sheetPointer, U32 returnCode) {
    id _t1 = (id)sheetPointer;
    [(NSApplication*)_self endSheet:_t1 returnCode:returnCode];
}

// method '-[NSApplication finishLaunching]'
void env___IM_NSApplication_finishLaunching(void *_instance, U32 _self) {
    [(NSApplication*)_self finishLaunching];
}

// method '-[NSApplication hide:]'
void env___IM_NSApplication_hide_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self hide:_t1];
}

// method '-[NSApplication hideOtherApplications:]'
void env___IM_NSApplication_hideOtherApplications_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self hideOtherApplications:_t1];
}

// method '-[NSApplication isActive]'
U32 env___IM_NSApplication_isActive(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSApplication*)_self isActive];
    return (U32)_result;
}

// method '-[NSApplication isHidden]'
U32 env___IM_NSApplication_isHidden(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSApplication*)_self isHidden];
    return (U32)_result;
}

// method '-[NSApplication isRunning]'
U32 env___IM_NSApplication_isRunning(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSApplication*)_self isRunning];
    return (U32)_result;
}

// method '-[NSApplication keyWindow]'
U32 env___IM_NSApplication_keyWindow(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self keyWindow];
    return (U32)_result;
}

// method '-[NSApplication mainMenu]'
U32 env___IM_NSApplication_mainMenu(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self mainMenu];
    return (U32)_result;
}

// method '-[NSApplication mainWindow]'
U32 env___IM_NSApplication_mainWindow(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self mainWindow];
    return (U32)_result;
}

// method '-[NSApplication makeWindowsPerform:inOrder:]'
U32 env___IM_NSApplication_makeWindowsPerform_CinOrder_C(void *_instance, U32 _self, U32 aSelectorPointer, U32 flag) {
    SEL _t1 = (SEL)aSelectorPointer;
    id _result = (id)[(NSApplication*)_self makeWindowsPerform:_t1 inOrder:flag];
    return (U32)_result;
}

// method '-[NSApplication miniaturizeAll:]'
void env___IM_NSApplication_miniaturizeAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self miniaturizeAll:_t1];
}

// method '-[NSApplication modalWindow]'
U32 env___IM_NSApplication_modalWindow(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self modalWindow];
    return (U32)_result;
}

// method '-[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:]'
U32 env___IM_NSApplication_nextEventMatchingMask_CuntilDate_CinMode_Cdequeue_C(void *_instance, U32 _self, U32 mask, U32 expirationPointer, U32 modePointer, U32 deqFlag) {
    id _t1 = (id)expirationPointer;
    id _t2 = (id)modePointer;
    id _result = (id)[(NSApplication*)_self nextEventMatchingMask:mask untilDate:_t1 inMode:_t2 dequeue:deqFlag];
    return (U32)_result;
}

// method '-[NSApplication orderFrontCharacterPalette:]'
void env___IM_NSApplication_orderFrontCharacterPalette_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self orderFrontCharacterPalette:_t1];
}

// method '-[NSApplication orderFrontColorPanel:]'
void env___IM_NSApplication_orderFrontColorPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self orderFrontColorPanel:_t1];
}

// method '-[NSApplication orderFrontStandardAboutPanel:]'
void env___IM_NSApplication_orderFrontStandardAboutPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self orderFrontStandardAboutPanel:_t1];
}

// method '-[NSApplication orderFrontStandardAboutPanelWithOptions:]'
void env___IM_NSApplication_orderFrontStandardAboutPanelWithOptions_C(void *_instance, U32 _self, U32 optionsDictionaryPointer) {
    id _t1 = (id)optionsDictionaryPointer;
    [(NSApplication*)_self orderFrontStandardAboutPanelWithOptions:_t1];
}

// method '-[NSApplication orderedDocuments]'
U32 env___IM_NSApplication_orderedDocuments(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self orderedDocuments];
    return (U32)_result;
}

// method '-[NSApplication orderedWindows]'
U32 env___IM_NSApplication_orderedWindows(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self orderedWindows];
    return (U32)_result;
}

// method '-[NSApplication postEvent:atStart:]'
void env___IM_NSApplication_postEvent_CatStart_C(void *_instance, U32 _self, U32 eventPointer, U32 flag) {
    id _t1 = (id)eventPointer;
    [(NSApplication*)_self postEvent:_t1 atStart:flag];
}

// method '-[NSApplication preventWindowOrdering]'
void env___IM_NSApplication_preventWindowOrdering(void *_instance, U32 _self) {
    [(NSApplication*)_self preventWindowOrdering];
}

// method '-[NSApplication registerServicesMenuSendTypes:returnTypes:]'
void env___IM_NSApplication_registerServicesMenuSendTypes_CreturnTypes_C(void *_instance, U32 _self, U32 sendTypesPointer, U32 returnTypesPointer) {
    id _t1 = (id)sendTypesPointer;
    id _t2 = (id)returnTypesPointer;
    [(NSApplication*)_self registerServicesMenuSendTypes:_t1 returnTypes:_t2];
}

// method '-[NSApplication removeWindowsItem:]'
void env___IM_NSApplication_removeWindowsItem_C(void *_instance, U32 _self, U32 winPointer) {
    id _t1 = (id)winPointer;
    [(NSApplication*)_self removeWindowsItem:_t1];
}

// method '-[NSApplication replyToApplicationShouldTerminate:]'
void env___IM_NSApplication_replyToApplicationShouldTerminate_C(void *_instance, U32 _self, U32 shouldTerminate) {
    [(NSApplication*)_self replyToApplicationShouldTerminate:shouldTerminate];
}

// method '-[NSApplication replyToOpenOrPrint:]'
void env___IM_NSApplication_replyToOpenOrPrint_C(void *_instance, U32 _self, U32 reply) {
    [(NSApplication*)_self replyToOpenOrPrint:reply];
}

// method '-[NSApplication reportException:]'
void env___IM_NSApplication_reportException_C(void *_instance, U32 _self, U32 theExceptionPointer) {
    id _t1 = (id)theExceptionPointer;
    [(NSApplication*)_self reportException:_t1];
}

// method '-[NSApplication requestUserAttention:]'
U32 env___IM_NSApplication_requestUserAttention_C(void *_instance, U32 _self, U32 requestType) {
    int _result = (int)[(NSApplication*)_self requestUserAttention:requestType];
    return (U32)_result;
}

// method '-[NSApplication run]'
void env___IM_NSApplication_run(void *_instance, U32 _self) {
    [(NSApplication*)_self run];
}

// method '-[NSApplication runModalForWindow:]'
U32 env___IM_NSApplication_runModalForWindow_C(void *_instance, U32 _self, U32 theWindowPointer) {
    id _t1 = (id)theWindowPointer;
    int _result = (int)[(NSApplication*)_self runModalForWindow:_t1];
    return (U32)_result;
}

// method '-[NSApplication runModalForWindow:relativeToWindow:]'
U32 env___IM_NSApplication_runModalForWindow_CrelativeToWindow_C(void *_instance, U32 _self, U32 theWindowPointer, U32 docWindowPointer) {
    id _t1 = (id)theWindowPointer;
    id _t2 = (id)docWindowPointer;
    int _result = (int)[(NSApplication*)_self runModalForWindow:_t1 relativeToWindow:_t2];
    return (U32)_result;
}

// method '-[NSApplication runModalSession:]'
U32 env___IM_NSApplication_runModalSession_C(void *_instance, U32 _self, U32 sessionPointer) {
    struct _NSModalSession* _t1 = (struct _NSModalSession*)sessionPointer;
    int _result = (int)[(NSApplication*)_self runModalSession:_t1];
    return (U32)_result;
}

// method '-[NSApplication runPageLayout:]'
void env___IM_NSApplication_runPageLayout_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self runPageLayout:_t1];
}

// method '-[NSApplication sendAction:to:from:]'
U32 env___IM_NSApplication_sendAction_Cto_Cfrom_C(void *_instance, U32 _self, U32 theActionPointer, U32 theTargetPointer, U32 senderPointer) {
    SEL _t1 = (SEL)theActionPointer;
    id _t2 = (id)theTargetPointer;
    id _t3 = (id)senderPointer;
    BOOL _result = (BOOL)[(NSApplication*)_self sendAction:_t1 to:_t2 from:_t3];
    return (U32)_result;
}

// method '-[NSApplication sendEvent:]'
void env___IM_NSApplication_sendEvent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSApplication*)_self sendEvent:_t1];
}

// method '-[NSApplication servicesMenu]'
U32 env___IM_NSApplication_servicesMenu(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self servicesMenu];
    return (U32)_result;
}

// method '-[NSApplication servicesProvider]'
U32 env___IM_NSApplication_servicesProvider(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self servicesProvider];
    return (U32)_result;
}

// method '-[NSApplication setApplicationIconImage:]'
void env___IM_NSApplication_setApplicationIconImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSApplication*)_self setApplicationIconImage:_t1];
}

// method '-[NSApplication setDelegate:]'
void env___IM_NSApplication_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSApplication*)_self setDelegate:_t1];
}

// method '-[NSApplication setMainMenu:]'
void env___IM_NSApplication_setMainMenu_C(void *_instance, U32 _self, U32 aMenuPointer) {
    id _t1 = (id)aMenuPointer;
    [(NSApplication*)_self setMainMenu:_t1];
}

// method '-[NSApplication setServicesMenu:]'
void env___IM_NSApplication_setServicesMenu_C(void *_instance, U32 _self, U32 aMenuPointer) {
    id _t1 = (id)aMenuPointer;
    [(NSApplication*)_self setServicesMenu:_t1];
}

// method '-[NSApplication setServicesProvider:]'
void env___IM_NSApplication_setServicesProvider_C(void *_instance, U32 _self, U32 providerPointer) {
    id _t1 = (id)providerPointer;
    [(NSApplication*)_self setServicesProvider:_t1];
}

// method '-[NSApplication setWindowsMenu:]'
void env___IM_NSApplication_setWindowsMenu_C(void *_instance, U32 _self, U32 aMenuPointer) {
    id _t1 = (id)aMenuPointer;
    [(NSApplication*)_self setWindowsMenu:_t1];
}

// method '-[NSApplication setWindowsNeedUpdate:]'
void env___IM_NSApplication_setWindowsNeedUpdate_C(void *_instance, U32 _self, U32 needUpdate) {
    [(NSApplication*)_self setWindowsNeedUpdate:needUpdate];
}

// method '+[NSApplication sharedApplication]'
U32 env___CM_NSApplication_sharedApplication(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedApplication];
    return (U32)_result;
}

// method '-[NSApplication showHelp:]'
void env___IM_NSApplication_showHelp_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self showHelp:_t1];
}

// method '-[NSApplication stop:]'
void env___IM_NSApplication_stop_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self stop:_t1];
}

// method '-[NSApplication stopModal]'
void env___IM_NSApplication_stopModal(void *_instance, U32 _self) {
    [(NSApplication*)_self stopModal];
}

// method '-[NSApplication stopModalWithCode:]'
void env___IM_NSApplication_stopModalWithCode_C(void *_instance, U32 _self, U32 returnCode) {
    [(NSApplication*)_self stopModalWithCode:returnCode];
}

// method '-[NSApplication targetForAction:]'
U32 env___IM_NSApplication_targetForAction_C(void *_instance, U32 _self, U32 theActionPointer) {
    SEL _t1 = (SEL)theActionPointer;
    id _result = (id)[(NSApplication*)_self targetForAction:_t1];
    return (U32)_result;
}

// method '-[NSApplication targetForAction:to:from:]'
U32 env___IM_NSApplication_targetForAction_Cto_Cfrom_C(void *_instance, U32 _self, U32 theActionPointer, U32 theTargetPointer, U32 senderPointer) {
    SEL _t1 = (SEL)theActionPointer;
    id _t2 = (id)theTargetPointer;
    id _t3 = (id)senderPointer;
    id _result = (id)[(NSApplication*)_self targetForAction:_t1 to:_t2 from:_t3];
    return (U32)_result;
}

// method '-[NSApplication terminate:]'
void env___IM_NSApplication_terminate_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self terminate:_t1];
}

// method '-[NSApplication tryToPerform:with:]'
U32 env___IM_NSApplication_tryToPerform_Cwith_C(void *_instance, U32 _self, U32 anActionPointer, U32 anObjectPointer) {
    SEL _t1 = (SEL)anActionPointer;
    id _t2 = (id)anObjectPointer;
    BOOL _result = (BOOL)[(NSApplication*)_self tryToPerform:_t1 with:_t2];
    return (U32)_result;
}

// method '-[NSApplication unhide:]'
void env___IM_NSApplication_unhide_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self unhide:_t1];
}

// method '-[NSApplication unhideAllApplications:]'
void env___IM_NSApplication_unhideAllApplications_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSApplication*)_self unhideAllApplications:_t1];
}

// method '-[NSApplication unhideWithoutActivation]'
void env___IM_NSApplication_unhideWithoutActivation(void *_instance, U32 _self) {
    [(NSApplication*)_self unhideWithoutActivation];
}

// method '-[NSApplication updateWindows]'
void env___IM_NSApplication_updateWindows(void *_instance, U32 _self) {
    [(NSApplication*)_self updateWindows];
}

// method '-[NSApplication updateWindowsItem:]'
void env___IM_NSApplication_updateWindowsItem_C(void *_instance, U32 _self, U32 winPointer) {
    id _t1 = (id)winPointer;
    [(NSApplication*)_self updateWindowsItem:_t1];
}

// method '-[NSApplication validRequestorForSendType:returnType:]'
U32 env___IM_NSApplication_validRequestorForSendType_CreturnType_C(void *_instance, U32 _self, U32 sendTypePointer, U32 returnTypePointer) {
    id _t1 = (id)sendTypePointer;
    id _t2 = (id)returnTypePointer;
    id _result = (id)[(NSApplication*)_self validRequestorForSendType:_t1 returnType:_t2];
    return (U32)_result;
}

// method '-[NSApplication windowWithWindowNumber:]'
U32 env___IM_NSApplication_windowWithWindowNumber_C(void *_instance, U32 _self, U32 windowNum) {
    id _result = (id)[(NSApplication*)_self windowWithWindowNumber:windowNum];
    return (U32)_result;
}

// method '-[NSApplication windows]'
U32 env___IM_NSApplication_windows(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self windows];
    return (U32)_result;
}

// method '-[NSApplication windowsMenu]'
U32 env___IM_NSApplication_windowsMenu(void *_instance, U32 _self) {
    id _result = (id)[(NSApplication*)_self windowsMenu];
    return (U32)_result;
}

// method '-[NSArrayController add:]'
void env___IM_NSArrayController_add_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSArrayController*)_self add:_t1];
}

// method '-[NSArrayController addObject:]'
void env___IM_NSArrayController_addObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSArrayController*)_self addObject:_t1];
}

// method '-[NSArrayController addObjects:]'
void env___IM_NSArrayController_addObjects_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    [(NSArrayController*)_self addObjects:_t1];
}

// method '-[NSArrayController addSelectedObjects:]'
U32 env___IM_NSArrayController_addSelectedObjects_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    BOOL _result = (BOOL)[(NSArrayController*)_self addSelectedObjects:_t1];
    return (U32)_result;
}

// method '-[NSArrayController addSelectionIndexes:]'
U32 env___IM_NSArrayController_addSelectionIndexes_C(void *_instance, U32 _self, U32 indexesPointer) {
    id _t1 = (id)indexesPointer;
    BOOL _result = (BOOL)[(NSArrayController*)_self addSelectionIndexes:_t1];
    return (U32)_result;
}

// method '-[NSArrayController alwaysUsesMultipleValuesMarker]'
U32 env___IM_NSArrayController_alwaysUsesMultipleValuesMarker(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self alwaysUsesMultipleValuesMarker];
    return (U32)_result;
}

// method '-[NSArrayController arrangeObjects:]'
U32 env___IM_NSArrayController_arrangeObjects_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    id _result = (id)[(NSArrayController*)_self arrangeObjects:_t1];
    return (U32)_result;
}

// method '-[NSArrayController arrangedObjects]'
U32 env___IM_NSArrayController_arrangedObjects(void *_instance, U32 _self) {
    id _result = (id)[(NSArrayController*)_self arrangedObjects];
    return (U32)_result;
}

// method '-[NSArrayController avoidsEmptySelection]'
U32 env___IM_NSArrayController_avoidsEmptySelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self avoidsEmptySelection];
    return (U32)_result;
}

// method '-[NSArrayController canInsert]'
U32 env___IM_NSArrayController_canInsert(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self canInsert];
    return (U32)_result;
}

// method '-[NSArrayController canSelectNext]'
U32 env___IM_NSArrayController_canSelectNext(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self canSelectNext];
    return (U32)_result;
}

// method '-[NSArrayController canSelectPrevious]'
U32 env___IM_NSArrayController_canSelectPrevious(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self canSelectPrevious];
    return (U32)_result;
}

// method '-[NSArrayController clearsFilterPredicateOnInsertion]'
U32 env___IM_NSArrayController_clearsFilterPredicateOnInsertion(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self clearsFilterPredicateOnInsertion];
    return (U32)_result;
}

// method '-[NSArrayController filterPredicate]'
U32 env___IM_NSArrayController_filterPredicate(void *_instance, U32 _self) {
    id _result = (id)[(NSArrayController*)_self filterPredicate];
    return (U32)_result;
}

// method '-[NSArrayController insert:]'
void env___IM_NSArrayController_insert_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSArrayController*)_self insert:_t1];
}

// method '-[NSArrayController insertObject:atArrangedObjectIndex:]'
void env___IM_NSArrayController_insertObject_CatArrangedObjectIndex_C(void *_instance, U32 _self, U32 objectPointer, U32 index) {
    id _t1 = (id)objectPointer;
    [(NSArrayController*)_self insertObject:_t1 atArrangedObjectIndex:index];
}

// method '-[NSArrayController insertObjects:atArrangedObjectIndexes:]'
void env___IM_NSArrayController_insertObjects_CatArrangedObjectIndexes_C(void *_instance, U32 _self, U32 objectsPointer, U32 indexesPointer) {
    id _t1 = (id)objectsPointer;
    id _t2 = (id)indexesPointer;
    [(NSArrayController*)_self insertObjects:_t1 atArrangedObjectIndexes:_t2];
}

// method '-[NSArrayController preservesSelection]'
U32 env___IM_NSArrayController_preservesSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self preservesSelection];
    return (U32)_result;
}

// method '-[NSArrayController rearrangeObjects]'
void env___IM_NSArrayController_rearrangeObjects(void *_instance, U32 _self) {
    [(NSArrayController*)_self rearrangeObjects];
}

// method '-[NSArrayController remove:]'
void env___IM_NSArrayController_remove_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSArrayController*)_self remove:_t1];
}

// method '-[NSArrayController removeObject:]'
void env___IM_NSArrayController_removeObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSArrayController*)_self removeObject:_t1];
}

// method '-[NSArrayController removeObjectAtArrangedObjectIndex:]'
void env___IM_NSArrayController_removeObjectAtArrangedObjectIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSArrayController*)_self removeObjectAtArrangedObjectIndex:index];
}

// method '-[NSArrayController removeObjects:]'
void env___IM_NSArrayController_removeObjects_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    [(NSArrayController*)_self removeObjects:_t1];
}

// method '-[NSArrayController removeObjectsAtArrangedObjectIndexes:]'
void env___IM_NSArrayController_removeObjectsAtArrangedObjectIndexes_C(void *_instance, U32 _self, U32 indexesPointer) {
    id _t1 = (id)indexesPointer;
    [(NSArrayController*)_self removeObjectsAtArrangedObjectIndexes:_t1];
}

// method '-[NSArrayController removeSelectedObjects:]'
U32 env___IM_NSArrayController_removeSelectedObjects_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    BOOL _result = (BOOL)[(NSArrayController*)_self removeSelectedObjects:_t1];
    return (U32)_result;
}

// method '-[NSArrayController removeSelectionIndexes:]'
U32 env___IM_NSArrayController_removeSelectionIndexes_C(void *_instance, U32 _self, U32 indexesPointer) {
    id _t1 = (id)indexesPointer;
    BOOL _result = (BOOL)[(NSArrayController*)_self removeSelectionIndexes:_t1];
    return (U32)_result;
}

// method '-[NSArrayController selectNext:]'
void env___IM_NSArrayController_selectNext_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSArrayController*)_self selectNext:_t1];
}

// method '-[NSArrayController selectPrevious:]'
void env___IM_NSArrayController_selectPrevious_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSArrayController*)_self selectPrevious:_t1];
}

// method '-[NSArrayController selectedObjects]'
U32 env___IM_NSArrayController_selectedObjects(void *_instance, U32 _self) {
    id _result = (id)[(NSArrayController*)_self selectedObjects];
    return (U32)_result;
}

// method '-[NSArrayController selectionIndex]'
U32 env___IM_NSArrayController_selectionIndex(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSArrayController*)_self selectionIndex];
    return (U32)_result;
}

// method '-[NSArrayController selectionIndexes]'
U32 env___IM_NSArrayController_selectionIndexes(void *_instance, U32 _self) {
    id _result = (id)[(NSArrayController*)_self selectionIndexes];
    return (U32)_result;
}

// method '-[NSArrayController selectsInsertedObjects]'
U32 env___IM_NSArrayController_selectsInsertedObjects(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSArrayController*)_self selectsInsertedObjects];
    return (U32)_result;
}

// method '-[NSArrayController setAlwaysUsesMultipleValuesMarker:]'
void env___IM_NSArrayController_setAlwaysUsesMultipleValuesMarker_C(void *_instance, U32 _self, U32 flag) {
    [(NSArrayController*)_self setAlwaysUsesMultipleValuesMarker:flag];
}

// method '-[NSArrayController setAvoidsEmptySelection:]'
void env___IM_NSArrayController_setAvoidsEmptySelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSArrayController*)_self setAvoidsEmptySelection:flag];
}

// method '-[NSArrayController setClearsFilterPredicateOnInsertion:]'
void env___IM_NSArrayController_setClearsFilterPredicateOnInsertion_C(void *_instance, U32 _self, U32 flag) {
    [(NSArrayController*)_self setClearsFilterPredicateOnInsertion:flag];
}

// method '-[NSArrayController setFilterPredicate:]'
void env___IM_NSArrayController_setFilterPredicate_C(void *_instance, U32 _self, U32 filterPredicatePointer) {
    id _t1 = (id)filterPredicatePointer;
    [(NSArrayController*)_self setFilterPredicate:_t1];
}

// method '-[NSArrayController setPreservesSelection:]'
void env___IM_NSArrayController_setPreservesSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSArrayController*)_self setPreservesSelection:flag];
}

// method '-[NSArrayController setSelectedObjects:]'
U32 env___IM_NSArrayController_setSelectedObjects_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    BOOL _result = (BOOL)[(NSArrayController*)_self setSelectedObjects:_t1];
    return (U32)_result;
}

// method '-[NSArrayController setSelectionIndex:]'
U32 env___IM_NSArrayController_setSelectionIndex_C(void *_instance, U32 _self, U32 index) {
    BOOL _result = (BOOL)[(NSArrayController*)_self setSelectionIndex:index];
    return (U32)_result;
}

// method '-[NSArrayController setSelectionIndexes:]'
U32 env___IM_NSArrayController_setSelectionIndexes_C(void *_instance, U32 _self, U32 indexesPointer) {
    id _t1 = (id)indexesPointer;
    BOOL _result = (BOOL)[(NSArrayController*)_self setSelectionIndexes:_t1];
    return (U32)_result;
}

// method '-[NSArrayController setSelectsInsertedObjects:]'
void env___IM_NSArrayController_setSelectsInsertedObjects_C(void *_instance, U32 _self, U32 flag) {
    [(NSArrayController*)_self setSelectsInsertedObjects:flag];
}

// method '-[NSArrayController setSortDescriptors:]'
void env___IM_NSArrayController_setSortDescriptors_C(void *_instance, U32 _self, U32 sortDescriptorsPointer) {
    id _t1 = (id)sortDescriptorsPointer;
    [(NSArrayController*)_self setSortDescriptors:_t1];
}

// method '-[NSArrayController sortDescriptors]'
U32 env___IM_NSArrayController_sortDescriptors(void *_instance, U32 _self) {
    id _result = (id)[(NSArrayController*)_self sortDescriptors];
    return (U32)_result;
}

// method '-[NSAttributedString RTFDFileWrapperFromRange:documentAttributes:]'
U32 env___IM_NSAttributedString_RTFDFileWrapperFromRange_CdocumentAttributes_C(void *_instance, U32 _self, U32 rangeIndirect, U32 dictPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)dictPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self RTFDFileWrapperFromRange:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString RTFDFromRange:documentAttributes:]'
U32 env___IM_NSAttributedString_RTFDFromRange_CdocumentAttributes_C(void *_instance, U32 _self, U32 rangeIndirect, U32 dictPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)dictPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self RTFDFromRange:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString RTFFromRange:documentAttributes:]'
U32 env___IM_NSAttributedString_RTFFromRange_CdocumentAttributes_C(void *_instance, U32 _self, U32 rangeIndirect, U32 dictPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)dictPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self RTFFromRange:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '+[NSAttributedString attributedStringWithAttachment:]'
U32 env___CM_NSAttributedString_attributedStringWithAttachment_C(void *_instance, U32 _class, U32 attachmentPointer) {
    id _t1 = (id)attachmentPointer;
    id _result = (id)[(Class)_class attributedStringWithAttachment:_t1];
    return (U32)_result;
}

// method '-[NSAttributedString boundingRectWithSize:options:]'
void env___IM_NSAttributedString_boundingRectWithSize_Coptions_C(void *_instance, U32 _resultIndirect, U32 _self, U32 sizeIndirect, U32 options) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    NSRect _result = (NSRect)[(NSAttributedString*)_self boundingRectWithSize:_t1 options:options];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSAttributedString containsAttachments]'
U32 env___IM_NSAttributedString_containsAttachments(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSAttributedString*)_self containsAttachments];
    return (U32)_result;
}

// method '-[NSAttributedString dataFromRange:documentAttributes:error:]'
U32 env___IM_NSAttributedString_dataFromRange_CdocumentAttributes_Cerror_C(void *_instance, U32 _self, U32 rangeIndirect, U32 dictPointer, U32 errorPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)dictPointer;
    id* _t3 = (id*)errorPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self dataFromRange:_t1 documentAttributes:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSAttributedString docFormatFromRange:documentAttributes:]'
U32 env___IM_NSAttributedString_docFormatFromRange_CdocumentAttributes_C(void *_instance, U32 _self, U32 rangeIndirect, U32 dictPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)dictPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self docFormatFromRange:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString doubleClickAtIndex:]'
void env___IM_NSAttributedString_doubleClickAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 location) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSAttributedString*)_self doubleClickAtIndex:location];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSAttributedString drawAtPoint:]'
void env___IM_NSAttributedString_drawAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSAttributedString*)_self drawAtPoint:_t1];
}

// method '-[NSAttributedString drawInRect:]'
void env___IM_NSAttributedString_drawInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSAttributedString*)_self drawInRect:_t1];
}

// method '-[NSAttributedString drawWithRect:options:]'
void env___IM_NSAttributedString_drawWithRect_Coptions_C(void *_instance, U32 _self, U32 rectIndirect, U32 options) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSAttributedString*)_self drawWithRect:_t1 options:options];
}

// method '-[NSAttributedString fileWrapperFromRange:documentAttributes:error:]'
U32 env___IM_NSAttributedString_fileWrapperFromRange_CdocumentAttributes_Cerror_C(void *_instance, U32 _self, U32 rangeIndirect, U32 dictPointer, U32 errorPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)dictPointer;
    id* _t3 = (id*)errorPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self fileWrapperFromRange:_t1 documentAttributes:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSAttributedString fontAttributesInRange:]'
U32 env___IM_NSAttributedString_fontAttributesInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self fontAttributesInRange:_t1];
    return (U32)_result;
}

// method '-[NSAttributedString initWithData:options:documentAttributes:error:]'
U32 env___IM_NSAttributedString_initWithData_Coptions_CdocumentAttributes_Cerror_C(void *_instance, U32 _self, U32 dataPointer, U32 optionsPointer, U32 dictPointer, U32 errorPointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)optionsPointer;
    id* _t3 = (id*)dictPointer;
    id* _t4 = (id*)errorPointer;
    id _result = (id)[(NSAttributedString*)_self initWithData:_t1 options:_t2 documentAttributes:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSAttributedString initWithDocFormat:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithDocFormat_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithDocFormat:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithHTML:baseURL:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithHTML_CbaseURL_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 basePointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)basePointer;
    id* _t3 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithHTML:_t1 baseURL:_t2 documentAttributes:_t3];
    return (U32)_result;
}

// method '-[NSAttributedString initWithHTML:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithHTML_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithHTML:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithHTML:options:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithHTML_Coptions_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 optionsPointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)optionsPointer;
    id* _t3 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithHTML:_t1 options:_t2 documentAttributes:_t3];
    return (U32)_result;
}

// method '-[NSAttributedString initWithPath:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithPath_CdocumentAttributes_C(void *_instance, U32 _self, U32 pathPointer, U32 dictPointer) {
    id _t1 = (id)pathPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithPath:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithRTF:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithRTF_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithRTF:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithRTFD:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithRTFD_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithRTFD:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithRTFDFileWrapper:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithRTFDFileWrapper_CdocumentAttributes_C(void *_instance, U32 _self, U32 wrapperPointer, U32 dictPointer) {
    id _t1 = (id)wrapperPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithRTFDFileWrapper:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithURL:documentAttributes:]'
U32 env___IM_NSAttributedString_initWithURL_CdocumentAttributes_C(void *_instance, U32 _self, U32 urlPointer, U32 dictPointer) {
    id _t1 = (id)urlPointer;
    id* _t2 = (id*)dictPointer;
    id _result = (id)[(NSAttributedString*)_self initWithURL:_t1 documentAttributes:_t2];
    return (U32)_result;
}

// method '-[NSAttributedString initWithURL:options:documentAttributes:error:]'
U32 env___IM_NSAttributedString_initWithURL_Coptions_CdocumentAttributes_Cerror_C(void *_instance, U32 _self, U32 urlPointer, U32 optionsPointer, U32 dictPointer, U32 errorPointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)optionsPointer;
    id* _t3 = (id*)dictPointer;
    id* _t4 = (id*)errorPointer;
    id _result = (id)[(NSAttributedString*)_self initWithURL:_t1 options:_t2 documentAttributes:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSAttributedString itemNumberInTextList:atIndex:]'
U32 env___IM_NSAttributedString_itemNumberInTextList_CatIndex_C(void *_instance, U32 _self, U32 listPointer, U32 location) {
    id _t1 = (id)listPointer;
    int _result = (int)[(NSAttributedString*)_self itemNumberInTextList:_t1 atIndex:location];
    return (U32)_result;
}

// method '-[NSAttributedString lineBreakBeforeIndex:withinRange:]'
U32 env___IM_NSAttributedString_lineBreakBeforeIndex_CwithinRange_C(void *_instance, U32 _self, U32 location, U32 aRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + aRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    unsigned int _result = (unsigned int)[(NSAttributedString*)_self lineBreakBeforeIndex:location withinRange:_t1];
    return (U32)_result;
}

// method '-[NSAttributedString lineBreakByHyphenatingBeforeIndex:withinRange:]'
U32 env___IM_NSAttributedString_lineBreakByHyphenatingBeforeIndex_CwithinRange_C(void *_instance, U32 _self, U32 location, U32 aRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + aRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    unsigned int _result = (unsigned int)[(NSAttributedString*)_self lineBreakByHyphenatingBeforeIndex:location withinRange:_t1];
    return (U32)_result;
}

// method '-[NSAttributedString nextWordFromIndex:forward:]'
U32 env___IM_NSAttributedString_nextWordFromIndex_Cforward_C(void *_instance, U32 _self, U32 location, U32 isForward) {
    unsigned int _result = (unsigned int)[(NSAttributedString*)_self nextWordFromIndex:location forward:isForward];
    return (U32)_result;
}

// method '-[NSAttributedString rangeOfTextBlock:atIndex:]'
void env___IM_NSAttributedString_rangeOfTextBlock_CatIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 location) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRange _result = (NSRange)[(NSAttributedString*)_self rangeOfTextBlock:_t1 atIndex:location];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSAttributedString rangeOfTextList:atIndex:]'
void env___IM_NSAttributedString_rangeOfTextList_CatIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 listPointer, U32 location) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)listPointer;
    NSRange _result = (NSRange)[(NSAttributedString*)_self rangeOfTextList:_t1 atIndex:location];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSAttributedString rangeOfTextTable:atIndex:]'
void env___IM_NSAttributedString_rangeOfTextTable_CatIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 tablePointer, U32 location) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)tablePointer;
    NSRange _result = (NSRange)[(NSAttributedString*)_self rangeOfTextTable:_t1 atIndex:location];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSAttributedString rulerAttributesInRange:]'
U32 env___IM_NSAttributedString_rulerAttributesInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSAttributedString*)_self rulerAttributesInRange:_t1];
    return (U32)_result;
}

// method '-[NSAttributedString size]'
void env___IM_NSAttributedString_size(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSAttributedString*)_self size];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSAttributedString textFileTypes]'
U32 env___CM_NSAttributedString_textFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class textFileTypes];
    return (U32)_result;
}

// method '+[NSAttributedString textPasteboardTypes]'
U32 env___CM_NSAttributedString_textPasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class textPasteboardTypes];
    return (U32)_result;
}

// method '+[NSAttributedString textUnfilteredFileTypes]'
U32 env___CM_NSAttributedString_textUnfilteredFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class textUnfilteredFileTypes];
    return (U32)_result;
}

// method '+[NSAttributedString textUnfilteredPasteboardTypes]'
U32 env___CM_NSAttributedString_textUnfilteredPasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class textUnfilteredPasteboardTypes];
    return (U32)_result;
}

// method '-[NSBezierPath addClip]'
void env___IM_NSBezierPath_addClip(void *_instance, U32 _self) {
    [(NSBezierPath*)_self addClip];
}

// method '-[NSBezierPath appendBezierPath:]'
void env___IM_NSBezierPath_appendBezierPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    [(NSBezierPath*)_self appendBezierPath:_t1];
}

// method '-[NSBezierPath appendBezierPathWithArcFromPoint:toPoint:radius:]'
void env___IM_NSBezierPath_appendBezierPathWithArcFromPoint_CtoPoint_Cradius_C(void *_instance, U32 _self, U32 point1Indirect, U32 point2Indirect, F32 radius) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + point1Indirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + point2Indirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(NSBezierPath*)_self appendBezierPathWithArcFromPoint:_t1 toPoint:_t2 radius:radius];
}

// method '-[NSBezierPath appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:]'
void env___IM_NSBezierPath_appendBezierPathWithArcWithCenter_Cradius_CstartAngle_CendAngle_C(void *_instance, U32 _self, U32 centerIndirect, F32 radius, F32 startAngle, F32 endAngle) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + centerIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSBezierPath*)_self appendBezierPathWithArcWithCenter:_t1 radius:radius startAngle:startAngle endAngle:endAngle];
}

// method '-[NSBezierPath appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:]'
void env___IM_NSBezierPath_appendBezierPathWithArcWithCenter_Cradius_CstartAngle_CendAngle_Cclockwise_C(void *_instance, U32 _self, U32 centerIndirect, F32 radius, F32 startAngle, F32 endAngle, U32 clockwise) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + centerIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSBezierPath*)_self appendBezierPathWithArcWithCenter:_t1 radius:radius startAngle:startAngle endAngle:endAngle clockwise:clockwise];
}

// method '-[NSBezierPath appendBezierPathWithGlyph:inFont:]'
void env___IM_NSBezierPath_appendBezierPathWithGlyph_CinFont_C(void *_instance, U32 _self, U32 glyph, U32 fontPointer) {
    id _t1 = (id)fontPointer;
    [(NSBezierPath*)_self appendBezierPathWithGlyph:glyph inFont:_t1];
}

// method '-[NSBezierPath appendBezierPathWithGlyphs:count:inFont:]'
void env___IM_NSBezierPath_appendBezierPathWithGlyphs_Ccount_CinFont_C(void *_instance, U32 _self, U32 glyphsPointer, U32 count, U32 fontPointer) {
    unsigned int* _t1 = (unsigned int*)glyphsPointer;
    id _t2 = (id)fontPointer;
    [(NSBezierPath*)_self appendBezierPathWithGlyphs:_t1 count:count inFont:_t2];
}

// method '-[NSBezierPath appendBezierPathWithOvalInRect:]'
void env___IM_NSBezierPath_appendBezierPathWithOvalInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSBezierPath*)_self appendBezierPathWithOvalInRect:_t1];
}

// method '-[NSBezierPath appendBezierPathWithPackedGlyphs:]'
void env___IM_NSBezierPath_appendBezierPathWithPackedGlyphs_C(void *_instance, U32 _self, U32 packedGlyphsPointer) {
    const char* _t1 = (const char*)packedGlyphsPointer;
    [(NSBezierPath*)_self appendBezierPathWithPackedGlyphs:_t1];
}

// method '-[NSBezierPath appendBezierPathWithPoints:count:]'
void env___IM_NSBezierPath_appendBezierPathWithPoints_Ccount_C(void *_instance, U32 _self, U32 pointsPointer, U32 count) {
    NSPointArray _t1 = (NSPointArray)pointsPointer;
    [(NSBezierPath*)_self appendBezierPathWithPoints:_t1 count:count];
}

// method '-[NSBezierPath appendBezierPathWithRect:]'
void env___IM_NSBezierPath_appendBezierPathWithRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSBezierPath*)_self appendBezierPathWithRect:_t1];
}

// method '+[NSBezierPath bezierPath]'
U32 env___CM_NSBezierPath_bezierPath(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class bezierPath];
    return (U32)_result;
}

// method '-[NSBezierPath bezierPathByFlatteningPath]'
U32 env___IM_NSBezierPath_bezierPathByFlatteningPath(void *_instance, U32 _self) {
    id _result = (id)[(NSBezierPath*)_self bezierPathByFlatteningPath];
    return (U32)_result;
}

// method '-[NSBezierPath bezierPathByReversingPath]'
U32 env___IM_NSBezierPath_bezierPathByReversingPath(void *_instance, U32 _self) {
    id _result = (id)[(NSBezierPath*)_self bezierPathByReversingPath];
    return (U32)_result;
}

// method '+[NSBezierPath bezierPathWithOvalInRect:]'
U32 env___CM_NSBezierPath_bezierPathWithOvalInRect_C(void *_instance, U32 _class, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(Class)_class bezierPathWithOvalInRect:_t1];
    return (U32)_result;
}

// method '+[NSBezierPath bezierPathWithRect:]'
U32 env___CM_NSBezierPath_bezierPathWithRect_C(void *_instance, U32 _class, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(Class)_class bezierPathWithRect:_t1];
    return (U32)_result;
}

// method '-[NSBezierPath bounds]'
void env___IM_NSBezierPath_bounds(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBezierPath*)_self bounds];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBezierPath cachesBezierPath]'
U32 env___IM_NSBezierPath_cachesBezierPath(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBezierPath*)_self cachesBezierPath];
    return (U32)_result;
}

// method '+[NSBezierPath clipRect:]'
void env___CM_NSBezierPath_clipRect_C(void *_instance, U32 _class, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(Class)_class clipRect:_t1];
}

// method '-[NSBezierPath closePath]'
void env___IM_NSBezierPath_closePath(void *_instance, U32 _self) {
    [(NSBezierPath*)_self closePath];
}

// method '-[NSBezierPath containsPoint:]'
U32 env___IM_NSBezierPath_containsPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    BOOL _result = (BOOL)[(NSBezierPath*)_self containsPoint:_t1];
    return (U32)_result;
}

// method '-[NSBezierPath controlPointBounds]'
void env___IM_NSBezierPath_controlPointBounds(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBezierPath*)_self controlPointBounds];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBezierPath currentPoint]'
void env___IM_NSBezierPath_currentPoint(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSBezierPath*)_self currentPoint];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBezierPath curveToPoint:controlPoint1:controlPoint2:]'
void env___IM_NSBezierPath_curveToPoint_CcontrolPoint1_CcontrolPoint2_C(void *_instance, U32 _self, U32 endPointIndirect, U32 controlPoint1Indirect, U32 controlPoint2Indirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + endPointIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + controlPoint1Indirect);
    NSPoint _t3 = *(NSPoint*)(_mem->data + controlPoint2Indirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    [(NSBezierPath*)_self curveToPoint:_t1 controlPoint1:_t2 controlPoint2:_t3];
}

// method '+[NSBezierPath defaultFlatness]'
F32 env___CM_NSBezierPath_defaultFlatness(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class defaultFlatness];
    return (F32)_result;
}

// method '+[NSBezierPath defaultLineCapStyle]'
U32 env___CM_NSBezierPath_defaultLineCapStyle(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultLineCapStyle];
    return (U32)_result;
}

// method '+[NSBezierPath defaultLineJoinStyle]'
U32 env___CM_NSBezierPath_defaultLineJoinStyle(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultLineJoinStyle];
    return (U32)_result;
}

// method '+[NSBezierPath defaultLineWidth]'
F32 env___CM_NSBezierPath_defaultLineWidth(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class defaultLineWidth];
    return (F32)_result;
}

// method '+[NSBezierPath defaultMiterLimit]'
F32 env___CM_NSBezierPath_defaultMiterLimit(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class defaultMiterLimit];
    return (F32)_result;
}

// method '+[NSBezierPath defaultWindingRule]'
U32 env___CM_NSBezierPath_defaultWindingRule(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultWindingRule];
    return (U32)_result;
}

// method '+[NSBezierPath drawPackedGlyphs:atPoint:]'
void env___CM_NSBezierPath_drawPackedGlyphs_CatPoint_C(void *_instance, U32 _class, U32 packedGlyphsPointer, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    const char* _t1 = (const char*)packedGlyphsPointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(Class)_class drawPackedGlyphs:_t1 atPoint:_t2];
}

// method '-[NSBezierPath elementAtIndex:]'
U32 env___IM_NSBezierPath_elementAtIndex_C(void *_instance, U32 _self, U32 index) {
    int _result = (int)[(NSBezierPath*)_self elementAtIndex:index];
    return (U32)_result;
}

// method '-[NSBezierPath elementAtIndex:associatedPoints:]'
U32 env___IM_NSBezierPath_elementAtIndex_CassociatedPoints_C(void *_instance, U32 _self, U32 index, U32 pointsPointer) {
    NSPointArray _t1 = (NSPointArray)pointsPointer;
    int _result = (int)[(NSBezierPath*)_self elementAtIndex:index associatedPoints:_t1];
    return (U32)_result;
}

// method '-[NSBezierPath elementCount]'
U32 env___IM_NSBezierPath_elementCount(void *_instance, U32 _self) {
    int _result = (int)[(NSBezierPath*)_self elementCount];
    return (U32)_result;
}

// method '-[NSBezierPath fill]'
void env___IM_NSBezierPath_fill(void *_instance, U32 _self) {
    [(NSBezierPath*)_self fill];
}

// method '+[NSBezierPath fillRect:]'
void env___CM_NSBezierPath_fillRect_C(void *_instance, U32 _class, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(Class)_class fillRect:_t1];
}

// method '-[NSBezierPath flatness]'
F32 env___IM_NSBezierPath_flatness(void *_instance, U32 _self) {
    float _result = (float)[(NSBezierPath*)_self flatness];
    return (F32)_result;
}

// method '-[NSBezierPath getLineDash:count:phase:]'
void env___IM_NSBezierPath_getLineDash_Ccount_Cphase_C(void *_instance, U32 _self, U32 patternPointer, U32 countPointer, U32 phasePointer) {
    float* _t1 = (float*)patternPointer;
    int* _t2 = (int*)countPointer;
    float* _t3 = (float*)phasePointer;
    [(NSBezierPath*)_self getLineDash:_t1 count:_t2 phase:_t3];
}

// method '-[NSBezierPath isEmpty]'
U32 env___IM_NSBezierPath_isEmpty(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBezierPath*)_self isEmpty];
    return (U32)_result;
}

// method '-[NSBezierPath lineCapStyle]'
U32 env___IM_NSBezierPath_lineCapStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSBezierPath*)_self lineCapStyle];
    return (U32)_result;
}

// method '-[NSBezierPath lineJoinStyle]'
U32 env___IM_NSBezierPath_lineJoinStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSBezierPath*)_self lineJoinStyle];
    return (U32)_result;
}

// method '-[NSBezierPath lineToPoint:]'
void env___IM_NSBezierPath_lineToPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSBezierPath*)_self lineToPoint:_t1];
}

// method '-[NSBezierPath lineWidth]'
F32 env___IM_NSBezierPath_lineWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSBezierPath*)_self lineWidth];
    return (F32)_result;
}

// method '-[NSBezierPath miterLimit]'
F32 env___IM_NSBezierPath_miterLimit(void *_instance, U32 _self) {
    float _result = (float)[(NSBezierPath*)_self miterLimit];
    return (F32)_result;
}

// method '-[NSBezierPath moveToPoint:]'
void env___IM_NSBezierPath_moveToPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSBezierPath*)_self moveToPoint:_t1];
}

// method '-[NSBezierPath relativeCurveToPoint:controlPoint1:controlPoint2:]'
void env___IM_NSBezierPath_relativeCurveToPoint_CcontrolPoint1_CcontrolPoint2_C(void *_instance, U32 _self, U32 endPointIndirect, U32 controlPoint1Indirect, U32 controlPoint2Indirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + endPointIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + controlPoint1Indirect);
    NSPoint _t3 = *(NSPoint*)(_mem->data + controlPoint2Indirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    [(NSBezierPath*)_self relativeCurveToPoint:_t1 controlPoint1:_t2 controlPoint2:_t3];
}

// method '-[NSBezierPath relativeLineToPoint:]'
void env___IM_NSBezierPath_relativeLineToPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSBezierPath*)_self relativeLineToPoint:_t1];
}

// method '-[NSBezierPath relativeMoveToPoint:]'
void env___IM_NSBezierPath_relativeMoveToPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSBezierPath*)_self relativeMoveToPoint:_t1];
}

// method '-[NSBezierPath removeAllPoints]'
void env___IM_NSBezierPath_removeAllPoints(void *_instance, U32 _self) {
    [(NSBezierPath*)_self removeAllPoints];
}

// method '-[NSBezierPath setCachesBezierPath:]'
void env___IM_NSBezierPath_setCachesBezierPath_C(void *_instance, U32 _self, U32 flag) {
    [(NSBezierPath*)_self setCachesBezierPath:flag];
}

// method '-[NSBezierPath setClip]'
void env___IM_NSBezierPath_setClip(void *_instance, U32 _self) {
    [(NSBezierPath*)_self setClip];
}

// method '+[NSBezierPath setDefaultFlatness:]'
void env___CM_NSBezierPath_setDefaultFlatness_C(void *_instance, U32 _class, F32 flatness) {
    [(Class)_class setDefaultFlatness:flatness];
}

// method '+[NSBezierPath setDefaultLineCapStyle:]'
void env___CM_NSBezierPath_setDefaultLineCapStyle_C(void *_instance, U32 _class, U32 lineCapStyle) {
    [(Class)_class setDefaultLineCapStyle:lineCapStyle];
}

// method '+[NSBezierPath setDefaultLineJoinStyle:]'
void env___CM_NSBezierPath_setDefaultLineJoinStyle_C(void *_instance, U32 _class, U32 lineJoinStyle) {
    [(Class)_class setDefaultLineJoinStyle:lineJoinStyle];
}

// method '+[NSBezierPath setDefaultLineWidth:]'
void env___CM_NSBezierPath_setDefaultLineWidth_C(void *_instance, U32 _class, F32 lineWidth) {
    [(Class)_class setDefaultLineWidth:lineWidth];
}

// method '+[NSBezierPath setDefaultMiterLimit:]'
void env___CM_NSBezierPath_setDefaultMiterLimit_C(void *_instance, U32 _class, F32 limit) {
    [(Class)_class setDefaultMiterLimit:limit];
}

// method '+[NSBezierPath setDefaultWindingRule:]'
void env___CM_NSBezierPath_setDefaultWindingRule_C(void *_instance, U32 _class, U32 windingRule) {
    [(Class)_class setDefaultWindingRule:windingRule];
}

// method '-[NSBezierPath setFlatness:]'
void env___IM_NSBezierPath_setFlatness_C(void *_instance, U32 _self, F32 flatness) {
    [(NSBezierPath*)_self setFlatness:flatness];
}

// method '-[NSBezierPath setLineCapStyle:]'
void env___IM_NSBezierPath_setLineCapStyle_C(void *_instance, U32 _self, U32 lineCapStyle) {
    [(NSBezierPath*)_self setLineCapStyle:lineCapStyle];
}

// method '-[NSBezierPath setLineDash:count:phase:]'
void env___IM_NSBezierPath_setLineDash_Ccount_Cphase_C(void *_instance, U32 _self, U32 patternPointer, U32 count, F32 phase) {
    const float* _t1 = (const float*)patternPointer;
    [(NSBezierPath*)_self setLineDash:_t1 count:count phase:phase];
}

// method '-[NSBezierPath setLineJoinStyle:]'
void env___IM_NSBezierPath_setLineJoinStyle_C(void *_instance, U32 _self, U32 lineJoinStyle) {
    [(NSBezierPath*)_self setLineJoinStyle:lineJoinStyle];
}

// method '-[NSBezierPath setLineWidth:]'
void env___IM_NSBezierPath_setLineWidth_C(void *_instance, U32 _self, F32 lineWidth) {
    [(NSBezierPath*)_self setLineWidth:lineWidth];
}

// method '-[NSBezierPath setMiterLimit:]'
void env___IM_NSBezierPath_setMiterLimit_C(void *_instance, U32 _self, F32 miterLimit) {
    [(NSBezierPath*)_self setMiterLimit:miterLimit];
}

// method '-[NSBezierPath setWindingRule:]'
void env___IM_NSBezierPath_setWindingRule_C(void *_instance, U32 _self, U32 windingRule) {
    [(NSBezierPath*)_self setWindingRule:windingRule];
}

// method '-[NSBezierPath stroke]'
void env___IM_NSBezierPath_stroke(void *_instance, U32 _self) {
    [(NSBezierPath*)_self stroke];
}

// method '+[NSBezierPath strokeLineFromPoint:toPoint:]'
void env___CM_NSBezierPath_strokeLineFromPoint_CtoPoint_C(void *_instance, U32 _class, U32 point1Indirect, U32 point2Indirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + point1Indirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + point2Indirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(Class)_class strokeLineFromPoint:_t1 toPoint:_t2];
}

// method '+[NSBezierPath strokeRect:]'
void env___CM_NSBezierPath_strokeRect_C(void *_instance, U32 _class, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(Class)_class strokeRect:_t1];
}

// method '-[NSBezierPath transformUsingAffineTransform:]'
void env___IM_NSBezierPath_transformUsingAffineTransform_C(void *_instance, U32 _self, U32 transformPointer) {
    id _t1 = (id)transformPointer;
    [(NSBezierPath*)_self transformUsingAffineTransform:_t1];
}

// method '-[NSBezierPath windingRule]'
U32 env___IM_NSBezierPath_windingRule(void *_instance, U32 _self) {
    int _result = (int)[(NSBezierPath*)_self windingRule];
    return (U32)_result;
}

// method '-[NSBitmapImageRep TIFFRepresentation]'
U32 env___IM_NSBitmapImageRep_TIFFRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSBitmapImageRep*)_self TIFFRepresentation];
    return (U32)_result;
}

// method '+[NSBitmapImageRep TIFFRepresentationOfImageRepsInArray:]'
U32 env___CM_NSBitmapImageRep_TIFFRepresentationOfImageRepsInArray_C(void *_instance, U32 _class, U32 arrayPointer) {
    id _t1 = (id)arrayPointer;
    id _result = (id)[(Class)_class TIFFRepresentationOfImageRepsInArray:_t1];
    return (U32)_result;
}

// method '+[NSBitmapImageRep TIFFRepresentationOfImageRepsInArray:usingCompression:factor:]'
U32 env___CM_NSBitmapImageRep_TIFFRepresentationOfImageRepsInArray_CusingCompression_Cfactor_C(void *_instance, U32 _class, U32 arrayPointer, U32 comp, F32 factor) {
    id _t1 = (id)arrayPointer;
    id _result = (id)[(Class)_class TIFFRepresentationOfImageRepsInArray:_t1 usingCompression:comp factor:factor];
    return (U32)_result;
}

// method '-[NSBitmapImageRep TIFFRepresentationUsingCompression:factor:]'
U32 env___IM_NSBitmapImageRep_TIFFRepresentationUsingCompression_Cfactor_C(void *_instance, U32 _self, U32 comp, F32 factor) {
    id _result = (id)[(NSBitmapImageRep*)_self TIFFRepresentationUsingCompression:comp factor:factor];
    return (U32)_result;
}

// method '-[NSBitmapImageRep bitmapData]'
U32 env___IM_NSBitmapImageRep_bitmapData(void *_instance, U32 _self) {
    unsigned char* _result = (unsigned char*)[(NSBitmapImageRep*)_self bitmapData];
    return (U32)_result;
}

// method '-[NSBitmapImageRep bitmapFormat]'
U32 env___IM_NSBitmapImageRep_bitmapFormat(void *_instance, U32 _self) {
    int _result = (int)[(NSBitmapImageRep*)_self bitmapFormat];
    return (U32)_result;
}

// method '-[NSBitmapImageRep bitsPerPixel]'
U32 env___IM_NSBitmapImageRep_bitsPerPixel(void *_instance, U32 _self) {
    int _result = (int)[(NSBitmapImageRep*)_self bitsPerPixel];
    return (U32)_result;
}

// method '-[NSBitmapImageRep bytesPerPlane]'
U32 env___IM_NSBitmapImageRep_bytesPerPlane(void *_instance, U32 _self) {
    int _result = (int)[(NSBitmapImageRep*)_self bytesPerPlane];
    return (U32)_result;
}

// method '-[NSBitmapImageRep bytesPerRow]'
U32 env___IM_NSBitmapImageRep_bytesPerRow(void *_instance, U32 _self) {
    int _result = (int)[(NSBitmapImageRep*)_self bytesPerRow];
    return (U32)_result;
}

// method '-[NSBitmapImageRep canBeCompressedUsing:]'
U32 env___IM_NSBitmapImageRep_canBeCompressedUsing_C(void *_instance, U32 _self, U32 compression) {
    BOOL _result = (BOOL)[(NSBitmapImageRep*)_self canBeCompressedUsing:compression];
    return (U32)_result;
}

// method '-[NSBitmapImageRep colorAtX:y:]'
U32 env___IM_NSBitmapImageRep_colorAtX58_Cy_C(void *_instance, U32 _self, U32 x, U32 y) {
    id _result = (id)[(NSBitmapImageRep*)_self colorAtX:x y:y];
    return (U32)_result;
}

// method '-[NSBitmapImageRep colorizeByMappingGray:toColor:blackMapping:whiteMapping:]'
void env___IM_NSBitmapImageRep_colorizeByMappingGray_CtoColor_CblackMapping_CwhiteMapping_C(void *_instance, U32 _self, F32 midPoint, U32 midPointColorPointer, U32 shadowColorPointer, U32 lightColorPointer) {
    id _t1 = (id)midPointColorPointer;
    id _t2 = (id)shadowColorPointer;
    id _t3 = (id)lightColorPointer;
    [(NSBitmapImageRep*)_self colorizeByMappingGray:midPoint toColor:_t1 blackMapping:_t2 whiteMapping:_t3];
}

// method '-[NSBitmapImageRep getBitmapDataPlanes:]'
void env___IM_NSBitmapImageRep_getBitmapDataPlanes_C(void *_instance, U32 _self, U32 dataPointer) {
    unsigned char** _t1 = (unsigned char**)dataPointer;
    [(NSBitmapImageRep*)_self getBitmapDataPlanes:_t1];
}

// method '-[NSBitmapImageRep getCompression:factor:]'
void env___IM_NSBitmapImageRep_getCompression_Cfactor_C(void *_instance, U32 _self, U32 compressionPointer, U32 factorPointer) {
    int* _t1 = (int*)compressionPointer;
    float* _t2 = (float*)factorPointer;
    [(NSBitmapImageRep*)_self getCompression:_t1 factor:_t2];
}

// method '-[NSBitmapImageRep getPixel:atX:y:]'
void env___IM_NSBitmapImageRep_getPixel_CatX58_Cy_C(void *_instance, U32 _self, U32 pPointer, U32 x, U32 y) {
    unsigned int* _t1 = (unsigned int*)pPointer;
    [(NSBitmapImageRep*)_self getPixel:_t1 atX:x y:y];
}

// method '+[NSBitmapImageRep getTIFFCompressionTypes:count:]'
void env___CM_NSBitmapImageRep_getTIFFCompressionTypes_Ccount_C(void *_instance, U32 _class, U32 listPointer, U32 numTypesPointer) {
    const int** _t1 = (const int**)listPointer;
    int* _t2 = (int*)numTypesPointer;
    [(Class)_class getTIFFCompressionTypes:_t1 count:_t2];
}

// method '+[NSBitmapImageRep imageRepWithData:]'
U32 env___CM_NSBitmapImageRep_imageRepWithData_C(void *_instance, U32 _class, U32 tiffDataPointer) {
    id _t1 = (id)tiffDataPointer;
    id _result = (id)[(Class)_class imageRepWithData:_t1];
    return (U32)_result;
}

// method '+[NSBitmapImageRep imageRepsWithData:]'
U32 env___CM_NSBitmapImageRep_imageRepsWithData_C(void *_instance, U32 _class, U32 tiffDataPointer) {
    id _t1 = (id)tiffDataPointer;
    id _result = (id)[(Class)_class imageRepsWithData:_t1];
    return (U32)_result;
}

// method '-[NSBitmapImageRep incrementalLoadFromData:complete:]'
U32 env___IM_NSBitmapImageRep_incrementalLoadFromData_Ccomplete_C(void *_instance, U32 _self, U32 dataPointer, U32 complete) {
    id _t1 = (id)dataPointer;
    int _result = (int)[(NSBitmapImageRep*)_self incrementalLoadFromData:_t1 complete:complete];
    return (U32)_result;
}

// method '-[NSBitmapImageRep initForIncrementalLoad]'
U32 env___IM_NSBitmapImageRep_initForIncrementalLoad(void *_instance, U32 _self) {
    id _result = (id)[(NSBitmapImageRep*)_self initForIncrementalLoad];
    return (U32)_result;
}

// method '-[NSBitmapImageRep initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:]'
U32 env___IM_NSBitmapImageRep_initWithBitmapDataPlanes_CpixelsWide_CpixelsHigh_CbitsPerSample_CsamplesPerPixel_ChasAlpha_CisPlanar_CcolorSpaceName_CbitmapFormat_CbytesPerRow_CbitsPerPixel_C(void *_instance, U32 _self, U32 planesPointer, U32 width, U32 height, U32 bps, U32 spp, U32 alpha, U32 isPlanar, U32 colorSpaceNamePointer, U32 bitmapFormat, U32 rBytes, U32 pBits) {
    unsigned char** _t1 = (unsigned char**)planesPointer;
    id _t2 = (id)colorSpaceNamePointer;
    id _result = (id)[(NSBitmapImageRep*)_self initWithBitmapDataPlanes:_t1 pixelsWide:width pixelsHigh:height bitsPerSample:bps samplesPerPixel:spp hasAlpha:alpha isPlanar:isPlanar colorSpaceName:_t2 bitmapFormat:bitmapFormat bytesPerRow:rBytes bitsPerPixel:pBits];
    return (U32)_result;
}

// method '-[NSBitmapImageRep initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:]'
U32 env___IM_NSBitmapImageRep_initWithBitmapDataPlanes_CpixelsWide_CpixelsHigh_CbitsPerSample_CsamplesPerPixel_ChasAlpha_CisPlanar_CcolorSpaceName_CbytesPerRow_CbitsPerPixel_C(void *_instance, U32 _self, U32 planesPointer, U32 width, U32 height, U32 bps, U32 spp, U32 alpha, U32 isPlanar, U32 colorSpaceNamePointer, U32 rBytes, U32 pBits) {
    unsigned char** _t1 = (unsigned char**)planesPointer;
    id _t2 = (id)colorSpaceNamePointer;
    id _result = (id)[(NSBitmapImageRep*)_self initWithBitmapDataPlanes:_t1 pixelsWide:width pixelsHigh:height bitsPerSample:bps samplesPerPixel:spp hasAlpha:alpha isPlanar:isPlanar colorSpaceName:_t2 bytesPerRow:rBytes bitsPerPixel:pBits];
    return (U32)_result;
}

// method '-[NSBitmapImageRep initWithData:]'
U32 env___IM_NSBitmapImageRep_initWithData_C(void *_instance, U32 _self, U32 tiffDataPointer) {
    id _t1 = (id)tiffDataPointer;
    id _result = (id)[(NSBitmapImageRep*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSBitmapImageRep initWithFocusedViewRect:]'
U32 env___IM_NSBitmapImageRep_initWithFocusedViewRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSBitmapImageRep*)_self initWithFocusedViewRect:_t1];
    return (U32)_result;
}

// method '-[NSBitmapImageRep isPlanar]'
U32 env___IM_NSBitmapImageRep_isPlanar(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBitmapImageRep*)_self isPlanar];
    return (U32)_result;
}

// method '+[NSBitmapImageRep localizedNameForTIFFCompressionType:]'
U32 env___CM_NSBitmapImageRep_localizedNameForTIFFCompressionType_C(void *_instance, U32 _class, U32 compression) {
    id _result = (id)[(Class)_class localizedNameForTIFFCompressionType:compression];
    return (U32)_result;
}

// method '-[NSBitmapImageRep numberOfPlanes]'
U32 env___IM_NSBitmapImageRep_numberOfPlanes(void *_instance, U32 _self) {
    int _result = (int)[(NSBitmapImageRep*)_self numberOfPlanes];
    return (U32)_result;
}

// method '+[NSBitmapImageRep representationOfImageRepsInArray:usingType:properties:]'
U32 env___CM_NSBitmapImageRep_representationOfImageRepsInArray_CusingType_Cproperties_C(void *_instance, U32 _class, U32 imageRepsPointer, U32 storageType, U32 propertiesPointer) {
    id _t1 = (id)imageRepsPointer;
    id _t2 = (id)propertiesPointer;
    id _result = (id)[(Class)_class representationOfImageRepsInArray:_t1 usingType:storageType properties:_t2];
    return (U32)_result;
}

// method '-[NSBitmapImageRep representationUsingType:properties:]'
U32 env___IM_NSBitmapImageRep_representationUsingType_Cproperties_C(void *_instance, U32 _self, U32 storageType, U32 propertiesPointer) {
    id _t1 = (id)propertiesPointer;
    id _result = (id)[(NSBitmapImageRep*)_self representationUsingType:storageType properties:_t1];
    return (U32)_result;
}

// method '-[NSBitmapImageRep samplesPerPixel]'
U32 env___IM_NSBitmapImageRep_samplesPerPixel(void *_instance, U32 _self) {
    int _result = (int)[(NSBitmapImageRep*)_self samplesPerPixel];
    return (U32)_result;
}

// method '-[NSBitmapImageRep setColor:atX:y:]'
void env___IM_NSBitmapImageRep_setColor_CatX58_Cy_C(void *_instance, U32 _self, U32 colorPointer, U32 x, U32 y) {
    id _t1 = (id)colorPointer;
    [(NSBitmapImageRep*)_self setColor:_t1 atX:x y:y];
}

// method '-[NSBitmapImageRep setCompression:factor:]'
void env___IM_NSBitmapImageRep_setCompression_Cfactor_C(void *_instance, U32 _self, U32 compression, F32 factor) {
    [(NSBitmapImageRep*)_self setCompression:compression factor:factor];
}

// method '-[NSBitmapImageRep setPixel:atX:y:]'
void env___IM_NSBitmapImageRep_setPixel_CatX58_Cy_C(void *_instance, U32 _self, U32 pPointer, U32 x, U32 y) {
    unsigned int* _t1 = (unsigned int*)pPointer;
    [(NSBitmapImageRep*)_self setPixel:_t1 atX:x y:y];
}

// method '-[NSBitmapImageRep setProperty:withValue:]'
void env___IM_NSBitmapImageRep_setProperty_CwithValue_C(void *_instance, U32 _self, U32 propertyPointer, U32 valuePointer) {
    id _t1 = (id)propertyPointer;
    id _t2 = (id)valuePointer;
    [(NSBitmapImageRep*)_self setProperty:_t1 withValue:_t2];
}

// method '-[NSBitmapImageRep valueForProperty:]'
U32 env___IM_NSBitmapImageRep_valueForProperty_C(void *_instance, U32 _self, U32 propertyPointer) {
    id _t1 = (id)propertyPointer;
    id _result = (id)[(NSBitmapImageRep*)_self valueForProperty:_t1];
    return (U32)_result;
}

// method '-[NSBox borderRect]'
void env___IM_NSBox_borderRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBox*)_self borderRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBox borderType]'
U32 env___IM_NSBox_borderType(void *_instance, U32 _self) {
    int _result = (int)[(NSBox*)_self borderType];
    return (U32)_result;
}

// method '-[NSBox boxType]'
U32 env___IM_NSBox_boxType(void *_instance, U32 _self) {
    int _result = (int)[(NSBox*)_self boxType];
    return (U32)_result;
}

// method '-[NSBox contentView]'
U32 env___IM_NSBox_contentView(void *_instance, U32 _self) {
    id _result = (id)[(NSBox*)_self contentView];
    return (U32)_result;
}

// method '-[NSBox contentViewMargins]'
void env___IM_NSBox_contentViewMargins(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSBox*)_self contentViewMargins];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBox setBorderType:]'
void env___IM_NSBox_setBorderType_C(void *_instance, U32 _self, U32 aType) {
    [(NSBox*)_self setBorderType:aType];
}

// method '-[NSBox setBoxType:]'
void env___IM_NSBox_setBoxType_C(void *_instance, U32 _self, U32 boxType) {
    [(NSBox*)_self setBoxType:boxType];
}

// method '-[NSBox setContentView:]'
void env___IM_NSBox_setContentView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSBox*)_self setContentView:_t1];
}

// method '-[NSBox setContentViewMargins:]'
void env___IM_NSBox_setContentViewMargins_C(void *_instance, U32 _self, U32 offsetSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + offsetSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSBox*)_self setContentViewMargins:_t1];
}

// method '-[NSBox setFrameFromContentFrame:]'
void env___IM_NSBox_setFrameFromContentFrame_C(void *_instance, U32 _self, U32 contentFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + contentFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSBox*)_self setFrameFromContentFrame:_t1];
}

// method '-[NSBox setTitle:]'
void env___IM_NSBox_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSBox*)_self setTitle:_t1];
}

// method '-[NSBox setTitleFont:]'
void env___IM_NSBox_setTitleFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSBox*)_self setTitleFont:_t1];
}

// method '-[NSBox setTitlePosition:]'
void env___IM_NSBox_setTitlePosition_C(void *_instance, U32 _self, U32 aPosition) {
    [(NSBox*)_self setTitlePosition:aPosition];
}

// method '-[NSBox setTitleWithMnemonic:]'
void env___IM_NSBox_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSBox*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSBox sizeToFit]'
void env___IM_NSBox_sizeToFit(void *_instance, U32 _self) {
    [(NSBox*)_self sizeToFit];
}

// method '-[NSBox title]'
U32 env___IM_NSBox_title(void *_instance, U32 _self) {
    id _result = (id)[(NSBox*)_self title];
    return (U32)_result;
}

// method '-[NSBox titleCell]'
U32 env___IM_NSBox_titleCell(void *_instance, U32 _self) {
    id _result = (id)[(NSBox*)_self titleCell];
    return (U32)_result;
}

// method '-[NSBox titleFont]'
U32 env___IM_NSBox_titleFont(void *_instance, U32 _self) {
    id _result = (id)[(NSBox*)_self titleFont];
    return (U32)_result;
}

// method '-[NSBox titlePosition]'
U32 env___IM_NSBox_titlePosition(void *_instance, U32 _self) {
    int _result = (int)[(NSBox*)_self titlePosition];
    return (U32)_result;
}

// method '-[NSBox titleRect]'
void env___IM_NSBox_titleRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBox*)_self titleRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBrowser acceptsArrowKeys]'
U32 env___IM_NSBrowser_acceptsArrowKeys(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self acceptsArrowKeys];
    return (U32)_result;
}

// method '-[NSBrowser addColumn]'
void env___IM_NSBrowser_addColumn(void *_instance, U32 _self) {
    [(NSBrowser*)_self addColumn];
}

// method '-[NSBrowser allowsBranchSelection]'
U32 env___IM_NSBrowser_allowsBranchSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self allowsBranchSelection];
    return (U32)_result;
}

// method '-[NSBrowser allowsEmptySelection]'
U32 env___IM_NSBrowser_allowsEmptySelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self allowsEmptySelection];
    return (U32)_result;
}

// method '-[NSBrowser allowsMultipleSelection]'
U32 env___IM_NSBrowser_allowsMultipleSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self allowsMultipleSelection];
    return (U32)_result;
}

// method '+[NSBrowser cellClass]'
U32 env___CM_NSBrowser_cellClass(void *_instance, U32 _class) {
    Class _result = (Class)[(Class)_class cellClass];
    return (U32)_result;
}

// method '-[NSBrowser cellPrototype]'
U32 env___IM_NSBrowser_cellPrototype(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self cellPrototype];
    return (U32)_result;
}

// method '-[NSBrowser columnContentWidthForColumnWidth:]'
F32 env___IM_NSBrowser_columnContentWidthForColumnWidth_C(void *_instance, U32 _self, F32 columnWidth) {
    float _result = (float)[(NSBrowser*)_self columnContentWidthForColumnWidth:columnWidth];
    return (F32)_result;
}

// method '-[NSBrowser columnOfMatrix:]'
U32 env___IM_NSBrowser_columnOfMatrix_C(void *_instance, U32 _self, U32 matrixPointer) {
    id _t1 = (id)matrixPointer;
    int _result = (int)[(NSBrowser*)_self columnOfMatrix:_t1];
    return (U32)_result;
}

// method '-[NSBrowser columnResizingType]'
U32 env___IM_NSBrowser_columnResizingType(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self columnResizingType];
    return (U32)_result;
}

// method '-[NSBrowser columnWidthForColumnContentWidth:]'
F32 env___IM_NSBrowser_columnWidthForColumnContentWidth_C(void *_instance, U32 _self, F32 columnContentWidth) {
    float _result = (float)[(NSBrowser*)_self columnWidthForColumnContentWidth:columnContentWidth];
    return (F32)_result;
}

// method '-[NSBrowser columnsAutosaveName]'
U32 env___IM_NSBrowser_columnsAutosaveName(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self columnsAutosaveName];
    return (U32)_result;
}

// method '-[NSBrowser delegate]'
U32 env___IM_NSBrowser_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self delegate];
    return (U32)_result;
}

// method '-[NSBrowser displayAllColumns]'
void env___IM_NSBrowser_displayAllColumns(void *_instance, U32 _self) {
    [(NSBrowser*)_self displayAllColumns];
}

// method '-[NSBrowser displayColumn:]'
void env___IM_NSBrowser_displayColumn_C(void *_instance, U32 _self, U32 column) {
    [(NSBrowser*)_self displayColumn:column];
}

// method '-[NSBrowser doClick:]'
void env___IM_NSBrowser_doClick_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSBrowser*)_self doClick:_t1];
}

// method '-[NSBrowser doDoubleClick:]'
void env___IM_NSBrowser_doDoubleClick_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSBrowser*)_self doDoubleClick:_t1];
}

// method '-[NSBrowser doubleAction]'
U32 env___IM_NSBrowser_doubleAction(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSBrowser*)_self doubleAction];
    return (U32)_result;
}

// method '-[NSBrowser drawTitleOfColumn:inRect:]'
void env___IM_NSBrowser_drawTitleOfColumn_CinRect_C(void *_instance, U32 _self, U32 column, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSBrowser*)_self drawTitleOfColumn:column inRect:_t1];
}

// method '-[NSBrowser firstVisibleColumn]'
U32 env___IM_NSBrowser_firstVisibleColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self firstVisibleColumn];
    return (U32)_result;
}

// method '-[NSBrowser frameOfColumn:]'
void env___IM_NSBrowser_frameOfColumn_C(void *_instance, U32 _resultIndirect, U32 _self, U32 column) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBrowser*)_self frameOfColumn:column];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBrowser frameOfInsideOfColumn:]'
void env___IM_NSBrowser_frameOfInsideOfColumn_C(void *_instance, U32 _resultIndirect, U32 _self, U32 column) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBrowser*)_self frameOfInsideOfColumn:column];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBrowser hasHorizontalScroller]'
U32 env___IM_NSBrowser_hasHorizontalScroller(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self hasHorizontalScroller];
    return (U32)_result;
}

// method '-[NSBrowser isLoaded]'
U32 env___IM_NSBrowser_isLoaded(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self isLoaded];
    return (U32)_result;
}

// method '-[NSBrowser isTitled]'
U32 env___IM_NSBrowser_isTitled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self isTitled];
    return (U32)_result;
}

// method '-[NSBrowser lastColumn]'
U32 env___IM_NSBrowser_lastColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self lastColumn];
    return (U32)_result;
}

// method '-[NSBrowser lastVisibleColumn]'
U32 env___IM_NSBrowser_lastVisibleColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self lastVisibleColumn];
    return (U32)_result;
}

// method '-[NSBrowser loadColumnZero]'
void env___IM_NSBrowser_loadColumnZero(void *_instance, U32 _self) {
    [(NSBrowser*)_self loadColumnZero];
}

// method '-[NSBrowser loadedCellAtRow:column:]'
U32 env___IM_NSBrowser_loadedCellAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    id _result = (id)[(NSBrowser*)_self loadedCellAtRow:row column:col];
    return (U32)_result;
}

// method '-[NSBrowser matrixClass]'
U32 env___IM_NSBrowser_matrixClass(void *_instance, U32 _self) {
    Class _result = (Class)[(NSBrowser*)_self matrixClass];
    return (U32)_result;
}

// method '-[NSBrowser matrixInColumn:]'
U32 env___IM_NSBrowser_matrixInColumn_C(void *_instance, U32 _self, U32 column) {
    id _result = (id)[(NSBrowser*)_self matrixInColumn:column];
    return (U32)_result;
}

// method '-[NSBrowser maxVisibleColumns]'
U32 env___IM_NSBrowser_maxVisibleColumns(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self maxVisibleColumns];
    return (U32)_result;
}

// method '-[NSBrowser minColumnWidth]'
F32 env___IM_NSBrowser_minColumnWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSBrowser*)_self minColumnWidth];
    return (F32)_result;
}

// method '-[NSBrowser numberOfVisibleColumns]'
U32 env___IM_NSBrowser_numberOfVisibleColumns(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self numberOfVisibleColumns];
    return (U32)_result;
}

// method '-[NSBrowser path]'
U32 env___IM_NSBrowser_path(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self path];
    return (U32)_result;
}

// method '-[NSBrowser pathSeparator]'
U32 env___IM_NSBrowser_pathSeparator(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self pathSeparator];
    return (U32)_result;
}

// method '-[NSBrowser pathToColumn:]'
U32 env___IM_NSBrowser_pathToColumn_C(void *_instance, U32 _self, U32 column) {
    id _result = (id)[(NSBrowser*)_self pathToColumn:column];
    return (U32)_result;
}

// method '-[NSBrowser prefersAllColumnUserResizing]'
U32 env___IM_NSBrowser_prefersAllColumnUserResizing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self prefersAllColumnUserResizing];
    return (U32)_result;
}

// method '-[NSBrowser reloadColumn:]'
void env___IM_NSBrowser_reloadColumn_C(void *_instance, U32 _self, U32 column) {
    [(NSBrowser*)_self reloadColumn:column];
}

// method '+[NSBrowser removeSavedColumnsWithAutosaveName:]'
void env___CM_NSBrowser_removeSavedColumnsWithAutosaveName_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(Class)_class removeSavedColumnsWithAutosaveName:_t1];
}

// method '-[NSBrowser reusesColumns]'
U32 env___IM_NSBrowser_reusesColumns(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self reusesColumns];
    return (U32)_result;
}

// method '-[NSBrowser scrollColumnToVisible:]'
void env___IM_NSBrowser_scrollColumnToVisible_C(void *_instance, U32 _self, U32 column) {
    [(NSBrowser*)_self scrollColumnToVisible:column];
}

// method '-[NSBrowser scrollColumnsLeftBy:]'
void env___IM_NSBrowser_scrollColumnsLeftBy_C(void *_instance, U32 _self, U32 shiftAmount) {
    [(NSBrowser*)_self scrollColumnsLeftBy:shiftAmount];
}

// method '-[NSBrowser scrollColumnsRightBy:]'
void env___IM_NSBrowser_scrollColumnsRightBy_C(void *_instance, U32 _self, U32 shiftAmount) {
    [(NSBrowser*)_self scrollColumnsRightBy:shiftAmount];
}

// method '-[NSBrowser scrollViaScroller:]'
void env___IM_NSBrowser_scrollViaScroller_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSBrowser*)_self scrollViaScroller:_t1];
}

// method '-[NSBrowser selectAll:]'
void env___IM_NSBrowser_selectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSBrowser*)_self selectAll:_t1];
}

// method '-[NSBrowser selectRow:inColumn:]'
void env___IM_NSBrowser_selectRow_CinColumn_C(void *_instance, U32 _self, U32 row, U32 column) {
    [(NSBrowser*)_self selectRow:row inColumn:column];
}

// method '-[NSBrowser selectedCell]'
U32 env___IM_NSBrowser_selectedCell(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self selectedCell];
    return (U32)_result;
}

// method '-[NSBrowser selectedCellInColumn:]'
U32 env___IM_NSBrowser_selectedCellInColumn_C(void *_instance, U32 _self, U32 column) {
    id _result = (id)[(NSBrowser*)_self selectedCellInColumn:column];
    return (U32)_result;
}

// method '-[NSBrowser selectedCells]'
U32 env___IM_NSBrowser_selectedCells(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowser*)_self selectedCells];
    return (U32)_result;
}

// method '-[NSBrowser selectedColumn]'
U32 env___IM_NSBrowser_selectedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSBrowser*)_self selectedColumn];
    return (U32)_result;
}

// method '-[NSBrowser selectedRowInColumn:]'
U32 env___IM_NSBrowser_selectedRowInColumn_C(void *_instance, U32 _self, U32 column) {
    int _result = (int)[(NSBrowser*)_self selectedRowInColumn:column];
    return (U32)_result;
}

// method '-[NSBrowser sendAction]'
U32 env___IM_NSBrowser_sendAction(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self sendAction];
    return (U32)_result;
}

// method '-[NSBrowser sendsActionOnArrowKeys]'
U32 env___IM_NSBrowser_sendsActionOnArrowKeys(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self sendsActionOnArrowKeys];
    return (U32)_result;
}

// method '-[NSBrowser separatesColumns]'
U32 env___IM_NSBrowser_separatesColumns(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self separatesColumns];
    return (U32)_result;
}

// method '-[NSBrowser setAcceptsArrowKeys:]'
void env___IM_NSBrowser_setAcceptsArrowKeys_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setAcceptsArrowKeys:flag];
}

// method '-[NSBrowser setAllowsBranchSelection:]'
void env___IM_NSBrowser_setAllowsBranchSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setAllowsBranchSelection:flag];
}

// method '-[NSBrowser setAllowsEmptySelection:]'
void env___IM_NSBrowser_setAllowsEmptySelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setAllowsEmptySelection:flag];
}

// method '-[NSBrowser setAllowsMultipleSelection:]'
void env___IM_NSBrowser_setAllowsMultipleSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setAllowsMultipleSelection:flag];
}

// method '-[NSBrowser setCellClass:]'
void env___IM_NSBrowser_setCellClass_C(void *_instance, U32 _self, U32 factoryIdPointer) {
    Class _t1 = (Class)factoryIdPointer;
    [(NSBrowser*)_self setCellClass:_t1];
}

// method '-[NSBrowser setCellPrototype:]'
void env___IM_NSBrowser_setCellPrototype_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSBrowser*)_self setCellPrototype:_t1];
}

// method '-[NSBrowser setColumnResizingType:]'
void env___IM_NSBrowser_setColumnResizingType_C(void *_instance, U32 _self, U32 columnResizingType) {
    [(NSBrowser*)_self setColumnResizingType:columnResizingType];
}

// method '-[NSBrowser setColumnsAutosaveName:]'
void env___IM_NSBrowser_setColumnsAutosaveName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(NSBrowser*)_self setColumnsAutosaveName:_t1];
}

// method '-[NSBrowser setDelegate:]'
void env___IM_NSBrowser_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSBrowser*)_self setDelegate:_t1];
}

// method '-[NSBrowser setDoubleAction:]'
void env___IM_NSBrowser_setDoubleAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSBrowser*)_self setDoubleAction:_t1];
}

// method '-[NSBrowser setHasHorizontalScroller:]'
void env___IM_NSBrowser_setHasHorizontalScroller_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setHasHorizontalScroller:flag];
}

// method '-[NSBrowser setLastColumn:]'
void env___IM_NSBrowser_setLastColumn_C(void *_instance, U32 _self, U32 column) {
    [(NSBrowser*)_self setLastColumn:column];
}

// method '-[NSBrowser setMatrixClass:]'
void env___IM_NSBrowser_setMatrixClass_C(void *_instance, U32 _self, U32 factoryIdPointer) {
    Class _t1 = (Class)factoryIdPointer;
    [(NSBrowser*)_self setMatrixClass:_t1];
}

// method '-[NSBrowser setMaxVisibleColumns:]'
void env___IM_NSBrowser_setMaxVisibleColumns_C(void *_instance, U32 _self, U32 columnCount) {
    [(NSBrowser*)_self setMaxVisibleColumns:columnCount];
}

// method '-[NSBrowser setMinColumnWidth:]'
void env___IM_NSBrowser_setMinColumnWidth_C(void *_instance, U32 _self, F32 columnWidth) {
    [(NSBrowser*)_self setMinColumnWidth:columnWidth];
}

// method '-[NSBrowser setPath:]'
U32 env___IM_NSBrowser_setPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSBrowser*)_self setPath:_t1];
    return (U32)_result;
}

// method '-[NSBrowser setPathSeparator:]'
void env___IM_NSBrowser_setPathSeparator_C(void *_instance, U32 _self, U32 newStringPointer) {
    id _t1 = (id)newStringPointer;
    [(NSBrowser*)_self setPathSeparator:_t1];
}

// method '-[NSBrowser setPrefersAllColumnUserResizing:]'
void env___IM_NSBrowser_setPrefersAllColumnUserResizing_C(void *_instance, U32 _self, U32 prefersAllColumnResizing) {
    [(NSBrowser*)_self setPrefersAllColumnUserResizing:prefersAllColumnResizing];
}

// method '-[NSBrowser setReusesColumns:]'
void env___IM_NSBrowser_setReusesColumns_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setReusesColumns:flag];
}

// method '-[NSBrowser setSendsActionOnArrowKeys:]'
void env___IM_NSBrowser_setSendsActionOnArrowKeys_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setSendsActionOnArrowKeys:flag];
}

// method '-[NSBrowser setSeparatesColumns:]'
void env___IM_NSBrowser_setSeparatesColumns_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setSeparatesColumns:flag];
}

// method '-[NSBrowser setTakesTitleFromPreviousColumn:]'
void env___IM_NSBrowser_setTakesTitleFromPreviousColumn_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setTakesTitleFromPreviousColumn:flag];
}

// method '-[NSBrowser setTitle:ofColumn:]'
void env___IM_NSBrowser_setTitle_CofColumn_C(void *_instance, U32 _self, U32 aStringPointer, U32 column) {
    id _t1 = (id)aStringPointer;
    [(NSBrowser*)_self setTitle:_t1 ofColumn:column];
}

// method '-[NSBrowser setTitled:]'
void env___IM_NSBrowser_setTitled_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowser*)_self setTitled:flag];
}

// method '-[NSBrowser setWidth:ofColumn:]'
void env___IM_NSBrowser_setWidth_CofColumn_C(void *_instance, U32 _self, F32 columnWidth, U32 columnIndex) {
    [(NSBrowser*)_self setWidth:columnWidth ofColumn:columnIndex];
}

// method '-[NSBrowser takesTitleFromPreviousColumn]'
U32 env___IM_NSBrowser_takesTitleFromPreviousColumn(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowser*)_self takesTitleFromPreviousColumn];
    return (U32)_result;
}

// method '-[NSBrowser tile]'
void env___IM_NSBrowser_tile(void *_instance, U32 _self) {
    [(NSBrowser*)_self tile];
}

// method '-[NSBrowser titleFrameOfColumn:]'
void env___IM_NSBrowser_titleFrameOfColumn_C(void *_instance, U32 _resultIndirect, U32 _self, U32 column) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSBrowser*)_self titleFrameOfColumn:column];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSBrowser titleHeight]'
F32 env___IM_NSBrowser_titleHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSBrowser*)_self titleHeight];
    return (F32)_result;
}

// method '-[NSBrowser titleOfColumn:]'
U32 env___IM_NSBrowser_titleOfColumn_C(void *_instance, U32 _self, U32 column) {
    id _result = (id)[(NSBrowser*)_self titleOfColumn:column];
    return (U32)_result;
}

// method '-[NSBrowser updateScroller]'
void env___IM_NSBrowser_updateScroller(void *_instance, U32 _self) {
    [(NSBrowser*)_self updateScroller];
}

// method '-[NSBrowser validateVisibleColumns]'
void env___IM_NSBrowser_validateVisibleColumns(void *_instance, U32 _self) {
    [(NSBrowser*)_self validateVisibleColumns];
}

// method '-[NSBrowser widthOfColumn:]'
F32 env___IM_NSBrowser_widthOfColumn_C(void *_instance, U32 _self, U32 column) {
    float _result = (float)[(NSBrowser*)_self widthOfColumn:column];
    return (F32)_result;
}

// method '-[NSBrowserCell alternateImage]'
U32 env___IM_NSBrowserCell_alternateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowserCell*)_self alternateImage];
    return (U32)_result;
}

// method '+[NSBrowserCell branchImage]'
U32 env___CM_NSBrowserCell_branchImage(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class branchImage];
    return (U32)_result;
}

// method '-[NSBrowserCell highlightColorInView:]'
U32 env___IM_NSBrowserCell_highlightColorInView_C(void *_instance, U32 _self, U32 controlViewPointer) {
    id _t1 = (id)controlViewPointer;
    id _result = (id)[(NSBrowserCell*)_self highlightColorInView:_t1];
    return (U32)_result;
}

// method '+[NSBrowserCell highlightedBranchImage]'
U32 env___CM_NSBrowserCell_highlightedBranchImage(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class highlightedBranchImage];
    return (U32)_result;
}

// method '-[NSBrowserCell image]'
U32 env___IM_NSBrowserCell_image(void *_instance, U32 _self) {
    id _result = (id)[(NSBrowserCell*)_self image];
    return (U32)_result;
}

// method '-[NSBrowserCell isLeaf]'
U32 env___IM_NSBrowserCell_isLeaf(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowserCell*)_self isLeaf];
    return (U32)_result;
}

// method '-[NSBrowserCell isLoaded]'
U32 env___IM_NSBrowserCell_isLoaded(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSBrowserCell*)_self isLoaded];
    return (U32)_result;
}

// method '-[NSBrowserCell reset]'
void env___IM_NSBrowserCell_reset(void *_instance, U32 _self) {
    [(NSBrowserCell*)_self reset];
}

// method '-[NSBrowserCell set]'
void env___IM_NSBrowserCell_set(void *_instance, U32 _self) {
    [(NSBrowserCell*)_self set];
}

// method '-[NSBrowserCell setAlternateImage:]'
void env___IM_NSBrowserCell_setAlternateImage_C(void *_instance, U32 _self, U32 newAltImagePointer) {
    id _t1 = (id)newAltImagePointer;
    [(NSBrowserCell*)_self setAlternateImage:_t1];
}

// method '-[NSBrowserCell setImage:]'
void env___IM_NSBrowserCell_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSBrowserCell*)_self setImage:_t1];
}

// method '-[NSBrowserCell setLeaf:]'
void env___IM_NSBrowserCell_setLeaf_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowserCell*)_self setLeaf:flag];
}

// method '-[NSBrowserCell setLoaded:]'
void env___IM_NSBrowserCell_setLoaded_C(void *_instance, U32 _self, U32 flag) {
    [(NSBrowserCell*)_self setLoaded:flag];
}

// method '-[NSBundle contextHelpForKey:]'
U32 env___IM_NSBundle_contextHelpForKey_C(void *_instance, U32 _self, U32 keyPointer) {
    id _t1 = (id)keyPointer;
    id _result = (id)[(NSBundle*)_self contextHelpForKey:_t1];
    return (U32)_result;
}

// method '+[NSBundle loadNibFile:externalNameTable:withZone:]'
U32 env___CM_NSBundle_loadNibFile_CexternalNameTable_CwithZone_C(void *_instance, U32 _class, U32 fileNamePointer, U32 contextPointer, U32 zonePointer) {
    id _t1 = (id)fileNamePointer;
    id _t2 = (id)contextPointer;
    struct _NSZone* _t3 = (struct _NSZone*)zonePointer;
    BOOL _result = (BOOL)[(Class)_class loadNibFile:_t1 externalNameTable:_t2 withZone:_t3];
    return (U32)_result;
}

// method '+[NSBundle loadNibNamed:owner:]'
U32 env___CM_NSBundle_loadNibNamed_Cowner_C(void *_instance, U32 _class, U32 nibNamePointer, U32 ownerPointer) {
    id _t1 = (id)nibNamePointer;
    id _t2 = (id)ownerPointer;
    BOOL _result = (BOOL)[(Class)_class loadNibNamed:_t1 owner:_t2];
    return (U32)_result;
}

// method '-[NSBundle pathForImageResource:]'
U32 env___IM_NSBundle_pathForImageResource_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(NSBundle*)_self pathForImageResource:_t1];
    return (U32)_result;
}

// method '-[NSBundle pathForSoundResource:]'
U32 env___IM_NSBundle_pathForSoundResource_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(NSBundle*)_self pathForSoundResource:_t1];
    return (U32)_result;
}

// method '-[NSButton allowsMixedState]'
U32 env___IM_NSButton_allowsMixedState(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButton*)_self allowsMixedState];
    return (U32)_result;
}

// method '-[NSButton alternateImage]'
U32 env___IM_NSButton_alternateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self alternateImage];
    return (U32)_result;
}

// method '-[NSButton alternateTitle]'
U32 env___IM_NSButton_alternateTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self alternateTitle];
    return (U32)_result;
}

// method '-[NSButton attributedAlternateTitle]'
U32 env___IM_NSButton_attributedAlternateTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self attributedAlternateTitle];
    return (U32)_result;
}

// method '-[NSButton attributedTitle]'
U32 env___IM_NSButton_attributedTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self attributedTitle];
    return (U32)_result;
}

// method '-[NSButton bezelStyle]'
U32 env___IM_NSButton_bezelStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSButton*)_self bezelStyle];
    return (U32)_result;
}

// method '-[NSButton getPeriodicDelay:interval:]'
void env___IM_NSButton_getPeriodicDelay_Cinterval_C(void *_instance, U32 _self, U32 delayPointer, U32 intervalPointer) {
    float* _t1 = (float*)delayPointer;
    float* _t2 = (float*)intervalPointer;
    [(NSButton*)_self getPeriodicDelay:_t1 interval:_t2];
}

// method '-[NSButton highlight:]'
void env___IM_NSButton_highlight_C(void *_instance, U32 _self, U32 flag) {
    [(NSButton*)_self highlight:flag];
}

// method '-[NSButton image]'
U32 env___IM_NSButton_image(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self image];
    return (U32)_result;
}

// method '-[NSButton imagePosition]'
U32 env___IM_NSButton_imagePosition(void *_instance, U32 _self) {
    int _result = (int)[(NSButton*)_self imagePosition];
    return (U32)_result;
}

// method '-[NSButton isBordered]'
U32 env___IM_NSButton_isBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButton*)_self isBordered];
    return (U32)_result;
}

// method '-[NSButton isTransparent]'
U32 env___IM_NSButton_isTransparent(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButton*)_self isTransparent];
    return (U32)_result;
}

// method '-[NSButton keyEquivalent]'
U32 env___IM_NSButton_keyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self keyEquivalent];
    return (U32)_result;
}

// method '-[NSButton keyEquivalentModifierMask]'
U32 env___IM_NSButton_keyEquivalentModifierMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSButton*)_self keyEquivalentModifierMask];
    return (U32)_result;
}

// method '-[NSButton performKeyEquivalent:]'
U32 env___IM_NSButton_performKeyEquivalent_C(void *_instance, U32 _self, U32 keyPointer) {
    id _t1 = (id)keyPointer;
    BOOL _result = (BOOL)[(NSButton*)_self performKeyEquivalent:_t1];
    return (U32)_result;
}

// method '-[NSButton setAllowsMixedState:]'
void env___IM_NSButton_setAllowsMixedState_C(void *_instance, U32 _self, U32 flag) {
    [(NSButton*)_self setAllowsMixedState:flag];
}

// method '-[NSButton setAlternateImage:]'
void env___IM_NSButton_setAlternateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSButton*)_self setAlternateImage:_t1];
}

// method '-[NSButton setAlternateTitle:]'
void env___IM_NSButton_setAlternateTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSButton*)_self setAlternateTitle:_t1];
}

// method '-[NSButton setAttributedAlternateTitle:]'
void env___IM_NSButton_setAttributedAlternateTitle_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSButton*)_self setAttributedAlternateTitle:_t1];
}

// method '-[NSButton setAttributedTitle:]'
void env___IM_NSButton_setAttributedTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSButton*)_self setAttributedTitle:_t1];
}

// method '-[NSButton setBezelStyle:]'
void env___IM_NSButton_setBezelStyle_C(void *_instance, U32 _self, U32 bezelStyle) {
    [(NSButton*)_self setBezelStyle:bezelStyle];
}

// method '-[NSButton setBordered:]'
void env___IM_NSButton_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSButton*)_self setBordered:flag];
}

// method '-[NSButton setButtonType:]'
void env___IM_NSButton_setButtonType_C(void *_instance, U32 _self, U32 aType) {
    [(NSButton*)_self setButtonType:aType];
}

// method '-[NSButton setImage:]'
void env___IM_NSButton_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSButton*)_self setImage:_t1];
}

// method '-[NSButton setImagePosition:]'
void env___IM_NSButton_setImagePosition_C(void *_instance, U32 _self, U32 aPosition) {
    [(NSButton*)_self setImagePosition:aPosition];
}

// method '-[NSButton setKeyEquivalent:]'
void env___IM_NSButton_setKeyEquivalent_C(void *_instance, U32 _self, U32 charCodePointer) {
    id _t1 = (id)charCodePointer;
    [(NSButton*)_self setKeyEquivalent:_t1];
}

// method '-[NSButton setKeyEquivalentModifierMask:]'
void env___IM_NSButton_setKeyEquivalentModifierMask_C(void *_instance, U32 _self, U32 mask) {
    [(NSButton*)_self setKeyEquivalentModifierMask:mask];
}

// method '-[NSButton setNextState]'
void env___IM_NSButton_setNextState(void *_instance, U32 _self) {
    [(NSButton*)_self setNextState];
}

// method '-[NSButton setPeriodicDelay:interval:]'
void env___IM_NSButton_setPeriodicDelay_Cinterval_C(void *_instance, U32 _self, F32 delay, F32 interval) {
    [(NSButton*)_self setPeriodicDelay:delay interval:interval];
}

// method '-[NSButton setShowsBorderOnlyWhileMouseInside:]'
void env___IM_NSButton_setShowsBorderOnlyWhileMouseInside_C(void *_instance, U32 _self, U32 show) {
    [(NSButton*)_self setShowsBorderOnlyWhileMouseInside:show];
}

// method '-[NSButton setSound:]'
void env___IM_NSButton_setSound_C(void *_instance, U32 _self, U32 aSoundPointer) {
    id _t1 = (id)aSoundPointer;
    [(NSButton*)_self setSound:_t1];
}

// method '-[NSButton setState:]'
void env___IM_NSButton_setState_C(void *_instance, U32 _self, U32 value) {
    [(NSButton*)_self setState:value];
}

// method '-[NSButton setTitle:]'
void env___IM_NSButton_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSButton*)_self setTitle:_t1];
}

// method '-[NSButton setTitleWithMnemonic:]'
void env___IM_NSButton_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSButton*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSButton setTransparent:]'
void env___IM_NSButton_setTransparent_C(void *_instance, U32 _self, U32 flag) {
    [(NSButton*)_self setTransparent:flag];
}

// method '-[NSButton showsBorderOnlyWhileMouseInside]'
U32 env___IM_NSButton_showsBorderOnlyWhileMouseInside(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButton*)_self showsBorderOnlyWhileMouseInside];
    return (U32)_result;
}

// method '-[NSButton sound]'
U32 env___IM_NSButton_sound(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self sound];
    return (U32)_result;
}

// method '-[NSButton state]'
U32 env___IM_NSButton_state(void *_instance, U32 _self) {
    int _result = (int)[(NSButton*)_self state];
    return (U32)_result;
}

// method '-[NSButton title]'
U32 env___IM_NSButton_title(void *_instance, U32 _self) {
    id _result = (id)[(NSButton*)_self title];
    return (U32)_result;
}

// method '-[NSButtonCell alternateImage]'
U32 env___IM_NSButtonCell_alternateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self alternateImage];
    return (U32)_result;
}

// method '-[NSButtonCell alternateMnemonic]'
U32 env___IM_NSButtonCell_alternateMnemonic(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self alternateMnemonic];
    return (U32)_result;
}

// method '-[NSButtonCell alternateMnemonicLocation]'
U32 env___IM_NSButtonCell_alternateMnemonicLocation(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSButtonCell*)_self alternateMnemonicLocation];
    return (U32)_result;
}

// method '-[NSButtonCell alternateTitle]'
U32 env___IM_NSButtonCell_alternateTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self alternateTitle];
    return (U32)_result;
}

// method '-[NSButtonCell attributedAlternateTitle]'
U32 env___IM_NSButtonCell_attributedAlternateTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self attributedAlternateTitle];
    return (U32)_result;
}

// method '-[NSButtonCell attributedTitle]'
U32 env___IM_NSButtonCell_attributedTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self attributedTitle];
    return (U32)_result;
}

// method '-[NSButtonCell backgroundColor]'
U32 env___IM_NSButtonCell_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSButtonCell bezelStyle]'
U32 env___IM_NSButtonCell_bezelStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSButtonCell*)_self bezelStyle];
    return (U32)_result;
}

// method '-[NSButtonCell drawBezelWithFrame:inView:]'
void env___IM_NSButtonCell_drawBezelWithFrame_CinView_C(void *_instance, U32 _self, U32 frameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSButtonCell*)_self drawBezelWithFrame:_t1 inView:_t2];
}

// method '-[NSButtonCell drawImage:withFrame:inView:]'
void env___IM_NSButtonCell_drawImage_CwithFrame_CinView_C(void *_instance, U32 _self, U32 imagePointer, U32 frameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imagePointer;
    NSRect _t2 = *(NSRect*)(_mem->data + frameIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSButtonCell*)_self drawImage:_t1 withFrame:_t2 inView:_t3];
}

// method '-[NSButtonCell drawTitle:withFrame:inView:]'
void env___IM_NSButtonCell_drawTitle_CwithFrame_CinView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 titlePointer, U32 frameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)titlePointer;
    NSRect _t2 = *(NSRect*)(_mem->data + frameIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSRect _result = (NSRect)[(NSButtonCell*)_self drawTitle:_t1 withFrame:_t2 inView:_t3];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSButtonCell getPeriodicDelay:interval:]'
void env___IM_NSButtonCell_getPeriodicDelay_Cinterval_C(void *_instance, U32 _self, U32 delayPointer, U32 intervalPointer) {
    float* _t1 = (float*)delayPointer;
    float* _t2 = (float*)intervalPointer;
    [(NSButtonCell*)_self getPeriodicDelay:_t1 interval:_t2];
}

// method '-[NSButtonCell gradientType]'
U32 env___IM_NSButtonCell_gradientType(void *_instance, U32 _self) {
    int _result = (int)[(NSButtonCell*)_self gradientType];
    return (U32)_result;
}

// method '-[NSButtonCell highlightsBy]'
U32 env___IM_NSButtonCell_highlightsBy(void *_instance, U32 _self) {
    int _result = (int)[(NSButtonCell*)_self highlightsBy];
    return (U32)_result;
}

// method '-[NSButtonCell imageDimsWhenDisabled]'
U32 env___IM_NSButtonCell_imageDimsWhenDisabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButtonCell*)_self imageDimsWhenDisabled];
    return (U32)_result;
}

// method '-[NSButtonCell imagePosition]'
U32 env___IM_NSButtonCell_imagePosition(void *_instance, U32 _self) {
    int _result = (int)[(NSButtonCell*)_self imagePosition];
    return (U32)_result;
}

// method '-[NSButtonCell isOpaque]'
U32 env___IM_NSButtonCell_isOpaque(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButtonCell*)_self isOpaque];
    return (U32)_result;
}

// method '-[NSButtonCell isTransparent]'
U32 env___IM_NSButtonCell_isTransparent(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButtonCell*)_self isTransparent];
    return (U32)_result;
}

// method '-[NSButtonCell keyEquivalent]'
U32 env___IM_NSButtonCell_keyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self keyEquivalent];
    return (U32)_result;
}

// method '-[NSButtonCell keyEquivalentFont]'
U32 env___IM_NSButtonCell_keyEquivalentFont(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self keyEquivalentFont];
    return (U32)_result;
}

// method '-[NSButtonCell keyEquivalentModifierMask]'
U32 env___IM_NSButtonCell_keyEquivalentModifierMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSButtonCell*)_self keyEquivalentModifierMask];
    return (U32)_result;
}

// method '-[NSButtonCell mouseEntered:]'
void env___IM_NSButtonCell_mouseEntered_C(void *_instance, U32 _self, U32 eventPointer) {
    id _t1 = (id)eventPointer;
    [(NSButtonCell*)_self mouseEntered:_t1];
}

// method '-[NSButtonCell mouseExited:]'
void env___IM_NSButtonCell_mouseExited_C(void *_instance, U32 _self, U32 eventPointer) {
    id _t1 = (id)eventPointer;
    [(NSButtonCell*)_self mouseExited:_t1];
}

// method '-[NSButtonCell performClick:]'
void env___IM_NSButtonCell_performClick_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSButtonCell*)_self performClick:_t1];
}

// method '-[NSButtonCell setAlternateImage:]'
void env___IM_NSButtonCell_setAlternateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSButtonCell*)_self setAlternateImage:_t1];
}

// method '-[NSButtonCell setAlternateMnemonicLocation:]'
void env___IM_NSButtonCell_setAlternateMnemonicLocation_C(void *_instance, U32 _self, U32 location) {
    [(NSButtonCell*)_self setAlternateMnemonicLocation:location];
}

// method '-[NSButtonCell setAlternateTitle:]'
void env___IM_NSButtonCell_setAlternateTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSButtonCell*)_self setAlternateTitle:_t1];
}

// method '-[NSButtonCell setAlternateTitleWithMnemonic:]'
void env___IM_NSButtonCell_setAlternateTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSButtonCell*)_self setAlternateTitleWithMnemonic:_t1];
}

// method '-[NSButtonCell setAttributedAlternateTitle:]'
void env___IM_NSButtonCell_setAttributedAlternateTitle_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSButtonCell*)_self setAttributedAlternateTitle:_t1];
}

// method '-[NSButtonCell setAttributedTitle:]'
void env___IM_NSButtonCell_setAttributedTitle_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSButtonCell*)_self setAttributedTitle:_t1];
}

// method '-[NSButtonCell setBackgroundColor:]'
void env___IM_NSButtonCell_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSButtonCell*)_self setBackgroundColor:_t1];
}

// method '-[NSButtonCell setBezelStyle:]'
void env___IM_NSButtonCell_setBezelStyle_C(void *_instance, U32 _self, U32 bezelStyle) {
    [(NSButtonCell*)_self setBezelStyle:bezelStyle];
}

// method '-[NSButtonCell setButtonType:]'
void env___IM_NSButtonCell_setButtonType_C(void *_instance, U32 _self, U32 aType) {
    [(NSButtonCell*)_self setButtonType:aType];
}

// method '-[NSButtonCell setFont:]'
void env___IM_NSButtonCell_setFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSButtonCell*)_self setFont:_t1];
}

// method '-[NSButtonCell setGradientType:]'
void env___IM_NSButtonCell_setGradientType_C(void *_instance, U32 _self, U32 type) {
    [(NSButtonCell*)_self setGradientType:type];
}

// method '-[NSButtonCell setHighlightsBy:]'
void env___IM_NSButtonCell_setHighlightsBy_C(void *_instance, U32 _self, U32 aType) {
    [(NSButtonCell*)_self setHighlightsBy:aType];
}

// method '-[NSButtonCell setImageDimsWhenDisabled:]'
void env___IM_NSButtonCell_setImageDimsWhenDisabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSButtonCell*)_self setImageDimsWhenDisabled:flag];
}

// method '-[NSButtonCell setImagePosition:]'
void env___IM_NSButtonCell_setImagePosition_C(void *_instance, U32 _self, U32 aPosition) {
    [(NSButtonCell*)_self setImagePosition:aPosition];
}

// method '-[NSButtonCell setKeyEquivalent:]'
void env___IM_NSButtonCell_setKeyEquivalent_C(void *_instance, U32 _self, U32 aKeyEquivalentPointer) {
    id _t1 = (id)aKeyEquivalentPointer;
    [(NSButtonCell*)_self setKeyEquivalent:_t1];
}

// method '-[NSButtonCell setKeyEquivalentFont:]'
void env___IM_NSButtonCell_setKeyEquivalentFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSButtonCell*)_self setKeyEquivalentFont:_t1];
}

// method '-[NSButtonCell setKeyEquivalentFont:size:]'
void env___IM_NSButtonCell_setKeyEquivalentFont_Csize_C(void *_instance, U32 _self, U32 fontNamePointer, F32 fontSize) {
    id _t1 = (id)fontNamePointer;
    [(NSButtonCell*)_self setKeyEquivalentFont:_t1 size:fontSize];
}

// method '-[NSButtonCell setKeyEquivalentModifierMask:]'
void env___IM_NSButtonCell_setKeyEquivalentModifierMask_C(void *_instance, U32 _self, U32 mask) {
    [(NSButtonCell*)_self setKeyEquivalentModifierMask:mask];
}

// method '-[NSButtonCell setPeriodicDelay:interval:]'
void env___IM_NSButtonCell_setPeriodicDelay_Cinterval_C(void *_instance, U32 _self, F32 delay, F32 interval) {
    [(NSButtonCell*)_self setPeriodicDelay:delay interval:interval];
}

// method '-[NSButtonCell setShowsBorderOnlyWhileMouseInside:]'
void env___IM_NSButtonCell_setShowsBorderOnlyWhileMouseInside_C(void *_instance, U32 _self, U32 show) {
    [(NSButtonCell*)_self setShowsBorderOnlyWhileMouseInside:show];
}

// method '-[NSButtonCell setShowsStateBy:]'
void env___IM_NSButtonCell_setShowsStateBy_C(void *_instance, U32 _self, U32 aType) {
    [(NSButtonCell*)_self setShowsStateBy:aType];
}

// method '-[NSButtonCell setSound:]'
void env___IM_NSButtonCell_setSound_C(void *_instance, U32 _self, U32 aSoundPointer) {
    id _t1 = (id)aSoundPointer;
    [(NSButtonCell*)_self setSound:_t1];
}

// method '-[NSButtonCell setTitle:]'
void env___IM_NSButtonCell_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSButtonCell*)_self setTitle:_t1];
}

// method '-[NSButtonCell setTitleWithMnemonic:]'
void env___IM_NSButtonCell_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSButtonCell*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSButtonCell setTransparent:]'
void env___IM_NSButtonCell_setTransparent_C(void *_instance, U32 _self, U32 flag) {
    [(NSButtonCell*)_self setTransparent:flag];
}

// method '-[NSButtonCell showsBorderOnlyWhileMouseInside]'
U32 env___IM_NSButtonCell_showsBorderOnlyWhileMouseInside(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSButtonCell*)_self showsBorderOnlyWhileMouseInside];
    return (U32)_result;
}

// method '-[NSButtonCell showsStateBy]'
U32 env___IM_NSButtonCell_showsStateBy(void *_instance, U32 _self) {
    int _result = (int)[(NSButtonCell*)_self showsStateBy];
    return (U32)_result;
}

// method '-[NSButtonCell sound]'
U32 env___IM_NSButtonCell_sound(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self sound];
    return (U32)_result;
}

// method '-[NSButtonCell title]'
U32 env___IM_NSButtonCell_title(void *_instance, U32 _self) {
    id _result = (id)[(NSButtonCell*)_self title];
    return (U32)_result;
}

// method '-[NSCIImageRep CIImage]'
U32 env___IM_NSCIImageRep_CIImage(void *_instance, U32 _self) {
    id _result = (id)[(NSCIImageRep*)_self CIImage];
    return (U32)_result;
}

// method '+[NSCIImageRep imageRepWithCIImage:]'
U32 env___CM_NSCIImageRep_imageRepWithCIImage_C(void *_instance, U32 _class, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    id _result = (id)[(Class)_class imageRepWithCIImage:_t1];
    return (U32)_result;
}

// method '-[NSCIImageRep initWithCIImage:]'
U32 env___IM_NSCIImageRep_initWithCIImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    id _result = (id)[(NSCIImageRep*)_self initWithCIImage:_t1];
    return (U32)_result;
}

// method '-[NSCachedImageRep initWithSize:depth:separate:alpha:]'
U32 env___IM_NSCachedImageRep_initWithSize_Cdepth_Cseparate_Calpha_C(void *_instance, U32 _self, U32 sizeIndirect, U32 depth, U32 flag, U32 alpha) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    id _result = (id)[(NSCachedImageRep*)_self initWithSize:_t1 depth:depth separate:flag alpha:alpha];
    return (U32)_result;
}

// method '-[NSCachedImageRep initWithWindow:rect:]'
U32 env___IM_NSCachedImageRep_initWithWindow_Crect_C(void *_instance, U32 _self, U32 winPointer, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)winPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(NSCachedImageRep*)_self initWithWindow:_t1 rect:_t2];
    return (U32)_result;
}

// method '-[NSCachedImageRep rect]'
void env___IM_NSCachedImageRep_rect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSCachedImageRep*)_self rect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCachedImageRep window]'
U32 env___IM_NSCachedImageRep_window(void *_instance, U32 _self) {
    id _result = (id)[(NSCachedImageRep*)_self window];
    return (U32)_result;
}

// method '-[NSCell acceptsFirstResponder]'
U32 env___IM_NSCell_acceptsFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self acceptsFirstResponder];
    return (U32)_result;
}

// method '-[NSCell action]'
U32 env___IM_NSCell_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSCell*)_self action];
    return (U32)_result;
}

// method '-[NSCell alignment]'
U32 env___IM_NSCell_alignment(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self alignment];
    return (U32)_result;
}

// method '-[NSCell allowsEditingTextAttributes]'
U32 env___IM_NSCell_allowsEditingTextAttributes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self allowsEditingTextAttributes];
    return (U32)_result;
}

// method '-[NSCell allowsMixedState]'
U32 env___IM_NSCell_allowsMixedState(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self allowsMixedState];
    return (U32)_result;
}

// method '-[NSCell allowsUndo]'
U32 env___IM_NSCell_allowsUndo(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self allowsUndo];
    return (U32)_result;
}

// method '-[NSCell attributedStringValue]'
U32 env___IM_NSCell_attributedStringValue(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self attributedStringValue];
    return (U32)_result;
}

// method '-[NSCell baseWritingDirection]'
U32 env___IM_NSCell_baseWritingDirection(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self baseWritingDirection];
    return (U32)_result;
}

// method '-[NSCell calcDrawInfo:]'
void env___IM_NSCell_calcDrawInfo_C(void *_instance, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self calcDrawInfo:_t1];
}

// method '-[NSCell cellAttribute:]'
U32 env___IM_NSCell_cellAttribute_C(void *_instance, U32 _self, U32 aParameter) {
    int _result = (int)[(NSCell*)_self cellAttribute:aParameter];
    return (U32)_result;
}

// method '-[NSCell cellSize]'
void env___IM_NSCell_cellSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSCell*)_self cellSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCell cellSizeForBounds:]'
void env___IM_NSCell_cellSizeForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSSize _result = (NSSize)[(NSCell*)_self cellSizeForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCell compare:]'
U32 env___IM_NSCell_compare_C(void *_instance, U32 _self, U32 otherCellPointer) {
    id _t1 = (id)otherCellPointer;
    int _result = (int)[(NSCell*)_self compare:_t1];
    return (U32)_result;
}

// method '-[NSCell continueTracking:at:inView:]'
U32 env___IM_NSCell_continueTracking_Cat_CinView_C(void *_instance, U32 _self, U32 lastPointIndirect, U32 currentPointIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + lastPointIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + currentPointIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    BOOL _result = (BOOL)[(NSCell*)_self continueTracking:_t1 at:_t2 inView:_t3];
    return (U32)_result;
}

// method '-[NSCell controlSize]'
U32 env___IM_NSCell_controlSize(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self controlSize];
    return (U32)_result;
}

// method '-[NSCell controlTint]'
U32 env___IM_NSCell_controlTint(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self controlTint];
    return (U32)_result;
}

// method '-[NSCell controlView]'
U32 env___IM_NSCell_controlView(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self controlView];
    return (U32)_result;
}

// method '+[NSCell defaultFocusRingType]'
U32 env___CM_NSCell_defaultFocusRingType(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultFocusRingType];
    return (U32)_result;
}

// method '+[NSCell defaultMenu]'
U32 env___CM_NSCell_defaultMenu(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultMenu];
    return (U32)_result;
}

// method '-[NSCell doubleValue]'
F64 env___IM_NSCell_doubleValue(void *_instance, U32 _self) {
    double _result = (double)[(NSCell*)_self doubleValue];
    return (F64)_result;
}

// method '-[NSCell drawInteriorWithFrame:inView:]'
void env___IM_NSCell_drawInteriorWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self drawInteriorWithFrame:_t1 inView:_t2];
}

// method '-[NSCell drawWithFrame:inView:]'
void env___IM_NSCell_drawWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self drawWithFrame:_t1 inView:_t2];
}

// method '-[NSCell drawingRectForBounds:]'
void env___IM_NSCell_drawingRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 theRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + theRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSCell*)_self drawingRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCell editWithFrame:inView:editor:delegate:event:]'
void env___IM_NSCell_editWithFrame_CinView_Ceditor_Cdelegate_Cevent_C(void *_instance, U32 _self, U32 aRectIndirect, U32 controlViewPointer, U32 textObjPointer, U32 anObjectPointer, U32 theEventPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)controlViewPointer;
    id _t3 = (id)textObjPointer;
    id _t4 = (id)anObjectPointer;
    id _t5 = (id)theEventPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self editWithFrame:_t1 inView:_t2 editor:_t3 delegate:_t4 event:_t5];
}

// method '-[NSCell endEditing:]'
void env___IM_NSCell_endEditing_C(void *_instance, U32 _self, U32 textObjPointer) {
    id _t1 = (id)textObjPointer;
    [(NSCell*)_self endEditing:_t1];
}

// method '-[NSCell entryType]'
U32 env___IM_NSCell_entryType(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self entryType];
    return (U32)_result;
}

// method '-[NSCell floatValue]'
F32 env___IM_NSCell_floatValue(void *_instance, U32 _self) {
    float _result = (float)[(NSCell*)_self floatValue];
    return (F32)_result;
}

// method '-[NSCell focusRingType]'
U32 env___IM_NSCell_focusRingType(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self focusRingType];
    return (U32)_result;
}

// method '-[NSCell font]'
U32 env___IM_NSCell_font(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self font];
    return (U32)_result;
}

// method '-[NSCell formatter]'
U32 env___IM_NSCell_formatter(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self formatter];
    return (U32)_result;
}

// method '-[NSCell getPeriodicDelay:interval:]'
void env___IM_NSCell_getPeriodicDelay_Cinterval_C(void *_instance, U32 _self, U32 delayPointer, U32 intervalPointer) {
    float* _t1 = (float*)delayPointer;
    float* _t2 = (float*)intervalPointer;
    [(NSCell*)_self getPeriodicDelay:_t1 interval:_t2];
}

// method '-[NSCell hasValidObjectValue]'
U32 env___IM_NSCell_hasValidObjectValue(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self hasValidObjectValue];
    return (U32)_result;
}

// method '-[NSCell highlight:withFrame:inView:]'
void env___IM_NSCell_highlight_CwithFrame_CinView_C(void *_instance, U32 _self, U32 flag, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self highlight:flag withFrame:_t1 inView:_t2];
}

// method '-[NSCell highlightColorWithFrame:inView:]'
U32 env___IM_NSCell_highlightColorWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSCell*)_self highlightColorWithFrame:_t1 inView:_t2];
    return (U32)_result;
}

// method '-[NSCell image]'
U32 env___IM_NSCell_image(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self image];
    return (U32)_result;
}

// method '-[NSCell imageRectForBounds:]'
void env___IM_NSCell_imageRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 theRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + theRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSCell*)_self imageRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCell importsGraphics]'
U32 env___IM_NSCell_importsGraphics(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self importsGraphics];
    return (U32)_result;
}

// method '-[NSCell initImageCell:]'
U32 env___IM_NSCell_initImageCell_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    id _result = (id)[(NSCell*)_self initImageCell:_t1];
    return (U32)_result;
}

// method '-[NSCell initTextCell:]'
U32 env___IM_NSCell_initTextCell_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    id _result = (id)[(NSCell*)_self initTextCell:_t1];
    return (U32)_result;
}

// method '-[NSCell intValue]'
U32 env___IM_NSCell_intValue(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self intValue];
    return (U32)_result;
}

// method '-[NSCell isBezeled]'
U32 env___IM_NSCell_isBezeled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isBezeled];
    return (U32)_result;
}

// method '-[NSCell isBordered]'
U32 env___IM_NSCell_isBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isBordered];
    return (U32)_result;
}

// method '-[NSCell isContinuous]'
U32 env___IM_NSCell_isContinuous(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isContinuous];
    return (U32)_result;
}

// method '-[NSCell isEditable]'
U32 env___IM_NSCell_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isEditable];
    return (U32)_result;
}

// method '-[NSCell isEnabled]'
U32 env___IM_NSCell_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSCell isEntryAcceptable:]'
U32 env___IM_NSCell_isEntryAcceptable_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    BOOL _result = (BOOL)[(NSCell*)_self isEntryAcceptable:_t1];
    return (U32)_result;
}

// method '-[NSCell isHighlighted]'
U32 env___IM_NSCell_isHighlighted(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isHighlighted];
    return (U32)_result;
}

// method '-[NSCell isOpaque]'
U32 env___IM_NSCell_isOpaque(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isOpaque];
    return (U32)_result;
}

// method '-[NSCell isScrollable]'
U32 env___IM_NSCell_isScrollable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isScrollable];
    return (U32)_result;
}

// method '-[NSCell isSelectable]'
U32 env___IM_NSCell_isSelectable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self isSelectable];
    return (U32)_result;
}

// method '-[NSCell keyEquivalent]'
U32 env___IM_NSCell_keyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self keyEquivalent];
    return (U32)_result;
}

// method '-[NSCell lineBreakMode]'
U32 env___IM_NSCell_lineBreakMode(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self lineBreakMode];
    return (U32)_result;
}

// method '-[NSCell menu]'
U32 env___IM_NSCell_menu(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self menu];
    return (U32)_result;
}

// method '-[NSCell menuForEvent:inRect:ofView:]'
U32 env___IM_NSCell_menuForEvent_CinRect_CofView_C(void *_instance, U32 _self, U32 eventPointer, U32 cellFrameIndirect, U32 viewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)eventPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t3 = (id)viewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(NSCell*)_self menuForEvent:_t1 inRect:_t2 ofView:_t3];
    return (U32)_result;
}

// method '-[NSCell mnemonic]'
U32 env___IM_NSCell_mnemonic(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self mnemonic];
    return (U32)_result;
}

// method '-[NSCell mnemonicLocation]'
U32 env___IM_NSCell_mnemonicLocation(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSCell*)_self mnemonicLocation];
    return (U32)_result;
}

// method '-[NSCell mouseDownFlags]'
U32 env___IM_NSCell_mouseDownFlags(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self mouseDownFlags];
    return (U32)_result;
}

// method '-[NSCell nextState]'
U32 env___IM_NSCell_nextState(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self nextState];
    return (U32)_result;
}

// method '-[NSCell objectValue]'
U32 env___IM_NSCell_objectValue(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self objectValue];
    return (U32)_result;
}

// method '-[NSCell performClick:]'
void env___IM_NSCell_performClick_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSCell*)_self performClick:_t1];
}

// method '+[NSCell prefersTrackingUntilMouseUp]'
U32 env___CM_NSCell_prefersTrackingUntilMouseUp(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class prefersTrackingUntilMouseUp];
    return (U32)_result;
}

// method '-[NSCell refusesFirstResponder]'
U32 env___IM_NSCell_refusesFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self refusesFirstResponder];
    return (U32)_result;
}

// method '-[NSCell representedObject]'
U32 env___IM_NSCell_representedObject(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self representedObject];
    return (U32)_result;
}

// method '-[NSCell resetCursorRect:inView:]'
void env___IM_NSCell_resetCursorRect_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self resetCursorRect:_t1 inView:_t2];
}

// method '-[NSCell selectWithFrame:inView:editor:delegate:start:length:]'
void env___IM_NSCell_selectWithFrame_CinView_Ceditor_Cdelegate_Cstart_Clength_C(void *_instance, U32 _self, U32 aRectIndirect, U32 controlViewPointer, U32 textObjPointer, U32 anObjectPointer, U32 selStart, U32 selLength) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)controlViewPointer;
    id _t3 = (id)textObjPointer;
    id _t4 = (id)anObjectPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSCell*)_self selectWithFrame:_t1 inView:_t2 editor:_t3 delegate:_t4 start:selStart length:selLength];
}

// method '-[NSCell sendActionOn:]'
U32 env___IM_NSCell_sendActionOn_C(void *_instance, U32 _self, U32 mask) {
    int _result = (int)[(NSCell*)_self sendActionOn:mask];
    return (U32)_result;
}

// method '-[NSCell sendsActionOnEndEditing]'
U32 env___IM_NSCell_sendsActionOnEndEditing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self sendsActionOnEndEditing];
    return (U32)_result;
}

// method '-[NSCell setAction:]'
void env___IM_NSCell_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSCell*)_self setAction:_t1];
}

// method '-[NSCell setAlignment:]'
void env___IM_NSCell_setAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSCell*)_self setAlignment:mode];
}

// method '-[NSCell setAllowsEditingTextAttributes:]'
void env___IM_NSCell_setAllowsEditingTextAttributes_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setAllowsEditingTextAttributes:flag];
}

// method '-[NSCell setAllowsMixedState:]'
void env___IM_NSCell_setAllowsMixedState_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setAllowsMixedState:flag];
}

// method '-[NSCell setAllowsUndo:]'
void env___IM_NSCell_setAllowsUndo_C(void *_instance, U32 _self, U32 allowsUndo) {
    [(NSCell*)_self setAllowsUndo:allowsUndo];
}

// method '-[NSCell setAttributedStringValue:]'
void env___IM_NSCell_setAttributedStringValue_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSCell*)_self setAttributedStringValue:_t1];
}

// method '-[NSCell setBaseWritingDirection:]'
void env___IM_NSCell_setBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSCell*)_self setBaseWritingDirection:writingDirection];
}

// method '-[NSCell setBezeled:]'
void env___IM_NSCell_setBezeled_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setBezeled:flag];
}

// method '-[NSCell setBordered:]'
void env___IM_NSCell_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setBordered:flag];
}

// method '-[NSCell setCellAttribute:to:]'
void env___IM_NSCell_setCellAttribute_Cto_C(void *_instance, U32 _self, U32 aParameter, U32 value) {
    [(NSCell*)_self setCellAttribute:aParameter to:value];
}

// method '-[NSCell setContinuous:]'
void env___IM_NSCell_setContinuous_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setContinuous:flag];
}

// method '-[NSCell setControlSize:]'
void env___IM_NSCell_setControlSize_C(void *_instance, U32 _self, U32 size) {
    [(NSCell*)_self setControlSize:size];
}

// method '-[NSCell setControlTint:]'
void env___IM_NSCell_setControlTint_C(void *_instance, U32 _self, U32 controlTint) {
    [(NSCell*)_self setControlTint:controlTint];
}

// method '-[NSCell setControlView:]'
void env___IM_NSCell_setControlView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSCell*)_self setControlView:_t1];
}

// method '-[NSCell setDoubleValue:]'
void env___IM_NSCell_setDoubleValue_C(void *_instance, U32 _self, F64 aDouble) {
    [(NSCell*)_self setDoubleValue:aDouble];
}

// method '-[NSCell setEditable:]'
void env___IM_NSCell_setEditable_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setEditable:flag];
}

// method '-[NSCell setEnabled:]'
void env___IM_NSCell_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setEnabled:flag];
}

// method '-[NSCell setEntryType:]'
void env___IM_NSCell_setEntryType_C(void *_instance, U32 _self, U32 aType) {
    [(NSCell*)_self setEntryType:aType];
}

// method '-[NSCell setFloatValue:]'
void env___IM_NSCell_setFloatValue_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSCell*)_self setFloatValue:aFloat];
}

// method '-[NSCell setFloatingPointFormat:left:right:]'
void env___IM_NSCell_setFloatingPointFormat_Cleft_Cright_C(void *_instance, U32 _self, U32 autoRange, U32 leftDigits, U32 rightDigits) {
    [(NSCell*)_self setFloatingPointFormat:autoRange left:leftDigits right:rightDigits];
}

// method '-[NSCell setFocusRingType:]'
void env___IM_NSCell_setFocusRingType_C(void *_instance, U32 _self, U32 focusRingType) {
    [(NSCell*)_self setFocusRingType:focusRingType];
}

// method '-[NSCell setFont:]'
void env___IM_NSCell_setFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSCell*)_self setFont:_t1];
}

// method '-[NSCell setFormatter:]'
void env___IM_NSCell_setFormatter_C(void *_instance, U32 _self, U32 newFormatterPointer) {
    id _t1 = (id)newFormatterPointer;
    [(NSCell*)_self setFormatter:_t1];
}

// method '-[NSCell setHighlighted:]'
void env___IM_NSCell_setHighlighted_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setHighlighted:flag];
}

// method '-[NSCell setImage:]'
void env___IM_NSCell_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSCell*)_self setImage:_t1];
}

// method '-[NSCell setImportsGraphics:]'
void env___IM_NSCell_setImportsGraphics_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setImportsGraphics:flag];
}

// method '-[NSCell setIntValue:]'
void env___IM_NSCell_setIntValue_C(void *_instance, U32 _self, U32 anInt) {
    [(NSCell*)_self setIntValue:anInt];
}

// method '-[NSCell setLineBreakMode:]'
void env___IM_NSCell_setLineBreakMode_C(void *_instance, U32 _self, U32 mode) {
    [(NSCell*)_self setLineBreakMode:mode];
}

// method '-[NSCell setMenu:]'
void env___IM_NSCell_setMenu_C(void *_instance, U32 _self, U32 aMenuPointer) {
    id _t1 = (id)aMenuPointer;
    [(NSCell*)_self setMenu:_t1];
}

// method '-[NSCell setMnemonicLocation:]'
void env___IM_NSCell_setMnemonicLocation_C(void *_instance, U32 _self, U32 location) {
    [(NSCell*)_self setMnemonicLocation:location];
}

// method '-[NSCell setNextState]'
void env___IM_NSCell_setNextState(void *_instance, U32 _self) {
    [(NSCell*)_self setNextState];
}

// method '-[NSCell setObjectValue:]'
void env___IM_NSCell_setObjectValue_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSCell*)_self setObjectValue:_t1];
}

// method '-[NSCell setRefusesFirstResponder:]'
void env___IM_NSCell_setRefusesFirstResponder_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setRefusesFirstResponder:flag];
}

// method '-[NSCell setRepresentedObject:]'
void env___IM_NSCell_setRepresentedObject_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSCell*)_self setRepresentedObject:_t1];
}

// method '-[NSCell setScrollable:]'
void env___IM_NSCell_setScrollable_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setScrollable:flag];
}

// method '-[NSCell setSelectable:]'
void env___IM_NSCell_setSelectable_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setSelectable:flag];
}

// method '-[NSCell setSendsActionOnEndEditing:]'
void env___IM_NSCell_setSendsActionOnEndEditing_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setSendsActionOnEndEditing:flag];
}

// method '-[NSCell setShowsFirstResponder:]'
void env___IM_NSCell_setShowsFirstResponder_C(void *_instance, U32 _self, U32 showFR) {
    [(NSCell*)_self setShowsFirstResponder:showFR];
}

// method '-[NSCell setState:]'
void env___IM_NSCell_setState_C(void *_instance, U32 _self, U32 value) {
    [(NSCell*)_self setState:value];
}

// method '-[NSCell setStringValue:]'
void env___IM_NSCell_setStringValue_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSCell*)_self setStringValue:_t1];
}

// method '-[NSCell setTag:]'
void env___IM_NSCell_setTag_C(void *_instance, U32 _self, U32 anInt) {
    [(NSCell*)_self setTag:anInt];
}

// method '-[NSCell setTarget:]'
void env___IM_NSCell_setTarget_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSCell*)_self setTarget:_t1];
}

// method '-[NSCell setTitle:]'
void env___IM_NSCell_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSCell*)_self setTitle:_t1];
}

// method '-[NSCell setTitleWithMnemonic:]'
void env___IM_NSCell_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSCell*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSCell setType:]'
void env___IM_NSCell_setType_C(void *_instance, U32 _self, U32 aType) {
    [(NSCell*)_self setType:aType];
}

// method '-[NSCell setUpFieldEditorAttributes:]'
U32 env___IM_NSCell_setUpFieldEditorAttributes_C(void *_instance, U32 _self, U32 textObjPointer) {
    id _t1 = (id)textObjPointer;
    id _result = (id)[(NSCell*)_self setUpFieldEditorAttributes:_t1];
    return (U32)_result;
}

// method '-[NSCell setWraps:]'
void env___IM_NSCell_setWraps_C(void *_instance, U32 _self, U32 flag) {
    [(NSCell*)_self setWraps:flag];
}

// method '-[NSCell showsFirstResponder]'
U32 env___IM_NSCell_showsFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self showsFirstResponder];
    return (U32)_result;
}

// method '-[NSCell startTrackingAt:inView:]'
U32 env___IM_NSCell_startTrackingAt_CinView_C(void *_instance, U32 _self, U32 startPointIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + startPointIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    BOOL _result = (BOOL)[(NSCell*)_self startTrackingAt:_t1 inView:_t2];
    return (U32)_result;
}

// method '-[NSCell state]'
U32 env___IM_NSCell_state(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self state];
    return (U32)_result;
}

// method '-[NSCell stopTracking:at:inView:mouseIsUp:]'
void env___IM_NSCell_stopTracking_Cat_CinView_CmouseIsUp_C(void *_instance, U32 _self, U32 lastPointIndirect, U32 stopPointIndirect, U32 controlViewPointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + lastPointIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + stopPointIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(NSCell*)_self stopTracking:_t1 at:_t2 inView:_t3 mouseIsUp:flag];
}

// method '-[NSCell stringValue]'
U32 env___IM_NSCell_stringValue(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self stringValue];
    return (U32)_result;
}

// method '-[NSCell tag]'
U32 env___IM_NSCell_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self tag];
    return (U32)_result;
}

// method '-[NSCell takeDoubleValueFrom:]'
void env___IM_NSCell_takeDoubleValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSCell*)_self takeDoubleValueFrom:_t1];
}

// method '-[NSCell takeFloatValueFrom:]'
void env___IM_NSCell_takeFloatValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSCell*)_self takeFloatValueFrom:_t1];
}

// method '-[NSCell takeIntValueFrom:]'
void env___IM_NSCell_takeIntValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSCell*)_self takeIntValueFrom:_t1];
}

// method '-[NSCell takeObjectValueFrom:]'
void env___IM_NSCell_takeObjectValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSCell*)_self takeObjectValueFrom:_t1];
}

// method '-[NSCell takeStringValueFrom:]'
void env___IM_NSCell_takeStringValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSCell*)_self takeStringValueFrom:_t1];
}

// method '-[NSCell target]'
U32 env___IM_NSCell_target(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self target];
    return (U32)_result;
}

// method '-[NSCell title]'
U32 env___IM_NSCell_title(void *_instance, U32 _self) {
    id _result = (id)[(NSCell*)_self title];
    return (U32)_result;
}

// method '-[NSCell titleRectForBounds:]'
void env___IM_NSCell_titleRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 theRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + theRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSCell*)_self titleRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCell trackMouse:inRect:ofView:untilMouseUp:]'
U32 env___IM_NSCell_trackMouse_CinRect_CofView_CuntilMouseUp_C(void *_instance, U32 _self, U32 theEventPointer, U32 cellFrameIndirect, U32 controlViewPointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)theEventPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(NSCell*)_self trackMouse:_t1 inRect:_t2 ofView:_t3 untilMouseUp:flag];
    return (U32)_result;
}

// method '-[NSCell type]'
U32 env___IM_NSCell_type(void *_instance, U32 _self) {
    int _result = (int)[(NSCell*)_self type];
    return (U32)_result;
}

// method '-[NSCell wraps]'
U32 env___IM_NSCell_wraps(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCell*)_self wraps];
    return (U32)_result;
}

// method '-[NSClipView autoscroll:]'
U32 env___IM_NSClipView_autoscroll_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSClipView*)_self autoscroll:_t1];
    return (U32)_result;
}

// method '-[NSClipView backgroundColor]'
U32 env___IM_NSClipView_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSClipView*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSClipView constrainScrollPoint:]'
void env___IM_NSClipView_constrainScrollPoint_C(void *_instance, U32 _resultIndirect, U32 _self, U32 newOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + newOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    NSPoint _result = (NSPoint)[(NSClipView*)_self constrainScrollPoint:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSClipView copiesOnScroll]'
U32 env___IM_NSClipView_copiesOnScroll(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSClipView*)_self copiesOnScroll];
    return (U32)_result;
}

// method '-[NSClipView documentCursor]'
U32 env___IM_NSClipView_documentCursor(void *_instance, U32 _self) {
    id _result = (id)[(NSClipView*)_self documentCursor];
    return (U32)_result;
}

// method '-[NSClipView documentRect]'
void env___IM_NSClipView_documentRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSClipView*)_self documentRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSClipView documentView]'
U32 env___IM_NSClipView_documentView(void *_instance, U32 _self) {
    id _result = (id)[(NSClipView*)_self documentView];
    return (U32)_result;
}

// method '-[NSClipView documentVisibleRect]'
void env___IM_NSClipView_documentVisibleRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSClipView*)_self documentVisibleRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSClipView drawsBackground]'
U32 env___IM_NSClipView_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSClipView*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSClipView scrollToPoint:]'
void env___IM_NSClipView_scrollToPoint_C(void *_instance, U32 _self, U32 newOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + newOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSClipView*)_self scrollToPoint:_t1];
}

// method '-[NSClipView setBackgroundColor:]'
void env___IM_NSClipView_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSClipView*)_self setBackgroundColor:_t1];
}

// method '-[NSClipView setCopiesOnScroll:]'
void env___IM_NSClipView_setCopiesOnScroll_C(void *_instance, U32 _self, U32 flag) {
    [(NSClipView*)_self setCopiesOnScroll:flag];
}

// method '-[NSClipView setDocumentCursor:]'
void env___IM_NSClipView_setDocumentCursor_C(void *_instance, U32 _self, U32 anObjPointer) {
    id _t1 = (id)anObjPointer;
    [(NSClipView*)_self setDocumentCursor:_t1];
}

// method '-[NSClipView setDocumentView:]'
void env___IM_NSClipView_setDocumentView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSClipView*)_self setDocumentView:_t1];
}

// method '-[NSClipView setDrawsBackground:]'
void env___IM_NSClipView_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSClipView*)_self setDrawsBackground:flag];
}

// method '-[NSClipView viewBoundsChanged:]'
void env___IM_NSClipView_viewBoundsChanged_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSClipView*)_self viewBoundsChanged:_t1];
}

// method '-[NSClipView viewFrameChanged:]'
void env___IM_NSClipView_viewFrameChanged_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSClipView*)_self viewFrameChanged:_t1];
}

// method '-[NSCoder decodeNXColor]'
U32 env___IM_NSCoder_decodeNX58Color(void *_instance, U32 _self) {
    id _result = (id)[(NSCoder*)_self decodeNXColor];
    return (U32)_result;
}

// method '-[NSColor alphaComponent]'
F32 env___IM_NSColor_alphaComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self alphaComponent];
    return (F32)_result;
}

// method '+[NSColor alternateSelectedControlColor]'
U32 env___CM_NSColor_alternateSelectedControlColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class alternateSelectedControlColor];
    return (U32)_result;
}

// method '+[NSColor alternateSelectedControlTextColor]'
U32 env___CM_NSColor_alternateSelectedControlTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class alternateSelectedControlTextColor];
    return (U32)_result;
}

// method '+[NSColor blackColor]'
U32 env___CM_NSColor_blackColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class blackColor];
    return (U32)_result;
}

// method '-[NSColor blackComponent]'
F32 env___IM_NSColor_blackComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self blackComponent];
    return (F32)_result;
}

// method '-[NSColor blendedColorWithFraction:ofColor:]'
U32 env___IM_NSColor_blendedColorWithFraction_CofColor_C(void *_instance, U32 _self, F32 fraction, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    id _result = (id)[(NSColor*)_self blendedColorWithFraction:fraction ofColor:_t1];
    return (U32)_result;
}

// method '+[NSColor blueColor]'
U32 env___CM_NSColor_blueColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class blueColor];
    return (U32)_result;
}

// method '-[NSColor blueComponent]'
F32 env___IM_NSColor_blueComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self blueComponent];
    return (F32)_result;
}

// method '-[NSColor brightnessComponent]'
F32 env___IM_NSColor_brightnessComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self brightnessComponent];
    return (F32)_result;
}

// method '+[NSColor brownColor]'
U32 env___CM_NSColor_brownColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class brownColor];
    return (U32)_result;
}

// method '-[NSColor catalogNameComponent]'
U32 env___IM_NSColor_catalogNameComponent(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self catalogNameComponent];
    return (U32)_result;
}

// method '+[NSColor clearColor]'
U32 env___CM_NSColor_clearColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class clearColor];
    return (U32)_result;
}

// method '+[NSColor colorForControlTint:]'
U32 env___CM_NSColor_colorForControlTint_C(void *_instance, U32 _class, U32 controlTint) {
    id _result = (id)[(Class)_class colorForControlTint:controlTint];
    return (U32)_result;
}

// method '+[NSColor colorFromPasteboard:]'
U32 env___CM_NSColor_colorFromPasteboard_C(void *_instance, U32 _class, U32 pasteBoardPointer) {
    id _t1 = (id)pasteBoardPointer;
    id _result = (id)[(Class)_class colorFromPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSColor colorNameComponent]'
U32 env___IM_NSColor_colorNameComponent(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self colorNameComponent];
    return (U32)_result;
}

// method '-[NSColor colorSpace]'
U32 env___IM_NSColor_colorSpace(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self colorSpace];
    return (U32)_result;
}

// method '-[NSColor colorSpaceName]'
U32 env___IM_NSColor_colorSpaceName(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self colorSpaceName];
    return (U32)_result;
}

// method '-[NSColor colorUsingColorSpace:]'
U32 env___IM_NSColor_colorUsingColorSpace_C(void *_instance, U32 _self, U32 spacePointer) {
    id _t1 = (id)spacePointer;
    id _result = (id)[(NSColor*)_self colorUsingColorSpace:_t1];
    return (U32)_result;
}

// method '-[NSColor colorUsingColorSpaceName:]'
U32 env___IM_NSColor_colorUsingColorSpaceName_C(void *_instance, U32 _self, U32 colorSpacePointer) {
    id _t1 = (id)colorSpacePointer;
    id _result = (id)[(NSColor*)_self colorUsingColorSpaceName:_t1];
    return (U32)_result;
}

// method '-[NSColor colorUsingColorSpaceName:device:]'
U32 env___IM_NSColor_colorUsingColorSpaceName_Cdevice_C(void *_instance, U32 _self, U32 colorSpacePointer, U32 deviceDescriptionPointer) {
    id _t1 = (id)colorSpacePointer;
    id _t2 = (id)deviceDescriptionPointer;
    id _result = (id)[(NSColor*)_self colorUsingColorSpaceName:_t1 device:_t2];
    return (U32)_result;
}

// method '-[NSColor colorWithAlphaComponent:]'
U32 env___IM_NSColor_colorWithAlphaComponent_C(void *_instance, U32 _self, F32 alpha) {
    id _result = (id)[(NSColor*)_self colorWithAlphaComponent:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithCIColor:]'
U32 env___CM_NSColor_colorWithCIColor_C(void *_instance, U32 _class, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    id _result = (id)[(Class)_class colorWithCIColor:_t1];
    return (U32)_result;
}

// method '+[NSColor colorWithCalibratedHue:saturation:brightness:alpha:]'
U32 env___CM_NSColor_colorWithCalibratedHue_Csaturation_Cbrightness_Calpha_C(void *_instance, U32 _class, F32 hue, F32 saturation, F32 brightness, F32 alpha) {
    id _result = (id)[(Class)_class colorWithCalibratedHue:hue saturation:saturation brightness:brightness alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithCalibratedRed:green:blue:alpha:]'
U32 env___CM_NSColor_colorWithCalibratedRed_Cgreen_Cblue_Calpha_C(void *_instance, U32 _class, F32 red, F32 green, F32 blue, F32 alpha) {
    id _result = (id)[(Class)_class colorWithCalibratedRed:red green:green blue:blue alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithCalibratedWhite:alpha:]'
U32 env___CM_NSColor_colorWithCalibratedWhite_Calpha_C(void *_instance, U32 _class, F32 white, F32 alpha) {
    id _result = (id)[(Class)_class colorWithCalibratedWhite:white alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithCatalogName:colorName:]'
U32 env___CM_NSColor_colorWithCatalogName_CcolorName_C(void *_instance, U32 _class, U32 listNamePointer, U32 colorNamePointer) {
    id _t1 = (id)listNamePointer;
    id _t2 = (id)colorNamePointer;
    id _result = (id)[(Class)_class colorWithCatalogName:_t1 colorName:_t2];
    return (U32)_result;
}

// method '+[NSColor colorWithColorSpace:components:count:]'
U32 env___CM_NSColor_colorWithColorSpace_Ccomponents_Ccount_C(void *_instance, U32 _class, U32 spacePointer, U32 componentsPointer, U32 numberOfComponents) {
    id _t1 = (id)spacePointer;
    const float* _t2 = (const float*)componentsPointer;
    id _result = (id)[(Class)_class colorWithColorSpace:_t1 components:_t2 count:numberOfComponents];
    return (U32)_result;
}

// method '+[NSColor colorWithDeviceCyan:magenta:yellow:black:alpha:]'
U32 env___CM_NSColor_colorWithDeviceCyan_Cmagenta_Cyellow_Cblack_Calpha_C(void *_instance, U32 _class, F32 cyan, F32 magenta, F32 yellow, F32 black, F32 alpha) {
    id _result = (id)[(Class)_class colorWithDeviceCyan:cyan magenta:magenta yellow:yellow black:black alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithDeviceHue:saturation:brightness:alpha:]'
U32 env___CM_NSColor_colorWithDeviceHue_Csaturation_Cbrightness_Calpha_C(void *_instance, U32 _class, F32 hue, F32 saturation, F32 brightness, F32 alpha) {
    id _result = (id)[(Class)_class colorWithDeviceHue:hue saturation:saturation brightness:brightness alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithDeviceRed:green:blue:alpha:]'
U32 env___CM_NSColor_colorWithDeviceRed_Cgreen_Cblue_Calpha_C(void *_instance, U32 _class, F32 red, F32 green, F32 blue, F32 alpha) {
    id _result = (id)[(Class)_class colorWithDeviceRed:red green:green blue:blue alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithDeviceWhite:alpha:]'
U32 env___CM_NSColor_colorWithDeviceWhite_Calpha_C(void *_instance, U32 _class, F32 white, F32 alpha) {
    id _result = (id)[(Class)_class colorWithDeviceWhite:white alpha:alpha];
    return (U32)_result;
}

// method '+[NSColor colorWithPatternImage:]'
U32 env___CM_NSColor_colorWithPatternImage_C(void *_instance, U32 _class, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    id _result = (id)[(Class)_class colorWithPatternImage:_t1];
    return (U32)_result;
}

// method '+[NSColor controlAlternatingRowBackgroundColors]'
U32 env___CM_NSColor_controlAlternatingRowBackgroundColors(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlAlternatingRowBackgroundColors];
    return (U32)_result;
}

// method '+[NSColor controlBackgroundColor]'
U32 env___CM_NSColor_controlBackgroundColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlBackgroundColor];
    return (U32)_result;
}

// method '+[NSColor controlColor]'
U32 env___CM_NSColor_controlColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlColor];
    return (U32)_result;
}

// method '+[NSColor controlDarkShadowColor]'
U32 env___CM_NSColor_controlDarkShadowColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlDarkShadowColor];
    return (U32)_result;
}

// method '+[NSColor controlHighlightColor]'
U32 env___CM_NSColor_controlHighlightColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlHighlightColor];
    return (U32)_result;
}

// method '+[NSColor controlLightHighlightColor]'
U32 env___CM_NSColor_controlLightHighlightColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlLightHighlightColor];
    return (U32)_result;
}

// method '+[NSColor controlShadowColor]'
U32 env___CM_NSColor_controlShadowColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlShadowColor];
    return (U32)_result;
}

// method '+[NSColor controlTextColor]'
U32 env___CM_NSColor_controlTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class controlTextColor];
    return (U32)_result;
}

// method '+[NSColor currentControlTint]'
U32 env___CM_NSColor_currentControlTint(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class currentControlTint];
    return (U32)_result;
}

// method '+[NSColor cyanColor]'
U32 env___CM_NSColor_cyanColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class cyanColor];
    return (U32)_result;
}

// method '-[NSColor cyanComponent]'
F32 env___IM_NSColor_cyanComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self cyanComponent];
    return (F32)_result;
}

// method '+[NSColor darkGrayColor]'
U32 env___CM_NSColor_darkGrayColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class darkGrayColor];
    return (U32)_result;
}

// method '+[NSColor disabledControlTextColor]'
U32 env___CM_NSColor_disabledControlTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class disabledControlTextColor];
    return (U32)_result;
}

// method '-[NSColor drawSwatchInRect:]'
void env___IM_NSColor_drawSwatchInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSColor*)_self drawSwatchInRect:_t1];
}

// method '-[NSColor getCyan:magenta:yellow:black:alpha:]'
void env___IM_NSColor_getCyan_Cmagenta_Cyellow_Cblack_Calpha_C(void *_instance, U32 _self, U32 cyanPointer, U32 magentaPointer, U32 yellowPointer, U32 blackPointer, U32 alphaPointer) {
    float* _t1 = (float*)cyanPointer;
    float* _t2 = (float*)magentaPointer;
    float* _t3 = (float*)yellowPointer;
    float* _t4 = (float*)blackPointer;
    float* _t5 = (float*)alphaPointer;
    [(NSColor*)_self getCyan:_t1 magenta:_t2 yellow:_t3 black:_t4 alpha:_t5];
}

// method '-[NSColor getHue:saturation:brightness:alpha:]'
void env___IM_NSColor_getHue_Csaturation_Cbrightness_Calpha_C(void *_instance, U32 _self, U32 huePointer, U32 saturationPointer, U32 brightnessPointer, U32 alphaPointer) {
    float* _t1 = (float*)huePointer;
    float* _t2 = (float*)saturationPointer;
    float* _t3 = (float*)brightnessPointer;
    float* _t4 = (float*)alphaPointer;
    [(NSColor*)_self getHue:_t1 saturation:_t2 brightness:_t3 alpha:_t4];
}

// method '-[NSColor getRed:green:blue:alpha:]'
void env___IM_NSColor_getRed_Cgreen_Cblue_Calpha_C(void *_instance, U32 _self, U32 redPointer, U32 greenPointer, U32 bluePointer, U32 alphaPointer) {
    float* _t1 = (float*)redPointer;
    float* _t2 = (float*)greenPointer;
    float* _t3 = (float*)bluePointer;
    float* _t4 = (float*)alphaPointer;
    [(NSColor*)_self getRed:_t1 green:_t2 blue:_t3 alpha:_t4];
}

// method '-[NSColor getWhite:alpha:]'
void env___IM_NSColor_getWhite_Calpha_C(void *_instance, U32 _self, U32 whitePointer, U32 alphaPointer) {
    float* _t1 = (float*)whitePointer;
    float* _t2 = (float*)alphaPointer;
    [(NSColor*)_self getWhite:_t1 alpha:_t2];
}

// method '+[NSColor grayColor]'
U32 env___CM_NSColor_grayColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class grayColor];
    return (U32)_result;
}

// method '+[NSColor greenColor]'
U32 env___CM_NSColor_greenColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class greenColor];
    return (U32)_result;
}

// method '-[NSColor greenComponent]'
F32 env___IM_NSColor_greenComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self greenComponent];
    return (F32)_result;
}

// method '+[NSColor gridColor]'
U32 env___CM_NSColor_gridColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class gridColor];
    return (U32)_result;
}

// method '+[NSColor headerColor]'
U32 env___CM_NSColor_headerColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class headerColor];
    return (U32)_result;
}

// method '+[NSColor headerTextColor]'
U32 env___CM_NSColor_headerTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class headerTextColor];
    return (U32)_result;
}

// method '+[NSColor highlightColor]'
U32 env___CM_NSColor_highlightColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class highlightColor];
    return (U32)_result;
}

// method '-[NSColor highlightWithLevel:]'
U32 env___IM_NSColor_highlightWithLevel_C(void *_instance, U32 _self, F32 val) {
    id _result = (id)[(NSColor*)_self highlightWithLevel:val];
    return (U32)_result;
}

// method '-[NSColor hueComponent]'
F32 env___IM_NSColor_hueComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self hueComponent];
    return (F32)_result;
}

// method '+[NSColor ignoresAlpha]'
U32 env___CM_NSColor_ignoresAlpha(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class ignoresAlpha];
    return (U32)_result;
}

// method '+[NSColor keyboardFocusIndicatorColor]'
U32 env___CM_NSColor_keyboardFocusIndicatorColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class keyboardFocusIndicatorColor];
    return (U32)_result;
}

// method '+[NSColor knobColor]'
U32 env___CM_NSColor_knobColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class knobColor];
    return (U32)_result;
}

// method '+[NSColor lightGrayColor]'
U32 env___CM_NSColor_lightGrayColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class lightGrayColor];
    return (U32)_result;
}

// method '-[NSColor localizedCatalogNameComponent]'
U32 env___IM_NSColor_localizedCatalogNameComponent(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self localizedCatalogNameComponent];
    return (U32)_result;
}

// method '-[NSColor localizedColorNameComponent]'
U32 env___IM_NSColor_localizedColorNameComponent(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self localizedColorNameComponent];
    return (U32)_result;
}

// method '+[NSColor magentaColor]'
U32 env___CM_NSColor_magentaColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class magentaColor];
    return (U32)_result;
}

// method '-[NSColor magentaComponent]'
F32 env___IM_NSColor_magentaComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self magentaComponent];
    return (F32)_result;
}

// method '-[NSColor numberOfComponents]'
U32 env___IM_NSColor_numberOfComponents(void *_instance, U32 _self) {
    int _result = (int)[(NSColor*)_self numberOfComponents];
    return (U32)_result;
}

// method '+[NSColor orangeColor]'
U32 env___CM_NSColor_orangeColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class orangeColor];
    return (U32)_result;
}

// method '-[NSColor patternImage]'
U32 env___IM_NSColor_patternImage(void *_instance, U32 _self) {
    id _result = (id)[(NSColor*)_self patternImage];
    return (U32)_result;
}

// method '+[NSColor purpleColor]'
U32 env___CM_NSColor_purpleColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class purpleColor];
    return (U32)_result;
}

// method '+[NSColor redColor]'
U32 env___CM_NSColor_redColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class redColor];
    return (U32)_result;
}

// method '-[NSColor redComponent]'
F32 env___IM_NSColor_redComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self redComponent];
    return (F32)_result;
}

// method '-[NSColor saturationComponent]'
F32 env___IM_NSColor_saturationComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self saturationComponent];
    return (F32)_result;
}

// method '+[NSColor scrollBarColor]'
U32 env___CM_NSColor_scrollBarColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class scrollBarColor];
    return (U32)_result;
}

// method '+[NSColor secondarySelectedControlColor]'
U32 env___CM_NSColor_secondarySelectedControlColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class secondarySelectedControlColor];
    return (U32)_result;
}

// method '+[NSColor selectedControlColor]'
U32 env___CM_NSColor_selectedControlColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedControlColor];
    return (U32)_result;
}

// method '+[NSColor selectedControlTextColor]'
U32 env___CM_NSColor_selectedControlTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedControlTextColor];
    return (U32)_result;
}

// method '+[NSColor selectedKnobColor]'
U32 env___CM_NSColor_selectedKnobColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedKnobColor];
    return (U32)_result;
}

// method '+[NSColor selectedMenuItemColor]'
U32 env___CM_NSColor_selectedMenuItemColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedMenuItemColor];
    return (U32)_result;
}

// method '+[NSColor selectedMenuItemTextColor]'
U32 env___CM_NSColor_selectedMenuItemTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedMenuItemTextColor];
    return (U32)_result;
}

// method '+[NSColor selectedTextBackgroundColor]'
U32 env___CM_NSColor_selectedTextBackgroundColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedTextBackgroundColor];
    return (U32)_result;
}

// method '+[NSColor selectedTextColor]'
U32 env___CM_NSColor_selectedTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class selectedTextColor];
    return (U32)_result;
}

// method '-[NSColor set]'
void env___IM_NSColor_set(void *_instance, U32 _self) {
    [(NSColor*)_self set];
}

// method '-[NSColor setFill]'
void env___IM_NSColor_setFill(void *_instance, U32 _self) {
    [(NSColor*)_self setFill];
}

// method '+[NSColor setIgnoresAlpha:]'
void env___CM_NSColor_setIgnoresAlpha_C(void *_instance, U32 _class, U32 flag) {
    [(Class)_class setIgnoresAlpha:flag];
}

// method '-[NSColor setStroke]'
void env___IM_NSColor_setStroke(void *_instance, U32 _self) {
    [(NSColor*)_self setStroke];
}

// method '+[NSColor shadowColor]'
U32 env___CM_NSColor_shadowColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class shadowColor];
    return (U32)_result;
}

// method '-[NSColor shadowWithLevel:]'
U32 env___IM_NSColor_shadowWithLevel_C(void *_instance, U32 _self, F32 val) {
    id _result = (id)[(NSColor*)_self shadowWithLevel:val];
    return (U32)_result;
}

// method '+[NSColor textBackgroundColor]'
U32 env___CM_NSColor_textBackgroundColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class textBackgroundColor];
    return (U32)_result;
}

// method '+[NSColor textColor]'
U32 env___CM_NSColor_textColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class textColor];
    return (U32)_result;
}

// method '+[NSColor whiteColor]'
U32 env___CM_NSColor_whiteColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class whiteColor];
    return (U32)_result;
}

// method '-[NSColor whiteComponent]'
F32 env___IM_NSColor_whiteComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self whiteComponent];
    return (F32)_result;
}

// method '+[NSColor windowBackgroundColor]'
U32 env___CM_NSColor_windowBackgroundColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class windowBackgroundColor];
    return (U32)_result;
}

// method '+[NSColor windowFrameColor]'
U32 env___CM_NSColor_windowFrameColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class windowFrameColor];
    return (U32)_result;
}

// method '+[NSColor windowFrameTextColor]'
U32 env___CM_NSColor_windowFrameTextColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class windowFrameTextColor];
    return (U32)_result;
}

// method '-[NSColor writeToPasteboard:]'
void env___IM_NSColor_writeToPasteboard_C(void *_instance, U32 _self, U32 pasteBoardPointer) {
    id _t1 = (id)pasteBoardPointer;
    [(NSColor*)_self writeToPasteboard:_t1];
}

// method '+[NSColor yellowColor]'
U32 env___CM_NSColor_yellowColor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class yellowColor];
    return (U32)_result;
}

// method '-[NSColor yellowComponent]'
F32 env___IM_NSColor_yellowComponent(void *_instance, U32 _self) {
    float _result = (float)[(NSColor*)_self yellowComponent];
    return (F32)_result;
}

// method '-[NSColorList allKeys]'
U32 env___IM_NSColorList_allKeys(void *_instance, U32 _self) {
    id _result = (id)[(NSColorList*)_self allKeys];
    return (U32)_result;
}

// method '+[NSColorList availableColorLists]'
U32 env___CM_NSColorList_availableColorLists(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class availableColorLists];
    return (U32)_result;
}

// method '+[NSColorList colorListNamed:]'
U32 env___CM_NSColorList_colorListNamed_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(Class)_class colorListNamed:_t1];
    return (U32)_result;
}

// method '-[NSColorList colorWithKey:]'
U32 env___IM_NSColorList_colorWithKey_C(void *_instance, U32 _self, U32 keyPointer) {
    id _t1 = (id)keyPointer;
    id _result = (id)[(NSColorList*)_self colorWithKey:_t1];
    return (U32)_result;
}

// method '-[NSColorList initWithName:]'
U32 env___IM_NSColorList_initWithName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(NSColorList*)_self initWithName:_t1];
    return (U32)_result;
}

// method '-[NSColorList initWithName:fromFile:]'
U32 env___IM_NSColorList_initWithName_CfromFile_C(void *_instance, U32 _self, U32 namePointer, U32 pathPointer) {
    id _t1 = (id)namePointer;
    id _t2 = (id)pathPointer;
    id _result = (id)[(NSColorList*)_self initWithName:_t1 fromFile:_t2];
    return (U32)_result;
}

// method '-[NSColorList insertColor:key:atIndex:]'
void env___IM_NSColorList_insertColor_Ckey_CatIndex_C(void *_instance, U32 _self, U32 colorPointer, U32 keyPointer, U32 loc) {
    id _t1 = (id)colorPointer;
    id _t2 = (id)keyPointer;
    [(NSColorList*)_self insertColor:_t1 key:_t2 atIndex:loc];
}

// method '-[NSColorList isEditable]'
U32 env___IM_NSColorList_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSColorList*)_self isEditable];
    return (U32)_result;
}

// method '-[NSColorList name]'
U32 env___IM_NSColorList_name(void *_instance, U32 _self) {
    id _result = (id)[(NSColorList*)_self name];
    return (U32)_result;
}

// method '-[NSColorList removeColorWithKey:]'
void env___IM_NSColorList_removeColorWithKey_C(void *_instance, U32 _self, U32 keyPointer) {
    id _t1 = (id)keyPointer;
    [(NSColorList*)_self removeColorWithKey:_t1];
}

// method '-[NSColorList removeFile]'
void env___IM_NSColorList_removeFile(void *_instance, U32 _self) {
    [(NSColorList*)_self removeFile];
}

// method '-[NSColorList setColor:forKey:]'
void env___IM_NSColorList_setColor_CforKey_C(void *_instance, U32 _self, U32 colorPointer, U32 keyPointer) {
    id _t1 = (id)colorPointer;
    id _t2 = (id)keyPointer;
    [(NSColorList*)_self setColor:_t1 forKey:_t2];
}

// method '-[NSColorList writeToFile:]'
U32 env___IM_NSColorList_writeToFile_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSColorList*)_self writeToFile:_t1];
    return (U32)_result;
}

// method '-[NSColorPanel accessoryView]'
U32 env___IM_NSColorPanel_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSColorPanel*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSColorPanel alpha]'
F32 env___IM_NSColorPanel_alpha(void *_instance, U32 _self) {
    float _result = (float)[(NSColorPanel*)_self alpha];
    return (F32)_result;
}

// method '-[NSColorPanel attachColorList:]'
void env___IM_NSColorPanel_attachColorList_C(void *_instance, U32 _self, U32 colorListPointer) {
    id _t1 = (id)colorListPointer;
    [(NSColorPanel*)_self attachColorList:_t1];
}

// method '-[NSColorPanel color]'
U32 env___IM_NSColorPanel_color(void *_instance, U32 _self) {
    id _result = (id)[(NSColorPanel*)_self color];
    return (U32)_result;
}

// method '-[NSColorPanel detachColorList:]'
void env___IM_NSColorPanel_detachColorList_C(void *_instance, U32 _self, U32 colorListPointer) {
    id _t1 = (id)colorListPointer;
    [(NSColorPanel*)_self detachColorList:_t1];
}

// method '+[NSColorPanel dragColor:withEvent:fromView:]'
U32 env___CM_NSColorPanel_dragColor_CwithEvent_CfromView_C(void *_instance, U32 _class, U32 colorPointer, U32 theEventPointer, U32 sourceViewPointer) {
    id _t1 = (id)colorPointer;
    id _t2 = (id)theEventPointer;
    id _t3 = (id)sourceViewPointer;
    BOOL _result = (BOOL)[(Class)_class dragColor:_t1 withEvent:_t2 fromView:_t3];
    return (U32)_result;
}

// method '-[NSColorPanel isContinuous]'
U32 env___IM_NSColorPanel_isContinuous(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSColorPanel*)_self isContinuous];
    return (U32)_result;
}

// method '-[NSColorPanel mode]'
U32 env___IM_NSColorPanel_mode(void *_instance, U32 _self) {
    int _result = (int)[(NSColorPanel*)_self mode];
    return (U32)_result;
}

// method '-[NSColorPanel setAccessoryView:]'
void env___IM_NSColorPanel_setAccessoryView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSColorPanel*)_self setAccessoryView:_t1];
}

// method '-[NSColorPanel setAction:]'
void env___IM_NSColorPanel_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSColorPanel*)_self setAction:_t1];
}

// method '-[NSColorPanel setColor:]'
void env___IM_NSColorPanel_setColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSColorPanel*)_self setColor:_t1];
}

// method '-[NSColorPanel setContinuous:]'
void env___IM_NSColorPanel_setContinuous_C(void *_instance, U32 _self, U32 flag) {
    [(NSColorPanel*)_self setContinuous:flag];
}

// method '-[NSColorPanel setMode:]'
void env___IM_NSColorPanel_setMode_C(void *_instance, U32 _self, U32 mode) {
    [(NSColorPanel*)_self setMode:mode];
}

// method '+[NSColorPanel setPickerMask:]'
void env___CM_NSColorPanel_setPickerMask_C(void *_instance, U32 _class, U32 mask) {
    [(Class)_class setPickerMask:mask];
}

// method '+[NSColorPanel setPickerMode:]'
void env___CM_NSColorPanel_setPickerMode_C(void *_instance, U32 _class, U32 mode) {
    [(Class)_class setPickerMode:mode];
}

// method '-[NSColorPanel setShowsAlpha:]'
void env___IM_NSColorPanel_setShowsAlpha_C(void *_instance, U32 _self, U32 flag) {
    [(NSColorPanel*)_self setShowsAlpha:flag];
}

// method '-[NSColorPanel setTarget:]'
void env___IM_NSColorPanel_setTarget_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSColorPanel*)_self setTarget:_t1];
}

// method '+[NSColorPanel sharedColorPanel]'
U32 env___CM_NSColorPanel_sharedColorPanel(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedColorPanel];
    return (U32)_result;
}

// method '+[NSColorPanel sharedColorPanelExists]'
U32 env___CM_NSColorPanel_sharedColorPanelExists(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class sharedColorPanelExists];
    return (U32)_result;
}

// method '-[NSColorPanel showsAlpha]'
U32 env___IM_NSColorPanel_showsAlpha(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSColorPanel*)_self showsAlpha];
    return (U32)_result;
}

// method '-[NSColorPicker attachColorList:]'
void env___IM_NSColorPicker_attachColorList_C(void *_instance, U32 _self, U32 colorListPointer) {
    id _t1 = (id)colorListPointer;
    [(NSColorPicker*)_self attachColorList:_t1];
}

// method '-[NSColorPicker colorPanel]'
U32 env___IM_NSColorPicker_colorPanel(void *_instance, U32 _self) {
    id _result = (id)[(NSColorPicker*)_self colorPanel];
    return (U32)_result;
}

// method '-[NSColorPicker detachColorList:]'
void env___IM_NSColorPicker_detachColorList_C(void *_instance, U32 _self, U32 colorListPointer) {
    id _t1 = (id)colorListPointer;
    [(NSColorPicker*)_self detachColorList:_t1];
}

// method '-[NSColorPicker initWithPickerMask:colorPanel:]'
U32 env___IM_NSColorPicker_initWithPickerMask_CcolorPanel_C(void *_instance, U32 _self, U32 mask, U32 owningColorPanelPointer) {
    id _t1 = (id)owningColorPanelPointer;
    id _result = (id)[(NSColorPicker*)_self initWithPickerMask:mask colorPanel:_t1];
    return (U32)_result;
}

// method '-[NSColorPicker insertNewButtonImage:in:]'
void env___IM_NSColorPicker_insertNewButtonImage_Cin_C(void *_instance, U32 _self, U32 newButtonImagePointer, U32 buttonCellPointer) {
    id _t1 = (id)newButtonImagePointer;
    id _t2 = (id)buttonCellPointer;
    [(NSColorPicker*)_self insertNewButtonImage:_t1 in:_t2];
}

// method '-[NSColorPicker provideNewButtonImage]'
U32 env___IM_NSColorPicker_provideNewButtonImage(void *_instance, U32 _self) {
    id _result = (id)[(NSColorPicker*)_self provideNewButtonImage];
    return (U32)_result;
}

// method '-[NSColorPicker setMode:]'
void env___IM_NSColorPicker_setMode_C(void *_instance, U32 _self, U32 mode) {
    [(NSColorPicker*)_self setMode:mode];
}

// method '-[NSColorPicker viewSizeChanged:]'
void env___IM_NSColorPicker_viewSizeChanged_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSColorPicker*)_self viewSizeChanged:_t1];
}

// method '-[NSColorSpace ICCProfileData]'
U32 env___IM_NSColorSpace_ICCProfileData(void *_instance, U32 _self) {
    id _result = (id)[(NSColorSpace*)_self ICCProfileData];
    return (U32)_result;
}

// method '-[NSColorSpace colorSpaceModel]'
U32 env___IM_NSColorSpace_colorSpaceModel(void *_instance, U32 _self) {
    int _result = (int)[(NSColorSpace*)_self colorSpaceModel];
    return (U32)_result;
}

// method '-[NSColorSpace colorSyncProfile]'
U32 env___IM_NSColorSpace_colorSyncProfile(void *_instance, U32 _self) {
    struct OpaqueCMProfileRef* _result = (struct OpaqueCMProfileRef*)[(NSColorSpace*)_self colorSyncProfile];
    return (U32)_result;
}

// method '+[NSColorSpace deviceCMYKColorSpace]'
U32 env___CM_NSColorSpace_deviceCMYKColorSpace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class deviceCMYKColorSpace];
    return (U32)_result;
}

// method '+[NSColorSpace deviceGrayColorSpace]'
U32 env___CM_NSColorSpace_deviceGrayColorSpace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class deviceGrayColorSpace];
    return (U32)_result;
}

// method '+[NSColorSpace deviceRGBColorSpace]'
U32 env___CM_NSColorSpace_deviceRGBColorSpace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class deviceRGBColorSpace];
    return (U32)_result;
}

// method '+[NSColorSpace genericCMYKColorSpace]'
U32 env___CM_NSColorSpace_genericCMYKColorSpace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class genericCMYKColorSpace];
    return (U32)_result;
}

// method '+[NSColorSpace genericGrayColorSpace]'
U32 env___CM_NSColorSpace_genericGrayColorSpace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class genericGrayColorSpace];
    return (U32)_result;
}

// method '+[NSColorSpace genericRGBColorSpace]'
U32 env___CM_NSColorSpace_genericRGBColorSpace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class genericRGBColorSpace];
    return (U32)_result;
}

// method '-[NSColorSpace initWithColorSyncProfile:]'
U32 env___IM_NSColorSpace_initWithColorSyncProfile_C(void *_instance, U32 _self, U32 profPointer) {
    struct OpaqueCMProfileRef* _t1 = (struct OpaqueCMProfileRef*)profPointer;
    id _result = (id)[(NSColorSpace*)_self initWithColorSyncProfile:_t1];
    return (U32)_result;
}

// method '-[NSColorSpace initWithICCProfileData:]'
U32 env___IM_NSColorSpace_initWithICCProfileData_C(void *_instance, U32 _self, U32 iccDataPointer) {
    id _t1 = (id)iccDataPointer;
    id _result = (id)[(NSColorSpace*)_self initWithICCProfileData:_t1];
    return (U32)_result;
}

// method '-[NSColorSpace localizedName]'
U32 env___IM_NSColorSpace_localizedName(void *_instance, U32 _self) {
    id _result = (id)[(NSColorSpace*)_self localizedName];
    return (U32)_result;
}

// method '-[NSColorSpace numberOfColorComponents]'
U32 env___IM_NSColorSpace_numberOfColorComponents(void *_instance, U32 _self) {
    int _result = (int)[(NSColorSpace*)_self numberOfColorComponents];
    return (U32)_result;
}

// method '-[NSColorWell activate:]'
void env___IM_NSColorWell_activate_C(void *_instance, U32 _self, U32 exclusive) {
    [(NSColorWell*)_self activate:exclusive];
}

// method '-[NSColorWell color]'
U32 env___IM_NSColorWell_color(void *_instance, U32 _self) {
    id _result = (id)[(NSColorWell*)_self color];
    return (U32)_result;
}

// method '-[NSColorWell deactivate]'
void env___IM_NSColorWell_deactivate(void *_instance, U32 _self) {
    [(NSColorWell*)_self deactivate];
}

// method '-[NSColorWell drawWellInside:]'
void env___IM_NSColorWell_drawWellInside_C(void *_instance, U32 _self, U32 insideRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + insideRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSColorWell*)_self drawWellInside:_t1];
}

// method '-[NSColorWell isActive]'
U32 env___IM_NSColorWell_isActive(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSColorWell*)_self isActive];
    return (U32)_result;
}

// method '-[NSColorWell isBordered]'
U32 env___IM_NSColorWell_isBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSColorWell*)_self isBordered];
    return (U32)_result;
}

// method '-[NSColorWell setBordered:]'
void env___IM_NSColorWell_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSColorWell*)_self setBordered:flag];
}

// method '-[NSColorWell setColor:]'
void env___IM_NSColorWell_setColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSColorWell*)_self setColor:_t1];
}

// method '-[NSColorWell takeColorFrom:]'
void env___IM_NSColorWell_takeColorFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSColorWell*)_self takeColorFrom:_t1];
}

// method '-[NSComboBox addItemWithObjectValue:]'
void env___IM_NSComboBox_addItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSComboBox*)_self addItemWithObjectValue:_t1];
}

// method '-[NSComboBox addItemsWithObjectValues:]'
void env___IM_NSComboBox_addItemsWithObjectValues_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    [(NSComboBox*)_self addItemsWithObjectValues:_t1];
}

// method '-[NSComboBox completes]'
U32 env___IM_NSComboBox_completes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBox*)_self completes];
    return (U32)_result;
}

// method '-[NSComboBox dataSource]'
U32 env___IM_NSComboBox_dataSource(void *_instance, U32 _self) {
    id _result = (id)[(NSComboBox*)_self dataSource];
    return (U32)_result;
}

// method '-[NSComboBox deselectItemAtIndex:]'
void env___IM_NSComboBox_deselectItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBox*)_self deselectItemAtIndex:index];
}

// method '-[NSComboBox hasVerticalScroller]'
U32 env___IM_NSComboBox_hasVerticalScroller(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBox*)_self hasVerticalScroller];
    return (U32)_result;
}

// method '-[NSComboBox indexOfItemWithObjectValue:]'
U32 env___IM_NSComboBox_indexOfItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    int _result = (int)[(NSComboBox*)_self indexOfItemWithObjectValue:_t1];
    return (U32)_result;
}

// method '-[NSComboBox indexOfSelectedItem]'
U32 env___IM_NSComboBox_indexOfSelectedItem(void *_instance, U32 _self) {
    int _result = (int)[(NSComboBox*)_self indexOfSelectedItem];
    return (U32)_result;
}

// method '-[NSComboBox insertItemWithObjectValue:atIndex:]'
void env___IM_NSComboBox_insertItemWithObjectValue_CatIndex_C(void *_instance, U32 _self, U32 objectPointer, U32 index) {
    id _t1 = (id)objectPointer;
    [(NSComboBox*)_self insertItemWithObjectValue:_t1 atIndex:index];
}

// method '-[NSComboBox intercellSpacing]'
void env___IM_NSComboBox_intercellSpacing(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSComboBox*)_self intercellSpacing];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSComboBox isButtonBordered]'
U32 env___IM_NSComboBox_isButtonBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBox*)_self isButtonBordered];
    return (U32)_result;
}

// method '-[NSComboBox itemHeight]'
F32 env___IM_NSComboBox_itemHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSComboBox*)_self itemHeight];
    return (F32)_result;
}

// method '-[NSComboBox itemObjectValueAtIndex:]'
U32 env___IM_NSComboBox_itemObjectValueAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSComboBox*)_self itemObjectValueAtIndex:index];
    return (U32)_result;
}

// method '-[NSComboBox noteNumberOfItemsChanged]'
void env___IM_NSComboBox_noteNumberOfItemsChanged(void *_instance, U32 _self) {
    [(NSComboBox*)_self noteNumberOfItemsChanged];
}

// method '-[NSComboBox numberOfItems]'
U32 env___IM_NSComboBox_numberOfItems(void *_instance, U32 _self) {
    int _result = (int)[(NSComboBox*)_self numberOfItems];
    return (U32)_result;
}

// method '-[NSComboBox numberOfVisibleItems]'
U32 env___IM_NSComboBox_numberOfVisibleItems(void *_instance, U32 _self) {
    int _result = (int)[(NSComboBox*)_self numberOfVisibleItems];
    return (U32)_result;
}

// method '-[NSComboBox objectValueOfSelectedItem]'
U32 env___IM_NSComboBox_objectValueOfSelectedItem(void *_instance, U32 _self) {
    id _result = (id)[(NSComboBox*)_self objectValueOfSelectedItem];
    return (U32)_result;
}

// method '-[NSComboBox objectValues]'
U32 env___IM_NSComboBox_objectValues(void *_instance, U32 _self) {
    id _result = (id)[(NSComboBox*)_self objectValues];
    return (U32)_result;
}

// method '-[NSComboBox reloadData]'
void env___IM_NSComboBox_reloadData(void *_instance, U32 _self) {
    [(NSComboBox*)_self reloadData];
}

// method '-[NSComboBox removeAllItems]'
void env___IM_NSComboBox_removeAllItems(void *_instance, U32 _self) {
    [(NSComboBox*)_self removeAllItems];
}

// method '-[NSComboBox removeItemAtIndex:]'
void env___IM_NSComboBox_removeItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBox*)_self removeItemAtIndex:index];
}

// method '-[NSComboBox removeItemWithObjectValue:]'
void env___IM_NSComboBox_removeItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSComboBox*)_self removeItemWithObjectValue:_t1];
}

// method '-[NSComboBox scrollItemAtIndexToTop:]'
void env___IM_NSComboBox_scrollItemAtIndexToTop_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBox*)_self scrollItemAtIndexToTop:index];
}

// method '-[NSComboBox scrollItemAtIndexToVisible:]'
void env___IM_NSComboBox_scrollItemAtIndexToVisible_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBox*)_self scrollItemAtIndexToVisible:index];
}

// method '-[NSComboBox selectItemAtIndex:]'
void env___IM_NSComboBox_selectItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBox*)_self selectItemAtIndex:index];
}

// method '-[NSComboBox selectItemWithObjectValue:]'
void env___IM_NSComboBox_selectItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSComboBox*)_self selectItemWithObjectValue:_t1];
}

// method '-[NSComboBox setButtonBordered:]'
void env___IM_NSComboBox_setButtonBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSComboBox*)_self setButtonBordered:flag];
}

// method '-[NSComboBox setCompletes:]'
void env___IM_NSComboBox_setCompletes_C(void *_instance, U32 _self, U32 completes) {
    [(NSComboBox*)_self setCompletes:completes];
}

// method '-[NSComboBox setDataSource:]'
void env___IM_NSComboBox_setDataSource_C(void *_instance, U32 _self, U32 aSourcePointer) {
    id _t1 = (id)aSourcePointer;
    [(NSComboBox*)_self setDataSource:_t1];
}

// method '-[NSComboBox setHasVerticalScroller:]'
void env___IM_NSComboBox_setHasVerticalScroller_C(void *_instance, U32 _self, U32 flag) {
    [(NSComboBox*)_self setHasVerticalScroller:flag];
}

// method '-[NSComboBox setIntercellSpacing:]'
void env___IM_NSComboBox_setIntercellSpacing_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSComboBox*)_self setIntercellSpacing:_t1];
}

// method '-[NSComboBox setItemHeight:]'
void env___IM_NSComboBox_setItemHeight_C(void *_instance, U32 _self, F32 itemHeight) {
    [(NSComboBox*)_self setItemHeight:itemHeight];
}

// method '-[NSComboBox setNumberOfVisibleItems:]'
void env___IM_NSComboBox_setNumberOfVisibleItems_C(void *_instance, U32 _self, U32 visibleItems) {
    [(NSComboBox*)_self setNumberOfVisibleItems:visibleItems];
}

// method '-[NSComboBox setUsesDataSource:]'
void env___IM_NSComboBox_setUsesDataSource_C(void *_instance, U32 _self, U32 flag) {
    [(NSComboBox*)_self setUsesDataSource:flag];
}

// method '-[NSComboBox usesDataSource]'
U32 env___IM_NSComboBox_usesDataSource(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBox*)_self usesDataSource];
    return (U32)_result;
}

// method '-[NSComboBoxCell addItemWithObjectValue:]'
void env___IM_NSComboBoxCell_addItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSComboBoxCell*)_self addItemWithObjectValue:_t1];
}

// method '-[NSComboBoxCell addItemsWithObjectValues:]'
void env___IM_NSComboBoxCell_addItemsWithObjectValues_C(void *_instance, U32 _self, U32 objectsPointer) {
    id _t1 = (id)objectsPointer;
    [(NSComboBoxCell*)_self addItemsWithObjectValues:_t1];
}

// method '-[NSComboBoxCell completedString:]'
U32 env___IM_NSComboBoxCell_completedString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    id _result = (id)[(NSComboBoxCell*)_self completedString:_t1];
    return (U32)_result;
}

// method '-[NSComboBoxCell completes]'
U32 env___IM_NSComboBoxCell_completes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBoxCell*)_self completes];
    return (U32)_result;
}

// method '-[NSComboBoxCell dataSource]'
U32 env___IM_NSComboBoxCell_dataSource(void *_instance, U32 _self) {
    id _result = (id)[(NSComboBoxCell*)_self dataSource];
    return (U32)_result;
}

// method '-[NSComboBoxCell deselectItemAtIndex:]'
void env___IM_NSComboBoxCell_deselectItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBoxCell*)_self deselectItemAtIndex:index];
}

// method '-[NSComboBoxCell hasVerticalScroller]'
U32 env___IM_NSComboBoxCell_hasVerticalScroller(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBoxCell*)_self hasVerticalScroller];
    return (U32)_result;
}

// method '-[NSComboBoxCell indexOfItemWithObjectValue:]'
U32 env___IM_NSComboBoxCell_indexOfItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    int _result = (int)[(NSComboBoxCell*)_self indexOfItemWithObjectValue:_t1];
    return (U32)_result;
}

// method '-[NSComboBoxCell indexOfSelectedItem]'
U32 env___IM_NSComboBoxCell_indexOfSelectedItem(void *_instance, U32 _self) {
    int _result = (int)[(NSComboBoxCell*)_self indexOfSelectedItem];
    return (U32)_result;
}

// method '-[NSComboBoxCell insertItemWithObjectValue:atIndex:]'
void env___IM_NSComboBoxCell_insertItemWithObjectValue_CatIndex_C(void *_instance, U32 _self, U32 objectPointer, U32 index) {
    id _t1 = (id)objectPointer;
    [(NSComboBoxCell*)_self insertItemWithObjectValue:_t1 atIndex:index];
}

// method '-[NSComboBoxCell intercellSpacing]'
void env___IM_NSComboBoxCell_intercellSpacing(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSComboBoxCell*)_self intercellSpacing];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSComboBoxCell isButtonBordered]'
U32 env___IM_NSComboBoxCell_isButtonBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBoxCell*)_self isButtonBordered];
    return (U32)_result;
}

// method '-[NSComboBoxCell itemHeight]'
F32 env___IM_NSComboBoxCell_itemHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSComboBoxCell*)_self itemHeight];
    return (F32)_result;
}

// method '-[NSComboBoxCell itemObjectValueAtIndex:]'
U32 env___IM_NSComboBoxCell_itemObjectValueAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSComboBoxCell*)_self itemObjectValueAtIndex:index];
    return (U32)_result;
}

// method '-[NSComboBoxCell noteNumberOfItemsChanged]'
void env___IM_NSComboBoxCell_noteNumberOfItemsChanged(void *_instance, U32 _self) {
    [(NSComboBoxCell*)_self noteNumberOfItemsChanged];
}

// method '-[NSComboBoxCell numberOfItems]'
U32 env___IM_NSComboBoxCell_numberOfItems(void *_instance, U32 _self) {
    int _result = (int)[(NSComboBoxCell*)_self numberOfItems];
    return (U32)_result;
}

// method '-[NSComboBoxCell numberOfVisibleItems]'
U32 env___IM_NSComboBoxCell_numberOfVisibleItems(void *_instance, U32 _self) {
    int _result = (int)[(NSComboBoxCell*)_self numberOfVisibleItems];
    return (U32)_result;
}

// method '-[NSComboBoxCell objectValueOfSelectedItem]'
U32 env___IM_NSComboBoxCell_objectValueOfSelectedItem(void *_instance, U32 _self) {
    id _result = (id)[(NSComboBoxCell*)_self objectValueOfSelectedItem];
    return (U32)_result;
}

// method '-[NSComboBoxCell objectValues]'
U32 env___IM_NSComboBoxCell_objectValues(void *_instance, U32 _self) {
    id _result = (id)[(NSComboBoxCell*)_self objectValues];
    return (U32)_result;
}

// method '-[NSComboBoxCell reloadData]'
void env___IM_NSComboBoxCell_reloadData(void *_instance, U32 _self) {
    [(NSComboBoxCell*)_self reloadData];
}

// method '-[NSComboBoxCell removeAllItems]'
void env___IM_NSComboBoxCell_removeAllItems(void *_instance, U32 _self) {
    [(NSComboBoxCell*)_self removeAllItems];
}

// method '-[NSComboBoxCell removeItemAtIndex:]'
void env___IM_NSComboBoxCell_removeItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBoxCell*)_self removeItemAtIndex:index];
}

// method '-[NSComboBoxCell removeItemWithObjectValue:]'
void env___IM_NSComboBoxCell_removeItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSComboBoxCell*)_self removeItemWithObjectValue:_t1];
}

// method '-[NSComboBoxCell scrollItemAtIndexToTop:]'
void env___IM_NSComboBoxCell_scrollItemAtIndexToTop_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBoxCell*)_self scrollItemAtIndexToTop:index];
}

// method '-[NSComboBoxCell scrollItemAtIndexToVisible:]'
void env___IM_NSComboBoxCell_scrollItemAtIndexToVisible_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBoxCell*)_self scrollItemAtIndexToVisible:index];
}

// method '-[NSComboBoxCell selectItemAtIndex:]'
void env___IM_NSComboBoxCell_selectItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSComboBoxCell*)_self selectItemAtIndex:index];
}

// method '-[NSComboBoxCell selectItemWithObjectValue:]'
void env___IM_NSComboBoxCell_selectItemWithObjectValue_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSComboBoxCell*)_self selectItemWithObjectValue:_t1];
}

// method '-[NSComboBoxCell setButtonBordered:]'
void env___IM_NSComboBoxCell_setButtonBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSComboBoxCell*)_self setButtonBordered:flag];
}

// method '-[NSComboBoxCell setCompletes:]'
void env___IM_NSComboBoxCell_setCompletes_C(void *_instance, U32 _self, U32 completes) {
    [(NSComboBoxCell*)_self setCompletes:completes];
}

// method '-[NSComboBoxCell setDataSource:]'
void env___IM_NSComboBoxCell_setDataSource_C(void *_instance, U32 _self, U32 aSourcePointer) {
    id _t1 = (id)aSourcePointer;
    [(NSComboBoxCell*)_self setDataSource:_t1];
}

// method '-[NSComboBoxCell setHasVerticalScroller:]'
void env___IM_NSComboBoxCell_setHasVerticalScroller_C(void *_instance, U32 _self, U32 flag) {
    [(NSComboBoxCell*)_self setHasVerticalScroller:flag];
}

// method '-[NSComboBoxCell setIntercellSpacing:]'
void env___IM_NSComboBoxCell_setIntercellSpacing_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSComboBoxCell*)_self setIntercellSpacing:_t1];
}

// method '-[NSComboBoxCell setItemHeight:]'
void env___IM_NSComboBoxCell_setItemHeight_C(void *_instance, U32 _self, F32 itemHeight) {
    [(NSComboBoxCell*)_self setItemHeight:itemHeight];
}

// method '-[NSComboBoxCell setNumberOfVisibleItems:]'
void env___IM_NSComboBoxCell_setNumberOfVisibleItems_C(void *_instance, U32 _self, U32 visibleItems) {
    [(NSComboBoxCell*)_self setNumberOfVisibleItems:visibleItems];
}

// method '-[NSComboBoxCell setUsesDataSource:]'
void env___IM_NSComboBoxCell_setUsesDataSource_C(void *_instance, U32 _self, U32 flag) {
    [(NSComboBoxCell*)_self setUsesDataSource:flag];
}

// method '-[NSComboBoxCell usesDataSource]'
U32 env___IM_NSComboBoxCell_usesDataSource(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSComboBoxCell*)_self usesDataSource];
    return (U32)_result;
}

// method '-[NSControl abortEditing]'
U32 env___IM_NSControl_abortEditing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSControl*)_self abortEditing];
    return (U32)_result;
}

// method '-[NSControl action]'
U32 env___IM_NSControl_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSControl*)_self action];
    return (U32)_result;
}

// method '-[NSControl alignment]'
U32 env___IM_NSControl_alignment(void *_instance, U32 _self) {
    int _result = (int)[(NSControl*)_self alignment];
    return (U32)_result;
}

// method '-[NSControl attributedStringValue]'
U32 env___IM_NSControl_attributedStringValue(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self attributedStringValue];
    return (U32)_result;
}

// method '-[NSControl baseWritingDirection]'
U32 env___IM_NSControl_baseWritingDirection(void *_instance, U32 _self) {
    int _result = (int)[(NSControl*)_self baseWritingDirection];
    return (U32)_result;
}

// method '-[NSControl calcSize]'
void env___IM_NSControl_calcSize(void *_instance, U32 _self) {
    [(NSControl*)_self calcSize];
}

// method '-[NSControl cell]'
U32 env___IM_NSControl_cell(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self cell];
    return (U32)_result;
}

// method '+[NSControl cellClass]'
U32 env___CM_NSControl_cellClass(void *_instance, U32 _class) {
    Class _result = (Class)[(Class)_class cellClass];
    return (U32)_result;
}

// method '-[NSControl currentEditor]'
U32 env___IM_NSControl_currentEditor(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self currentEditor];
    return (U32)_result;
}

// method '-[NSControl doubleValue]'
F64 env___IM_NSControl_doubleValue(void *_instance, U32 _self) {
    double _result = (double)[(NSControl*)_self doubleValue];
    return (F64)_result;
}

// method '-[NSControl drawCell:]'
void env___IM_NSControl_drawCell_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSControl*)_self drawCell:_t1];
}

// method '-[NSControl drawCellInside:]'
void env___IM_NSControl_drawCellInside_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSControl*)_self drawCellInside:_t1];
}

// method '-[NSControl floatValue]'
F32 env___IM_NSControl_floatValue(void *_instance, U32 _self) {
    float _result = (float)[(NSControl*)_self floatValue];
    return (F32)_result;
}

// method '-[NSControl font]'
U32 env___IM_NSControl_font(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self font];
    return (U32)_result;
}

// method '-[NSControl formatter]'
U32 env___IM_NSControl_formatter(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self formatter];
    return (U32)_result;
}

// method '-[NSControl ignoresMultiClick]'
U32 env___IM_NSControl_ignoresMultiClick(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSControl*)_self ignoresMultiClick];
    return (U32)_result;
}

// method '-[NSControl initWithFrame:]'
U32 env___IM_NSControl_initWithFrame_C(void *_instance, U32 _self, U32 frameRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSControl*)_self initWithFrame:_t1];
    return (U32)_result;
}

// method '-[NSControl intValue]'
U32 env___IM_NSControl_intValue(void *_instance, U32 _self) {
    int _result = (int)[(NSControl*)_self intValue];
    return (U32)_result;
}

// method '-[NSControl isContinuous]'
U32 env___IM_NSControl_isContinuous(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSControl*)_self isContinuous];
    return (U32)_result;
}

// method '-[NSControl isEnabled]'
U32 env___IM_NSControl_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSControl*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSControl mouseDown:]'
void env___IM_NSControl_mouseDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSControl*)_self mouseDown:_t1];
}

// method '-[NSControl objectValue]'
U32 env___IM_NSControl_objectValue(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self objectValue];
    return (U32)_result;
}

// method '-[NSControl performClick:]'
void env___IM_NSControl_performClick_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSControl*)_self performClick:_t1];
}

// method '-[NSControl refusesFirstResponder]'
U32 env___IM_NSControl_refusesFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSControl*)_self refusesFirstResponder];
    return (U32)_result;
}

// method '-[NSControl selectCell:]'
void env___IM_NSControl_selectCell_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSControl*)_self selectCell:_t1];
}

// method '-[NSControl selectedCell]'
U32 env___IM_NSControl_selectedCell(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self selectedCell];
    return (U32)_result;
}

// method '-[NSControl selectedTag]'
U32 env___IM_NSControl_selectedTag(void *_instance, U32 _self) {
    int _result = (int)[(NSControl*)_self selectedTag];
    return (U32)_result;
}

// method '-[NSControl sendAction:to:]'
U32 env___IM_NSControl_sendAction_Cto_C(void *_instance, U32 _self, U32 theActionPointer, U32 theTargetPointer) {
    SEL _t1 = (SEL)theActionPointer;
    id _t2 = (id)theTargetPointer;
    BOOL _result = (BOOL)[(NSControl*)_self sendAction:_t1 to:_t2];
    return (U32)_result;
}

// method '-[NSControl sendActionOn:]'
U32 env___IM_NSControl_sendActionOn_C(void *_instance, U32 _self, U32 mask) {
    int _result = (int)[(NSControl*)_self sendActionOn:mask];
    return (U32)_result;
}

// method '-[NSControl setAction:]'
void env___IM_NSControl_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSControl*)_self setAction:_t1];
}

// method '-[NSControl setAlignment:]'
void env___IM_NSControl_setAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSControl*)_self setAlignment:mode];
}

// method '-[NSControl setAttributedStringValue:]'
void env___IM_NSControl_setAttributedStringValue_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSControl*)_self setAttributedStringValue:_t1];
}

// method '-[NSControl setBaseWritingDirection:]'
void env___IM_NSControl_setBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSControl*)_self setBaseWritingDirection:writingDirection];
}

// method '-[NSControl setCell:]'
void env___IM_NSControl_setCell_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSControl*)_self setCell:_t1];
}

// method '+[NSControl setCellClass:]'
void env___CM_NSControl_setCellClass_C(void *_instance, U32 _class, U32 factoryIdPointer) {
    Class _t1 = (Class)factoryIdPointer;
    [(Class)_class setCellClass:_t1];
}

// method '-[NSControl setContinuous:]'
void env___IM_NSControl_setContinuous_C(void *_instance, U32 _self, U32 flag) {
    [(NSControl*)_self setContinuous:flag];
}

// method '-[NSControl setDoubleValue:]'
void env___IM_NSControl_setDoubleValue_C(void *_instance, U32 _self, F64 aDouble) {
    [(NSControl*)_self setDoubleValue:aDouble];
}

// method '-[NSControl setEnabled:]'
void env___IM_NSControl_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSControl*)_self setEnabled:flag];
}

// method '-[NSControl setFloatValue:]'
void env___IM_NSControl_setFloatValue_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSControl*)_self setFloatValue:aFloat];
}

// method '-[NSControl setFloatingPointFormat:left:right:]'
void env___IM_NSControl_setFloatingPointFormat_Cleft_Cright_C(void *_instance, U32 _self, U32 autoRange, U32 leftDigits, U32 rightDigits) {
    [(NSControl*)_self setFloatingPointFormat:autoRange left:leftDigits right:rightDigits];
}

// method '-[NSControl setFont:]'
void env___IM_NSControl_setFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSControl*)_self setFont:_t1];
}

// method '-[NSControl setFormatter:]'
void env___IM_NSControl_setFormatter_C(void *_instance, U32 _self, U32 newFormatterPointer) {
    id _t1 = (id)newFormatterPointer;
    [(NSControl*)_self setFormatter:_t1];
}

// method '-[NSControl setIgnoresMultiClick:]'
void env___IM_NSControl_setIgnoresMultiClick_C(void *_instance, U32 _self, U32 flag) {
    [(NSControl*)_self setIgnoresMultiClick:flag];
}

// method '-[NSControl setIntValue:]'
void env___IM_NSControl_setIntValue_C(void *_instance, U32 _self, U32 anInt) {
    [(NSControl*)_self setIntValue:anInt];
}

// method '-[NSControl setNeedsDisplay]'
void env___IM_NSControl_setNeedsDisplay(void *_instance, U32 _self) {
    [(NSControl*)_self setNeedsDisplay];
}

// method '-[NSControl setObjectValue:]'
void env___IM_NSControl_setObjectValue_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSControl*)_self setObjectValue:_t1];
}

// method '-[NSControl setRefusesFirstResponder:]'
void env___IM_NSControl_setRefusesFirstResponder_C(void *_instance, U32 _self, U32 flag) {
    [(NSControl*)_self setRefusesFirstResponder:flag];
}

// method '-[NSControl setStringValue:]'
void env___IM_NSControl_setStringValue_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSControl*)_self setStringValue:_t1];
}

// method '-[NSControl setTag:]'
void env___IM_NSControl_setTag_C(void *_instance, U32 _self, U32 anInt) {
    [(NSControl*)_self setTag:anInt];
}

// method '-[NSControl setTarget:]'
void env___IM_NSControl_setTarget_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSControl*)_self setTarget:_t1];
}

// method '-[NSControl sizeToFit]'
void env___IM_NSControl_sizeToFit(void *_instance, U32 _self) {
    [(NSControl*)_self sizeToFit];
}

// method '-[NSControl stringValue]'
U32 env___IM_NSControl_stringValue(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self stringValue];
    return (U32)_result;
}

// method '-[NSControl tag]'
U32 env___IM_NSControl_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSControl*)_self tag];
    return (U32)_result;
}

// method '-[NSControl takeDoubleValueFrom:]'
void env___IM_NSControl_takeDoubleValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSControl*)_self takeDoubleValueFrom:_t1];
}

// method '-[NSControl takeFloatValueFrom:]'
void env___IM_NSControl_takeFloatValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSControl*)_self takeFloatValueFrom:_t1];
}

// method '-[NSControl takeIntValueFrom:]'
void env___IM_NSControl_takeIntValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSControl*)_self takeIntValueFrom:_t1];
}

// method '-[NSControl takeObjectValueFrom:]'
void env___IM_NSControl_takeObjectValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSControl*)_self takeObjectValueFrom:_t1];
}

// method '-[NSControl takeStringValueFrom:]'
void env___IM_NSControl_takeStringValueFrom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSControl*)_self takeStringValueFrom:_t1];
}

// method '-[NSControl target]'
U32 env___IM_NSControl_target(void *_instance, U32 _self) {
    id _result = (id)[(NSControl*)_self target];
    return (U32)_result;
}

// method '-[NSControl updateCell:]'
void env___IM_NSControl_updateCell_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSControl*)_self updateCell:_t1];
}

// method '-[NSControl updateCellInside:]'
void env___IM_NSControl_updateCellInside_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSControl*)_self updateCellInside:_t1];
}

// method '-[NSControl validateEditing]'
void env___IM_NSControl_validateEditing(void *_instance, U32 _self) {
    [(NSControl*)_self validateEditing];
}

// method '-[NSController commitEditing]'
U32 env___IM_NSController_commitEditing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSController*)_self commitEditing];
    return (U32)_result;
}

// method '-[NSController commitEditingWithDelegate:didCommitSelector:contextInfo:]'
void env___IM_NSController_commitEditingWithDelegate_CdidCommitSelector_CcontextInfo_C(void *_instance, U32 _self, U32 delegatePointer, U32 didCommitSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)didCommitSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(NSController*)_self commitEditingWithDelegate:_t1 didCommitSelector:_t2 contextInfo:_t3];
}

// method '-[NSController discardEditing]'
void env___IM_NSController_discardEditing(void *_instance, U32 _self) {
    [(NSController*)_self discardEditing];
}

// method '-[NSController isEditing]'
U32 env___IM_NSController_isEditing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSController*)_self isEditing];
    return (U32)_result;
}

// method '-[NSController objectDidBeginEditing:]'
void env___IM_NSController_objectDidBeginEditing_C(void *_instance, U32 _self, U32 editorPointer) {
    id _t1 = (id)editorPointer;
    [(NSController*)_self objectDidBeginEditing:_t1];
}

// method '-[NSController objectDidEndEditing:]'
void env___IM_NSController_objectDidEndEditing_C(void *_instance, U32 _self, U32 editorPointer) {
    id _t1 = (id)editorPointer;
    [(NSController*)_self objectDidEndEditing:_t1];
}

// method '+[NSCursor IBeamCursor]'
U32 env___CM_NSCursor_IBeamCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class IBeamCursor];
    return (U32)_result;
}

// method '+[NSCursor arrowCursor]'
U32 env___CM_NSCursor_arrowCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class arrowCursor];
    return (U32)_result;
}

// method '+[NSCursor closedHandCursor]'
U32 env___CM_NSCursor_closedHandCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class closedHandCursor];
    return (U32)_result;
}

// method '+[NSCursor crosshairCursor]'
U32 env___CM_NSCursor_crosshairCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class crosshairCursor];
    return (U32)_result;
}

// method '+[NSCursor currentCursor]'
U32 env___CM_NSCursor_currentCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class currentCursor];
    return (U32)_result;
}

// method '+[NSCursor disappearingItemCursor]'
U32 env___CM_NSCursor_disappearingItemCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class disappearingItemCursor];
    return (U32)_result;
}

// method '+[NSCursor hide]'
void env___CM_NSCursor_hide(void *_instance, U32 _class) {
    [(Class)_class hide];
}

// method '-[NSCursor hotSpot]'
void env___IM_NSCursor_hotSpot(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSCursor*)_self hotSpot];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSCursor image]'
U32 env___IM_NSCursor_image(void *_instance, U32 _self) {
    id _result = (id)[(NSCursor*)_self image];
    return (U32)_result;
}

// method '-[NSCursor initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:]'
U32 env___IM_NSCursor_initWithImage_CforegroundColorHint_CbackgroundColorHint_ChotSpot_C(void *_instance, U32 _self, U32 newImagePointer, U32 fgPointer, U32 bgPointer, U32 hotSpotIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)newImagePointer;
    id _t2 = (id)fgPointer;
    id _t3 = (id)bgPointer;
    NSPoint _t4 = *(NSPoint*)(_mem->data + hotSpotIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t4.x);
    swap_f(&_t4.y);
    #endif
    id _result = (id)[(NSCursor*)_self initWithImage:_t1 foregroundColorHint:_t2 backgroundColorHint:_t3 hotSpot:_t4];
    return (U32)_result;
}

// method '-[NSCursor initWithImage:hotSpot:]'
U32 env___IM_NSCursor_initWithImage_ChotSpot_C(void *_instance, U32 _self, U32 newImagePointer, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)newImagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    id _result = (id)[(NSCursor*)_self initWithImage:_t1 hotSpot:_t2];
    return (U32)_result;
}

// method '-[NSCursor isSetOnMouseEntered]'
U32 env___IM_NSCursor_isSetOnMouseEntered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCursor*)_self isSetOnMouseEntered];
    return (U32)_result;
}

// method '-[NSCursor isSetOnMouseExited]'
U32 env___IM_NSCursor_isSetOnMouseExited(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSCursor*)_self isSetOnMouseExited];
    return (U32)_result;
}

// method '-[NSCursor mouseEntered:]'
void env___IM_NSCursor_mouseEntered_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSCursor*)_self mouseEntered:_t1];
}

// method '-[NSCursor mouseExited:]'
void env___IM_NSCursor_mouseExited_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSCursor*)_self mouseExited:_t1];
}

// method '+[NSCursor openHandCursor]'
U32 env___CM_NSCursor_openHandCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class openHandCursor];
    return (U32)_result;
}

// method '+[NSCursor pointingHandCursor]'
U32 env___CM_NSCursor_pointingHandCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class pointingHandCursor];
    return (U32)_result;
}

// method '+[NSCursor pop]'
void env___CM_NSCursor_pop(void *_instance, U32 _class) {
    [(Class)_class pop];
}

// method '-[NSCursor pop]'
void env___IM_NSCursor_pop(void *_instance, U32 _self) {
    [(NSCursor*)_self pop];
}

// method '-[NSCursor push]'
void env___IM_NSCursor_push(void *_instance, U32 _self) {
    [(NSCursor*)_self push];
}

// method '+[NSCursor resizeDownCursor]'
U32 env___CM_NSCursor_resizeDownCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class resizeDownCursor];
    return (U32)_result;
}

// method '+[NSCursor resizeLeftCursor]'
U32 env___CM_NSCursor_resizeLeftCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class resizeLeftCursor];
    return (U32)_result;
}

// method '+[NSCursor resizeLeftRightCursor]'
U32 env___CM_NSCursor_resizeLeftRightCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class resizeLeftRightCursor];
    return (U32)_result;
}

// method '+[NSCursor resizeRightCursor]'
U32 env___CM_NSCursor_resizeRightCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class resizeRightCursor];
    return (U32)_result;
}

// method '+[NSCursor resizeUpCursor]'
U32 env___CM_NSCursor_resizeUpCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class resizeUpCursor];
    return (U32)_result;
}

// method '+[NSCursor resizeUpDownCursor]'
U32 env___CM_NSCursor_resizeUpDownCursor(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class resizeUpDownCursor];
    return (U32)_result;
}

// method '-[NSCursor set]'
void env___IM_NSCursor_set(void *_instance, U32 _self) {
    [(NSCursor*)_self set];
}

// method '+[NSCursor setHiddenUntilMouseMoves:]'
void env___CM_NSCursor_setHiddenUntilMouseMoves_C(void *_instance, U32 _class, U32 flag) {
    [(Class)_class setHiddenUntilMouseMoves:flag];
}

// method '-[NSCursor setOnMouseEntered:]'
void env___IM_NSCursor_setOnMouseEntered_C(void *_instance, U32 _self, U32 flag) {
    [(NSCursor*)_self setOnMouseEntered:flag];
}

// method '-[NSCursor setOnMouseExited:]'
void env___IM_NSCursor_setOnMouseExited_C(void *_instance, U32 _self, U32 flag) {
    [(NSCursor*)_self setOnMouseExited:flag];
}

// method '+[NSCursor unhide]'
void env___CM_NSCursor_unhide(void *_instance, U32 _class) {
    [(Class)_class unhide];
}

// method '-[NSCustomImageRep delegate]'
U32 env___IM_NSCustomImageRep_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSCustomImageRep*)_self delegate];
    return (U32)_result;
}

// method '-[NSCustomImageRep drawSelector]'
U32 env___IM_NSCustomImageRep_drawSelector(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSCustomImageRep*)_self drawSelector];
    return (U32)_result;
}

// method '-[NSCustomImageRep initWithDrawSelector:delegate:]'
U32 env___IM_NSCustomImageRep_initWithDrawSelector_Cdelegate_C(void *_instance, U32 _self, U32 aMethodPointer, U32 anObjectPointer) {
    SEL _t1 = (SEL)aMethodPointer;
    id _t2 = (id)anObjectPointer;
    id _result = (id)[(NSCustomImageRep*)_self initWithDrawSelector:_t1 delegate:_t2];
    return (U32)_result;
}

// method '-[NSDatePicker backgroundColor]'
U32 env___IM_NSDatePicker_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSDatePicker calendar]'
U32 env___IM_NSDatePicker_calendar(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self calendar];
    return (U32)_result;
}

// method '-[NSDatePicker datePickerElements]'
U32 env___IM_NSDatePicker_datePickerElements(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSDatePicker*)_self datePickerElements];
    return (U32)_result;
}

// method '-[NSDatePicker datePickerMode]'
U32 env___IM_NSDatePicker_datePickerMode(void *_instance, U32 _self) {
    int _result = (int)[(NSDatePicker*)_self datePickerMode];
    return (U32)_result;
}

// method '-[NSDatePicker datePickerStyle]'
U32 env___IM_NSDatePicker_datePickerStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSDatePicker*)_self datePickerStyle];
    return (U32)_result;
}

// method '-[NSDatePicker dateValue]'
U32 env___IM_NSDatePicker_dateValue(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self dateValue];
    return (U32)_result;
}

// method '-[NSDatePicker delegate]'
U32 env___IM_NSDatePicker_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self delegate];
    return (U32)_result;
}

// method '-[NSDatePicker drawsBackground]'
U32 env___IM_NSDatePicker_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDatePicker*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSDatePicker isBezeled]'
U32 env___IM_NSDatePicker_isBezeled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDatePicker*)_self isBezeled];
    return (U32)_result;
}

// method '-[NSDatePicker isBordered]'
U32 env___IM_NSDatePicker_isBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDatePicker*)_self isBordered];
    return (U32)_result;
}

// method '-[NSDatePicker locale]'
U32 env___IM_NSDatePicker_locale(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self locale];
    return (U32)_result;
}

// method '-[NSDatePicker maxDate]'
U32 env___IM_NSDatePicker_maxDate(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self maxDate];
    return (U32)_result;
}

// method '-[NSDatePicker minDate]'
U32 env___IM_NSDatePicker_minDate(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self minDate];
    return (U32)_result;
}

// method '-[NSDatePicker setBackgroundColor:]'
void env___IM_NSDatePicker_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSDatePicker*)_self setBackgroundColor:_t1];
}

// method '-[NSDatePicker setBezeled:]'
void env___IM_NSDatePicker_setBezeled_C(void *_instance, U32 _self, U32 flag) {
    [(NSDatePicker*)_self setBezeled:flag];
}

// method '-[NSDatePicker setBordered:]'
void env___IM_NSDatePicker_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSDatePicker*)_self setBordered:flag];
}

// method '-[NSDatePicker setCalendar:]'
void env___IM_NSDatePicker_setCalendar_C(void *_instance, U32 _self, U32 newCalendarPointer) {
    id _t1 = (id)newCalendarPointer;
    [(NSDatePicker*)_self setCalendar:_t1];
}

// method '-[NSDatePicker setDatePickerElements:]'
void env___IM_NSDatePicker_setDatePickerElements_C(void *_instance, U32 _self, U32 elementFlags) {
    [(NSDatePicker*)_self setDatePickerElements:elementFlags];
}

// method '-[NSDatePicker setDatePickerMode:]'
void env___IM_NSDatePicker_setDatePickerMode_C(void *_instance, U32 _self, U32 newMode) {
    [(NSDatePicker*)_self setDatePickerMode:newMode];
}

// method '-[NSDatePicker setDatePickerStyle:]'
void env___IM_NSDatePicker_setDatePickerStyle_C(void *_instance, U32 _self, U32 newStyle) {
    [(NSDatePicker*)_self setDatePickerStyle:newStyle];
}

// method '-[NSDatePicker setDateValue:]'
void env___IM_NSDatePicker_setDateValue_C(void *_instance, U32 _self, U32 newStartDatePointer) {
    id _t1 = (id)newStartDatePointer;
    [(NSDatePicker*)_self setDateValue:_t1];
}

// method '-[NSDatePicker setDelegate:]'
void env___IM_NSDatePicker_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSDatePicker*)_self setDelegate:_t1];
}

// method '-[NSDatePicker setDrawsBackground:]'
void env___IM_NSDatePicker_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSDatePicker*)_self setDrawsBackground:flag];
}

// method '-[NSDatePicker setLocale:]'
void env___IM_NSDatePicker_setLocale_C(void *_instance, U32 _self, U32 newLocalePointer) {
    id _t1 = (id)newLocalePointer;
    [(NSDatePicker*)_self setLocale:_t1];
}

// method '-[NSDatePicker setMaxDate:]'
void env___IM_NSDatePicker_setMaxDate_C(void *_instance, U32 _self, U32 datePointer) {
    id _t1 = (id)datePointer;
    [(NSDatePicker*)_self setMaxDate:_t1];
}

// method '-[NSDatePicker setMinDate:]'
void env___IM_NSDatePicker_setMinDate_C(void *_instance, U32 _self, U32 datePointer) {
    id _t1 = (id)datePointer;
    [(NSDatePicker*)_self setMinDate:_t1];
}

// method '-[NSDatePicker setTextColor:]'
void env___IM_NSDatePicker_setTextColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSDatePicker*)_self setTextColor:_t1];
}

// method '-[NSDatePicker setTimeInterval:]'
void env___IM_NSDatePicker_setTimeInterval_C(void *_instance, U32 _self, F64 newTimeInterval) {
    [(NSDatePicker*)_self setTimeInterval:newTimeInterval];
}

// method '-[NSDatePicker setTimeZone:]'
void env___IM_NSDatePicker_setTimeZone_C(void *_instance, U32 _self, U32 newTimeZonePointer) {
    id _t1 = (id)newTimeZonePointer;
    [(NSDatePicker*)_self setTimeZone:_t1];
}

// method '-[NSDatePicker textColor]'
U32 env___IM_NSDatePicker_textColor(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self textColor];
    return (U32)_result;
}

// method '-[NSDatePicker timeInterval]'
F64 env___IM_NSDatePicker_timeInterval(void *_instance, U32 _self) {
    double _result = (double)[(NSDatePicker*)_self timeInterval];
    return (F64)_result;
}

// method '-[NSDatePicker timeZone]'
U32 env___IM_NSDatePicker_timeZone(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePicker*)_self timeZone];
    return (U32)_result;
}

// method '-[NSDatePickerCell backgroundColor]'
U32 env___IM_NSDatePickerCell_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSDatePickerCell calendar]'
U32 env___IM_NSDatePickerCell_calendar(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self calendar];
    return (U32)_result;
}

// method '-[NSDatePickerCell datePickerElements]'
U32 env___IM_NSDatePickerCell_datePickerElements(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSDatePickerCell*)_self datePickerElements];
    return (U32)_result;
}

// method '-[NSDatePickerCell datePickerMode]'
U32 env___IM_NSDatePickerCell_datePickerMode(void *_instance, U32 _self) {
    int _result = (int)[(NSDatePickerCell*)_self datePickerMode];
    return (U32)_result;
}

// method '-[NSDatePickerCell datePickerStyle]'
U32 env___IM_NSDatePickerCell_datePickerStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSDatePickerCell*)_self datePickerStyle];
    return (U32)_result;
}

// method '-[NSDatePickerCell dateValue]'
U32 env___IM_NSDatePickerCell_dateValue(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self dateValue];
    return (U32)_result;
}

// method '-[NSDatePickerCell delegate]'
U32 env___IM_NSDatePickerCell_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self delegate];
    return (U32)_result;
}

// method '-[NSDatePickerCell drawsBackground]'
U32 env___IM_NSDatePickerCell_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDatePickerCell*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSDatePickerCell locale]'
U32 env___IM_NSDatePickerCell_locale(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self locale];
    return (U32)_result;
}

// method '-[NSDatePickerCell maxDate]'
U32 env___IM_NSDatePickerCell_maxDate(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self maxDate];
    return (U32)_result;
}

// method '-[NSDatePickerCell minDate]'
U32 env___IM_NSDatePickerCell_minDate(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self minDate];
    return (U32)_result;
}

// method '-[NSDatePickerCell setBackgroundColor:]'
void env___IM_NSDatePickerCell_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSDatePickerCell*)_self setBackgroundColor:_t1];
}

// method '-[NSDatePickerCell setCalendar:]'
void env___IM_NSDatePickerCell_setCalendar_C(void *_instance, U32 _self, U32 newCalendarPointer) {
    id _t1 = (id)newCalendarPointer;
    [(NSDatePickerCell*)_self setCalendar:_t1];
}

// method '-[NSDatePickerCell setDatePickerElements:]'
void env___IM_NSDatePickerCell_setDatePickerElements_C(void *_instance, U32 _self, U32 elementFlags) {
    [(NSDatePickerCell*)_self setDatePickerElements:elementFlags];
}

// method '-[NSDatePickerCell setDatePickerMode:]'
void env___IM_NSDatePickerCell_setDatePickerMode_C(void *_instance, U32 _self, U32 newMode) {
    [(NSDatePickerCell*)_self setDatePickerMode:newMode];
}

// method '-[NSDatePickerCell setDatePickerStyle:]'
void env___IM_NSDatePickerCell_setDatePickerStyle_C(void *_instance, U32 _self, U32 newStyle) {
    [(NSDatePickerCell*)_self setDatePickerStyle:newStyle];
}

// method '-[NSDatePickerCell setDateValue:]'
void env___IM_NSDatePickerCell_setDateValue_C(void *_instance, U32 _self, U32 newStartDatePointer) {
    id _t1 = (id)newStartDatePointer;
    [(NSDatePickerCell*)_self setDateValue:_t1];
}

// method '-[NSDatePickerCell setDelegate:]'
void env___IM_NSDatePickerCell_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSDatePickerCell*)_self setDelegate:_t1];
}

// method '-[NSDatePickerCell setDrawsBackground:]'
void env___IM_NSDatePickerCell_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSDatePickerCell*)_self setDrawsBackground:flag];
}

// method '-[NSDatePickerCell setLocale:]'
void env___IM_NSDatePickerCell_setLocale_C(void *_instance, U32 _self, U32 newLocalePointer) {
    id _t1 = (id)newLocalePointer;
    [(NSDatePickerCell*)_self setLocale:_t1];
}

// method '-[NSDatePickerCell setMaxDate:]'
void env___IM_NSDatePickerCell_setMaxDate_C(void *_instance, U32 _self, U32 datePointer) {
    id _t1 = (id)datePointer;
    [(NSDatePickerCell*)_self setMaxDate:_t1];
}

// method '-[NSDatePickerCell setMinDate:]'
void env___IM_NSDatePickerCell_setMinDate_C(void *_instance, U32 _self, U32 datePointer) {
    id _t1 = (id)datePointer;
    [(NSDatePickerCell*)_self setMinDate:_t1];
}

// method '-[NSDatePickerCell setTextColor:]'
void env___IM_NSDatePickerCell_setTextColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSDatePickerCell*)_self setTextColor:_t1];
}

// method '-[NSDatePickerCell setTimeInterval:]'
void env___IM_NSDatePickerCell_setTimeInterval_C(void *_instance, U32 _self, F64 newTimeInterval) {
    [(NSDatePickerCell*)_self setTimeInterval:newTimeInterval];
}

// method '-[NSDatePickerCell setTimeZone:]'
void env___IM_NSDatePickerCell_setTimeZone_C(void *_instance, U32 _self, U32 newTimeZonePointer) {
    id _t1 = (id)newTimeZonePointer;
    [(NSDatePickerCell*)_self setTimeZone:_t1];
}

// method '-[NSDatePickerCell textColor]'
U32 env___IM_NSDatePickerCell_textColor(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self textColor];
    return (U32)_result;
}

// method '-[NSDatePickerCell timeInterval]'
F64 env___IM_NSDatePickerCell_timeInterval(void *_instance, U32 _self) {
    double _result = (double)[(NSDatePickerCell*)_self timeInterval];
    return (F64)_result;
}

// method '-[NSDatePickerCell timeZone]'
U32 env___IM_NSDatePickerCell_timeZone(void *_instance, U32 _self) {
    id _result = (id)[(NSDatePickerCell*)_self timeZone];
    return (U32)_result;
}

// method '-[NSDocument addWindowController:]'
void env___IM_NSDocument_addWindowController_C(void *_instance, U32 _self, U32 windowControllerPointer) {
    id _t1 = (id)windowControllerPointer;
    [(NSDocument*)_self addWindowController:_t1];
}

// method '-[NSDocument autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:]'
void env___IM_NSDocument_autosaveDocumentWithDelegate_CdidAutosaveSelector_CcontextInfo_C(void *_instance, U32 _self, U32 delegatePointer, U32 didAutosaveSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)didAutosaveSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(NSDocument*)_self autosaveDocumentWithDelegate:_t1 didAutosaveSelector:_t2 contextInfo:_t3];
}

// method '-[NSDocument autosavedContentsFileURL]'
U32 env___IM_NSDocument_autosavedContentsFileURL(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self autosavedContentsFileURL];
    return (U32)_result;
}

// method '-[NSDocument autosavingFileType]'
U32 env___IM_NSDocument_autosavingFileType(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self autosavingFileType];
    return (U32)_result;
}

// method '-[NSDocument canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:]'
void env___IM_NSDocument_canCloseDocumentWithDelegate_CshouldCloseSelector_CcontextInfo_C(void *_instance, U32 _self, U32 delegatePointer, U32 shouldCloseSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)shouldCloseSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(NSDocument*)_self canCloseDocumentWithDelegate:_t1 shouldCloseSelector:_t2 contextInfo:_t3];
}

// method '-[NSDocument close]'
void env___IM_NSDocument_close(void *_instance, U32 _self) {
    [(NSDocument*)_self close];
}

// method '-[NSDocument dataOfType:error:]'
U32 env___IM_NSDocument_dataOfType_Cerror_C(void *_instance, U32 _self, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)typeNamePointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self dataOfType:_t1 error:_t2];
    return (U32)_result;
}

// method '-[NSDocument dataRepresentationOfType:]'
U32 env___IM_NSDocument_dataRepresentationOfType_C(void *_instance, U32 _self, U32 typePointer) {
    id _t1 = (id)typePointer;
    id _result = (id)[(NSDocument*)_self dataRepresentationOfType:_t1];
    return (U32)_result;
}

// method '-[NSDocument displayName]'
U32 env___IM_NSDocument_displayName(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self displayName];
    return (U32)_result;
}

// method '-[NSDocument fileAttributesToWriteToFile:ofType:saveOperation:]'
U32 env___IM_NSDocument_fileAttributesToWriteToFile_CofType_CsaveOperation_C(void *_instance, U32 _self, U32 fullDocumentPathPointer, U32 documentTypeNamePointer, U32 saveOperationType) {
    id _t1 = (id)fullDocumentPathPointer;
    id _t2 = (id)documentTypeNamePointer;
    id _result = (id)[(NSDocument*)_self fileAttributesToWriteToFile:_t1 ofType:_t2 saveOperation:saveOperationType];
    return (U32)_result;
}

// method '-[NSDocument fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:]'
U32 env___IM_NSDocument_fileAttributesToWriteToURL_CofType_CforSaveOperation_CoriginalContentsURL_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 saveOperation, U32 absoluteOriginalContentsURLPointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id _t3 = (id)absoluteOriginalContentsURLPointer;
    id* _t4 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self fileAttributesToWriteToURL:_t1 ofType:_t2 forSaveOperation:saveOperation originalContentsURL:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSDocument fileModificationDate]'
U32 env___IM_NSDocument_fileModificationDate(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self fileModificationDate];
    return (U32)_result;
}

// method '-[NSDocument fileName]'
U32 env___IM_NSDocument_fileName(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self fileName];
    return (U32)_result;
}

// method '-[NSDocument fileNameExtensionWasHiddenInLastRunSavePanel]'
U32 env___IM_NSDocument_fileNameExtensionWasHiddenInLastRunSavePanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocument*)_self fileNameExtensionWasHiddenInLastRunSavePanel];
    return (U32)_result;
}

// method '-[NSDocument fileType]'
U32 env___IM_NSDocument_fileType(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self fileType];
    return (U32)_result;
}

// method '-[NSDocument fileTypeFromLastRunSavePanel]'
U32 env___IM_NSDocument_fileTypeFromLastRunSavePanel(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self fileTypeFromLastRunSavePanel];
    return (U32)_result;
}

// method '-[NSDocument fileURL]'
U32 env___IM_NSDocument_fileURL(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self fileURL];
    return (U32)_result;
}

// method '-[NSDocument fileWrapperOfType:error:]'
U32 env___IM_NSDocument_fileWrapperOfType_Cerror_C(void *_instance, U32 _self, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)typeNamePointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self fileWrapperOfType:_t1 error:_t2];
    return (U32)_result;
}

// method '-[NSDocument fileWrapperRepresentationOfType:]'
U32 env___IM_NSDocument_fileWrapperRepresentationOfType_C(void *_instance, U32 _self, U32 typePointer) {
    id _t1 = (id)typePointer;
    id _result = (id)[(NSDocument*)_self fileWrapperRepresentationOfType:_t1];
    return (U32)_result;
}

// method '-[NSDocument handleCloseScriptCommand:]'
U32 env___IM_NSDocument_handleCloseScriptCommand_C(void *_instance, U32 _self, U32 commandPointer) {
    id _t1 = (id)commandPointer;
    id _result = (id)[(NSDocument*)_self handleCloseScriptCommand:_t1];
    return (U32)_result;
}

// method '-[NSDocument handlePrintScriptCommand:]'
U32 env___IM_NSDocument_handlePrintScriptCommand_C(void *_instance, U32 _self, U32 commandPointer) {
    id _t1 = (id)commandPointer;
    id _result = (id)[(NSDocument*)_self handlePrintScriptCommand:_t1];
    return (U32)_result;
}

// method '-[NSDocument handleSaveScriptCommand:]'
U32 env___IM_NSDocument_handleSaveScriptCommand_C(void *_instance, U32 _self, U32 commandPointer) {
    id _t1 = (id)commandPointer;
    id _result = (id)[(NSDocument*)_self handleSaveScriptCommand:_t1];
    return (U32)_result;
}

// method '-[NSDocument hasUnautosavedChanges]'
U32 env___IM_NSDocument_hasUnautosavedChanges(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocument*)_self hasUnautosavedChanges];
    return (U32)_result;
}

// method '-[NSDocument hasUndoManager]'
U32 env___IM_NSDocument_hasUndoManager(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocument*)_self hasUndoManager];
    return (U32)_result;
}

// method '-[NSDocument init]'
U32 env___IM_NSDocument_init(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self init];
    return (U32)_result;
}

// method '-[NSDocument initForURL:withContentsOfURL:ofType:error:]'
U32 env___IM_NSDocument_initForURL_CwithContentsOfURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteDocumentURLPointer, U32 absoluteDocumentContentsURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteDocumentURLPointer;
    id _t2 = (id)absoluteDocumentContentsURLPointer;
    id _t3 = (id)typeNamePointer;
    id* _t4 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self initForURL:_t1 withContentsOfURL:_t2 ofType:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSDocument initWithContentsOfFile:ofType:]'
U32 env___IM_NSDocument_initWithContentsOfFile_CofType_C(void *_instance, U32 _self, U32 absolutePathPointer, U32 typeNamePointer) {
    id _t1 = (id)absolutePathPointer;
    id _t2 = (id)typeNamePointer;
    id _result = (id)[(NSDocument*)_self initWithContentsOfFile:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument initWithContentsOfURL:ofType:]'
U32 env___IM_NSDocument_initWithContentsOfURL_CofType_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id _result = (id)[(NSDocument*)_self initWithContentsOfURL:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument initWithContentsOfURL:ofType:error:]'
U32 env___IM_NSDocument_initWithContentsOfURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self initWithContentsOfURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocument initWithType:error:]'
U32 env___IM_NSDocument_initWithType_Cerror_C(void *_instance, U32 _self, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)typeNamePointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self initWithType:_t1 error:_t2];
    return (U32)_result;
}

// method '-[NSDocument isDocumentEdited]'
U32 env___IM_NSDocument_isDocumentEdited(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocument*)_self isDocumentEdited];
    return (U32)_result;
}

// method '+[NSDocument isNativeType:]'
U32 env___CM_NSDocument_isNativeType_C(void *_instance, U32 _class, U32 typePointer) {
    id _t1 = (id)typePointer;
    BOOL _result = (BOOL)[(Class)_class isNativeType:_t1];
    return (U32)_result;
}

// method '-[NSDocument keepBackupFile]'
U32 env___IM_NSDocument_keepBackupFile(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocument*)_self keepBackupFile];
    return (U32)_result;
}

// method '-[NSDocument lastComponentOfFileName]'
U32 env___IM_NSDocument_lastComponentOfFileName(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self lastComponentOfFileName];
    return (U32)_result;
}

// method '-[NSDocument loadDataRepresentation:ofType:]'
U32 env___IM_NSDocument_loadDataRepresentation_CofType_C(void *_instance, U32 _self, U32 dataPointer, U32 typePointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self loadDataRepresentation:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument loadFileWrapperRepresentation:ofType:]'
U32 env___IM_NSDocument_loadFileWrapperRepresentation_CofType_C(void *_instance, U32 _self, U32 wrapperPointer, U32 typePointer) {
    id _t1 = (id)wrapperPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self loadFileWrapperRepresentation:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument makeWindowControllers]'
void env___IM_NSDocument_makeWindowControllers(void *_instance, U32 _self) {
    [(NSDocument*)_self makeWindowControllers];
}

// method '-[NSDocument objectSpecifier]'
U32 env___IM_NSDocument_objectSpecifier(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self objectSpecifier];
    return (U32)_result;
}

// method '-[NSDocument preparePageLayout:]'
U32 env___IM_NSDocument_preparePageLayout_C(void *_instance, U32 _self, U32 pageLayoutPointer) {
    id _t1 = (id)pageLayoutPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self preparePageLayout:_t1];
    return (U32)_result;
}

// method '-[NSDocument prepareSavePanel:]'
U32 env___IM_NSDocument_prepareSavePanel_C(void *_instance, U32 _self, U32 savePanelPointer) {
    id _t1 = (id)savePanelPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self prepareSavePanel:_t1];
    return (U32)_result;
}

// method '-[NSDocument presentError:]'
U32 env___IM_NSDocument_presentError_C(void *_instance, U32 _self, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self presentError:_t1];
    return (U32)_result;
}

// method '-[NSDocument presentError:modalForWindow:delegate:didPresentSelector:contextInfo:]'
void env___IM_NSDocument_presentError_CmodalForWindow_Cdelegate_CdidPresentSelector_CcontextInfo_C(void *_instance, U32 _self, U32 errorPointer, U32 windowPointer, U32 delegatePointer, U32 didPresentSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)errorPointer;
    id _t2 = (id)windowPointer;
    id _t3 = (id)delegatePointer;
    SEL _t4 = (SEL)didPresentSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSDocument*)_self presentError:_t1 modalForWindow:_t2 delegate:_t3 didPresentSelector:_t4 contextInfo:_t5];
}

// method '-[NSDocument printDocument:]'
void env___IM_NSDocument_printDocument_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocument*)_self printDocument:_t1];
}

// method '-[NSDocument printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:]'
void env___IM_NSDocument_printDocumentWithSettings_CshowPrintPanel_Cdelegate_CdidPrintSelector_CcontextInfo_C(void *_instance, U32 _self, U32 printSettingsPointer, U32 showPrintPanel, U32 delegatePointer, U32 didPrintSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)printSettingsPointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didPrintSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSDocument*)_self printDocumentWithSettings:_t1 showPrintPanel:showPrintPanel delegate:_t2 didPrintSelector:_t3 contextInfo:_t4];
}

// method '-[NSDocument printInfo]'
U32 env___IM_NSDocument_printInfo(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self printInfo];
    return (U32)_result;
}

// method '-[NSDocument printOperationWithSettings:error:]'
U32 env___IM_NSDocument_printOperationWithSettings_Cerror_C(void *_instance, U32 _self, U32 printSettingsPointer, U32 outErrorPointer) {
    id _t1 = (id)printSettingsPointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocument*)_self printOperationWithSettings:_t1 error:_t2];
    return (U32)_result;
}

// method '-[NSDocument printShowingPrintPanel:]'
void env___IM_NSDocument_printShowingPrintPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSDocument*)_self printShowingPrintPanel:flag];
}

// method '-[NSDocument readFromData:ofType:error:]'
U32 env___IM_NSDocument_readFromData_CofType_Cerror_C(void *_instance, U32 _self, U32 dataPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self readFromData:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocument readFromFile:ofType:]'
U32 env___IM_NSDocument_readFromFile_CofType_C(void *_instance, U32 _self, U32 fileNamePointer, U32 typePointer) {
    id _t1 = (id)fileNamePointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self readFromFile:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument readFromFileWrapper:ofType:error:]'
U32 env___IM_NSDocument_readFromFileWrapper_CofType_Cerror_C(void *_instance, U32 _self, U32 fileWrapperPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)fileWrapperPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self readFromFileWrapper:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocument readFromURL:ofType:]'
U32 env___IM_NSDocument_readFromURL_CofType_C(void *_instance, U32 _self, U32 urlPointer, U32 typePointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self readFromURL:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument readFromURL:ofType:error:]'
U32 env___IM_NSDocument_readFromURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self readFromURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '+[NSDocument readableTypes]'
U32 env___CM_NSDocument_readableTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class readableTypes];
    return (U32)_result;
}

// method '-[NSDocument removeWindowController:]'
void env___IM_NSDocument_removeWindowController_C(void *_instance, U32 _self, U32 windowControllerPointer) {
    id _t1 = (id)windowControllerPointer;
    [(NSDocument*)_self removeWindowController:_t1];
}

// method '-[NSDocument revertDocumentToSaved:]'
void env___IM_NSDocument_revertDocumentToSaved_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocument*)_self revertDocumentToSaved:_t1];
}

// method '-[NSDocument revertToContentsOfURL:ofType:error:]'
U32 env___IM_NSDocument_revertToContentsOfURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self revertToContentsOfURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocument revertToSavedFromFile:ofType:]'
U32 env___IM_NSDocument_revertToSavedFromFile_CofType_C(void *_instance, U32 _self, U32 fileNamePointer, U32 typePointer) {
    id _t1 = (id)fileNamePointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self revertToSavedFromFile:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument revertToSavedFromURL:ofType:]'
U32 env___IM_NSDocument_revertToSavedFromURL_CofType_C(void *_instance, U32 _self, U32 urlPointer, U32 typePointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self revertToSavedFromURL:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument runModalPageLayoutWithPrintInfo:]'
U32 env___IM_NSDocument_runModalPageLayoutWithPrintInfo_C(void *_instance, U32 _self, U32 printInfoPointer) {
    id _t1 = (id)printInfoPointer;
    int _result = (int)[(NSDocument*)_self runModalPageLayoutWithPrintInfo:_t1];
    return (U32)_result;
}

// method '-[NSDocument runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:]'
void env___IM_NSDocument_runModalPageLayoutWithPrintInfo_Cdelegate_CdidRunSelector_CcontextInfo_C(void *_instance, U32 _self, U32 printInfoPointer, U32 delegatePointer, U32 didRunSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)printInfoPointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didRunSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSDocument*)_self runModalPageLayoutWithPrintInfo:_t1 delegate:_t2 didRunSelector:_t3 contextInfo:_t4];
}

// method '-[NSDocument runModalPrintOperation:delegate:didRunSelector:contextInfo:]'
void env___IM_NSDocument_runModalPrintOperation_Cdelegate_CdidRunSelector_CcontextInfo_C(void *_instance, U32 _self, U32 printOperationPointer, U32 delegatePointer, U32 didRunSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)printOperationPointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didRunSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSDocument*)_self runModalPrintOperation:_t1 delegate:_t2 didRunSelector:_t3 contextInfo:_t4];
}

// method '-[NSDocument runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:]'
void env___IM_NSDocument_runModalSavePanelForSaveOperation_Cdelegate_CdidSaveSelector_CcontextInfo_C(void *_instance, U32 _self, U32 saveOperation, U32 delegatePointer, U32 didSaveSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)didSaveSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(NSDocument*)_self runModalSavePanelForSaveOperation:saveOperation delegate:_t1 didSaveSelector:_t2 contextInfo:_t3];
}

// method '-[NSDocument runPageLayout:]'
void env___IM_NSDocument_runPageLayout_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocument*)_self runPageLayout:_t1];
}

// method '-[NSDocument saveDocument:]'
void env___IM_NSDocument_saveDocument_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocument*)_self saveDocument:_t1];
}

// method '-[NSDocument saveDocumentAs:]'
void env___IM_NSDocument_saveDocumentAs_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocument*)_self saveDocumentAs:_t1];
}

// method '-[NSDocument saveDocumentTo:]'
void env___IM_NSDocument_saveDocumentTo_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocument*)_self saveDocumentTo:_t1];
}

// method '-[NSDocument saveDocumentWithDelegate:didSaveSelector:contextInfo:]'
void env___IM_NSDocument_saveDocumentWithDelegate_CdidSaveSelector_CcontextInfo_C(void *_instance, U32 _self, U32 delegatePointer, U32 didSaveSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)didSaveSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(NSDocument*)_self saveDocumentWithDelegate:_t1 didSaveSelector:_t2 contextInfo:_t3];
}

// method '-[NSDocument saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:]'
void env___IM_NSDocument_saveToFile_CsaveOperation_Cdelegate_CdidSaveSelector_CcontextInfo_C(void *_instance, U32 _self, U32 fileNamePointer, U32 saveOperation, U32 delegatePointer, U32 didSaveSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)fileNamePointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didSaveSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSDocument*)_self saveToFile:_t1 saveOperation:saveOperation delegate:_t2 didSaveSelector:_t3 contextInfo:_t4];
}

// method '-[NSDocument saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:]'
void env___IM_NSDocument_saveToURL_CofType_CforSaveOperation_Cdelegate_CdidSaveSelector_CcontextInfo_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 saveOperation, U32 delegatePointer, U32 didSaveSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id _t3 = (id)delegatePointer;
    SEL _t4 = (SEL)didSaveSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSDocument*)_self saveToURL:_t1 ofType:_t2 forSaveOperation:saveOperation delegate:_t3 didSaveSelector:_t4 contextInfo:_t5];
}

// method '-[NSDocument saveToURL:ofType:forSaveOperation:error:]'
U32 env___IM_NSDocument_saveToURL_CofType_CforSaveOperation_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 saveOperation, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self saveToURL:_t1 ofType:_t2 forSaveOperation:saveOperation error:_t3];
    return (U32)_result;
}

// method '-[NSDocument setAutosavedContentsFileURL:]'
void env___IM_NSDocument_setAutosavedContentsFileURL_C(void *_instance, U32 _self, U32 absoluteURLPointer) {
    id _t1 = (id)absoluteURLPointer;
    [(NSDocument*)_self setAutosavedContentsFileURL:_t1];
}

// method '-[NSDocument setFileModificationDate:]'
void env___IM_NSDocument_setFileModificationDate_C(void *_instance, U32 _self, U32 modificationDatePointer) {
    id _t1 = (id)modificationDatePointer;
    [(NSDocument*)_self setFileModificationDate:_t1];
}

// method '-[NSDocument setFileName:]'
void env___IM_NSDocument_setFileName_C(void *_instance, U32 _self, U32 fileNamePointer) {
    id _t1 = (id)fileNamePointer;
    [(NSDocument*)_self setFileName:_t1];
}

// method '-[NSDocument setFileType:]'
void env___IM_NSDocument_setFileType_C(void *_instance, U32 _self, U32 typeNamePointer) {
    id _t1 = (id)typeNamePointer;
    [(NSDocument*)_self setFileType:_t1];
}

// method '-[NSDocument setFileURL:]'
void env___IM_NSDocument_setFileURL_C(void *_instance, U32 _self, U32 absoluteURLPointer) {
    id _t1 = (id)absoluteURLPointer;
    [(NSDocument*)_self setFileURL:_t1];
}

// method '-[NSDocument setHasUndoManager:]'
void env___IM_NSDocument_setHasUndoManager_C(void *_instance, U32 _self, U32 flag) {
    [(NSDocument*)_self setHasUndoManager:flag];
}

// method '-[NSDocument setLastComponentOfFileName:]'
void env___IM_NSDocument_setLastComponentOfFileName_C(void *_instance, U32 _self, U32 strPointer) {
    id _t1 = (id)strPointer;
    [(NSDocument*)_self setLastComponentOfFileName:_t1];
}

// method '-[NSDocument setPrintInfo:]'
void env___IM_NSDocument_setPrintInfo_C(void *_instance, U32 _self, U32 printInfoPointer) {
    id _t1 = (id)printInfoPointer;
    [(NSDocument*)_self setPrintInfo:_t1];
}

// method '-[NSDocument setUndoManager:]'
void env___IM_NSDocument_setUndoManager_C(void *_instance, U32 _self, U32 undoManagerPointer) {
    id _t1 = (id)undoManagerPointer;
    [(NSDocument*)_self setUndoManager:_t1];
}

// method '-[NSDocument setWindow:]'
void env___IM_NSDocument_setWindow_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    [(NSDocument*)_self setWindow:_t1];
}

// method '-[NSDocument shouldChangePrintInfo:]'
U32 env___IM_NSDocument_shouldChangePrintInfo_C(void *_instance, U32 _self, U32 newPrintInfoPointer) {
    id _t1 = (id)newPrintInfoPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self shouldChangePrintInfo:_t1];
    return (U32)_result;
}

// method '-[NSDocument shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:]'
void env___IM_NSDocument_shouldCloseWindowController_Cdelegate_CshouldCloseSelector_CcontextInfo_C(void *_instance, U32 _self, U32 windowControllerPointer, U32 delegatePointer, U32 callbackPointer, U32 contextInfoPointer) {
    id _t1 = (id)windowControllerPointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)callbackPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSDocument*)_self shouldCloseWindowController:_t1 delegate:_t2 shouldCloseSelector:_t3 contextInfo:_t4];
}

// method '-[NSDocument shouldRunSavePanelWithAccessoryView]'
U32 env___IM_NSDocument_shouldRunSavePanelWithAccessoryView(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocument*)_self shouldRunSavePanelWithAccessoryView];
    return (U32)_result;
}

// method '-[NSDocument showWindows]'
void env___IM_NSDocument_showWindows(void *_instance, U32 _self) {
    [(NSDocument*)_self showWindows];
}

// method '-[NSDocument undoManager]'
U32 env___IM_NSDocument_undoManager(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self undoManager];
    return (U32)_result;
}

// method '-[NSDocument updateChangeCount:]'
void env___IM_NSDocument_updateChangeCount_C(void *_instance, U32 _self, U32 change) {
    [(NSDocument*)_self updateChangeCount:change];
}

// method '-[NSDocument validateUserInterfaceItem:]'
U32 env___IM_NSDocument_validateUserInterfaceItem_C(void *_instance, U32 _self, U32 anItemPointer) {
    id _t1 = (id)anItemPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self validateUserInterfaceItem:_t1];
    return (U32)_result;
}

// method '-[NSDocument willPresentError:]'
U32 env___IM_NSDocument_willPresentError_C(void *_instance, U32 _self, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    id _result = (id)[(NSDocument*)_self willPresentError:_t1];
    return (U32)_result;
}

// method '-[NSDocument windowControllerDidLoadNib:]'
void env___IM_NSDocument_windowControllerDidLoadNib_C(void *_instance, U32 _self, U32 windowControllerPointer) {
    id _t1 = (id)windowControllerPointer;
    [(NSDocument*)_self windowControllerDidLoadNib:_t1];
}

// method '-[NSDocument windowControllerWillLoadNib:]'
void env___IM_NSDocument_windowControllerWillLoadNib_C(void *_instance, U32 _self, U32 windowControllerPointer) {
    id _t1 = (id)windowControllerPointer;
    [(NSDocument*)_self windowControllerWillLoadNib:_t1];
}

// method '-[NSDocument windowControllers]'
U32 env___IM_NSDocument_windowControllers(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self windowControllers];
    return (U32)_result;
}

// method '-[NSDocument windowForSheet]'
U32 env___IM_NSDocument_windowForSheet(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self windowForSheet];
    return (U32)_result;
}

// method '-[NSDocument windowNibName]'
U32 env___IM_NSDocument_windowNibName(void *_instance, U32 _self) {
    id _result = (id)[(NSDocument*)_self windowNibName];
    return (U32)_result;
}

// method '+[NSDocument writableTypes]'
U32 env___CM_NSDocument_writableTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class writableTypes];
    return (U32)_result;
}

// method '-[NSDocument writableTypesForSaveOperation:]'
U32 env___IM_NSDocument_writableTypesForSaveOperation_C(void *_instance, U32 _self, U32 saveOperation) {
    id _result = (id)[(NSDocument*)_self writableTypesForSaveOperation:saveOperation];
    return (U32)_result;
}

// method '-[NSDocument writeSafelyToURL:ofType:forSaveOperation:error:]'
U32 env___IM_NSDocument_writeSafelyToURL_CofType_CforSaveOperation_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 saveOperation, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeSafelyToURL:_t1 ofType:_t2 forSaveOperation:saveOperation error:_t3];
    return (U32)_result;
}

// method '-[NSDocument writeToFile:ofType:]'
U32 env___IM_NSDocument_writeToFile_CofType_C(void *_instance, U32 _self, U32 fileNamePointer, U32 typePointer) {
    id _t1 = (id)fileNamePointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeToFile:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument writeToFile:ofType:originalFile:saveOperation:]'
U32 env___IM_NSDocument_writeToFile_CofType_CoriginalFile_CsaveOperation_C(void *_instance, U32 _self, U32 fullDocumentPathPointer, U32 documentTypeNamePointer, U32 fullOriginalDocumentPathPointer, U32 saveOperationType) {
    id _t1 = (id)fullDocumentPathPointer;
    id _t2 = (id)documentTypeNamePointer;
    id _t3 = (id)fullOriginalDocumentPathPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeToFile:_t1 ofType:_t2 originalFile:_t3 saveOperation:saveOperationType];
    return (U32)_result;
}

// method '-[NSDocument writeToURL:ofType:]'
U32 env___IM_NSDocument_writeToURL_CofType_C(void *_instance, U32 _self, U32 urlPointer, U32 typePointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeToURL:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocument writeToURL:ofType:error:]'
U32 env___IM_NSDocument_writeToURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeToURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocument writeToURL:ofType:forSaveOperation:originalContentsURL:error:]'
U32 env___IM_NSDocument_writeToURL_CofType_CforSaveOperation_CoriginalContentsURL_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 saveOperation, U32 absoluteOriginalContentsURLPointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id _t3 = (id)absoluteOriginalContentsURLPointer;
    id* _t4 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeToURL:_t1 ofType:_t2 forSaveOperation:saveOperation originalContentsURL:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSDocument writeWithBackupToFile:ofType:saveOperation:]'
U32 env___IM_NSDocument_writeWithBackupToFile_CofType_CsaveOperation_C(void *_instance, U32 _self, U32 fullDocumentPathPointer, U32 documentTypeNamePointer, U32 saveOperationType) {
    id _t1 = (id)fullDocumentPathPointer;
    id _t2 = (id)documentTypeNamePointer;
    BOOL _result = (BOOL)[(NSDocument*)_self writeWithBackupToFile:_t1 ofType:_t2 saveOperation:saveOperationType];
    return (U32)_result;
}

// method '-[NSDocumentController URLsFromRunningOpenPanel]'
U32 env___IM_NSDocumentController_URLsFromRunningOpenPanel(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self URLsFromRunningOpenPanel];
    return (U32)_result;
}

// method '-[NSDocumentController addDocument:]'
void env___IM_NSDocumentController_addDocument_C(void *_instance, U32 _self, U32 documentPointer) {
    id _t1 = (id)documentPointer;
    [(NSDocumentController*)_self addDocument:_t1];
}

// method '-[NSDocumentController autosavingDelay]'
F64 env___IM_NSDocumentController_autosavingDelay(void *_instance, U32 _self) {
    double _result = (double)[(NSDocumentController*)_self autosavingDelay];
    return (F64)_result;
}

// method '-[NSDocumentController clearRecentDocuments:]'
void env___IM_NSDocumentController_clearRecentDocuments_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocumentController*)_self clearRecentDocuments:_t1];
}

// method '-[NSDocumentController closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:]'
void env___IM_NSDocumentController_closeAllDocumentsWithDelegate_CdidCloseAllSelector_CcontextInfo_C(void *_instance, U32 _self, U32 delegatePointer, U32 didCloseAllSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)didCloseAllSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(NSDocumentController*)_self closeAllDocumentsWithDelegate:_t1 didCloseAllSelector:_t2 contextInfo:_t3];
}

// method '-[NSDocumentController currentDirectory]'
U32 env___IM_NSDocumentController_currentDirectory(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self currentDirectory];
    return (U32)_result;
}

// method '-[NSDocumentController currentDocument]'
U32 env___IM_NSDocumentController_currentDocument(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self currentDocument];
    return (U32)_result;
}

// method '-[NSDocumentController defaultType]'
U32 env___IM_NSDocumentController_defaultType(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self defaultType];
    return (U32)_result;
}

// method '-[NSDocumentController displayNameForType:]'
U32 env___IM_NSDocumentController_displayNameForType_C(void *_instance, U32 _self, U32 typeNamePointer) {
    id _t1 = (id)typeNamePointer;
    id _result = (id)[(NSDocumentController*)_self displayNameForType:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController documentClassForType:]'
U32 env___IM_NSDocumentController_documentClassForType_C(void *_instance, U32 _self, U32 typeNamePointer) {
    id _t1 = (id)typeNamePointer;
    Class _result = (Class)[(NSDocumentController*)_self documentClassForType:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController documentClassNames]'
U32 env___IM_NSDocumentController_documentClassNames(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self documentClassNames];
    return (U32)_result;
}

// method '-[NSDocumentController documentForFileName:]'
U32 env___IM_NSDocumentController_documentForFileName_C(void *_instance, U32 _self, U32 fileNamePointer) {
    id _t1 = (id)fileNamePointer;
    id _result = (id)[(NSDocumentController*)_self documentForFileName:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController documentForURL:]'
U32 env___IM_NSDocumentController_documentForURL_C(void *_instance, U32 _self, U32 absoluteURLPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _result = (id)[(NSDocumentController*)_self documentForURL:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController documentForWindow:]'
U32 env___IM_NSDocumentController_documentForWindow_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    id _result = (id)[(NSDocumentController*)_self documentForWindow:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController documents]'
U32 env___IM_NSDocumentController_documents(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self documents];
    return (U32)_result;
}

// method '-[NSDocumentController fileExtensionsFromType:]'
U32 env___IM_NSDocumentController_fileExtensionsFromType_C(void *_instance, U32 _self, U32 typeNamePointer) {
    id _t1 = (id)typeNamePointer;
    id _result = (id)[(NSDocumentController*)_self fileExtensionsFromType:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController fileNamesFromRunningOpenPanel]'
U32 env___IM_NSDocumentController_fileNamesFromRunningOpenPanel(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self fileNamesFromRunningOpenPanel];
    return (U32)_result;
}

// method '-[NSDocumentController hasEditedDocuments]'
U32 env___IM_NSDocumentController_hasEditedDocuments(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocumentController*)_self hasEditedDocuments];
    return (U32)_result;
}

// method '-[NSDocumentController init]'
U32 env___IM_NSDocumentController_init(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self init];
    return (U32)_result;
}

// method '-[NSDocumentController makeDocumentForURL:withContentsOfURL:ofType:error:]'
U32 env___IM_NSDocumentController_makeDocumentForURL_CwithContentsOfURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteDocumentURLPointer, U32 absoluteDocumentContentsURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteDocumentURLPointer;
    id _t2 = (id)absoluteDocumentContentsURLPointer;
    id _t3 = (id)typeNamePointer;
    id* _t4 = (id*)outErrorPointer;
    id _result = (id)[(NSDocumentController*)_self makeDocumentForURL:_t1 withContentsOfURL:_t2 ofType:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSDocumentController makeDocumentWithContentsOfFile:ofType:]'
U32 env___IM_NSDocumentController_makeDocumentWithContentsOfFile_CofType_C(void *_instance, U32 _self, U32 fileNamePointer, U32 typePointer) {
    id _t1 = (id)fileNamePointer;
    id _t2 = (id)typePointer;
    id _result = (id)[(NSDocumentController*)_self makeDocumentWithContentsOfFile:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocumentController makeDocumentWithContentsOfURL:ofType:]'
U32 env___IM_NSDocumentController_makeDocumentWithContentsOfURL_CofType_C(void *_instance, U32 _self, U32 urlPointer, U32 typePointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)typePointer;
    id _result = (id)[(NSDocumentController*)_self makeDocumentWithContentsOfURL:_t1 ofType:_t2];
    return (U32)_result;
}

// method '-[NSDocumentController makeDocumentWithContentsOfURL:ofType:error:]'
U32 env___IM_NSDocumentController_makeDocumentWithContentsOfURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    id _result = (id)[(NSDocumentController*)_self makeDocumentWithContentsOfURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocumentController makeUntitledDocumentOfType:]'
U32 env___IM_NSDocumentController_makeUntitledDocumentOfType_C(void *_instance, U32 _self, U32 typePointer) {
    id _t1 = (id)typePointer;
    id _result = (id)[(NSDocumentController*)_self makeUntitledDocumentOfType:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController makeUntitledDocumentOfType:error:]'
U32 env___IM_NSDocumentController_makeUntitledDocumentOfType_Cerror_C(void *_instance, U32 _self, U32 typeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)typeNamePointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocumentController*)_self makeUntitledDocumentOfType:_t1 error:_t2];
    return (U32)_result;
}

// method '-[NSDocumentController maximumRecentDocumentCount]'
U32 env___IM_NSDocumentController_maximumRecentDocumentCount(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSDocumentController*)_self maximumRecentDocumentCount];
    return (U32)_result;
}

// method '-[NSDocumentController newDocument:]'
void env___IM_NSDocumentController_newDocument_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocumentController*)_self newDocument:_t1];
}

// method '-[NSDocumentController noteNewRecentDocument:]'
void env___IM_NSDocumentController_noteNewRecentDocument_C(void *_instance, U32 _self, U32 documentPointer) {
    id _t1 = (id)documentPointer;
    [(NSDocumentController*)_self noteNewRecentDocument:_t1];
}

// method '-[NSDocumentController noteNewRecentDocumentURL:]'
void env___IM_NSDocumentController_noteNewRecentDocumentURL_C(void *_instance, U32 _self, U32 absoluteURLPointer) {
    id _t1 = (id)absoluteURLPointer;
    [(NSDocumentController*)_self noteNewRecentDocumentURL:_t1];
}

// method '-[NSDocumentController openDocument:]'
void env___IM_NSDocumentController_openDocument_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocumentController*)_self openDocument:_t1];
}

// method '-[NSDocumentController openDocumentWithContentsOfFile:display:]'
U32 env___IM_NSDocumentController_openDocumentWithContentsOfFile_Cdisplay_C(void *_instance, U32 _self, U32 fileNamePointer, U32 display) {
    id _t1 = (id)fileNamePointer;
    id _result = (id)[(NSDocumentController*)_self openDocumentWithContentsOfFile:_t1 display:display];
    return (U32)_result;
}

// method '-[NSDocumentController openDocumentWithContentsOfURL:display:]'
U32 env___IM_NSDocumentController_openDocumentWithContentsOfURL_Cdisplay_C(void *_instance, U32 _self, U32 urlPointer, U32 display) {
    id _t1 = (id)urlPointer;
    id _result = (id)[(NSDocumentController*)_self openDocumentWithContentsOfURL:_t1 display:display];
    return (U32)_result;
}

// method '-[NSDocumentController openDocumentWithContentsOfURL:display:error:]'
U32 env___IM_NSDocumentController_openDocumentWithContentsOfURL_Cdisplay_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 displayDocument, U32 outErrorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocumentController*)_self openDocumentWithContentsOfURL:_t1 display:displayDocument error:_t2];
    return (U32)_result;
}

// method '-[NSDocumentController openUntitledDocumentAndDisplay:error:]'
U32 env___IM_NSDocumentController_openUntitledDocumentAndDisplay_Cerror_C(void *_instance, U32 _self, U32 displayDocument, U32 outErrorPointer) {
    id* _t1 = (id*)outErrorPointer;
    id _result = (id)[(NSDocumentController*)_self openUntitledDocumentAndDisplay:displayDocument error:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController openUntitledDocumentOfType:display:]'
U32 env___IM_NSDocumentController_openUntitledDocumentOfType_Cdisplay_C(void *_instance, U32 _self, U32 typePointer, U32 display) {
    id _t1 = (id)typePointer;
    id _result = (id)[(NSDocumentController*)_self openUntitledDocumentOfType:_t1 display:display];
    return (U32)_result;
}

// method '-[NSDocumentController presentError:]'
U32 env___IM_NSDocumentController_presentError_C(void *_instance, U32 _self, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    BOOL _result = (BOOL)[(NSDocumentController*)_self presentError:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController presentError:modalForWindow:delegate:didPresentSelector:contextInfo:]'
void env___IM_NSDocumentController_presentError_CmodalForWindow_Cdelegate_CdidPresentSelector_CcontextInfo_C(void *_instance, U32 _self, U32 errorPointer, U32 windowPointer, U32 delegatePointer, U32 didPresentSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)errorPointer;
    id _t2 = (id)windowPointer;
    id _t3 = (id)delegatePointer;
    SEL _t4 = (SEL)didPresentSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSDocumentController*)_self presentError:_t1 modalForWindow:_t2 delegate:_t3 didPresentSelector:_t4 contextInfo:_t5];
}

// method '-[NSDocumentController recentDocumentURLs]'
U32 env___IM_NSDocumentController_recentDocumentURLs(void *_instance, U32 _self) {
    id _result = (id)[(NSDocumentController*)_self recentDocumentURLs];
    return (U32)_result;
}

// method '-[NSDocumentController removeDocument:]'
void env___IM_NSDocumentController_removeDocument_C(void *_instance, U32 _self, U32 documentPointer) {
    id _t1 = (id)documentPointer;
    [(NSDocumentController*)_self removeDocument:_t1];
}

// method '-[NSDocumentController reopenDocumentForURL:withContentsOfURL:error:]'
U32 env___IM_NSDocumentController_reopenDocumentForURL_CwithContentsOfURL_Cerror_C(void *_instance, U32 _self, U32 absoluteDocumentURLPointer, U32 absoluteDocumentContentsURLPointer, U32 outErrorPointer) {
    id _t1 = (id)absoluteDocumentURLPointer;
    id _t2 = (id)absoluteDocumentContentsURLPointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSDocumentController*)_self reopenDocumentForURL:_t1 withContentsOfURL:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSDocumentController reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:]'
void env___IM_NSDocumentController_reviewUnsavedDocumentsWithAlertTitle_Ccancellable_Cdelegate_CdidReviewAllSelector_CcontextInfo_C(void *_instance, U32 _self, U32 titlePointer, U32 cancellable, U32 delegatePointer, U32 didReviewAllSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)titlePointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didReviewAllSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSDocumentController*)_self reviewUnsavedDocumentsWithAlertTitle:_t1 cancellable:cancellable delegate:_t2 didReviewAllSelector:_t3 contextInfo:_t4];
}

// method '-[NSDocumentController runModalOpenPanel:forTypes:]'
U32 env___IM_NSDocumentController_runModalOpenPanel_CforTypes_C(void *_instance, U32 _self, U32 openPanelPointer, U32 fileNameExtensionsAndHFSFileTypesPointer) {
    id _t1 = (id)openPanelPointer;
    id _t2 = (id)fileNameExtensionsAndHFSFileTypesPointer;
    int _result = (int)[(NSDocumentController*)_self runModalOpenPanel:_t1 forTypes:_t2];
    return (U32)_result;
}

// method '-[NSDocumentController saveAllDocuments:]'
void env___IM_NSDocumentController_saveAllDocuments_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDocumentController*)_self saveAllDocuments:_t1];
}

// method '-[NSDocumentController setAutosavingDelay:]'
void env___IM_NSDocumentController_setAutosavingDelay_C(void *_instance, U32 _self, F64 autosavingDelay) {
    [(NSDocumentController*)_self setAutosavingDelay:autosavingDelay];
}

// method '-[NSDocumentController setShouldCreateUI:]'
void env___IM_NSDocumentController_setShouldCreateUI_C(void *_instance, U32 _self, U32 flag) {
    [(NSDocumentController*)_self setShouldCreateUI:flag];
}

// method '+[NSDocumentController sharedDocumentController]'
U32 env___CM_NSDocumentController_sharedDocumentController(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedDocumentController];
    return (U32)_result;
}

// method '-[NSDocumentController shouldCreateUI]'
U32 env___IM_NSDocumentController_shouldCreateUI(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSDocumentController*)_self shouldCreateUI];
    return (U32)_result;
}

// method '-[NSDocumentController typeForContentsOfURL:error:]'
U32 env___IM_NSDocumentController_typeForContentsOfURL_Cerror_C(void *_instance, U32 _self, U32 inAbsoluteURLPointer, U32 outErrorPointer) {
    id _t1 = (id)inAbsoluteURLPointer;
    id* _t2 = (id*)outErrorPointer;
    id _result = (id)[(NSDocumentController*)_self typeForContentsOfURL:_t1 error:_t2];
    return (U32)_result;
}

// method '-[NSDocumentController typeFromFileExtension:]'
U32 env___IM_NSDocumentController_typeFromFileExtension_C(void *_instance, U32 _self, U32 fileNameExtensionOrHFSFileTypePointer) {
    id _t1 = (id)fileNameExtensionOrHFSFileTypePointer;
    id _result = (id)[(NSDocumentController*)_self typeFromFileExtension:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController validateUserInterfaceItem:]'
U32 env___IM_NSDocumentController_validateUserInterfaceItem_C(void *_instance, U32 _self, U32 anItemPointer) {
    id _t1 = (id)anItemPointer;
    BOOL _result = (BOOL)[(NSDocumentController*)_self validateUserInterfaceItem:_t1];
    return (U32)_result;
}

// method '-[NSDocumentController willPresentError:]'
U32 env___IM_NSDocumentController_willPresentError_C(void *_instance, U32 _self, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    id _result = (id)[(NSDocumentController*)_self willPresentError:_t1];
    return (U32)_result;
}

// method '-[NSDrawer close]'
void env___IM_NSDrawer_close(void *_instance, U32 _self) {
    [(NSDrawer*)_self close];
}

// method '-[NSDrawer close:]'
void env___IM_NSDrawer_close_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDrawer*)_self close:_t1];
}

// method '-[NSDrawer contentSize]'
void env___IM_NSDrawer_contentSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSDrawer*)_self contentSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSDrawer contentView]'
U32 env___IM_NSDrawer_contentView(void *_instance, U32 _self) {
    id _result = (id)[(NSDrawer*)_self contentView];
    return (U32)_result;
}

// method '-[NSDrawer delegate]'
U32 env___IM_NSDrawer_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSDrawer*)_self delegate];
    return (U32)_result;
}

// method '-[NSDrawer edge]'
U32 env___IM_NSDrawer_edge(void *_instance, U32 _self) {
    int _result = (int)[(NSDrawer*)_self edge];
    return (U32)_result;
}

// method '-[NSDrawer initWithContentSize:preferredEdge:]'
U32 env___IM_NSDrawer_initWithContentSize_CpreferredEdge_C(void *_instance, U32 _self, U32 contentSizeIndirect, U32 edge) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + contentSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    id _result = (id)[(NSDrawer*)_self initWithContentSize:_t1 preferredEdge:edge];
    return (U32)_result;
}

// method '-[NSDrawer leadingOffset]'
F32 env___IM_NSDrawer_leadingOffset(void *_instance, U32 _self) {
    float _result = (float)[(NSDrawer*)_self leadingOffset];
    return (F32)_result;
}

// method '-[NSDrawer maxContentSize]'
void env___IM_NSDrawer_maxContentSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSDrawer*)_self maxContentSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSDrawer minContentSize]'
void env___IM_NSDrawer_minContentSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSDrawer*)_self minContentSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSDrawer open]'
void env___IM_NSDrawer_open(void *_instance, U32 _self) {
    [(NSDrawer*)_self open];
}

// method '-[NSDrawer open:]'
void env___IM_NSDrawer_open_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDrawer*)_self open:_t1];
}

// method '-[NSDrawer openOnEdge:]'
void env___IM_NSDrawer_openOnEdge_C(void *_instance, U32 _self, U32 edge) {
    [(NSDrawer*)_self openOnEdge:edge];
}

// method '-[NSDrawer parentWindow]'
U32 env___IM_NSDrawer_parentWindow(void *_instance, U32 _self) {
    id _result = (id)[(NSDrawer*)_self parentWindow];
    return (U32)_result;
}

// method '-[NSDrawer preferredEdge]'
U32 env___IM_NSDrawer_preferredEdge(void *_instance, U32 _self) {
    int _result = (int)[(NSDrawer*)_self preferredEdge];
    return (U32)_result;
}

// method '-[NSDrawer setContentSize:]'
void env___IM_NSDrawer_setContentSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSDrawer*)_self setContentSize:_t1];
}

// method '-[NSDrawer setContentView:]'
void env___IM_NSDrawer_setContentView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSDrawer*)_self setContentView:_t1];
}

// method '-[NSDrawer setDelegate:]'
void env___IM_NSDrawer_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSDrawer*)_self setDelegate:_t1];
}

// method '-[NSDrawer setLeadingOffset:]'
void env___IM_NSDrawer_setLeadingOffset_C(void *_instance, U32 _self, F32 offset) {
    [(NSDrawer*)_self setLeadingOffset:offset];
}

// method '-[NSDrawer setMaxContentSize:]'
void env___IM_NSDrawer_setMaxContentSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSDrawer*)_self setMaxContentSize:_t1];
}

// method '-[NSDrawer setMinContentSize:]'
void env___IM_NSDrawer_setMinContentSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSDrawer*)_self setMinContentSize:_t1];
}

// method '-[NSDrawer setParentWindow:]'
void env___IM_NSDrawer_setParentWindow_C(void *_instance, U32 _self, U32 parentPointer) {
    id _t1 = (id)parentPointer;
    [(NSDrawer*)_self setParentWindow:_t1];
}

// method '-[NSDrawer setPreferredEdge:]'
void env___IM_NSDrawer_setPreferredEdge_C(void *_instance, U32 _self, U32 edge) {
    [(NSDrawer*)_self setPreferredEdge:edge];
}

// method '-[NSDrawer setTrailingOffset:]'
void env___IM_NSDrawer_setTrailingOffset_C(void *_instance, U32 _self, F32 offset) {
    [(NSDrawer*)_self setTrailingOffset:offset];
}

// method '-[NSDrawer state]'
U32 env___IM_NSDrawer_state(void *_instance, U32 _self) {
    int _result = (int)[(NSDrawer*)_self state];
    return (U32)_result;
}

// method '-[NSDrawer toggle:]'
void env___IM_NSDrawer_toggle_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSDrawer*)_self toggle:_t1];
}

// method '-[NSDrawer trailingOffset]'
F32 env___IM_NSDrawer_trailingOffset(void *_instance, U32 _self) {
    float _result = (float)[(NSDrawer*)_self trailingOffset];
    return (F32)_result;
}

// method '-[NSEPSImageRep EPSRepresentation]'
U32 env___IM_NSEPSImageRep_EPSRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSEPSImageRep*)_self EPSRepresentation];
    return (U32)_result;
}

// method '-[NSEPSImageRep boundingBox]'
void env___IM_NSEPSImageRep_boundingBox(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSEPSImageRep*)_self boundingBox];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSEPSImageRep imageRepWithData:]'
U32 env___CM_NSEPSImageRep_imageRepWithData_C(void *_instance, U32 _class, U32 epsDataPointer) {
    id _t1 = (id)epsDataPointer;
    id _result = (id)[(Class)_class imageRepWithData:_t1];
    return (U32)_result;
}

// method '-[NSEPSImageRep initWithData:]'
U32 env___IM_NSEPSImageRep_initWithData_C(void *_instance, U32 _self, U32 epsDataPointer) {
    id _t1 = (id)epsDataPointer;
    id _result = (id)[(NSEPSImageRep*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSEPSImageRep prepareGState]'
void env___IM_NSEPSImageRep_prepareGState(void *_instance, U32 _self) {
    [(NSEPSImageRep*)_self prepareGState];
}

// method '-[NSEvent absoluteX]'
U32 env___IM_NSEvent_absoluteX58(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self absoluteX];
    return (U32)_result;
}

// method '-[NSEvent absoluteY]'
U32 env___IM_NSEvent_absoluteY(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self absoluteY];
    return (U32)_result;
}

// method '-[NSEvent absoluteZ]'
U32 env___IM_NSEvent_absoluteZ(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self absoluteZ];
    return (U32)_result;
}

// method '-[NSEvent buttonMask]'
U32 env___IM_NSEvent_buttonMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self buttonMask];
    return (U32)_result;
}

// method '-[NSEvent buttonNumber]'
U32 env___IM_NSEvent_buttonNumber(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self buttonNumber];
    return (U32)_result;
}

// method '-[NSEvent capabilityMask]'
U32 env___IM_NSEvent_capabilityMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self capabilityMask];
    return (U32)_result;
}

// method '-[NSEvent characters]'
U32 env___IM_NSEvent_characters(void *_instance, U32 _self) {
    id _result = (id)[(NSEvent*)_self characters];
    return (U32)_result;
}

// method '-[NSEvent charactersIgnoringModifiers]'
U32 env___IM_NSEvent_charactersIgnoringModifiers(void *_instance, U32 _self) {
    id _result = (id)[(NSEvent*)_self charactersIgnoringModifiers];
    return (U32)_result;
}

// method '-[NSEvent clickCount]'
U32 env___IM_NSEvent_clickCount(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self clickCount];
    return (U32)_result;
}

// method '-[NSEvent context]'
U32 env___IM_NSEvent_context(void *_instance, U32 _self) {
    id _result = (id)[(NSEvent*)_self context];
    return (U32)_result;
}

// method '-[NSEvent data1]'
U32 env___IM_NSEvent_data1(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self data1];
    return (U32)_result;
}

// method '-[NSEvent data2]'
U32 env___IM_NSEvent_data2(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self data2];
    return (U32)_result;
}

// method '-[NSEvent deltaX]'
F32 env___IM_NSEvent_deltaX58(void *_instance, U32 _self) {
    float _result = (float)[(NSEvent*)_self deltaX];
    return (F32)_result;
}

// method '-[NSEvent deltaY]'
F32 env___IM_NSEvent_deltaY(void *_instance, U32 _self) {
    float _result = (float)[(NSEvent*)_self deltaY];
    return (F32)_result;
}

// method '-[NSEvent deltaZ]'
F32 env___IM_NSEvent_deltaZ(void *_instance, U32 _self) {
    float _result = (float)[(NSEvent*)_self deltaZ];
    return (F32)_result;
}

// method '-[NSEvent deviceID]'
U32 env___IM_NSEvent_deviceID(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self deviceID];
    return (U32)_result;
}

// method '+[NSEvent enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:]'
U32 env___CM_NSEvent_enterExitEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_CeventNumber_CtrackingNumber_CuserData_C(void *_instance, U32 _class, U32 type, U32 locationIndirect, U32 flags, F64 time, U32 wNum, U32 contextPointer, U32 eNum, U32 tNum, U32 dataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + locationIndirect);
    id _t2 = (id)contextPointer;
    void* _t3 = (void*)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(Class)_class enterExitEventWithType:type location:_t1 modifierFlags:flags timestamp:time windowNumber:wNum context:_t2 eventNumber:eNum trackingNumber:tNum userData:_t3];
    return (U32)_result;
}

// method '-[NSEvent eventNumber]'
U32 env___IM_NSEvent_eventNumber(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self eventNumber];
    return (U32)_result;
}

// method '-[NSEvent isARepeat]'
U32 env___IM_NSEvent_isARepeat(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSEvent*)_self isARepeat];
    return (U32)_result;
}

// method '-[NSEvent isEnteringProximity]'
U32 env___IM_NSEvent_isEnteringProximity(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSEvent*)_self isEnteringProximity];
    return (U32)_result;
}

// method '-[NSEvent keyCode]'
U32 env___IM_NSEvent_keyCode(void *_instance, U32 _self) {
    unsigned short _result = (unsigned short)[(NSEvent*)_self keyCode];
    return (U32)_result;
}

// method '+[NSEvent keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:]'
U32 env___CM_NSEvent_keyEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_Ccharacters_CcharactersIgnoringModifiers_CisARepeat_CkeyCode_C(void *_instance, U32 _class, U32 type, U32 locationIndirect, U32 flags, F64 time, U32 wNum, U32 contextPointer, U32 keysPointer, U32 ukeysPointer, U32 flag, U32 code) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + locationIndirect);
    id _t2 = (id)contextPointer;
    id _t3 = (id)keysPointer;
    id _t4 = (id)ukeysPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(Class)_class keyEventWithType:type location:_t1 modifierFlags:flags timestamp:time windowNumber:wNum context:_t2 characters:_t3 charactersIgnoringModifiers:_t4 isARepeat:flag keyCode:code];
    return (U32)_result;
}

// method '-[NSEvent locationInWindow]'
void env___IM_NSEvent_locationInWindow(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSEvent*)_self locationInWindow];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSEvent modifierFlags]'
U32 env___IM_NSEvent_modifierFlags(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self modifierFlags];
    return (U32)_result;
}

// method '+[NSEvent mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:]'
U32 env___CM_NSEvent_mouseEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_CeventNumber_CclickCount_Cpressure_C(void *_instance, U32 _class, U32 type, U32 locationIndirect, U32 flags, F64 time, U32 wNum, U32 contextPointer, U32 eNum, U32 cNum, F32 pressure) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + locationIndirect);
    id _t2 = (id)contextPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(Class)_class mouseEventWithType:type location:_t1 modifierFlags:flags timestamp:time windowNumber:wNum context:_t2 eventNumber:eNum clickCount:cNum pressure:pressure];
    return (U32)_result;
}

// method '+[NSEvent mouseLocation]'
void env___CM_NSEvent_mouseLocation(void *_instance, U32 _resultIndirect, U32 _class) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(Class)_class mouseLocation];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSEvent otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:]'
U32 env___CM_NSEvent_otherEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_Csubtype_Cdata1_Cdata2_C(void *_instance, U32 _class, U32 type, U32 locationIndirect, U32 flags, F64 time, U32 wNum, U32 contextPointer, U32 subtype, U32 d1, U32 d2) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + locationIndirect);
    id _t2 = (id)contextPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(Class)_class otherEventWithType:type location:_t1 modifierFlags:flags timestamp:time windowNumber:wNum context:_t2 subtype:subtype data1:d1 data2:d2];
    return (U32)_result;
}

// method '-[NSEvent pointingDeviceID]'
U32 env___IM_NSEvent_pointingDeviceID(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self pointingDeviceID];
    return (U32)_result;
}

// method '-[NSEvent pointingDeviceSerialNumber]'
U32 env___IM_NSEvent_pointingDeviceSerialNumber(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self pointingDeviceSerialNumber];
    return (U32)_result;
}

// method '-[NSEvent pointingDeviceType]'
U32 env___IM_NSEvent_pointingDeviceType(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self pointingDeviceType];
    return (U32)_result;
}

// method '-[NSEvent pressure]'
F32 env___IM_NSEvent_pressure(void *_instance, U32 _self) {
    float _result = (float)[(NSEvent*)_self pressure];
    return (F32)_result;
}

// method '-[NSEvent rotation]'
F32 env___IM_NSEvent_rotation(void *_instance, U32 _self) {
    float _result = (float)[(NSEvent*)_self rotation];
    return (F32)_result;
}

// method '+[NSEvent startPeriodicEventsAfterDelay:withPeriod:]'
void env___CM_NSEvent_startPeriodicEventsAfterDelay_CwithPeriod_C(void *_instance, U32 _class, F64 delay, F64 period) {
    [(Class)_class startPeriodicEventsAfterDelay:delay withPeriod:period];
}

// method '+[NSEvent stopPeriodicEvents]'
void env___CM_NSEvent_stopPeriodicEvents(void *_instance, U32 _class) {
    [(Class)_class stopPeriodicEvents];
}

// method '-[NSEvent subtype]'
U32 env___IM_NSEvent_subtype(void *_instance, U32 _self) {
    short _result = (short)[(NSEvent*)_self subtype];
    return (U32)_result;
}

// method '-[NSEvent systemTabletID]'
U32 env___IM_NSEvent_systemTabletID(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self systemTabletID];
    return (U32)_result;
}

// method '-[NSEvent tabletID]'
U32 env___IM_NSEvent_tabletID(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self tabletID];
    return (U32)_result;
}

// method '-[NSEvent tangentialPressure]'
F32 env___IM_NSEvent_tangentialPressure(void *_instance, U32 _self) {
    float _result = (float)[(NSEvent*)_self tangentialPressure];
    return (F32)_result;
}

// method '-[NSEvent tilt]'
void env___IM_NSEvent_tilt(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSEvent*)_self tilt];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSEvent timestamp]'
F64 env___IM_NSEvent_timestamp(void *_instance, U32 _self) {
    double _result = (double)[(NSEvent*)_self timestamp];
    return (F64)_result;
}

// method '-[NSEvent trackingNumber]'
U32 env___IM_NSEvent_trackingNumber(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self trackingNumber];
    return (U32)_result;
}

// method '-[NSEvent type]'
U32 env___IM_NSEvent_type(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self type];
    return (U32)_result;
}

// method '-[NSEvent uniqueID]'
U64 env___IM_NSEvent_uniqueID(void *_instance, U32 _self) {
    unsigned long long _result = (unsigned long long)[(NSEvent*)_self uniqueID];
    return (U64)_result;
}

// method '-[NSEvent userData]'
U32 env___IM_NSEvent_userData(void *_instance, U32 _self) {
    void* _result = (void*)[(NSEvent*)_self userData];
    return (U32)_result;
}

// method '-[NSEvent vendorDefined]'
U32 env___IM_NSEvent_vendorDefined(void *_instance, U32 _self) {
    id _result = (id)[(NSEvent*)_self vendorDefined];
    return (U32)_result;
}

// method '-[NSEvent vendorID]'
U32 env___IM_NSEvent_vendorID(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self vendorID];
    return (U32)_result;
}

// method '-[NSEvent vendorPointingDeviceType]'
U32 env___IM_NSEvent_vendorPointingDeviceType(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSEvent*)_self vendorPointingDeviceType];
    return (U32)_result;
}

// method '-[NSEvent window]'
U32 env___IM_NSEvent_window(void *_instance, U32 _self) {
    id _result = (id)[(NSEvent*)_self window];
    return (U32)_result;
}

// method '-[NSEvent windowNumber]'
U32 env___IM_NSEvent_windowNumber(void *_instance, U32 _self) {
    int _result = (int)[(NSEvent*)_self windowNumber];
    return (U32)_result;
}

// method '-[NSFileWrapper addFileWithPath:]'
U32 env___IM_NSFileWrapper_addFileWithPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    id _result = (id)[(NSFileWrapper*)_self addFileWithPath:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper addFileWrapper:]'
U32 env___IM_NSFileWrapper_addFileWrapper_C(void *_instance, U32 _self, U32 docPointer) {
    id _t1 = (id)docPointer;
    id _result = (id)[(NSFileWrapper*)_self addFileWrapper:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper addRegularFileWithContents:preferredFilename:]'
U32 env___IM_NSFileWrapper_addRegularFileWithContents_CpreferredFilename_C(void *_instance, U32 _self, U32 dataPointer, U32 filenamePointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)filenamePointer;
    id _result = (id)[(NSFileWrapper*)_self addRegularFileWithContents:_t1 preferredFilename:_t2];
    return (U32)_result;
}

// method '-[NSFileWrapper addSymbolicLinkWithDestination:preferredFilename:]'
U32 env___IM_NSFileWrapper_addSymbolicLinkWithDestination_CpreferredFilename_C(void *_instance, U32 _self, U32 pathPointer, U32 filenamePointer) {
    id _t1 = (id)pathPointer;
    id _t2 = (id)filenamePointer;
    id _result = (id)[(NSFileWrapper*)_self addSymbolicLinkWithDestination:_t1 preferredFilename:_t2];
    return (U32)_result;
}

// method '-[NSFileWrapper fileAttributes]'
U32 env___IM_NSFileWrapper_fileAttributes(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self fileAttributes];
    return (U32)_result;
}

// method '-[NSFileWrapper fileWrappers]'
U32 env___IM_NSFileWrapper_fileWrappers(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self fileWrappers];
    return (U32)_result;
}

// method '-[NSFileWrapper filename]'
U32 env___IM_NSFileWrapper_filename(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self filename];
    return (U32)_result;
}

// method '-[NSFileWrapper icon]'
U32 env___IM_NSFileWrapper_icon(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self icon];
    return (U32)_result;
}

// method '-[NSFileWrapper initDirectoryWithFileWrappers:]'
U32 env___IM_NSFileWrapper_initDirectoryWithFileWrappers_C(void *_instance, U32 _self, U32 docsPointer) {
    id _t1 = (id)docsPointer;
    id _result = (id)[(NSFileWrapper*)_self initDirectoryWithFileWrappers:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper initRegularFileWithContents:]'
U32 env___IM_NSFileWrapper_initRegularFileWithContents_C(void *_instance, U32 _self, U32 dataPointer) {
    id _t1 = (id)dataPointer;
    id _result = (id)[(NSFileWrapper*)_self initRegularFileWithContents:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper initSymbolicLinkWithDestination:]'
U32 env___IM_NSFileWrapper_initSymbolicLinkWithDestination_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    id _result = (id)[(NSFileWrapper*)_self initSymbolicLinkWithDestination:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper initWithPath:]'
U32 env___IM_NSFileWrapper_initWithPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    id _result = (id)[(NSFileWrapper*)_self initWithPath:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper initWithSerializedRepresentation:]'
U32 env___IM_NSFileWrapper_initWithSerializedRepresentation_C(void *_instance, U32 _self, U32 dataPointer) {
    id _t1 = (id)dataPointer;
    id _result = (id)[(NSFileWrapper*)_self initWithSerializedRepresentation:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper isDirectory]'
U32 env___IM_NSFileWrapper_isDirectory(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFileWrapper*)_self isDirectory];
    return (U32)_result;
}

// method '-[NSFileWrapper isRegularFile]'
U32 env___IM_NSFileWrapper_isRegularFile(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFileWrapper*)_self isRegularFile];
    return (U32)_result;
}

// method '-[NSFileWrapper isSymbolicLink]'
U32 env___IM_NSFileWrapper_isSymbolicLink(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFileWrapper*)_self isSymbolicLink];
    return (U32)_result;
}

// method '-[NSFileWrapper keyForFileWrapper:]'
U32 env___IM_NSFileWrapper_keyForFileWrapper_C(void *_instance, U32 _self, U32 docPointer) {
    id _t1 = (id)docPointer;
    id _result = (id)[(NSFileWrapper*)_self keyForFileWrapper:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper needsToBeUpdatedFromPath:]'
U32 env___IM_NSFileWrapper_needsToBeUpdatedFromPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSFileWrapper*)_self needsToBeUpdatedFromPath:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper preferredFilename]'
U32 env___IM_NSFileWrapper_preferredFilename(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self preferredFilename];
    return (U32)_result;
}

// method '-[NSFileWrapper regularFileContents]'
U32 env___IM_NSFileWrapper_regularFileContents(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self regularFileContents];
    return (U32)_result;
}

// method '-[NSFileWrapper removeFileWrapper:]'
void env___IM_NSFileWrapper_removeFileWrapper_C(void *_instance, U32 _self, U32 docPointer) {
    id _t1 = (id)docPointer;
    [(NSFileWrapper*)_self removeFileWrapper:_t1];
}

// method '-[NSFileWrapper serializedRepresentation]'
U32 env___IM_NSFileWrapper_serializedRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self serializedRepresentation];
    return (U32)_result;
}

// method '-[NSFileWrapper setFileAttributes:]'
void env___IM_NSFileWrapper_setFileAttributes_C(void *_instance, U32 _self, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    [(NSFileWrapper*)_self setFileAttributes:_t1];
}

// method '-[NSFileWrapper setFilename:]'
void env___IM_NSFileWrapper_setFilename_C(void *_instance, U32 _self, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    [(NSFileWrapper*)_self setFilename:_t1];
}

// method '-[NSFileWrapper setIcon:]'
void env___IM_NSFileWrapper_setIcon_C(void *_instance, U32 _self, U32 iconPointer) {
    id _t1 = (id)iconPointer;
    [(NSFileWrapper*)_self setIcon:_t1];
}

// method '-[NSFileWrapper setPreferredFilename:]'
void env___IM_NSFileWrapper_setPreferredFilename_C(void *_instance, U32 _self, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    [(NSFileWrapper*)_self setPreferredFilename:_t1];
}

// method '-[NSFileWrapper symbolicLinkDestination]'
U32 env___IM_NSFileWrapper_symbolicLinkDestination(void *_instance, U32 _self) {
    id _result = (id)[(NSFileWrapper*)_self symbolicLinkDestination];
    return (U32)_result;
}

// method '-[NSFileWrapper updateFromPath:]'
U32 env___IM_NSFileWrapper_updateFromPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSFileWrapper*)_self updateFromPath:_t1];
    return (U32)_result;
}

// method '-[NSFileWrapper writeToFile:atomically:updateFilenames:]'
U32 env___IM_NSFileWrapper_writeToFile_Catomically_CupdateFilenames_C(void *_instance, U32 _self, U32 pathPointer, U32 atomicFlag, U32 updateFilenamesFlag) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSFileWrapper*)_self writeToFile:_t1 atomically:atomicFlag updateFilenames:updateFilenamesFlag];
    return (U32)_result;
}

// method '-[NSFont advancementForGlyph:]'
void env___IM_NSFont_advancementForGlyph_C(void *_instance, U32 _resultIndirect, U32 _self, U32 ag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSFont*)_self advancementForGlyph:ag];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSFont ascender]'
F32 env___IM_NSFont_ascender(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self ascender];
    return (F32)_result;
}

// method '+[NSFont boldSystemFontOfSize:]'
U32 env___CM_NSFont_boldSystemFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class boldSystemFontOfSize:fontSize];
    return (U32)_result;
}

// method '-[NSFont boundingRectForFont]'
void env___IM_NSFont_boundingRectForFont(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSFont*)_self boundingRectForFont];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSFont boundingRectForGlyph:]'
void env___IM_NSFont_boundingRectForGlyph_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aGlyph) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSFont*)_self boundingRectForGlyph:aGlyph];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSFont capHeight]'
F32 env___IM_NSFont_capHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self capHeight];
    return (F32)_result;
}

// method '+[NSFont controlContentFontOfSize:]'
U32 env___CM_NSFont_controlContentFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class controlContentFontOfSize:fontSize];
    return (U32)_result;
}

// method '-[NSFont coveredCharacterSet]'
U32 env___IM_NSFont_coveredCharacterSet(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self coveredCharacterSet];
    return (U32)_result;
}

// method '-[NSFont descender]'
F32 env___IM_NSFont_descender(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self descender];
    return (F32)_result;
}

// method '-[NSFont displayName]'
U32 env___IM_NSFont_displayName(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self displayName];
    return (U32)_result;
}

// method '-[NSFont familyName]'
U32 env___IM_NSFont_familyName(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self familyName];
    return (U32)_result;
}

// method '-[NSFont fontDescriptor]'
U32 env___IM_NSFont_fontDescriptor(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self fontDescriptor];
    return (U32)_result;
}

// method '-[NSFont fontName]'
U32 env___IM_NSFont_fontName(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self fontName];
    return (U32)_result;
}

// method '+[NSFont fontWithDescriptor:size:]'
U32 env___CM_NSFont_fontWithDescriptor_Csize_C(void *_instance, U32 _class, U32 fontDescriptorPointer, F32 fontSize) {
    id _t1 = (id)fontDescriptorPointer;
    id _result = (id)[(Class)_class fontWithDescriptor:_t1 size:fontSize];
    return (U32)_result;
}

// method '+[NSFont fontWithDescriptor:textTransform:]'
U32 env___CM_NSFont_fontWithDescriptor_CtextTransform_C(void *_instance, U32 _class, U32 fontDescriptorPointer, U32 textTransformPointer) {
    id _t1 = (id)fontDescriptorPointer;
    id _t2 = (id)textTransformPointer;
    id _result = (id)[(Class)_class fontWithDescriptor:_t1 textTransform:_t2];
    return (U32)_result;
}

// method '+[NSFont fontWithName:matrix:]'
U32 env___CM_NSFont_fontWithName_Cmatrix_C(void *_instance, U32 _class, U32 fontNamePointer, U32 fontMatrixPointer) {
    id _t1 = (id)fontNamePointer;
    const float* _t2 = (const float*)fontMatrixPointer;
    id _result = (id)[(Class)_class fontWithName:_t1 matrix:_t2];
    return (U32)_result;
}

// method '+[NSFont fontWithName:size:]'
U32 env___CM_NSFont_fontWithName_Csize_C(void *_instance, U32 _class, U32 fontNamePointer, F32 fontSize) {
    id _t1 = (id)fontNamePointer;
    id _result = (id)[(Class)_class fontWithName:_t1 size:fontSize];
    return (U32)_result;
}

// method '-[NSFont getAdvancements:forGlyphs:count:]'
void env___IM_NSFont_getAdvancements_CforGlyphs_Ccount_C(void *_instance, U32 _self, U32 advancementsPointer, U32 glyphsPointer, U32 glyphCount) {
    NSSizeArray _t1 = (NSSizeArray)advancementsPointer;
    const unsigned int* _t2 = (const unsigned int*)glyphsPointer;
    [(NSFont*)_self getAdvancements:_t1 forGlyphs:_t2 count:glyphCount];
}

// method '-[NSFont getBoundingRects:forGlyphs:count:]'
void env___IM_NSFont_getBoundingRects_CforGlyphs_Ccount_C(void *_instance, U32 _self, U32 boundsPointer, U32 glyphsPointer, U32 glyphCount) {
    NSRectArray _t1 = (NSRectArray)boundsPointer;
    const unsigned int* _t2 = (const unsigned int*)glyphsPointer;
    [(NSFont*)_self getBoundingRects:_t1 forGlyphs:_t2 count:glyphCount];
}

// method '-[NSFont glyphWithName:]'
U32 env___IM_NSFont_glyphWithName_C(void *_instance, U32 _self, U32 aNamePointer) {
    id _t1 = (id)aNamePointer;
    unsigned int _result = (unsigned int)[(NSFont*)_self glyphWithName:_t1];
    return (U32)_result;
}

// method '-[NSFont isFixedPitch]'
U32 env___IM_NSFont_isFixedPitch(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFont*)_self isFixedPitch];
    return (U32)_result;
}

// method '-[NSFont italicAngle]'
F32 env___IM_NSFont_italicAngle(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self italicAngle];
    return (F32)_result;
}

// method '+[NSFont labelFontOfSize:]'
U32 env___CM_NSFont_labelFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class labelFontOfSize:fontSize];
    return (U32)_result;
}

// method '+[NSFont labelFontSize]'
F32 env___CM_NSFont_labelFontSize(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class labelFontSize];
    return (F32)_result;
}

// method '-[NSFont leading]'
F32 env___IM_NSFont_leading(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self leading];
    return (F32)_result;
}

// method '-[NSFont matrix]'
U32 env___IM_NSFont_matrix(void *_instance, U32 _self) {
    const float* _result = (const float*)[(NSFont*)_self matrix];
    return (U32)_result;
}

// method '-[NSFont maximumAdvancement]'
void env___IM_NSFont_maximumAdvancement(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSFont*)_self maximumAdvancement];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSFont menuBarFontOfSize:]'
U32 env___CM_NSFont_menuBarFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class menuBarFontOfSize:fontSize];
    return (U32)_result;
}

// method '+[NSFont menuFontOfSize:]'
U32 env___CM_NSFont_menuFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class menuFontOfSize:fontSize];
    return (U32)_result;
}

// method '+[NSFont messageFontOfSize:]'
U32 env___CM_NSFont_messageFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class messageFontOfSize:fontSize];
    return (U32)_result;
}

// method '-[NSFont mostCompatibleStringEncoding]'
U32 env___IM_NSFont_mostCompatibleStringEncoding(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSFont*)_self mostCompatibleStringEncoding];
    return (U32)_result;
}

// method '-[NSFont numberOfGlyphs]'
U32 env___IM_NSFont_numberOfGlyphs(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSFont*)_self numberOfGlyphs];
    return (U32)_result;
}

// method '+[NSFont paletteFontOfSize:]'
U32 env___CM_NSFont_paletteFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class paletteFontOfSize:fontSize];
    return (U32)_result;
}

// method '-[NSFont pointSize]'
F32 env___IM_NSFont_pointSize(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self pointSize];
    return (F32)_result;
}

// method '-[NSFont printerFont]'
U32 env___IM_NSFont_printerFont(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self printerFont];
    return (U32)_result;
}

// method '-[NSFont renderingMode]'
U32 env___IM_NSFont_renderingMode(void *_instance, U32 _self) {
    int _result = (int)[(NSFont*)_self renderingMode];
    return (U32)_result;
}

// method '-[NSFont screenFont]'
U32 env___IM_NSFont_screenFont(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self screenFont];
    return (U32)_result;
}

// method '-[NSFont screenFontWithRenderingMode:]'
U32 env___IM_NSFont_screenFontWithRenderingMode_C(void *_instance, U32 _self, U32 renderingMode) {
    id _result = (id)[(NSFont*)_self screenFontWithRenderingMode:renderingMode];
    return (U32)_result;
}

// method '-[NSFont set]'
void env___IM_NSFont_set(void *_instance, U32 _self) {
    [(NSFont*)_self set];
}

// method '-[NSFont setInContext:]'
void env___IM_NSFont_setInContext_C(void *_instance, U32 _self, U32 graphicsContextPointer) {
    id _t1 = (id)graphicsContextPointer;
    [(NSFont*)_self setInContext:_t1];
}

// method '+[NSFont setUserFixedPitchFont:]'
void env___CM_NSFont_setUserFixedPitchFont_C(void *_instance, U32 _class, U32 aFontPointer) {
    id _t1 = (id)aFontPointer;
    [(Class)_class setUserFixedPitchFont:_t1];
}

// method '+[NSFont setUserFont:]'
void env___CM_NSFont_setUserFont_C(void *_instance, U32 _class, U32 aFontPointer) {
    id _t1 = (id)aFontPointer;
    [(Class)_class setUserFont:_t1];
}

// method '+[NSFont smallSystemFontSize]'
F32 env___CM_NSFont_smallSystemFontSize(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class smallSystemFontSize];
    return (F32)_result;
}

// method '+[NSFont systemFontOfSize:]'
U32 env___CM_NSFont_systemFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class systemFontOfSize:fontSize];
    return (U32)_result;
}

// method '+[NSFont systemFontSize]'
F32 env___CM_NSFont_systemFontSize(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class systemFontSize];
    return (F32)_result;
}

// method '+[NSFont systemFontSizeForControlSize:]'
F32 env___CM_NSFont_systemFontSizeForControlSize_C(void *_instance, U32 _class, U32 controlSize) {
    float _result = (float)[(Class)_class systemFontSizeForControlSize:controlSize];
    return (F32)_result;
}

// method '-[NSFont textTransform]'
U32 env___IM_NSFont_textTransform(void *_instance, U32 _self) {
    id _result = (id)[(NSFont*)_self textTransform];
    return (U32)_result;
}

// method '+[NSFont titleBarFontOfSize:]'
U32 env___CM_NSFont_titleBarFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class titleBarFontOfSize:fontSize];
    return (U32)_result;
}

// method '+[NSFont toolTipsFontOfSize:]'
U32 env___CM_NSFont_toolTipsFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class toolTipsFontOfSize:fontSize];
    return (U32)_result;
}

// method '-[NSFont underlinePosition]'
F32 env___IM_NSFont_underlinePosition(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self underlinePosition];
    return (F32)_result;
}

// method '-[NSFont underlineThickness]'
F32 env___IM_NSFont_underlineThickness(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self underlineThickness];
    return (F32)_result;
}

// method '+[NSFont userFixedPitchFontOfSize:]'
U32 env___CM_NSFont_userFixedPitchFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class userFixedPitchFontOfSize:fontSize];
    return (U32)_result;
}

// method '+[NSFont userFontOfSize:]'
U32 env___CM_NSFont_userFontOfSize_C(void *_instance, U32 _class, F32 fontSize) {
    id _result = (id)[(Class)_class userFontOfSize:fontSize];
    return (U32)_result;
}

// method '-[NSFont xHeight]'
F32 env___IM_NSFont_xHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSFont*)_self xHeight];
    return (F32)_result;
}

// method '-[NSFontDescriptor fontAttributes]'
U32 env___IM_NSFontDescriptor_fontAttributes(void *_instance, U32 _self) {
    id _result = (id)[(NSFontDescriptor*)_self fontAttributes];
    return (U32)_result;
}

// method '-[NSFontDescriptor fontDescriptorByAddingAttributes:]'
U32 env___IM_NSFontDescriptor_fontDescriptorByAddingAttributes_C(void *_instance, U32 _self, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    id _result = (id)[(NSFontDescriptor*)_self fontDescriptorByAddingAttributes:_t1];
    return (U32)_result;
}

// method '-[NSFontDescriptor fontDescriptorWithFace:]'
U32 env___IM_NSFontDescriptor_fontDescriptorWithFace_C(void *_instance, U32 _self, U32 newFacePointer) {
    id _t1 = (id)newFacePointer;
    id _result = (id)[(NSFontDescriptor*)_self fontDescriptorWithFace:_t1];
    return (U32)_result;
}

// method '-[NSFontDescriptor fontDescriptorWithFamily:]'
U32 env___IM_NSFontDescriptor_fontDescriptorWithFamily_C(void *_instance, U32 _self, U32 newFamilyPointer) {
    id _t1 = (id)newFamilyPointer;
    id _result = (id)[(NSFontDescriptor*)_self fontDescriptorWithFamily:_t1];
    return (U32)_result;
}

// method '+[NSFontDescriptor fontDescriptorWithFontAttributes:]'
U32 env___CM_NSFontDescriptor_fontDescriptorWithFontAttributes_C(void *_instance, U32 _class, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    id _result = (id)[(Class)_class fontDescriptorWithFontAttributes:_t1];
    return (U32)_result;
}

// method '-[NSFontDescriptor fontDescriptorWithMatrix:]'
U32 env___IM_NSFontDescriptor_fontDescriptorWithMatrix_C(void *_instance, U32 _self, U32 matrixPointer) {
    id _t1 = (id)matrixPointer;
    id _result = (id)[(NSFontDescriptor*)_self fontDescriptorWithMatrix:_t1];
    return (U32)_result;
}

// method '+[NSFontDescriptor fontDescriptorWithName:matrix:]'
U32 env___CM_NSFontDescriptor_fontDescriptorWithName_Cmatrix_C(void *_instance, U32 _class, U32 fontNamePointer, U32 matrixPointer) {
    id _t1 = (id)fontNamePointer;
    id _t2 = (id)matrixPointer;
    id _result = (id)[(Class)_class fontDescriptorWithName:_t1 matrix:_t2];
    return (U32)_result;
}

// method '+[NSFontDescriptor fontDescriptorWithName:size:]'
U32 env___CM_NSFontDescriptor_fontDescriptorWithName_Csize_C(void *_instance, U32 _class, U32 fontNamePointer, F32 size) {
    id _t1 = (id)fontNamePointer;
    id _result = (id)[(Class)_class fontDescriptorWithName:_t1 size:size];
    return (U32)_result;
}

// method '-[NSFontDescriptor fontDescriptorWithSize:]'
U32 env___IM_NSFontDescriptor_fontDescriptorWithSize_C(void *_instance, U32 _self, F32 newPointSize) {
    id _result = (id)[(NSFontDescriptor*)_self fontDescriptorWithSize:newPointSize];
    return (U32)_result;
}

// method '-[NSFontDescriptor fontDescriptorWithSymbolicTraits:]'
U32 env___IM_NSFontDescriptor_fontDescriptorWithSymbolicTraits_C(void *_instance, U32 _self, U32 symbolicTraits) {
    id _result = (id)[(NSFontDescriptor*)_self fontDescriptorWithSymbolicTraits:symbolicTraits];
    return (U32)_result;
}

// method '-[NSFontDescriptor initWithFontAttributes:]'
U32 env___IM_NSFontDescriptor_initWithFontAttributes_C(void *_instance, U32 _self, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    id _result = (id)[(NSFontDescriptor*)_self initWithFontAttributes:_t1];
    return (U32)_result;
}

// method '-[NSFontDescriptor matchingFontDescriptorsWithMandatoryKeys:]'
U32 env___IM_NSFontDescriptor_matchingFontDescriptorsWithMandatoryKeys_C(void *_instance, U32 _self, U32 mandatoryKeysPointer) {
    id _t1 = (id)mandatoryKeysPointer;
    id _result = (id)[(NSFontDescriptor*)_self matchingFontDescriptorsWithMandatoryKeys:_t1];
    return (U32)_result;
}

// method '-[NSFontDescriptor matrix]'
U32 env___IM_NSFontDescriptor_matrix(void *_instance, U32 _self) {
    id _result = (id)[(NSFontDescriptor*)_self matrix];
    return (U32)_result;
}

// method '-[NSFontDescriptor objectForKey:]'
U32 env___IM_NSFontDescriptor_objectForKey_C(void *_instance, U32 _self, U32 anAttributePointer) {
    id _t1 = (id)anAttributePointer;
    id _result = (id)[(NSFontDescriptor*)_self objectForKey:_t1];
    return (U32)_result;
}

// method '-[NSFontDescriptor pointSize]'
F32 env___IM_NSFontDescriptor_pointSize(void *_instance, U32 _self) {
    float _result = (float)[(NSFontDescriptor*)_self pointSize];
    return (F32)_result;
}

// method '-[NSFontDescriptor postscriptName]'
U32 env___IM_NSFontDescriptor_postscriptName(void *_instance, U32 _self) {
    id _result = (id)[(NSFontDescriptor*)_self postscriptName];
    return (U32)_result;
}

// method '-[NSFontDescriptor symbolicTraits]'
U32 env___IM_NSFontDescriptor_symbolicTraits(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSFontDescriptor*)_self symbolicTraits];
    return (U32)_result;
}

// method '-[NSFontManager action]'
U32 env___IM_NSFontManager_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSFontManager*)_self action];
    return (U32)_result;
}

// method '-[NSFontManager addCollection:options:]'
U32 env___IM_NSFontManager_addCollection_Coptions_C(void *_instance, U32 _self, U32 collectionNamePointer, U32 collectionOptions) {
    id _t1 = (id)collectionNamePointer;
    BOOL _result = (BOOL)[(NSFontManager*)_self addCollection:_t1 options:collectionOptions];
    return (U32)_result;
}

// method '-[NSFontManager addFontDescriptors:toCollection:]'
void env___IM_NSFontManager_addFontDescriptors_CtoCollection_C(void *_instance, U32 _self, U32 descriptorsPointer, U32 collectionNamePointer) {
    id _t1 = (id)descriptorsPointer;
    id _t2 = (id)collectionNamePointer;
    [(NSFontManager*)_self addFontDescriptors:_t1 toCollection:_t2];
}

// method '-[NSFontManager addFontTrait:]'
void env___IM_NSFontManager_addFontTrait_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSFontManager*)_self addFontTrait:_t1];
}

// method '-[NSFontManager availableFontFamilies]'
U32 env___IM_NSFontManager_availableFontFamilies(void *_instance, U32 _self) {
    id _result = (id)[(NSFontManager*)_self availableFontFamilies];
    return (U32)_result;
}

// method '-[NSFontManager availableFontNamesMatchingFontDescriptor:]'
U32 env___IM_NSFontManager_availableFontNamesMatchingFontDescriptor_C(void *_instance, U32 _self, U32 descriptorPointer) {
    id _t1 = (id)descriptorPointer;
    id _result = (id)[(NSFontManager*)_self availableFontNamesMatchingFontDescriptor:_t1];
    return (U32)_result;
}

// method '-[NSFontManager availableFontNamesWithTraits:]'
U32 env___IM_NSFontManager_availableFontNamesWithTraits_C(void *_instance, U32 _self, U32 someTraits) {
    id _result = (id)[(NSFontManager*)_self availableFontNamesWithTraits:someTraits];
    return (U32)_result;
}

// method '-[NSFontManager availableFonts]'
U32 env___IM_NSFontManager_availableFonts(void *_instance, U32 _self) {
    id _result = (id)[(NSFontManager*)_self availableFonts];
    return (U32)_result;
}

// method '-[NSFontManager availableMembersOfFontFamily:]'
U32 env___IM_NSFontManager_availableMembersOfFontFamily_C(void *_instance, U32 _self, U32 famPointer) {
    id _t1 = (id)famPointer;
    id _result = (id)[(NSFontManager*)_self availableMembersOfFontFamily:_t1];
    return (U32)_result;
}

// method '-[NSFontManager collectionNames]'
U32 env___IM_NSFontManager_collectionNames(void *_instance, U32 _self) {
    id _result = (id)[(NSFontManager*)_self collectionNames];
    return (U32)_result;
}

// method '-[NSFontManager convertAttributes:]'
U32 env___IM_NSFontManager_convertAttributes_C(void *_instance, U32 _self, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    id _result = (id)[(NSFontManager*)_self convertAttributes:_t1];
    return (U32)_result;
}

// method '-[NSFontManager convertFont:]'
U32 env___IM_NSFontManager_convertFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    id _result = (id)[(NSFontManager*)_self convertFont:_t1];
    return (U32)_result;
}

// method '-[NSFontManager convertFont:toFace:]'
U32 env___IM_NSFontManager_convertFont_CtoFace_C(void *_instance, U32 _self, U32 fontObjPointer, U32 typefacePointer) {
    id _t1 = (id)fontObjPointer;
    id _t2 = (id)typefacePointer;
    id _result = (id)[(NSFontManager*)_self convertFont:_t1 toFace:_t2];
    return (U32)_result;
}

// method '-[NSFontManager convertFont:toFamily:]'
U32 env___IM_NSFontManager_convertFont_CtoFamily_C(void *_instance, U32 _self, U32 fontObjPointer, U32 familyPointer) {
    id _t1 = (id)fontObjPointer;
    id _t2 = (id)familyPointer;
    id _result = (id)[(NSFontManager*)_self convertFont:_t1 toFamily:_t2];
    return (U32)_result;
}

// method '-[NSFontManager convertFont:toHaveTrait:]'
U32 env___IM_NSFontManager_convertFont_CtoHaveTrait_C(void *_instance, U32 _self, U32 fontObjPointer, U32 trait) {
    id _t1 = (id)fontObjPointer;
    id _result = (id)[(NSFontManager*)_self convertFont:_t1 toHaveTrait:trait];
    return (U32)_result;
}

// method '-[NSFontManager convertFont:toNotHaveTrait:]'
U32 env___IM_NSFontManager_convertFont_CtoNotHaveTrait_C(void *_instance, U32 _self, U32 fontObjPointer, U32 trait) {
    id _t1 = (id)fontObjPointer;
    id _result = (id)[(NSFontManager*)_self convertFont:_t1 toNotHaveTrait:trait];
    return (U32)_result;
}

// method '-[NSFontManager convertFont:toSize:]'
U32 env___IM_NSFontManager_convertFont_CtoSize_C(void *_instance, U32 _self, U32 fontObjPointer, F32 size) {
    id _t1 = (id)fontObjPointer;
    id _result = (id)[(NSFontManager*)_self convertFont:_t1 toSize:size];
    return (U32)_result;
}

// method '-[NSFontManager convertWeight:ofFont:]'
U32 env___IM_NSFontManager_convertWeight_CofFont_C(void *_instance, U32 _self, U32 upFlag, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    id _result = (id)[(NSFontManager*)_self convertWeight:upFlag ofFont:_t1];
    return (U32)_result;
}

// method '-[NSFontManager delegate]'
U32 env___IM_NSFontManager_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSFontManager*)_self delegate];
    return (U32)_result;
}

// method '-[NSFontManager fontDescriptorsInCollection:]'
U32 env___IM_NSFontManager_fontDescriptorsInCollection_C(void *_instance, U32 _self, U32 collectionNamesPointer) {
    id _t1 = (id)collectionNamesPointer;
    id _result = (id)[(NSFontManager*)_self fontDescriptorsInCollection:_t1];
    return (U32)_result;
}

// method '-[NSFontManager fontMenu:]'
U32 env___IM_NSFontManager_fontMenu_C(void *_instance, U32 _self, U32 create) {
    id _result = (id)[(NSFontManager*)_self fontMenu:create];
    return (U32)_result;
}

// method '-[NSFontManager fontNamed:hasTraits:]'
U32 env___IM_NSFontManager_fontNamed_ChasTraits_C(void *_instance, U32 _self, U32 fNamePointer, U32 someTraits) {
    id _t1 = (id)fNamePointer;
    BOOL _result = (BOOL)[(NSFontManager*)_self fontNamed:_t1 hasTraits:someTraits];
    return (U32)_result;
}

// method '-[NSFontManager fontPanel:]'
U32 env___IM_NSFontManager_fontPanel_C(void *_instance, U32 _self, U32 create) {
    id _result = (id)[(NSFontManager*)_self fontPanel:create];
    return (U32)_result;
}

// method '-[NSFontManager fontWithFamily:traits:weight:size:]'
U32 env___IM_NSFontManager_fontWithFamily_Ctraits_Cweight_Csize_C(void *_instance, U32 _self, U32 familyPointer, U32 traits, U32 weight, F32 size) {
    id _t1 = (id)familyPointer;
    id _result = (id)[(NSFontManager*)_self fontWithFamily:_t1 traits:traits weight:weight size:size];
    return (U32)_result;
}

// method '-[NSFontManager isEnabled]'
U32 env___IM_NSFontManager_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFontManager*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSFontManager isMultiple]'
U32 env___IM_NSFontManager_isMultiple(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFontManager*)_self isMultiple];
    return (U32)_result;
}

// method '-[NSFontManager localizedNameForFamily:face:]'
U32 env___IM_NSFontManager_localizedNameForFamily_Cface_C(void *_instance, U32 _self, U32 familyPointer, U32 faceKeyPointer) {
    id _t1 = (id)familyPointer;
    id _t2 = (id)faceKeyPointer;
    id _result = (id)[(NSFontManager*)_self localizedNameForFamily:_t1 face:_t2];
    return (U32)_result;
}

// method '-[NSFontManager modifyFont:]'
void env___IM_NSFontManager_modifyFont_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSFontManager*)_self modifyFont:_t1];
}

// method '-[NSFontManager modifyFontViaPanel:]'
void env___IM_NSFontManager_modifyFontViaPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSFontManager*)_self modifyFontViaPanel:_t1];
}

// method '-[NSFontManager orderFrontFontPanel:]'
void env___IM_NSFontManager_orderFrontFontPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSFontManager*)_self orderFrontFontPanel:_t1];
}

// method '-[NSFontManager orderFrontStylesPanel:]'
void env___IM_NSFontManager_orderFrontStylesPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSFontManager*)_self orderFrontStylesPanel:_t1];
}

// method '-[NSFontManager removeCollection:]'
U32 env___IM_NSFontManager_removeCollection_C(void *_instance, U32 _self, U32 collectionNamePointer) {
    id _t1 = (id)collectionNamePointer;
    BOOL _result = (BOOL)[(NSFontManager*)_self removeCollection:_t1];
    return (U32)_result;
}

// method '-[NSFontManager removeFontDescriptor:fromCollection:]'
void env___IM_NSFontManager_removeFontDescriptor_CfromCollection_C(void *_instance, U32 _self, U32 descriptorPointer, U32 collectionPointer) {
    id _t1 = (id)descriptorPointer;
    id _t2 = (id)collectionPointer;
    [(NSFontManager*)_self removeFontDescriptor:_t1 fromCollection:_t2];
}

// method '-[NSFontManager removeFontTrait:]'
void env___IM_NSFontManager_removeFontTrait_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSFontManager*)_self removeFontTrait:_t1];
}

// method '-[NSFontManager selectedFont]'
U32 env___IM_NSFontManager_selectedFont(void *_instance, U32 _self) {
    id _result = (id)[(NSFontManager*)_self selectedFont];
    return (U32)_result;
}

// method '-[NSFontManager sendAction]'
U32 env___IM_NSFontManager_sendAction(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFontManager*)_self sendAction];
    return (U32)_result;
}

// method '-[NSFontManager setAction:]'
void env___IM_NSFontManager_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSFontManager*)_self setAction:_t1];
}

// method '-[NSFontManager setDelegate:]'
void env___IM_NSFontManager_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSFontManager*)_self setDelegate:_t1];
}

// method '-[NSFontManager setEnabled:]'
void env___IM_NSFontManager_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSFontManager*)_self setEnabled:flag];
}

// method '+[NSFontManager setFontManagerFactory:]'
void env___CM_NSFontManager_setFontManagerFactory_C(void *_instance, U32 _class, U32 factoryIdPointer) {
    Class _t1 = (Class)factoryIdPointer;
    [(Class)_class setFontManagerFactory:_t1];
}

// method '-[NSFontManager setFontMenu:]'
void env___IM_NSFontManager_setFontMenu_C(void *_instance, U32 _self, U32 newMenuPointer) {
    id _t1 = (id)newMenuPointer;
    [(NSFontManager*)_self setFontMenu:_t1];
}

// method '+[NSFontManager setFontPanelFactory:]'
void env___CM_NSFontManager_setFontPanelFactory_C(void *_instance, U32 _class, U32 factoryIdPointer) {
    Class _t1 = (Class)factoryIdPointer;
    [(Class)_class setFontPanelFactory:_t1];
}

// method '-[NSFontManager setSelectedAttributes:isMultiple:]'
void env___IM_NSFontManager_setSelectedAttributes_CisMultiple_C(void *_instance, U32 _self, U32 attributesPointer, U32 flag) {
    id _t1 = (id)attributesPointer;
    [(NSFontManager*)_self setSelectedAttributes:_t1 isMultiple:flag];
}

// method '-[NSFontManager setSelectedFont:isMultiple:]'
void env___IM_NSFontManager_setSelectedFont_CisMultiple_C(void *_instance, U32 _self, U32 fontObjPointer, U32 flag) {
    id _t1 = (id)fontObjPointer;
    [(NSFontManager*)_self setSelectedFont:_t1 isMultiple:flag];
}

// method '+[NSFontManager sharedFontManager]'
U32 env___CM_NSFontManager_sharedFontManager(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedFontManager];
    return (U32)_result;
}

// method '-[NSFontManager traitsOfFont:]'
U32 env___IM_NSFontManager_traitsOfFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    unsigned int _result = (unsigned int)[(NSFontManager*)_self traitsOfFont:_t1];
    return (U32)_result;
}

// method '-[NSFontManager weightOfFont:]'
U32 env___IM_NSFontManager_weightOfFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    int _result = (int)[(NSFontManager*)_self weightOfFont:_t1];
    return (U32)_result;
}

// method '-[NSFontPanel accessoryView]'
U32 env___IM_NSFontPanel_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSFontPanel*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSFontPanel isEnabled]'
U32 env___IM_NSFontPanel_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFontPanel*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSFontPanel panelConvertFont:]'
U32 env___IM_NSFontPanel_panelConvertFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    id _result = (id)[(NSFontPanel*)_self panelConvertFont:_t1];
    return (U32)_result;
}

// method '-[NSFontPanel reloadDefaultFontFamilies]'
void env___IM_NSFontPanel_reloadDefaultFontFamilies(void *_instance, U32 _self) {
    [(NSFontPanel*)_self reloadDefaultFontFamilies];
}

// method '-[NSFontPanel setAccessoryView:]'
void env___IM_NSFontPanel_setAccessoryView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSFontPanel*)_self setAccessoryView:_t1];
}

// method '-[NSFontPanel setEnabled:]'
void env___IM_NSFontPanel_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSFontPanel*)_self setEnabled:flag];
}

// method '-[NSFontPanel setPanelFont:isMultiple:]'
void env___IM_NSFontPanel_setPanelFont_CisMultiple_C(void *_instance, U32 _self, U32 fontObjPointer, U32 flag) {
    id _t1 = (id)fontObjPointer;
    [(NSFontPanel*)_self setPanelFont:_t1 isMultiple:flag];
}

// method '+[NSFontPanel sharedFontPanel]'
U32 env___CM_NSFontPanel_sharedFontPanel(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedFontPanel];
    return (U32)_result;
}

// method '+[NSFontPanel sharedFontPanelExists]'
U32 env___CM_NSFontPanel_sharedFontPanelExists(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class sharedFontPanelExists];
    return (U32)_result;
}

// method '-[NSFontPanel worksWhenModal]'
U32 env___IM_NSFontPanel_worksWhenModal(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFontPanel*)_self worksWhenModal];
    return (U32)_result;
}

// method '-[NSForm addEntry:]'
U32 env___IM_NSForm_addEntry_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    id _result = (id)[(NSForm*)_self addEntry:_t1];
    return (U32)_result;
}

// method '-[NSForm cellAtIndex:]'
U32 env___IM_NSForm_cellAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSForm*)_self cellAtIndex:index];
    return (U32)_result;
}

// method '-[NSForm drawCellAtIndex:]'
void env___IM_NSForm_drawCellAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSForm*)_self drawCellAtIndex:index];
}

// method '-[NSForm indexOfCellWithTag:]'
U32 env___IM_NSForm_indexOfCellWithTag_C(void *_instance, U32 _self, U32 aTag) {
    int _result = (int)[(NSForm*)_self indexOfCellWithTag:aTag];
    return (U32)_result;
}

// method '-[NSForm indexOfSelectedItem]'
U32 env___IM_NSForm_indexOfSelectedItem(void *_instance, U32 _self) {
    int _result = (int)[(NSForm*)_self indexOfSelectedItem];
    return (U32)_result;
}

// method '-[NSForm insertEntry:atIndex:]'
U32 env___IM_NSForm_insertEntry_CatIndex_C(void *_instance, U32 _self, U32 titlePointer, U32 index) {
    id _t1 = (id)titlePointer;
    id _result = (id)[(NSForm*)_self insertEntry:_t1 atIndex:index];
    return (U32)_result;
}

// method '-[NSForm removeEntryAtIndex:]'
void env___IM_NSForm_removeEntryAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSForm*)_self removeEntryAtIndex:index];
}

// method '-[NSForm selectTextAtIndex:]'
void env___IM_NSForm_selectTextAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSForm*)_self selectTextAtIndex:index];
}

// method '-[NSForm setBezeled:]'
void env___IM_NSForm_setBezeled_C(void *_instance, U32 _self, U32 flag) {
    [(NSForm*)_self setBezeled:flag];
}

// method '-[NSForm setBordered:]'
void env___IM_NSForm_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSForm*)_self setBordered:flag];
}

// method '-[NSForm setEntryWidth:]'
void env___IM_NSForm_setEntryWidth_C(void *_instance, U32 _self, F32 width) {
    [(NSForm*)_self setEntryWidth:width];
}

// method '-[NSForm setFrameSize:]'
void env___IM_NSForm_setFrameSize_C(void *_instance, U32 _self, U32 newSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + newSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSForm*)_self setFrameSize:_t1];
}

// method '-[NSForm setInterlineSpacing:]'
void env___IM_NSForm_setInterlineSpacing_C(void *_instance, U32 _self, F32 spacing) {
    [(NSForm*)_self setInterlineSpacing:spacing];
}

// method '-[NSForm setTextAlignment:]'
void env___IM_NSForm_setTextAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSForm*)_self setTextAlignment:mode];
}

// method '-[NSForm setTextBaseWritingDirection:]'
void env___IM_NSForm_setTextBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSForm*)_self setTextBaseWritingDirection:writingDirection];
}

// method '-[NSForm setTextFont:]'
void env___IM_NSForm_setTextFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSForm*)_self setTextFont:_t1];
}

// method '-[NSForm setTitleAlignment:]'
void env___IM_NSForm_setTitleAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSForm*)_self setTitleAlignment:mode];
}

// method '-[NSForm setTitleBaseWritingDirection:]'
void env___IM_NSForm_setTitleBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSForm*)_self setTitleBaseWritingDirection:writingDirection];
}

// method '-[NSForm setTitleFont:]'
void env___IM_NSForm_setTitleFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSForm*)_self setTitleFont:_t1];
}

// method '-[NSFormCell attributedTitle]'
U32 env___IM_NSFormCell_attributedTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSFormCell*)_self attributedTitle];
    return (U32)_result;
}

// method '-[NSFormCell initTextCell:]'
U32 env___IM_NSFormCell_initTextCell_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    id _result = (id)[(NSFormCell*)_self initTextCell:_t1];
    return (U32)_result;
}

// method '-[NSFormCell isOpaque]'
U32 env___IM_NSFormCell_isOpaque(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSFormCell*)_self isOpaque];
    return (U32)_result;
}

// method '-[NSFormCell placeholderAttributedString]'
U32 env___IM_NSFormCell_placeholderAttributedString(void *_instance, U32 _self) {
    id _result = (id)[(NSFormCell*)_self placeholderAttributedString];
    return (U32)_result;
}

// method '-[NSFormCell placeholderString]'
U32 env___IM_NSFormCell_placeholderString(void *_instance, U32 _self) {
    id _result = (id)[(NSFormCell*)_self placeholderString];
    return (U32)_result;
}

// method '-[NSFormCell setAttributedTitle:]'
void env___IM_NSFormCell_setAttributedTitle_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSFormCell*)_self setAttributedTitle:_t1];
}

// method '-[NSFormCell setPlaceholderAttributedString:]'
void env___IM_NSFormCell_setPlaceholderAttributedString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSFormCell*)_self setPlaceholderAttributedString:_t1];
}

// method '-[NSFormCell setPlaceholderString:]'
void env___IM_NSFormCell_setPlaceholderString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSFormCell*)_self setPlaceholderString:_t1];
}

// method '-[NSFormCell setTitle:]'
void env___IM_NSFormCell_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSFormCell*)_self setTitle:_t1];
}

// method '-[NSFormCell setTitleAlignment:]'
void env___IM_NSFormCell_setTitleAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSFormCell*)_self setTitleAlignment:mode];
}

// method '-[NSFormCell setTitleBaseWritingDirection:]'
void env___IM_NSFormCell_setTitleBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSFormCell*)_self setTitleBaseWritingDirection:writingDirection];
}

// method '-[NSFormCell setTitleFont:]'
void env___IM_NSFormCell_setTitleFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSFormCell*)_self setTitleFont:_t1];
}

// method '-[NSFormCell setTitleWidth:]'
void env___IM_NSFormCell_setTitleWidth_C(void *_instance, U32 _self, F32 width) {
    [(NSFormCell*)_self setTitleWidth:width];
}

// method '-[NSFormCell setTitleWithMnemonic:]'
void env___IM_NSFormCell_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSFormCell*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSFormCell title]'
U32 env___IM_NSFormCell_title(void *_instance, U32 _self) {
    id _result = (id)[(NSFormCell*)_self title];
    return (U32)_result;
}

// method '-[NSFormCell titleAlignment]'
U32 env___IM_NSFormCell_titleAlignment(void *_instance, U32 _self) {
    int _result = (int)[(NSFormCell*)_self titleAlignment];
    return (U32)_result;
}

// method '-[NSFormCell titleBaseWritingDirection]'
U32 env___IM_NSFormCell_titleBaseWritingDirection(void *_instance, U32 _self) {
    int _result = (int)[(NSFormCell*)_self titleBaseWritingDirection];
    return (U32)_result;
}

// method '-[NSFormCell titleFont]'
U32 env___IM_NSFormCell_titleFont(void *_instance, U32 _self) {
    id _result = (id)[(NSFormCell*)_self titleFont];
    return (U32)_result;
}

// method '-[NSFormCell titleWidth]'
F32 env___IM_NSFormCell_titleWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSFormCell*)_self titleWidth];
    return (F32)_result;
}

// method '-[NSFormCell titleWidth:]'
F32 env___IM_NSFormCell_titleWidth_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    float _result = (float)[(NSFormCell*)_self titleWidth:_t1];
    return (F32)_result;
}

// method '-[NSGlyphGenerator generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:]'
void env___IM_NSGlyphGenerator_generateGlyphsForGlyphStorage_CdesiredNumberOfCharacters_CglyphIndex_CcharacterIndex_C(void *_instance, U32 _self, U32 glyphStoragePointer, U32 nChars, U32 glyphIndexPointer, U32 charIndexPointer) {
    id _t1 = (id)glyphStoragePointer;
    unsigned int* _t2 = (unsigned int*)glyphIndexPointer;
    unsigned int* _t3 = (unsigned int*)charIndexPointer;
    [(NSGlyphGenerator*)_self generateGlyphsForGlyphStorage:_t1 desiredNumberOfCharacters:nChars glyphIndex:_t2 characterIndex:_t3];
}

// method '+[NSGlyphGenerator sharedGlyphGenerator]'
U32 env___CM_NSGlyphGenerator_sharedGlyphGenerator(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedGlyphGenerator];
    return (U32)_result;
}

// method '-[NSGlyphInfo characterCollection]'
U32 env___IM_NSGlyphInfo_characterCollection(void *_instance, U32 _self) {
    int _result = (int)[(NSGlyphInfo*)_self characterCollection];
    return (U32)_result;
}

// method '-[NSGlyphInfo characterIdentifier]'
U32 env___IM_NSGlyphInfo_characterIdentifier(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSGlyphInfo*)_self characterIdentifier];
    return (U32)_result;
}

// method '+[NSGlyphInfo glyphInfoWithCharacterIdentifier:collection:baseString:]'
U32 env___CM_NSGlyphInfo_glyphInfoWithCharacterIdentifier_Ccollection_CbaseString_C(void *_instance, U32 _class, U32 cid, U32 characterCollection, U32 theStringPointer) {
    id _t1 = (id)theStringPointer;
    id _result = (id)[(Class)_class glyphInfoWithCharacterIdentifier:cid collection:characterCollection baseString:_t1];
    return (U32)_result;
}

// method '+[NSGlyphInfo glyphInfoWithGlyph:forFont:baseString:]'
U32 env___CM_NSGlyphInfo_glyphInfoWithGlyph_CforFont_CbaseString_C(void *_instance, U32 _class, U32 glyph, U32 fontPointer, U32 theStringPointer) {
    id _t1 = (id)fontPointer;
    id _t2 = (id)theStringPointer;
    id _result = (id)[(Class)_class glyphInfoWithGlyph:glyph forFont:_t1 baseString:_t2];
    return (U32)_result;
}

// method '+[NSGlyphInfo glyphInfoWithGlyphName:forFont:baseString:]'
U32 env___CM_NSGlyphInfo_glyphInfoWithGlyphName_CforFont_CbaseString_C(void *_instance, U32 _class, U32 glyphNamePointer, U32 fontPointer, U32 theStringPointer) {
    id _t1 = (id)glyphNamePointer;
    id _t2 = (id)fontPointer;
    id _t3 = (id)theStringPointer;
    id _result = (id)[(Class)_class glyphInfoWithGlyphName:_t1 forFont:_t2 baseString:_t3];
    return (U32)_result;
}

// method '-[NSGlyphInfo glyphName]'
U32 env___IM_NSGlyphInfo_glyphName(void *_instance, U32 _self) {
    id _result = (id)[(NSGlyphInfo*)_self glyphName];
    return (U32)_result;
}

// method '-[NSGraphicsContext CIContext]'
U32 env___IM_NSGraphicsContext_CIContext(void *_instance, U32 _self) {
    id _result = (id)[(NSGraphicsContext*)_self CIContext];
    return (U32)_result;
}

// method '-[NSGraphicsContext attributes]'
U32 env___IM_NSGraphicsContext_attributes(void *_instance, U32 _self) {
    id _result = (id)[(NSGraphicsContext*)_self attributes];
    return (U32)_result;
}

// method '-[NSGraphicsContext compositingOperation]'
U32 env___IM_NSGraphicsContext_compositingOperation(void *_instance, U32 _self) {
    int _result = (int)[(NSGraphicsContext*)_self compositingOperation];
    return (U32)_result;
}

// method '+[NSGraphicsContext currentContext]'
U32 env___CM_NSGraphicsContext_currentContext(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class currentContext];
    return (U32)_result;
}

// method '+[NSGraphicsContext currentContextDrawingToScreen]'
U32 env___CM_NSGraphicsContext_currentContextDrawingToScreen(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class currentContextDrawingToScreen];
    return (U32)_result;
}

// method '-[NSGraphicsContext flushGraphics]'
void env___IM_NSGraphicsContext_flushGraphics(void *_instance, U32 _self) {
    [(NSGraphicsContext*)_self flushGraphics];
}

// method '-[NSGraphicsContext focusStack]'
U32 env___IM_NSGraphicsContext_focusStack(void *_instance, U32 _self) {
    void* _result = (void*)[(NSGraphicsContext*)_self focusStack];
    return (U32)_result;
}

// method '+[NSGraphicsContext graphicsContextWithAttributes:]'
U32 env___CM_NSGraphicsContext_graphicsContextWithAttributes_C(void *_instance, U32 _class, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    id _result = (id)[(Class)_class graphicsContextWithAttributes:_t1];
    return (U32)_result;
}

// method '+[NSGraphicsContext graphicsContextWithBitmapImageRep:]'
U32 env___CM_NSGraphicsContext_graphicsContextWithBitmapImageRep_C(void *_instance, U32 _class, U32 bitmapRepPointer) {
    id _t1 = (id)bitmapRepPointer;
    id _result = (id)[(Class)_class graphicsContextWithBitmapImageRep:_t1];
    return (U32)_result;
}

// method '+[NSGraphicsContext graphicsContextWithGraphicsPort:flipped:]'
U32 env___CM_NSGraphicsContext_graphicsContextWithGraphicsPort_Cflipped_C(void *_instance, U32 _class, U32 graphicsPortPointer, U32 initialFlippedState) {
    struct CGContext* _t1 = (struct CGContext*)graphicsPortPointer;
    id _result = (id)[(Class)_class graphicsContextWithGraphicsPort:_t1 flipped:initialFlippedState];
    return (U32)_result;
}

// method '+[NSGraphicsContext graphicsContextWithWindow:]'
U32 env___CM_NSGraphicsContext_graphicsContextWithWindow_C(void *_instance, U32 _class, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    id _result = (id)[(Class)_class graphicsContextWithWindow:_t1];
    return (U32)_result;
}

// method '-[NSGraphicsContext graphicsPort]'
U32 env___IM_NSGraphicsContext_graphicsPort(void *_instance, U32 _self) {
    struct CGContext* _result = (struct CGContext*)[(NSGraphicsContext*)_self graphicsPort];
    return (U32)_result;
}

// method '-[NSGraphicsContext imageInterpolation]'
U32 env___IM_NSGraphicsContext_imageInterpolation(void *_instance, U32 _self) {
    int _result = (int)[(NSGraphicsContext*)_self imageInterpolation];
    return (U32)_result;
}

// method '-[NSGraphicsContext isDrawingToScreen]'
U32 env___IM_NSGraphicsContext_isDrawingToScreen(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSGraphicsContext*)_self isDrawingToScreen];
    return (U32)_result;
}

// method '-[NSGraphicsContext isFlipped]'
U32 env___IM_NSGraphicsContext_isFlipped(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSGraphicsContext*)_self isFlipped];
    return (U32)_result;
}

// method '-[NSGraphicsContext patternPhase]'
void env___IM_NSGraphicsContext_patternPhase(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSGraphicsContext*)_self patternPhase];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSGraphicsContext restoreGraphicsState]'
void env___CM_NSGraphicsContext_restoreGraphicsState(void *_instance, U32 _class) {
    [(Class)_class restoreGraphicsState];
}

// method '-[NSGraphicsContext restoreGraphicsState]'
void env___IM_NSGraphicsContext_restoreGraphicsState(void *_instance, U32 _self) {
    [(NSGraphicsContext*)_self restoreGraphicsState];
}

// method '+[NSGraphicsContext saveGraphicsState]'
void env___CM_NSGraphicsContext_saveGraphicsState(void *_instance, U32 _class) {
    [(Class)_class saveGraphicsState];
}

// method '-[NSGraphicsContext saveGraphicsState]'
void env___IM_NSGraphicsContext_saveGraphicsState(void *_instance, U32 _self) {
    [(NSGraphicsContext*)_self saveGraphicsState];
}

// method '-[NSGraphicsContext setCompositingOperation:]'
void env___IM_NSGraphicsContext_setCompositingOperation_C(void *_instance, U32 _self, U32 operation) {
    [(NSGraphicsContext*)_self setCompositingOperation:operation];
}

// method '+[NSGraphicsContext setCurrentContext:]'
void env___CM_NSGraphicsContext_setCurrentContext_C(void *_instance, U32 _class, U32 contextPointer) {
    id _t1 = (id)contextPointer;
    [(Class)_class setCurrentContext:_t1];
}

// method '+[NSGraphicsContext setGraphicsState:]'
void env___CM_NSGraphicsContext_setGraphicsState_C(void *_instance, U32 _class, U32 gState) {
    [(Class)_class setGraphicsState:gState];
}

// method '-[NSGraphicsContext setImageInterpolation:]'
void env___IM_NSGraphicsContext_setImageInterpolation_C(void *_instance, U32 _self, U32 interpolation) {
    [(NSGraphicsContext*)_self setImageInterpolation:interpolation];
}

// method '-[NSGraphicsContext setPatternPhase:]'
void env___IM_NSGraphicsContext_setPatternPhase_C(void *_instance, U32 _self, U32 phaseIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + phaseIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSGraphicsContext*)_self setPatternPhase:_t1];
}

// method '-[NSGraphicsContext setShouldAntialias:]'
void env___IM_NSGraphicsContext_setShouldAntialias_C(void *_instance, U32 _self, U32 antialias) {
    [(NSGraphicsContext*)_self setShouldAntialias:antialias];
}

// method '-[NSGraphicsContext shouldAntialias]'
U32 env___IM_NSGraphicsContext_shouldAntialias(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSGraphicsContext*)_self shouldAntialias];
    return (U32)_result;
}

// method '-[NSHelpManager contextHelpForObject:]'
U32 env___IM_NSHelpManager_contextHelpForObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    id _result = (id)[(NSHelpManager*)_self contextHelpForObject:_t1];
    return (U32)_result;
}

// method '-[NSHelpManager findString:inBook:]'
void env___IM_NSHelpManager_findString_CinBook_C(void *_instance, U32 _self, U32 queryPointer, U32 bookPointer) {
    id _t1 = (id)queryPointer;
    id _t2 = (id)bookPointer;
    [(NSHelpManager*)_self findString:_t1 inBook:_t2];
}

// method '+[NSHelpManager isContextHelpModeActive]'
U32 env___CM_NSHelpManager_isContextHelpModeActive(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class isContextHelpModeActive];
    return (U32)_result;
}

// method '-[NSHelpManager openHelpAnchor:inBook:]'
void env___IM_NSHelpManager_openHelpAnchor_CinBook_C(void *_instance, U32 _self, U32 anchorPointer, U32 bookPointer) {
    id _t1 = (id)anchorPointer;
    id _t2 = (id)bookPointer;
    [(NSHelpManager*)_self openHelpAnchor:_t1 inBook:_t2];
}

// method '-[NSHelpManager removeContextHelpForObject:]'
void env___IM_NSHelpManager_removeContextHelpForObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSHelpManager*)_self removeContextHelpForObject:_t1];
}

// method '-[NSHelpManager setContextHelp:forObject:]'
void env___IM_NSHelpManager_setContextHelp_CforObject_C(void *_instance, U32 _self, U32 attrStringPointer, U32 objectPointer) {
    id _t1 = (id)attrStringPointer;
    id _t2 = (id)objectPointer;
    [(NSHelpManager*)_self setContextHelp:_t1 forObject:_t2];
}

// method '+[NSHelpManager setContextHelpModeActive:]'
void env___CM_NSHelpManager_setContextHelpModeActive_C(void *_instance, U32 _class, U32 active) {
    [(Class)_class setContextHelpModeActive:active];
}

// method '+[NSHelpManager sharedHelpManager]'
U32 env___CM_NSHelpManager_sharedHelpManager(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedHelpManager];
    return (U32)_result;
}

// method '-[NSHelpManager showContextHelpForObject:locationHint:]'
U32 env___IM_NSHelpManager_showContextHelpForObject_ClocationHint_C(void *_instance, U32 _self, U32 objectPointer, U32 ptIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)objectPointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + ptIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    BOOL _result = (BOOL)[(NSHelpManager*)_self showContextHelpForObject:_t1 locationHint:_t2];
    return (U32)_result;
}

// method '-[NSImage TIFFRepresentation]'
U32 env___IM_NSImage_TIFFRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSImage*)_self TIFFRepresentation];
    return (U32)_result;
}

// method '-[NSImage TIFFRepresentationUsingCompression:factor:]'
U32 env___IM_NSImage_TIFFRepresentationUsingCompression_Cfactor_C(void *_instance, U32 _self, U32 comp, F32 aFloat) {
    id _result = (id)[(NSImage*)_self TIFFRepresentationUsingCompression:comp factor:aFloat];
    return (U32)_result;
}

// method '-[NSImage addRepresentation:]'
void env___IM_NSImage_addRepresentation_C(void *_instance, U32 _self, U32 imageRepPointer) {
    id _t1 = (id)imageRepPointer;
    [(NSImage*)_self addRepresentation:_t1];
}

// method '-[NSImage addRepresentations:]'
void env___IM_NSImage_addRepresentations_C(void *_instance, U32 _self, U32 imageRepsPointer) {
    id _t1 = (id)imageRepsPointer;
    [(NSImage*)_self addRepresentations:_t1];
}

// method '-[NSImage backgroundColor]'
U32 env___IM_NSImage_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSImage*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSImage bestRepresentationForDevice:]'
U32 env___IM_NSImage_bestRepresentationForDevice_C(void *_instance, U32 _self, U32 deviceDescriptionPointer) {
    id _t1 = (id)deviceDescriptionPointer;
    id _result = (id)[(NSImage*)_self bestRepresentationForDevice:_t1];
    return (U32)_result;
}

// method '-[NSImage cacheDepthMatchesImageDepth]'
U32 env___IM_NSImage_cacheDepthMatchesImageDepth(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self cacheDepthMatchesImageDepth];
    return (U32)_result;
}

// method '-[NSImage cacheMode]'
U32 env___IM_NSImage_cacheMode(void *_instance, U32 _self) {
    int _result = (int)[(NSImage*)_self cacheMode];
    return (U32)_result;
}

// method '+[NSImage canInitWithPasteboard:]'
U32 env___CM_NSImage_canInitWithPasteboard_C(void *_instance, U32 _class, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    BOOL _result = (BOOL)[(Class)_class canInitWithPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSImage cancelIncrementalLoad]'
void env___IM_NSImage_cancelIncrementalLoad(void *_instance, U32 _self) {
    [(NSImage*)_self cancelIncrementalLoad];
}

// method '-[NSImage compositeToPoint:fromRect:operation:]'
void env___IM_NSImage_compositeToPoint_CfromRect_Coperation_C(void *_instance, U32 _self, U32 pointIndirect, U32 rectIndirect, U32 op) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSImage*)_self compositeToPoint:_t1 fromRect:_t2 operation:op];
}

// method '-[NSImage compositeToPoint:fromRect:operation:fraction:]'
void env___IM_NSImage_compositeToPoint_CfromRect_Coperation_Cfraction_C(void *_instance, U32 _self, U32 pointIndirect, U32 rectIndirect, U32 op, F32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSImage*)_self compositeToPoint:_t1 fromRect:_t2 operation:op fraction:delta];
}

// method '-[NSImage compositeToPoint:operation:]'
void env___IM_NSImage_compositeToPoint_Coperation_C(void *_instance, U32 _self, U32 pointIndirect, U32 op) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSImage*)_self compositeToPoint:_t1 operation:op];
}

// method '-[NSImage compositeToPoint:operation:fraction:]'
void env___IM_NSImage_compositeToPoint_Coperation_Cfraction_C(void *_instance, U32 _self, U32 pointIndirect, U32 op, F32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSImage*)_self compositeToPoint:_t1 operation:op fraction:delta];
}

// method '-[NSImage delegate]'
U32 env___IM_NSImage_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSImage*)_self delegate];
    return (U32)_result;
}

// method '-[NSImage dissolveToPoint:fraction:]'
void env___IM_NSImage_dissolveToPoint_Cfraction_C(void *_instance, U32 _self, U32 pointIndirect, F32 aFloat) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSImage*)_self dissolveToPoint:_t1 fraction:aFloat];
}

// method '-[NSImage dissolveToPoint:fromRect:fraction:]'
void env___IM_NSImage_dissolveToPoint_CfromRect_Cfraction_C(void *_instance, U32 _self, U32 pointIndirect, U32 rectIndirect, F32 aFloat) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSImage*)_self dissolveToPoint:_t1 fromRect:_t2 fraction:aFloat];
}

// method '-[NSImage drawAtPoint:fromRect:operation:fraction:]'
void env___IM_NSImage_drawAtPoint_CfromRect_Coperation_Cfraction_C(void *_instance, U32 _self, U32 pointIndirect, U32 fromRectIndirect, U32 op, F32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + fromRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSImage*)_self drawAtPoint:_t1 fromRect:_t2 operation:op fraction:delta];
}

// method '-[NSImage drawInRect:fromRect:operation:fraction:]'
void env___IM_NSImage_drawInRect_CfromRect_Coperation_Cfraction_C(void *_instance, U32 _self, U32 rectIndirect, U32 fromRectIndirect, U32 op, F32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + fromRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSImage*)_self drawInRect:_t1 fromRect:_t2 operation:op fraction:delta];
}

// method '-[NSImage drawRepresentation:inRect:]'
U32 env___IM_NSImage_drawRepresentation_CinRect_C(void *_instance, U32 _self, U32 imageRepPointer, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imageRepPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(NSImage*)_self drawRepresentation:_t1 inRect:_t2];
    return (U32)_result;
}

// method '+[NSImage imageFileTypes]'
U32 env___CM_NSImage_imageFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imageFileTypes];
    return (U32)_result;
}

// method '+[NSImage imageNamed:]'
U32 env___CM_NSImage_imageNamed_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(Class)_class imageNamed:_t1];
    return (U32)_result;
}

// method '+[NSImage imagePasteboardTypes]'
U32 env___CM_NSImage_imagePasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imagePasteboardTypes];
    return (U32)_result;
}

// method '+[NSImage imageUnfilteredFileTypes]'
U32 env___CM_NSImage_imageUnfilteredFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imageUnfilteredFileTypes];
    return (U32)_result;
}

// method '+[NSImage imageUnfilteredPasteboardTypes]'
U32 env___CM_NSImage_imageUnfilteredPasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imageUnfilteredPasteboardTypes];
    return (U32)_result;
}

// method '-[NSImage initByReferencingFile:]'
U32 env___IM_NSImage_initByReferencingFile_C(void *_instance, U32 _self, U32 fileNamePointer) {
    id _t1 = (id)fileNamePointer;
    id _result = (id)[(NSImage*)_self initByReferencingFile:_t1];
    return (U32)_result;
}

// method '-[NSImage initByReferencingURL:]'
U32 env___IM_NSImage_initByReferencingURL_C(void *_instance, U32 _self, U32 urlPointer) {
    id _t1 = (id)urlPointer;
    id _result = (id)[(NSImage*)_self initByReferencingURL:_t1];
    return (U32)_result;
}

// method '-[NSImage initWithContentsOfFile:]'
U32 env___IM_NSImage_initWithContentsOfFile_C(void *_instance, U32 _self, U32 fileNamePointer) {
    id _t1 = (id)fileNamePointer;
    id _result = (id)[(NSImage*)_self initWithContentsOfFile:_t1];
    return (U32)_result;
}

// method '-[NSImage initWithContentsOfURL:]'
U32 env___IM_NSImage_initWithContentsOfURL_C(void *_instance, U32 _self, U32 urlPointer) {
    id _t1 = (id)urlPointer;
    id _result = (id)[(NSImage*)_self initWithContentsOfURL:_t1];
    return (U32)_result;
}

// method '-[NSImage initWithData:]'
U32 env___IM_NSImage_initWithData_C(void *_instance, U32 _self, U32 dataPointer) {
    id _t1 = (id)dataPointer;
    id _result = (id)[(NSImage*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSImage initWithPasteboard:]'
U32 env___IM_NSImage_initWithPasteboard_C(void *_instance, U32 _self, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    id _result = (id)[(NSImage*)_self initWithPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSImage initWithSize:]'
U32 env___IM_NSImage_initWithSize_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    id _result = (id)[(NSImage*)_self initWithSize:_t1];
    return (U32)_result;
}

// method '-[NSImage isCachedSeparately]'
U32 env___IM_NSImage_isCachedSeparately(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self isCachedSeparately];
    return (U32)_result;
}

// method '-[NSImage isDataRetained]'
U32 env___IM_NSImage_isDataRetained(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self isDataRetained];
    return (U32)_result;
}

// method '-[NSImage isFlipped]'
U32 env___IM_NSImage_isFlipped(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self isFlipped];
    return (U32)_result;
}

// method '-[NSImage isValid]'
U32 env___IM_NSImage_isValid(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self isValid];
    return (U32)_result;
}

// method '-[NSImage lockFocus]'
void env___IM_NSImage_lockFocus(void *_instance, U32 _self) {
    [(NSImage*)_self lockFocus];
}

// method '-[NSImage lockFocusOnRepresentation:]'
void env___IM_NSImage_lockFocusOnRepresentation_C(void *_instance, U32 _self, U32 imageRepresentationPointer) {
    id _t1 = (id)imageRepresentationPointer;
    [(NSImage*)_self lockFocusOnRepresentation:_t1];
}

// method '-[NSImage matchesOnMultipleResolution]'
U32 env___IM_NSImage_matchesOnMultipleResolution(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self matchesOnMultipleResolution];
    return (U32)_result;
}

// method '-[NSImage name]'
U32 env___IM_NSImage_name(void *_instance, U32 _self) {
    id _result = (id)[(NSImage*)_self name];
    return (U32)_result;
}

// method '-[NSImage prefersColorMatch]'
U32 env___IM_NSImage_prefersColorMatch(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self prefersColorMatch];
    return (U32)_result;
}

// method '-[NSImage recache]'
void env___IM_NSImage_recache(void *_instance, U32 _self) {
    [(NSImage*)_self recache];
}

// method '-[NSImage removeRepresentation:]'
void env___IM_NSImage_removeRepresentation_C(void *_instance, U32 _self, U32 imageRepPointer) {
    id _t1 = (id)imageRepPointer;
    [(NSImage*)_self removeRepresentation:_t1];
}

// method '-[NSImage representations]'
U32 env___IM_NSImage_representations(void *_instance, U32 _self) {
    id _result = (id)[(NSImage*)_self representations];
    return (U32)_result;
}

// method '-[NSImage scalesWhenResized]'
U32 env___IM_NSImage_scalesWhenResized(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self scalesWhenResized];
    return (U32)_result;
}

// method '-[NSImage setBackgroundColor:]'
void env___IM_NSImage_setBackgroundColor_C(void *_instance, U32 _self, U32 aColorPointer) {
    id _t1 = (id)aColorPointer;
    [(NSImage*)_self setBackgroundColor:_t1];
}

// method '-[NSImage setCacheDepthMatchesImageDepth:]'
void env___IM_NSImage_setCacheDepthMatchesImageDepth_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setCacheDepthMatchesImageDepth:flag];
}

// method '-[NSImage setCacheMode:]'
void env___IM_NSImage_setCacheMode_C(void *_instance, U32 _self, U32 mode) {
    [(NSImage*)_self setCacheMode:mode];
}

// method '-[NSImage setCachedSeparately:]'
void env___IM_NSImage_setCachedSeparately_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setCachedSeparately:flag];
}

// method '-[NSImage setDataRetained:]'
void env___IM_NSImage_setDataRetained_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setDataRetained:flag];
}

// method '-[NSImage setDelegate:]'
void env___IM_NSImage_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSImage*)_self setDelegate:_t1];
}

// method '-[NSImage setFlipped:]'
void env___IM_NSImage_setFlipped_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setFlipped:flag];
}

// method '-[NSImage setMatchesOnMultipleResolution:]'
void env___IM_NSImage_setMatchesOnMultipleResolution_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setMatchesOnMultipleResolution:flag];
}

// method '-[NSImage setName:]'
U32 env___IM_NSImage_setName_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    BOOL _result = (BOOL)[(NSImage*)_self setName:_t1];
    return (U32)_result;
}

// method '-[NSImage setPrefersColorMatch:]'
void env___IM_NSImage_setPrefersColorMatch_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setPrefersColorMatch:flag];
}

// method '-[NSImage setScalesWhenResized:]'
void env___IM_NSImage_setScalesWhenResized_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setScalesWhenResized:flag];
}

// method '-[NSImage setSize:]'
void env___IM_NSImage_setSize_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSImage*)_self setSize:_t1];
}

// method '-[NSImage setUsesEPSOnResolutionMismatch:]'
void env___IM_NSImage_setUsesEPSOnResolutionMismatch_C(void *_instance, U32 _self, U32 flag) {
    [(NSImage*)_self setUsesEPSOnResolutionMismatch:flag];
}

// method '-[NSImage size]'
void env___IM_NSImage_size(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSImage*)_self size];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSImage unlockFocus]'
void env___IM_NSImage_unlockFocus(void *_instance, U32 _self) {
    [(NSImage*)_self unlockFocus];
}

// method '-[NSImage usesEPSOnResolutionMismatch]'
U32 env___IM_NSImage_usesEPSOnResolutionMismatch(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImage*)_self usesEPSOnResolutionMismatch];
    return (U32)_result;
}

// method '-[NSImageCell imageAlignment]'
U32 env___IM_NSImageCell_imageAlignment(void *_instance, U32 _self) {
    int _result = (int)[(NSImageCell*)_self imageAlignment];
    return (U32)_result;
}

// method '-[NSImageCell imageFrameStyle]'
U32 env___IM_NSImageCell_imageFrameStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSImageCell*)_self imageFrameStyle];
    return (U32)_result;
}

// method '-[NSImageCell imageScaling]'
U32 env___IM_NSImageCell_imageScaling(void *_instance, U32 _self) {
    int _result = (int)[(NSImageCell*)_self imageScaling];
    return (U32)_result;
}

// method '-[NSImageCell setImageAlignment:]'
void env___IM_NSImageCell_setImageAlignment_C(void *_instance, U32 _self, U32 newAlign) {
    [(NSImageCell*)_self setImageAlignment:newAlign];
}

// method '-[NSImageCell setImageFrameStyle:]'
void env___IM_NSImageCell_setImageFrameStyle_C(void *_instance, U32 _self, U32 newStyle) {
    [(NSImageCell*)_self setImageFrameStyle:newStyle];
}

// method '-[NSImageCell setImageScaling:]'
void env___IM_NSImageCell_setImageScaling_C(void *_instance, U32 _self, U32 newScaling) {
    [(NSImageCell*)_self setImageScaling:newScaling];
}

// method '-[NSImageRep bitsPerSample]'
U32 env___IM_NSImageRep_bitsPerSample(void *_instance, U32 _self) {
    int _result = (int)[(NSImageRep*)_self bitsPerSample];
    return (U32)_result;
}

// method '+[NSImageRep canInitWithData:]'
U32 env___CM_NSImageRep_canInitWithData_C(void *_instance, U32 _class, U32 dataPointer) {
    id _t1 = (id)dataPointer;
    BOOL _result = (BOOL)[(Class)_class canInitWithData:_t1];
    return (U32)_result;
}

// method '+[NSImageRep canInitWithPasteboard:]'
U32 env___CM_NSImageRep_canInitWithPasteboard_C(void *_instance, U32 _class, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    BOOL _result = (BOOL)[(Class)_class canInitWithPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSImageRep colorSpaceName]'
U32 env___IM_NSImageRep_colorSpaceName(void *_instance, U32 _self) {
    id _result = (id)[(NSImageRep*)_self colorSpaceName];
    return (U32)_result;
}

// method '-[NSImageRep draw]'
U32 env___IM_NSImageRep_draw(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImageRep*)_self draw];
    return (U32)_result;
}

// method '-[NSImageRep drawAtPoint:]'
U32 env___IM_NSImageRep_drawAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    BOOL _result = (BOOL)[(NSImageRep*)_self drawAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSImageRep drawInRect:]'
U32 env___IM_NSImageRep_drawInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    BOOL _result = (BOOL)[(NSImageRep*)_self drawInRect:_t1];
    return (U32)_result;
}

// method '-[NSImageRep hasAlpha]'
U32 env___IM_NSImageRep_hasAlpha(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImageRep*)_self hasAlpha];
    return (U32)_result;
}

// method '+[NSImageRep imageFileTypes]'
U32 env___CM_NSImageRep_imageFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imageFileTypes];
    return (U32)_result;
}

// method '+[NSImageRep imagePasteboardTypes]'
U32 env___CM_NSImageRep_imagePasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imagePasteboardTypes];
    return (U32)_result;
}

// method '+[NSImageRep imageRepClassForData:]'
U32 env___CM_NSImageRep_imageRepClassForData_C(void *_instance, U32 _class, U32 dataPointer) {
    id _t1 = (id)dataPointer;
    Class _result = (Class)[(Class)_class imageRepClassForData:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepClassForFileType:]'
U32 env___CM_NSImageRep_imageRepClassForFileType_C(void *_instance, U32 _class, U32 typePointer) {
    id _t1 = (id)typePointer;
    Class _result = (Class)[(Class)_class imageRepClassForFileType:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepClassForPasteboardType:]'
U32 env___CM_NSImageRep_imageRepClassForPasteboardType_C(void *_instance, U32 _class, U32 typePointer) {
    id _t1 = (id)typePointer;
    Class _result = (Class)[(Class)_class imageRepClassForPasteboardType:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepWithContentsOfFile:]'
U32 env___CM_NSImageRep_imageRepWithContentsOfFile_C(void *_instance, U32 _class, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    id _result = (id)[(Class)_class imageRepWithContentsOfFile:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepWithContentsOfURL:]'
U32 env___CM_NSImageRep_imageRepWithContentsOfURL_C(void *_instance, U32 _class, U32 urlPointer) {
    id _t1 = (id)urlPointer;
    id _result = (id)[(Class)_class imageRepWithContentsOfURL:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepWithPasteboard:]'
U32 env___CM_NSImageRep_imageRepWithPasteboard_C(void *_instance, U32 _class, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    id _result = (id)[(Class)_class imageRepWithPasteboard:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepsWithContentsOfFile:]'
U32 env___CM_NSImageRep_imageRepsWithContentsOfFile_C(void *_instance, U32 _class, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    id _result = (id)[(Class)_class imageRepsWithContentsOfFile:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepsWithContentsOfURL:]'
U32 env___CM_NSImageRep_imageRepsWithContentsOfURL_C(void *_instance, U32 _class, U32 urlPointer) {
    id _t1 = (id)urlPointer;
    id _result = (id)[(Class)_class imageRepsWithContentsOfURL:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageRepsWithPasteboard:]'
U32 env___CM_NSImageRep_imageRepsWithPasteboard_C(void *_instance, U32 _class, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    id _result = (id)[(Class)_class imageRepsWithPasteboard:_t1];
    return (U32)_result;
}

// method '+[NSImageRep imageUnfilteredFileTypes]'
U32 env___CM_NSImageRep_imageUnfilteredFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imageUnfilteredFileTypes];
    return (U32)_result;
}

// method '+[NSImageRep imageUnfilteredPasteboardTypes]'
U32 env___CM_NSImageRep_imageUnfilteredPasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class imageUnfilteredPasteboardTypes];
    return (U32)_result;
}

// method '-[NSImageRep isOpaque]'
U32 env___IM_NSImageRep_isOpaque(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImageRep*)_self isOpaque];
    return (U32)_result;
}

// method '-[NSImageRep pixelsHigh]'
U32 env___IM_NSImageRep_pixelsHigh(void *_instance, U32 _self) {
    int _result = (int)[(NSImageRep*)_self pixelsHigh];
    return (U32)_result;
}

// method '-[NSImageRep pixelsWide]'
U32 env___IM_NSImageRep_pixelsWide(void *_instance, U32 _self) {
    int _result = (int)[(NSImageRep*)_self pixelsWide];
    return (U32)_result;
}

// method '+[NSImageRep registerImageRepClass:]'
void env___CM_NSImageRep_registerImageRepClass_C(void *_instance, U32 _class, U32 imageRepClassPointer) {
    Class _t1 = (Class)imageRepClassPointer;
    [(Class)_class registerImageRepClass:_t1];
}

// method '+[NSImageRep registeredImageRepClasses]'
U32 env___CM_NSImageRep_registeredImageRepClasses(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class registeredImageRepClasses];
    return (U32)_result;
}

// method '-[NSImageRep setAlpha:]'
void env___IM_NSImageRep_setAlpha_C(void *_instance, U32 _self, U32 flag) {
    [(NSImageRep*)_self setAlpha:flag];
}

// method '-[NSImageRep setBitsPerSample:]'
void env___IM_NSImageRep_setBitsPerSample_C(void *_instance, U32 _self, U32 anInt) {
    [(NSImageRep*)_self setBitsPerSample:anInt];
}

// method '-[NSImageRep setColorSpaceName:]'
void env___IM_NSImageRep_setColorSpaceName_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSImageRep*)_self setColorSpaceName:_t1];
}

// method '-[NSImageRep setOpaque:]'
void env___IM_NSImageRep_setOpaque_C(void *_instance, U32 _self, U32 flag) {
    [(NSImageRep*)_self setOpaque:flag];
}

// method '-[NSImageRep setPixelsHigh:]'
void env___IM_NSImageRep_setPixelsHigh_C(void *_instance, U32 _self, U32 anInt) {
    [(NSImageRep*)_self setPixelsHigh:anInt];
}

// method '-[NSImageRep setPixelsWide:]'
void env___IM_NSImageRep_setPixelsWide_C(void *_instance, U32 _self, U32 anInt) {
    [(NSImageRep*)_self setPixelsWide:anInt];
}

// method '-[NSImageRep setSize:]'
void env___IM_NSImageRep_setSize_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSImageRep*)_self setSize:_t1];
}

// method '-[NSImageRep size]'
void env___IM_NSImageRep_size(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSImageRep*)_self size];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSImageRep unregisterImageRepClass:]'
void env___CM_NSImageRep_unregisterImageRepClass_C(void *_instance, U32 _class, U32 imageRepClassPointer) {
    Class _t1 = (Class)imageRepClassPointer;
    [(Class)_class unregisterImageRepClass:_t1];
}

// method '-[NSImageView allowsCutCopyPaste]'
U32 env___IM_NSImageView_allowsCutCopyPaste(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImageView*)_self allowsCutCopyPaste];
    return (U32)_result;
}

// method '-[NSImageView animates]'
U32 env___IM_NSImageView_animates(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImageView*)_self animates];
    return (U32)_result;
}

// method '-[NSImageView image]'
U32 env___IM_NSImageView_image(void *_instance, U32 _self) {
    id _result = (id)[(NSImageView*)_self image];
    return (U32)_result;
}

// method '-[NSImageView imageAlignment]'
U32 env___IM_NSImageView_imageAlignment(void *_instance, U32 _self) {
    int _result = (int)[(NSImageView*)_self imageAlignment];
    return (U32)_result;
}

// method '-[NSImageView imageFrameStyle]'
U32 env___IM_NSImageView_imageFrameStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSImageView*)_self imageFrameStyle];
    return (U32)_result;
}

// method '-[NSImageView imageScaling]'
U32 env___IM_NSImageView_imageScaling(void *_instance, U32 _self) {
    int _result = (int)[(NSImageView*)_self imageScaling];
    return (U32)_result;
}

// method '-[NSImageView isEditable]'
U32 env___IM_NSImageView_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSImageView*)_self isEditable];
    return (U32)_result;
}

// method '-[NSImageView setAllowsCutCopyPaste:]'
void env___IM_NSImageView_setAllowsCutCopyPaste_C(void *_instance, U32 _self, U32 allow) {
    [(NSImageView*)_self setAllowsCutCopyPaste:allow];
}

// method '-[NSImageView setAnimates:]'
void env___IM_NSImageView_setAnimates_C(void *_instance, U32 _self, U32 flag) {
    [(NSImageView*)_self setAnimates:flag];
}

// method '-[NSImageView setEditable:]'
void env___IM_NSImageView_setEditable_C(void *_instance, U32 _self, U32 yn) {
    [(NSImageView*)_self setEditable:yn];
}

// method '-[NSImageView setImage:]'
void env___IM_NSImageView_setImage_C(void *_instance, U32 _self, U32 newImagePointer) {
    id _t1 = (id)newImagePointer;
    [(NSImageView*)_self setImage:_t1];
}

// method '-[NSImageView setImageAlignment:]'
void env___IM_NSImageView_setImageAlignment_C(void *_instance, U32 _self, U32 newAlign) {
    [(NSImageView*)_self setImageAlignment:newAlign];
}

// method '-[NSImageView setImageFrameStyle:]'
void env___IM_NSImageView_setImageFrameStyle_C(void *_instance, U32 _self, U32 newStyle) {
    [(NSImageView*)_self setImageFrameStyle:newStyle];
}

// method '-[NSImageView setImageScaling:]'
void env___IM_NSImageView_setImageScaling_C(void *_instance, U32 _self, U32 newScaling) {
    [(NSImageView*)_self setImageScaling:newScaling];
}

// method '+[NSInputManager currentInputManager]'
U32 env___CM_NSInputManager_currentInputManager(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class currentInputManager];
    return (U32)_result;
}

// method '+[NSInputManager cycleToNextInputLanguage:]'
void env___CM_NSInputManager_cycleToNextInputLanguage_C(void *_instance, U32 _class, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(Class)_class cycleToNextInputLanguage:_t1];
}

// method '+[NSInputManager cycleToNextInputServerInLanguage:]'
void env___CM_NSInputManager_cycleToNextInputServerInLanguage_C(void *_instance, U32 _class, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(Class)_class cycleToNextInputServerInLanguage:_t1];
}

// method '-[NSInputManager handleMouseEvent:]'
U32 env___IM_NSInputManager_handleMouseEvent_C(void *_instance, U32 _self, U32 theMouseEventPointer) {
    id _t1 = (id)theMouseEventPointer;
    BOOL _result = (BOOL)[(NSInputManager*)_self handleMouseEvent:_t1];
    return (U32)_result;
}

// method '-[NSInputManager image]'
U32 env___IM_NSInputManager_image(void *_instance, U32 _self) {
    id _result = (id)[(NSInputManager*)_self image];
    return (U32)_result;
}

// method '-[NSInputManager initWithName:host:]'
U32 env___IM_NSInputManager_initWithName_Chost_C(void *_instance, U32 _self, U32 inputServerNamePointer, U32 hostNamePointer) {
    id _t1 = (id)inputServerNamePointer;
    id _t2 = (id)hostNamePointer;
    id _result = (id)[(NSInputManager*)_self initWithName:_t1 host:_t2];
    return (U32)_result;
}

// method '-[NSInputManager language]'
U32 env___IM_NSInputManager_language(void *_instance, U32 _self) {
    id _result = (id)[(NSInputManager*)_self language];
    return (U32)_result;
}

// method '-[NSInputManager localizedInputManagerName]'
U32 env___IM_NSInputManager_localizedInputManagerName(void *_instance, U32 _self) {
    id _result = (id)[(NSInputManager*)_self localizedInputManagerName];
    return (U32)_result;
}

// method '-[NSInputManager markedTextAbandoned:]'
void env___IM_NSInputManager_markedTextAbandoned_C(void *_instance, U32 _self, U32 cliPointer) {
    id _t1 = (id)cliPointer;
    [(NSInputManager*)_self markedTextAbandoned:_t1];
}

// method '-[NSInputManager markedTextSelectionChanged:client:]'
void env___IM_NSInputManager_markedTextSelectionChanged_Cclient_C(void *_instance, U32 _self, U32 newSelIndirect, U32 cliPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + newSelIndirect);
    id _t2 = (id)cliPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSInputManager*)_self markedTextSelectionChanged:_t1 client:_t2];
}

// method '-[NSInputManager server]'
U32 env___IM_NSInputManager_server(void *_instance, U32 _self) {
    id _result = (id)[(NSInputManager*)_self server];
    return (U32)_result;
}

// method '-[NSInputManager wantsToDelayTextChangeNotifications]'
U32 env___IM_NSInputManager_wantsToDelayTextChangeNotifications(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSInputManager*)_self wantsToDelayTextChangeNotifications];
    return (U32)_result;
}

// method '-[NSInputManager wantsToHandleMouseEvents]'
U32 env___IM_NSInputManager_wantsToHandleMouseEvents(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSInputManager*)_self wantsToHandleMouseEvents];
    return (U32)_result;
}

// method '-[NSInputManager wantsToInterpretAllKeystrokes]'
U32 env___IM_NSInputManager_wantsToInterpretAllKeystrokes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSInputManager*)_self wantsToInterpretAllKeystrokes];
    return (U32)_result;
}

// method '-[NSInputServer initWithDelegate:name:]'
U32 env___IM_NSInputServer_initWithDelegate_Cname_C(void *_instance, U32 _self, U32 aDelegatePointer, U32 namePointer) {
    id _t1 = (id)aDelegatePointer;
    id _t2 = (id)namePointer;
    id _result = (id)[(NSInputServer*)_self initWithDelegate:_t1 name:_t2];
    return (U32)_result;
}

// method '-[NSLayoutManager addTemporaryAttributes:forCharacterRange:]'
void env___IM_NSLayoutManager_addTemporaryAttributes_CforCharacterRange_C(void *_instance, U32 _self, U32 attrsPointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)attrsPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSLayoutManager*)_self addTemporaryAttributes:_t1 forCharacterRange:_t2];
}

// method '-[NSLayoutManager addTextContainer:]'
void env___IM_NSLayoutManager_addTextContainer_C(void *_instance, U32 _self, U32 containerPointer) {
    id _t1 = (id)containerPointer;
    [(NSLayoutManager*)_self addTextContainer:_t1];
}

// method '-[NSLayoutManager attachmentSizeForGlyphAtIndex:]'
void env___IM_NSLayoutManager_attachmentSizeForGlyphAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSLayoutManager*)_self attachmentSizeForGlyphAtIndex:glyphIndex];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager backgroundLayoutEnabled]'
U32 env___IM_NSLayoutManager_backgroundLayoutEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self backgroundLayoutEnabled];
    return (U32)_result;
}

// method '-[NSLayoutManager boundingRectForGlyphRange:inTextContainer:]'
void env___IM_NSLayoutManager_boundingRectForGlyphRange_CinTextContainer_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphRangeIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    id _t2 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRect _result = (NSRect)[(NSLayoutManager*)_self boundingRectForGlyphRange:_t1 inTextContainer:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager boundsRectForTextBlock:atIndex:effectiveRange:]'
void env___IM_NSLayoutManager_boundsRectForTextBlock_CatIndex_CeffectiveRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 glyphIndex, U32 effectiveGlyphRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRangePointer _t2 = (NSRangePointer)effectiveGlyphRangePointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self boundsRectForTextBlock:_t1 atIndex:glyphIndex effectiveRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager boundsRectForTextBlock:glyphRange:]'
void env___IM_NSLayoutManager_boundsRectForTextBlock_CglyphRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    NSRect _result = (NSRect)[(NSLayoutManager*)_self boundsRectForTextBlock:_t1 glyphRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager characterIndexForGlyphAtIndex:]'
U32 env___IM_NSLayoutManager_characterIndexForGlyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self characterIndexForGlyphAtIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager characterRangeForGlyphRange:actualGlyphRange:]'
void env___IM_NSLayoutManager_characterRangeForGlyphRange_CactualGlyphRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphRangeIndirect, U32 actualGlyphRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRangePointer _t2 = (NSRangePointer)actualGlyphRangePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRange _result = (NSRange)[(NSLayoutManager*)_self characterRangeForGlyphRange:_t1 actualGlyphRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager defaultAttachmentScaling]'
U32 env___IM_NSLayoutManager_defaultAttachmentScaling(void *_instance, U32 _self) {
    int _result = (int)[(NSLayoutManager*)_self defaultAttachmentScaling];
    return (U32)_result;
}

// method '-[NSLayoutManager defaultLineHeightForFont:]'
F32 env___IM_NSLayoutManager_defaultLineHeightForFont_C(void *_instance, U32 _self, U32 theFontPointer) {
    id _t1 = (id)theFontPointer;
    float _result = (float)[(NSLayoutManager*)_self defaultLineHeightForFont:_t1];
    return (F32)_result;
}

// method '-[NSLayoutManager delegate]'
U32 env___IM_NSLayoutManager_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self delegate];
    return (U32)_result;
}

// method '-[NSLayoutManager deleteGlyphsInRange:]'
void env___IM_NSLayoutManager_deleteGlyphsInRange_C(void *_instance, U32 _self, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSLayoutManager*)_self deleteGlyphsInRange:_t1];
}

// method '-[NSLayoutManager drawBackgroundForGlyphRange:atPoint:]'
void env___IM_NSLayoutManager_drawBackgroundForGlyphRange_CatPoint_C(void *_instance, U32 _self, U32 glyphsToShowIndirect, U32 originIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphsToShowIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + originIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(NSLayoutManager*)_self drawBackgroundForGlyphRange:_t1 atPoint:_t2];
}

// method '-[NSLayoutManager drawGlyphsForGlyphRange:atPoint:]'
void env___IM_NSLayoutManager_drawGlyphsForGlyphRange_CatPoint_C(void *_instance, U32 _self, U32 glyphsToShowIndirect, U32 originIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphsToShowIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + originIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(NSLayoutManager*)_self drawGlyphsForGlyphRange:_t1 atPoint:_t2];
}

// method '-[NSLayoutManager drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void env___IM_NSLayoutManager_drawStrikethroughForGlyphRange_CstrikethroughType_CbaselineOffset_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(void *_instance, U32 _self, U32 glyphRangeIndirect, U32 strikethroughVal, F32 baselineOffset, U32 lineRectIndirect, U32 lineGlyphRangeIndirect, U32 containerOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + lineRectIndirect);
    NSRange _t3 = *(NSRange*)(_mem->data + lineGlyphRangeIndirect);
    NSPoint _t4 = *(NSPoint*)(_mem->data + containerOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    swap_f(&_t4.x);
    swap_f(&_t4.y);
    #endif
    [(NSLayoutManager*)_self drawStrikethroughForGlyphRange:_t1 strikethroughType:strikethroughVal baselineOffset:baselineOffset lineFragmentRect:_t2 lineFragmentGlyphRange:_t3 containerOrigin:_t4];
}

// method '-[NSLayoutManager drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void env___IM_NSLayoutManager_drawUnderlineForGlyphRange_CunderlineType_CbaselineOffset_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(void *_instance, U32 _self, U32 glyphRangeIndirect, U32 underlineVal, F32 baselineOffset, U32 lineRectIndirect, U32 lineGlyphRangeIndirect, U32 containerOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + lineRectIndirect);
    NSRange _t3 = *(NSRange*)(_mem->data + lineGlyphRangeIndirect);
    NSPoint _t4 = *(NSPoint*)(_mem->data + containerOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    swap_f(&_t4.x);
    swap_f(&_t4.y);
    #endif
    [(NSLayoutManager*)_self drawUnderlineForGlyphRange:_t1 underlineType:underlineVal baselineOffset:baselineOffset lineFragmentRect:_t2 lineFragmentGlyphRange:_t3 containerOrigin:_t4];
}

// method '-[NSLayoutManager drawsOutsideLineFragmentForGlyphAtIndex:]'
U32 env___IM_NSLayoutManager_drawsOutsideLineFragmentForGlyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self drawsOutsideLineFragmentForGlyphAtIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager extraLineFragmentRect]'
void env___IM_NSLayoutManager_extraLineFragmentRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSLayoutManager*)_self extraLineFragmentRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager extraLineFragmentTextContainer]'
U32 env___IM_NSLayoutManager_extraLineFragmentTextContainer(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self extraLineFragmentTextContainer];
    return (U32)_result;
}

// method '-[NSLayoutManager extraLineFragmentUsedRect]'
void env___IM_NSLayoutManager_extraLineFragmentUsedRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSLayoutManager*)_self extraLineFragmentUsedRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager firstTextView]'
U32 env___IM_NSLayoutManager_firstTextView(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self firstTextView];
    return (U32)_result;
}

// method '-[NSLayoutManager firstUnlaidCharacterIndex]'
U32 env___IM_NSLayoutManager_firstUnlaidCharacterIndex(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self firstUnlaidCharacterIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager firstUnlaidGlyphIndex]'
U32 env___IM_NSLayoutManager_firstUnlaidGlyphIndex(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self firstUnlaidGlyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager fractionOfDistanceThroughGlyphForPoint:inTextContainer:]'
F32 env___IM_NSLayoutManager_fractionOfDistanceThroughGlyphForPoint_CinTextContainer_C(void *_instance, U32 _self, U32 pointIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    id _t2 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    float _result = (float)[(NSLayoutManager*)_self fractionOfDistanceThroughGlyphForPoint:_t1 inTextContainer:_t2];
    return (F32)_result;
}

// method '-[NSLayoutManager getFirstUnlaidCharacterIndex:glyphIndex:]'
void env___IM_NSLayoutManager_getFirstUnlaidCharacterIndex_CglyphIndex_C(void *_instance, U32 _self, U32 charIndexPointer, U32 glyphIndexPointer) {
    unsigned int* _t1 = (unsigned int*)charIndexPointer;
    unsigned int* _t2 = (unsigned int*)glyphIndexPointer;
    [(NSLayoutManager*)_self getFirstUnlaidCharacterIndex:_t1 glyphIndex:_t2];
}

// method '-[NSLayoutManager glyphAtIndex:]'
U32 env___IM_NSLayoutManager_glyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self glyphAtIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager glyphAtIndex:isValidIndex:]'
U32 env___IM_NSLayoutManager_glyphAtIndex_CisValidIndex_C(void *_instance, U32 _self, U32 glyphIndex, U32 isValidIndexPointer) {
    BOOL* _t1 = (BOOL*)isValidIndexPointer;
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self glyphAtIndex:glyphIndex isValidIndex:_t1];
    return (U32)_result;
}

// method '-[NSLayoutManager glyphGenerator]'
U32 env___IM_NSLayoutManager_glyphGenerator(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self glyphGenerator];
    return (U32)_result;
}

// method '-[NSLayoutManager glyphIndexForPoint:inTextContainer:]'
U32 env___IM_NSLayoutManager_glyphIndexForPoint_CinTextContainer_C(void *_instance, U32 _self, U32 pointIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    id _t2 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self glyphIndexForPoint:_t1 inTextContainer:_t2];
    return (U32)_result;
}

// method '-[NSLayoutManager glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:]'
U32 env___IM_NSLayoutManager_glyphIndexForPoint_CinTextContainer_CfractionOfDistanceThroughGlyph_C(void *_instance, U32 _self, U32 pointIndirect, U32 containerPointer, U32 partialFractionPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    id _t2 = (id)containerPointer;
    float* _t3 = (float*)partialFractionPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self glyphIndexForPoint:_t1 inTextContainer:_t2 fractionOfDistanceThroughGlyph:_t3];
    return (U32)_result;
}

// method '-[NSLayoutManager glyphRangeForBoundingRect:inTextContainer:]'
void env___IM_NSLayoutManager_glyphRangeForBoundingRect_CinTextContainer_C(void *_instance, U32 _resultIndirect, U32 _self, U32 boundsIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + boundsIndirect);
    id _t2 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRange _result = (NSRange)[(NSLayoutManager*)_self glyphRangeForBoundingRect:_t1 inTextContainer:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:]'
void env___IM_NSLayoutManager_glyphRangeForBoundingRectWithoutAdditionalLayout_CinTextContainer_C(void *_instance, U32 _resultIndirect, U32 _self, U32 boundsIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + boundsIndirect);
    id _t2 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRange _result = (NSRange)[(NSLayoutManager*)_self glyphRangeForBoundingRectWithoutAdditionalLayout:_t1 inTextContainer:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager glyphRangeForCharacterRange:actualCharacterRange:]'
void env___IM_NSLayoutManager_glyphRangeForCharacterRange_CactualCharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 charRangeIndirect, U32 actualCharRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    NSRangePointer _t2 = (NSRangePointer)actualCharRangePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRange _result = (NSRange)[(NSLayoutManager*)_self glyphRangeForCharacterRange:_t1 actualCharacterRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager glyphRangeForTextContainer:]'
void env___IM_NSLayoutManager_glyphRangeForTextContainer_C(void *_instance, U32 _resultIndirect, U32 _self, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)containerPointer;
    NSRange _result = (NSRange)[(NSLayoutManager*)_self glyphRangeForTextContainer:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager hyphenationFactor]'
F32 env___IM_NSLayoutManager_hyphenationFactor(void *_instance, U32 _self) {
    float _result = (float)[(NSLayoutManager*)_self hyphenationFactor];
    return (F32)_result;
}

// method '-[NSLayoutManager init]'
U32 env___IM_NSLayoutManager_init(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self init];
    return (U32)_result;
}

// method '-[NSLayoutManager insertGlyph:atGlyphIndex:characterIndex:]'
void env___IM_NSLayoutManager_insertGlyph_CatGlyphIndex_CcharacterIndex_C(void *_instance, U32 _self, U32 glyph, U32 glyphIndex, U32 charIndex) {
    [(NSLayoutManager*)_self insertGlyph:glyph atGlyphIndex:glyphIndex characterIndex:charIndex];
}

// method '-[NSLayoutManager insertTextContainer:atIndex:]'
void env___IM_NSLayoutManager_insertTextContainer_CatIndex_C(void *_instance, U32 _self, U32 containerPointer, U32 index) {
    id _t1 = (id)containerPointer;
    [(NSLayoutManager*)_self insertTextContainer:_t1 atIndex:index];
}

// method '-[NSLayoutManager intAttribute:forGlyphAtIndex:]'
U32 env___IM_NSLayoutManager_intAttribute_CforGlyphAtIndex_C(void *_instance, U32 _self, U32 attributeTag, U32 glyphIndex) {
    int _result = (int)[(NSLayoutManager*)_self intAttribute:attributeTag forGlyphAtIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager invalidateDisplayForCharacterRange:]'
void env___IM_NSLayoutManager_invalidateDisplayForCharacterRange_C(void *_instance, U32 _self, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSLayoutManager*)_self invalidateDisplayForCharacterRange:_t1];
}

// method '-[NSLayoutManager invalidateDisplayForGlyphRange:]'
void env___IM_NSLayoutManager_invalidateDisplayForGlyphRange_C(void *_instance, U32 _self, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSLayoutManager*)_self invalidateDisplayForGlyphRange:_t1];
}

// method '-[NSLayoutManager invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:]'
void env___IM_NSLayoutManager_invalidateGlyphsForCharacterRange_CchangeInLength_CactualCharacterRange_C(void *_instance, U32 _self, U32 charRangeIndirect, U32 delta, U32 actualCharRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    NSRangePointer _t2 = (NSRangePointer)actualCharRangePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSLayoutManager*)_self invalidateGlyphsForCharacterRange:_t1 changeInLength:delta actualCharacterRange:_t2];
}

// method '-[NSLayoutManager invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:]'
void env___IM_NSLayoutManager_invalidateLayoutForCharacterRange_CisSoft_CactualCharacterRange_C(void *_instance, U32 _self, U32 charRangeIndirect, U32 flag, U32 actualCharRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    NSRangePointer _t2 = (NSRangePointer)actualCharRangePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSLayoutManager*)_self invalidateLayoutForCharacterRange:_t1 isSoft:flag actualCharacterRange:_t2];
}

// method '-[NSLayoutManager isValidGlyphIndex:]'
U32 env___IM_NSLayoutManager_isValidGlyphIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self isValidGlyphIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager layoutManagerOwnsFirstResponderInWindow:]'
U32 env___IM_NSLayoutManager_layoutManagerOwnsFirstResponderInWindow_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    BOOL _result = (BOOL)[(NSLayoutManager*)_self layoutManagerOwnsFirstResponderInWindow:_t1];
    return (U32)_result;
}

// method '-[NSLayoutManager layoutRectForTextBlock:atIndex:effectiveRange:]'
void env___IM_NSLayoutManager_layoutRectForTextBlock_CatIndex_CeffectiveRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 glyphIndex, U32 effectiveGlyphRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRangePointer _t2 = (NSRangePointer)effectiveGlyphRangePointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self layoutRectForTextBlock:_t1 atIndex:glyphIndex effectiveRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager layoutRectForTextBlock:glyphRange:]'
void env___IM_NSLayoutManager_layoutRectForTextBlock_CglyphRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    NSRect _result = (NSRect)[(NSLayoutManager*)_self layoutRectForTextBlock:_t1 glyphRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager lineFragmentRectForGlyphAtIndex:effectiveRange:]'
void env___IM_NSLayoutManager_lineFragmentRectForGlyphAtIndex_CeffectiveRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex, U32 effectiveGlyphRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRangePointer _t1 = (NSRangePointer)effectiveGlyphRangePointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self lineFragmentRectForGlyphAtIndex:glyphIndex effectiveRange:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:]'
void env___IM_NSLayoutManager_lineFragmentRectForGlyphAtIndex_CeffectiveRange_CwithoutAdditionalLayout_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex, U32 effectiveGlyphRangePointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRangePointer _t1 = (NSRangePointer)effectiveGlyphRangePointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self lineFragmentRectForGlyphAtIndex:glyphIndex effectiveRange:_t1 withoutAdditionalLayout:flag];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager lineFragmentUsedRectForGlyphAtIndex:effectiveRange:]'
void env___IM_NSLayoutManager_lineFragmentUsedRectForGlyphAtIndex_CeffectiveRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex, U32 effectiveGlyphRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRangePointer _t1 = (NSRangePointer)effectiveGlyphRangePointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self lineFragmentUsedRectForGlyphAtIndex:glyphIndex effectiveRange:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:]'
void env___IM_NSLayoutManager_lineFragmentUsedRectForGlyphAtIndex_CeffectiveRange_CwithoutAdditionalLayout_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex, U32 effectiveGlyphRangePointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRangePointer _t1 = (NSRangePointer)effectiveGlyphRangePointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self lineFragmentUsedRectForGlyphAtIndex:glyphIndex effectiveRange:_t1 withoutAdditionalLayout:flag];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager locationForGlyphAtIndex:]'
void env___IM_NSLayoutManager_locationForGlyphAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSLayoutManager*)_self locationForGlyphAtIndex:glyphIndex];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager notShownAttributeForGlyphAtIndex:]'
U32 env___IM_NSLayoutManager_notShownAttributeForGlyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self notShownAttributeForGlyphAtIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSLayoutManager numberOfGlyphs]'
U32 env___IM_NSLayoutManager_numberOfGlyphs(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSLayoutManager*)_self numberOfGlyphs];
    return (U32)_result;
}

// method '-[NSLayoutManager rangeOfNominallySpacedGlyphsContainingIndex:]'
void env___IM_NSLayoutManager_rangeOfNominallySpacedGlyphsContainingIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSLayoutManager*)_self rangeOfNominallySpacedGlyphsContainingIndex:glyphIndex];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:]'
U32 env___IM_NSLayoutManager_rectArrayForCharacterRange_CwithinSelectedCharacterRange_CinTextContainer_CrectCount_C(void *_instance, U32 _self, U32 charRangeIndirect, U32 selCharRangeIndirect, U32 containerPointer, U32 rectCountPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + selCharRangeIndirect);
    id _t3 = (id)containerPointer;
    unsigned int* _t4 = (unsigned int*)rectCountPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    NSRectArray _result = (NSRectArray)[(NSLayoutManager*)_self rectArrayForCharacterRange:_t1 withinSelectedCharacterRange:_t2 inTextContainer:_t3 rectCount:_t4];
    return (U32)_result;
}

// method '-[NSLayoutManager rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:]'
U32 env___IM_NSLayoutManager_rectArrayForGlyphRange_CwithinSelectedGlyphRange_CinTextContainer_CrectCount_C(void *_instance, U32 _self, U32 glyphRangeIndirect, U32 selGlyphRangeIndirect, U32 containerPointer, U32 rectCountPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + selGlyphRangeIndirect);
    id _t3 = (id)containerPointer;
    unsigned int* _t4 = (unsigned int*)rectCountPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    NSRectArray _result = (NSRectArray)[(NSLayoutManager*)_self rectArrayForGlyphRange:_t1 withinSelectedGlyphRange:_t2 inTextContainer:_t3 rectCount:_t4];
    return (U32)_result;
}

// method '-[NSLayoutManager removeTemporaryAttribute:forCharacterRange:]'
void env___IM_NSLayoutManager_removeTemporaryAttribute_CforCharacterRange_C(void *_instance, U32 _self, U32 namePointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)namePointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSLayoutManager*)_self removeTemporaryAttribute:_t1 forCharacterRange:_t2];
}

// method '-[NSLayoutManager removeTextContainerAtIndex:]'
void env___IM_NSLayoutManager_removeTextContainerAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSLayoutManager*)_self removeTextContainerAtIndex:index];
}

// method '-[NSLayoutManager replaceGlyphAtIndex:withGlyph:]'
void env___IM_NSLayoutManager_replaceGlyphAtIndex_CwithGlyph_C(void *_instance, U32 _self, U32 glyphIndex, U32 newGlyph) {
    [(NSLayoutManager*)_self replaceGlyphAtIndex:glyphIndex withGlyph:newGlyph];
}

// method '-[NSLayoutManager replaceTextStorage:]'
void env___IM_NSLayoutManager_replaceTextStorage_C(void *_instance, U32 _self, U32 newTextStoragePointer) {
    id _t1 = (id)newTextStoragePointer;
    [(NSLayoutManager*)_self replaceTextStorage:_t1];
}

// method '-[NSLayoutManager rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:]'
U32 env___IM_NSLayoutManager_rulerAccessoryViewForTextView_CparagraphStyle_Cruler_Cenabled_C(void *_instance, U32 _self, U32 viewPointer, U32 stylePointer, U32 rulerPointer, U32 isEnabled) {
    id _t1 = (id)viewPointer;
    id _t2 = (id)stylePointer;
    id _t3 = (id)rulerPointer;
    id _result = (id)[(NSLayoutManager*)_self rulerAccessoryViewForTextView:_t1 paragraphStyle:_t2 ruler:_t3 enabled:isEnabled];
    return (U32)_result;
}

// method '-[NSLayoutManager rulerMarkersForTextView:paragraphStyle:ruler:]'
U32 env___IM_NSLayoutManager_rulerMarkersForTextView_CparagraphStyle_Cruler_C(void *_instance, U32 _self, U32 viewPointer, U32 stylePointer, U32 rulerPointer) {
    id _t1 = (id)viewPointer;
    id _t2 = (id)stylePointer;
    id _t3 = (id)rulerPointer;
    id _result = (id)[(NSLayoutManager*)_self rulerMarkersForTextView:_t1 paragraphStyle:_t2 ruler:_t3];
    return (U32)_result;
}

// method '-[NSLayoutManager setAttachmentSize:forGlyphRange:]'
void env___IM_NSLayoutManager_setAttachmentSize_CforGlyphRange_C(void *_instance, U32 _self, U32 attachmentSizeIndirect, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + attachmentSizeIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSLayoutManager*)_self setAttachmentSize:_t1 forGlyphRange:_t2];
}

// method '-[NSLayoutManager setBackgroundLayoutEnabled:]'
void env___IM_NSLayoutManager_setBackgroundLayoutEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSLayoutManager*)_self setBackgroundLayoutEnabled:flag];
}

// method '-[NSLayoutManager setBoundsRect:forTextBlock:glyphRange:]'
void env___IM_NSLayoutManager_setBoundsRect_CforTextBlock_CglyphRange_C(void *_instance, U32 _self, U32 rectIndirect, U32 blockPointer, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)blockPointer;
    NSRange _t3 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    #endif
    [(NSLayoutManager*)_self setBoundsRect:_t1 forTextBlock:_t2 glyphRange:_t3];
}

// method '-[NSLayoutManager setCharacterIndex:forGlyphAtIndex:]'
void env___IM_NSLayoutManager_setCharacterIndex_CforGlyphAtIndex_C(void *_instance, U32 _self, U32 charIndex, U32 glyphIndex) {
    [(NSLayoutManager*)_self setCharacterIndex:charIndex forGlyphAtIndex:glyphIndex];
}

// method '-[NSLayoutManager setDefaultAttachmentScaling:]'
void env___IM_NSLayoutManager_setDefaultAttachmentScaling_C(void *_instance, U32 _self, U32 scaling) {
    [(NSLayoutManager*)_self setDefaultAttachmentScaling:scaling];
}

// method '-[NSLayoutManager setDelegate:]'
void env___IM_NSLayoutManager_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSLayoutManager*)_self setDelegate:_t1];
}

// method '-[NSLayoutManager setDrawsOutsideLineFragment:forGlyphAtIndex:]'
void env___IM_NSLayoutManager_setDrawsOutsideLineFragment_CforGlyphAtIndex_C(void *_instance, U32 _self, U32 flag, U32 glyphIndex) {
    [(NSLayoutManager*)_self setDrawsOutsideLineFragment:flag forGlyphAtIndex:glyphIndex];
}

// method '-[NSLayoutManager setExtraLineFragmentRect:usedRect:textContainer:]'
void env___IM_NSLayoutManager_setExtraLineFragmentRect_CusedRect_CtextContainer_C(void *_instance, U32 _self, U32 fragmentRectIndirect, U32 usedRectIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + fragmentRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + usedRectIndirect);
    id _t3 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSLayoutManager*)_self setExtraLineFragmentRect:_t1 usedRect:_t2 textContainer:_t3];
}

// method '-[NSLayoutManager setGlyphGenerator:]'
void env___IM_NSLayoutManager_setGlyphGenerator_C(void *_instance, U32 _self, U32 glyphGeneratorPointer) {
    id _t1 = (id)glyphGeneratorPointer;
    [(NSLayoutManager*)_self setGlyphGenerator:_t1];
}

// method '-[NSLayoutManager setHyphenationFactor:]'
void env___IM_NSLayoutManager_setHyphenationFactor_C(void *_instance, U32 _self, F32 factor) {
    [(NSLayoutManager*)_self setHyphenationFactor:factor];
}

// method '-[NSLayoutManager setIntAttribute:value:forGlyphAtIndex:]'
void env___IM_NSLayoutManager_setIntAttribute_Cvalue_CforGlyphAtIndex_C(void *_instance, U32 _self, U32 attributeTag, U32 val, U32 glyphIndex) {
    [(NSLayoutManager*)_self setIntAttribute:attributeTag value:val forGlyphAtIndex:glyphIndex];
}

// method '-[NSLayoutManager setLayoutRect:forTextBlock:glyphRange:]'
void env___IM_NSLayoutManager_setLayoutRect_CforTextBlock_CglyphRange_C(void *_instance, U32 _self, U32 rectIndirect, U32 blockPointer, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)blockPointer;
    NSRange _t3 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    #endif
    [(NSLayoutManager*)_self setLayoutRect:_t1 forTextBlock:_t2 glyphRange:_t3];
}

// method '-[NSLayoutManager setLineFragmentRect:forGlyphRange:usedRect:]'
void env___IM_NSLayoutManager_setLineFragmentRect_CforGlyphRange_CusedRect_C(void *_instance, U32 _self, U32 fragmentRectIndirect, U32 glyphRangeIndirect, U32 usedRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + fragmentRectIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRect _t3 = *(NSRect*)(_mem->data + usedRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(NSLayoutManager*)_self setLineFragmentRect:_t1 forGlyphRange:_t2 usedRect:_t3];
}

// method '-[NSLayoutManager setLocation:forStartOfGlyphRange:]'
void env___IM_NSLayoutManager_setLocation_CforStartOfGlyphRange_C(void *_instance, U32 _self, U32 locationIndirect, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + locationIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSLayoutManager*)_self setLocation:_t1 forStartOfGlyphRange:_t2];
}

// method '-[NSLayoutManager setNotShownAttribute:forGlyphAtIndex:]'
void env___IM_NSLayoutManager_setNotShownAttribute_CforGlyphAtIndex_C(void *_instance, U32 _self, U32 flag, U32 glyphIndex) {
    [(NSLayoutManager*)_self setNotShownAttribute:flag forGlyphAtIndex:glyphIndex];
}

// method '-[NSLayoutManager setShowsControlCharacters:]'
void env___IM_NSLayoutManager_setShowsControlCharacters_C(void *_instance, U32 _self, U32 flag) {
    [(NSLayoutManager*)_self setShowsControlCharacters:flag];
}

// method '-[NSLayoutManager setShowsInvisibleCharacters:]'
void env___IM_NSLayoutManager_setShowsInvisibleCharacters_C(void *_instance, U32 _self, U32 flag) {
    [(NSLayoutManager*)_self setShowsInvisibleCharacters:flag];
}

// method '-[NSLayoutManager setTemporaryAttributes:forCharacterRange:]'
void env___IM_NSLayoutManager_setTemporaryAttributes_CforCharacterRange_C(void *_instance, U32 _self, U32 attrsPointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)attrsPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSLayoutManager*)_self setTemporaryAttributes:_t1 forCharacterRange:_t2];
}

// method '-[NSLayoutManager setTextContainer:forGlyphRange:]'
void env___IM_NSLayoutManager_setTextContainer_CforGlyphRange_C(void *_instance, U32 _self, U32 containerPointer, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)containerPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSLayoutManager*)_self setTextContainer:_t1 forGlyphRange:_t2];
}

// method '-[NSLayoutManager setTextStorage:]'
void env___IM_NSLayoutManager_setTextStorage_C(void *_instance, U32 _self, U32 textStoragePointer) {
    id _t1 = (id)textStoragePointer;
    [(NSLayoutManager*)_self setTextStorage:_t1];
}

// method '-[NSLayoutManager setTypesetter:]'
void env___IM_NSLayoutManager_setTypesetter_C(void *_instance, U32 _self, U32 typesetterPointer) {
    id _t1 = (id)typesetterPointer;
    [(NSLayoutManager*)_self setTypesetter:_t1];
}

// method '-[NSLayoutManager setTypesetterBehavior:]'
void env___IM_NSLayoutManager_setTypesetterBehavior_C(void *_instance, U32 _self, U32 theBehavior) {
    [(NSLayoutManager*)_self setTypesetterBehavior:theBehavior];
}

// method '-[NSLayoutManager setUsesScreenFonts:]'
void env___IM_NSLayoutManager_setUsesScreenFonts_C(void *_instance, U32 _self, U32 flag) {
    [(NSLayoutManager*)_self setUsesScreenFonts:flag];
}

// method '-[NSLayoutManager showAttachmentCell:inRect:characterIndex:]'
void env___IM_NSLayoutManager_showAttachmentCell_CinRect_CcharacterIndex_C(void *_instance, U32 _self, U32 cellPointer, U32 rectIndirect, U32 attachmentIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)cellPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    [(NSLayoutManager*)_self showAttachmentCell:_t1 inRect:_t2 characterIndex:attachmentIndex];
}

// method '-[NSLayoutManager showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:]'
void env___IM_NSLayoutManager_showPackedGlyphs_Clength_CglyphRange_CatPoint_Cfont_Ccolor_CprintingAdjustment_C(void *_instance, U32 _self, U32 glyphsPointer, U32 glyphLen, U32 glyphRangeIndirect, U32 pointIndirect, U32 fontPointer, U32 colorPointer, U32 printingAdjustmentIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    char* _t1 = (char*)glyphsPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSPoint _t3 = *(NSPoint*)(_mem->data + pointIndirect);
    id _t4 = (id)fontPointer;
    id _t5 = (id)colorPointer;
    NSSize _t6 = *(NSSize*)(_mem->data + printingAdjustmentIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    swap_f(&_t6.width);
    swap_f(&_t6.height);
    #endif
    [(NSLayoutManager*)_self showPackedGlyphs:_t1 length:glyphLen glyphRange:_t2 atPoint:_t3 font:_t4 color:_t5 printingAdjustment:_t6];
}

// method '-[NSLayoutManager showsControlCharacters]'
U32 env___IM_NSLayoutManager_showsControlCharacters(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self showsControlCharacters];
    return (U32)_result;
}

// method '-[NSLayoutManager showsInvisibleCharacters]'
U32 env___IM_NSLayoutManager_showsInvisibleCharacters(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self showsInvisibleCharacters];
    return (U32)_result;
}

// method '-[NSLayoutManager strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void env___IM_NSLayoutManager_strikethroughGlyphRange_CstrikethroughType_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(void *_instance, U32 _self, U32 glyphRangeIndirect, U32 strikethroughVal, U32 lineRectIndirect, U32 lineGlyphRangeIndirect, U32 containerOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + lineRectIndirect);
    NSRange _t3 = *(NSRange*)(_mem->data + lineGlyphRangeIndirect);
    NSPoint _t4 = *(NSPoint*)(_mem->data + containerOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    swap_f(&_t4.x);
    swap_f(&_t4.y);
    #endif
    [(NSLayoutManager*)_self strikethroughGlyphRange:_t1 strikethroughType:strikethroughVal lineFragmentRect:_t2 lineFragmentGlyphRange:_t3 containerOrigin:_t4];
}

// method '-[NSLayoutManager substituteFontForFont:]'
U32 env___IM_NSLayoutManager_substituteFontForFont_C(void *_instance, U32 _self, U32 originalFontPointer) {
    id _t1 = (id)originalFontPointer;
    id _result = (id)[(NSLayoutManager*)_self substituteFontForFont:_t1];
    return (U32)_result;
}

// method '-[NSLayoutManager temporaryAttributesAtCharacterIndex:effectiveRange:]'
U32 env___IM_NSLayoutManager_temporaryAttributesAtCharacterIndex_CeffectiveRange_C(void *_instance, U32 _self, U32 charIndex, U32 effectiveCharRangePointer) {
    NSRangePointer _t1 = (NSRangePointer)effectiveCharRangePointer;
    id _result = (id)[(NSLayoutManager*)_self temporaryAttributesAtCharacterIndex:charIndex effectiveRange:_t1];
    return (U32)_result;
}

// method '-[NSLayoutManager textContainerChangedGeometry:]'
void env___IM_NSLayoutManager_textContainerChangedGeometry_C(void *_instance, U32 _self, U32 containerPointer) {
    id _t1 = (id)containerPointer;
    [(NSLayoutManager*)_self textContainerChangedGeometry:_t1];
}

// method '-[NSLayoutManager textContainerChangedTextView:]'
void env___IM_NSLayoutManager_textContainerChangedTextView_C(void *_instance, U32 _self, U32 containerPointer) {
    id _t1 = (id)containerPointer;
    [(NSLayoutManager*)_self textContainerChangedTextView:_t1];
}

// method '-[NSLayoutManager textContainerForGlyphAtIndex:effectiveRange:]'
U32 env___IM_NSLayoutManager_textContainerForGlyphAtIndex_CeffectiveRange_C(void *_instance, U32 _self, U32 glyphIndex, U32 effectiveGlyphRangePointer) {
    NSRangePointer _t1 = (NSRangePointer)effectiveGlyphRangePointer;
    id _result = (id)[(NSLayoutManager*)_self textContainerForGlyphAtIndex:glyphIndex effectiveRange:_t1];
    return (U32)_result;
}

// method '-[NSLayoutManager textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:]'
U32 env___IM_NSLayoutManager_textContainerForGlyphAtIndex_CeffectiveRange_CwithoutAdditionalLayout_C(void *_instance, U32 _self, U32 glyphIndex, U32 effectiveGlyphRangePointer, U32 flag) {
    NSRangePointer _t1 = (NSRangePointer)effectiveGlyphRangePointer;
    id _result = (id)[(NSLayoutManager*)_self textContainerForGlyphAtIndex:glyphIndex effectiveRange:_t1 withoutAdditionalLayout:flag];
    return (U32)_result;
}

// method '-[NSLayoutManager textContainers]'
U32 env___IM_NSLayoutManager_textContainers(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self textContainers];
    return (U32)_result;
}

// method '-[NSLayoutManager textStorage]'
U32 env___IM_NSLayoutManager_textStorage(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self textStorage];
    return (U32)_result;
}

// method '-[NSLayoutManager textStorage:edited:range:changeInLength:invalidatedRange:]'
void env___IM_NSLayoutManager_textStorage_Cedited_Crange_CchangeInLength_CinvalidatedRange_C(void *_instance, U32 _self, U32 strPointer, U32 editedMask, U32 newCharRangeIndirect, U32 delta, U32 invalidatedCharRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)strPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + newCharRangeIndirect);
    NSRange _t3 = *(NSRange*)(_mem->data + invalidatedCharRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    #endif
    [(NSLayoutManager*)_self textStorage:_t1 edited:editedMask range:_t2 changeInLength:delta invalidatedRange:_t3];
}

// method '-[NSLayoutManager textViewForBeginningOfSelection]'
U32 env___IM_NSLayoutManager_textViewForBeginningOfSelection(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self textViewForBeginningOfSelection];
    return (U32)_result;
}

// method '-[NSLayoutManager typesetter]'
U32 env___IM_NSLayoutManager_typesetter(void *_instance, U32 _self) {
    id _result = (id)[(NSLayoutManager*)_self typesetter];
    return (U32)_result;
}

// method '-[NSLayoutManager typesetterBehavior]'
U32 env___IM_NSLayoutManager_typesetterBehavior(void *_instance, U32 _self) {
    int _result = (int)[(NSLayoutManager*)_self typesetterBehavior];
    return (U32)_result;
}

// method '-[NSLayoutManager underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void env___IM_NSLayoutManager_underlineGlyphRange_CunderlineType_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(void *_instance, U32 _self, U32 glyphRangeIndirect, U32 underlineVal, U32 lineRectIndirect, U32 lineGlyphRangeIndirect, U32 containerOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + lineRectIndirect);
    NSRange _t3 = *(NSRange*)(_mem->data + lineGlyphRangeIndirect);
    NSPoint _t4 = *(NSPoint*)(_mem->data + containerOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    swap_f(&_t4.x);
    swap_f(&_t4.y);
    #endif
    [(NSLayoutManager*)_self underlineGlyphRange:_t1 underlineType:underlineVal lineFragmentRect:_t2 lineFragmentGlyphRange:_t3 containerOrigin:_t4];
}

// method '-[NSLayoutManager usedRectForTextContainer:]'
void env___IM_NSLayoutManager_usedRectForTextContainer_C(void *_instance, U32 _resultIndirect, U32 _self, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)containerPointer;
    NSRect _result = (NSRect)[(NSLayoutManager*)_self usedRectForTextContainer:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLayoutManager usesScreenFonts]'
U32 env___IM_NSLayoutManager_usesScreenFonts(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSLayoutManager*)_self usesScreenFonts];
    return (U32)_result;
}

// method '-[NSLevelIndicator criticalValue]'
F64 env___IM_NSLevelIndicator_criticalValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicator*)_self criticalValue];
    return (F64)_result;
}

// method '-[NSLevelIndicator maxValue]'
F64 env___IM_NSLevelIndicator_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicator*)_self maxValue];
    return (F64)_result;
}

// method '-[NSLevelIndicator minValue]'
F64 env___IM_NSLevelIndicator_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicator*)_self minValue];
    return (F64)_result;
}

// method '-[NSLevelIndicator numberOfMajorTickMarks]'
U32 env___IM_NSLevelIndicator_numberOfMajorTickMarks(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicator*)_self numberOfMajorTickMarks];
    return (U32)_result;
}

// method '-[NSLevelIndicator numberOfTickMarks]'
U32 env___IM_NSLevelIndicator_numberOfTickMarks(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicator*)_self numberOfTickMarks];
    return (U32)_result;
}

// method '-[NSLevelIndicator rectOfTickMarkAtIndex:]'
void env___IM_NSLevelIndicator_rectOfTickMarkAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 index) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSLevelIndicator*)_self rectOfTickMarkAtIndex:index];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLevelIndicator setCriticalValue:]'
void env___IM_NSLevelIndicator_setCriticalValue_C(void *_instance, U32 _self, F64 criticalValue) {
    [(NSLevelIndicator*)_self setCriticalValue:criticalValue];
}

// method '-[NSLevelIndicator setMaxValue:]'
void env___IM_NSLevelIndicator_setMaxValue_C(void *_instance, U32 _self, F64 maxValue) {
    [(NSLevelIndicator*)_self setMaxValue:maxValue];
}

// method '-[NSLevelIndicator setMinValue:]'
void env___IM_NSLevelIndicator_setMinValue_C(void *_instance, U32 _self, F64 minValue) {
    [(NSLevelIndicator*)_self setMinValue:minValue];
}

// method '-[NSLevelIndicator setNumberOfMajorTickMarks:]'
void env___IM_NSLevelIndicator_setNumberOfMajorTickMarks_C(void *_instance, U32 _self, U32 count) {
    [(NSLevelIndicator*)_self setNumberOfMajorTickMarks:count];
}

// method '-[NSLevelIndicator setNumberOfTickMarks:]'
void env___IM_NSLevelIndicator_setNumberOfTickMarks_C(void *_instance, U32 _self, U32 count) {
    [(NSLevelIndicator*)_self setNumberOfTickMarks:count];
}

// method '-[NSLevelIndicator setTickMarkPosition:]'
void env___IM_NSLevelIndicator_setTickMarkPosition_C(void *_instance, U32 _self, U32 position) {
    [(NSLevelIndicator*)_self setTickMarkPosition:position];
}

// method '-[NSLevelIndicator setWarningValue:]'
void env___IM_NSLevelIndicator_setWarningValue_C(void *_instance, U32 _self, F64 warningValue) {
    [(NSLevelIndicator*)_self setWarningValue:warningValue];
}

// method '-[NSLevelIndicator tickMarkPosition]'
U32 env___IM_NSLevelIndicator_tickMarkPosition(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicator*)_self tickMarkPosition];
    return (U32)_result;
}

// method '-[NSLevelIndicator tickMarkValueAtIndex:]'
F64 env___IM_NSLevelIndicator_tickMarkValueAtIndex_C(void *_instance, U32 _self, U32 index) {
    double _result = (double)[(NSLevelIndicator*)_self tickMarkValueAtIndex:index];
    return (F64)_result;
}

// method '-[NSLevelIndicator warningValue]'
F64 env___IM_NSLevelIndicator_warningValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicator*)_self warningValue];
    return (F64)_result;
}

// method '-[NSLevelIndicatorCell criticalValue]'
F64 env___IM_NSLevelIndicatorCell_criticalValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicatorCell*)_self criticalValue];
    return (F64)_result;
}

// method '-[NSLevelIndicatorCell initWithLevelIndicatorStyle:]'
U32 env___IM_NSLevelIndicatorCell_initWithLevelIndicatorStyle_C(void *_instance, U32 _self, U32 levelIndicatorStyle) {
    id _result = (id)[(NSLevelIndicatorCell*)_self initWithLevelIndicatorStyle:levelIndicatorStyle];
    return (U32)_result;
}

// method '-[NSLevelIndicatorCell levelIndicatorStyle]'
U32 env___IM_NSLevelIndicatorCell_levelIndicatorStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicatorCell*)_self levelIndicatorStyle];
    return (U32)_result;
}

// method '-[NSLevelIndicatorCell maxValue]'
F64 env___IM_NSLevelIndicatorCell_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicatorCell*)_self maxValue];
    return (F64)_result;
}

// method '-[NSLevelIndicatorCell minValue]'
F64 env___IM_NSLevelIndicatorCell_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicatorCell*)_self minValue];
    return (F64)_result;
}

// method '-[NSLevelIndicatorCell numberOfMajorTickMarks]'
U32 env___IM_NSLevelIndicatorCell_numberOfMajorTickMarks(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicatorCell*)_self numberOfMajorTickMarks];
    return (U32)_result;
}

// method '-[NSLevelIndicatorCell numberOfTickMarks]'
U32 env___IM_NSLevelIndicatorCell_numberOfTickMarks(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicatorCell*)_self numberOfTickMarks];
    return (U32)_result;
}

// method '-[NSLevelIndicatorCell rectOfTickMarkAtIndex:]'
void env___IM_NSLevelIndicatorCell_rectOfTickMarkAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 index) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSLevelIndicatorCell*)_self rectOfTickMarkAtIndex:index];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSLevelIndicatorCell setCriticalValue:]'
void env___IM_NSLevelIndicatorCell_setCriticalValue_C(void *_instance, U32 _self, F64 criticalValue) {
    [(NSLevelIndicatorCell*)_self setCriticalValue:criticalValue];
}

// method '-[NSLevelIndicatorCell setImage:]'
void env___IM_NSLevelIndicatorCell_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSLevelIndicatorCell*)_self setImage:_t1];
}

// method '-[NSLevelIndicatorCell setLevelIndicatorStyle:]'
void env___IM_NSLevelIndicatorCell_setLevelIndicatorStyle_C(void *_instance, U32 _self, U32 levelIndicatorStyle) {
    [(NSLevelIndicatorCell*)_self setLevelIndicatorStyle:levelIndicatorStyle];
}

// method '-[NSLevelIndicatorCell setMaxValue:]'
void env___IM_NSLevelIndicatorCell_setMaxValue_C(void *_instance, U32 _self, F64 maxValue) {
    [(NSLevelIndicatorCell*)_self setMaxValue:maxValue];
}

// method '-[NSLevelIndicatorCell setMinValue:]'
void env___IM_NSLevelIndicatorCell_setMinValue_C(void *_instance, U32 _self, F64 minValue) {
    [(NSLevelIndicatorCell*)_self setMinValue:minValue];
}

// method '-[NSLevelIndicatorCell setNumberOfMajorTickMarks:]'
void env___IM_NSLevelIndicatorCell_setNumberOfMajorTickMarks_C(void *_instance, U32 _self, U32 count) {
    [(NSLevelIndicatorCell*)_self setNumberOfMajorTickMarks:count];
}

// method '-[NSLevelIndicatorCell setNumberOfTickMarks:]'
void env___IM_NSLevelIndicatorCell_setNumberOfTickMarks_C(void *_instance, U32 _self, U32 count) {
    [(NSLevelIndicatorCell*)_self setNumberOfTickMarks:count];
}

// method '-[NSLevelIndicatorCell setTickMarkPosition:]'
void env___IM_NSLevelIndicatorCell_setTickMarkPosition_C(void *_instance, U32 _self, U32 position) {
    [(NSLevelIndicatorCell*)_self setTickMarkPosition:position];
}

// method '-[NSLevelIndicatorCell setWarningValue:]'
void env___IM_NSLevelIndicatorCell_setWarningValue_C(void *_instance, U32 _self, F64 warningValue) {
    [(NSLevelIndicatorCell*)_self setWarningValue:warningValue];
}

// method '-[NSLevelIndicatorCell tickMarkPosition]'
U32 env___IM_NSLevelIndicatorCell_tickMarkPosition(void *_instance, U32 _self) {
    int _result = (int)[(NSLevelIndicatorCell*)_self tickMarkPosition];
    return (U32)_result;
}

// method '-[NSLevelIndicatorCell tickMarkValueAtIndex:]'
F64 env___IM_NSLevelIndicatorCell_tickMarkValueAtIndex_C(void *_instance, U32 _self, U32 index) {
    double _result = (double)[(NSLevelIndicatorCell*)_self tickMarkValueAtIndex:index];
    return (F64)_result;
}

// method '-[NSLevelIndicatorCell warningValue]'
F64 env___IM_NSLevelIndicatorCell_warningValue(void *_instance, U32 _self) {
    double _result = (double)[(NSLevelIndicatorCell*)_self warningValue];
    return (F64)_result;
}

// method '-[NSMatrix acceptsFirstMouse:]'
U32 env___IM_NSMatrix_acceptsFirstMouse_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSMatrix*)_self acceptsFirstMouse:_t1];
    return (U32)_result;
}

// method '-[NSMatrix addColumn]'
void env___IM_NSMatrix_addColumn(void *_instance, U32 _self) {
    [(NSMatrix*)_self addColumn];
}

// method '-[NSMatrix addColumnWithCells:]'
void env___IM_NSMatrix_addColumnWithCells_C(void *_instance, U32 _self, U32 newCellsPointer) {
    id _t1 = (id)newCellsPointer;
    [(NSMatrix*)_self addColumnWithCells:_t1];
}

// method '-[NSMatrix addRow]'
void env___IM_NSMatrix_addRow(void *_instance, U32 _self) {
    [(NSMatrix*)_self addRow];
}

// method '-[NSMatrix addRowWithCells:]'
void env___IM_NSMatrix_addRowWithCells_C(void *_instance, U32 _self, U32 newCellsPointer) {
    id _t1 = (id)newCellsPointer;
    [(NSMatrix*)_self addRowWithCells:_t1];
}

// method '-[NSMatrix allowsEmptySelection]'
U32 env___IM_NSMatrix_allowsEmptySelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self allowsEmptySelection];
    return (U32)_result;
}

// method '-[NSMatrix autosizesCells]'
U32 env___IM_NSMatrix_autosizesCells(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self autosizesCells];
    return (U32)_result;
}

// method '-[NSMatrix backgroundColor]'
U32 env___IM_NSMatrix_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSMatrix cellAtRow:column:]'
U32 env___IM_NSMatrix_cellAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    id _result = (id)[(NSMatrix*)_self cellAtRow:row column:col];
    return (U32)_result;
}

// method '-[NSMatrix cellBackgroundColor]'
U32 env___IM_NSMatrix_cellBackgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self cellBackgroundColor];
    return (U32)_result;
}

// method '-[NSMatrix cellClass]'
U32 env___IM_NSMatrix_cellClass(void *_instance, U32 _self) {
    Class _result = (Class)[(NSMatrix*)_self cellClass];
    return (U32)_result;
}

// method '-[NSMatrix cellFrameAtRow:column:]'
void env___IM_NSMatrix_cellFrameAtRow_Ccolumn_C(void *_instance, U32 _resultIndirect, U32 _self, U32 row, U32 col) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSMatrix*)_self cellFrameAtRow:row column:col];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMatrix cellSize]'
void env___IM_NSMatrix_cellSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSMatrix*)_self cellSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMatrix cellWithTag:]'
U32 env___IM_NSMatrix_cellWithTag_C(void *_instance, U32 _self, U32 anInt) {
    id _result = (id)[(NSMatrix*)_self cellWithTag:anInt];
    return (U32)_result;
}

// method '-[NSMatrix cells]'
U32 env___IM_NSMatrix_cells(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self cells];
    return (U32)_result;
}

// method '-[NSMatrix delegate]'
U32 env___IM_NSMatrix_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self delegate];
    return (U32)_result;
}

// method '-[NSMatrix deselectAllCells]'
void env___IM_NSMatrix_deselectAllCells(void *_instance, U32 _self) {
    [(NSMatrix*)_self deselectAllCells];
}

// method '-[NSMatrix deselectSelectedCell]'
void env___IM_NSMatrix_deselectSelectedCell(void *_instance, U32 _self) {
    [(NSMatrix*)_self deselectSelectedCell];
}

// method '-[NSMatrix doubleAction]'
U32 env___IM_NSMatrix_doubleAction(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSMatrix*)_self doubleAction];
    return (U32)_result;
}

// method '-[NSMatrix drawCellAtRow:column:]'
void env___IM_NSMatrix_drawCellAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    [(NSMatrix*)_self drawCellAtRow:row column:col];
}

// method '-[NSMatrix drawsBackground]'
U32 env___IM_NSMatrix_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSMatrix drawsCellBackground]'
U32 env___IM_NSMatrix_drawsCellBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self drawsCellBackground];
    return (U32)_result;
}

// method '-[NSMatrix getNumberOfRows:columns:]'
void env___IM_NSMatrix_getNumberOfRows_Ccolumns_C(void *_instance, U32 _self, U32 rowCountPointer, U32 colCountPointer) {
    int* _t1 = (int*)rowCountPointer;
    int* _t2 = (int*)colCountPointer;
    [(NSMatrix*)_self getNumberOfRows:_t1 columns:_t2];
}

// method '-[NSMatrix getRow:column:forPoint:]'
U32 env___IM_NSMatrix_getRow_Ccolumn_CforPoint_C(void *_instance, U32 _self, U32 rowPointer, U32 colPointer, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    int* _t1 = (int*)rowPointer;
    int* _t2 = (int*)colPointer;
    NSPoint _t3 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    BOOL _result = (BOOL)[(NSMatrix*)_self getRow:_t1 column:_t2 forPoint:_t3];
    return (U32)_result;
}

// method '-[NSMatrix getRow:column:ofCell:]'
U32 env___IM_NSMatrix_getRow_Ccolumn_CofCell_C(void *_instance, U32 _self, U32 rowPointer, U32 colPointer, U32 aCellPointer) {
    int* _t1 = (int*)rowPointer;
    int* _t2 = (int*)colPointer;
    id _t3 = (id)aCellPointer;
    BOOL _result = (BOOL)[(NSMatrix*)_self getRow:_t1 column:_t2 ofCell:_t3];
    return (U32)_result;
}

// method '-[NSMatrix highlightCell:atRow:column:]'
void env___IM_NSMatrix_highlightCell_CatRow_Ccolumn_C(void *_instance, U32 _self, U32 flag, U32 row, U32 col) {
    [(NSMatrix*)_self highlightCell:flag atRow:row column:col];
}

// method '-[NSMatrix initWithFrame:]'
U32 env___IM_NSMatrix_initWithFrame_C(void *_instance, U32 _self, U32 frameRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSMatrix*)_self initWithFrame:_t1];
    return (U32)_result;
}

// method '-[NSMatrix initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:]'
U32 env___IM_NSMatrix_initWithFrame_Cmode_CcellClass_CnumberOfRows_CnumberOfColumns_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 aMode, U32 factoryIdPointer, U32 rowsHigh, U32 colsWide) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    Class _t2 = (Class)factoryIdPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSMatrix*)_self initWithFrame:_t1 mode:aMode cellClass:_t2 numberOfRows:rowsHigh numberOfColumns:colsWide];
    return (U32)_result;
}

// method '-[NSMatrix initWithFrame:mode:prototype:numberOfRows:numberOfColumns:]'
U32 env___IM_NSMatrix_initWithFrame_Cmode_Cprototype_CnumberOfRows_CnumberOfColumns_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 aMode, U32 aCellPointer, U32 rowsHigh, U32 colsWide) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    id _t2 = (id)aCellPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSMatrix*)_self initWithFrame:_t1 mode:aMode prototype:_t2 numberOfRows:rowsHigh numberOfColumns:colsWide];
    return (U32)_result;
}

// method '-[NSMatrix insertColumn:]'
void env___IM_NSMatrix_insertColumn_C(void *_instance, U32 _self, U32 column) {
    [(NSMatrix*)_self insertColumn:column];
}

// method '-[NSMatrix insertColumn:withCells:]'
void env___IM_NSMatrix_insertColumn_CwithCells_C(void *_instance, U32 _self, U32 column, U32 newCellsPointer) {
    id _t1 = (id)newCellsPointer;
    [(NSMatrix*)_self insertColumn:column withCells:_t1];
}

// method '-[NSMatrix insertRow:]'
void env___IM_NSMatrix_insertRow_C(void *_instance, U32 _self, U32 row) {
    [(NSMatrix*)_self insertRow:row];
}

// method '-[NSMatrix insertRow:withCells:]'
void env___IM_NSMatrix_insertRow_CwithCells_C(void *_instance, U32 _self, U32 row, U32 newCellsPointer) {
    id _t1 = (id)newCellsPointer;
    [(NSMatrix*)_self insertRow:row withCells:_t1];
}

// method '-[NSMatrix intercellSpacing]'
void env___IM_NSMatrix_intercellSpacing(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSMatrix*)_self intercellSpacing];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMatrix isAutoscroll]'
U32 env___IM_NSMatrix_isAutoscroll(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self isAutoscroll];
    return (U32)_result;
}

// method '-[NSMatrix isSelectionByRect]'
U32 env___IM_NSMatrix_isSelectionByRect(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self isSelectionByRect];
    return (U32)_result;
}

// method '-[NSMatrix keyCell]'
U32 env___IM_NSMatrix_keyCell(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self keyCell];
    return (U32)_result;
}

// method '-[NSMatrix makeCellAtRow:column:]'
U32 env___IM_NSMatrix_makeCellAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    id _result = (id)[(NSMatrix*)_self makeCellAtRow:row column:col];
    return (U32)_result;
}

// method '-[NSMatrix mode]'
U32 env___IM_NSMatrix_mode(void *_instance, U32 _self) {
    int _result = (int)[(NSMatrix*)_self mode];
    return (U32)_result;
}

// method '-[NSMatrix mouseDown:]'
void env___IM_NSMatrix_mouseDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSMatrix*)_self mouseDown:_t1];
}

// method '-[NSMatrix mouseDownFlags]'
U32 env___IM_NSMatrix_mouseDownFlags(void *_instance, U32 _self) {
    int _result = (int)[(NSMatrix*)_self mouseDownFlags];
    return (U32)_result;
}

// method '-[NSMatrix numberOfColumns]'
U32 env___IM_NSMatrix_numberOfColumns(void *_instance, U32 _self) {
    int _result = (int)[(NSMatrix*)_self numberOfColumns];
    return (U32)_result;
}

// method '-[NSMatrix numberOfRows]'
U32 env___IM_NSMatrix_numberOfRows(void *_instance, U32 _self) {
    int _result = (int)[(NSMatrix*)_self numberOfRows];
    return (U32)_result;
}

// method '-[NSMatrix performKeyEquivalent:]'
U32 env___IM_NSMatrix_performKeyEquivalent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSMatrix*)_self performKeyEquivalent:_t1];
    return (U32)_result;
}

// method '-[NSMatrix prototype]'
U32 env___IM_NSMatrix_prototype(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self prototype];
    return (U32)_result;
}

// method '-[NSMatrix putCell:atRow:column:]'
void env___IM_NSMatrix_putCell_CatRow_Ccolumn_C(void *_instance, U32 _self, U32 newCellPointer, U32 row, U32 col) {
    id _t1 = (id)newCellPointer;
    [(NSMatrix*)_self putCell:_t1 atRow:row column:col];
}

// method '-[NSMatrix removeColumn:]'
void env___IM_NSMatrix_removeColumn_C(void *_instance, U32 _self, U32 col) {
    [(NSMatrix*)_self removeColumn:col];
}

// method '-[NSMatrix removeRow:]'
void env___IM_NSMatrix_removeRow_C(void *_instance, U32 _self, U32 row) {
    [(NSMatrix*)_self removeRow:row];
}

// method '-[NSMatrix renewRows:columns:]'
void env___IM_NSMatrix_renewRows_Ccolumns_C(void *_instance, U32 _self, U32 newRows, U32 newCols) {
    [(NSMatrix*)_self renewRows:newRows columns:newCols];
}

// method '-[NSMatrix resetCursorRects]'
void env___IM_NSMatrix_resetCursorRects(void *_instance, U32 _self) {
    [(NSMatrix*)_self resetCursorRects];
}

// method '-[NSMatrix scrollCellToVisibleAtRow:column:]'
void env___IM_NSMatrix_scrollCellToVisibleAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    [(NSMatrix*)_self scrollCellToVisibleAtRow:row column:col];
}

// method '-[NSMatrix selectAll:]'
void env___IM_NSMatrix_selectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMatrix*)_self selectAll:_t1];
}

// method '-[NSMatrix selectCellAtRow:column:]'
void env___IM_NSMatrix_selectCellAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    [(NSMatrix*)_self selectCellAtRow:row column:col];
}

// method '-[NSMatrix selectCellWithTag:]'
U32 env___IM_NSMatrix_selectCellWithTag_C(void *_instance, U32 _self, U32 anInt) {
    BOOL _result = (BOOL)[(NSMatrix*)_self selectCellWithTag:anInt];
    return (U32)_result;
}

// method '-[NSMatrix selectText:]'
void env___IM_NSMatrix_selectText_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMatrix*)_self selectText:_t1];
}

// method '-[NSMatrix selectTextAtRow:column:]'
U32 env___IM_NSMatrix_selectTextAtRow_Ccolumn_C(void *_instance, U32 _self, U32 row, U32 col) {
    id _result = (id)[(NSMatrix*)_self selectTextAtRow:row column:col];
    return (U32)_result;
}

// method '-[NSMatrix selectedCell]'
U32 env___IM_NSMatrix_selectedCell(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self selectedCell];
    return (U32)_result;
}

// method '-[NSMatrix selectedCells]'
U32 env___IM_NSMatrix_selectedCells(void *_instance, U32 _self) {
    id _result = (id)[(NSMatrix*)_self selectedCells];
    return (U32)_result;
}

// method '-[NSMatrix selectedColumn]'
U32 env___IM_NSMatrix_selectedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSMatrix*)_self selectedColumn];
    return (U32)_result;
}

// method '-[NSMatrix selectedRow]'
U32 env___IM_NSMatrix_selectedRow(void *_instance, U32 _self) {
    int _result = (int)[(NSMatrix*)_self selectedRow];
    return (U32)_result;
}

// method '-[NSMatrix sendAction]'
U32 env___IM_NSMatrix_sendAction(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self sendAction];
    return (U32)_result;
}

// method '-[NSMatrix sendAction:to:forAllCells:]'
void env___IM_NSMatrix_sendAction_Cto_CforAllCells_C(void *_instance, U32 _self, U32 aSelectorPointer, U32 anObjectPointer, U32 flag) {
    SEL _t1 = (SEL)aSelectorPointer;
    id _t2 = (id)anObjectPointer;
    [(NSMatrix*)_self sendAction:_t1 to:_t2 forAllCells:flag];
}

// method '-[NSMatrix sendDoubleAction]'
void env___IM_NSMatrix_sendDoubleAction(void *_instance, U32 _self) {
    [(NSMatrix*)_self sendDoubleAction];
}

// method '-[NSMatrix setAllowsEmptySelection:]'
void env___IM_NSMatrix_setAllowsEmptySelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setAllowsEmptySelection:flag];
}

// method '-[NSMatrix setAutoscroll:]'
void env___IM_NSMatrix_setAutoscroll_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setAutoscroll:flag];
}

// method '-[NSMatrix setAutosizesCells:]'
void env___IM_NSMatrix_setAutosizesCells_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setAutosizesCells:flag];
}

// method '-[NSMatrix setBackgroundColor:]'
void env___IM_NSMatrix_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSMatrix*)_self setBackgroundColor:_t1];
}

// method '-[NSMatrix setCellBackgroundColor:]'
void env___IM_NSMatrix_setCellBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSMatrix*)_self setCellBackgroundColor:_t1];
}

// method '-[NSMatrix setCellClass:]'
void env___IM_NSMatrix_setCellClass_C(void *_instance, U32 _self, U32 factoryIdPointer) {
    Class _t1 = (Class)factoryIdPointer;
    [(NSMatrix*)_self setCellClass:_t1];
}

// method '-[NSMatrix setCellSize:]'
void env___IM_NSMatrix_setCellSize_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSMatrix*)_self setCellSize:_t1];
}

// method '-[NSMatrix setDelegate:]'
void env___IM_NSMatrix_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSMatrix*)_self setDelegate:_t1];
}

// method '-[NSMatrix setDoubleAction:]'
void env___IM_NSMatrix_setDoubleAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSMatrix*)_self setDoubleAction:_t1];
}

// method '-[NSMatrix setDrawsBackground:]'
void env___IM_NSMatrix_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setDrawsBackground:flag];
}

// method '-[NSMatrix setDrawsCellBackground:]'
void env___IM_NSMatrix_setDrawsCellBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setDrawsCellBackground:flag];
}

// method '-[NSMatrix setIntercellSpacing:]'
void env___IM_NSMatrix_setIntercellSpacing_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSMatrix*)_self setIntercellSpacing:_t1];
}

// method '-[NSMatrix setKeyCell:]'
void env___IM_NSMatrix_setKeyCell_C(void *_instance, U32 _self, U32 keyCellPointer) {
    id _t1 = (id)keyCellPointer;
    [(NSMatrix*)_self setKeyCell:_t1];
}

// method '-[NSMatrix setMode:]'
void env___IM_NSMatrix_setMode_C(void *_instance, U32 _self, U32 aMode) {
    [(NSMatrix*)_self setMode:aMode];
}

// method '-[NSMatrix setPrototype:]'
void env___IM_NSMatrix_setPrototype_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSMatrix*)_self setPrototype:_t1];
}

// method '-[NSMatrix setScrollable:]'
void env___IM_NSMatrix_setScrollable_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setScrollable:flag];
}

// method '-[NSMatrix setSelectionByRect:]'
void env___IM_NSMatrix_setSelectionByRect_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setSelectionByRect:flag];
}

// method '-[NSMatrix setSelectionFrom:to:anchor:highlight:]'
void env___IM_NSMatrix_setSelectionFrom_Cto_Canchor_Chighlight_C(void *_instance, U32 _self, U32 startPos, U32 endPos, U32 anchorPos, U32 lit) {
    [(NSMatrix*)_self setSelectionFrom:startPos to:endPos anchor:anchorPos highlight:lit];
}

// method '-[NSMatrix setState:atRow:column:]'
void env___IM_NSMatrix_setState_CatRow_Ccolumn_C(void *_instance, U32 _self, U32 value, U32 row, U32 col) {
    [(NSMatrix*)_self setState:value atRow:row column:col];
}

// method '-[NSMatrix setTabKeyTraversesCells:]'
void env___IM_NSMatrix_setTabKeyTraversesCells_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setTabKeyTraversesCells:flag];
}

// method '-[NSMatrix setToolTip:forCell:]'
void env___IM_NSMatrix_setToolTip_CforCell_C(void *_instance, U32 _self, U32 toolTipStringPointer, U32 cellPointer) {
    id _t1 = (id)toolTipStringPointer;
    id _t2 = (id)cellPointer;
    [(NSMatrix*)_self setToolTip:_t1 forCell:_t2];
}

// method '-[NSMatrix setValidateSize:]'
void env___IM_NSMatrix_setValidateSize_C(void *_instance, U32 _self, U32 flag) {
    [(NSMatrix*)_self setValidateSize:flag];
}

// method '-[NSMatrix sizeToCells]'
void env___IM_NSMatrix_sizeToCells(void *_instance, U32 _self) {
    [(NSMatrix*)_self sizeToCells];
}

// method '-[NSMatrix sortUsingSelector:]'
void env___IM_NSMatrix_sortUsingSelector_C(void *_instance, U32 _self, U32 comparatorPointer) {
    SEL _t1 = (SEL)comparatorPointer;
    [(NSMatrix*)_self sortUsingSelector:_t1];
}

// method '-[NSMatrix tabKeyTraversesCells]'
U32 env___IM_NSMatrix_tabKeyTraversesCells(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMatrix*)_self tabKeyTraversesCells];
    return (U32)_result;
}

// method '-[NSMatrix textDidBeginEditing:]'
void env___IM_NSMatrix_textDidBeginEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSMatrix*)_self textDidBeginEditing:_t1];
}

// method '-[NSMatrix textDidChange:]'
void env___IM_NSMatrix_textDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSMatrix*)_self textDidChange:_t1];
}

// method '-[NSMatrix textDidEndEditing:]'
void env___IM_NSMatrix_textDidEndEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSMatrix*)_self textDidEndEditing:_t1];
}

// method '-[NSMatrix textShouldBeginEditing:]'
U32 env___IM_NSMatrix_textShouldBeginEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(NSMatrix*)_self textShouldBeginEditing:_t1];
    return (U32)_result;
}

// method '-[NSMatrix textShouldEndEditing:]'
U32 env___IM_NSMatrix_textShouldEndEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(NSMatrix*)_self textShouldEndEditing:_t1];
    return (U32)_result;
}

// method '-[NSMatrix toolTipForCell:]'
U32 env___IM_NSMatrix_toolTipForCell_C(void *_instance, U32 _self, U32 cellPointer) {
    id _t1 = (id)cellPointer;
    id _result = (id)[(NSMatrix*)_self toolTipForCell:_t1];
    return (U32)_result;
}

// method '-[NSMenu addItem:]'
void env___IM_NSMenu_addItem_C(void *_instance, U32 _self, U32 newItemPointer) {
    id _t1 = (id)newItemPointer;
    [(NSMenu*)_self addItem:_t1];
}

// method '-[NSMenu addItemWithTitle:action:keyEquivalent:]'
U32 env___IM_NSMenu_addItemWithTitle_Caction_CkeyEquivalent_C(void *_instance, U32 _self, U32 aStringPointer, U32 aSelectorPointer, U32 charCodePointer) {
    id _t1 = (id)aStringPointer;
    SEL _t2 = (SEL)aSelectorPointer;
    id _t3 = (id)charCodePointer;
    id _result = (id)[(NSMenu*)_self addItemWithTitle:_t1 action:_t2 keyEquivalent:_t3];
    return (U32)_result;
}

// method '-[NSMenu attachedMenu]'
U32 env___IM_NSMenu_attachedMenu(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self attachedMenu];
    return (U32)_result;
}

// method '-[NSMenu autoenablesItems]'
U32 env___IM_NSMenu_autoenablesItems(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenu*)_self autoenablesItems];
    return (U32)_result;
}

// method '-[NSMenu contextMenuRepresentation]'
U32 env___IM_NSMenu_contextMenuRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self contextMenuRepresentation];
    return (U32)_result;
}

// method '-[NSMenu delegate]'
U32 env___IM_NSMenu_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self delegate];
    return (U32)_result;
}

// method '-[NSMenu helpRequested:]'
void env___IM_NSMenu_helpRequested_C(void *_instance, U32 _self, U32 eventPtrPointer) {
    id _t1 = (id)eventPtrPointer;
    [(NSMenu*)_self helpRequested:_t1];
}

// method '-[NSMenu indexOfItem:]'
U32 env___IM_NSMenu_indexOfItem_C(void *_instance, U32 _self, U32 indexPointer) {
    id _t1 = (id)indexPointer;
    int _result = (int)[(NSMenu*)_self indexOfItem:_t1];
    return (U32)_result;
}

// method '-[NSMenu indexOfItemWithRepresentedObject:]'
U32 env___IM_NSMenu_indexOfItemWithRepresentedObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    int _result = (int)[(NSMenu*)_self indexOfItemWithRepresentedObject:_t1];
    return (U32)_result;
}

// method '-[NSMenu indexOfItemWithSubmenu:]'
U32 env___IM_NSMenu_indexOfItemWithSubmenu_C(void *_instance, U32 _self, U32 submenuPointer) {
    id _t1 = (id)submenuPointer;
    int _result = (int)[(NSMenu*)_self indexOfItemWithSubmenu:_t1];
    return (U32)_result;
}

// method '-[NSMenu indexOfItemWithTag:]'
U32 env___IM_NSMenu_indexOfItemWithTag_C(void *_instance, U32 _self, U32 aTag) {
    int _result = (int)[(NSMenu*)_self indexOfItemWithTag:aTag];
    return (U32)_result;
}

// method '-[NSMenu indexOfItemWithTarget:andAction:]'
U32 env___IM_NSMenu_indexOfItemWithTarget_CandAction_C(void *_instance, U32 _self, U32 targetPointer, U32 actionSelectorPointer) {
    id _t1 = (id)targetPointer;
    SEL _t2 = (SEL)actionSelectorPointer;
    int _result = (int)[(NSMenu*)_self indexOfItemWithTarget:_t1 andAction:_t2];
    return (U32)_result;
}

// method '-[NSMenu indexOfItemWithTitle:]'
U32 env___IM_NSMenu_indexOfItemWithTitle_C(void *_instance, U32 _self, U32 aTitlePointer) {
    id _t1 = (id)aTitlePointer;
    int _result = (int)[(NSMenu*)_self indexOfItemWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSMenu initWithTitle:]'
U32 env___IM_NSMenu_initWithTitle_C(void *_instance, U32 _self, U32 aTitlePointer) {
    id _t1 = (id)aTitlePointer;
    id _result = (id)[(NSMenu*)_self initWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSMenu insertItem:atIndex:]'
void env___IM_NSMenu_insertItem_CatIndex_C(void *_instance, U32 _self, U32 newItemPointer, U32 index) {
    id _t1 = (id)newItemPointer;
    [(NSMenu*)_self insertItem:_t1 atIndex:index];
}

// method '-[NSMenu insertItemWithTitle:action:keyEquivalent:atIndex:]'
U32 env___IM_NSMenu_insertItemWithTitle_Caction_CkeyEquivalent_CatIndex_C(void *_instance, U32 _self, U32 aStringPointer, U32 aSelectorPointer, U32 charCodePointer, U32 index) {
    id _t1 = (id)aStringPointer;
    SEL _t2 = (SEL)aSelectorPointer;
    id _t3 = (id)charCodePointer;
    id _result = (id)[(NSMenu*)_self insertItemWithTitle:_t1 action:_t2 keyEquivalent:_t3 atIndex:index];
    return (U32)_result;
}

// method '-[NSMenu isAttached]'
U32 env___IM_NSMenu_isAttached(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenu*)_self isAttached];
    return (U32)_result;
}

// method '-[NSMenu isTornOff]'
U32 env___IM_NSMenu_isTornOff(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenu*)_self isTornOff];
    return (U32)_result;
}

// method '-[NSMenu itemArray]'
U32 env___IM_NSMenu_itemArray(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self itemArray];
    return (U32)_result;
}

// method '-[NSMenu itemAtIndex:]'
U32 env___IM_NSMenu_itemAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSMenu*)_self itemAtIndex:index];
    return (U32)_result;
}

// method '-[NSMenu itemChanged:]'
void env___IM_NSMenu_itemChanged_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSMenu*)_self itemChanged:_t1];
}

// method '-[NSMenu itemWithTag:]'
U32 env___IM_NSMenu_itemWithTag_C(void *_instance, U32 _self, U32 tag) {
    id _result = (id)[(NSMenu*)_self itemWithTag:tag];
    return (U32)_result;
}

// method '-[NSMenu itemWithTitle:]'
U32 env___IM_NSMenu_itemWithTitle_C(void *_instance, U32 _self, U32 aTitlePointer) {
    id _t1 = (id)aTitlePointer;
    id _result = (id)[(NSMenu*)_self itemWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSMenu locationForSubmenu:]'
void env___IM_NSMenu_locationForSubmenu_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aSubmenuPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aSubmenuPointer;
    NSPoint _result = (NSPoint)[(NSMenu*)_self locationForSubmenu:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMenu menuBarHeight]'
F32 env___IM_NSMenu_menuBarHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSMenu*)_self menuBarHeight];
    return (F32)_result;
}

// method '+[NSMenu menuBarVisible]'
U32 env___CM_NSMenu_menuBarVisible(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class menuBarVisible];
    return (U32)_result;
}

// method '-[NSMenu menuChangedMessagesEnabled]'
U32 env___IM_NSMenu_menuChangedMessagesEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenu*)_self menuChangedMessagesEnabled];
    return (U32)_result;
}

// method '-[NSMenu menuRepresentation]'
U32 env___IM_NSMenu_menuRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self menuRepresentation];
    return (U32)_result;
}

// method '+[NSMenu menuZone]'
U32 env___CM_NSMenu_menuZone(void *_instance, U32 _class) {
    struct _NSZone* _result = (struct _NSZone*)[(Class)_class menuZone];
    return (U32)_result;
}

// method '-[NSMenu numberOfItems]'
U32 env___IM_NSMenu_numberOfItems(void *_instance, U32 _self) {
    int _result = (int)[(NSMenu*)_self numberOfItems];
    return (U32)_result;
}

// method '-[NSMenu performActionForItemAtIndex:]'
void env___IM_NSMenu_performActionForItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSMenu*)_self performActionForItemAtIndex:index];
}

// method '-[NSMenu performKeyEquivalent:]'
U32 env___IM_NSMenu_performKeyEquivalent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSMenu*)_self performKeyEquivalent:_t1];
    return (U32)_result;
}

// method '+[NSMenu popUpContextMenu:withEvent:forView:]'
void env___CM_NSMenu_popUpContextMenu_CwithEvent_CforView_C(void *_instance, U32 _class, U32 menuPointer, U32 eventPointer, U32 viewPointer) {
    id _t1 = (id)menuPointer;
    id _t2 = (id)eventPointer;
    id _t3 = (id)viewPointer;
    [(Class)_class popUpContextMenu:_t1 withEvent:_t2 forView:_t3];
}

// method '+[NSMenu popUpContextMenu:withEvent:forView:withFont:]'
void env___CM_NSMenu_popUpContextMenu_CwithEvent_CforView_CwithFont_C(void *_instance, U32 _class, U32 menuPointer, U32 eventPointer, U32 viewPointer, U32 fontPointer) {
    id _t1 = (id)menuPointer;
    id _t2 = (id)eventPointer;
    id _t3 = (id)viewPointer;
    id _t4 = (id)fontPointer;
    [(Class)_class popUpContextMenu:_t1 withEvent:_t2 forView:_t3 withFont:_t4];
}

// method '-[NSMenu removeItem:]'
void env___IM_NSMenu_removeItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSMenu*)_self removeItem:_t1];
}

// method '-[NSMenu removeItemAtIndex:]'
void env___IM_NSMenu_removeItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSMenu*)_self removeItemAtIndex:index];
}

// method '-[NSMenu setAutoenablesItems:]'
void env___IM_NSMenu_setAutoenablesItems_C(void *_instance, U32 _self, U32 flag) {
    [(NSMenu*)_self setAutoenablesItems:flag];
}

// method '-[NSMenu setContextMenuRepresentation:]'
void env___IM_NSMenu_setContextMenuRepresentation_C(void *_instance, U32 _self, U32 menuRepPointer) {
    id _t1 = (id)menuRepPointer;
    [(NSMenu*)_self setContextMenuRepresentation:_t1];
}

// method '-[NSMenu setDelegate:]'
void env___IM_NSMenu_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSMenu*)_self setDelegate:_t1];
}

// method '+[NSMenu setMenuBarVisible:]'
void env___CM_NSMenu_setMenuBarVisible_C(void *_instance, U32 _class, U32 visible) {
    [(Class)_class setMenuBarVisible:visible];
}

// method '-[NSMenu setMenuChangedMessagesEnabled:]'
void env___IM_NSMenu_setMenuChangedMessagesEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSMenu*)_self setMenuChangedMessagesEnabled:flag];
}

// method '-[NSMenu setMenuRepresentation:]'
void env___IM_NSMenu_setMenuRepresentation_C(void *_instance, U32 _self, U32 menuRepPointer) {
    id _t1 = (id)menuRepPointer;
    [(NSMenu*)_self setMenuRepresentation:_t1];
}

// method '+[NSMenu setMenuZone:]'
void env___CM_NSMenu_setMenuZone_C(void *_instance, U32 _class, U32 aZonePointer) {
    struct _NSZone* _t1 = (struct _NSZone*)aZonePointer;
    [(Class)_class setMenuZone:_t1];
}

// method '-[NSMenu setSubmenu:forItem:]'
void env___IM_NSMenu_setSubmenu_CforItem_C(void *_instance, U32 _self, U32 aMenuPointer, U32 anItemPointer) {
    id _t1 = (id)aMenuPointer;
    id _t2 = (id)anItemPointer;
    [(NSMenu*)_self setSubmenu:_t1 forItem:_t2];
}

// method '-[NSMenu setSupermenu:]'
void env___IM_NSMenu_setSupermenu_C(void *_instance, U32 _self, U32 supermenuPointer) {
    id _t1 = (id)supermenuPointer;
    [(NSMenu*)_self setSupermenu:_t1];
}

// method '-[NSMenu setTearOffMenuRepresentation:]'
void env___IM_NSMenu_setTearOffMenuRepresentation_C(void *_instance, U32 _self, U32 menuRepPointer) {
    id _t1 = (id)menuRepPointer;
    [(NSMenu*)_self setTearOffMenuRepresentation:_t1];
}

// method '-[NSMenu setTitle:]'
void env___IM_NSMenu_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSMenu*)_self setTitle:_t1];
}

// method '-[NSMenu sizeToFit]'
void env___IM_NSMenu_sizeToFit(void *_instance, U32 _self) {
    [(NSMenu*)_self sizeToFit];
}

// method '-[NSMenu submenuAction:]'
void env___IM_NSMenu_submenuAction_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMenu*)_self submenuAction:_t1];
}

// method '-[NSMenu supermenu]'
U32 env___IM_NSMenu_supermenu(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self supermenu];
    return (U32)_result;
}

// method '-[NSMenu tearOffMenuRepresentation]'
U32 env___IM_NSMenu_tearOffMenuRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self tearOffMenuRepresentation];
    return (U32)_result;
}

// method '-[NSMenu title]'
U32 env___IM_NSMenu_title(void *_instance, U32 _self) {
    id _result = (id)[(NSMenu*)_self title];
    return (U32)_result;
}

// method '-[NSMenu update]'
void env___IM_NSMenu_update(void *_instance, U32 _self) {
    [(NSMenu*)_self update];
}

// method '-[NSMenuItem action]'
U32 env___IM_NSMenuItem_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSMenuItem*)_self action];
    return (U32)_result;
}

// method '-[NSMenuItem attributedTitle]'
U32 env___IM_NSMenuItem_attributedTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self attributedTitle];
    return (U32)_result;
}

// method '-[NSMenuItem hasSubmenu]'
U32 env___IM_NSMenuItem_hasSubmenu(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItem*)_self hasSubmenu];
    return (U32)_result;
}

// method '-[NSMenuItem image]'
U32 env___IM_NSMenuItem_image(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self image];
    return (U32)_result;
}

// method '-[NSMenuItem indentationLevel]'
U32 env___IM_NSMenuItem_indentationLevel(void *_instance, U32 _self) {
    int _result = (int)[(NSMenuItem*)_self indentationLevel];
    return (U32)_result;
}

// method '-[NSMenuItem initWithTitle:action:keyEquivalent:]'
U32 env___IM_NSMenuItem_initWithTitle_Caction_CkeyEquivalent_C(void *_instance, U32 _self, U32 aStringPointer, U32 aSelectorPointer, U32 charCodePointer) {
    id _t1 = (id)aStringPointer;
    SEL _t2 = (SEL)aSelectorPointer;
    id _t3 = (id)charCodePointer;
    id _result = (id)[(NSMenuItem*)_self initWithTitle:_t1 action:_t2 keyEquivalent:_t3];
    return (U32)_result;
}

// method '-[NSMenuItem isAlternate]'
U32 env___IM_NSMenuItem_isAlternate(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItem*)_self isAlternate];
    return (U32)_result;
}

// method '-[NSMenuItem isEnabled]'
U32 env___IM_NSMenuItem_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItem*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSMenuItem isSeparatorItem]'
U32 env___IM_NSMenuItem_isSeparatorItem(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItem*)_self isSeparatorItem];
    return (U32)_result;
}

// method '-[NSMenuItem keyEquivalent]'
U32 env___IM_NSMenuItem_keyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self keyEquivalent];
    return (U32)_result;
}

// method '-[NSMenuItem keyEquivalentModifierMask]'
U32 env___IM_NSMenuItem_keyEquivalentModifierMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSMenuItem*)_self keyEquivalentModifierMask];
    return (U32)_result;
}

// method '-[NSMenuItem menu]'
U32 env___IM_NSMenuItem_menu(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self menu];
    return (U32)_result;
}

// method '-[NSMenuItem mixedStateImage]'
U32 env___IM_NSMenuItem_mixedStateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self mixedStateImage];
    return (U32)_result;
}

// method '-[NSMenuItem mnemonic]'
U32 env___IM_NSMenuItem_mnemonic(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self mnemonic];
    return (U32)_result;
}

// method '-[NSMenuItem mnemonicLocation]'
U32 env___IM_NSMenuItem_mnemonicLocation(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSMenuItem*)_self mnemonicLocation];
    return (U32)_result;
}

// method '-[NSMenuItem offStateImage]'
U32 env___IM_NSMenuItem_offStateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self offStateImage];
    return (U32)_result;
}

// method '-[NSMenuItem onStateImage]'
U32 env___IM_NSMenuItem_onStateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self onStateImage];
    return (U32)_result;
}

// method '-[NSMenuItem representedObject]'
U32 env___IM_NSMenuItem_representedObject(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self representedObject];
    return (U32)_result;
}

// method '+[NSMenuItem separatorItem]'
U32 env___CM_NSMenuItem_separatorItem(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class separatorItem];
    return (U32)_result;
}

// method '-[NSMenuItem setAction:]'
void env___IM_NSMenuItem_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSMenuItem*)_self setAction:_t1];
}

// method '-[NSMenuItem setAlternate:]'
void env___IM_NSMenuItem_setAlternate_C(void *_instance, U32 _self, U32 isAlternate) {
    [(NSMenuItem*)_self setAlternate:isAlternate];
}

// method '-[NSMenuItem setAttributedTitle:]'
void env___IM_NSMenuItem_setAttributedTitle_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSMenuItem*)_self setAttributedTitle:_t1];
}

// method '-[NSMenuItem setEnabled:]'
void env___IM_NSMenuItem_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSMenuItem*)_self setEnabled:flag];
}

// method '-[NSMenuItem setImage:]'
void env___IM_NSMenuItem_setImage_C(void *_instance, U32 _self, U32 menuImagePointer) {
    id _t1 = (id)menuImagePointer;
    [(NSMenuItem*)_self setImage:_t1];
}

// method '-[NSMenuItem setIndentationLevel:]'
void env___IM_NSMenuItem_setIndentationLevel_C(void *_instance, U32 _self, U32 indentationLevel) {
    [(NSMenuItem*)_self setIndentationLevel:indentationLevel];
}

// method '-[NSMenuItem setKeyEquivalent:]'
void env___IM_NSMenuItem_setKeyEquivalent_C(void *_instance, U32 _self, U32 aKeyEquivalentPointer) {
    id _t1 = (id)aKeyEquivalentPointer;
    [(NSMenuItem*)_self setKeyEquivalent:_t1];
}

// method '-[NSMenuItem setKeyEquivalentModifierMask:]'
void env___IM_NSMenuItem_setKeyEquivalentModifierMask_C(void *_instance, U32 _self, U32 mask) {
    [(NSMenuItem*)_self setKeyEquivalentModifierMask:mask];
}

// method '-[NSMenuItem setMenu:]'
void env___IM_NSMenuItem_setMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSMenuItem*)_self setMenu:_t1];
}

// method '-[NSMenuItem setMixedStateImage:]'
void env___IM_NSMenuItem_setMixedStateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSMenuItem*)_self setMixedStateImage:_t1];
}

// method '-[NSMenuItem setMnemonicLocation:]'
void env___IM_NSMenuItem_setMnemonicLocation_C(void *_instance, U32 _self, U32 location) {
    [(NSMenuItem*)_self setMnemonicLocation:location];
}

// method '-[NSMenuItem setOffStateImage:]'
void env___IM_NSMenuItem_setOffStateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSMenuItem*)_self setOffStateImage:_t1];
}

// method '-[NSMenuItem setOnStateImage:]'
void env___IM_NSMenuItem_setOnStateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSMenuItem*)_self setOnStateImage:_t1];
}

// method '-[NSMenuItem setRepresentedObject:]'
void env___IM_NSMenuItem_setRepresentedObject_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSMenuItem*)_self setRepresentedObject:_t1];
}

// method '-[NSMenuItem setState:]'
void env___IM_NSMenuItem_setState_C(void *_instance, U32 _self, U32 state) {
    [(NSMenuItem*)_self setState:state];
}

// method '-[NSMenuItem setSubmenu:]'
void env___IM_NSMenuItem_setSubmenu_C(void *_instance, U32 _self, U32 submenuPointer) {
    id _t1 = (id)submenuPointer;
    [(NSMenuItem*)_self setSubmenu:_t1];
}

// method '-[NSMenuItem setTag:]'
void env___IM_NSMenuItem_setTag_C(void *_instance, U32 _self, U32 anInt) {
    [(NSMenuItem*)_self setTag:anInt];
}

// method '-[NSMenuItem setTarget:]'
void env___IM_NSMenuItem_setTarget_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSMenuItem*)_self setTarget:_t1];
}

// method '-[NSMenuItem setTitle:]'
void env___IM_NSMenuItem_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSMenuItem*)_self setTitle:_t1];
}

// method '-[NSMenuItem setTitleWithMnemonic:]'
void env___IM_NSMenuItem_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSMenuItem*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSMenuItem setToolTip:]'
void env___IM_NSMenuItem_setToolTip_C(void *_instance, U32 _self, U32 toolTipPointer) {
    id _t1 = (id)toolTipPointer;
    [(NSMenuItem*)_self setToolTip:_t1];
}

// method '+[NSMenuItem setUsesUserKeyEquivalents:]'
void env___CM_NSMenuItem_setUsesUserKeyEquivalents_C(void *_instance, U32 _class, U32 flag) {
    [(Class)_class setUsesUserKeyEquivalents:flag];
}

// method '-[NSMenuItem state]'
U32 env___IM_NSMenuItem_state(void *_instance, U32 _self) {
    int _result = (int)[(NSMenuItem*)_self state];
    return (U32)_result;
}

// method '-[NSMenuItem submenu]'
U32 env___IM_NSMenuItem_submenu(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self submenu];
    return (U32)_result;
}

// method '-[NSMenuItem tag]'
U32 env___IM_NSMenuItem_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSMenuItem*)_self tag];
    return (U32)_result;
}

// method '-[NSMenuItem target]'
U32 env___IM_NSMenuItem_target(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self target];
    return (U32)_result;
}

// method '-[NSMenuItem title]'
U32 env___IM_NSMenuItem_title(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self title];
    return (U32)_result;
}

// method '-[NSMenuItem toolTip]'
U32 env___IM_NSMenuItem_toolTip(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self toolTip];
    return (U32)_result;
}

// method '-[NSMenuItem userKeyEquivalent]'
U32 env___IM_NSMenuItem_userKeyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItem*)_self userKeyEquivalent];
    return (U32)_result;
}

// method '+[NSMenuItem usesUserKeyEquivalents]'
U32 env___CM_NSMenuItem_usesUserKeyEquivalents(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class usesUserKeyEquivalents];
    return (U32)_result;
}

// method '-[NSMenuItemCell calcSize]'
void env___IM_NSMenuItemCell_calcSize(void *_instance, U32 _self) {
    [(NSMenuItemCell*)_self calcSize];
}

// method '-[NSMenuItemCell drawBorderAndBackgroundWithFrame:inView:]'
void env___IM_NSMenuItemCell_drawBorderAndBackgroundWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSMenuItemCell*)_self drawBorderAndBackgroundWithFrame:_t1 inView:_t2];
}

// method '-[NSMenuItemCell drawImageWithFrame:inView:]'
void env___IM_NSMenuItemCell_drawImageWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSMenuItemCell*)_self drawImageWithFrame:_t1 inView:_t2];
}

// method '-[NSMenuItemCell drawKeyEquivalentWithFrame:inView:]'
void env___IM_NSMenuItemCell_drawKeyEquivalentWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSMenuItemCell*)_self drawKeyEquivalentWithFrame:_t1 inView:_t2];
}

// method '-[NSMenuItemCell drawSeparatorItemWithFrame:inView:]'
void env___IM_NSMenuItemCell_drawSeparatorItemWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSMenuItemCell*)_self drawSeparatorItemWithFrame:_t1 inView:_t2];
}

// method '-[NSMenuItemCell drawStateImageWithFrame:inView:]'
void env___IM_NSMenuItemCell_drawStateImageWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSMenuItemCell*)_self drawStateImageWithFrame:_t1 inView:_t2];
}

// method '-[NSMenuItemCell drawTitleWithFrame:inView:]'
void env___IM_NSMenuItemCell_drawTitleWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSMenuItemCell*)_self drawTitleWithFrame:_t1 inView:_t2];
}

// method '-[NSMenuItemCell imageRectForBounds:]'
void env___IM_NSMenuItemCell_imageRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 cellFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSMenuItemCell*)_self imageRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMenuItemCell imageWidth]'
F32 env___IM_NSMenuItemCell_imageWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSMenuItemCell*)_self imageWidth];
    return (F32)_result;
}

// method '-[NSMenuItemCell isHighlighted]'
U32 env___IM_NSMenuItemCell_isHighlighted(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItemCell*)_self isHighlighted];
    return (U32)_result;
}

// method '-[NSMenuItemCell keyEquivalentRectForBounds:]'
void env___IM_NSMenuItemCell_keyEquivalentRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 cellFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSMenuItemCell*)_self keyEquivalentRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMenuItemCell keyEquivalentWidth]'
F32 env___IM_NSMenuItemCell_keyEquivalentWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSMenuItemCell*)_self keyEquivalentWidth];
    return (F32)_result;
}

// method '-[NSMenuItemCell menuItem]'
U32 env___IM_NSMenuItemCell_menuItem(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItemCell*)_self menuItem];
    return (U32)_result;
}

// method '-[NSMenuItemCell menuView]'
U32 env___IM_NSMenuItemCell_menuView(void *_instance, U32 _self) {
    id _result = (id)[(NSMenuItemCell*)_self menuView];
    return (U32)_result;
}

// method '-[NSMenuItemCell needsDisplay]'
U32 env___IM_NSMenuItemCell_needsDisplay(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItemCell*)_self needsDisplay];
    return (U32)_result;
}

// method '-[NSMenuItemCell needsSizing]'
U32 env___IM_NSMenuItemCell_needsSizing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMenuItemCell*)_self needsSizing];
    return (U32)_result;
}

// method '-[NSMenuItemCell setHighlighted:]'
void env___IM_NSMenuItemCell_setHighlighted_C(void *_instance, U32 _self, U32 flag) {
    [(NSMenuItemCell*)_self setHighlighted:flag];
}

// method '-[NSMenuItemCell setMenuItem:]'
void env___IM_NSMenuItemCell_setMenuItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSMenuItemCell*)_self setMenuItem:_t1];
}

// method '-[NSMenuItemCell setMenuView:]'
void env___IM_NSMenuItemCell_setMenuView_C(void *_instance, U32 _self, U32 menuViewPointer) {
    id _t1 = (id)menuViewPointer;
    [(NSMenuItemCell*)_self setMenuView:_t1];
}

// method '-[NSMenuItemCell setNeedsDisplay:]'
void env___IM_NSMenuItemCell_setNeedsDisplay_C(void *_instance, U32 _self, U32 flag) {
    [(NSMenuItemCell*)_self setNeedsDisplay:flag];
}

// method '-[NSMenuItemCell setNeedsSizing:]'
void env___IM_NSMenuItemCell_setNeedsSizing_C(void *_instance, U32 _self, U32 flag) {
    [(NSMenuItemCell*)_self setNeedsSizing:flag];
}

// method '-[NSMenuItemCell stateImageRectForBounds:]'
void env___IM_NSMenuItemCell_stateImageRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 cellFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSMenuItemCell*)_self stateImageRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMenuItemCell stateImageWidth]'
F32 env___IM_NSMenuItemCell_stateImageWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSMenuItemCell*)_self stateImageWidth];
    return (F32)_result;
}

// method '-[NSMenuItemCell tag]'
U32 env___IM_NSMenuItemCell_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSMenuItemCell*)_self tag];
    return (U32)_result;
}

// method '-[NSMenuItemCell titleRectForBounds:]'
void env___IM_NSMenuItemCell_titleRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 cellFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSMenuItemCell*)_self titleRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMenuItemCell titleWidth]'
F32 env___IM_NSMenuItemCell_titleWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSMenuItemCell*)_self titleWidth];
    return (F32)_result;
}

// method '-[NSMovieView clear:]'
void env___IM_NSMovieView_clear_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self clear:_t1];
}

// method '-[NSMovieView copy:]'
void env___IM_NSMovieView_copy_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self copy:_t1];
}

// method '-[NSMovieView cut:]'
void env___IM_NSMovieView_cut_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self cut:_t1];
}

// method '-[NSMovieView delete:]'
void env___IM_NSMovieView_delete_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self delete:_t1];
}

// method '-[NSMovieView gotoBeginning:]'
void env___IM_NSMovieView_gotoBeginning_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self gotoBeginning:_t1];
}

// method '-[NSMovieView gotoEnd:]'
void env___IM_NSMovieView_gotoEnd_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self gotoEnd:_t1];
}

// method '-[NSMovieView gotoPosterFrame:]'
void env___IM_NSMovieView_gotoPosterFrame_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self gotoPosterFrame:_t1];
}

// method '-[NSMovieView isControllerVisible]'
U32 env___IM_NSMovieView_isControllerVisible(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMovieView*)_self isControllerVisible];
    return (U32)_result;
}

// method '-[NSMovieView isEditable]'
U32 env___IM_NSMovieView_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMovieView*)_self isEditable];
    return (U32)_result;
}

// method '-[NSMovieView isMuted]'
U32 env___IM_NSMovieView_isMuted(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMovieView*)_self isMuted];
    return (U32)_result;
}

// method '-[NSMovieView isPlaying]'
U32 env___IM_NSMovieView_isPlaying(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMovieView*)_self isPlaying];
    return (U32)_result;
}

// method '-[NSMovieView loopMode]'
U32 env___IM_NSMovieView_loopMode(void *_instance, U32 _self) {
    int _result = (int)[(NSMovieView*)_self loopMode];
    return (U32)_result;
}

// method '-[NSMovieView movie]'
U32 env___IM_NSMovieView_movie(void *_instance, U32 _self) {
    id _result = (id)[(NSMovieView*)_self movie];
    return (U32)_result;
}

// method '-[NSMovieView movieController]'
U32 env___IM_NSMovieView_movieController(void *_instance, U32 _self) {
    void* _result = (void*)[(NSMovieView*)_self movieController];
    return (U32)_result;
}

// method '-[NSMovieView movieRect]'
void env___IM_NSMovieView_movieRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSMovieView*)_self movieRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMovieView paste:]'
void env___IM_NSMovieView_paste_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self paste:_t1];
}

// method '-[NSMovieView playsEveryFrame]'
U32 env___IM_NSMovieView_playsEveryFrame(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMovieView*)_self playsEveryFrame];
    return (U32)_result;
}

// method '-[NSMovieView playsSelectionOnly]'
U32 env___IM_NSMovieView_playsSelectionOnly(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSMovieView*)_self playsSelectionOnly];
    return (U32)_result;
}

// method '-[NSMovieView rate]'
F32 env___IM_NSMovieView_rate(void *_instance, U32 _self) {
    float _result = (float)[(NSMovieView*)_self rate];
    return (F32)_result;
}

// method '-[NSMovieView resizeWithMagnification:]'
void env___IM_NSMovieView_resizeWithMagnification_C(void *_instance, U32 _self, F32 magnification) {
    [(NSMovieView*)_self resizeWithMagnification:magnification];
}

// method '-[NSMovieView selectAll:]'
void env___IM_NSMovieView_selectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self selectAll:_t1];
}

// method '-[NSMovieView setEditable:]'
void env___IM_NSMovieView_setEditable_C(void *_instance, U32 _self, U32 editable) {
    [(NSMovieView*)_self setEditable:editable];
}

// method '-[NSMovieView setLoopMode:]'
void env___IM_NSMovieView_setLoopMode_C(void *_instance, U32 _self, U32 mode) {
    [(NSMovieView*)_self setLoopMode:mode];
}

// method '-[NSMovieView setMovie:]'
void env___IM_NSMovieView_setMovie_C(void *_instance, U32 _self, U32 moviePointer) {
    id _t1 = (id)moviePointer;
    [(NSMovieView*)_self setMovie:_t1];
}

// method '-[NSMovieView setMuted:]'
void env___IM_NSMovieView_setMuted_C(void *_instance, U32 _self, U32 mute) {
    [(NSMovieView*)_self setMuted:mute];
}

// method '-[NSMovieView setPlaysEveryFrame:]'
void env___IM_NSMovieView_setPlaysEveryFrame_C(void *_instance, U32 _self, U32 flag) {
    [(NSMovieView*)_self setPlaysEveryFrame:flag];
}

// method '-[NSMovieView setPlaysSelectionOnly:]'
void env___IM_NSMovieView_setPlaysSelectionOnly_C(void *_instance, U32 _self, U32 flag) {
    [(NSMovieView*)_self setPlaysSelectionOnly:flag];
}

// method '-[NSMovieView setRate:]'
void env___IM_NSMovieView_setRate_C(void *_instance, U32 _self, F32 rate) {
    [(NSMovieView*)_self setRate:rate];
}

// method '-[NSMovieView setVolume:]'
void env___IM_NSMovieView_setVolume_C(void *_instance, U32 _self, F32 volume) {
    [(NSMovieView*)_self setVolume:volume];
}

// method '-[NSMovieView showController:adjustingSize:]'
void env___IM_NSMovieView_showController_CadjustingSize_C(void *_instance, U32 _self, U32 show, U32 adjustSize) {
    [(NSMovieView*)_self showController:show adjustingSize:adjustSize];
}

// method '-[NSMovieView sizeForMagnification:]'
void env___IM_NSMovieView_sizeForMagnification_C(void *_instance, U32 _resultIndirect, U32 _self, F32 magnification) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSMovieView*)_self sizeForMagnification:magnification];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSMovieView start:]'
void env___IM_NSMovieView_start_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self start:_t1];
}

// method '-[NSMovieView stepBack:]'
void env___IM_NSMovieView_stepBack_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self stepBack:_t1];
}

// method '-[NSMovieView stepForward:]'
void env___IM_NSMovieView_stepForward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self stepForward:_t1];
}

// method '-[NSMovieView stop:]'
void env___IM_NSMovieView_stop_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSMovieView*)_self stop:_t1];
}

// method '-[NSMovieView volume]'
F32 env___IM_NSMovieView_volume(void *_instance, U32 _self) {
    float _result = (float)[(NSMovieView*)_self volume];
    return (F32)_result;
}

// method '-[NSMutableAttributedString applyFontTraits:range:]'
void env___IM_NSMutableAttributedString_applyFontTraits_Crange_C(void *_instance, U32 _self, U32 traitMask, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self applyFontTraits:traitMask range:_t1];
}

// method '-[NSMutableAttributedString fixAttachmentAttributeInRange:]'
void env___IM_NSMutableAttributedString_fixAttachmentAttributeInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self fixAttachmentAttributeInRange:_t1];
}

// method '-[NSMutableAttributedString fixAttributesInRange:]'
void env___IM_NSMutableAttributedString_fixAttributesInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self fixAttributesInRange:_t1];
}

// method '-[NSMutableAttributedString fixFontAttributeInRange:]'
void env___IM_NSMutableAttributedString_fixFontAttributeInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self fixFontAttributeInRange:_t1];
}

// method '-[NSMutableAttributedString fixParagraphStyleAttributeInRange:]'
void env___IM_NSMutableAttributedString_fixParagraphStyleAttributeInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self fixParagraphStyleAttributeInRange:_t1];
}

// method '-[NSMutableAttributedString readFromData:options:documentAttributes:]'
U32 env___IM_NSMutableAttributedString_readFromData_Coptions_CdocumentAttributes_C(void *_instance, U32 _self, U32 dataPointer, U32 optionsPointer, U32 dictPointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)optionsPointer;
    id* _t3 = (id*)dictPointer;
    BOOL _result = (BOOL)[(NSMutableAttributedString*)_self readFromData:_t1 options:_t2 documentAttributes:_t3];
    return (U32)_result;
}

// method '-[NSMutableAttributedString readFromData:options:documentAttributes:error:]'
U32 env___IM_NSMutableAttributedString_readFromData_Coptions_CdocumentAttributes_Cerror_C(void *_instance, U32 _self, U32 dataPointer, U32 optsPointer, U32 dictPointer, U32 errorPointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)optsPointer;
    id* _t3 = (id*)dictPointer;
    id* _t4 = (id*)errorPointer;
    BOOL _result = (BOOL)[(NSMutableAttributedString*)_self readFromData:_t1 options:_t2 documentAttributes:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSMutableAttributedString readFromURL:options:documentAttributes:]'
U32 env___IM_NSMutableAttributedString_readFromURL_Coptions_CdocumentAttributes_C(void *_instance, U32 _self, U32 urlPointer, U32 optionsPointer, U32 dictPointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)optionsPointer;
    id* _t3 = (id*)dictPointer;
    BOOL _result = (BOOL)[(NSMutableAttributedString*)_self readFromURL:_t1 options:_t2 documentAttributes:_t3];
    return (U32)_result;
}

// method '-[NSMutableAttributedString readFromURL:options:documentAttributes:error:]'
U32 env___IM_NSMutableAttributedString_readFromURL_Coptions_CdocumentAttributes_Cerror_C(void *_instance, U32 _self, U32 urlPointer, U32 optsPointer, U32 dictPointer, U32 errorPointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)optsPointer;
    id* _t3 = (id*)dictPointer;
    id* _t4 = (id*)errorPointer;
    BOOL _result = (BOOL)[(NSMutableAttributedString*)_self readFromURL:_t1 options:_t2 documentAttributes:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSMutableAttributedString setAlignment:range:]'
void env___IM_NSMutableAttributedString_setAlignment_Crange_C(void *_instance, U32 _self, U32 alignment, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self setAlignment:alignment range:_t1];
}

// method '-[NSMutableAttributedString setBaseWritingDirection:range:]'
void env___IM_NSMutableAttributedString_setBaseWritingDirection_Crange_C(void *_instance, U32 _self, U32 writingDirection, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self setBaseWritingDirection:writingDirection range:_t1];
}

// method '-[NSMutableAttributedString subscriptRange:]'
void env___IM_NSMutableAttributedString_subscriptRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self subscriptRange:_t1];
}

// method '-[NSMutableAttributedString superscriptRange:]'
void env___IM_NSMutableAttributedString_superscriptRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self superscriptRange:_t1];
}

// method '-[NSMutableAttributedString unscriptRange:]'
void env___IM_NSMutableAttributedString_unscriptRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSMutableAttributedString*)_self unscriptRange:_t1];
}

// method '-[NSMutableAttributedString updateAttachmentsFromPath:]'
void env___IM_NSMutableAttributedString_updateAttachmentsFromPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    [(NSMutableAttributedString*)_self updateAttachmentsFromPath:_t1];
}

// method '-[NSMutableParagraphStyle addTabStop:]'
void env___IM_NSMutableParagraphStyle_addTabStop_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSMutableParagraphStyle*)_self addTabStop:_t1];
}

// method '-[NSMutableParagraphStyle removeTabStop:]'
void env___IM_NSMutableParagraphStyle_removeTabStop_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSMutableParagraphStyle*)_self removeTabStop:_t1];
}

// method '-[NSMutableParagraphStyle setAlignment:]'
void env___IM_NSMutableParagraphStyle_setAlignment_C(void *_instance, U32 _self, U32 alignment) {
    [(NSMutableParagraphStyle*)_self setAlignment:alignment];
}

// method '-[NSMutableParagraphStyle setBaseWritingDirection:]'
void env___IM_NSMutableParagraphStyle_setBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSMutableParagraphStyle*)_self setBaseWritingDirection:writingDirection];
}

// method '-[NSMutableParagraphStyle setDefaultTabInterval:]'
void env___IM_NSMutableParagraphStyle_setDefaultTabInterval_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setDefaultTabInterval:aFloat];
}

// method '-[NSMutableParagraphStyle setFirstLineHeadIndent:]'
void env___IM_NSMutableParagraphStyle_setFirstLineHeadIndent_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setFirstLineHeadIndent:aFloat];
}

// method '-[NSMutableParagraphStyle setHeadIndent:]'
void env___IM_NSMutableParagraphStyle_setHeadIndent_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setHeadIndent:aFloat];
}

// method '-[NSMutableParagraphStyle setHeaderLevel:]'
void env___IM_NSMutableParagraphStyle_setHeaderLevel_C(void *_instance, U32 _self, U32 level) {
    [(NSMutableParagraphStyle*)_self setHeaderLevel:level];
}

// method '-[NSMutableParagraphStyle setHyphenationFactor:]'
void env___IM_NSMutableParagraphStyle_setHyphenationFactor_C(void *_instance, U32 _self, F32 aFactor) {
    [(NSMutableParagraphStyle*)_self setHyphenationFactor:aFactor];
}

// method '-[NSMutableParagraphStyle setLineBreakMode:]'
void env___IM_NSMutableParagraphStyle_setLineBreakMode_C(void *_instance, U32 _self, U32 mode) {
    [(NSMutableParagraphStyle*)_self setLineBreakMode:mode];
}

// method '-[NSMutableParagraphStyle setLineHeightMultiple:]'
void env___IM_NSMutableParagraphStyle_setLineHeightMultiple_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setLineHeightMultiple:aFloat];
}

// method '-[NSMutableParagraphStyle setLineSpacing:]'
void env___IM_NSMutableParagraphStyle_setLineSpacing_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setLineSpacing:aFloat];
}

// method '-[NSMutableParagraphStyle setMaximumLineHeight:]'
void env___IM_NSMutableParagraphStyle_setMaximumLineHeight_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setMaximumLineHeight:aFloat];
}

// method '-[NSMutableParagraphStyle setMinimumLineHeight:]'
void env___IM_NSMutableParagraphStyle_setMinimumLineHeight_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setMinimumLineHeight:aFloat];
}

// method '-[NSMutableParagraphStyle setParagraphSpacing:]'
void env___IM_NSMutableParagraphStyle_setParagraphSpacing_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setParagraphSpacing:aFloat];
}

// method '-[NSMutableParagraphStyle setParagraphSpacingBefore:]'
void env___IM_NSMutableParagraphStyle_setParagraphSpacingBefore_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setParagraphSpacingBefore:aFloat];
}

// method '-[NSMutableParagraphStyle setParagraphStyle:]'
void env___IM_NSMutableParagraphStyle_setParagraphStyle_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSMutableParagraphStyle*)_self setParagraphStyle:_t1];
}

// method '-[NSMutableParagraphStyle setTabStops:]'
void env___IM_NSMutableParagraphStyle_setTabStops_C(void *_instance, U32 _self, U32 arrayPointer) {
    id _t1 = (id)arrayPointer;
    [(NSMutableParagraphStyle*)_self setTabStops:_t1];
}

// method '-[NSMutableParagraphStyle setTailIndent:]'
void env___IM_NSMutableParagraphStyle_setTailIndent_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSMutableParagraphStyle*)_self setTailIndent:aFloat];
}

// method '-[NSMutableParagraphStyle setTextBlocks:]'
void env___IM_NSMutableParagraphStyle_setTextBlocks_C(void *_instance, U32 _self, U32 arrayPointer) {
    id _t1 = (id)arrayPointer;
    [(NSMutableParagraphStyle*)_self setTextBlocks:_t1];
}

// method '-[NSMutableParagraphStyle setTextLists:]'
void env___IM_NSMutableParagraphStyle_setTextLists_C(void *_instance, U32 _self, U32 arrayPointer) {
    id _t1 = (id)arrayPointer;
    [(NSMutableParagraphStyle*)_self setTextLists:_t1];
}

// method '-[NSMutableParagraphStyle setTighteningFactorForTruncation:]'
void env___IM_NSMutableParagraphStyle_setTighteningFactorForTruncation_C(void *_instance, U32 _self, F32 aFactor) {
    [(NSMutableParagraphStyle*)_self setTighteningFactorForTruncation:aFactor];
}

// method '-[NSNib initWithContentsOfURL:]'
U32 env___IM_NSNib_initWithContentsOfURL_C(void *_instance, U32 _self, U32 nibFileURLPointer) {
    id _t1 = (id)nibFileURLPointer;
    id _result = (id)[(NSNib*)_self initWithContentsOfURL:_t1];
    return (U32)_result;
}

// method '-[NSNib initWithNibNamed:bundle:]'
U32 env___IM_NSNib_initWithNibNamed_Cbundle_C(void *_instance, U32 _self, U32 nibNamePointer, U32 bundlePointer) {
    id _t1 = (id)nibNamePointer;
    id _t2 = (id)bundlePointer;
    id _result = (id)[(NSNib*)_self initWithNibNamed:_t1 bundle:_t2];
    return (U32)_result;
}

// method '-[NSNib instantiateNibWithExternalNameTable:]'
U32 env___IM_NSNib_instantiateNibWithExternalNameTable_C(void *_instance, U32 _self, U32 externalNameTablePointer) {
    id _t1 = (id)externalNameTablePointer;
    BOOL _result = (BOOL)[(NSNib*)_self instantiateNibWithExternalNameTable:_t1];
    return (U32)_result;
}

// method '-[NSNib instantiateNibWithOwner:topLevelObjects:]'
U32 env___IM_NSNib_instantiateNibWithOwner_CtopLevelObjects_C(void *_instance, U32 _self, U32 ownerPointer, U32 topLevelObjectsPointer) {
    id _t1 = (id)ownerPointer;
    id* _t2 = (id*)topLevelObjectsPointer;
    BOOL _result = (BOOL)[(NSNib*)_self instantiateNibWithOwner:_t1 topLevelObjects:_t2];
    return (U32)_result;
}

// method '-[NSNibConnector destination]'
U32 env___IM_NSNibConnector_destination(void *_instance, U32 _self) {
    id _result = (id)[(NSNibConnector*)_self destination];
    return (U32)_result;
}

// method '-[NSNibConnector establishConnection]'
void env___IM_NSNibConnector_establishConnection(void *_instance, U32 _self) {
    [(NSNibConnector*)_self establishConnection];
}

// method '-[NSNibConnector label]'
U32 env___IM_NSNibConnector_label(void *_instance, U32 _self) {
    id _result = (id)[(NSNibConnector*)_self label];
    return (U32)_result;
}

// method '-[NSNibConnector replaceObject:withObject:]'
void env___IM_NSNibConnector_replaceObject_CwithObject_C(void *_instance, U32 _self, U32 oldObjectPointer, U32 newObjectPointer) {
    id _t1 = (id)oldObjectPointer;
    id _t2 = (id)newObjectPointer;
    [(NSNibConnector*)_self replaceObject:_t1 withObject:_t2];
}

// method '-[NSNibConnector setDestination:]'
void env___IM_NSNibConnector_setDestination_C(void *_instance, U32 _self, U32 destinationPointer) {
    id _t1 = (id)destinationPointer;
    [(NSNibConnector*)_self setDestination:_t1];
}

// method '-[NSNibConnector setLabel:]'
void env___IM_NSNibConnector_setLabel_C(void *_instance, U32 _self, U32 labelPointer) {
    id _t1 = (id)labelPointer;
    [(NSNibConnector*)_self setLabel:_t1];
}

// method '-[NSNibConnector setSource:]'
void env___IM_NSNibConnector_setSource_C(void *_instance, U32 _self, U32 sourcePointer) {
    id _t1 = (id)sourcePointer;
    [(NSNibConnector*)_self setSource:_t1];
}

// method '-[NSNibConnector source]'
U32 env___IM_NSNibConnector_source(void *_instance, U32 _self) {
    id _result = (id)[(NSNibConnector*)_self source];
    return (U32)_result;
}

// method '-[NSNibControlConnector establishConnection]'
void env___IM_NSNibControlConnector_establishConnection(void *_instance, U32 _self) {
    [(NSNibControlConnector*)_self establishConnection];
}

// method '-[NSNibOutletConnector establishConnection]'
void env___IM_NSNibOutletConnector_establishConnection(void *_instance, U32 _self) {
    [(NSNibOutletConnector*)_self establishConnection];
}

// method '-[NSObject accessibilityActionDescription:]'
U32 env___IM_NSObject_accessibilityActionDescription_C(void *_instance, U32 _self, U32 actionPointer) {
    id _t1 = (id)actionPointer;
    id _result = (id)[(id)_self accessibilityActionDescription:_t1];
    return (U32)_result;
}

// method '-[NSObject accessibilityActionNames]'
U32 env___IM_NSObject_accessibilityActionNames(void *_instance, U32 _self) {
    id _result = (id)[(id)_self accessibilityActionNames];
    return (U32)_result;
}

// method '-[NSObject accessibilityAttributeNames]'
U32 env___IM_NSObject_accessibilityAttributeNames(void *_instance, U32 _self) {
    id _result = (id)[(id)_self accessibilityAttributeNames];
    return (U32)_result;
}

// method '-[NSObject accessibilityAttributeValue:]'
U32 env___IM_NSObject_accessibilityAttributeValue_C(void *_instance, U32 _self, U32 attributePointer) {
    id _t1 = (id)attributePointer;
    id _result = (id)[(id)_self accessibilityAttributeValue:_t1];
    return (U32)_result;
}

// method '-[NSObject accessibilityAttributeValue:forParameter:]'
U32 env___IM_NSObject_accessibilityAttributeValue_CforParameter_C(void *_instance, U32 _self, U32 attributePointer, U32 parameterPointer) {
    id _t1 = (id)attributePointer;
    id _t2 = (id)parameterPointer;
    id _result = (id)[(id)_self accessibilityAttributeValue:_t1 forParameter:_t2];
    return (U32)_result;
}

// method '-[NSObject accessibilityFocusedUIElement]'
U32 env___IM_NSObject_accessibilityFocusedUIElement(void *_instance, U32 _self) {
    id _result = (id)[(id)_self accessibilityFocusedUIElement];
    return (U32)_result;
}

// method '-[NSObject accessibilityHitTest:]'
U32 env___IM_NSObject_accessibilityHitTest_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(id)_self accessibilityHitTest:_t1];
    return (U32)_result;
}

// method '-[NSObject accessibilityIsAttributeSettable:]'
U32 env___IM_NSObject_accessibilityIsAttributeSettable_C(void *_instance, U32 _self, U32 attributePointer) {
    id _t1 = (id)attributePointer;
    BOOL _result = (BOOL)[(id)_self accessibilityIsAttributeSettable:_t1];
    return (U32)_result;
}

// method '-[NSObject accessibilityIsIgnored]'
U32 env___IM_NSObject_accessibilityIsIgnored(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self accessibilityIsIgnored];
    return (U32)_result;
}

// method '-[NSObject accessibilityParameterizedAttributeNames]'
U32 env___IM_NSObject_accessibilityParameterizedAttributeNames(void *_instance, U32 _self) {
    id _result = (id)[(id)_self accessibilityParameterizedAttributeNames];
    return (U32)_result;
}

// method '-[NSObject accessibilityPerformAction:]'
void env___IM_NSObject_accessibilityPerformAction_C(void *_instance, U32 _self, U32 actionPointer) {
    id _t1 = (id)actionPointer;
    [(id)_self accessibilityPerformAction:_t1];
}

// method '-[NSObject accessibilitySetOverrideValue:forAttribute:]'
U32 env___IM_NSObject_accessibilitySetOverrideValue_CforAttribute_C(void *_instance, U32 _self, U32 valuePointer, U32 attributePointer) {
    id _t1 = (id)valuePointer;
    id _t2 = (id)attributePointer;
    BOOL _result = (BOOL)[(id)_self accessibilitySetOverrideValue:_t1 forAttribute:_t2];
    return (U32)_result;
}

// method '-[NSObject accessibilitySetValue:forAttribute:]'
void env___IM_NSObject_accessibilitySetValue_CforAttribute_C(void *_instance, U32 _self, U32 valuePointer, U32 attributePointer) {
    id _t1 = (id)valuePointer;
    id _t2 = (id)attributePointer;
    [(id)_self accessibilitySetValue:_t1 forAttribute:_t2];
}

// method '-[NSObject action]'
U32 env___IM_NSObject_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(id)_self action];
    return (U32)_result;
}

// method '-[NSObject activeConversationChanged:toNewConversation:]'
void env___IM_NSObject_activeConversationChanged_CtoNewConversation_C(void *_instance, U32 _self, U32 senderPointer, U32 newConversation) {
    id _t1 = (id)senderPointer;
    [(id)_self activeConversationChanged:_t1 toNewConversation:newConversation];
}

// method '-[NSObject activeConversationWillChange:fromOldConversation:]'
void env___IM_NSObject_activeConversationWillChange_CfromOldConversation_C(void *_instance, U32 _self, U32 senderPointer, U32 oldConversation) {
    id _t1 = (id)senderPointer;
    [(id)_self activeConversationWillChange:_t1 fromOldConversation:oldConversation];
}

// method '-[NSObject alertShowHelp:]'
U32 env___IM_NSObject_alertShowHelp_C(void *_instance, U32 _self, U32 alertPointer) {
    id _t1 = (id)alertPointer;
    BOOL _result = (BOOL)[(id)_self alertShowHelp:_t1];
    return (U32)_result;
}

// method '-[NSObject alphaControlAddedOrRemoved:]'
void env___IM_NSObject_alphaControlAddedOrRemoved_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self alphaControlAddedOrRemoved:_t1];
}

// method '-[NSObject animation:didReachProgressMark:]'
void env___IM_NSObject_animation_CdidReachProgressMark_C(void *_instance, U32 _self, U32 animationPointer, F32 progress) {
    id _t1 = (id)animationPointer;
    [(id)_self animation:_t1 didReachProgressMark:progress];
}

// method '-[NSObject animation:valueForProgress:]'
F32 env___IM_NSObject_animation_CvalueForProgress_C(void *_instance, U32 _self, U32 animationPointer, F32 progress) {
    id _t1 = (id)animationPointer;
    float _result = (float)[(id)_self animation:_t1 valueForProgress:progress];
    return (F32)_result;
}

// method '-[NSObject animationDidEnd:]'
void env___IM_NSObject_animationDidEnd_C(void *_instance, U32 _self, U32 animationPointer) {
    id _t1 = (id)animationPointer;
    [(id)_self animationDidEnd:_t1];
}

// method '-[NSObject animationDidStop:]'
void env___IM_NSObject_animationDidStop_C(void *_instance, U32 _self, U32 animationPointer) {
    id _t1 = (id)animationPointer;
    [(id)_self animationDidStop:_t1];
}

// method '-[NSObject animationShouldStart:]'
U32 env___IM_NSObject_animationShouldStart_C(void *_instance, U32 _self, U32 animationPointer) {
    id _t1 = (id)animationPointer;
    BOOL _result = (BOOL)[(id)_self animationShouldStart:_t1];
    return (U32)_result;
}

// method '-[NSObject application:delegateHandlesKey:]'
U32 env___IM_NSObject_application_CdelegateHandlesKey_C(void *_instance, U32 _self, U32 senderPointer, U32 keyPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)keyPointer;
    BOOL _result = (BOOL)[(id)_self application:_t1 delegateHandlesKey:_t2];
    return (U32)_result;
}

// method '-[NSObject application:openFile:]'
U32 env___IM_NSObject_application_CopenFile_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    BOOL _result = (BOOL)[(id)_self application:_t1 openFile:_t2];
    return (U32)_result;
}

// method '-[NSObject application:openFileWithoutUI:]'
U32 env___IM_NSObject_application_CopenFileWithoutUI_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    BOOL _result = (BOOL)[(id)_self application:_t1 openFileWithoutUI:_t2];
    return (U32)_result;
}

// method '-[NSObject application:openFiles:]'
void env___IM_NSObject_application_CopenFiles_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamesPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamesPointer;
    [(id)_self application:_t1 openFiles:_t2];
}

// method '-[NSObject application:openTempFile:]'
U32 env___IM_NSObject_application_CopenTempFile_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    BOOL _result = (BOOL)[(id)_self application:_t1 openTempFile:_t2];
    return (U32)_result;
}

// method '-[NSObject application:printFile:]'
U32 env___IM_NSObject_application_CprintFile_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    BOOL _result = (BOOL)[(id)_self application:_t1 printFile:_t2];
    return (U32)_result;
}

// method '-[NSObject application:printFiles:]'
void env___IM_NSObject_application_CprintFiles_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamesPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamesPointer;
    [(id)_self application:_t1 printFiles:_t2];
}

// method '-[NSObject application:printFiles:withSettings:showPrintPanels:]'
U32 env___IM_NSObject_application_CprintFiles_CwithSettings_CshowPrintPanels_C(void *_instance, U32 _self, U32 applicationPointer, U32 fileNamesPointer, U32 printSettingsPointer, U32 showPrintPanels) {
    id _t1 = (id)applicationPointer;
    id _t2 = (id)fileNamesPointer;
    id _t3 = (id)printSettingsPointer;
    int _result = (int)[(id)_self application:_t1 printFiles:_t2 withSettings:_t3 showPrintPanels:showPrintPanels];
    return (U32)_result;
}

// method '-[NSObject application:willPresentError:]'
U32 env___IM_NSObject_application_CwillPresentError_C(void *_instance, U32 _self, U32 applicationPointer, U32 errorPointer) {
    id _t1 = (id)applicationPointer;
    id _t2 = (id)errorPointer;
    id _result = (id)[(id)_self application:_t1 willPresentError:_t2];
    return (U32)_result;
}

// method '-[NSObject applicationDidBecomeActive:]'
void env___IM_NSObject_applicationDidBecomeActive_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidBecomeActive:_t1];
}

// method '-[NSObject applicationDidChangeScreenParameters:]'
void env___IM_NSObject_applicationDidChangeScreenParameters_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidChangeScreenParameters:_t1];
}

// method '-[NSObject applicationDidFinishLaunching:]'
void env___IM_NSObject_applicationDidFinishLaunching_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidFinishLaunching:_t1];
}

// method '-[NSObject applicationDidHide:]'
void env___IM_NSObject_applicationDidHide_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidHide:_t1];
}

// method '-[NSObject applicationDidResignActive:]'
void env___IM_NSObject_applicationDidResignActive_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidResignActive:_t1];
}

// method '-[NSObject applicationDidUnhide:]'
void env___IM_NSObject_applicationDidUnhide_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidUnhide:_t1];
}

// method '-[NSObject applicationDidUpdate:]'
void env___IM_NSObject_applicationDidUpdate_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationDidUpdate:_t1];
}

// method '-[NSObject applicationDockMenu:]'
U32 env___IM_NSObject_applicationDockMenu_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    id _result = (id)[(id)_self applicationDockMenu:_t1];
    return (U32)_result;
}

// method '-[NSObject applicationOpenUntitledFile:]'
U32 env___IM_NSObject_applicationOpenUntitledFile_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self applicationOpenUntitledFile:_t1];
    return (U32)_result;
}

// method '-[NSObject applicationShouldHandleReopen:hasVisibleWindows:]'
U32 env___IM_NSObject_applicationShouldHandleReopen_ChasVisibleWindows_C(void *_instance, U32 _self, U32 senderPointer, U32 flag) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self applicationShouldHandleReopen:_t1 hasVisibleWindows:flag];
    return (U32)_result;
}

// method '-[NSObject applicationShouldOpenUntitledFile:]'
U32 env___IM_NSObject_applicationShouldOpenUntitledFile_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self applicationShouldOpenUntitledFile:_t1];
    return (U32)_result;
}

// method '-[NSObject applicationShouldTerminate:]'
U32 env___IM_NSObject_applicationShouldTerminate_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    int _result = (int)[(id)_self applicationShouldTerminate:_t1];
    return (U32)_result;
}

// method '-[NSObject applicationShouldTerminateAfterLastWindowClosed:]'
U32 env___IM_NSObject_applicationShouldTerminateAfterLastWindowClosed_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self applicationShouldTerminateAfterLastWindowClosed:_t1];
    return (U32)_result;
}

// method '-[NSObject applicationWillBecomeActive:]'
void env___IM_NSObject_applicationWillBecomeActive_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillBecomeActive:_t1];
}

// method '-[NSObject applicationWillFinishLaunching:]'
void env___IM_NSObject_applicationWillFinishLaunching_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillFinishLaunching:_t1];
}

// method '-[NSObject applicationWillHide:]'
void env___IM_NSObject_applicationWillHide_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillHide:_t1];
}

// method '-[NSObject applicationWillResignActive:]'
void env___IM_NSObject_applicationWillResignActive_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillResignActive:_t1];
}

// method '-[NSObject applicationWillTerminate:]'
void env___IM_NSObject_applicationWillTerminate_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillTerminate:_t1];
}

// method '-[NSObject applicationWillUnhide:]'
void env___IM_NSObject_applicationWillUnhide_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillUnhide:_t1];
}

// method '-[NSObject applicationWillUpdate:]'
void env___IM_NSObject_applicationWillUpdate_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self applicationWillUpdate:_t1];
}

// method '-[NSObject attachColorList:]'
void env___IM_NSObject_attachColorList_C(void *_instance, U32 _self, U32 colorListPointer) {
    id _t1 = (id)colorListPointer;
    [(id)_self attachColorList:_t1];
}

// method '-[NSObject attachment]'
U32 env___IM_NSObject_attachment(void *_instance, U32 _self) {
    id _result = (id)[(id)_self attachment];
    return (U32)_result;
}

// method '-[NSObject attributedString]'
U32 env___IM_NSObject_attributedString(void *_instance, U32 _self) {
    id _result = (id)[(id)_self attributedString];
    return (U32)_result;
}

// method '-[NSObject attributedSubstringFromRange:]'
U32 env___IM_NSObject_attributedSubstringFromRange_C(void *_instance, U32 _self, U32 theRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + theRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(id)_self attributedSubstringFromRange:_t1];
    return (U32)_result;
}

// method '-[NSObject attributedTitle]'
U32 env___IM_NSObject_attributedTitle(void *_instance, U32 _self) {
    id _result = (id)[(id)_self attributedTitle];
    return (U32)_result;
}

// method '-[NSObject awakeFromNib]'
void env___IM_NSObject_awakeFromNib(void *_instance, U32 _self) {
    [(id)_self awakeFromNib];
}

// method '-[NSObject bind:toObject:withKeyPath:options:]'
void env___IM_NSObject_bind_CtoObject_CwithKeyPath_Coptions_C(void *_instance, U32 _self, U32 bindingPointer, U32 observablePointer, U32 keyPathPointer, U32 optionsPointer) {
    id _t1 = (id)bindingPointer;
    id _t2 = (id)observablePointer;
    id _t3 = (id)keyPathPointer;
    id _t4 = (id)optionsPointer;
    [(id)_self bind:_t1 toObject:_t2 withKeyPath:_t3 options:_t4];
}

// method '-[NSObject browser:createRowsForColumn:inMatrix:]'
void env___IM_NSObject_browser_CcreateRowsForColumn_CinMatrix_C(void *_instance, U32 _self, U32 senderPointer, U32 column, U32 matrixPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)matrixPointer;
    [(id)_self browser:_t1 createRowsForColumn:column inMatrix:_t2];
}

// method '-[NSObject browser:isColumnValid:]'
U32 env___IM_NSObject_browser_CisColumnValid_C(void *_instance, U32 _self, U32 senderPointer, U32 column) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self browser:_t1 isColumnValid:column];
    return (U32)_result;
}

// method '-[NSObject browser:numberOfRowsInColumn:]'
U32 env___IM_NSObject_browser_CnumberOfRowsInColumn_C(void *_instance, U32 _self, U32 senderPointer, U32 column) {
    id _t1 = (id)senderPointer;
    int _result = (int)[(id)_self browser:_t1 numberOfRowsInColumn:column];
    return (U32)_result;
}

// method '-[NSObject browser:selectCellWithString:inColumn:]'
U32 env___IM_NSObject_browser_CselectCellWithString_CinColumn_C(void *_instance, U32 _self, U32 senderPointer, U32 titlePointer, U32 column) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)titlePointer;
    BOOL _result = (BOOL)[(id)_self browser:_t1 selectCellWithString:_t2 inColumn:column];
    return (U32)_result;
}

// method '-[NSObject browser:selectRow:inColumn:]'
U32 env___IM_NSObject_browser_CselectRow_CinColumn_C(void *_instance, U32 _self, U32 senderPointer, U32 row, U32 column) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self browser:_t1 selectRow:row inColumn:column];
    return (U32)_result;
}

// method '-[NSObject browser:shouldSizeColumn:forUserResize:toWidth:]'
F32 env___IM_NSObject_browser_CshouldSizeColumn_CforUserResize_CtoWidth_C(void *_instance, U32 _self, U32 browserPointer, U32 columnIndex, U32 forUserResize, F32 suggestedWidth) {
    id _t1 = (id)browserPointer;
    float _result = (float)[(id)_self browser:_t1 shouldSizeColumn:columnIndex forUserResize:forUserResize toWidth:suggestedWidth];
    return (F32)_result;
}

// method '-[NSObject browser:sizeToFitWidthOfColumn:]'
F32 env___IM_NSObject_browser_CsizeToFitWidthOfColumn_C(void *_instance, U32 _self, U32 browserPointer, U32 columnIndex) {
    id _t1 = (id)browserPointer;
    float _result = (float)[(id)_self browser:_t1 sizeToFitWidthOfColumn:columnIndex];
    return (F32)_result;
}

// method '-[NSObject browser:titleOfColumn:]'
U32 env___IM_NSObject_browser_CtitleOfColumn_C(void *_instance, U32 _self, U32 senderPointer, U32 column) {
    id _t1 = (id)senderPointer;
    id _result = (id)[(id)_self browser:_t1 titleOfColumn:column];
    return (U32)_result;
}

// method '-[NSObject browser:willDisplayCell:atRow:column:]'
void env___IM_NSObject_browser_CwillDisplayCell_CatRow_Ccolumn_C(void *_instance, U32 _self, U32 senderPointer, U32 cellPointer, U32 row, U32 column) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)cellPointer;
    [(id)_self browser:_t1 willDisplayCell:_t2 atRow:row column:column];
}

// method '-[NSObject browserColumnConfigurationDidChange:]'
void env___IM_NSObject_browserColumnConfigurationDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self browserColumnConfigurationDidChange:_t1];
}

// method '-[NSObject browserDidScroll:]'
void env___IM_NSObject_browserDidScroll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self browserDidScroll:_t1];
}

// method '-[NSObject browserWillScroll:]'
void env___IM_NSObject_browserWillScroll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self browserWillScroll:_t1];
}

// method '-[NSObject canBeDisabled]'
U32 env___IM_NSObject_canBeDisabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self canBeDisabled];
    return (U32)_result;
}

// method '-[NSObject cellBaselineOffset]'
void env___IM_NSObject_cellBaselineOffset(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(id)_self cellBaselineOffset];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:]'
void env___IM_NSObject_cellFrameForTextContainer_CproposedLineFragment_CglyphPosition_CcharacterIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 textContainerPointer, U32 lineFragIndirect, U32 positionIndirect, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textContainerPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + lineFragIndirect);
    NSPoint _t3 = *(NSPoint*)(_mem->data + positionIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    NSRect _result = (NSRect)[(id)_self cellFrameForTextContainer:_t1 proposedLineFragment:_t2 glyphPosition:_t3 characterIndex:charIndex];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject cellSize]'
void env___IM_NSObject_cellSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(id)_self cellSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject changeColor:]'
void env___IM_NSObject_changeColor_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self changeColor:_t1];
}

// method '-[NSObject changeFont:]'
void env___IM_NSObject_changeFont_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self changeFont:_t1];
}

// method '-[NSObject changeSpelling:]'
void env___IM_NSObject_changeSpelling_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self changeSpelling:_t1];
}

// method '-[NSObject characterIndexForPoint:]'
U32 env___IM_NSObject_characterIndexForPoint_C(void *_instance, U32 _self, U32 thePointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + thePointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    unsigned int _result = (unsigned int)[(id)_self characterIndexForPoint:_t1];
    return (U32)_result;
}

// method '-[NSObject comboBox:completedString:]'
U32 env___IM_NSObject_comboBox_CcompletedString_C(void *_instance, U32 _self, U32 aComboBoxPointer, U32 stringPointer) {
    id _t1 = (id)aComboBoxPointer;
    id _t2 = (id)stringPointer;
    id _result = (id)[(id)_self comboBox:_t1 completedString:_t2];
    return (U32)_result;
}

// method '-[NSObject comboBox:indexOfItemWithStringValue:]'
U32 env___IM_NSObject_comboBox_CindexOfItemWithStringValue_C(void *_instance, U32 _self, U32 aComboBoxPointer, U32 stringPointer) {
    id _t1 = (id)aComboBoxPointer;
    id _t2 = (id)stringPointer;
    unsigned int _result = (unsigned int)[(id)_self comboBox:_t1 indexOfItemWithStringValue:_t2];
    return (U32)_result;
}

// method '-[NSObject comboBox:objectValueForItemAtIndex:]'
U32 env___IM_NSObject_comboBox_CobjectValueForItemAtIndex_C(void *_instance, U32 _self, U32 aComboBoxPointer, U32 index) {
    id _t1 = (id)aComboBoxPointer;
    id _result = (id)[(id)_self comboBox:_t1 objectValueForItemAtIndex:index];
    return (U32)_result;
}

// method '-[NSObject comboBoxCell:completedString:]'
U32 env___IM_NSObject_comboBoxCell_CcompletedString_C(void *_instance, U32 _self, U32 aComboBoxCellPointer, U32 uncompletedStringPointer) {
    id _t1 = (id)aComboBoxCellPointer;
    id _t2 = (id)uncompletedStringPointer;
    id _result = (id)[(id)_self comboBoxCell:_t1 completedString:_t2];
    return (U32)_result;
}

// method '-[NSObject comboBoxCell:indexOfItemWithStringValue:]'
U32 env___IM_NSObject_comboBoxCell_CindexOfItemWithStringValue_C(void *_instance, U32 _self, U32 aComboBoxCellPointer, U32 stringPointer) {
    id _t1 = (id)aComboBoxCellPointer;
    id _t2 = (id)stringPointer;
    unsigned int _result = (unsigned int)[(id)_self comboBoxCell:_t1 indexOfItemWithStringValue:_t2];
    return (U32)_result;
}

// method '-[NSObject comboBoxCell:objectValueForItemAtIndex:]'
U32 env___IM_NSObject_comboBoxCell_CobjectValueForItemAtIndex_C(void *_instance, U32 _self, U32 aComboBoxCellPointer, U32 index) {
    id _t1 = (id)aComboBoxCellPointer;
    id _result = (id)[(id)_self comboBoxCell:_t1 objectValueForItemAtIndex:index];
    return (U32)_result;
}

// method '-[NSObject comboBoxSelectionDidChange:]'
void env___IM_NSObject_comboBoxSelectionDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self comboBoxSelectionDidChange:_t1];
}

// method '-[NSObject comboBoxSelectionIsChanging:]'
void env___IM_NSObject_comboBoxSelectionIsChanging_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self comboBoxSelectionIsChanging:_t1];
}

// method '-[NSObject comboBoxWillDismiss:]'
void env___IM_NSObject_comboBoxWillDismiss_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self comboBoxWillDismiss:_t1];
}

// method '-[NSObject comboBoxWillPopUp:]'
void env___IM_NSObject_comboBoxWillPopUp_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self comboBoxWillPopUp:_t1];
}

// method '-[NSObject commitEditing]'
U32 env___IM_NSObject_commitEditing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self commitEditing];
    return (U32)_result;
}

// method '-[NSObject commitEditingWithDelegate:didCommitSelector:contextInfo:]'
void env___IM_NSObject_commitEditingWithDelegate_CdidCommitSelector_CcontextInfo_C(void *_instance, U32 _self, U32 delegatePointer, U32 didCommitSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)delegatePointer;
    SEL _t2 = (SEL)didCommitSelectorPointer;
    void* _t3 = (void*)contextInfoPointer;
    [(id)_self commitEditingWithDelegate:_t1 didCommitSelector:_t2 contextInfo:_t3];
}

// method '-[NSObject concludeDragOperation:]'
void env___IM_NSObject_concludeDragOperation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self concludeDragOperation:_t1];
}

// method '-[NSObject control:didFailToFormatString:errorDescription:]'
U32 env___IM_NSObject_control_CdidFailToFormatString_CerrorDescription_C(void *_instance, U32 _self, U32 controlPointer, U32 stringPointer, U32 errorPointer) {
    id _t1 = (id)controlPointer;
    id _t2 = (id)stringPointer;
    id _t3 = (id)errorPointer;
    BOOL _result = (BOOL)[(id)_self control:_t1 didFailToFormatString:_t2 errorDescription:_t3];
    return (U32)_result;
}

// method '-[NSObject control:didFailToValidatePartialString:errorDescription:]'
void env___IM_NSObject_control_CdidFailToValidatePartialString_CerrorDescription_C(void *_instance, U32 _self, U32 controlPointer, U32 stringPointer, U32 errorPointer) {
    id _t1 = (id)controlPointer;
    id _t2 = (id)stringPointer;
    id _t3 = (id)errorPointer;
    [(id)_self control:_t1 didFailToValidatePartialString:_t2 errorDescription:_t3];
}

// method '-[NSObject control:isValidObject:]'
U32 env___IM_NSObject_control_CisValidObject_C(void *_instance, U32 _self, U32 controlPointer, U32 objPointer) {
    id _t1 = (id)controlPointer;
    id _t2 = (id)objPointer;
    BOOL _result = (BOOL)[(id)_self control:_t1 isValidObject:_t2];
    return (U32)_result;
}

// method '-[NSObject control:textShouldBeginEditing:]'
U32 env___IM_NSObject_control_CtextShouldBeginEditing_C(void *_instance, U32 _self, U32 controlPointer, U32 fieldEditorPointer) {
    id _t1 = (id)controlPointer;
    id _t2 = (id)fieldEditorPointer;
    BOOL _result = (BOOL)[(id)_self control:_t1 textShouldBeginEditing:_t2];
    return (U32)_result;
}

// method '-[NSObject control:textShouldEndEditing:]'
U32 env___IM_NSObject_control_CtextShouldEndEditing_C(void *_instance, U32 _self, U32 controlPointer, U32 fieldEditorPointer) {
    id _t1 = (id)controlPointer;
    id _t2 = (id)fieldEditorPointer;
    BOOL _result = (BOOL)[(id)_self control:_t1 textShouldEndEditing:_t2];
    return (U32)_result;
}

// method '-[NSObject control:textView:completions:forPartialWordRange:indexOfSelectedItem:]'
U32 env___IM_NSObject_control_CtextView_Ccompletions_CforPartialWordRange_CindexOfSelectedItem_C(void *_instance, U32 _self, U32 controlPointer, U32 textViewPointer, U32 wordsPointer, U32 charRangeIndirect, U32 indexPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)controlPointer;
    id _t2 = (id)textViewPointer;
    id _t3 = (id)wordsPointer;
    NSRange _t4 = *(NSRange*)(_mem->data + charRangeIndirect);
    int* _t5 = (int*)indexPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t4.location);
    swap_I(&_t4.length);
    #endif
    id _result = (id)[(id)_self control:_t1 textView:_t2 completions:_t3 forPartialWordRange:_t4 indexOfSelectedItem:_t5];
    return (U32)_result;
}

// method '-[NSObject control:textView:doCommandBySelector:]'
U32 env___IM_NSObject_control_CtextView_CdoCommandBySelector_C(void *_instance, U32 _self, U32 controlPointer, U32 textViewPointer, U32 commandSelectorPointer) {
    id _t1 = (id)controlPointer;
    id _t2 = (id)textViewPointer;
    SEL _t3 = (SEL)commandSelectorPointer;
    BOOL _result = (BOOL)[(id)_self control:_t1 textView:_t2 doCommandBySelector:_t3];
    return (U32)_result;
}

// method '-[NSObject controlTextDidBeginEditing:]'
void env___IM_NSObject_controlTextDidBeginEditing_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(id)_self controlTextDidBeginEditing:_t1];
}

// method '-[NSObject controlTextDidChange:]'
void env___IM_NSObject_controlTextDidChange_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(id)_self controlTextDidChange:_t1];
}

// method '-[NSObject controlTextDidEndEditing:]'
void env___IM_NSObject_controlTextDidEndEditing_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(id)_self controlTextDidEndEditing:_t1];
}

// method '-[NSObject conversationIdentifier]'
U32 env___IM_NSObject_conversationIdentifier(void *_instance, U32 _self) {
    long _result = (long)[(id)_self conversationIdentifier];
    return (U32)_result;
}

// method '-[NSObject currentMode]'
U32 env___IM_NSObject_currentMode(void *_instance, U32 _self) {
    int _result = (int)[(id)_self currentMode];
    return (U32)_result;
}

// method '-[NSObject datePickerCell:validateProposedDateValue:timeInterval:]'
void env___IM_NSObject_datePickerCell_CvalidateProposedDateValue_CtimeInterval_C(void *_instance, U32 _self, U32 aDatePickerCellPointer, U32 proposedDateValuePointer, U32 proposedTimeIntervalPointer) {
    id _t1 = (id)aDatePickerCellPointer;
    id* _t2 = (id*)proposedDateValuePointer;
    double* _t3 = (double*)proposedTimeIntervalPointer;
    [(id)_self datePickerCell:_t1 validateProposedDateValue:_t2 timeInterval:_t3];
}

// method '+[NSObject defaultPlaceholderForMarker:withBinding:]'
U32 env___CM_NSObject_defaultPlaceholderForMarker_CwithBinding_C(void *_instance, U32 _class, U32 markerPointer, U32 bindingPointer) {
    id _t1 = (id)markerPointer;
    id _t2 = (id)bindingPointer;
    id _result = (id)[(Class)_class defaultPlaceholderForMarker:_t1 withBinding:_t2];
    return (U32)_result;
}

// method '-[NSObject detachColorList:]'
void env___IM_NSObject_detachColorList_C(void *_instance, U32 _self, U32 colorListPointer) {
    id _t1 = (id)colorListPointer;
    [(id)_self detachColorList:_t1];
}

// method '-[NSObject discardEditing]'
void env___IM_NSObject_discardEditing(void *_instance, U32 _self) {
    [(id)_self discardEditing];
}

// method '-[NSObject doCommandBySelector:]'
void env___IM_NSObject_doCommandBySelector_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(id)_self doCommandBySelector:_t1];
}

// method '-[NSObject doCommandBySelector:client:]'
void env___IM_NSObject_doCommandBySelector_Cclient_C(void *_instance, U32 _self, U32 aSelectorPointer, U32 senderPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    id _t2 = (id)senderPointer;
    [(id)_self doCommandBySelector:_t1 client:_t2];
}

// method '-[NSObject draggedImage]'
U32 env___IM_NSObject_draggedImage(void *_instance, U32 _self) {
    id _result = (id)[(id)_self draggedImage];
    return (U32)_result;
}

// method '-[NSObject draggedImage:beganAt:]'
void env___IM_NSObject_draggedImage_CbeganAt_C(void *_instance, U32 _self, U32 imagePointer, U32 screenPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + screenPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(id)_self draggedImage:_t1 beganAt:_t2];
}

// method '-[NSObject draggedImage:endedAt:deposited:]'
void env___IM_NSObject_draggedImage_CendedAt_Cdeposited_C(void *_instance, U32 _self, U32 imagePointer, U32 screenPointIndirect, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + screenPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(id)_self draggedImage:_t1 endedAt:_t2 deposited:flag];
}

// method '-[NSObject draggedImage:endedAt:operation:]'
void env___IM_NSObject_draggedImage_CendedAt_Coperation_C(void *_instance, U32 _self, U32 imagePointer, U32 screenPointIndirect, U32 operation) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + screenPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(id)_self draggedImage:_t1 endedAt:_t2 operation:operation];
}

// method '-[NSObject draggedImage:movedTo:]'
void env___IM_NSObject_draggedImage_CmovedTo_C(void *_instance, U32 _self, U32 imagePointer, U32 screenPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + screenPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(id)_self draggedImage:_t1 movedTo:_t2];
}

// method '-[NSObject draggedImageLocation]'
void env___IM_NSObject_draggedImageLocation(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(id)_self draggedImageLocation];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject draggingDestinationWindow]'
U32 env___IM_NSObject_draggingDestinationWindow(void *_instance, U32 _self) {
    id _result = (id)[(id)_self draggingDestinationWindow];
    return (U32)_result;
}

// method '-[NSObject draggingEnded:]'
void env___IM_NSObject_draggingEnded_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self draggingEnded:_t1];
}

// method '-[NSObject draggingEntered:]'
U32 env___IM_NSObject_draggingEntered_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    unsigned int _result = (unsigned int)[(id)_self draggingEntered:_t1];
    return (U32)_result;
}

// method '-[NSObject draggingExited:]'
void env___IM_NSObject_draggingExited_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self draggingExited:_t1];
}

// method '-[NSObject draggingLocation]'
void env___IM_NSObject_draggingLocation(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(id)_self draggingLocation];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject draggingPasteboard]'
U32 env___IM_NSObject_draggingPasteboard(void *_instance, U32 _self) {
    id _result = (id)[(id)_self draggingPasteboard];
    return (U32)_result;
}

// method '-[NSObject draggingSequenceNumber]'
U32 env___IM_NSObject_draggingSequenceNumber(void *_instance, U32 _self) {
    int _result = (int)[(id)_self draggingSequenceNumber];
    return (U32)_result;
}

// method '-[NSObject draggingSource]'
U32 env___IM_NSObject_draggingSource(void *_instance, U32 _self) {
    id _result = (id)[(id)_self draggingSource];
    return (U32)_result;
}

// method '-[NSObject draggingSourceOperationMask]'
U32 env___IM_NSObject_draggingSourceOperationMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(id)_self draggingSourceOperationMask];
    return (U32)_result;
}

// method '-[NSObject draggingSourceOperationMaskForLocal:]'
U32 env___IM_NSObject_draggingSourceOperationMaskForLocal_C(void *_instance, U32 _self, U32 flag) {
    unsigned int _result = (unsigned int)[(id)_self draggingSourceOperationMaskForLocal:flag];
    return (U32)_result;
}

// method '-[NSObject draggingUpdated:]'
U32 env___IM_NSObject_draggingUpdated_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    unsigned int _result = (unsigned int)[(id)_self draggingUpdated:_t1];
    return (U32)_result;
}

// method '-[NSObject drawWithFrame:inView:]'
void env___IM_NSObject_drawWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(id)_self drawWithFrame:_t1 inView:_t2];
}

// method '-[NSObject drawWithFrame:inView:characterIndex:]'
void env___IM_NSObject_drawWithFrame_CinView_CcharacterIndex_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(id)_self drawWithFrame:_t1 inView:_t2 characterIndex:charIndex];
}

// method '-[NSObject drawWithFrame:inView:characterIndex:layoutManager:]'
void env___IM_NSObject_drawWithFrame_CinView_CcharacterIndex_ClayoutManager_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer, U32 charIndex, U32 layoutManagerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    id _t3 = (id)layoutManagerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(id)_self drawWithFrame:_t1 inView:_t2 characterIndex:charIndex layoutManager:_t3];
}

// method '-[NSObject drawerDidClose:]'
void env___IM_NSObject_drawerDidClose_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self drawerDidClose:_t1];
}

// method '-[NSObject drawerDidOpen:]'
void env___IM_NSObject_drawerDidOpen_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self drawerDidOpen:_t1];
}

// method '-[NSObject drawerShouldClose:]'
U32 env___IM_NSObject_drawerShouldClose_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self drawerShouldClose:_t1];
    return (U32)_result;
}

// method '-[NSObject drawerShouldOpen:]'
U32 env___IM_NSObject_drawerShouldOpen_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self drawerShouldOpen:_t1];
    return (U32)_result;
}

// method '-[NSObject drawerWillClose:]'
void env___IM_NSObject_drawerWillClose_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self drawerWillClose:_t1];
}

// method '-[NSObject drawerWillOpen:]'
void env___IM_NSObject_drawerWillOpen_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self drawerWillOpen:_t1];
}

// method '-[NSObject drawerWillResizeContents:toSize:]'
void env___IM_NSObject_drawerWillResizeContents_CtoSize_C(void *_instance, U32 _resultIndirect, U32 _self, U32 senderPointer, U32 contentSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)senderPointer;
    NSSize _t2 = *(NSSize*)(_mem->data + contentSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.width);
    swap_f(&_t2.height);
    #endif
    NSSize _result = (NSSize)[(id)_self drawerWillResizeContents:_t1 toSize:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSObject exposeBinding:]'
void env___CM_NSObject_exposeBinding_C(void *_instance, U32 _class, U32 bindingPointer) {
    id _t1 = (id)bindingPointer;
    [(Class)_class exposeBinding:_t1];
}

// method '-[NSObject exposedBindings]'
U32 env___IM_NSObject_exposedBindings(void *_instance, U32 _self) {
    id _result = (id)[(id)_self exposedBindings];
    return (U32)_result;
}

// method '-[NSObject firstRectForCharacterRange:]'
void env___IM_NSObject_firstRectForCharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 theRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + theRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRect _result = (NSRect)[(id)_self firstRectForCharacterRange:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject fontManager:willIncludeFont:]'
U32 env___IM_NSObject_fontManager_CwillIncludeFont_C(void *_instance, U32 _self, U32 senderPointer, U32 fontNamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)fontNamePointer;
    BOOL _result = (BOOL)[(id)_self fontManager:_t1 willIncludeFont:_t2];
    return (U32)_result;
}

// method '-[NSObject hasMarkedText]'
U32 env___IM_NSObject_hasMarkedText(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self hasMarkedText];
    return (U32)_result;
}

// method '-[NSObject hasSubmenu]'
U32 env___IM_NSObject_hasSubmenu(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self hasSubmenu];
    return (U32)_result;
}

// method '-[NSObject highlight:withFrame:inView:]'
void env___IM_NSObject_highlight_CwithFrame_CinView_C(void *_instance, U32 _self, U32 flag, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(id)_self highlight:flag withFrame:_t1 inView:_t2];
}

// method '-[NSObject ignoreModifierKeysWhileDragging]'
U32 env___IM_NSObject_ignoreModifierKeysWhileDragging(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self ignoreModifierKeysWhileDragging];
    return (U32)_result;
}

// method '-[NSObject ignoreSpelling:]'
void env___IM_NSObject_ignoreSpelling_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self ignoreSpelling:_t1];
}

// method '-[NSObject image]'
U32 env___IM_NSObject_image(void *_instance, U32 _self) {
    id _result = (id)[(id)_self image];
    return (U32)_result;
}

// method '-[NSObject image:didLoadPartOfRepresentation:withValidRows:]'
void env___IM_NSObject_image_CdidLoadPartOfRepresentation_CwithValidRows_C(void *_instance, U32 _self, U32 imagePointer, U32 repPointer, U32 rows) {
    id _t1 = (id)imagePointer;
    id _t2 = (id)repPointer;
    [(id)_self image:_t1 didLoadPartOfRepresentation:_t2 withValidRows:rows];
}

// method '-[NSObject image:didLoadRepresentation:withStatus:]'
void env___IM_NSObject_image_CdidLoadRepresentation_CwithStatus_C(void *_instance, U32 _self, U32 imagePointer, U32 repPointer, U32 status) {
    id _t1 = (id)imagePointer;
    id _t2 = (id)repPointer;
    [(id)_self image:_t1 didLoadRepresentation:_t2 withStatus:status];
}

// method '-[NSObject image:didLoadRepresentationHeader:]'
void env___IM_NSObject_image_CdidLoadRepresentationHeader_C(void *_instance, U32 _self, U32 imagePointer, U32 repPointer) {
    id _t1 = (id)imagePointer;
    id _t2 = (id)repPointer;
    [(id)_self image:_t1 didLoadRepresentationHeader:_t2];
}

// method '-[NSObject image:willLoadRepresentation:]'
void env___IM_NSObject_image_CwillLoadRepresentation_C(void *_instance, U32 _self, U32 imagePointer, U32 repPointer) {
    id _t1 = (id)imagePointer;
    id _t2 = (id)repPointer;
    [(id)_self image:_t1 willLoadRepresentation:_t2];
}

// method '-[NSObject imageDidNotDraw:inRect:]'
U32 env___IM_NSObject_imageDidNotDraw_CinRect_C(void *_instance, U32 _self, U32 senderPointer, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)senderPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(id)_self imageDidNotDraw:_t1 inRect:_t2];
    return (U32)_result;
}

// method '-[NSObject indentationLevel]'
U32 env___IM_NSObject_indentationLevel(void *_instance, U32 _self) {
    int _result = (int)[(id)_self indentationLevel];
    return (U32)_result;
}

// method '-[NSObject infoForBinding:]'
U32 env___IM_NSObject_infoForBinding_C(void *_instance, U32 _self, U32 bindingPointer) {
    id _t1 = (id)bindingPointer;
    id _result = (id)[(id)_self infoForBinding:_t1];
    return (U32)_result;
}

// method '-[NSObject initWithPickerMask:colorPanel:]'
U32 env___IM_NSObject_initWithPickerMask_CcolorPanel_C(void *_instance, U32 _self, U32 mask, U32 owningColorPanelPointer) {
    id _t1 = (id)owningColorPanelPointer;
    id _result = (id)[(id)_self initWithPickerMask:mask colorPanel:_t1];
    return (U32)_result;
}

// method '-[NSObject initWithTitle:action:keyEquivalent:]'
U32 env___IM_NSObject_initWithTitle_Caction_CkeyEquivalent_C(void *_instance, U32 _self, U32 aStringPointer, U32 aSelectorPointer, U32 charCodePointer) {
    id _t1 = (id)aStringPointer;
    SEL _t2 = (SEL)aSelectorPointer;
    id _t3 = (id)charCodePointer;
    id _result = (id)[(id)_self initWithTitle:_t1 action:_t2 keyEquivalent:_t3];
    return (U32)_result;
}

// method '-[NSObject inputClientBecomeActive:]'
void env___IM_NSObject_inputClientBecomeActive_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self inputClientBecomeActive:_t1];
}

// method '-[NSObject inputClientDisabled:]'
void env___IM_NSObject_inputClientDisabled_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self inputClientDisabled:_t1];
}

// method '-[NSObject inputClientEnabled:]'
void env___IM_NSObject_inputClientEnabled_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self inputClientEnabled:_t1];
}

// method '-[NSObject inputClientResignActive:]'
void env___IM_NSObject_inputClientResignActive_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self inputClientResignActive:_t1];
}

// method '-[NSObject insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:]'
void env___IM_NSObject_insertGlyphs_Clength_CforStartingGlyphAtIndex_CcharacterIndex_C(void *_instance, U32 _self, U32 glyphsPointer, U32 length, U32 glyphIndex, U32 charIndex) {
    const unsigned int* _t1 = (const unsigned int*)glyphsPointer;
    [(id)_self insertGlyphs:_t1 length:length forStartingGlyphAtIndex:glyphIndex characterIndex:charIndex];
}

// method '-[NSObject insertNewButtonImage:in:]'
void env___IM_NSObject_insertNewButtonImage_Cin_C(void *_instance, U32 _self, U32 newButtonImagePointer, U32 buttonCellPointer) {
    id _t1 = (id)newButtonImagePointer;
    id _t2 = (id)buttonCellPointer;
    [(id)_self insertNewButtonImage:_t1 in:_t2];
}

// method '-[NSObject insertText:]'
void env___IM_NSObject_insertText_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(id)_self insertText:_t1];
}

// method '-[NSObject insertText:client:]'
void env___IM_NSObject_insertText_Cclient_C(void *_instance, U32 _self, U32 aStringPointer, U32 senderPointer) {
    id _t1 = (id)aStringPointer;
    id _t2 = (id)senderPointer;
    [(id)_self insertText:_t1 client:_t2];
}

// method '-[NSObject isAlternate]'
U32 env___IM_NSObject_isAlternate(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self isAlternate];
    return (U32)_result;
}

// method '-[NSObject isEnabled]'
U32 env___IM_NSObject_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self isEnabled];
    return (U32)_result;
}

// method '-[NSObject isSeparatorItem]'
U32 env___IM_NSObject_isSeparatorItem(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self isSeparatorItem];
    return (U32)_result;
}

// method '-[NSObject keyEquivalent]'
U32 env___IM_NSObject_keyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(id)_self keyEquivalent];
    return (U32)_result;
}

// method '-[NSObject keyEquivalentModifierMask]'
U32 env___IM_NSObject_keyEquivalentModifierMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(id)_self keyEquivalentModifierMask];
    return (U32)_result;
}

// method '-[NSObject layoutManager:didCompleteLayoutForTextContainer:atEnd:]'
void env___IM_NSObject_layoutManager_CdidCompleteLayoutForTextContainer_CatEnd_C(void *_instance, U32 _self, U32 layoutManagerPointer, U32 textContainerPointer, U32 layoutFinishedFlag) {
    id _t1 = (id)layoutManagerPointer;
    id _t2 = (id)textContainerPointer;
    [(id)_self layoutManager:_t1 didCompleteLayoutForTextContainer:_t2 atEnd:layoutFinishedFlag];
}

// method '-[NSObject layoutManagerDidInvalidateLayout:]'
void env___IM_NSObject_layoutManagerDidInvalidateLayout_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self layoutManagerDidInvalidateLayout:_t1];
}

// method '-[NSObject layoutOptions]'
U32 env___IM_NSObject_layoutOptions(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(id)_self layoutOptions];
    return (U32)_result;
}

// method '-[NSObject markedRange]'
void env___IM_NSObject_markedRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(id)_self markedRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject markedTextAbandoned:]'
void env___IM_NSObject_markedTextAbandoned_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self markedTextAbandoned:_t1];
}

// method '-[NSObject markedTextSelectionChanged:client:]'
void env___IM_NSObject_markedTextSelectionChanged_Cclient_C(void *_instance, U32 _self, U32 newSelIndirect, U32 senderPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + newSelIndirect);
    id _t2 = (id)senderPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(id)_self markedTextSelectionChanged:_t1 client:_t2];
}

// method '-[NSObject menu]'
U32 env___IM_NSObject_menu(void *_instance, U32 _self) {
    id _result = (id)[(id)_self menu];
    return (U32)_result;
}

// method '-[NSObject menu:updateItem:atIndex:shouldCancel:]'
U32 env___IM_NSObject_menu_CupdateItem_CatIndex_CshouldCancel_C(void *_instance, U32 _self, U32 menuPointer, U32 itemPointer, U32 index, U32 shouldCancel) {
    id _t1 = (id)menuPointer;
    id _t2 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self menu:_t1 updateItem:_t2 atIndex:index shouldCancel:shouldCancel];
    return (U32)_result;
}

// method '-[NSObject menuHasKeyEquivalent:forEvent:target:action:]'
U32 env___IM_NSObject_menuHasKeyEquivalent_CforEvent_Ctarget_Caction_C(void *_instance, U32 _self, U32 menuPointer, U32 eventPointer, U32 targetPointer, U32 actionPointer) {
    id _t1 = (id)menuPointer;
    id _t2 = (id)eventPointer;
    id* _t3 = (id*)targetPointer;
    SEL* _t4 = (SEL*)actionPointer;
    BOOL _result = (BOOL)[(id)_self menuHasKeyEquivalent:_t1 forEvent:_t2 target:_t3 action:_t4];
    return (U32)_result;
}

// method '-[NSObject menuNeedsUpdate:]'
void env___IM_NSObject_menuNeedsUpdate_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(id)_self menuNeedsUpdate:_t1];
}

// method '-[NSObject mixedStateImage]'
U32 env___IM_NSObject_mixedStateImage(void *_instance, U32 _self) {
    id _result = (id)[(id)_self mixedStateImage];
    return (U32)_result;
}

// method '-[NSObject mnemonic]'
U32 env___IM_NSObject_mnemonic(void *_instance, U32 _self) {
    id _result = (id)[(id)_self mnemonic];
    return (U32)_result;
}

// method '-[NSObject mnemonicLocation]'
U32 env___IM_NSObject_mnemonicLocation(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(id)_self mnemonicLocation];
    return (U32)_result;
}

// method '-[NSObject mouseDownOnCharacterIndex:atCoordinate:withModifier:client:]'
U32 env___IM_NSObject_mouseDownOnCharacterIndex_CatCoordinate_CwithModifier_Cclient_C(void *_instance, U32 _self, U32 theIndex, U32 thePointIndirect, U32 theFlags, U32 senderPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + thePointIndirect);
    id _t2 = (id)senderPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    BOOL _result = (BOOL)[(id)_self mouseDownOnCharacterIndex:theIndex atCoordinate:_t1 withModifier:theFlags client:_t2];
    return (U32)_result;
}

// method '-[NSObject mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:]'
U32 env___IM_NSObject_mouseDraggedOnCharacterIndex_CatCoordinate_CwithModifier_Cclient_C(void *_instance, U32 _self, U32 theIndex, U32 thePointIndirect, U32 theFlags, U32 senderPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + thePointIndirect);
    id _t2 = (id)senderPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    BOOL _result = (BOOL)[(id)_self mouseDraggedOnCharacterIndex:theIndex atCoordinate:_t1 withModifier:theFlags client:_t2];
    return (U32)_result;
}

// method '-[NSObject mouseUpOnCharacterIndex:atCoordinate:withModifier:client:]'
void env___IM_NSObject_mouseUpOnCharacterIndex_CatCoordinate_CwithModifier_Cclient_C(void *_instance, U32 _self, U32 theIndex, U32 thePointIndirect, U32 theFlags, U32 senderPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + thePointIndirect);
    id _t2 = (id)senderPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(id)_self mouseUpOnCharacterIndex:theIndex atCoordinate:_t1 withModifier:theFlags client:_t2];
}

// method '-[NSObject namesOfPromisedFilesDroppedAtDestination:]'
U32 env___IM_NSObject_namesOfPromisedFilesDroppedAtDestination_C(void *_instance, U32 _self, U32 dropDestinationPointer) {
    id _t1 = (id)dropDestinationPointer;
    id _result = (id)[(id)_self namesOfPromisedFilesDroppedAtDestination:_t1];
    return (U32)_result;
}

// method '-[NSObject numberOfItemsInComboBox:]'
U32 env___IM_NSObject_numberOfItemsInComboBox_C(void *_instance, U32 _self, U32 aComboBoxPointer) {
    id _t1 = (id)aComboBoxPointer;
    int _result = (int)[(id)_self numberOfItemsInComboBox:_t1];
    return (U32)_result;
}

// method '-[NSObject numberOfItemsInComboBoxCell:]'
U32 env___IM_NSObject_numberOfItemsInComboBoxCell_C(void *_instance, U32 _self, U32 comboBoxCellPointer) {
    id _t1 = (id)comboBoxCellPointer;
    int _result = (int)[(id)_self numberOfItemsInComboBoxCell:_t1];
    return (U32)_result;
}

// method '-[NSObject numberOfItemsInMenu:]'
U32 env___IM_NSObject_numberOfItemsInMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    int _result = (int)[(id)_self numberOfItemsInMenu:_t1];
    return (U32)_result;
}

// method '-[NSObject numberOfRowsInTableView:]'
U32 env___IM_NSObject_numberOfRowsInTableView_C(void *_instance, U32 _self, U32 tableViewPointer) {
    id _t1 = (id)tableViewPointer;
    int _result = (int)[(id)_self numberOfRowsInTableView:_t1];
    return (U32)_result;
}

// method '-[NSObject objectDidBeginEditing:]'
void env___IM_NSObject_objectDidBeginEditing_C(void *_instance, U32 _self, U32 editorPointer) {
    id _t1 = (id)editorPointer;
    [(id)_self objectDidBeginEditing:_t1];
}

// method '-[NSObject objectDidEndEditing:]'
void env___IM_NSObject_objectDidEndEditing_C(void *_instance, U32 _self, U32 editorPointer) {
    id _t1 = (id)editorPointer;
    [(id)_self objectDidEndEditing:_t1];
}

// method '-[NSObject offStateImage]'
U32 env___IM_NSObject_offStateImage(void *_instance, U32 _self) {
    id _result = (id)[(id)_self offStateImage];
    return (U32)_result;
}

// method '-[NSObject onStateImage]'
U32 env___IM_NSObject_onStateImage(void *_instance, U32 _self) {
    id _result = (id)[(id)_self onStateImage];
    return (U32)_result;
}

// method '-[NSObject outlineView:acceptDrop:item:childIndex:]'
U32 env___IM_NSObject_outlineView_CacceptDrop_Citem_CchildIndex_C(void *_instance, U32 _self, U32 olvPointer, U32 infoPointer, U32 itemPointer, U32 index) {
    id _t1 = (id)olvPointer;
    id _t2 = (id)infoPointer;
    id _t3 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 acceptDrop:_t2 item:_t3 childIndex:index];
    return (U32)_result;
}

// method '-[NSObject outlineView:child:ofItem:]'
U32 env___IM_NSObject_outlineView_Cchild_CofItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 index, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    id _result = (id)[(id)_self outlineView:_t1 child:index ofItem:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:didClickTableColumn:]'
void env___IM_NSObject_outlineView_CdidClickTableColumn_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)tableColumnPointer;
    [(id)_self outlineView:_t1 didClickTableColumn:_t2];
}

// method '-[NSObject outlineView:didDragTableColumn:]'
void env___IM_NSObject_outlineView_CdidDragTableColumn_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)tableColumnPointer;
    [(id)_self outlineView:_t1 didDragTableColumn:_t2];
}

// method '-[NSObject outlineView:heightOfRowByItem:]'
F32 env___IM_NSObject_outlineView_CheightOfRowByItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    float _result = (float)[(id)_self outlineView:_t1 heightOfRowByItem:_t2];
    return (F32)_result;
}

// method '-[NSObject outlineView:isItemExpandable:]'
U32 env___IM_NSObject_outlineView_CisItemExpandable_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 isItemExpandable:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:itemForPersistentObject:]'
U32 env___IM_NSObject_outlineView_CitemForPersistentObject_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 objectPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)objectPointer;
    id _result = (id)[(id)_self outlineView:_t1 itemForPersistentObject:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:mouseDownInHeaderOfTableColumn:]'
void env___IM_NSObject_outlineView_CmouseDownInHeaderOfTableColumn_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)tableColumnPointer;
    [(id)_self outlineView:_t1 mouseDownInHeaderOfTableColumn:_t2];
}

// method '-[NSObject outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:]'
U32 env___IM_NSObject_outlineView_CnamesOfPromisedFilesDroppedAtDestination_CforDraggedItems_C(void *_instance, U32 _self, U32 olvPointer, U32 dropDestinationPointer, U32 itemsPointer) {
    id _t1 = (id)olvPointer;
    id _t2 = (id)dropDestinationPointer;
    id _t3 = (id)itemsPointer;
    id _result = (id)[(id)_self outlineView:_t1 namesOfPromisedFilesDroppedAtDestination:_t2 forDraggedItems:_t3];
    return (U32)_result;
}

// method '-[NSObject outlineView:numberOfChildrenOfItem:]'
U32 env___IM_NSObject_outlineView_CnumberOfChildrenOfItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    int _result = (int)[(id)_self outlineView:_t1 numberOfChildrenOfItem:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:objectValueForTableColumn:byItem:]'
U32 env___IM_NSObject_outlineView_CobjectValueForTableColumn_CbyItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 tableColumnPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)tableColumnPointer;
    id _t3 = (id)itemPointer;
    id _result = (id)[(id)_self outlineView:_t1 objectValueForTableColumn:_t2 byItem:_t3];
    return (U32)_result;
}

// method '-[NSObject outlineView:persistentObjectForItem:]'
U32 env___IM_NSObject_outlineView_CpersistentObjectForItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    id _result = (id)[(id)_self outlineView:_t1 persistentObjectForItem:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:setObjectValue:forTableColumn:byItem:]'
void env___IM_NSObject_outlineView_CsetObjectValue_CforTableColumn_CbyItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 objectPointer, U32 tableColumnPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)objectPointer;
    id _t3 = (id)tableColumnPointer;
    id _t4 = (id)itemPointer;
    [(id)_self outlineView:_t1 setObjectValue:_t2 forTableColumn:_t3 byItem:_t4];
}

// method '-[NSObject outlineView:shouldCollapseItem:]'
U32 env___IM_NSObject_outlineView_CshouldCollapseItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 shouldCollapseItem:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:shouldEditTableColumn:item:]'
U32 env___IM_NSObject_outlineView_CshouldEditTableColumn_Citem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 tableColumnPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)tableColumnPointer;
    id _t3 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 shouldEditTableColumn:_t2 item:_t3];
    return (U32)_result;
}

// method '-[NSObject outlineView:shouldExpandItem:]'
U32 env___IM_NSObject_outlineView_CshouldExpandItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 shouldExpandItem:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:shouldSelectItem:]'
U32 env___IM_NSObject_outlineView_CshouldSelectItem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)itemPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 shouldSelectItem:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:shouldSelectTableColumn:]'
U32 env___IM_NSObject_outlineView_CshouldSelectTableColumn_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)tableColumnPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 shouldSelectTableColumn:_t2];
    return (U32)_result;
}

// method '-[NSObject outlineView:sortDescriptorsDidChange:]'
void env___IM_NSObject_outlineView_CsortDescriptorsDidChange_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 oldDescriptorsPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)oldDescriptorsPointer;
    [(id)_self outlineView:_t1 sortDescriptorsDidChange:_t2];
}

// method '-[NSObject outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:]'
U32 env___IM_NSObject_outlineView_CtoolTipForCell_Crect_CtableColumn_Citem_CmouseLocation_C(void *_instance, U32 _self, U32 ovPointer, U32 cellPointer, U32 rectPointer, U32 tcPointer, U32 itemPointer, U32 mouseLocationIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)ovPointer;
    id _t2 = (id)cellPointer;
    NSRectPointer _t3 = (NSRectPointer)rectPointer;
    id _t4 = (id)tcPointer;
    id _t5 = (id)itemPointer;
    NSPoint _t6 = *(NSPoint*)(_mem->data + mouseLocationIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t6.x);
    swap_f(&_t6.y);
    #endif
    id _result = (id)[(id)_self outlineView:_t1 toolTipForCell:_t2 rect:_t3 tableColumn:_t4 item:_t5 mouseLocation:_t6];
    return (U32)_result;
}

// method '-[NSObject outlineView:validateDrop:proposedItem:proposedChildIndex:]'
U32 env___IM_NSObject_outlineView_CvalidateDrop_CproposedItem_CproposedChildIndex_C(void *_instance, U32 _self, U32 olvPointer, U32 infoPointer, U32 itemPointer, U32 index) {
    id _t1 = (id)olvPointer;
    id _t2 = (id)infoPointer;
    id _t3 = (id)itemPointer;
    unsigned int _result = (unsigned int)[(id)_self outlineView:_t1 validateDrop:_t2 proposedItem:_t3 proposedChildIndex:index];
    return (U32)_result;
}

// method '-[NSObject outlineView:willDisplayCell:forTableColumn:item:]'
void env___IM_NSObject_outlineView_CwillDisplayCell_CforTableColumn_Citem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 cellPointer, U32 tableColumnPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)cellPointer;
    id _t3 = (id)tableColumnPointer;
    id _t4 = (id)itemPointer;
    [(id)_self outlineView:_t1 willDisplayCell:_t2 forTableColumn:_t3 item:_t4];
}

// method '-[NSObject outlineView:willDisplayOutlineCell:forTableColumn:item:]'
void env___IM_NSObject_outlineView_CwillDisplayOutlineCell_CforTableColumn_Citem_C(void *_instance, U32 _self, U32 outlineViewPointer, U32 cellPointer, U32 tableColumnPointer, U32 itemPointer) {
    id _t1 = (id)outlineViewPointer;
    id _t2 = (id)cellPointer;
    id _t3 = (id)tableColumnPointer;
    id _t4 = (id)itemPointer;
    [(id)_self outlineView:_t1 willDisplayOutlineCell:_t2 forTableColumn:_t3 item:_t4];
}

// method '-[NSObject outlineView:writeItems:toPasteboard:]'
U32 env___IM_NSObject_outlineView_CwriteItems_CtoPasteboard_C(void *_instance, U32 _self, U32 olvPointer, U32 itemsPointer, U32 pboardPointer) {
    id _t1 = (id)olvPointer;
    id _t2 = (id)itemsPointer;
    id _t3 = (id)pboardPointer;
    BOOL _result = (BOOL)[(id)_self outlineView:_t1 writeItems:_t2 toPasteboard:_t3];
    return (U32)_result;
}

// method '-[NSObject outlineViewColumnDidMove:]'
void env___IM_NSObject_outlineViewColumnDidMove_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewColumnDidMove:_t1];
}

// method '-[NSObject outlineViewColumnDidResize:]'
void env___IM_NSObject_outlineViewColumnDidResize_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewColumnDidResize:_t1];
}

// method '-[NSObject outlineViewItemDidCollapse:]'
void env___IM_NSObject_outlineViewItemDidCollapse_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewItemDidCollapse:_t1];
}

// method '-[NSObject outlineViewItemDidExpand:]'
void env___IM_NSObject_outlineViewItemDidExpand_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewItemDidExpand:_t1];
}

// method '-[NSObject outlineViewItemWillCollapse:]'
void env___IM_NSObject_outlineViewItemWillCollapse_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewItemWillCollapse:_t1];
}

// method '-[NSObject outlineViewItemWillExpand:]'
void env___IM_NSObject_outlineViewItemWillExpand_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewItemWillExpand:_t1];
}

// method '-[NSObject outlineViewSelectionDidChange:]'
void env___IM_NSObject_outlineViewSelectionDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewSelectionDidChange:_t1];
}

// method '-[NSObject outlineViewSelectionIsChanging:]'
void env___IM_NSObject_outlineViewSelectionIsChanging_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self outlineViewSelectionIsChanging:_t1];
}

// method '-[NSObject panel:compareFilename:with:caseSensitive:]'
U32 env___IM_NSObject_panel_CcompareFilename_Cwith_CcaseSensitive_C(void *_instance, U32 _self, U32 senderPointer, U32 name1Pointer, U32 name2Pointer, U32 caseSensitive) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)name1Pointer;
    id _t3 = (id)name2Pointer;
    int _result = (int)[(id)_self panel:_t1 compareFilename:_t2 with:_t3 caseSensitive:caseSensitive];
    return (U32)_result;
}

// method '-[NSObject panel:directoryDidChange:]'
void env___IM_NSObject_panel_CdirectoryDidChange_C(void *_instance, U32 _self, U32 senderPointer, U32 pathPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)pathPointer;
    [(id)_self panel:_t1 directoryDidChange:_t2];
}

// method '-[NSObject panel:isValidFilename:]'
U32 env___IM_NSObject_panel_CisValidFilename_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    BOOL _result = (BOOL)[(id)_self panel:_t1 isValidFilename:_t2];
    return (U32)_result;
}

// method '-[NSObject panel:shouldShowFilename:]'
U32 env___IM_NSObject_panel_CshouldShowFilename_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    BOOL _result = (BOOL)[(id)_self panel:_t1 shouldShowFilename:_t2];
    return (U32)_result;
}

// method '-[NSObject panel:userEnteredFilename:confirmed:]'
U32 env___IM_NSObject_panel_CuserEnteredFilename_Cconfirmed_C(void *_instance, U32 _self, U32 senderPointer, U32 filenamePointer, U32 okFlag) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)filenamePointer;
    id _result = (id)[(id)_self panel:_t1 userEnteredFilename:_t2 confirmed:okFlag];
    return (U32)_result;
}

// method '-[NSObject panel:willExpand:]'
void env___IM_NSObject_panel_CwillExpand_C(void *_instance, U32 _self, U32 senderPointer, U32 expanding) {
    id _t1 = (id)senderPointer;
    [(id)_self panel:_t1 willExpand:expanding];
}

// method '-[NSObject panelSelectionDidChange:]'
void env___IM_NSObject_panelSelectionDidChange_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self panelSelectionDidChange:_t1];
}

// method '-[NSObject pasteboard:provideDataForType:]'
void env___IM_NSObject_pasteboard_CprovideDataForType_C(void *_instance, U32 _self, U32 senderPointer, U32 typePointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)typePointer;
    [(id)_self pasteboard:_t1 provideDataForType:_t2];
}

// method '-[NSObject pasteboardChangedOwner:]'
void env___IM_NSObject_pasteboardChangedOwner_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self pasteboardChangedOwner:_t1];
}

// method '-[NSObject performDragOperation:]'
U32 env___IM_NSObject_performDragOperation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self performDragOperation:_t1];
    return (U32)_result;
}

// method '-[NSObject prepareForDragOperation:]'
U32 env___IM_NSObject_prepareForDragOperation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self prepareForDragOperation:_t1];
    return (U32)_result;
}

// method '-[NSObject provideNewButtonImage]'
U32 env___IM_NSObject_provideNewButtonImage(void *_instance, U32 _self) {
    id _result = (id)[(id)_self provideNewButtonImage];
    return (U32)_result;
}

// method '-[NSObject provideNewView:]'
U32 env___IM_NSObject_provideNewView_C(void *_instance, U32 _self, U32 initialRequest) {
    id _result = (id)[(id)_self provideNewView:initialRequest];
    return (U32)_result;
}

// method '-[NSObject readSelectionFromPasteboard:]'
U32 env___IM_NSObject_readSelectionFromPasteboard_C(void *_instance, U32 _self, U32 pboardPointer) {
    id _t1 = (id)pboardPointer;
    BOOL _result = (BOOL)[(id)_self readSelectionFromPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSObject representedObject]'
U32 env___IM_NSObject_representedObject(void *_instance, U32 _self) {
    id _result = (id)[(id)_self representedObject];
    return (U32)_result;
}

// method '-[NSObject selectedRange]'
void env___IM_NSObject_selectedRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(id)_self selectedRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject selectionShouldChangeInOutlineView:]'
U32 env___IM_NSObject_selectionShouldChangeInOutlineView_C(void *_instance, U32 _self, U32 outlineViewPointer) {
    id _t1 = (id)outlineViewPointer;
    BOOL _result = (BOOL)[(id)_self selectionShouldChangeInOutlineView:_t1];
    return (U32)_result;
}

// method '-[NSObject selectionShouldChangeInTableView:]'
U32 env___IM_NSObject_selectionShouldChangeInTableView_C(void *_instance, U32 _self, U32 aTableViewPointer) {
    id _t1 = (id)aTableViewPointer;
    BOOL _result = (BOOL)[(id)_self selectionShouldChangeInTableView:_t1];
    return (U32)_result;
}

// method '+[NSObject separatorItem]'
U32 env___CM_NSObject_separatorItem(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class separatorItem];
    return (U32)_result;
}

// method '-[NSObject setAction:]'
void env___IM_NSObject_setAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(id)_self setAction:_t1];
}

// method '-[NSObject setAlternate:]'
void env___IM_NSObject_setAlternate_C(void *_instance, U32 _self, U32 isAlternate) {
    [(id)_self setAlternate:isAlternate];
}

// method '-[NSObject setAttachment:]'
void env___IM_NSObject_setAttachment_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(id)_self setAttachment:_t1];
}

// method '-[NSObject setAttributedTitle:]'
void env___IM_NSObject_setAttributedTitle_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(id)_self setAttributedTitle:_t1];
}

// method '-[NSObject setColor:]'
void env___IM_NSObject_setColor_C(void *_instance, U32 _self, U32 newColorPointer) {
    id _t1 = (id)newColorPointer;
    [(id)_self setColor:_t1];
}

// method '+[NSObject setDefaultPlaceholder:forMarker:withBinding:]'
void env___CM_NSObject_setDefaultPlaceholder_CforMarker_CwithBinding_C(void *_instance, U32 _class, U32 placeholderPointer, U32 markerPointer, U32 bindingPointer) {
    id _t1 = (id)placeholderPointer;
    id _t2 = (id)markerPointer;
    id _t3 = (id)bindingPointer;
    [(Class)_class setDefaultPlaceholder:_t1 forMarker:_t2 withBinding:_t3];
}

// method '-[NSObject setEnabled:]'
void env___IM_NSObject_setEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(id)_self setEnabled:flag];
}

// method '-[NSObject setImage:]'
void env___IM_NSObject_setImage_C(void *_instance, U32 _self, U32 menuImagePointer) {
    id _t1 = (id)menuImagePointer;
    [(id)_self setImage:_t1];
}

// method '-[NSObject setIndentationLevel:]'
void env___IM_NSObject_setIndentationLevel_C(void *_instance, U32 _self, U32 indentationLevel) {
    [(id)_self setIndentationLevel:indentationLevel];
}

// method '-[NSObject setIntAttribute:value:forGlyphAtIndex:]'
void env___IM_NSObject_setIntAttribute_Cvalue_CforGlyphAtIndex_C(void *_instance, U32 _self, U32 attributeTag, U32 val, U32 glyphIndex) {
    [(id)_self setIntAttribute:attributeTag value:val forGlyphAtIndex:glyphIndex];
}

// method '-[NSObject setKeyEquivalent:]'
void env___IM_NSObject_setKeyEquivalent_C(void *_instance, U32 _self, U32 aKeyEquivalentPointer) {
    id _t1 = (id)aKeyEquivalentPointer;
    [(id)_self setKeyEquivalent:_t1];
}

// method '-[NSObject setKeyEquivalentModifierMask:]'
void env___IM_NSObject_setKeyEquivalentModifierMask_C(void *_instance, U32 _self, U32 mask) {
    [(id)_self setKeyEquivalentModifierMask:mask];
}

// method '-[NSObject setMarkedText:selectedRange:]'
void env___IM_NSObject_setMarkedText_CselectedRange_C(void *_instance, U32 _self, U32 aStringPointer, U32 selRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aStringPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + selRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(id)_self setMarkedText:_t1 selectedRange:_t2];
}

// method '-[NSObject setMenu:]'
void env___IM_NSObject_setMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(id)_self setMenu:_t1];
}

// method '-[NSObject setMixedStateImage:]'
void env___IM_NSObject_setMixedStateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(id)_self setMixedStateImage:_t1];
}

// method '-[NSObject setMnemonicLocation:]'
void env___IM_NSObject_setMnemonicLocation_C(void *_instance, U32 _self, U32 location) {
    [(id)_self setMnemonicLocation:location];
}

// method '-[NSObject setMode:]'
void env___IM_NSObject_setMode_C(void *_instance, U32 _self, U32 mode) {
    [(id)_self setMode:mode];
}

// method '-[NSObject setOffStateImage:]'
void env___IM_NSObject_setOffStateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(id)_self setOffStateImage:_t1];
}

// method '-[NSObject setOnStateImage:]'
void env___IM_NSObject_setOnStateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(id)_self setOnStateImage:_t1];
}

// method '-[NSObject setRepresentedObject:]'
void env___IM_NSObject_setRepresentedObject_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(id)_self setRepresentedObject:_t1];
}

// method '-[NSObject setState:]'
void env___IM_NSObject_setState_C(void *_instance, U32 _self, U32 state) {
    [(id)_self setState:state];
}

// method '-[NSObject setSubmenu:]'
void env___IM_NSObject_setSubmenu_C(void *_instance, U32 _self, U32 submenuPointer) {
    id _t1 = (id)submenuPointer;
    [(id)_self setSubmenu:_t1];
}

// method '-[NSObject setTag:]'
void env___IM_NSObject_setTag_C(void *_instance, U32 _self, U32 anInt) {
    [(id)_self setTag:anInt];
}

// method '-[NSObject setTarget:]'
void env___IM_NSObject_setTarget_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(id)_self setTarget:_t1];
}

// method '-[NSObject setTitle:]'
void env___IM_NSObject_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(id)_self setTitle:_t1];
}

// method '-[NSObject setTitleWithMnemonic:]'
void env___IM_NSObject_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(id)_self setTitleWithMnemonic:_t1];
}

// method '-[NSObject setToolTip:]'
void env___IM_NSObject_setToolTip_C(void *_instance, U32 _self, U32 toolTipPointer) {
    id _t1 = (id)toolTipPointer;
    [(id)_self setToolTip:_t1];
}

// method '+[NSObject setUsesUserKeyEquivalents:]'
void env___CM_NSObject_setUsesUserKeyEquivalents_C(void *_instance, U32 _class, U32 flag) {
    [(Class)_class setUsesUserKeyEquivalents:flag];
}

// method '-[NSObject slideDraggedImageTo:]'
void env___IM_NSObject_slideDraggedImageTo_C(void *_instance, U32 _self, U32 screenPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + screenPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(id)_self slideDraggedImageTo:_t1];
}

// method '-[NSObject sound:didFinishPlaying:]'
void env___IM_NSObject_sound_CdidFinishPlaying_C(void *_instance, U32 _self, U32 soundPointer, U32 aBool) {
    id _t1 = (id)soundPointer;
    [(id)_self sound:_t1 didFinishPlaying:aBool];
}

// method '-[NSObject speechRecognizer:didRecognizeCommand:]'
void env___IM_NSObject_speechRecognizer_CdidRecognizeCommand_C(void *_instance, U32 _self, U32 senderPointer, U32 commandPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)commandPointer;
    [(id)_self speechRecognizer:_t1 didRecognizeCommand:_t2];
}

// method '-[NSObject speechSynthesizer:didFinishSpeaking:]'
void env___IM_NSObject_speechSynthesizer_CdidFinishSpeaking_C(void *_instance, U32 _self, U32 senderPointer, U32 finishedSpeaking) {
    id _t1 = (id)senderPointer;
    [(id)_self speechSynthesizer:_t1 didFinishSpeaking:finishedSpeaking];
}

// method '-[NSObject speechSynthesizer:willSpeakPhoneme:]'
void env___IM_NSObject_speechSynthesizer_CwillSpeakPhoneme_C(void *_instance, U32 _self, U32 senderPointer, U32 phonemeOpcode) {
    id _t1 = (id)senderPointer;
    [(id)_self speechSynthesizer:_t1 willSpeakPhoneme:phonemeOpcode];
}

// method '-[NSObject speechSynthesizer:willSpeakWord:ofString:]'
void env___IM_NSObject_speechSynthesizer_CwillSpeakWord_CofString_C(void *_instance, U32 _self, U32 senderPointer, U32 characterRangeIndirect, U32 stringPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)senderPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + characterRangeIndirect);
    id _t3 = (id)stringPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(id)_self speechSynthesizer:_t1 willSpeakWord:_t2 ofString:_t3];
}

// method '-[NSObject splitView:canCollapseSubview:]'
U32 env___IM_NSObject_splitView_CcanCollapseSubview_C(void *_instance, U32 _self, U32 senderPointer, U32 subviewPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)subviewPointer;
    BOOL _result = (BOOL)[(id)_self splitView:_t1 canCollapseSubview:_t2];
    return (U32)_result;
}

// method '-[NSObject splitView:constrainMaxCoordinate:ofSubviewAt:]'
F32 env___IM_NSObject_splitView_CconstrainMaxCoordinate_CofSubviewAt_C(void *_instance, U32 _self, U32 senderPointer, F32 proposedCoord, U32 offset) {
    id _t1 = (id)senderPointer;
    float _result = (float)[(id)_self splitView:_t1 constrainMaxCoordinate:proposedCoord ofSubviewAt:offset];
    return (F32)_result;
}

// method '-[NSObject splitView:constrainMinCoordinate:ofSubviewAt:]'
F32 env___IM_NSObject_splitView_CconstrainMinCoordinate_CofSubviewAt_C(void *_instance, U32 _self, U32 senderPointer, F32 proposedCoord, U32 offset) {
    id _t1 = (id)senderPointer;
    float _result = (float)[(id)_self splitView:_t1 constrainMinCoordinate:proposedCoord ofSubviewAt:offset];
    return (F32)_result;
}

// method '-[NSObject splitView:constrainSplitPosition:ofSubviewAt:]'
F32 env___IM_NSObject_splitView_CconstrainSplitPosition_CofSubviewAt_C(void *_instance, U32 _self, U32 splitViewPointer, F32 proposedPosition, U32 index) {
    id _t1 = (id)splitViewPointer;
    float _result = (float)[(id)_self splitView:_t1 constrainSplitPosition:proposedPosition ofSubviewAt:index];
    return (F32)_result;
}

// method '-[NSObject splitView:resizeSubviewsWithOldSize:]'
void env___IM_NSObject_splitView_CresizeSubviewsWithOldSize_C(void *_instance, U32 _self, U32 senderPointer, U32 oldSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)senderPointer;
    NSSize _t2 = *(NSSize*)(_mem->data + oldSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.width);
    swap_f(&_t2.height);
    #endif
    [(id)_self splitView:_t1 resizeSubviewsWithOldSize:_t2];
}

// method '-[NSObject splitViewDidResizeSubviews:]'
void env___IM_NSObject_splitViewDidResizeSubviews_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self splitViewDidResizeSubviews:_t1];
}

// method '-[NSObject splitViewWillResizeSubviews:]'
void env___IM_NSObject_splitViewWillResizeSubviews_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self splitViewWillResizeSubviews:_t1];
}

// method '-[NSObject state]'
U32 env___IM_NSObject_state(void *_instance, U32 _self) {
    int _result = (int)[(id)_self state];
    return (U32)_result;
}

// method '-[NSObject submenu]'
U32 env___IM_NSObject_submenu(void *_instance, U32 _self) {
    id _result = (id)[(id)_self submenu];
    return (U32)_result;
}

// method '-[NSObject supportsMode:]'
U32 env___IM_NSObject_supportsMode_C(void *_instance, U32 _self, U32 mode) {
    BOOL _result = (BOOL)[(id)_self supportsMode:mode];
    return (U32)_result;
}

// method '-[NSObject tabView:didSelectTabViewItem:]'
void env___IM_NSObject_tabView_CdidSelectTabViewItem_C(void *_instance, U32 _self, U32 tabViewPointer, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewPointer;
    id _t2 = (id)tabViewItemPointer;
    [(id)_self tabView:_t1 didSelectTabViewItem:_t2];
}

// method '-[NSObject tabView:shouldSelectTabViewItem:]'
U32 env___IM_NSObject_tabView_CshouldSelectTabViewItem_C(void *_instance, U32 _self, U32 tabViewPointer, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewPointer;
    id _t2 = (id)tabViewItemPointer;
    BOOL _result = (BOOL)[(id)_self tabView:_t1 shouldSelectTabViewItem:_t2];
    return (U32)_result;
}

// method '-[NSObject tabView:willSelectTabViewItem:]'
void env___IM_NSObject_tabView_CwillSelectTabViewItem_C(void *_instance, U32 _self, U32 tabViewPointer, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewPointer;
    id _t2 = (id)tabViewItemPointer;
    [(id)_self tabView:_t1 willSelectTabViewItem:_t2];
}

// method '-[NSObject tabViewDidChangeNumberOfTabViewItems:]'
void env___IM_NSObject_tabViewDidChangeNumberOfTabViewItems_C(void *_instance, U32 _self, U32 TabViewPointer) {
    id _t1 = (id)TabViewPointer;
    [(id)_self tabViewDidChangeNumberOfTabViewItems:_t1];
}

// method '-[NSObject tableView:acceptDrop:row:dropOperation:]'
U32 env___IM_NSObject_tableView_CacceptDrop_Crow_CdropOperation_C(void *_instance, U32 _self, U32 tvPointer, U32 infoPointer, U32 row, U32 op) {
    id _t1 = (id)tvPointer;
    id _t2 = (id)infoPointer;
    BOOL _result = (BOOL)[(id)_self tableView:_t1 acceptDrop:_t2 row:row dropOperation:op];
    return (U32)_result;
}

// method '-[NSObject tableView:didClickTableColumn:]'
void env___IM_NSObject_tableView_CdidClickTableColumn_C(void *_instance, U32 _self, U32 tableViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)tableColumnPointer;
    [(id)_self tableView:_t1 didClickTableColumn:_t2];
}

// method '-[NSObject tableView:didDragTableColumn:]'
void env___IM_NSObject_tableView_CdidDragTableColumn_C(void *_instance, U32 _self, U32 tableViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)tableColumnPointer;
    [(id)_self tableView:_t1 didDragTableColumn:_t2];
}

// method '-[NSObject tableView:heightOfRow:]'
F32 env___IM_NSObject_tableView_CheightOfRow_C(void *_instance, U32 _self, U32 tableViewPointer, U32 row) {
    id _t1 = (id)tableViewPointer;
    float _result = (float)[(id)_self tableView:_t1 heightOfRow:row];
    return (F32)_result;
}

// method '-[NSObject tableView:mouseDownInHeaderOfTableColumn:]'
void env___IM_NSObject_tableView_CmouseDownInHeaderOfTableColumn_C(void *_instance, U32 _self, U32 tableViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)tableColumnPointer;
    [(id)_self tableView:_t1 mouseDownInHeaderOfTableColumn:_t2];
}

// method '-[NSObject tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:]'
U32 env___IM_NSObject_tableView_CnamesOfPromisedFilesDroppedAtDestination_CforDraggedRowsWithIndexes_C(void *_instance, U32 _self, U32 tvPointer, U32 dropDestinationPointer, U32 indexSetPointer) {
    id _t1 = (id)tvPointer;
    id _t2 = (id)dropDestinationPointer;
    id _t3 = (id)indexSetPointer;
    id _result = (id)[(id)_self tableView:_t1 namesOfPromisedFilesDroppedAtDestination:_t2 forDraggedRowsWithIndexes:_t3];
    return (U32)_result;
}

// method '-[NSObject tableView:objectValueForTableColumn:row:]'
U32 env___IM_NSObject_tableView_CobjectValueForTableColumn_Crow_C(void *_instance, U32 _self, U32 tableViewPointer, U32 tableColumnPointer, U32 row) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)tableColumnPointer;
    id _result = (id)[(id)_self tableView:_t1 objectValueForTableColumn:_t2 row:row];
    return (U32)_result;
}

// method '-[NSObject tableView:setObjectValue:forTableColumn:row:]'
void env___IM_NSObject_tableView_CsetObjectValue_CforTableColumn_Crow_C(void *_instance, U32 _self, U32 tableViewPointer, U32 objectPointer, U32 tableColumnPointer, U32 row) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)objectPointer;
    id _t3 = (id)tableColumnPointer;
    [(id)_self tableView:_t1 setObjectValue:_t2 forTableColumn:_t3 row:row];
}

// method '-[NSObject tableView:shouldEditTableColumn:row:]'
U32 env___IM_NSObject_tableView_CshouldEditTableColumn_Crow_C(void *_instance, U32 _self, U32 tableViewPointer, U32 tableColumnPointer, U32 row) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)tableColumnPointer;
    BOOL _result = (BOOL)[(id)_self tableView:_t1 shouldEditTableColumn:_t2 row:row];
    return (U32)_result;
}

// method '-[NSObject tableView:shouldSelectRow:]'
U32 env___IM_NSObject_tableView_CshouldSelectRow_C(void *_instance, U32 _self, U32 tableViewPointer, U32 row) {
    id _t1 = (id)tableViewPointer;
    BOOL _result = (BOOL)[(id)_self tableView:_t1 shouldSelectRow:row];
    return (U32)_result;
}

// method '-[NSObject tableView:shouldSelectTableColumn:]'
U32 env___IM_NSObject_tableView_CshouldSelectTableColumn_C(void *_instance, U32 _self, U32 tableViewPointer, U32 tableColumnPointer) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)tableColumnPointer;
    BOOL _result = (BOOL)[(id)_self tableView:_t1 shouldSelectTableColumn:_t2];
    return (U32)_result;
}

// method '-[NSObject tableView:sortDescriptorsDidChange:]'
void env___IM_NSObject_tableView_CsortDescriptorsDidChange_C(void *_instance, U32 _self, U32 tableViewPointer, U32 oldDescriptorsPointer) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)oldDescriptorsPointer;
    [(id)_self tableView:_t1 sortDescriptorsDidChange:_t2];
}

// method '-[NSObject tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:]'
U32 env___IM_NSObject_tableView_CtoolTipForCell_Crect_CtableColumn_Crow_CmouseLocation_C(void *_instance, U32 _self, U32 tvPointer, U32 cellPointer, U32 rectPointer, U32 tcPointer, U32 row, U32 mouseLocationIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)tvPointer;
    id _t2 = (id)cellPointer;
    NSRectPointer _t3 = (NSRectPointer)rectPointer;
    id _t4 = (id)tcPointer;
    NSPoint _t5 = *(NSPoint*)(_mem->data + mouseLocationIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t5.x);
    swap_f(&_t5.y);
    #endif
    id _result = (id)[(id)_self tableView:_t1 toolTipForCell:_t2 rect:_t3 tableColumn:_t4 row:row mouseLocation:_t5];
    return (U32)_result;
}

// method '-[NSObject tableView:validateDrop:proposedRow:proposedDropOperation:]'
U32 env___IM_NSObject_tableView_CvalidateDrop_CproposedRow_CproposedDropOperation_C(void *_instance, U32 _self, U32 tvPointer, U32 infoPointer, U32 row, U32 op) {
    id _t1 = (id)tvPointer;
    id _t2 = (id)infoPointer;
    unsigned int _result = (unsigned int)[(id)_self tableView:_t1 validateDrop:_t2 proposedRow:row proposedDropOperation:op];
    return (U32)_result;
}

// method '-[NSObject tableView:willDisplayCell:forTableColumn:row:]'
void env___IM_NSObject_tableView_CwillDisplayCell_CforTableColumn_Crow_C(void *_instance, U32 _self, U32 tableViewPointer, U32 cellPointer, U32 tableColumnPointer, U32 row) {
    id _t1 = (id)tableViewPointer;
    id _t2 = (id)cellPointer;
    id _t3 = (id)tableColumnPointer;
    [(id)_self tableView:_t1 willDisplayCell:_t2 forTableColumn:_t3 row:row];
}

// method '-[NSObject tableView:writeRows:toPasteboard:]'
U32 env___IM_NSObject_tableView_CwriteRows_CtoPasteboard_C(void *_instance, U32 _self, U32 tvPointer, U32 rowsPointer, U32 pboardPointer) {
    id _t1 = (id)tvPointer;
    id _t2 = (id)rowsPointer;
    id _t3 = (id)pboardPointer;
    BOOL _result = (BOOL)[(id)_self tableView:_t1 writeRows:_t2 toPasteboard:_t3];
    return (U32)_result;
}

// method '-[NSObject tableView:writeRowsWithIndexes:toPasteboard:]'
U32 env___IM_NSObject_tableView_CwriteRowsWithIndexes_CtoPasteboard_C(void *_instance, U32 _self, U32 tvPointer, U32 rowIndexesPointer, U32 pboardPointer) {
    id _t1 = (id)tvPointer;
    id _t2 = (id)rowIndexesPointer;
    id _t3 = (id)pboardPointer;
    BOOL _result = (BOOL)[(id)_self tableView:_t1 writeRowsWithIndexes:_t2 toPasteboard:_t3];
    return (U32)_result;
}

// method '-[NSObject tableViewColumnDidMove:]'
void env___IM_NSObject_tableViewColumnDidMove_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self tableViewColumnDidMove:_t1];
}

// method '-[NSObject tableViewColumnDidResize:]'
void env___IM_NSObject_tableViewColumnDidResize_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self tableViewColumnDidResize:_t1];
}

// method '-[NSObject tableViewSelectionDidChange:]'
void env___IM_NSObject_tableViewSelectionDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self tableViewSelectionDidChange:_t1];
}

// method '-[NSObject tableViewSelectionIsChanging:]'
void env___IM_NSObject_tableViewSelectionIsChanging_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self tableViewSelectionIsChanging:_t1];
}

// method '-[NSObject tag]'
U32 env___IM_NSObject_tag(void *_instance, U32 _self) {
    int _result = (int)[(id)_self tag];
    return (U32)_result;
}

// method '-[NSObject target]'
U32 env___IM_NSObject_target(void *_instance, U32 _self) {
    id _result = (id)[(id)_self target];
    return (U32)_result;
}

// method '-[NSObject terminate:]'
void env___IM_NSObject_terminate_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self terminate:_t1];
}

// method '-[NSObject textDidBeginEditing:]'
void env___IM_NSObject_textDidBeginEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textDidBeginEditing:_t1];
}

// method '-[NSObject textDidChange:]'
void env___IM_NSObject_textDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textDidChange:_t1];
}

// method '-[NSObject textDidEndEditing:]'
void env___IM_NSObject_textDidEndEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textDidEndEditing:_t1];
}

// method '-[NSObject textShouldBeginEditing:]'
U32 env___IM_NSObject_textShouldBeginEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(id)_self textShouldBeginEditing:_t1];
    return (U32)_result;
}

// method '-[NSObject textShouldEndEditing:]'
U32 env___IM_NSObject_textShouldEndEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(id)_self textShouldEndEditing:_t1];
    return (U32)_result;
}

// method '-[NSObject textStorageDidProcessEditing:]'
void env___IM_NSObject_textStorageDidProcessEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textStorageDidProcessEditing:_t1];
}

// method '-[NSObject textStorageWillProcessEditing:]'
void env___IM_NSObject_textStorageWillProcessEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textStorageWillProcessEditing:_t1];
}

// method '-[NSObject textView:clickedOnCell:inRect:]'
void env___IM_NSObject_textView_CclickedOnCell_CinRect_C(void *_instance, U32 _self, U32 textViewPointer, U32 cellPointer, U32 cellFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    id _t2 = (id)cellPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(id)_self textView:_t1 clickedOnCell:_t2 inRect:_t3];
}

// method '-[NSObject textView:clickedOnCell:inRect:atIndex:]'
void env___IM_NSObject_textView_CclickedOnCell_CinRect_CatIndex_C(void *_instance, U32 _self, U32 textViewPointer, U32 cellPointer, U32 cellFrameIndirect, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    id _t2 = (id)cellPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(id)_self textView:_t1 clickedOnCell:_t2 inRect:_t3 atIndex:charIndex];
}

// method '-[NSObject textView:clickedOnLink:]'
U32 env___IM_NSObject_textView_CclickedOnLink_C(void *_instance, U32 _self, U32 textViewPointer, U32 linkPointer) {
    id _t1 = (id)textViewPointer;
    id _t2 = (id)linkPointer;
    BOOL _result = (BOOL)[(id)_self textView:_t1 clickedOnLink:_t2];
    return (U32)_result;
}

// method '-[NSObject textView:clickedOnLink:atIndex:]'
U32 env___IM_NSObject_textView_CclickedOnLink_CatIndex_C(void *_instance, U32 _self, U32 textViewPointer, U32 linkPointer, U32 charIndex) {
    id _t1 = (id)textViewPointer;
    id _t2 = (id)linkPointer;
    BOOL _result = (BOOL)[(id)_self textView:_t1 clickedOnLink:_t2 atIndex:charIndex];
    return (U32)_result;
}

// method '-[NSObject textView:completions:forPartialWordRange:indexOfSelectedItem:]'
U32 env___IM_NSObject_textView_Ccompletions_CforPartialWordRange_CindexOfSelectedItem_C(void *_instance, U32 _self, U32 textViewPointer, U32 wordsPointer, U32 charRangeIndirect, U32 indexPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    id _t2 = (id)wordsPointer;
    NSRange _t3 = *(NSRange*)(_mem->data + charRangeIndirect);
    int* _t4 = (int*)indexPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    #endif
    id _result = (id)[(id)_self textView:_t1 completions:_t2 forPartialWordRange:_t3 indexOfSelectedItem:_t4];
    return (U32)_result;
}

// method '-[NSObject textView:doCommandBySelector:]'
U32 env___IM_NSObject_textView_CdoCommandBySelector_C(void *_instance, U32 _self, U32 textViewPointer, U32 commandSelectorPointer) {
    id _t1 = (id)textViewPointer;
    SEL _t2 = (SEL)commandSelectorPointer;
    BOOL _result = (BOOL)[(id)_self textView:_t1 doCommandBySelector:_t2];
    return (U32)_result;
}

// method '-[NSObject textView:doubleClickedOnCell:inRect:]'
void env___IM_NSObject_textView_CdoubleClickedOnCell_CinRect_C(void *_instance, U32 _self, U32 textViewPointer, U32 cellPointer, U32 cellFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    id _t2 = (id)cellPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(id)_self textView:_t1 doubleClickedOnCell:_t2 inRect:_t3];
}

// method '-[NSObject textView:doubleClickedOnCell:inRect:atIndex:]'
void env___IM_NSObject_textView_CdoubleClickedOnCell_CinRect_CatIndex_C(void *_instance, U32 _self, U32 textViewPointer, U32 cellPointer, U32 cellFrameIndirect, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    id _t2 = (id)cellPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + cellFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(id)_self textView:_t1 doubleClickedOnCell:_t2 inRect:_t3 atIndex:charIndex];
}

// method '-[NSObject textView:draggedCell:inRect:event:]'
void env___IM_NSObject_textView_CdraggedCell_CinRect_Cevent_C(void *_instance, U32 _self, U32 viewPointer, U32 cellPointer, U32 rectIndirect, U32 eventPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)viewPointer;
    id _t2 = (id)cellPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + rectIndirect);
    id _t4 = (id)eventPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(id)_self textView:_t1 draggedCell:_t2 inRect:_t3 event:_t4];
}

// method '-[NSObject textView:draggedCell:inRect:event:atIndex:]'
void env___IM_NSObject_textView_CdraggedCell_CinRect_Cevent_CatIndex_C(void *_instance, U32 _self, U32 viewPointer, U32 cellPointer, U32 rectIndirect, U32 eventPointer, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)viewPointer;
    id _t2 = (id)cellPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + rectIndirect);
    id _t4 = (id)eventPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(id)_self textView:_t1 draggedCell:_t2 inRect:_t3 event:_t4 atIndex:charIndex];
}

// method '-[NSObject textView:shouldChangeTextInRange:replacementString:]'
U32 env___IM_NSObject_textView_CshouldChangeTextInRange_CreplacementString_C(void *_instance, U32 _self, U32 textViewPointer, U32 affectedCharRangeIndirect, U32 replacementStringPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + affectedCharRangeIndirect);
    id _t3 = (id)replacementStringPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    BOOL _result = (BOOL)[(id)_self textView:_t1 shouldChangeTextInRange:_t2 replacementString:_t3];
    return (U32)_result;
}

// method '-[NSObject textView:shouldChangeTextInRanges:replacementStrings:]'
U32 env___IM_NSObject_textView_CshouldChangeTextInRanges_CreplacementStrings_C(void *_instance, U32 _self, U32 textViewPointer, U32 affectedRangesPointer, U32 replacementStringsPointer) {
    id _t1 = (id)textViewPointer;
    id _t2 = (id)affectedRangesPointer;
    id _t3 = (id)replacementStringsPointer;
    BOOL _result = (BOOL)[(id)_self textView:_t1 shouldChangeTextInRanges:_t2 replacementStrings:_t3];
    return (U32)_result;
}

// method '-[NSObject textView:shouldChangeTypingAttributes:toAttributes:]'
U32 env___IM_NSObject_textView_CshouldChangeTypingAttributes_CtoAttributes_C(void *_instance, U32 _self, U32 textViewPointer, U32 oldTypingAttributesPointer, U32 newTypingAttributesPointer) {
    id _t1 = (id)textViewPointer;
    id _t2 = (id)oldTypingAttributesPointer;
    id _t3 = (id)newTypingAttributesPointer;
    id _result = (id)[(id)_self textView:_t1 shouldChangeTypingAttributes:_t2 toAttributes:_t3];
    return (U32)_result;
}

// method '-[NSObject textView:willChangeSelectionFromCharacterRange:toCharacterRange:]'
void env___IM_NSObject_textView_CwillChangeSelectionFromCharacterRange_CtoCharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 textViewPointer, U32 oldSelectedCharRangeIndirect, U32 newSelectedCharRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textViewPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + oldSelectedCharRangeIndirect);
    NSRange _t3 = *(NSRange*)(_mem->data + newSelectedCharRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    #endif
    NSRange _result = (NSRange)[(id)_self textView:_t1 willChangeSelectionFromCharacterRange:_t2 toCharacterRange:_t3];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:]'
U32 env___IM_NSObject_textView_CwillChangeSelectionFromCharacterRanges_CtoCharacterRanges_C(void *_instance, U32 _self, U32 textViewPointer, U32 oldSelectedCharRangesPointer, U32 newSelectedCharRangesPointer) {
    id _t1 = (id)textViewPointer;
    id _t2 = (id)oldSelectedCharRangesPointer;
    id _t3 = (id)newSelectedCharRangesPointer;
    id _result = (id)[(id)_self textView:_t1 willChangeSelectionFromCharacterRanges:_t2 toCharacterRanges:_t3];
    return (U32)_result;
}

// method '-[NSObject textView:willDisplayToolTip:forCharacterAtIndex:]'
U32 env___IM_NSObject_textView_CwillDisplayToolTip_CforCharacterAtIndex_C(void *_instance, U32 _self, U32 textViewPointer, U32 tooltipPointer, U32 characterIndex) {
    id _t1 = (id)textViewPointer;
    id _t2 = (id)tooltipPointer;
    id _result = (id)[(id)_self textView:_t1 willDisplayToolTip:_t2 forCharacterAtIndex:characterIndex];
    return (U32)_result;
}

// method '-[NSObject textView:writablePasteboardTypesForCell:atIndex:]'
U32 env___IM_NSObject_textView_CwritablePasteboardTypesForCell_CatIndex_C(void *_instance, U32 _self, U32 viewPointer, U32 cellPointer, U32 charIndex) {
    id _t1 = (id)viewPointer;
    id _t2 = (id)cellPointer;
    id _result = (id)[(id)_self textView:_t1 writablePasteboardTypesForCell:_t2 atIndex:charIndex];
    return (U32)_result;
}

// method '-[NSObject textView:writeCell:atIndex:toPasteboard:type:]'
U32 env___IM_NSObject_textView_CwriteCell_CatIndex_CtoPasteboard_Ctype_C(void *_instance, U32 _self, U32 viewPointer, U32 cellPointer, U32 charIndex, U32 pboardPointer, U32 typePointer) {
    id _t1 = (id)viewPointer;
    id _t2 = (id)cellPointer;
    id _t3 = (id)pboardPointer;
    id _t4 = (id)typePointer;
    BOOL _result = (BOOL)[(id)_self textView:_t1 writeCell:_t2 atIndex:charIndex toPasteboard:_t3 type:_t4];
    return (U32)_result;
}

// method '-[NSObject textViewDidChangeSelection:]'
void env___IM_NSObject_textViewDidChangeSelection_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textViewDidChangeSelection:_t1];
}

// method '-[NSObject textViewDidChangeTypingAttributes:]'
void env___IM_NSObject_textViewDidChangeTypingAttributes_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self textViewDidChangeTypingAttributes:_t1];
}

// method '-[NSObject title]'
U32 env___IM_NSObject_title(void *_instance, U32 _self) {
    id _result = (id)[(id)_self title];
    return (U32)_result;
}

// method '-[NSObject tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:]'
U32 env___IM_NSObject_tokenField_CcompletionsForSubstring_CindexOfToken_CindexOfSelectedItem_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 substringPointer, U32 tokenIndex, U32 selectedIndexPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)substringPointer;
    int* _t3 = (int*)selectedIndexPointer;
    id _result = (id)[(id)_self tokenField:_t1 completionsForSubstring:_t2 indexOfToken:tokenIndex indexOfSelectedItem:_t3];
    return (U32)_result;
}

// method '-[NSObject tokenField:displayStringForRepresentedObject:]'
U32 env___IM_NSObject_tokenField_CdisplayStringForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)representedObjectPointer;
    id _result = (id)[(id)_self tokenField:_t1 displayStringForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:editingStringForRepresentedObject:]'
U32 env___IM_NSObject_tokenField_CeditingStringForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)representedObjectPointer;
    id _result = (id)[(id)_self tokenField:_t1 editingStringForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:hasMenuForRepresentedObject:]'
U32 env___IM_NSObject_tokenField_ChasMenuForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)representedObjectPointer;
    BOOL _result = (BOOL)[(id)_self tokenField:_t1 hasMenuForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:menuForRepresentedObject:]'
U32 env___IM_NSObject_tokenField_CmenuForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)representedObjectPointer;
    id _result = (id)[(id)_self tokenField:_t1 menuForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:readFromPasteboard:]'
U32 env___IM_NSObject_tokenField_CreadFromPasteboard_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 pboardPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)pboardPointer;
    id _result = (id)[(id)_self tokenField:_t1 readFromPasteboard:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:representedObjectForEditingString:]'
U32 env___IM_NSObject_tokenField_CrepresentedObjectForEditingString_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 editingStringPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)editingStringPointer;
    id _result = (id)[(id)_self tokenField:_t1 representedObjectForEditingString:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:shouldAddObjects:atIndex:]'
U32 env___IM_NSObject_tokenField_CshouldAddObjects_CatIndex_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 tokensPointer, U32 index) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)tokensPointer;
    id _result = (id)[(id)_self tokenField:_t1 shouldAddObjects:_t2 atIndex:index];
    return (U32)_result;
}

// method '-[NSObject tokenField:styleForRepresentedObject:]'
U32 env___IM_NSObject_tokenField_CstyleForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)representedObjectPointer;
    int _result = (int)[(id)_self tokenField:_t1 styleForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenField:writeRepresentedObjects:toPasteboard:]'
U32 env___IM_NSObject_tokenField_CwriteRepresentedObjects_CtoPasteboard_C(void *_instance, U32 _self, U32 tokenFieldPointer, U32 objectsPointer, U32 pboardPointer) {
    id _t1 = (id)tokenFieldPointer;
    id _t2 = (id)objectsPointer;
    id _t3 = (id)pboardPointer;
    BOOL _result = (BOOL)[(id)_self tokenField:_t1 writeRepresentedObjects:_t2 toPasteboard:_t3];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:]'
U32 env___IM_NSObject_tokenFieldCell_CcompletionsForSubstring_CindexOfToken_CindexOfSelectedItem_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 substringPointer, U32 tokenIndex, U32 selectedIndexPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)substringPointer;
    int* _t3 = (int*)selectedIndexPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 completionsForSubstring:_t2 indexOfToken:tokenIndex indexOfSelectedItem:_t3];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:displayStringForRepresentedObject:]'
U32 env___IM_NSObject_tokenFieldCell_CdisplayStringForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)representedObjectPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 displayStringForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:editingStringForRepresentedObject:]'
U32 env___IM_NSObject_tokenFieldCell_CeditingStringForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)representedObjectPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 editingStringForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:hasMenuForRepresentedObject:]'
U32 env___IM_NSObject_tokenFieldCell_ChasMenuForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)representedObjectPointer;
    BOOL _result = (BOOL)[(id)_self tokenFieldCell:_t1 hasMenuForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:menuForRepresentedObject:]'
U32 env___IM_NSObject_tokenFieldCell_CmenuForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)representedObjectPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 menuForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:readFromPasteboard:]'
U32 env___IM_NSObject_tokenFieldCell_CreadFromPasteboard_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 pboardPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)pboardPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 readFromPasteboard:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:representedObjectForEditingString:]'
U32 env___IM_NSObject_tokenFieldCell_CrepresentedObjectForEditingString_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 editingStringPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)editingStringPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 representedObjectForEditingString:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:shouldAddObjects:atIndex:]'
U32 env___IM_NSObject_tokenFieldCell_CshouldAddObjects_CatIndex_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 tokensPointer, U32 index) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)tokensPointer;
    id _result = (id)[(id)_self tokenFieldCell:_t1 shouldAddObjects:_t2 atIndex:index];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:styleForRepresentedObject:]'
U32 env___IM_NSObject_tokenFieldCell_CstyleForRepresentedObject_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 representedObjectPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)representedObjectPointer;
    int _result = (int)[(id)_self tokenFieldCell:_t1 styleForRepresentedObject:_t2];
    return (U32)_result;
}

// method '-[NSObject tokenFieldCell:writeRepresentedObjects:toPasteboard:]'
U32 env___IM_NSObject_tokenFieldCell_CwriteRepresentedObjects_CtoPasteboard_C(void *_instance, U32 _self, U32 tokenFieldCellPointer, U32 objectsPointer, U32 pboardPointer) {
    id _t1 = (id)tokenFieldCellPointer;
    id _t2 = (id)objectsPointer;
    id _t3 = (id)pboardPointer;
    BOOL _result = (BOOL)[(id)_self tokenFieldCell:_t1 writeRepresentedObjects:_t2 toPasteboard:_t3];
    return (U32)_result;
}

// method '-[NSObject toolTip]'
U32 env___IM_NSObject_toolTip(void *_instance, U32 _self) {
    id _result = (id)[(id)_self toolTip];
    return (U32)_result;
}

// method '-[NSObject toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:]'
U32 env___IM_NSObject_toolbar_CitemForItemIdentifier_CwillBeInsertedIntoToolbar_C(void *_instance, U32 _self, U32 toolbarPointer, U32 itemIdentifierPointer, U32 flag) {
    id _t1 = (id)toolbarPointer;
    id _t2 = (id)itemIdentifierPointer;
    id _result = (id)[(id)_self toolbar:_t1 itemForItemIdentifier:_t2 willBeInsertedIntoToolbar:flag];
    return (U32)_result;
}

// method '-[NSObject toolbarAllowedItemIdentifiers:]'
U32 env___IM_NSObject_toolbarAllowedItemIdentifiers_C(void *_instance, U32 _self, U32 toolbarPointer) {
    id _t1 = (id)toolbarPointer;
    id _result = (id)[(id)_self toolbarAllowedItemIdentifiers:_t1];
    return (U32)_result;
}

// method '-[NSObject toolbarDefaultItemIdentifiers:]'
U32 env___IM_NSObject_toolbarDefaultItemIdentifiers_C(void *_instance, U32 _self, U32 toolbarPointer) {
    id _t1 = (id)toolbarPointer;
    id _result = (id)[(id)_self toolbarDefaultItemIdentifiers:_t1];
    return (U32)_result;
}

// method '-[NSObject toolbarDidRemoveItem:]'
void env___IM_NSObject_toolbarDidRemoveItem_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self toolbarDidRemoveItem:_t1];
}

// method '-[NSObject toolbarSelectableItemIdentifiers:]'
U32 env___IM_NSObject_toolbarSelectableItemIdentifiers_C(void *_instance, U32 _self, U32 toolbarPointer) {
    id _t1 = (id)toolbarPointer;
    id _result = (id)[(id)_self toolbarSelectableItemIdentifiers:_t1];
    return (U32)_result;
}

// method '-[NSObject toolbarWillAddItem:]'
void env___IM_NSObject_toolbarWillAddItem_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self toolbarWillAddItem:_t1];
}

// method '-[NSObject trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:]'
U32 env___IM_NSObject_trackMouse_CinRect_CofView_CatCharacterIndex_CuntilMouseUp_C(void *_instance, U32 _self, U32 theEventPointer, U32 cellFrameIndirect, U32 controlViewPointer, U32 charIndex, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)theEventPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(id)_self trackMouse:_t1 inRect:_t2 ofView:_t3 atCharacterIndex:charIndex untilMouseUp:flag];
    return (U32)_result;
}

// method '-[NSObject trackMouse:inRect:ofView:untilMouseUp:]'
U32 env___IM_NSObject_trackMouse_CinRect_CofView_CuntilMouseUp_C(void *_instance, U32 _self, U32 theEventPointer, U32 cellFrameIndirect, U32 controlViewPointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)theEventPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(id)_self trackMouse:_t1 inRect:_t2 ofView:_t3 untilMouseUp:flag];
    return (U32)_result;
}

// method '-[NSObject unbind:]'
void env___IM_NSObject_unbind_C(void *_instance, U32 _self, U32 bindingPointer) {
    id _t1 = (id)bindingPointer;
    [(id)_self unbind:_t1];
}

// method '-[NSObject undoManagerForTextView:]'
U32 env___IM_NSObject_undoManagerForTextView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    id _result = (id)[(id)_self undoManagerForTextView:_t1];
    return (U32)_result;
}

// method '-[NSObject unmarkText]'
void env___IM_NSObject_unmarkText(void *_instance, U32 _self) {
    [(id)_self unmarkText];
}

// method '-[NSObject userKeyEquivalent]'
U32 env___IM_NSObject_userKeyEquivalent(void *_instance, U32 _self) {
    id _result = (id)[(id)_self userKeyEquivalent];
    return (U32)_result;
}

// method '-[NSObject userKeyEquivalentModifierMask]'
U32 env___IM_NSObject_userKeyEquivalentModifierMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(id)_self userKeyEquivalentModifierMask];
    return (U32)_result;
}

// method '+[NSObject usesUserKeyEquivalents]'
U32 env___CM_NSObject_usesUserKeyEquivalents(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class usesUserKeyEquivalents];
    return (U32)_result;
}

// method '-[NSObject validAttributesForMarkedText]'
U32 env___IM_NSObject_validAttributesForMarkedText(void *_instance, U32 _self) {
    id _result = (id)[(id)_self validAttributesForMarkedText];
    return (U32)_result;
}

// method '-[NSObject validModesForFontPanel:]'
U32 env___IM_NSObject_validModesForFontPanel_C(void *_instance, U32 _self, U32 fontPanelPointer) {
    id _t1 = (id)fontPanelPointer;
    unsigned int _result = (unsigned int)[(id)_self validModesForFontPanel:_t1];
    return (U32)_result;
}

// method '-[NSObject validateMenuItem:]'
U32 env___IM_NSObject_validateMenuItem_C(void *_instance, U32 _self, U32 menuItemPointer) {
    id _t1 = (id)menuItemPointer;
    BOOL _result = (BOOL)[(id)_self validateMenuItem:_t1];
    return (U32)_result;
}

// method '-[NSObject validateToolbarItem:]'
U32 env___IM_NSObject_validateToolbarItem_C(void *_instance, U32 _self, U32 theItemPointer) {
    id _t1 = (id)theItemPointer;
    BOOL _result = (BOOL)[(id)_self validateToolbarItem:_t1];
    return (U32)_result;
}

// method '-[NSObject validateUserInterfaceItem:]'
U32 env___IM_NSObject_validateUserInterfaceItem_C(void *_instance, U32 _self, U32 anItemPointer) {
    id _t1 = (id)anItemPointer;
    BOOL _result = (BOOL)[(id)_self validateUserInterfaceItem:_t1];
    return (U32)_result;
}

// method '-[NSObject valueClassForBinding:]'
U32 env___IM_NSObject_valueClassForBinding_C(void *_instance, U32 _self, U32 bindingPointer) {
    id _t1 = (id)bindingPointer;
    Class _result = (Class)[(id)_self valueClassForBinding:_t1];
    return (U32)_result;
}

// method '-[NSObject view:stringForToolTip:point:userData:]'
U32 env___IM_NSObject_view_CstringForToolTip_Cpoint_CuserData_C(void *_instance, U32 _self, U32 viewPointer, U32 tag, U32 pointIndirect, U32 dataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)viewPointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + pointIndirect);
    void* _t3 = (void*)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    id _result = (id)[(id)_self view:_t1 stringForToolTip:tag point:_t2 userData:_t3];
    return (U32)_result;
}

// method '-[NSObject viewSizeChanged:]'
void env___IM_NSObject_viewSizeChanged_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(id)_self viewSizeChanged:_t1];
}

// method '-[NSObject wantsPeriodicDraggingUpdates]'
U32 env___IM_NSObject_wantsPeriodicDraggingUpdates(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self wantsPeriodicDraggingUpdates];
    return (U32)_result;
}

// method '-[NSObject wantsToDelayTextChangeNotifications]'
U32 env___IM_NSObject_wantsToDelayTextChangeNotifications(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self wantsToDelayTextChangeNotifications];
    return (U32)_result;
}

// method '-[NSObject wantsToHandleMouseEvents]'
U32 env___IM_NSObject_wantsToHandleMouseEvents(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self wantsToHandleMouseEvents];
    return (U32)_result;
}

// method '-[NSObject wantsToInterpretAllKeystrokes]'
U32 env___IM_NSObject_wantsToInterpretAllKeystrokes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self wantsToInterpretAllKeystrokes];
    return (U32)_result;
}

// method '-[NSObject wantsToTrackMouse]'
U32 env___IM_NSObject_wantsToTrackMouse(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(id)_self wantsToTrackMouse];
    return (U32)_result;
}

// method '-[NSObject wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:]'
U32 env___IM_NSObject_wantsToTrackMouseForEvent_CinRect_CofView_CatCharacterIndex_C(void *_instance, U32 _self, U32 theEventPointer, U32 cellFrameIndirect, U32 controlViewPointer, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)theEventPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t3 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(id)_self wantsToTrackMouseForEvent:_t1 inRect:_t2 ofView:_t3 atCharacterIndex:charIndex];
    return (U32)_result;
}

// method '-[NSObject window:willPositionSheet:usingRect:]'
void env___IM_NSObject_window_CwillPositionSheet_CusingRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 windowPointer, U32 sheetPointer, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)windowPointer;
    id _t2 = (id)sheetPointer;
    NSRect _t3 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    NSRect _result = (NSRect)[(id)_self window:_t1 willPositionSheet:_t2 usingRect:_t3];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject windowDidBecomeKey:]'
void env___IM_NSObject_windowDidBecomeKey_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidBecomeKey:_t1];
}

// method '-[NSObject windowDidBecomeMain:]'
void env___IM_NSObject_windowDidBecomeMain_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidBecomeMain:_t1];
}

// method '-[NSObject windowDidChangeScreen:]'
void env___IM_NSObject_windowDidChangeScreen_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidChangeScreen:_t1];
}

// method '-[NSObject windowDidChangeScreenProfile:]'
void env___IM_NSObject_windowDidChangeScreenProfile_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidChangeScreenProfile:_t1];
}

// method '-[NSObject windowDidDeminiaturize:]'
void env___IM_NSObject_windowDidDeminiaturize_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidDeminiaturize:_t1];
}

// method '-[NSObject windowDidEndSheet:]'
void env___IM_NSObject_windowDidEndSheet_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidEndSheet:_t1];
}

// method '-[NSObject windowDidExpose:]'
void env___IM_NSObject_windowDidExpose_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidExpose:_t1];
}

// method '-[NSObject windowDidMiniaturize:]'
void env___IM_NSObject_windowDidMiniaturize_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidMiniaturize:_t1];
}

// method '-[NSObject windowDidMove:]'
void env___IM_NSObject_windowDidMove_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidMove:_t1];
}

// method '-[NSObject windowDidResignKey:]'
void env___IM_NSObject_windowDidResignKey_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidResignKey:_t1];
}

// method '-[NSObject windowDidResignMain:]'
void env___IM_NSObject_windowDidResignMain_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidResignMain:_t1];
}

// method '-[NSObject windowDidResize:]'
void env___IM_NSObject_windowDidResize_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidResize:_t1];
}

// method '-[NSObject windowDidUpdate:]'
void env___IM_NSObject_windowDidUpdate_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowDidUpdate:_t1];
}

// method '-[NSObject windowShouldClose:]'
U32 env___IM_NSObject_windowShouldClose_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    BOOL _result = (BOOL)[(id)_self windowShouldClose:_t1];
    return (U32)_result;
}

// method '-[NSObject windowShouldZoom:toFrame:]'
U32 env___IM_NSObject_windowShouldZoom_CtoFrame_C(void *_instance, U32 _self, U32 windowPointer, U32 newFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)windowPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + newFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(id)_self windowShouldZoom:_t1 toFrame:_t2];
    return (U32)_result;
}

// method '-[NSObject windowWillBeginSheet:]'
void env___IM_NSObject_windowWillBeginSheet_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowWillBeginSheet:_t1];
}

// method '-[NSObject windowWillClose:]'
void env___IM_NSObject_windowWillClose_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowWillClose:_t1];
}

// method '-[NSObject windowWillMiniaturize:]'
void env___IM_NSObject_windowWillMiniaturize_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowWillMiniaturize:_t1];
}

// method '-[NSObject windowWillMove:]'
void env___IM_NSObject_windowWillMove_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(id)_self windowWillMove:_t1];
}

// method '-[NSObject windowWillResize:toSize:]'
void env___IM_NSObject_windowWillResize_CtoSize_C(void *_instance, U32 _resultIndirect, U32 _self, U32 senderPointer, U32 frameSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)senderPointer;
    NSSize _t2 = *(NSSize*)(_mem->data + frameSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.width);
    swap_f(&_t2.height);
    #endif
    NSSize _result = (NSSize)[(id)_self windowWillResize:_t1 toSize:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject windowWillReturnFieldEditor:toObject:]'
U32 env___IM_NSObject_windowWillReturnFieldEditor_CtoObject_C(void *_instance, U32 _self, U32 senderPointer, U32 clientPointer) {
    id _t1 = (id)senderPointer;
    id _t2 = (id)clientPointer;
    id _result = (id)[(id)_self windowWillReturnFieldEditor:_t1 toObject:_t2];
    return (U32)_result;
}

// method '-[NSObject windowWillReturnUndoManager:]'
U32 env___IM_NSObject_windowWillReturnUndoManager_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    id _result = (id)[(id)_self windowWillReturnUndoManager:_t1];
    return (U32)_result;
}

// method '-[NSObject windowWillUseStandardFrame:defaultFrame:]'
void env___IM_NSObject_windowWillUseStandardFrame_CdefaultFrame_C(void *_instance, U32 _resultIndirect, U32 _self, U32 windowPointer, U32 newFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)windowPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + newFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    NSRect _result = (NSRect)[(id)_self windowWillUseStandardFrame:_t1 defaultFrame:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSObject writeSelectionToPasteboard:types:]'
U32 env___IM_NSObject_writeSelectionToPasteboard_Ctypes_C(void *_instance, U32 _self, U32 pboardPointer, U32 typesPointer) {
    id _t1 = (id)pboardPointer;
    id _t2 = (id)typesPointer;
    BOOL _result = (BOOL)[(id)_self writeSelectionToPasteboard:_t1 types:_t2];
    return (U32)_result;
}

// method '-[NSObjectController add:]'
void env___IM_NSObjectController_add_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSObjectController*)_self add:_t1];
}

// method '-[NSObjectController addObject:]'
void env___IM_NSObjectController_addObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSObjectController*)_self addObject:_t1];
}

// method '-[NSObjectController automaticallyPreparesContent]'
U32 env___IM_NSObjectController_automaticallyPreparesContent(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSObjectController*)_self automaticallyPreparesContent];
    return (U32)_result;
}

// method '-[NSObjectController canAdd]'
U32 env___IM_NSObjectController_canAdd(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSObjectController*)_self canAdd];
    return (U32)_result;
}

// method '-[NSObjectController canRemove]'
U32 env___IM_NSObjectController_canRemove(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSObjectController*)_self canRemove];
    return (U32)_result;
}

// method '-[NSObjectController content]'
U32 env___IM_NSObjectController_content(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self content];
    return (U32)_result;
}

// method '-[NSObjectController entityName]'
U32 env___IM_NSObjectController_entityName(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self entityName];
    return (U32)_result;
}

// method '-[NSObjectController fetch:]'
void env___IM_NSObjectController_fetch_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSObjectController*)_self fetch:_t1];
}

// method '-[NSObjectController fetchPredicate]'
U32 env___IM_NSObjectController_fetchPredicate(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self fetchPredicate];
    return (U32)_result;
}

// method '-[NSObjectController fetchWithRequest:merge:error:]'
U32 env___IM_NSObjectController_fetchWithRequest_Cmerge_Cerror_C(void *_instance, U32 _self, U32 fetchRequestPointer, U32 merge, U32 errorPointer) {
    id _t1 = (id)fetchRequestPointer;
    id* _t2 = (id*)errorPointer;
    BOOL _result = (BOOL)[(NSObjectController*)_self fetchWithRequest:_t1 merge:merge error:_t2];
    return (U32)_result;
}

// method '-[NSObjectController initWithContent:]'
U32 env___IM_NSObjectController_initWithContent_C(void *_instance, U32 _self, U32 contentPointer) {
    id _t1 = (id)contentPointer;
    id _result = (id)[(NSObjectController*)_self initWithContent:_t1];
    return (U32)_result;
}

// method '-[NSObjectController isEditable]'
U32 env___IM_NSObjectController_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSObjectController*)_self isEditable];
    return (U32)_result;
}

// method '-[NSObjectController managedObjectContext]'
U32 env___IM_NSObjectController_managedObjectContext(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self managedObjectContext];
    return (U32)_result;
}

// method '-[NSObjectController newObject]'
U32 env___IM_NSObjectController_newObject(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self newObject];
    return (U32)_result;
}

// method '-[NSObjectController objectClass]'
U32 env___IM_NSObjectController_objectClass(void *_instance, U32 _self) {
    Class _result = (Class)[(NSObjectController*)_self objectClass];
    return (U32)_result;
}

// method '-[NSObjectController prepareContent]'
void env___IM_NSObjectController_prepareContent(void *_instance, U32 _self) {
    [(NSObjectController*)_self prepareContent];
}

// method '-[NSObjectController remove:]'
void env___IM_NSObjectController_remove_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSObjectController*)_self remove:_t1];
}

// method '-[NSObjectController removeObject:]'
void env___IM_NSObjectController_removeObject_C(void *_instance, U32 _self, U32 objectPointer) {
    id _t1 = (id)objectPointer;
    [(NSObjectController*)_self removeObject:_t1];
}

// method '-[NSObjectController selectedObjects]'
U32 env___IM_NSObjectController_selectedObjects(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self selectedObjects];
    return (U32)_result;
}

// method '-[NSObjectController selection]'
U32 env___IM_NSObjectController_selection(void *_instance, U32 _self) {
    id _result = (id)[(NSObjectController*)_self selection];
    return (U32)_result;
}

// method '-[NSObjectController setAutomaticallyPreparesContent:]'
void env___IM_NSObjectController_setAutomaticallyPreparesContent_C(void *_instance, U32 _self, U32 flag) {
    [(NSObjectController*)_self setAutomaticallyPreparesContent:flag];
}

// method '-[NSObjectController setContent:]'
void env___IM_NSObjectController_setContent_C(void *_instance, U32 _self, U32 contentPointer) {
    id _t1 = (id)contentPointer;
    [(NSObjectController*)_self setContent:_t1];
}

// method '-[NSObjectController setEditable:]'
void env___IM_NSObjectController_setEditable_C(void *_instance, U32 _self, U32 flag) {
    [(NSObjectController*)_self setEditable:flag];
}

// method '-[NSObjectController setEntityName:]'
void env___IM_NSObjectController_setEntityName_C(void *_instance, U32 _self, U32 entityNamePointer) {
    id _t1 = (id)entityNamePointer;
    [(NSObjectController*)_self setEntityName:_t1];
}

// method '-[NSObjectController setFetchPredicate:]'
void env___IM_NSObjectController_setFetchPredicate_C(void *_instance, U32 _self, U32 predicatePointer) {
    id _t1 = (id)predicatePointer;
    [(NSObjectController*)_self setFetchPredicate:_t1];
}

// method '-[NSObjectController setManagedObjectContext:]'
void env___IM_NSObjectController_setManagedObjectContext_C(void *_instance, U32 _self, U32 managedObjectContextPointer) {
    id _t1 = (id)managedObjectContextPointer;
    [(NSObjectController*)_self setManagedObjectContext:_t1];
}

// method '-[NSObjectController setObjectClass:]'
void env___IM_NSObjectController_setObjectClass_C(void *_instance, U32 _self, U32 objectClassPointer) {
    Class _t1 = (Class)objectClassPointer;
    [(NSObjectController*)_self setObjectClass:_t1];
}

// method '-[NSObjectController validateMenuItem:]'
U32 env___IM_NSObjectController_validateMenuItem_C(void *_instance, U32 _self, U32 menuItemPointer) {
    id _t1 = (id)menuItemPointer;
    BOOL _result = (BOOL)[(NSObjectController*)_self validateMenuItem:_t1];
    return (U32)_result;
}

// method '-[NSOpenGLContext CGLContextObj]'
U32 env___IM_NSOpenGLContext_CGLContextObj(void *_instance, U32 _self) {
    void* _result = (void*)[(NSOpenGLContext*)_self CGLContextObj];
    return (U32)_result;
}

// method '+[NSOpenGLContext clearCurrentContext]'
void env___CM_NSOpenGLContext_clearCurrentContext(void *_instance, U32 _class) {
    [(Class)_class clearCurrentContext];
}

// method '-[NSOpenGLContext clearDrawable]'
void env___IM_NSOpenGLContext_clearDrawable(void *_instance, U32 _self) {
    [(NSOpenGLContext*)_self clearDrawable];
}

// method '-[NSOpenGLContext copyAttributesFromContext:withMask:]'
void env___IM_NSOpenGLContext_copyAttributesFromContext_CwithMask_C(void *_instance, U32 _self, U32 contextPointer, U32 mask) {
    id _t1 = (id)contextPointer;
    [(NSOpenGLContext*)_self copyAttributesFromContext:_t1 withMask:mask];
}

// method '-[NSOpenGLContext createTexture:fromView:internalFormat:]'
void env___IM_NSOpenGLContext_createTexture_CfromView_CinternalFormat_C(void *_instance, U32 _self, U32 target, U32 viewPointer, U32 format) {
    id _t1 = (id)viewPointer;
    [(NSOpenGLContext*)_self createTexture:target fromView:_t1 internalFormat:format];
}

// method '+[NSOpenGLContext currentContext]'
U32 env___CM_NSOpenGLContext_currentContext(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class currentContext];
    return (U32)_result;
}

// method '-[NSOpenGLContext currentVirtualScreen]'
U32 env___IM_NSOpenGLContext_currentVirtualScreen(void *_instance, U32 _self) {
    int _result = (int)[(NSOpenGLContext*)_self currentVirtualScreen];
    return (U32)_result;
}

// method '-[NSOpenGLContext flushBuffer]'
void env___IM_NSOpenGLContext_flushBuffer(void *_instance, U32 _self) {
    [(NSOpenGLContext*)_self flushBuffer];
}

// method '-[NSOpenGLContext getValues:forParameter:]'
void env___IM_NSOpenGLContext_getValues_CforParameter_C(void *_instance, U32 _self, U32 valsPointer, U32 param) {
    long* _t1 = (long*)valsPointer;
    [(NSOpenGLContext*)_self getValues:_t1 forParameter:param];
}

// method '-[NSOpenGLContext initWithFormat:shareContext:]'
U32 env___IM_NSOpenGLContext_initWithFormat_CshareContext_C(void *_instance, U32 _self, U32 formatPointer, U32 sharePointer) {
    id _t1 = (id)formatPointer;
    id _t2 = (id)sharePointer;
    id _result = (id)[(NSOpenGLContext*)_self initWithFormat:_t1 shareContext:_t2];
    return (U32)_result;
}

// method '-[NSOpenGLContext makeCurrentContext]'
void env___IM_NSOpenGLContext_makeCurrentContext(void *_instance, U32 _self) {
    [(NSOpenGLContext*)_self makeCurrentContext];
}

// method '-[NSOpenGLContext pixelBuffer]'
U32 env___IM_NSOpenGLContext_pixelBuffer(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenGLContext*)_self pixelBuffer];
    return (U32)_result;
}

// method '-[NSOpenGLContext pixelBufferCubeMapFace]'
U32 env___IM_NSOpenGLContext_pixelBufferCubeMapFace(void *_instance, U32 _self) {
    unsigned long _result = (unsigned long)[(NSOpenGLContext*)_self pixelBufferCubeMapFace];
    return (U32)_result;
}

// method '-[NSOpenGLContext pixelBufferMipMapLevel]'
U32 env___IM_NSOpenGLContext_pixelBufferMipMapLevel(void *_instance, U32 _self) {
    long _result = (long)[(NSOpenGLContext*)_self pixelBufferMipMapLevel];
    return (U32)_result;
}

// method '-[NSOpenGLContext setCurrentVirtualScreen:]'
void env___IM_NSOpenGLContext_setCurrentVirtualScreen_C(void *_instance, U32 _self, U32 screen) {
    [(NSOpenGLContext*)_self setCurrentVirtualScreen:screen];
}

// method '-[NSOpenGLContext setFullScreen]'
void env___IM_NSOpenGLContext_setFullScreen(void *_instance, U32 _self) {
    [(NSOpenGLContext*)_self setFullScreen];
}

// method '-[NSOpenGLContext setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:]'
void env___IM_NSOpenGLContext_setPixelBuffer_CcubeMapFace_CmipMapLevel_CcurrentVirtualScreen_C(void *_instance, U32 _self, U32 pixelBufferPointer, U32 face, U32 level, U32 screen) {
    id _t1 = (id)pixelBufferPointer;
    [(NSOpenGLContext*)_self setPixelBuffer:_t1 cubeMapFace:face mipMapLevel:level currentVirtualScreen:screen];
}

// method '-[NSOpenGLContext setTextureImageToPixelBuffer:colorBuffer:]'
void env___IM_NSOpenGLContext_setTextureImageToPixelBuffer_CcolorBuffer_C(void *_instance, U32 _self, U32 pixelBufferPointer, U32 source) {
    id _t1 = (id)pixelBufferPointer;
    [(NSOpenGLContext*)_self setTextureImageToPixelBuffer:_t1 colorBuffer:source];
}

// method '-[NSOpenGLContext setValues:forParameter:]'
void env___IM_NSOpenGLContext_setValues_CforParameter_C(void *_instance, U32 _self, U32 valsPointer, U32 param) {
    const long* _t1 = (const long*)valsPointer;
    [(NSOpenGLContext*)_self setValues:_t1 forParameter:param];
}

// method '-[NSOpenGLContext setView:]'
void env___IM_NSOpenGLContext_setView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSOpenGLContext*)_self setView:_t1];
}

// method '-[NSOpenGLContext update]'
void env___IM_NSOpenGLContext_update(void *_instance, U32 _self) {
    [(NSOpenGLContext*)_self update];
}

// method '-[NSOpenGLContext view]'
U32 env___IM_NSOpenGLContext_view(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenGLContext*)_self view];
    return (U32)_result;
}

// method '-[NSOpenGLPixelBuffer initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:]'
U32 env___IM_NSOpenGLPixelBuffer_initWithTextureTarget_CtextureInternalFormat_CtextureMaxMipMapLevel_CpixelsWide_CpixelsHigh_C(void *_instance, U32 _self, U32 target, U32 format, U32 maxLevel, U32 pixelsWide, U32 pixelsHigh) {
    id _result = (id)[(NSOpenGLPixelBuffer*)_self initWithTextureTarget:target textureInternalFormat:format textureMaxMipMapLevel:maxLevel pixelsWide:pixelsWide pixelsHigh:pixelsHigh];
    return (U32)_result;
}

// method '-[NSOpenGLPixelBuffer pixelsHigh]'
U32 env___IM_NSOpenGLPixelBuffer_pixelsHigh(void *_instance, U32 _self) {
    int _result = (int)[(NSOpenGLPixelBuffer*)_self pixelsHigh];
    return (U32)_result;
}

// method '-[NSOpenGLPixelBuffer pixelsWide]'
U32 env___IM_NSOpenGLPixelBuffer_pixelsWide(void *_instance, U32 _self) {
    int _result = (int)[(NSOpenGLPixelBuffer*)_self pixelsWide];
    return (U32)_result;
}

// method '-[NSOpenGLPixelBuffer textureInternalFormat]'
U32 env___IM_NSOpenGLPixelBuffer_textureInternalFormat(void *_instance, U32 _self) {
    unsigned long _result = (unsigned long)[(NSOpenGLPixelBuffer*)_self textureInternalFormat];
    return (U32)_result;
}

// method '-[NSOpenGLPixelBuffer textureMaxMipMapLevel]'
U32 env___IM_NSOpenGLPixelBuffer_textureMaxMipMapLevel(void *_instance, U32 _self) {
    long _result = (long)[(NSOpenGLPixelBuffer*)_self textureMaxMipMapLevel];
    return (U32)_result;
}

// method '-[NSOpenGLPixelBuffer textureTarget]'
U32 env___IM_NSOpenGLPixelBuffer_textureTarget(void *_instance, U32 _self) {
    unsigned long _result = (unsigned long)[(NSOpenGLPixelBuffer*)_self textureTarget];
    return (U32)_result;
}

// method '-[NSOpenGLPixelFormat CGLPixelFormatObj]'
U32 env___IM_NSOpenGLPixelFormat_CGLPixelFormatObj(void *_instance, U32 _self) {
    void* _result = (void*)[(NSOpenGLPixelFormat*)_self CGLPixelFormatObj];
    return (U32)_result;
}

// method '-[NSOpenGLPixelFormat attributes]'
U32 env___IM_NSOpenGLPixelFormat_attributes(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenGLPixelFormat*)_self attributes];
    return (U32)_result;
}

// method '-[NSOpenGLPixelFormat getValues:forAttribute:forVirtualScreen:]'
void env___IM_NSOpenGLPixelFormat_getValues_CforAttribute_CforVirtualScreen_C(void *_instance, U32 _self, U32 valsPointer, U32 attrib, U32 screen) {
    long* _t1 = (long*)valsPointer;
    [(NSOpenGLPixelFormat*)_self getValues:_t1 forAttribute:attrib forVirtualScreen:screen];
}

// method '-[NSOpenGLPixelFormat initWithAttributes:]'
U32 env___IM_NSOpenGLPixelFormat_initWithAttributes_C(void *_instance, U32 _self, U32 attribsPointer) {
    int* _t1 = (int*)attribsPointer;
    id _result = (id)[(NSOpenGLPixelFormat*)_self initWithAttributes:_t1];
    return (U32)_result;
}

// method '-[NSOpenGLPixelFormat initWithData:]'
U32 env___IM_NSOpenGLPixelFormat_initWithData_C(void *_instance, U32 _self, U32 attribsPointer) {
    id _t1 = (id)attribsPointer;
    id _result = (id)[(NSOpenGLPixelFormat*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSOpenGLPixelFormat numberOfVirtualScreens]'
U32 env___IM_NSOpenGLPixelFormat_numberOfVirtualScreens(void *_instance, U32 _self) {
    int _result = (int)[(NSOpenGLPixelFormat*)_self numberOfVirtualScreens];
    return (U32)_result;
}

// method '-[NSOpenGLPixelFormat setAttributes:]'
void env___IM_NSOpenGLPixelFormat_setAttributes_C(void *_instance, U32 _self, U32 attribsPointer) {
    id _t1 = (id)attribsPointer;
    [(NSOpenGLPixelFormat*)_self setAttributes:_t1];
}

// method '-[NSOpenGLView clearGLContext]'
void env___IM_NSOpenGLView_clearGLContext(void *_instance, U32 _self) {
    [(NSOpenGLView*)_self clearGLContext];
}

// method '+[NSOpenGLView defaultPixelFormat]'
U32 env___CM_NSOpenGLView_defaultPixelFormat(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultPixelFormat];
    return (U32)_result;
}

// method '-[NSOpenGLView initWithFrame:pixelFormat:]'
U32 env___IM_NSOpenGLView_initWithFrame_CpixelFormat_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 formatPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    id _t2 = (id)formatPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSOpenGLView*)_self initWithFrame:_t1 pixelFormat:_t2];
    return (U32)_result;
}

// method '-[NSOpenGLView openGLContext]'
U32 env___IM_NSOpenGLView_openGLContext(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenGLView*)_self openGLContext];
    return (U32)_result;
}

// method '-[NSOpenGLView pixelFormat]'
U32 env___IM_NSOpenGLView_pixelFormat(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenGLView*)_self pixelFormat];
    return (U32)_result;
}

// method '-[NSOpenGLView prepareOpenGL]'
void env___IM_NSOpenGLView_prepareOpenGL(void *_instance, U32 _self) {
    [(NSOpenGLView*)_self prepareOpenGL];
}

// method '-[NSOpenGLView reshape]'
void env___IM_NSOpenGLView_reshape(void *_instance, U32 _self) {
    [(NSOpenGLView*)_self reshape];
}

// method '-[NSOpenGLView setOpenGLContext:]'
void env___IM_NSOpenGLView_setOpenGLContext_C(void *_instance, U32 _self, U32 contextPointer) {
    id _t1 = (id)contextPointer;
    [(NSOpenGLView*)_self setOpenGLContext:_t1];
}

// method '-[NSOpenGLView setPixelFormat:]'
void env___IM_NSOpenGLView_setPixelFormat_C(void *_instance, U32 _self, U32 pixelFormatPointer) {
    id _t1 = (id)pixelFormatPointer;
    [(NSOpenGLView*)_self setPixelFormat:_t1];
}

// method '-[NSOpenGLView update]'
void env___IM_NSOpenGLView_update(void *_instance, U32 _self) {
    [(NSOpenGLView*)_self update];
}

// method '-[NSOpenPanel URLs]'
U32 env___IM_NSOpenPanel_URLs(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenPanel*)_self URLs];
    return (U32)_result;
}

// method '-[NSOpenPanel allowsMultipleSelection]'
U32 env___IM_NSOpenPanel_allowsMultipleSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOpenPanel*)_self allowsMultipleSelection];
    return (U32)_result;
}

// method '-[NSOpenPanel beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:]'
void env___IM_NSOpenPanel_beginForDirectory_Cfile_Ctypes_CmodelessDelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 pathPointer, U32 namePointer, U32 fileTypesPointer, U32 delegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)pathPointer;
    id _t2 = (id)namePointer;
    id _t3 = (id)fileTypesPointer;
    id _t4 = (id)delegatePointer;
    SEL _t5 = (SEL)didEndSelectorPointer;
    void* _t6 = (void*)contextInfoPointer;
    [(NSOpenPanel*)_self beginForDirectory:_t1 file:_t2 types:_t3 modelessDelegate:_t4 didEndSelector:_t5 contextInfo:_t6];
}

// method '-[NSOpenPanel beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void env___IM_NSOpenPanel_beginSheetForDirectory_Cfile_Ctypes_CmodalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 pathPointer, U32 namePointer, U32 fileTypesPointer, U32 docWindowPointer, U32 delegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)pathPointer;
    id _t2 = (id)namePointer;
    id _t3 = (id)fileTypesPointer;
    id _t4 = (id)docWindowPointer;
    id _t5 = (id)delegatePointer;
    SEL _t6 = (SEL)didEndSelectorPointer;
    void* _t7 = (void*)contextInfoPointer;
    [(NSOpenPanel*)_self beginSheetForDirectory:_t1 file:_t2 types:_t3 modalForWindow:_t4 modalDelegate:_t5 didEndSelector:_t6 contextInfo:_t7];
}

// method '-[NSOpenPanel canChooseDirectories]'
U32 env___IM_NSOpenPanel_canChooseDirectories(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOpenPanel*)_self canChooseDirectories];
    return (U32)_result;
}

// method '-[NSOpenPanel canChooseFiles]'
U32 env___IM_NSOpenPanel_canChooseFiles(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOpenPanel*)_self canChooseFiles];
    return (U32)_result;
}

// method '-[NSOpenPanel filenames]'
U32 env___IM_NSOpenPanel_filenames(void *_instance, U32 _self) {
    id _result = (id)[(NSOpenPanel*)_self filenames];
    return (U32)_result;
}

// method '+[NSOpenPanel openPanel]'
U32 env___CM_NSOpenPanel_openPanel(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class openPanel];
    return (U32)_result;
}

// method '-[NSOpenPanel resolvesAliases]'
U32 env___IM_NSOpenPanel_resolvesAliases(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOpenPanel*)_self resolvesAliases];
    return (U32)_result;
}

// method '-[NSOpenPanel runModalForDirectory:file:types:]'
U32 env___IM_NSOpenPanel_runModalForDirectory_Cfile_Ctypes_C(void *_instance, U32 _self, U32 pathPointer, U32 namePointer, U32 fileTypesPointer) {
    id _t1 = (id)pathPointer;
    id _t2 = (id)namePointer;
    id _t3 = (id)fileTypesPointer;
    int _result = (int)[(NSOpenPanel*)_self runModalForDirectory:_t1 file:_t2 types:_t3];
    return (U32)_result;
}

// method '-[NSOpenPanel runModalForTypes:]'
U32 env___IM_NSOpenPanel_runModalForTypes_C(void *_instance, U32 _self, U32 fileTypesPointer) {
    id _t1 = (id)fileTypesPointer;
    int _result = (int)[(NSOpenPanel*)_self runModalForTypes:_t1];
    return (U32)_result;
}

// method '-[NSOpenPanel setAllowsMultipleSelection:]'
void env___IM_NSOpenPanel_setAllowsMultipleSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSOpenPanel*)_self setAllowsMultipleSelection:flag];
}

// method '-[NSOpenPanel setCanChooseDirectories:]'
void env___IM_NSOpenPanel_setCanChooseDirectories_C(void *_instance, U32 _self, U32 flag) {
    [(NSOpenPanel*)_self setCanChooseDirectories:flag];
}

// method '-[NSOpenPanel setCanChooseFiles:]'
void env___IM_NSOpenPanel_setCanChooseFiles_C(void *_instance, U32 _self, U32 flag) {
    [(NSOpenPanel*)_self setCanChooseFiles:flag];
}

// method '-[NSOpenPanel setResolvesAliases:]'
void env___IM_NSOpenPanel_setResolvesAliases_C(void *_instance, U32 _self, U32 flag) {
    [(NSOpenPanel*)_self setResolvesAliases:flag];
}

// method '-[NSOutlineView autoresizesOutlineColumn]'
U32 env___IM_NSOutlineView_autoresizesOutlineColumn(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOutlineView*)_self autoresizesOutlineColumn];
    return (U32)_result;
}

// method '-[NSOutlineView autosaveExpandedItems]'
U32 env___IM_NSOutlineView_autosaveExpandedItems(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOutlineView*)_self autosaveExpandedItems];
    return (U32)_result;
}

// method '-[NSOutlineView collapseItem:]'
void env___IM_NSOutlineView_collapseItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self collapseItem:_t1];
}

// method '-[NSOutlineView collapseItem:collapseChildren:]'
void env___IM_NSOutlineView_collapseItem_CcollapseChildren_C(void *_instance, U32 _self, U32 itemPointer, U32 collapseChildren) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self collapseItem:_t1 collapseChildren:collapseChildren];
}

// method '-[NSOutlineView expandItem:]'
void env___IM_NSOutlineView_expandItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self expandItem:_t1];
}

// method '-[NSOutlineView expandItem:expandChildren:]'
void env___IM_NSOutlineView_expandItem_CexpandChildren_C(void *_instance, U32 _self, U32 itemPointer, U32 expandChildren) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self expandItem:_t1 expandChildren:expandChildren];
}

// method '-[NSOutlineView indentationMarkerFollowsCell]'
U32 env___IM_NSOutlineView_indentationMarkerFollowsCell(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSOutlineView*)_self indentationMarkerFollowsCell];
    return (U32)_result;
}

// method '-[NSOutlineView indentationPerLevel]'
F32 env___IM_NSOutlineView_indentationPerLevel(void *_instance, U32 _self) {
    float _result = (float)[(NSOutlineView*)_self indentationPerLevel];
    return (F32)_result;
}

// method '-[NSOutlineView isExpandable:]'
U32 env___IM_NSOutlineView_isExpandable_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    BOOL _result = (BOOL)[(NSOutlineView*)_self isExpandable:_t1];
    return (U32)_result;
}

// method '-[NSOutlineView isItemExpanded:]'
U32 env___IM_NSOutlineView_isItemExpanded_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    BOOL _result = (BOOL)[(NSOutlineView*)_self isItemExpanded:_t1];
    return (U32)_result;
}

// method '-[NSOutlineView itemAtRow:]'
U32 env___IM_NSOutlineView_itemAtRow_C(void *_instance, U32 _self, U32 row) {
    id _result = (id)[(NSOutlineView*)_self itemAtRow:row];
    return (U32)_result;
}

// method '-[NSOutlineView levelForItem:]'
U32 env___IM_NSOutlineView_levelForItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    int _result = (int)[(NSOutlineView*)_self levelForItem:_t1];
    return (U32)_result;
}

// method '-[NSOutlineView levelForRow:]'
U32 env___IM_NSOutlineView_levelForRow_C(void *_instance, U32 _self, U32 row) {
    int _result = (int)[(NSOutlineView*)_self levelForRow:row];
    return (U32)_result;
}

// method '-[NSOutlineView outlineTableColumn]'
U32 env___IM_NSOutlineView_outlineTableColumn(void *_instance, U32 _self) {
    id _result = (id)[(NSOutlineView*)_self outlineTableColumn];
    return (U32)_result;
}

// method '-[NSOutlineView reloadItem:]'
void env___IM_NSOutlineView_reloadItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self reloadItem:_t1];
}

// method '-[NSOutlineView reloadItem:reloadChildren:]'
void env___IM_NSOutlineView_reloadItem_CreloadChildren_C(void *_instance, U32 _self, U32 itemPointer, U32 reloadChildren) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self reloadItem:_t1 reloadChildren:reloadChildren];
}

// method '-[NSOutlineView rowForItem:]'
U32 env___IM_NSOutlineView_rowForItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    int _result = (int)[(NSOutlineView*)_self rowForItem:_t1];
    return (U32)_result;
}

// method '-[NSOutlineView setAutoresizesOutlineColumn:]'
void env___IM_NSOutlineView_setAutoresizesOutlineColumn_C(void *_instance, U32 _self, U32 resize) {
    [(NSOutlineView*)_self setAutoresizesOutlineColumn:resize];
}

// method '-[NSOutlineView setAutosaveExpandedItems:]'
void env___IM_NSOutlineView_setAutosaveExpandedItems_C(void *_instance, U32 _self, U32 save) {
    [(NSOutlineView*)_self setAutosaveExpandedItems:save];
}

// method '-[NSOutlineView setDropItem:dropChildIndex:]'
void env___IM_NSOutlineView_setDropItem_CdropChildIndex_C(void *_instance, U32 _self, U32 itemPointer, U32 index) {
    id _t1 = (id)itemPointer;
    [(NSOutlineView*)_self setDropItem:_t1 dropChildIndex:index];
}

// method '-[NSOutlineView setIndentationMarkerFollowsCell:]'
void env___IM_NSOutlineView_setIndentationMarkerFollowsCell_C(void *_instance, U32 _self, U32 drawInCell) {
    [(NSOutlineView*)_self setIndentationMarkerFollowsCell:drawInCell];
}

// method '-[NSOutlineView setIndentationPerLevel:]'
void env___IM_NSOutlineView_setIndentationPerLevel_C(void *_instance, U32 _self, F32 indentationPerLevel) {
    [(NSOutlineView*)_self setIndentationPerLevel:indentationPerLevel];
}

// method '-[NSOutlineView setOutlineTableColumn:]'
void env___IM_NSOutlineView_setOutlineTableColumn_C(void *_instance, U32 _self, U32 outlineTableColumnPointer) {
    id _t1 = (id)outlineTableColumnPointer;
    [(NSOutlineView*)_self setOutlineTableColumn:_t1];
}

// method '-[NSOutlineView shouldCollapseAutoExpandedItemsForDeposited:]'
U32 env___IM_NSOutlineView_shouldCollapseAutoExpandedItemsForDeposited_C(void *_instance, U32 _self, U32 deposited) {
    BOOL _result = (BOOL)[(NSOutlineView*)_self shouldCollapseAutoExpandedItemsForDeposited:deposited];
    return (U32)_result;
}

// method '-[NSPDFImageRep PDFRepresentation]'
U32 env___IM_NSPDFImageRep_PDFRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSPDFImageRep*)_self PDFRepresentation];
    return (U32)_result;
}

// method '-[NSPDFImageRep bounds]'
void env___IM_NSPDFImageRep_bounds(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSPDFImageRep*)_self bounds];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPDFImageRep currentPage]'
U32 env___IM_NSPDFImageRep_currentPage(void *_instance, U32 _self) {
    int _result = (int)[(NSPDFImageRep*)_self currentPage];
    return (U32)_result;
}

// method '+[NSPDFImageRep imageRepWithData:]'
U32 env___CM_NSPDFImageRep_imageRepWithData_C(void *_instance, U32 _class, U32 pdfDataPointer) {
    id _t1 = (id)pdfDataPointer;
    id _result = (id)[(Class)_class imageRepWithData:_t1];
    return (U32)_result;
}

// method '-[NSPDFImageRep initWithData:]'
U32 env___IM_NSPDFImageRep_initWithData_C(void *_instance, U32 _self, U32 pdfDataPointer) {
    id _t1 = (id)pdfDataPointer;
    id _result = (id)[(NSPDFImageRep*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSPDFImageRep pageCount]'
U32 env___IM_NSPDFImageRep_pageCount(void *_instance, U32 _self) {
    int _result = (int)[(NSPDFImageRep*)_self pageCount];
    return (U32)_result;
}

// method '-[NSPDFImageRep setCurrentPage:]'
void env___IM_NSPDFImageRep_setCurrentPage_C(void *_instance, U32 _self, U32 page) {
    [(NSPDFImageRep*)_self setCurrentPage:page];
}

// method '-[NSPICTImageRep PICTRepresentation]'
U32 env___IM_NSPICTImageRep_PICTRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSPICTImageRep*)_self PICTRepresentation];
    return (U32)_result;
}

// method '-[NSPICTImageRep boundingBox]'
void env___IM_NSPICTImageRep_boundingBox(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSPICTImageRep*)_self boundingBox];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSPICTImageRep imageRepWithData:]'
U32 env___CM_NSPICTImageRep_imageRepWithData_C(void *_instance, U32 _class, U32 pictDataPointer) {
    id _t1 = (id)pictDataPointer;
    id _result = (id)[(Class)_class imageRepWithData:_t1];
    return (U32)_result;
}

// method '-[NSPICTImageRep initWithData:]'
U32 env___IM_NSPICTImageRep_initWithData_C(void *_instance, U32 _self, U32 pictDataPointer) {
    id _t1 = (id)pictDataPointer;
    id _result = (id)[(NSPICTImageRep*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSPageLayout accessoryView]'
U32 env___IM_NSPageLayout_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSPageLayout*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSPageLayout beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:]'
void env___IM_NSPageLayout_beginSheetWithPrintInfo_CmodalForWindow_Cdelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 printInfoPointer, U32 docWindowPointer, U32 delegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)printInfoPointer;
    id _t2 = (id)docWindowPointer;
    id _t3 = (id)delegatePointer;
    SEL _t4 = (SEL)didEndSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSPageLayout*)_self beginSheetWithPrintInfo:_t1 modalForWindow:_t2 delegate:_t3 didEndSelector:_t4 contextInfo:_t5];
}

// method '-[NSPageLayout convertOldFactor:newFactor:]'
void env___IM_NSPageLayout_convertOldFactor_CnewFactor_C(void *_instance, U32 _self, U32 oldFactorPointer, U32 newFactorPointer) {
    float* _t1 = (float*)oldFactorPointer;
    float* _t2 = (float*)newFactorPointer;
    [(NSPageLayout*)_self convertOldFactor:_t1 newFactor:_t2];
}

// method '+[NSPageLayout pageLayout]'
U32 env___CM_NSPageLayout_pageLayout(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class pageLayout];
    return (U32)_result;
}

// method '-[NSPageLayout pickedButton:]'
void env___IM_NSPageLayout_pickedButton_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPageLayout*)_self pickedButton:_t1];
}

// method '-[NSPageLayout pickedOrientation:]'
void env___IM_NSPageLayout_pickedOrientation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPageLayout*)_self pickedOrientation:_t1];
}

// method '-[NSPageLayout pickedPaperSize:]'
void env___IM_NSPageLayout_pickedPaperSize_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPageLayout*)_self pickedPaperSize:_t1];
}

// method '-[NSPageLayout pickedUnits:]'
void env___IM_NSPageLayout_pickedUnits_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPageLayout*)_self pickedUnits:_t1];
}

// method '-[NSPageLayout printInfo]'
U32 env___IM_NSPageLayout_printInfo(void *_instance, U32 _self) {
    id _result = (id)[(NSPageLayout*)_self printInfo];
    return (U32)_result;
}

// method '-[NSPageLayout readPrintInfo]'
void env___IM_NSPageLayout_readPrintInfo(void *_instance, U32 _self) {
    [(NSPageLayout*)_self readPrintInfo];
}

// method '-[NSPageLayout runModal]'
U32 env___IM_NSPageLayout_runModal(void *_instance, U32 _self) {
    int _result = (int)[(NSPageLayout*)_self runModal];
    return (U32)_result;
}

// method '-[NSPageLayout runModalWithPrintInfo:]'
U32 env___IM_NSPageLayout_runModalWithPrintInfo_C(void *_instance, U32 _self, U32 pInfoPointer) {
    id _t1 = (id)pInfoPointer;
    int _result = (int)[(NSPageLayout*)_self runModalWithPrintInfo:_t1];
    return (U32)_result;
}

// method '-[NSPageLayout setAccessoryView:]'
void env___IM_NSPageLayout_setAccessoryView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSPageLayout*)_self setAccessoryView:_t1];
}

// method '-[NSPageLayout writePrintInfo]'
void env___IM_NSPageLayout_writePrintInfo(void *_instance, U32 _self) {
    [(NSPageLayout*)_self writePrintInfo];
}

// method '-[NSPanel becomesKeyOnlyIfNeeded]'
U32 env___IM_NSPanel_becomesKeyOnlyIfNeeded(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPanel*)_self becomesKeyOnlyIfNeeded];
    return (U32)_result;
}

// method '-[NSPanel isFloatingPanel]'
U32 env___IM_NSPanel_isFloatingPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPanel*)_self isFloatingPanel];
    return (U32)_result;
}

// method '-[NSPanel setBecomesKeyOnlyIfNeeded:]'
void env___IM_NSPanel_setBecomesKeyOnlyIfNeeded_C(void *_instance, U32 _self, U32 flag) {
    [(NSPanel*)_self setBecomesKeyOnlyIfNeeded:flag];
}

// method '-[NSPanel setFloatingPanel:]'
void env___IM_NSPanel_setFloatingPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSPanel*)_self setFloatingPanel:flag];
}

// method '-[NSPanel setWorksWhenModal:]'
void env___IM_NSPanel_setWorksWhenModal_C(void *_instance, U32 _self, U32 flag) {
    [(NSPanel*)_self setWorksWhenModal:flag];
}

// method '-[NSPanel worksWhenModal]'
U32 env___IM_NSPanel_worksWhenModal(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPanel*)_self worksWhenModal];
    return (U32)_result;
}

// method '-[NSParagraphStyle alignment]'
U32 env___IM_NSParagraphStyle_alignment(void *_instance, U32 _self) {
    int _result = (int)[(NSParagraphStyle*)_self alignment];
    return (U32)_result;
}

// method '-[NSParagraphStyle baseWritingDirection]'
U32 env___IM_NSParagraphStyle_baseWritingDirection(void *_instance, U32 _self) {
    int _result = (int)[(NSParagraphStyle*)_self baseWritingDirection];
    return (U32)_result;
}

// method '+[NSParagraphStyle defaultParagraphStyle]'
U32 env___CM_NSParagraphStyle_defaultParagraphStyle(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultParagraphStyle];
    return (U32)_result;
}

// method '-[NSParagraphStyle defaultTabInterval]'
F32 env___IM_NSParagraphStyle_defaultTabInterval(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self defaultTabInterval];
    return (F32)_result;
}

// method '+[NSParagraphStyle defaultWritingDirectionForLanguage:]'
U32 env___CM_NSParagraphStyle_defaultWritingDirectionForLanguage_C(void *_instance, U32 _class, U32 languageNamePointer) {
    id _t1 = (id)languageNamePointer;
    int _result = (int)[(Class)_class defaultWritingDirectionForLanguage:_t1];
    return (U32)_result;
}

// method '-[NSParagraphStyle firstLineHeadIndent]'
F32 env___IM_NSParagraphStyle_firstLineHeadIndent(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self firstLineHeadIndent];
    return (F32)_result;
}

// method '-[NSParagraphStyle headIndent]'
F32 env___IM_NSParagraphStyle_headIndent(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self headIndent];
    return (F32)_result;
}

// method '-[NSParagraphStyle headerLevel]'
U32 env___IM_NSParagraphStyle_headerLevel(void *_instance, U32 _self) {
    int _result = (int)[(NSParagraphStyle*)_self headerLevel];
    return (U32)_result;
}

// method '-[NSParagraphStyle hyphenationFactor]'
F32 env___IM_NSParagraphStyle_hyphenationFactor(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self hyphenationFactor];
    return (F32)_result;
}

// method '-[NSParagraphStyle lineBreakMode]'
U32 env___IM_NSParagraphStyle_lineBreakMode(void *_instance, U32 _self) {
    int _result = (int)[(NSParagraphStyle*)_self lineBreakMode];
    return (U32)_result;
}

// method '-[NSParagraphStyle lineHeightMultiple]'
F32 env___IM_NSParagraphStyle_lineHeightMultiple(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self lineHeightMultiple];
    return (F32)_result;
}

// method '-[NSParagraphStyle lineSpacing]'
F32 env___IM_NSParagraphStyle_lineSpacing(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self lineSpacing];
    return (F32)_result;
}

// method '-[NSParagraphStyle maximumLineHeight]'
F32 env___IM_NSParagraphStyle_maximumLineHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self maximumLineHeight];
    return (F32)_result;
}

// method '-[NSParagraphStyle minimumLineHeight]'
F32 env___IM_NSParagraphStyle_minimumLineHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self minimumLineHeight];
    return (F32)_result;
}

// method '-[NSParagraphStyle paragraphSpacing]'
F32 env___IM_NSParagraphStyle_paragraphSpacing(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self paragraphSpacing];
    return (F32)_result;
}

// method '-[NSParagraphStyle paragraphSpacingBefore]'
F32 env___IM_NSParagraphStyle_paragraphSpacingBefore(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self paragraphSpacingBefore];
    return (F32)_result;
}

// method '-[NSParagraphStyle tabStops]'
U32 env___IM_NSParagraphStyle_tabStops(void *_instance, U32 _self) {
    id _result = (id)[(NSParagraphStyle*)_self tabStops];
    return (U32)_result;
}

// method '-[NSParagraphStyle tailIndent]'
F32 env___IM_NSParagraphStyle_tailIndent(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self tailIndent];
    return (F32)_result;
}

// method '-[NSParagraphStyle textBlocks]'
U32 env___IM_NSParagraphStyle_textBlocks(void *_instance, U32 _self) {
    id _result = (id)[(NSParagraphStyle*)_self textBlocks];
    return (U32)_result;
}

// method '-[NSParagraphStyle textLists]'
U32 env___IM_NSParagraphStyle_textLists(void *_instance, U32 _self) {
    id _result = (id)[(NSParagraphStyle*)_self textLists];
    return (U32)_result;
}

// method '-[NSParagraphStyle tighteningFactorForTruncation]'
F32 env___IM_NSParagraphStyle_tighteningFactorForTruncation(void *_instance, U32 _self) {
    float _result = (float)[(NSParagraphStyle*)_self tighteningFactorForTruncation];
    return (F32)_result;
}

// method '-[NSPasteboard addTypes:owner:]'
U32 env___IM_NSPasteboard_addTypes_Cowner_C(void *_instance, U32 _self, U32 newTypesPointer, U32 newOwnerPointer) {
    id _t1 = (id)newTypesPointer;
    id _t2 = (id)newOwnerPointer;
    int _result = (int)[(NSPasteboard*)_self addTypes:_t1 owner:_t2];
    return (U32)_result;
}

// method '-[NSPasteboard availableTypeFromArray:]'
U32 env___IM_NSPasteboard_availableTypeFromArray_C(void *_instance, U32 _self, U32 typesPointer) {
    id _t1 = (id)typesPointer;
    id _result = (id)[(NSPasteboard*)_self availableTypeFromArray:_t1];
    return (U32)_result;
}

// method '-[NSPasteboard changeCount]'
U32 env___IM_NSPasteboard_changeCount(void *_instance, U32 _self) {
    int _result = (int)[(NSPasteboard*)_self changeCount];
    return (U32)_result;
}

// method '-[NSPasteboard dataForType:]'
U32 env___IM_NSPasteboard_dataForType_C(void *_instance, U32 _self, U32 dataTypePointer) {
    id _t1 = (id)dataTypePointer;
    id _result = (id)[(NSPasteboard*)_self dataForType:_t1];
    return (U32)_result;
}

// method '-[NSPasteboard declareTypes:owner:]'
U32 env___IM_NSPasteboard_declareTypes_Cowner_C(void *_instance, U32 _self, U32 newTypesPointer, U32 newOwnerPointer) {
    id _t1 = (id)newTypesPointer;
    id _t2 = (id)newOwnerPointer;
    int _result = (int)[(NSPasteboard*)_self declareTypes:_t1 owner:_t2];
    return (U32)_result;
}

// method '+[NSPasteboard generalPasteboard]'
U32 env___CM_NSPasteboard_generalPasteboard(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class generalPasteboard];
    return (U32)_result;
}

// method '-[NSPasteboard name]'
U32 env___IM_NSPasteboard_name(void *_instance, U32 _self) {
    id _result = (id)[(NSPasteboard*)_self name];
    return (U32)_result;
}

// method '+[NSPasteboard pasteboardByFilteringData:ofType:]'
U32 env___CM_NSPasteboard_pasteboardByFilteringData_CofType_C(void *_instance, U32 _class, U32 dataPointer, U32 typePointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)typePointer;
    id _result = (id)[(Class)_class pasteboardByFilteringData:_t1 ofType:_t2];
    return (U32)_result;
}

// method '+[NSPasteboard pasteboardByFilteringFile:]'
U32 env___CM_NSPasteboard_pasteboardByFilteringFile_C(void *_instance, U32 _class, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    id _result = (id)[(Class)_class pasteboardByFilteringFile:_t1];
    return (U32)_result;
}

// method '+[NSPasteboard pasteboardByFilteringTypesInPasteboard:]'
U32 env___CM_NSPasteboard_pasteboardByFilteringTypesInPasteboard_C(void *_instance, U32 _class, U32 pboardPointer) {
    id _t1 = (id)pboardPointer;
    id _result = (id)[(Class)_class pasteboardByFilteringTypesInPasteboard:_t1];
    return (U32)_result;
}

// method '+[NSPasteboard pasteboardWithName:]'
U32 env___CM_NSPasteboard_pasteboardWithName_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(Class)_class pasteboardWithName:_t1];
    return (U32)_result;
}

// method '+[NSPasteboard pasteboardWithUniqueName]'
U32 env___CM_NSPasteboard_pasteboardWithUniqueName(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class pasteboardWithUniqueName];
    return (U32)_result;
}

// method '-[NSPasteboard propertyListForType:]'
U32 env___IM_NSPasteboard_propertyListForType_C(void *_instance, U32 _self, U32 dataTypePointer) {
    id _t1 = (id)dataTypePointer;
    id _result = (id)[(NSPasteboard*)_self propertyListForType:_t1];
    return (U32)_result;
}

// method '-[NSPasteboard readFileContentsType:toFile:]'
U32 env___IM_NSPasteboard_readFileContentsType_CtoFile_C(void *_instance, U32 _self, U32 typePointer, U32 filenamePointer) {
    id _t1 = (id)typePointer;
    id _t2 = (id)filenamePointer;
    id _result = (id)[(NSPasteboard*)_self readFileContentsType:_t1 toFile:_t2];
    return (U32)_result;
}

// method '-[NSPasteboard readFileWrapper]'
U32 env___IM_NSPasteboard_readFileWrapper(void *_instance, U32 _self) {
    id _result = (id)[(NSPasteboard*)_self readFileWrapper];
    return (U32)_result;
}

// method '-[NSPasteboard releaseGlobally]'
void env___IM_NSPasteboard_releaseGlobally(void *_instance, U32 _self) {
    [(NSPasteboard*)_self releaseGlobally];
}

// method '-[NSPasteboard setData:forType:]'
U32 env___IM_NSPasteboard_setData_CforType_C(void *_instance, U32 _self, U32 dataPointer, U32 dataTypePointer) {
    id _t1 = (id)dataPointer;
    id _t2 = (id)dataTypePointer;
    BOOL _result = (BOOL)[(NSPasteboard*)_self setData:_t1 forType:_t2];
    return (U32)_result;
}

// method '-[NSPasteboard setPropertyList:forType:]'
U32 env___IM_NSPasteboard_setPropertyList_CforType_C(void *_instance, U32 _self, U32 plistPointer, U32 dataTypePointer) {
    id _t1 = (id)plistPointer;
    id _t2 = (id)dataTypePointer;
    BOOL _result = (BOOL)[(NSPasteboard*)_self setPropertyList:_t1 forType:_t2];
    return (U32)_result;
}

// method '-[NSPasteboard setString:forType:]'
U32 env___IM_NSPasteboard_setString_CforType_C(void *_instance, U32 _self, U32 stringPointer, U32 dataTypePointer) {
    id _t1 = (id)stringPointer;
    id _t2 = (id)dataTypePointer;
    BOOL _result = (BOOL)[(NSPasteboard*)_self setString:_t1 forType:_t2];
    return (U32)_result;
}

// method '-[NSPasteboard stringForType:]'
U32 env___IM_NSPasteboard_stringForType_C(void *_instance, U32 _self, U32 dataTypePointer) {
    id _t1 = (id)dataTypePointer;
    id _result = (id)[(NSPasteboard*)_self stringForType:_t1];
    return (U32)_result;
}

// method '-[NSPasteboard types]'
U32 env___IM_NSPasteboard_types(void *_instance, U32 _self) {
    id _result = (id)[(NSPasteboard*)_self types];
    return (U32)_result;
}

// method '+[NSPasteboard typesFilterableTo:]'
U32 env___CM_NSPasteboard_typesFilterableTo_C(void *_instance, U32 _class, U32 typePointer) {
    id _t1 = (id)typePointer;
    id _result = (id)[(Class)_class typesFilterableTo:_t1];
    return (U32)_result;
}

// method '-[NSPasteboard writeFileContents:]'
U32 env___IM_NSPasteboard_writeFileContents_C(void *_instance, U32 _self, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    BOOL _result = (BOOL)[(NSPasteboard*)_self writeFileContents:_t1];
    return (U32)_result;
}

// method '-[NSPasteboard writeFileWrapper:]'
U32 env___IM_NSPasteboard_writeFileWrapper_C(void *_instance, U32 _self, U32 wrapperPointer) {
    id _t1 = (id)wrapperPointer;
    BOOL _result = (BOOL)[(NSPasteboard*)_self writeFileWrapper:_t1];
    return (U32)_result;
}

// method '-[NSPersistentDocument configurePersistentStoreCoordinatorForURL:ofType:error:]'
U32 env___IM_NSPersistentDocument_configurePersistentStoreCoordinatorForURL_CofType_Cerror_C(void *_instance, U32 _self, U32 urlPointer, U32 fileTypePointer, U32 errorPointer) {
    id _t1 = (id)urlPointer;
    id _t2 = (id)fileTypePointer;
    id* _t3 = (id*)errorPointer;
    BOOL _result = (BOOL)[(NSPersistentDocument*)_self configurePersistentStoreCoordinatorForURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSPersistentDocument managedObjectContext]'
U32 env___IM_NSPersistentDocument_managedObjectContext(void *_instance, U32 _self) {
    id _result = (id)[(NSPersistentDocument*)_self managedObjectContext];
    return (U32)_result;
}

// method '-[NSPersistentDocument managedObjectModel]'
U32 env___IM_NSPersistentDocument_managedObjectModel(void *_instance, U32 _self) {
    id _result = (id)[(NSPersistentDocument*)_self managedObjectModel];
    return (U32)_result;
}

// method '-[NSPersistentDocument persistentStoreTypeForFileType:]'
U32 env___IM_NSPersistentDocument_persistentStoreTypeForFileType_C(void *_instance, U32 _self, U32 fileTypePointer) {
    id _t1 = (id)fileTypePointer;
    id _result = (id)[(NSPersistentDocument*)_self persistentStoreTypeForFileType:_t1];
    return (U32)_result;
}

// method '-[NSPersistentDocument readFromURL:ofType:error:]'
U32 env___IM_NSPersistentDocument_readFromURL_CofType_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 errorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id* _t3 = (id*)errorPointer;
    BOOL _result = (BOOL)[(NSPersistentDocument*)_self readFromURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSPersistentDocument revertToContentsOfURL:ofType:error:]'
U32 env___IM_NSPersistentDocument_revertToContentsOfURL_CofType_Cerror_C(void *_instance, U32 _self, U32 inAbsoluteURLPointer, U32 inTypeNamePointer, U32 outErrorPointer) {
    id _t1 = (id)inAbsoluteURLPointer;
    id _t2 = (id)inTypeNamePointer;
    id* _t3 = (id*)outErrorPointer;
    BOOL _result = (BOOL)[(NSPersistentDocument*)_self revertToContentsOfURL:_t1 ofType:_t2 error:_t3];
    return (U32)_result;
}

// method '-[NSPersistentDocument setManagedObjectContext:]'
void env___IM_NSPersistentDocument_setManagedObjectContext_C(void *_instance, U32 _self, U32 managedObjectContextPointer) {
    id _t1 = (id)managedObjectContextPointer;
    [(NSPersistentDocument*)_self setManagedObjectContext:_t1];
}

// method '-[NSPersistentDocument writeToURL:ofType:forSaveOperation:originalContentsURL:error:]'
U32 env___IM_NSPersistentDocument_writeToURL_CofType_CforSaveOperation_CoriginalContentsURL_Cerror_C(void *_instance, U32 _self, U32 absoluteURLPointer, U32 typeNamePointer, U32 saveOperation, U32 absoluteOriginalContentsURLPointer, U32 errorPointer) {
    id _t1 = (id)absoluteURLPointer;
    id _t2 = (id)typeNamePointer;
    id _t3 = (id)absoluteOriginalContentsURLPointer;
    id* _t4 = (id*)errorPointer;
    BOOL _result = (BOOL)[(NSPersistentDocument*)_self writeToURL:_t1 ofType:_t2 forSaveOperation:saveOperation originalContentsURL:_t3 error:_t4];
    return (U32)_result;
}

// method '-[NSPopUpButton addItemWithTitle:]'
void env___IM_NSPopUpButton_addItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButton*)_self addItemWithTitle:_t1];
}

// method '-[NSPopUpButton addItemsWithTitles:]'
void env___IM_NSPopUpButton_addItemsWithTitles_C(void *_instance, U32 _self, U32 itemTitlesPointer) {
    id _t1 = (id)itemTitlesPointer;
    [(NSPopUpButton*)_self addItemsWithTitles:_t1];
}

// method '-[NSPopUpButton autoenablesItems]'
U32 env___IM_NSPopUpButton_autoenablesItems(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPopUpButton*)_self autoenablesItems];
    return (U32)_result;
}

// method '-[NSPopUpButton indexOfItem:]'
U32 env___IM_NSPopUpButton_indexOfItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    int _result = (int)[(NSPopUpButton*)_self indexOfItem:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButton indexOfItemWithRepresentedObject:]'
U32 env___IM_NSPopUpButton_indexOfItemWithRepresentedObject_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    int _result = (int)[(NSPopUpButton*)_self indexOfItemWithRepresentedObject:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButton indexOfItemWithTag:]'
U32 env___IM_NSPopUpButton_indexOfItemWithTag_C(void *_instance, U32 _self, U32 tag) {
    int _result = (int)[(NSPopUpButton*)_self indexOfItemWithTag:tag];
    return (U32)_result;
}

// method '-[NSPopUpButton indexOfItemWithTarget:andAction:]'
U32 env___IM_NSPopUpButton_indexOfItemWithTarget_CandAction_C(void *_instance, U32 _self, U32 targetPointer, U32 actionSelectorPointer) {
    id _t1 = (id)targetPointer;
    SEL _t2 = (SEL)actionSelectorPointer;
    int _result = (int)[(NSPopUpButton*)_self indexOfItemWithTarget:_t1 andAction:_t2];
    return (U32)_result;
}

// method '-[NSPopUpButton indexOfItemWithTitle:]'
U32 env___IM_NSPopUpButton_indexOfItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    int _result = (int)[(NSPopUpButton*)_self indexOfItemWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButton indexOfSelectedItem]'
U32 env___IM_NSPopUpButton_indexOfSelectedItem(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButton*)_self indexOfSelectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButton initWithFrame:pullsDown:]'
U32 env___IM_NSPopUpButton_initWithFrame_CpullsDown_C(void *_instance, U32 _self, U32 buttonFrameIndirect, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + buttonFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSPopUpButton*)_self initWithFrame:_t1 pullsDown:flag];
    return (U32)_result;
}

// method '-[NSPopUpButton insertItemWithTitle:atIndex:]'
void env___IM_NSPopUpButton_insertItemWithTitle_CatIndex_C(void *_instance, U32 _self, U32 titlePointer, U32 index) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButton*)_self insertItemWithTitle:_t1 atIndex:index];
}

// method '-[NSPopUpButton itemArray]'
U32 env___IM_NSPopUpButton_itemArray(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButton*)_self itemArray];
    return (U32)_result;
}

// method '-[NSPopUpButton itemAtIndex:]'
U32 env___IM_NSPopUpButton_itemAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSPopUpButton*)_self itemAtIndex:index];
    return (U32)_result;
}

// method '-[NSPopUpButton itemTitleAtIndex:]'
U32 env___IM_NSPopUpButton_itemTitleAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSPopUpButton*)_self itemTitleAtIndex:index];
    return (U32)_result;
}

// method '-[NSPopUpButton itemTitles]'
U32 env___IM_NSPopUpButton_itemTitles(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButton*)_self itemTitles];
    return (U32)_result;
}

// method '-[NSPopUpButton itemWithTitle:]'
U32 env___IM_NSPopUpButton_itemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    id _result = (id)[(NSPopUpButton*)_self itemWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButton lastItem]'
U32 env___IM_NSPopUpButton_lastItem(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButton*)_self lastItem];
    return (U32)_result;
}

// method '-[NSPopUpButton menu]'
U32 env___IM_NSPopUpButton_menu(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButton*)_self menu];
    return (U32)_result;
}

// method '-[NSPopUpButton numberOfItems]'
U32 env___IM_NSPopUpButton_numberOfItems(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButton*)_self numberOfItems];
    return (U32)_result;
}

// method '-[NSPopUpButton preferredEdge]'
U32 env___IM_NSPopUpButton_preferredEdge(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButton*)_self preferredEdge];
    return (U32)_result;
}

// method '-[NSPopUpButton pullsDown]'
U32 env___IM_NSPopUpButton_pullsDown(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPopUpButton*)_self pullsDown];
    return (U32)_result;
}

// method '-[NSPopUpButton removeAllItems]'
void env___IM_NSPopUpButton_removeAllItems(void *_instance, U32 _self) {
    [(NSPopUpButton*)_self removeAllItems];
}

// method '-[NSPopUpButton removeItemAtIndex:]'
void env___IM_NSPopUpButton_removeItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSPopUpButton*)_self removeItemAtIndex:index];
}

// method '-[NSPopUpButton removeItemWithTitle:]'
void env___IM_NSPopUpButton_removeItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButton*)_self removeItemWithTitle:_t1];
}

// method '-[NSPopUpButton selectItem:]'
void env___IM_NSPopUpButton_selectItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSPopUpButton*)_self selectItem:_t1];
}

// method '-[NSPopUpButton selectItemAtIndex:]'
void env___IM_NSPopUpButton_selectItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSPopUpButton*)_self selectItemAtIndex:index];
}

// method '-[NSPopUpButton selectItemWithTag:]'
U32 env___IM_NSPopUpButton_selectItemWithTag_C(void *_instance, U32 _self, U32 tag) {
    BOOL _result = (BOOL)[(NSPopUpButton*)_self selectItemWithTag:tag];
    return (U32)_result;
}

// method '-[NSPopUpButton selectItemWithTitle:]'
void env___IM_NSPopUpButton_selectItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButton*)_self selectItemWithTitle:_t1];
}

// method '-[NSPopUpButton selectedItem]'
U32 env___IM_NSPopUpButton_selectedItem(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButton*)_self selectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButton setAutoenablesItems:]'
void env___IM_NSPopUpButton_setAutoenablesItems_C(void *_instance, U32 _self, U32 flag) {
    [(NSPopUpButton*)_self setAutoenablesItems:flag];
}

// method '-[NSPopUpButton setMenu:]'
void env___IM_NSPopUpButton_setMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSPopUpButton*)_self setMenu:_t1];
}

// method '-[NSPopUpButton setPreferredEdge:]'
void env___IM_NSPopUpButton_setPreferredEdge_C(void *_instance, U32 _self, U32 edge) {
    [(NSPopUpButton*)_self setPreferredEdge:edge];
}

// method '-[NSPopUpButton setPullsDown:]'
void env___IM_NSPopUpButton_setPullsDown_C(void *_instance, U32 _self, U32 flag) {
    [(NSPopUpButton*)_self setPullsDown:flag];
}

// method '-[NSPopUpButton setTitle:]'
void env___IM_NSPopUpButton_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSPopUpButton*)_self setTitle:_t1];
}

// method '-[NSPopUpButton synchronizeTitleAndSelectedItem]'
void env___IM_NSPopUpButton_synchronizeTitleAndSelectedItem(void *_instance, U32 _self) {
    [(NSPopUpButton*)_self synchronizeTitleAndSelectedItem];
}

// method '-[NSPopUpButton titleOfSelectedItem]'
U32 env___IM_NSPopUpButton_titleOfSelectedItem(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButton*)_self titleOfSelectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell addItemWithTitle:]'
void env___IM_NSPopUpButtonCell_addItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButtonCell*)_self addItemWithTitle:_t1];
}

// method '-[NSPopUpButtonCell addItemsWithTitles:]'
void env___IM_NSPopUpButtonCell_addItemsWithTitles_C(void *_instance, U32 _self, U32 itemTitlesPointer) {
    id _t1 = (id)itemTitlesPointer;
    [(NSPopUpButtonCell*)_self addItemsWithTitles:_t1];
}

// method '-[NSPopUpButtonCell altersStateOfSelectedItem]'
U32 env___IM_NSPopUpButtonCell_altersStateOfSelectedItem(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPopUpButtonCell*)_self altersStateOfSelectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell arrowPosition]'
U32 env___IM_NSPopUpButtonCell_arrowPosition(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButtonCell*)_self arrowPosition];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell attachPopUpWithFrame:inView:]'
void env___IM_NSPopUpButtonCell_attachPopUpWithFrame_CinView_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSPopUpButtonCell*)_self attachPopUpWithFrame:_t1 inView:_t2];
}

// method '-[NSPopUpButtonCell autoenablesItems]'
U32 env___IM_NSPopUpButtonCell_autoenablesItems(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPopUpButtonCell*)_self autoenablesItems];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell dismissPopUp]'
void env___IM_NSPopUpButtonCell_dismissPopUp(void *_instance, U32 _self) {
    [(NSPopUpButtonCell*)_self dismissPopUp];
}

// method '-[NSPopUpButtonCell indexOfItem:]'
U32 env___IM_NSPopUpButtonCell_indexOfItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    int _result = (int)[(NSPopUpButtonCell*)_self indexOfItem:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell indexOfItemWithRepresentedObject:]'
U32 env___IM_NSPopUpButtonCell_indexOfItemWithRepresentedObject_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    int _result = (int)[(NSPopUpButtonCell*)_self indexOfItemWithRepresentedObject:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell indexOfItemWithTag:]'
U32 env___IM_NSPopUpButtonCell_indexOfItemWithTag_C(void *_instance, U32 _self, U32 tag) {
    int _result = (int)[(NSPopUpButtonCell*)_self indexOfItemWithTag:tag];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell indexOfItemWithTarget:andAction:]'
U32 env___IM_NSPopUpButtonCell_indexOfItemWithTarget_CandAction_C(void *_instance, U32 _self, U32 targetPointer, U32 actionSelectorPointer) {
    id _t1 = (id)targetPointer;
    SEL _t2 = (SEL)actionSelectorPointer;
    int _result = (int)[(NSPopUpButtonCell*)_self indexOfItemWithTarget:_t1 andAction:_t2];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell indexOfItemWithTitle:]'
U32 env___IM_NSPopUpButtonCell_indexOfItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    int _result = (int)[(NSPopUpButtonCell*)_self indexOfItemWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell indexOfSelectedItem]'
U32 env___IM_NSPopUpButtonCell_indexOfSelectedItem(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButtonCell*)_self indexOfSelectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell initTextCell:pullsDown:]'
U32 env___IM_NSPopUpButtonCell_initTextCell_CpullsDown_C(void *_instance, U32 _self, U32 stringValuePointer, U32 pullDown) {
    id _t1 = (id)stringValuePointer;
    id _result = (id)[(NSPopUpButtonCell*)_self initTextCell:_t1 pullsDown:pullDown];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell insertItemWithTitle:atIndex:]'
void env___IM_NSPopUpButtonCell_insertItemWithTitle_CatIndex_C(void *_instance, U32 _self, U32 titlePointer, U32 index) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButtonCell*)_self insertItemWithTitle:_t1 atIndex:index];
}

// method '-[NSPopUpButtonCell itemArray]'
U32 env___IM_NSPopUpButtonCell_itemArray(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self itemArray];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell itemAtIndex:]'
U32 env___IM_NSPopUpButtonCell_itemAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSPopUpButtonCell*)_self itemAtIndex:index];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell itemTitleAtIndex:]'
U32 env___IM_NSPopUpButtonCell_itemTitleAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSPopUpButtonCell*)_self itemTitleAtIndex:index];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell itemTitles]'
U32 env___IM_NSPopUpButtonCell_itemTitles(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self itemTitles];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell itemWithTitle:]'
U32 env___IM_NSPopUpButtonCell_itemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    id _result = (id)[(NSPopUpButtonCell*)_self itemWithTitle:_t1];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell lastItem]'
U32 env___IM_NSPopUpButtonCell_lastItem(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self lastItem];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell menu]'
U32 env___IM_NSPopUpButtonCell_menu(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self menu];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell numberOfItems]'
U32 env___IM_NSPopUpButtonCell_numberOfItems(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButtonCell*)_self numberOfItems];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell objectValue]'
U32 env___IM_NSPopUpButtonCell_objectValue(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self objectValue];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell performClickWithFrame:inView:]'
void env___IM_NSPopUpButtonCell_performClickWithFrame_CinView_C(void *_instance, U32 _self, U32 frameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSPopUpButtonCell*)_self performClickWithFrame:_t1 inView:_t2];
}

// method '-[NSPopUpButtonCell preferredEdge]'
U32 env___IM_NSPopUpButtonCell_preferredEdge(void *_instance, U32 _self) {
    int _result = (int)[(NSPopUpButtonCell*)_self preferredEdge];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell pullsDown]'
U32 env___IM_NSPopUpButtonCell_pullsDown(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPopUpButtonCell*)_self pullsDown];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell removeAllItems]'
void env___IM_NSPopUpButtonCell_removeAllItems(void *_instance, U32 _self) {
    [(NSPopUpButtonCell*)_self removeAllItems];
}

// method '-[NSPopUpButtonCell removeItemAtIndex:]'
void env___IM_NSPopUpButtonCell_removeItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSPopUpButtonCell*)_self removeItemAtIndex:index];
}

// method '-[NSPopUpButtonCell removeItemWithTitle:]'
void env___IM_NSPopUpButtonCell_removeItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButtonCell*)_self removeItemWithTitle:_t1];
}

// method '-[NSPopUpButtonCell selectItem:]'
void env___IM_NSPopUpButtonCell_selectItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSPopUpButtonCell*)_self selectItem:_t1];
}

// method '-[NSPopUpButtonCell selectItemAtIndex:]'
void env___IM_NSPopUpButtonCell_selectItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSPopUpButtonCell*)_self selectItemAtIndex:index];
}

// method '-[NSPopUpButtonCell selectItemWithTag:]'
U32 env___IM_NSPopUpButtonCell_selectItemWithTag_C(void *_instance, U32 _self, U32 tag) {
    BOOL _result = (BOOL)[(NSPopUpButtonCell*)_self selectItemWithTag:tag];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell selectItemWithTitle:]'
void env___IM_NSPopUpButtonCell_selectItemWithTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSPopUpButtonCell*)_self selectItemWithTitle:_t1];
}

// method '-[NSPopUpButtonCell selectedItem]'
U32 env___IM_NSPopUpButtonCell_selectedItem(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self selectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell setAltersStateOfSelectedItem:]'
void env___IM_NSPopUpButtonCell_setAltersStateOfSelectedItem_C(void *_instance, U32 _self, U32 flag) {
    [(NSPopUpButtonCell*)_self setAltersStateOfSelectedItem:flag];
}

// method '-[NSPopUpButtonCell setArrowPosition:]'
void env___IM_NSPopUpButtonCell_setArrowPosition_C(void *_instance, U32 _self, U32 position) {
    [(NSPopUpButtonCell*)_self setArrowPosition:position];
}

// method '-[NSPopUpButtonCell setAutoenablesItems:]'
void env___IM_NSPopUpButtonCell_setAutoenablesItems_C(void *_instance, U32 _self, U32 flag) {
    [(NSPopUpButtonCell*)_self setAutoenablesItems:flag];
}

// method '-[NSPopUpButtonCell setMenu:]'
void env___IM_NSPopUpButtonCell_setMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSPopUpButtonCell*)_self setMenu:_t1];
}

// method '-[NSPopUpButtonCell setObjectValue:]'
void env___IM_NSPopUpButtonCell_setObjectValue_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSPopUpButtonCell*)_self setObjectValue:_t1];
}

// method '-[NSPopUpButtonCell setPreferredEdge:]'
void env___IM_NSPopUpButtonCell_setPreferredEdge_C(void *_instance, U32 _self, U32 edge) {
    [(NSPopUpButtonCell*)_self setPreferredEdge:edge];
}

// method '-[NSPopUpButtonCell setPullsDown:]'
void env___IM_NSPopUpButtonCell_setPullsDown_C(void *_instance, U32 _self, U32 flag) {
    [(NSPopUpButtonCell*)_self setPullsDown:flag];
}

// method '-[NSPopUpButtonCell setTitle:]'
void env___IM_NSPopUpButtonCell_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSPopUpButtonCell*)_self setTitle:_t1];
}

// method '-[NSPopUpButtonCell setUsesItemFromMenu:]'
void env___IM_NSPopUpButtonCell_setUsesItemFromMenu_C(void *_instance, U32 _self, U32 flag) {
    [(NSPopUpButtonCell*)_self setUsesItemFromMenu:flag];
}

// method '-[NSPopUpButtonCell synchronizeTitleAndSelectedItem]'
void env___IM_NSPopUpButtonCell_synchronizeTitleAndSelectedItem(void *_instance, U32 _self) {
    [(NSPopUpButtonCell*)_self synchronizeTitleAndSelectedItem];
}

// method '-[NSPopUpButtonCell titleOfSelectedItem]'
U32 env___IM_NSPopUpButtonCell_titleOfSelectedItem(void *_instance, U32 _self) {
    id _result = (id)[(NSPopUpButtonCell*)_self titleOfSelectedItem];
    return (U32)_result;
}

// method '-[NSPopUpButtonCell usesItemFromMenu]'
U32 env___IM_NSPopUpButtonCell_usesItemFromMenu(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPopUpButtonCell*)_self usesItemFromMenu];
    return (U32)_result;
}

// method '-[NSPrintInfo bottomMargin]'
F32 env___IM_NSPrintInfo_bottomMargin(void *_instance, U32 _self) {
    float _result = (float)[(NSPrintInfo*)_self bottomMargin];
    return (F32)_result;
}

// method '+[NSPrintInfo defaultPrinter]'
U32 env___CM_NSPrintInfo_defaultPrinter(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultPrinter];
    return (U32)_result;
}

// method '-[NSPrintInfo dictionary]'
U32 env___IM_NSPrintInfo_dictionary(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintInfo*)_self dictionary];
    return (U32)_result;
}

// method '-[NSPrintInfo horizontalPagination]'
U32 env___IM_NSPrintInfo_horizontalPagination(void *_instance, U32 _self) {
    int _result = (int)[(NSPrintInfo*)_self horizontalPagination];
    return (U32)_result;
}

// method '-[NSPrintInfo imageablePageBounds]'
void env___IM_NSPrintInfo_imageablePageBounds(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSPrintInfo*)_self imageablePageBounds];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPrintInfo initWithDictionary:]'
U32 env___IM_NSPrintInfo_initWithDictionary_C(void *_instance, U32 _self, U32 attributesPointer) {
    id _t1 = (id)attributesPointer;
    id _result = (id)[(NSPrintInfo*)_self initWithDictionary:_t1];
    return (U32)_result;
}

// method '-[NSPrintInfo isHorizontallyCentered]'
U32 env___IM_NSPrintInfo_isHorizontallyCentered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintInfo*)_self isHorizontallyCentered];
    return (U32)_result;
}

// method '-[NSPrintInfo isVerticallyCentered]'
U32 env___IM_NSPrintInfo_isVerticallyCentered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintInfo*)_self isVerticallyCentered];
    return (U32)_result;
}

// method '-[NSPrintInfo jobDisposition]'
U32 env___IM_NSPrintInfo_jobDisposition(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintInfo*)_self jobDisposition];
    return (U32)_result;
}

// method '-[NSPrintInfo leftMargin]'
F32 env___IM_NSPrintInfo_leftMargin(void *_instance, U32 _self) {
    float _result = (float)[(NSPrintInfo*)_self leftMargin];
    return (F32)_result;
}

// method '-[NSPrintInfo localizedPaperName]'
U32 env___IM_NSPrintInfo_localizedPaperName(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintInfo*)_self localizedPaperName];
    return (U32)_result;
}

// method '-[NSPrintInfo orientation]'
U32 env___IM_NSPrintInfo_orientation(void *_instance, U32 _self) {
    int _result = (int)[(NSPrintInfo*)_self orientation];
    return (U32)_result;
}

// method '-[NSPrintInfo paperName]'
U32 env___IM_NSPrintInfo_paperName(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintInfo*)_self paperName];
    return (U32)_result;
}

// method '-[NSPrintInfo paperSize]'
void env___IM_NSPrintInfo_paperSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSPrintInfo*)_self paperSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPrintInfo printer]'
U32 env___IM_NSPrintInfo_printer(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintInfo*)_self printer];
    return (U32)_result;
}

// method '-[NSPrintInfo rightMargin]'
F32 env___IM_NSPrintInfo_rightMargin(void *_instance, U32 _self) {
    float _result = (float)[(NSPrintInfo*)_self rightMargin];
    return (F32)_result;
}

// method '-[NSPrintInfo setBottomMargin:]'
void env___IM_NSPrintInfo_setBottomMargin_C(void *_instance, U32 _self, F32 margin) {
    [(NSPrintInfo*)_self setBottomMargin:margin];
}

// method '+[NSPrintInfo setDefaultPrinter:]'
void env___CM_NSPrintInfo_setDefaultPrinter_C(void *_instance, U32 _class, U32 printerPointer) {
    id _t1 = (id)printerPointer;
    [(Class)_class setDefaultPrinter:_t1];
}

// method '-[NSPrintInfo setHorizontalPagination:]'
void env___IM_NSPrintInfo_setHorizontalPagination_C(void *_instance, U32 _self, U32 mode) {
    [(NSPrintInfo*)_self setHorizontalPagination:mode];
}

// method '-[NSPrintInfo setHorizontallyCentered:]'
void env___IM_NSPrintInfo_setHorizontallyCentered_C(void *_instance, U32 _self, U32 flag) {
    [(NSPrintInfo*)_self setHorizontallyCentered:flag];
}

// method '-[NSPrintInfo setJobDisposition:]'
void env___IM_NSPrintInfo_setJobDisposition_C(void *_instance, U32 _self, U32 dispositionPointer) {
    id _t1 = (id)dispositionPointer;
    [(NSPrintInfo*)_self setJobDisposition:_t1];
}

// method '-[NSPrintInfo setLeftMargin:]'
void env___IM_NSPrintInfo_setLeftMargin_C(void *_instance, U32 _self, F32 margin) {
    [(NSPrintInfo*)_self setLeftMargin:margin];
}

// method '-[NSPrintInfo setOrientation:]'
void env___IM_NSPrintInfo_setOrientation_C(void *_instance, U32 _self, U32 orientation) {
    [(NSPrintInfo*)_self setOrientation:orientation];
}

// method '-[NSPrintInfo setPaperName:]'
void env___IM_NSPrintInfo_setPaperName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(NSPrintInfo*)_self setPaperName:_t1];
}

// method '-[NSPrintInfo setPaperSize:]'
void env___IM_NSPrintInfo_setPaperSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSPrintInfo*)_self setPaperSize:_t1];
}

// method '-[NSPrintInfo setPrinter:]'
void env___IM_NSPrintInfo_setPrinter_C(void *_instance, U32 _self, U32 printerPointer) {
    id _t1 = (id)printerPointer;
    [(NSPrintInfo*)_self setPrinter:_t1];
}

// method '-[NSPrintInfo setRightMargin:]'
void env___IM_NSPrintInfo_setRightMargin_C(void *_instance, U32 _self, F32 margin) {
    [(NSPrintInfo*)_self setRightMargin:margin];
}

// method '+[NSPrintInfo setSharedPrintInfo:]'
void env___CM_NSPrintInfo_setSharedPrintInfo_C(void *_instance, U32 _class, U32 printInfoPointer) {
    id _t1 = (id)printInfoPointer;
    [(Class)_class setSharedPrintInfo:_t1];
}

// method '-[NSPrintInfo setTopMargin:]'
void env___IM_NSPrintInfo_setTopMargin_C(void *_instance, U32 _self, F32 margin) {
    [(NSPrintInfo*)_self setTopMargin:margin];
}

// method '-[NSPrintInfo setUpPrintOperationDefaultValues]'
void env___IM_NSPrintInfo_setUpPrintOperationDefaultValues(void *_instance, U32 _self) {
    [(NSPrintInfo*)_self setUpPrintOperationDefaultValues];
}

// method '-[NSPrintInfo setVerticalPagination:]'
void env___IM_NSPrintInfo_setVerticalPagination_C(void *_instance, U32 _self, U32 mode) {
    [(NSPrintInfo*)_self setVerticalPagination:mode];
}

// method '-[NSPrintInfo setVerticallyCentered:]'
void env___IM_NSPrintInfo_setVerticallyCentered_C(void *_instance, U32 _self, U32 flag) {
    [(NSPrintInfo*)_self setVerticallyCentered:flag];
}

// method '+[NSPrintInfo sharedPrintInfo]'
U32 env___CM_NSPrintInfo_sharedPrintInfo(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedPrintInfo];
    return (U32)_result;
}

// method '+[NSPrintInfo sizeForPaperName:]'
void env___CM_NSPrintInfo_sizeForPaperName_C(void *_instance, U32 _resultIndirect, U32 _class, U32 namePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)namePointer;
    NSSize _result = (NSSize)[(Class)_class sizeForPaperName:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPrintInfo topMargin]'
F32 env___IM_NSPrintInfo_topMargin(void *_instance, U32 _self) {
    float _result = (float)[(NSPrintInfo*)_self topMargin];
    return (F32)_result;
}

// method '-[NSPrintInfo verticalPagination]'
U32 env___IM_NSPrintInfo_verticalPagination(void *_instance, U32 _self) {
    int _result = (int)[(NSPrintInfo*)_self verticalPagination];
    return (U32)_result;
}

// method '+[NSPrintOperation EPSOperationWithView:insideRect:toData:]'
U32 env___CM_NSPrintOperation_EPSOperationWithView_CinsideRect_CtoData_C(void *_instance, U32 _class, U32 aViewPointer, U32 rectIndirect, U32 dataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aViewPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(Class)_class EPSOperationWithView:_t1 insideRect:_t2 toData:_t3];
    return (U32)_result;
}

// method '+[NSPrintOperation EPSOperationWithView:insideRect:toData:printInfo:]'
U32 env___CM_NSPrintOperation_EPSOperationWithView_CinsideRect_CtoData_CprintInfo_C(void *_instance, U32 _class, U32 aViewPointer, U32 rectIndirect, U32 dataPointer, U32 aPrintInfoPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aViewPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)dataPointer;
    id _t4 = (id)aPrintInfoPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(Class)_class EPSOperationWithView:_t1 insideRect:_t2 toData:_t3 printInfo:_t4];
    return (U32)_result;
}

// method '+[NSPrintOperation EPSOperationWithView:insideRect:toPath:printInfo:]'
U32 env___CM_NSPrintOperation_EPSOperationWithView_CinsideRect_CtoPath_CprintInfo_C(void *_instance, U32 _class, U32 aViewPointer, U32 rectIndirect, U32 pathPointer, U32 aPrintInfoPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aViewPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)pathPointer;
    id _t4 = (id)aPrintInfoPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(Class)_class EPSOperationWithView:_t1 insideRect:_t2 toPath:_t3 printInfo:_t4];
    return (U32)_result;
}

// method '+[NSPrintOperation PDFOperationWithView:insideRect:toData:]'
U32 env___CM_NSPrintOperation_PDFOperationWithView_CinsideRect_CtoData_C(void *_instance, U32 _class, U32 aViewPointer, U32 rectIndirect, U32 dataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aViewPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(Class)_class PDFOperationWithView:_t1 insideRect:_t2 toData:_t3];
    return (U32)_result;
}

// method '+[NSPrintOperation PDFOperationWithView:insideRect:toData:printInfo:]'
U32 env___CM_NSPrintOperation_PDFOperationWithView_CinsideRect_CtoData_CprintInfo_C(void *_instance, U32 _class, U32 aViewPointer, U32 rectIndirect, U32 dataPointer, U32 aPrintInfoPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aViewPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)dataPointer;
    id _t4 = (id)aPrintInfoPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(Class)_class PDFOperationWithView:_t1 insideRect:_t2 toData:_t3 printInfo:_t4];
    return (U32)_result;
}

// method '+[NSPrintOperation PDFOperationWithView:insideRect:toPath:printInfo:]'
U32 env___CM_NSPrintOperation_PDFOperationWithView_CinsideRect_CtoPath_CprintInfo_C(void *_instance, U32 _class, U32 aViewPointer, U32 rectIndirect, U32 pathPointer, U32 aPrintInfoPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aViewPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)pathPointer;
    id _t4 = (id)aPrintInfoPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    id _result = (id)[(Class)_class PDFOperationWithView:_t1 insideRect:_t2 toPath:_t3 printInfo:_t4];
    return (U32)_result;
}

// method '-[NSPrintOperation accessoryView]'
U32 env___IM_NSPrintOperation_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSPrintOperation canSpawnSeparateThread]'
U32 env___IM_NSPrintOperation_canSpawnSeparateThread(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self canSpawnSeparateThread];
    return (U32)_result;
}

// method '-[NSPrintOperation cleanUpOperation]'
void env___IM_NSPrintOperation_cleanUpOperation(void *_instance, U32 _self) {
    [(NSPrintOperation*)_self cleanUpOperation];
}

// method '-[NSPrintOperation context]'
U32 env___IM_NSPrintOperation_context(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self context];
    return (U32)_result;
}

// method '-[NSPrintOperation createContext]'
U32 env___IM_NSPrintOperation_createContext(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self createContext];
    return (U32)_result;
}

// method '+[NSPrintOperation currentOperation]'
U32 env___CM_NSPrintOperation_currentOperation(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class currentOperation];
    return (U32)_result;
}

// method '-[NSPrintOperation currentPage]'
U32 env___IM_NSPrintOperation_currentPage(void *_instance, U32 _self) {
    int _result = (int)[(NSPrintOperation*)_self currentPage];
    return (U32)_result;
}

// method '-[NSPrintOperation deliverResult]'
U32 env___IM_NSPrintOperation_deliverResult(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self deliverResult];
    return (U32)_result;
}

// method '-[NSPrintOperation destroyContext]'
void env___IM_NSPrintOperation_destroyContext(void *_instance, U32 _self) {
    [(NSPrintOperation*)_self destroyContext];
}

// method '-[NSPrintOperation isCopyingOperation]'
U32 env___IM_NSPrintOperation_isCopyingOperation(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self isCopyingOperation];
    return (U32)_result;
}

// method '-[NSPrintOperation jobStyleHint]'
U32 env___IM_NSPrintOperation_jobStyleHint(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self jobStyleHint];
    return (U32)_result;
}

// method '-[NSPrintOperation pageOrder]'
U32 env___IM_NSPrintOperation_pageOrder(void *_instance, U32 _self) {
    int _result = (int)[(NSPrintOperation*)_self pageOrder];
    return (U32)_result;
}

// method '-[NSPrintOperation printInfo]'
U32 env___IM_NSPrintOperation_printInfo(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self printInfo];
    return (U32)_result;
}

// method '+[NSPrintOperation printOperationWithView:]'
U32 env___CM_NSPrintOperation_printOperationWithView_C(void *_instance, U32 _class, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    id _result = (id)[(Class)_class printOperationWithView:_t1];
    return (U32)_result;
}

// method '+[NSPrintOperation printOperationWithView:printInfo:]'
U32 env___CM_NSPrintOperation_printOperationWithView_CprintInfo_C(void *_instance, U32 _class, U32 aViewPointer, U32 aPrintInfoPointer) {
    id _t1 = (id)aViewPointer;
    id _t2 = (id)aPrintInfoPointer;
    id _result = (id)[(Class)_class printOperationWithView:_t1 printInfo:_t2];
    return (U32)_result;
}

// method '-[NSPrintOperation printPanel]'
U32 env___IM_NSPrintOperation_printPanel(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self printPanel];
    return (U32)_result;
}

// method '-[NSPrintOperation runOperation]'
U32 env___IM_NSPrintOperation_runOperation(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self runOperation];
    return (U32)_result;
}

// method '-[NSPrintOperation runOperationModalForWindow:delegate:didRunSelector:contextInfo:]'
void env___IM_NSPrintOperation_runOperationModalForWindow_Cdelegate_CdidRunSelector_CcontextInfo_C(void *_instance, U32 _self, U32 docWindowPointer, U32 delegatePointer, U32 didRunSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)docWindowPointer;
    id _t2 = (id)delegatePointer;
    SEL _t3 = (SEL)didRunSelectorPointer;
    void* _t4 = (void*)contextInfoPointer;
    [(NSPrintOperation*)_self runOperationModalForWindow:_t1 delegate:_t2 didRunSelector:_t3 contextInfo:_t4];
}

// method '-[NSPrintOperation setAccessoryView:]'
void env___IM_NSPrintOperation_setAccessoryView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSPrintOperation*)_self setAccessoryView:_t1];
}

// method '-[NSPrintOperation setCanSpawnSeparateThread:]'
void env___IM_NSPrintOperation_setCanSpawnSeparateThread_C(void *_instance, U32 _self, U32 canSpawnSeparateThread) {
    [(NSPrintOperation*)_self setCanSpawnSeparateThread:canSpawnSeparateThread];
}

// method '+[NSPrintOperation setCurrentOperation:]'
void env___CM_NSPrintOperation_setCurrentOperation_C(void *_instance, U32 _class, U32 operationPointer) {
    id _t1 = (id)operationPointer;
    [(Class)_class setCurrentOperation:_t1];
}

// method '-[NSPrintOperation setJobStyleHint:]'
void env___IM_NSPrintOperation_setJobStyleHint_C(void *_instance, U32 _self, U32 hintPointer) {
    id _t1 = (id)hintPointer;
    [(NSPrintOperation*)_self setJobStyleHint:_t1];
}

// method '-[NSPrintOperation setPageOrder:]'
void env___IM_NSPrintOperation_setPageOrder_C(void *_instance, U32 _self, U32 order) {
    [(NSPrintOperation*)_self setPageOrder:order];
}

// method '-[NSPrintOperation setPrintInfo:]'
void env___IM_NSPrintOperation_setPrintInfo_C(void *_instance, U32 _self, U32 aPrintInfoPointer) {
    id _t1 = (id)aPrintInfoPointer;
    [(NSPrintOperation*)_self setPrintInfo:_t1];
}

// method '-[NSPrintOperation setPrintPanel:]'
void env___IM_NSPrintOperation_setPrintPanel_C(void *_instance, U32 _self, U32 panelPointer) {
    id _t1 = (id)panelPointer;
    [(NSPrintOperation*)_self setPrintPanel:_t1];
}

// method '-[NSPrintOperation setShowPanels:]'
void env___IM_NSPrintOperation_setShowPanels_C(void *_instance, U32 _self, U32 flag) {
    [(NSPrintOperation*)_self setShowPanels:flag];
}

// method '-[NSPrintOperation setShowsPrintPanel:]'
void env___IM_NSPrintOperation_setShowsPrintPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSPrintOperation*)_self setShowsPrintPanel:flag];
}

// method '-[NSPrintOperation setShowsProgressPanel:]'
void env___IM_NSPrintOperation_setShowsProgressPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSPrintOperation*)_self setShowsProgressPanel:flag];
}

// method '-[NSPrintOperation showPanels]'
U32 env___IM_NSPrintOperation_showPanels(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self showPanels];
    return (U32)_result;
}

// method '-[NSPrintOperation showsPrintPanel]'
U32 env___IM_NSPrintOperation_showsPrintPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self showsPrintPanel];
    return (U32)_result;
}

// method '-[NSPrintOperation showsProgressPanel]'
U32 env___IM_NSPrintOperation_showsProgressPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrintOperation*)_self showsProgressPanel];
    return (U32)_result;
}

// method '-[NSPrintOperation view]'
U32 env___IM_NSPrintOperation_view(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintOperation*)_self view];
    return (U32)_result;
}

// method '-[NSPrintPanel accessoryView]'
U32 env___IM_NSPrintPanel_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintPanel*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSPrintPanel beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:]'
void env___IM_NSPrintPanel_beginSheetWithPrintInfo_CmodalForWindow_Cdelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 printInfoPointer, U32 docWindowPointer, U32 delegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)printInfoPointer;
    id _t2 = (id)docWindowPointer;
    id _t3 = (id)delegatePointer;
    SEL _t4 = (SEL)didEndSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSPrintPanel*)_self beginSheetWithPrintInfo:_t1 modalForWindow:_t2 delegate:_t3 didEndSelector:_t4 contextInfo:_t5];
}

// method '-[NSPrintPanel finalWritePrintInfo]'
void env___IM_NSPrintPanel_finalWritePrintInfo(void *_instance, U32 _self) {
    [(NSPrintPanel*)_self finalWritePrintInfo];
}

// method '-[NSPrintPanel jobStyleHint]'
U32 env___IM_NSPrintPanel_jobStyleHint(void *_instance, U32 _self) {
    id _result = (id)[(NSPrintPanel*)_self jobStyleHint];
    return (U32)_result;
}

// method '-[NSPrintPanel pickedAllPages:]'
void env___IM_NSPrintPanel_pickedAllPages_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPrintPanel*)_self pickedAllPages:_t1];
}

// method '-[NSPrintPanel pickedButton:]'
void env___IM_NSPrintPanel_pickedButton_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPrintPanel*)_self pickedButton:_t1];
}

// method '-[NSPrintPanel pickedLayoutList:]'
void env___IM_NSPrintPanel_pickedLayoutList_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSPrintPanel*)_self pickedLayoutList:_t1];
}

// method '+[NSPrintPanel printPanel]'
U32 env___CM_NSPrintPanel_printPanel(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class printPanel];
    return (U32)_result;
}

// method '-[NSPrintPanel runModal]'
U32 env___IM_NSPrintPanel_runModal(void *_instance, U32 _self) {
    int _result = (int)[(NSPrintPanel*)_self runModal];
    return (U32)_result;
}

// method '-[NSPrintPanel setAccessoryView:]'
void env___IM_NSPrintPanel_setAccessoryView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSPrintPanel*)_self setAccessoryView:_t1];
}

// method '-[NSPrintPanel setJobStyleHint:]'
void env___IM_NSPrintPanel_setJobStyleHint_C(void *_instance, U32 _self, U32 hintPointer) {
    id _t1 = (id)hintPointer;
    [(NSPrintPanel*)_self setJobStyleHint:_t1];
}

// method '-[NSPrintPanel updateFromPrintInfo]'
void env___IM_NSPrintPanel_updateFromPrintInfo(void *_instance, U32 _self) {
    [(NSPrintPanel*)_self updateFromPrintInfo];
}

// method '-[NSPrinter acceptsBinary]'
U32 env___IM_NSPrinter_acceptsBinary(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrinter*)_self acceptsBinary];
    return (U32)_result;
}

// method '-[NSPrinter booleanForKey:inTable:]'
U32 env___IM_NSPrinter_booleanForKey_CinTable_C(void *_instance, U32 _self, U32 keyPointer, U32 tablePointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    BOOL _result = (BOOL)[(NSPrinter*)_self booleanForKey:_t1 inTable:_t2];
    return (U32)_result;
}

// method '-[NSPrinter deviceDescription]'
U32 env___IM_NSPrinter_deviceDescription(void *_instance, U32 _self) {
    id _result = (id)[(NSPrinter*)_self deviceDescription];
    return (U32)_result;
}

// method '-[NSPrinter domain]'
U32 env___IM_NSPrinter_domain(void *_instance, U32 _self) {
    id _result = (id)[(NSPrinter*)_self domain];
    return (U32)_result;
}

// method '-[NSPrinter floatForKey:inTable:]'
F32 env___IM_NSPrinter_floatForKey_CinTable_C(void *_instance, U32 _self, U32 keyPointer, U32 tablePointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    float _result = (float)[(NSPrinter*)_self floatForKey:_t1 inTable:_t2];
    return (F32)_result;
}

// method '-[NSPrinter host]'
U32 env___IM_NSPrinter_host(void *_instance, U32 _self) {
    id _result = (id)[(NSPrinter*)_self host];
    return (U32)_result;
}

// method '-[NSPrinter imageRectForPaper:]'
void env___IM_NSPrinter_imageRectForPaper_C(void *_instance, U32 _resultIndirect, U32 _self, U32 paperNamePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)paperNamePointer;
    NSRect _result = (NSRect)[(NSPrinter*)_self imageRectForPaper:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPrinter intForKey:inTable:]'
U32 env___IM_NSPrinter_intForKey_CinTable_C(void *_instance, U32 _self, U32 keyPointer, U32 tablePointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    int _result = (int)[(NSPrinter*)_self intForKey:_t1 inTable:_t2];
    return (U32)_result;
}

// method '-[NSPrinter isColor]'
U32 env___IM_NSPrinter_isColor(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrinter*)_self isColor];
    return (U32)_result;
}

// method '-[NSPrinter isFontAvailable:]'
U32 env___IM_NSPrinter_isFontAvailable_C(void *_instance, U32 _self, U32 faceNamePointer) {
    id _t1 = (id)faceNamePointer;
    BOOL _result = (BOOL)[(NSPrinter*)_self isFontAvailable:_t1];
    return (U32)_result;
}

// method '-[NSPrinter isKey:inTable:]'
U32 env___IM_NSPrinter_isKey_CinTable_C(void *_instance, U32 _self, U32 keyPointer, U32 tablePointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    BOOL _result = (BOOL)[(NSPrinter*)_self isKey:_t1 inTable:_t2];
    return (U32)_result;
}

// method '-[NSPrinter isOutputStackInReverseOrder]'
U32 env___IM_NSPrinter_isOutputStackInReverseOrder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSPrinter*)_self isOutputStackInReverseOrder];
    return (U32)_result;
}

// method '-[NSPrinter languageLevel]'
U32 env___IM_NSPrinter_languageLevel(void *_instance, U32 _self) {
    int _result = (int)[(NSPrinter*)_self languageLevel];
    return (U32)_result;
}

// method '-[NSPrinter name]'
U32 env___IM_NSPrinter_name(void *_instance, U32 _self) {
    id _result = (id)[(NSPrinter*)_self name];
    return (U32)_result;
}

// method '-[NSPrinter note]'
U32 env___IM_NSPrinter_note(void *_instance, U32 _self) {
    id _result = (id)[(NSPrinter*)_self note];
    return (U32)_result;
}

// method '-[NSPrinter pageSizeForPaper:]'
void env___IM_NSPrinter_pageSizeForPaper_C(void *_instance, U32 _resultIndirect, U32 _self, U32 paperNamePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)paperNamePointer;
    NSSize _result = (NSSize)[(NSPrinter*)_self pageSizeForPaper:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSPrinter printerNames]'
U32 env___CM_NSPrinter_printerNames(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class printerNames];
    return (U32)_result;
}

// method '+[NSPrinter printerTypes]'
U32 env___CM_NSPrinter_printerTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class printerTypes];
    return (U32)_result;
}

// method '+[NSPrinter printerWithName:]'
U32 env___CM_NSPrinter_printerWithName_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(Class)_class printerWithName:_t1];
    return (U32)_result;
}

// method '+[NSPrinter printerWithName:domain:includeUnavailable:]'
U32 env___CM_NSPrinter_printerWithName_Cdomain_CincludeUnavailable_C(void *_instance, U32 _class, U32 namePointer, U32 domainPointer, U32 flag) {
    id _t1 = (id)namePointer;
    id _t2 = (id)domainPointer;
    id _result = (id)[(Class)_class printerWithName:_t1 domain:_t2 includeUnavailable:flag];
    return (U32)_result;
}

// method '+[NSPrinter printerWithType:]'
U32 env___CM_NSPrinter_printerWithType_C(void *_instance, U32 _class, U32 typePointer) {
    id _t1 = (id)typePointer;
    id _result = (id)[(Class)_class printerWithType:_t1];
    return (U32)_result;
}

// method '-[NSPrinter rectForKey:inTable:]'
void env___IM_NSPrinter_rectForKey_CinTable_C(void *_instance, U32 _resultIndirect, U32 _self, U32 keyPointer, U32 tablePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    NSRect _result = (NSRect)[(NSPrinter*)_self rectForKey:_t1 inTable:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPrinter sizeForKey:inTable:]'
void env___IM_NSPrinter_sizeForKey_CinTable_C(void *_instance, U32 _resultIndirect, U32 _self, U32 keyPointer, U32 tablePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    NSSize _result = (NSSize)[(NSPrinter*)_self sizeForKey:_t1 inTable:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSPrinter statusForTable:]'
U32 env___IM_NSPrinter_statusForTable_C(void *_instance, U32 _self, U32 tableNamePointer) {
    id _t1 = (id)tableNamePointer;
    int _result = (int)[(NSPrinter*)_self statusForTable:_t1];
    return (U32)_result;
}

// method '-[NSPrinter stringForKey:inTable:]'
U32 env___IM_NSPrinter_stringForKey_CinTable_C(void *_instance, U32 _self, U32 keyPointer, U32 tablePointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    id _result = (id)[(NSPrinter*)_self stringForKey:_t1 inTable:_t2];
    return (U32)_result;
}

// method '-[NSPrinter stringListForKey:inTable:]'
U32 env___IM_NSPrinter_stringListForKey_CinTable_C(void *_instance, U32 _self, U32 keyPointer, U32 tablePointer) {
    id _t1 = (id)keyPointer;
    id _t2 = (id)tablePointer;
    id _result = (id)[(NSPrinter*)_self stringListForKey:_t1 inTable:_t2];
    return (U32)_result;
}

// method '-[NSPrinter type]'
U32 env___IM_NSPrinter_type(void *_instance, U32 _self) {
    id _result = (id)[(NSPrinter*)_self type];
    return (U32)_result;
}

// method '-[NSProgressIndicator animate:]'
void env___IM_NSProgressIndicator_animate_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSProgressIndicator*)_self animate:_t1];
}

// method '-[NSProgressIndicator animationDelay]'
F64 env___IM_NSProgressIndicator_animationDelay(void *_instance, U32 _self) {
    double _result = (double)[(NSProgressIndicator*)_self animationDelay];
    return (F64)_result;
}

// method '-[NSProgressIndicator controlSize]'
U32 env___IM_NSProgressIndicator_controlSize(void *_instance, U32 _self) {
    int _result = (int)[(NSProgressIndicator*)_self controlSize];
    return (U32)_result;
}

// method '-[NSProgressIndicator controlTint]'
U32 env___IM_NSProgressIndicator_controlTint(void *_instance, U32 _self) {
    int _result = (int)[(NSProgressIndicator*)_self controlTint];
    return (U32)_result;
}

// method '-[NSProgressIndicator doubleValue]'
F64 env___IM_NSProgressIndicator_doubleValue(void *_instance, U32 _self) {
    double _result = (double)[(NSProgressIndicator*)_self doubleValue];
    return (F64)_result;
}

// method '-[NSProgressIndicator incrementBy:]'
void env___IM_NSProgressIndicator_incrementBy_C(void *_instance, U32 _self, F64 delta) {
    [(NSProgressIndicator*)_self incrementBy:delta];
}

// method '-[NSProgressIndicator isBezeled]'
U32 env___IM_NSProgressIndicator_isBezeled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSProgressIndicator*)_self isBezeled];
    return (U32)_result;
}

// method '-[NSProgressIndicator isDisplayedWhenStopped]'
U32 env___IM_NSProgressIndicator_isDisplayedWhenStopped(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSProgressIndicator*)_self isDisplayedWhenStopped];
    return (U32)_result;
}

// method '-[NSProgressIndicator isIndeterminate]'
U32 env___IM_NSProgressIndicator_isIndeterminate(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSProgressIndicator*)_self isIndeterminate];
    return (U32)_result;
}

// method '-[NSProgressIndicator maxValue]'
F64 env___IM_NSProgressIndicator_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSProgressIndicator*)_self maxValue];
    return (F64)_result;
}

// method '-[NSProgressIndicator minValue]'
F64 env___IM_NSProgressIndicator_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSProgressIndicator*)_self minValue];
    return (F64)_result;
}

// method '-[NSProgressIndicator setAnimationDelay:]'
void env___IM_NSProgressIndicator_setAnimationDelay_C(void *_instance, U32 _self, F64 delay) {
    [(NSProgressIndicator*)_self setAnimationDelay:delay];
}

// method '-[NSProgressIndicator setBezeled:]'
void env___IM_NSProgressIndicator_setBezeled_C(void *_instance, U32 _self, U32 flag) {
    [(NSProgressIndicator*)_self setBezeled:flag];
}

// method '-[NSProgressIndicator setControlSize:]'
void env___IM_NSProgressIndicator_setControlSize_C(void *_instance, U32 _self, U32 size) {
    [(NSProgressIndicator*)_self setControlSize:size];
}

// method '-[NSProgressIndicator setControlTint:]'
void env___IM_NSProgressIndicator_setControlTint_C(void *_instance, U32 _self, U32 tint) {
    [(NSProgressIndicator*)_self setControlTint:tint];
}

// method '-[NSProgressIndicator setDisplayedWhenStopped:]'
void env___IM_NSProgressIndicator_setDisplayedWhenStopped_C(void *_instance, U32 _self, U32 isDisplayed) {
    [(NSProgressIndicator*)_self setDisplayedWhenStopped:isDisplayed];
}

// method '-[NSProgressIndicator setDoubleValue:]'
void env___IM_NSProgressIndicator_setDoubleValue_C(void *_instance, U32 _self, F64 doubleValue) {
    [(NSProgressIndicator*)_self setDoubleValue:doubleValue];
}

// method '-[NSProgressIndicator setIndeterminate:]'
void env___IM_NSProgressIndicator_setIndeterminate_C(void *_instance, U32 _self, U32 flag) {
    [(NSProgressIndicator*)_self setIndeterminate:flag];
}

// method '-[NSProgressIndicator setMaxValue:]'
void env___IM_NSProgressIndicator_setMaxValue_C(void *_instance, U32 _self, F64 newMaximum) {
    [(NSProgressIndicator*)_self setMaxValue:newMaximum];
}

// method '-[NSProgressIndicator setMinValue:]'
void env___IM_NSProgressIndicator_setMinValue_C(void *_instance, U32 _self, F64 newMinimum) {
    [(NSProgressIndicator*)_self setMinValue:newMinimum];
}

// method '-[NSProgressIndicator setStyle:]'
void env___IM_NSProgressIndicator_setStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSProgressIndicator*)_self setStyle:style];
}

// method '-[NSProgressIndicator setUsesThreadedAnimation:]'
void env___IM_NSProgressIndicator_setUsesThreadedAnimation_C(void *_instance, U32 _self, U32 threadedAnimation) {
    [(NSProgressIndicator*)_self setUsesThreadedAnimation:threadedAnimation];
}

// method '-[NSProgressIndicator sizeToFit]'
void env___IM_NSProgressIndicator_sizeToFit(void *_instance, U32 _self) {
    [(NSProgressIndicator*)_self sizeToFit];
}

// method '-[NSProgressIndicator startAnimation:]'
void env___IM_NSProgressIndicator_startAnimation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSProgressIndicator*)_self startAnimation:_t1];
}

// method '-[NSProgressIndicator stopAnimation:]'
void env___IM_NSProgressIndicator_stopAnimation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSProgressIndicator*)_self stopAnimation:_t1];
}

// method '-[NSProgressIndicator style]'
U32 env___IM_NSProgressIndicator_style(void *_instance, U32 _self) {
    int _result = (int)[(NSProgressIndicator*)_self style];
    return (U32)_result;
}

// method '-[NSProgressIndicator usesThreadedAnimation]'
U32 env___IM_NSProgressIndicator_usesThreadedAnimation(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSProgressIndicator*)_self usesThreadedAnimation];
    return (U32)_result;
}

// method '-[NSQuickDrawView qdPort]'
U32 env___IM_NSQuickDrawView_qdPort(void *_instance, U32 _self) {
    void* _result = (void*)[(NSQuickDrawView*)_self qdPort];
    return (U32)_result;
}

// method '-[NSResponder acceptsFirstResponder]'
U32 env___IM_NSResponder_acceptsFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSResponder*)_self acceptsFirstResponder];
    return (U32)_result;
}

// method '-[NSResponder becomeFirstResponder]'
U32 env___IM_NSResponder_becomeFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSResponder*)_self becomeFirstResponder];
    return (U32)_result;
}

// method '-[NSResponder cancelOperation:]'
void env___IM_NSResponder_cancelOperation_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self cancelOperation:_t1];
}

// method '-[NSResponder capitalizeWord:]'
void env___IM_NSResponder_capitalizeWord_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self capitalizeWord:_t1];
}

// method '-[NSResponder centerSelectionInVisibleArea:]'
void env___IM_NSResponder_centerSelectionInVisibleArea_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self centerSelectionInVisibleArea:_t1];
}

// method '-[NSResponder changeCaseOfLetter:]'
void env___IM_NSResponder_changeCaseOfLetter_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self changeCaseOfLetter:_t1];
}

// method '-[NSResponder complete:]'
void env___IM_NSResponder_complete_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self complete:_t1];
}

// method '-[NSResponder deleteBackward:]'
void env___IM_NSResponder_deleteBackward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteBackward:_t1];
}

// method '-[NSResponder deleteBackwardByDecomposingPreviousCharacter:]'
void env___IM_NSResponder_deleteBackwardByDecomposingPreviousCharacter_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteBackwardByDecomposingPreviousCharacter:_t1];
}

// method '-[NSResponder deleteForward:]'
void env___IM_NSResponder_deleteForward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteForward:_t1];
}

// method '-[NSResponder deleteToBeginningOfLine:]'
void env___IM_NSResponder_deleteToBeginningOfLine_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteToBeginningOfLine:_t1];
}

// method '-[NSResponder deleteToBeginningOfParagraph:]'
void env___IM_NSResponder_deleteToBeginningOfParagraph_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteToBeginningOfParagraph:_t1];
}

// method '-[NSResponder deleteToEndOfLine:]'
void env___IM_NSResponder_deleteToEndOfLine_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteToEndOfLine:_t1];
}

// method '-[NSResponder deleteToEndOfParagraph:]'
void env___IM_NSResponder_deleteToEndOfParagraph_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteToEndOfParagraph:_t1];
}

// method '-[NSResponder deleteToMark:]'
void env___IM_NSResponder_deleteToMark_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteToMark:_t1];
}

// method '-[NSResponder deleteWordBackward:]'
void env___IM_NSResponder_deleteWordBackward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteWordBackward:_t1];
}

// method '-[NSResponder deleteWordForward:]'
void env___IM_NSResponder_deleteWordForward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self deleteWordForward:_t1];
}

// method '-[NSResponder doCommandBySelector:]'
void env___IM_NSResponder_doCommandBySelector_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSResponder*)_self doCommandBySelector:_t1];
}

// method '-[NSResponder flagsChanged:]'
void env___IM_NSResponder_flagsChanged_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self flagsChanged:_t1];
}

// method '-[NSResponder flushBufferedKeyEvents]'
void env___IM_NSResponder_flushBufferedKeyEvents(void *_instance, U32 _self) {
    [(NSResponder*)_self flushBufferedKeyEvents];
}

// method '-[NSResponder helpRequested:]'
void env___IM_NSResponder_helpRequested_C(void *_instance, U32 _self, U32 eventPtrPointer) {
    id _t1 = (id)eventPtrPointer;
    [(NSResponder*)_self helpRequested:_t1];
}

// method '-[NSResponder indent:]'
void env___IM_NSResponder_indent_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self indent:_t1];
}

// method '-[NSResponder insertBacktab:]'
void env___IM_NSResponder_insertBacktab_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertBacktab:_t1];
}

// method '-[NSResponder insertContainerBreak:]'
void env___IM_NSResponder_insertContainerBreak_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertContainerBreak:_t1];
}

// method '-[NSResponder insertLineBreak:]'
void env___IM_NSResponder_insertLineBreak_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertLineBreak:_t1];
}

// method '-[NSResponder insertNewline:]'
void env___IM_NSResponder_insertNewline_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertNewline:_t1];
}

// method '-[NSResponder insertNewlineIgnoringFieldEditor:]'
void env___IM_NSResponder_insertNewlineIgnoringFieldEditor_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertNewlineIgnoringFieldEditor:_t1];
}

// method '-[NSResponder insertParagraphSeparator:]'
void env___IM_NSResponder_insertParagraphSeparator_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertParagraphSeparator:_t1];
}

// method '-[NSResponder insertTab:]'
void env___IM_NSResponder_insertTab_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertTab:_t1];
}

// method '-[NSResponder insertTabIgnoringFieldEditor:]'
void env___IM_NSResponder_insertTabIgnoringFieldEditor_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self insertTabIgnoringFieldEditor:_t1];
}

// method '-[NSResponder insertText:]'
void env___IM_NSResponder_insertText_C(void *_instance, U32 _self, U32 insertStringPointer) {
    id _t1 = (id)insertStringPointer;
    [(NSResponder*)_self insertText:_t1];
}

// method '-[NSResponder interfaceStyle]'
U32 env___IM_NSResponder_interfaceStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSResponder*)_self interfaceStyle];
    return (U32)_result;
}

// method '-[NSResponder interpretKeyEvents:]'
void env___IM_NSResponder_interpretKeyEvents_C(void *_instance, U32 _self, U32 eventArrayPointer) {
    id _t1 = (id)eventArrayPointer;
    [(NSResponder*)_self interpretKeyEvents:_t1];
}

// method '-[NSResponder keyDown:]'
void env___IM_NSResponder_keyDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self keyDown:_t1];
}

// method '-[NSResponder keyUp:]'
void env___IM_NSResponder_keyUp_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self keyUp:_t1];
}

// method '-[NSResponder lowercaseWord:]'
void env___IM_NSResponder_lowercaseWord_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self lowercaseWord:_t1];
}

// method '-[NSResponder menu]'
U32 env___IM_NSResponder_menu(void *_instance, U32 _self) {
    id _result = (id)[(NSResponder*)_self menu];
    return (U32)_result;
}

// method '-[NSResponder mouseDown:]'
void env___IM_NSResponder_mouseDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self mouseDown:_t1];
}

// method '-[NSResponder mouseDragged:]'
void env___IM_NSResponder_mouseDragged_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self mouseDragged:_t1];
}

// method '-[NSResponder mouseEntered:]'
void env___IM_NSResponder_mouseEntered_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self mouseEntered:_t1];
}

// method '-[NSResponder mouseExited:]'
void env___IM_NSResponder_mouseExited_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self mouseExited:_t1];
}

// method '-[NSResponder mouseMoved:]'
void env___IM_NSResponder_mouseMoved_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self mouseMoved:_t1];
}

// method '-[NSResponder mouseUp:]'
void env___IM_NSResponder_mouseUp_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self mouseUp:_t1];
}

// method '-[NSResponder moveBackward:]'
void env___IM_NSResponder_moveBackward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveBackward:_t1];
}

// method '-[NSResponder moveBackwardAndModifySelection:]'
void env___IM_NSResponder_moveBackwardAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveBackwardAndModifySelection:_t1];
}

// method '-[NSResponder moveDown:]'
void env___IM_NSResponder_moveDown_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveDown:_t1];
}

// method '-[NSResponder moveDownAndModifySelection:]'
void env___IM_NSResponder_moveDownAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveDownAndModifySelection:_t1];
}

// method '-[NSResponder moveForward:]'
void env___IM_NSResponder_moveForward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveForward:_t1];
}

// method '-[NSResponder moveForwardAndModifySelection:]'
void env___IM_NSResponder_moveForwardAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveForwardAndModifySelection:_t1];
}

// method '-[NSResponder moveLeft:]'
void env___IM_NSResponder_moveLeft_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveLeft:_t1];
}

// method '-[NSResponder moveLeftAndModifySelection:]'
void env___IM_NSResponder_moveLeftAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveLeftAndModifySelection:_t1];
}

// method '-[NSResponder moveRight:]'
void env___IM_NSResponder_moveRight_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveRight:_t1];
}

// method '-[NSResponder moveRightAndModifySelection:]'
void env___IM_NSResponder_moveRightAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveRightAndModifySelection:_t1];
}

// method '-[NSResponder moveToBeginningOfDocument:]'
void env___IM_NSResponder_moveToBeginningOfDocument_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveToBeginningOfDocument:_t1];
}

// method '-[NSResponder moveToBeginningOfLine:]'
void env___IM_NSResponder_moveToBeginningOfLine_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveToBeginningOfLine:_t1];
}

// method '-[NSResponder moveToBeginningOfParagraph:]'
void env___IM_NSResponder_moveToBeginningOfParagraph_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveToBeginningOfParagraph:_t1];
}

// method '-[NSResponder moveToEndOfDocument:]'
void env___IM_NSResponder_moveToEndOfDocument_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveToEndOfDocument:_t1];
}

// method '-[NSResponder moveToEndOfLine:]'
void env___IM_NSResponder_moveToEndOfLine_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveToEndOfLine:_t1];
}

// method '-[NSResponder moveToEndOfParagraph:]'
void env___IM_NSResponder_moveToEndOfParagraph_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveToEndOfParagraph:_t1];
}

// method '-[NSResponder moveUp:]'
void env___IM_NSResponder_moveUp_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveUp:_t1];
}

// method '-[NSResponder moveUpAndModifySelection:]'
void env___IM_NSResponder_moveUpAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveUpAndModifySelection:_t1];
}

// method '-[NSResponder moveWordBackward:]'
void env___IM_NSResponder_moveWordBackward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordBackward:_t1];
}

// method '-[NSResponder moveWordBackwardAndModifySelection:]'
void env___IM_NSResponder_moveWordBackwardAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordBackwardAndModifySelection:_t1];
}

// method '-[NSResponder moveWordForward:]'
void env___IM_NSResponder_moveWordForward_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordForward:_t1];
}

// method '-[NSResponder moveWordForwardAndModifySelection:]'
void env___IM_NSResponder_moveWordForwardAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordForwardAndModifySelection:_t1];
}

// method '-[NSResponder moveWordLeft:]'
void env___IM_NSResponder_moveWordLeft_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordLeft:_t1];
}

// method '-[NSResponder moveWordLeftAndModifySelection:]'
void env___IM_NSResponder_moveWordLeftAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordLeftAndModifySelection:_t1];
}

// method '-[NSResponder moveWordRight:]'
void env___IM_NSResponder_moveWordRight_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordRight:_t1];
}

// method '-[NSResponder moveWordRightAndModifySelection:]'
void env___IM_NSResponder_moveWordRightAndModifySelection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self moveWordRightAndModifySelection:_t1];
}

// method '-[NSResponder nextResponder]'
U32 env___IM_NSResponder_nextResponder(void *_instance, U32 _self) {
    id _result = (id)[(NSResponder*)_self nextResponder];
    return (U32)_result;
}

// method '-[NSResponder noResponderFor:]'
void env___IM_NSResponder_noResponderFor_C(void *_instance, U32 _self, U32 eventSelectorPointer) {
    SEL _t1 = (SEL)eventSelectorPointer;
    [(NSResponder*)_self noResponderFor:_t1];
}

// method '-[NSResponder otherMouseDown:]'
void env___IM_NSResponder_otherMouseDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self otherMouseDown:_t1];
}

// method '-[NSResponder otherMouseDragged:]'
void env___IM_NSResponder_otherMouseDragged_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self otherMouseDragged:_t1];
}

// method '-[NSResponder otherMouseUp:]'
void env___IM_NSResponder_otherMouseUp_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self otherMouseUp:_t1];
}

// method '-[NSResponder pageDown:]'
void env___IM_NSResponder_pageDown_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self pageDown:_t1];
}

// method '-[NSResponder pageUp:]'
void env___IM_NSResponder_pageUp_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self pageUp:_t1];
}

// method '-[NSResponder performKeyEquivalent:]'
U32 env___IM_NSResponder_performKeyEquivalent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSResponder*)_self performKeyEquivalent:_t1];
    return (U32)_result;
}

// method '-[NSResponder performMnemonic:]'
U32 env___IM_NSResponder_performMnemonic_C(void *_instance, U32 _self, U32 theStringPointer) {
    id _t1 = (id)theStringPointer;
    BOOL _result = (BOOL)[(NSResponder*)_self performMnemonic:_t1];
    return (U32)_result;
}

// method '-[NSResponder presentError:]'
U32 env___IM_NSResponder_presentError_C(void *_instance, U32 _self, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    BOOL _result = (BOOL)[(NSResponder*)_self presentError:_t1];
    return (U32)_result;
}

// method '-[NSResponder presentError:modalForWindow:delegate:didPresentSelector:contextInfo:]'
void env___IM_NSResponder_presentError_CmodalForWindow_Cdelegate_CdidPresentSelector_CcontextInfo_C(void *_instance, U32 _self, U32 errorPointer, U32 windowPointer, U32 delegatePointer, U32 didPresentSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)errorPointer;
    id _t2 = (id)windowPointer;
    id _t3 = (id)delegatePointer;
    SEL _t4 = (SEL)didPresentSelectorPointer;
    void* _t5 = (void*)contextInfoPointer;
    [(NSResponder*)_self presentError:_t1 modalForWindow:_t2 delegate:_t3 didPresentSelector:_t4 contextInfo:_t5];
}

// method '-[NSResponder resignFirstResponder]'
U32 env___IM_NSResponder_resignFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSResponder*)_self resignFirstResponder];
    return (U32)_result;
}

// method '-[NSResponder rightMouseDown:]'
void env___IM_NSResponder_rightMouseDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self rightMouseDown:_t1];
}

// method '-[NSResponder rightMouseDragged:]'
void env___IM_NSResponder_rightMouseDragged_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self rightMouseDragged:_t1];
}

// method '-[NSResponder rightMouseUp:]'
void env___IM_NSResponder_rightMouseUp_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self rightMouseUp:_t1];
}

// method '-[NSResponder scrollLineDown:]'
void env___IM_NSResponder_scrollLineDown_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self scrollLineDown:_t1];
}

// method '-[NSResponder scrollLineUp:]'
void env___IM_NSResponder_scrollLineUp_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self scrollLineUp:_t1];
}

// method '-[NSResponder scrollPageDown:]'
void env___IM_NSResponder_scrollPageDown_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self scrollPageDown:_t1];
}

// method '-[NSResponder scrollPageUp:]'
void env___IM_NSResponder_scrollPageUp_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self scrollPageUp:_t1];
}

// method '-[NSResponder scrollWheel:]'
void env___IM_NSResponder_scrollWheel_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self scrollWheel:_t1];
}

// method '-[NSResponder selectAll:]'
void env___IM_NSResponder_selectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self selectAll:_t1];
}

// method '-[NSResponder selectLine:]'
void env___IM_NSResponder_selectLine_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self selectLine:_t1];
}

// method '-[NSResponder selectParagraph:]'
void env___IM_NSResponder_selectParagraph_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self selectParagraph:_t1];
}

// method '-[NSResponder selectToMark:]'
void env___IM_NSResponder_selectToMark_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self selectToMark:_t1];
}

// method '-[NSResponder selectWord:]'
void env___IM_NSResponder_selectWord_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self selectWord:_t1];
}

// method '-[NSResponder setInterfaceStyle:]'
void env___IM_NSResponder_setInterfaceStyle_C(void *_instance, U32 _self, U32 interfaceStyle) {
    [(NSResponder*)_self setInterfaceStyle:interfaceStyle];
}

// method '-[NSResponder setMark:]'
void env___IM_NSResponder_setMark_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self setMark:_t1];
}

// method '-[NSResponder setMenu:]'
void env___IM_NSResponder_setMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSResponder*)_self setMenu:_t1];
}

// method '-[NSResponder setNextResponder:]'
void env___IM_NSResponder_setNextResponder_C(void *_instance, U32 _self, U32 aResponderPointer) {
    id _t1 = (id)aResponderPointer;
    [(NSResponder*)_self setNextResponder:_t1];
}

// method '-[NSResponder shouldBeTreatedAsInkEvent:]'
U32 env___IM_NSResponder_shouldBeTreatedAsInkEvent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSResponder*)_self shouldBeTreatedAsInkEvent:_t1];
    return (U32)_result;
}

// method '-[NSResponder showContextHelp:]'
void env___IM_NSResponder_showContextHelp_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self showContextHelp:_t1];
}

// method '-[NSResponder swapWithMark:]'
void env___IM_NSResponder_swapWithMark_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self swapWithMark:_t1];
}

// method '-[NSResponder tabletPoint:]'
void env___IM_NSResponder_tabletPoint_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self tabletPoint:_t1];
}

// method '-[NSResponder tabletProximity:]'
void env___IM_NSResponder_tabletProximity_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSResponder*)_self tabletProximity:_t1];
}

// method '-[NSResponder transpose:]'
void env___IM_NSResponder_transpose_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self transpose:_t1];
}

// method '-[NSResponder transposeWords:]'
void env___IM_NSResponder_transposeWords_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self transposeWords:_t1];
}

// method '-[NSResponder tryToPerform:with:]'
U32 env___IM_NSResponder_tryToPerform_Cwith_C(void *_instance, U32 _self, U32 anActionPointer, U32 anObjectPointer) {
    SEL _t1 = (SEL)anActionPointer;
    id _t2 = (id)anObjectPointer;
    BOOL _result = (BOOL)[(NSResponder*)_self tryToPerform:_t1 with:_t2];
    return (U32)_result;
}

// method '-[NSResponder undoManager]'
U32 env___IM_NSResponder_undoManager(void *_instance, U32 _self) {
    id _result = (id)[(NSResponder*)_self undoManager];
    return (U32)_result;
}

// method '-[NSResponder uppercaseWord:]'
void env___IM_NSResponder_uppercaseWord_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self uppercaseWord:_t1];
}

// method '-[NSResponder validRequestorForSendType:returnType:]'
U32 env___IM_NSResponder_validRequestorForSendType_CreturnType_C(void *_instance, U32 _self, U32 sendTypePointer, U32 returnTypePointer) {
    id _t1 = (id)sendTypePointer;
    id _t2 = (id)returnTypePointer;
    id _result = (id)[(NSResponder*)_self validRequestorForSendType:_t1 returnType:_t2];
    return (U32)_result;
}

// method '-[NSResponder willPresentError:]'
U32 env___IM_NSResponder_willPresentError_C(void *_instance, U32 _self, U32 errorPointer) {
    id _t1 = (id)errorPointer;
    id _result = (id)[(NSResponder*)_self willPresentError:_t1];
    return (U32)_result;
}

// method '-[NSResponder yank:]'
void env___IM_NSResponder_yank_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSResponder*)_self yank:_t1];
}

// method '-[NSRulerMarker drawRect:]'
void env___IM_NSRulerMarker_drawRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSRulerMarker*)_self drawRect:_t1];
}

// method '-[NSRulerMarker image]'
U32 env___IM_NSRulerMarker_image(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerMarker*)_self image];
    return (U32)_result;
}

// method '-[NSRulerMarker imageOrigin]'
void env___IM_NSRulerMarker_imageOrigin(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSRulerMarker*)_self imageOrigin];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSRulerMarker imageRectInRuler]'
void env___IM_NSRulerMarker_imageRectInRuler(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSRulerMarker*)_self imageRectInRuler];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSRulerMarker initWithRulerView:markerLocation:image:imageOrigin:]'
U32 env___IM_NSRulerMarker_initWithRulerView_CmarkerLocation_Cimage_CimageOrigin_C(void *_instance, U32 _self, U32 rulerPointer, F32 location, U32 imagePointer, U32 imageOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)rulerPointer;
    id _t2 = (id)imagePointer;
    NSPoint _t3 = *(NSPoint*)(_mem->data + imageOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    id _result = (id)[(NSRulerMarker*)_self initWithRulerView:_t1 markerLocation:location image:_t2 imageOrigin:_t3];
    return (U32)_result;
}

// method '-[NSRulerMarker isDragging]'
U32 env___IM_NSRulerMarker_isDragging(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSRulerMarker*)_self isDragging];
    return (U32)_result;
}

// method '-[NSRulerMarker isMovable]'
U32 env___IM_NSRulerMarker_isMovable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSRulerMarker*)_self isMovable];
    return (U32)_result;
}

// method '-[NSRulerMarker isRemovable]'
U32 env___IM_NSRulerMarker_isRemovable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSRulerMarker*)_self isRemovable];
    return (U32)_result;
}

// method '-[NSRulerMarker markerLocation]'
F32 env___IM_NSRulerMarker_markerLocation(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerMarker*)_self markerLocation];
    return (F32)_result;
}

// method '-[NSRulerMarker representedObject]'
U32 env___IM_NSRulerMarker_representedObject(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerMarker*)_self representedObject];
    return (U32)_result;
}

// method '-[NSRulerMarker ruler]'
U32 env___IM_NSRulerMarker_ruler(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerMarker*)_self ruler];
    return (U32)_result;
}

// method '-[NSRulerMarker setImage:]'
void env___IM_NSRulerMarker_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSRulerMarker*)_self setImage:_t1];
}

// method '-[NSRulerMarker setImageOrigin:]'
void env___IM_NSRulerMarker_setImageOrigin_C(void *_instance, U32 _self, U32 imageOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + imageOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSRulerMarker*)_self setImageOrigin:_t1];
}

// method '-[NSRulerMarker setMarkerLocation:]'
void env___IM_NSRulerMarker_setMarkerLocation_C(void *_instance, U32 _self, F32 location) {
    [(NSRulerMarker*)_self setMarkerLocation:location];
}

// method '-[NSRulerMarker setMovable:]'
void env___IM_NSRulerMarker_setMovable_C(void *_instance, U32 _self, U32 flag) {
    [(NSRulerMarker*)_self setMovable:flag];
}

// method '-[NSRulerMarker setRemovable:]'
void env___IM_NSRulerMarker_setRemovable_C(void *_instance, U32 _self, U32 flag) {
    [(NSRulerMarker*)_self setRemovable:flag];
}

// method '-[NSRulerMarker setRepresentedObject:]'
void env___IM_NSRulerMarker_setRepresentedObject_C(void *_instance, U32 _self, U32 representedObjectPointer) {
    id _t1 = (id)representedObjectPointer;
    [(NSRulerMarker*)_self setRepresentedObject:_t1];
}

// method '-[NSRulerMarker thicknessRequiredInRuler]'
F32 env___IM_NSRulerMarker_thicknessRequiredInRuler(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerMarker*)_self thicknessRequiredInRuler];
    return (F32)_result;
}

// method '-[NSRulerMarker trackMouse:adding:]'
U32 env___IM_NSRulerMarker_trackMouse_Cadding_C(void *_instance, U32 _self, U32 mouseDownEventPointer, U32 isAdding) {
    id _t1 = (id)mouseDownEventPointer;
    BOOL _result = (BOOL)[(NSRulerMarker*)_self trackMouse:_t1 adding:isAdding];
    return (U32)_result;
}

// method '-[NSRulerView accessoryView]'
U32 env___IM_NSRulerView_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerView*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSRulerView addMarker:]'
void env___IM_NSRulerView_addMarker_C(void *_instance, U32 _self, U32 markerPointer) {
    id _t1 = (id)markerPointer;
    [(NSRulerView*)_self addMarker:_t1];
}

// method '-[NSRulerView baselineLocation]'
F32 env___IM_NSRulerView_baselineLocation(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerView*)_self baselineLocation];
    return (F32)_result;
}

// method '-[NSRulerView clientView]'
U32 env___IM_NSRulerView_clientView(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerView*)_self clientView];
    return (U32)_result;
}

// method '-[NSRulerView drawHashMarksAndLabelsInRect:]'
void env___IM_NSRulerView_drawHashMarksAndLabelsInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSRulerView*)_self drawHashMarksAndLabelsInRect:_t1];
}

// method '-[NSRulerView drawMarkersInRect:]'
void env___IM_NSRulerView_drawMarkersInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSRulerView*)_self drawMarkersInRect:_t1];
}

// method '-[NSRulerView initWithScrollView:orientation:]'
U32 env___IM_NSRulerView_initWithScrollView_Corientation_C(void *_instance, U32 _self, U32 scrollViewPointer, U32 orientation) {
    id _t1 = (id)scrollViewPointer;
    id _result = (id)[(NSRulerView*)_self initWithScrollView:_t1 orientation:orientation];
    return (U32)_result;
}

// method '-[NSRulerView invalidateHashMarks]'
void env___IM_NSRulerView_invalidateHashMarks(void *_instance, U32 _self) {
    [(NSRulerView*)_self invalidateHashMarks];
}

// method '-[NSRulerView isFlipped]'
U32 env___IM_NSRulerView_isFlipped(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSRulerView*)_self isFlipped];
    return (U32)_result;
}

// method '-[NSRulerView markers]'
U32 env___IM_NSRulerView_markers(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerView*)_self markers];
    return (U32)_result;
}

// method '-[NSRulerView measurementUnits]'
U32 env___IM_NSRulerView_measurementUnits(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerView*)_self measurementUnits];
    return (U32)_result;
}

// method '-[NSRulerView moveRulerlineFromLocation:toLocation:]'
void env___IM_NSRulerView_moveRulerlineFromLocation_CtoLocation_C(void *_instance, U32 _self, F32 oldLocation, F32 newLocation) {
    [(NSRulerView*)_self moveRulerlineFromLocation:oldLocation toLocation:newLocation];
}

// method '-[NSRulerView orientation]'
U32 env___IM_NSRulerView_orientation(void *_instance, U32 _self) {
    int _result = (int)[(NSRulerView*)_self orientation];
    return (U32)_result;
}

// method '-[NSRulerView originOffset]'
F32 env___IM_NSRulerView_originOffset(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerView*)_self originOffset];
    return (F32)_result;
}

// method '+[NSRulerView registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:]'
void env___CM_NSRulerView_registerUnitWithName_Cabbreviation_CunitToPointsConversionFactor_CstepUpCycle_CstepDownCycle_C(void *_instance, U32 _class, U32 unitNamePointer, U32 abbreviationPointer, F32 conversionFactor, U32 stepUpCyclePointer, U32 stepDownCyclePointer) {
    id _t1 = (id)unitNamePointer;
    id _t2 = (id)abbreviationPointer;
    id _t3 = (id)stepUpCyclePointer;
    id _t4 = (id)stepDownCyclePointer;
    [(Class)_class registerUnitWithName:_t1 abbreviation:_t2 unitToPointsConversionFactor:conversionFactor stepUpCycle:_t3 stepDownCycle:_t4];
}

// method '-[NSRulerView removeMarker:]'
void env___IM_NSRulerView_removeMarker_C(void *_instance, U32 _self, U32 markerPointer) {
    id _t1 = (id)markerPointer;
    [(NSRulerView*)_self removeMarker:_t1];
}

// method '-[NSRulerView requiredThickness]'
F32 env___IM_NSRulerView_requiredThickness(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerView*)_self requiredThickness];
    return (F32)_result;
}

// method '-[NSRulerView reservedThicknessForAccessoryView]'
F32 env___IM_NSRulerView_reservedThicknessForAccessoryView(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerView*)_self reservedThicknessForAccessoryView];
    return (F32)_result;
}

// method '-[NSRulerView reservedThicknessForMarkers]'
F32 env___IM_NSRulerView_reservedThicknessForMarkers(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerView*)_self reservedThicknessForMarkers];
    return (F32)_result;
}

// method '-[NSRulerView ruleThickness]'
F32 env___IM_NSRulerView_ruleThickness(void *_instance, U32 _self) {
    float _result = (float)[(NSRulerView*)_self ruleThickness];
    return (F32)_result;
}

// method '-[NSRulerView scrollView]'
U32 env___IM_NSRulerView_scrollView(void *_instance, U32 _self) {
    id _result = (id)[(NSRulerView*)_self scrollView];
    return (U32)_result;
}

// method '-[NSRulerView setAccessoryView:]'
void env___IM_NSRulerView_setAccessoryView_C(void *_instance, U32 _self, U32 accessoryPointer) {
    id _t1 = (id)accessoryPointer;
    [(NSRulerView*)_self setAccessoryView:_t1];
}

// method '-[NSRulerView setClientView:]'
void env___IM_NSRulerView_setClientView_C(void *_instance, U32 _self, U32 clientPointer) {
    id _t1 = (id)clientPointer;
    [(NSRulerView*)_self setClientView:_t1];
}

// method '-[NSRulerView setMarkers:]'
void env___IM_NSRulerView_setMarkers_C(void *_instance, U32 _self, U32 markersPointer) {
    id _t1 = (id)markersPointer;
    [(NSRulerView*)_self setMarkers:_t1];
}

// method '-[NSRulerView setMeasurementUnits:]'
void env___IM_NSRulerView_setMeasurementUnits_C(void *_instance, U32 _self, U32 unitNamePointer) {
    id _t1 = (id)unitNamePointer;
    [(NSRulerView*)_self setMeasurementUnits:_t1];
}

// method '-[NSRulerView setOrientation:]'
void env___IM_NSRulerView_setOrientation_C(void *_instance, U32 _self, U32 orientation) {
    [(NSRulerView*)_self setOrientation:orientation];
}

// method '-[NSRulerView setOriginOffset:]'
void env___IM_NSRulerView_setOriginOffset_C(void *_instance, U32 _self, F32 offset) {
    [(NSRulerView*)_self setOriginOffset:offset];
}

// method '-[NSRulerView setReservedThicknessForAccessoryView:]'
void env___IM_NSRulerView_setReservedThicknessForAccessoryView_C(void *_instance, U32 _self, F32 thickness) {
    [(NSRulerView*)_self setReservedThicknessForAccessoryView:thickness];
}

// method '-[NSRulerView setReservedThicknessForMarkers:]'
void env___IM_NSRulerView_setReservedThicknessForMarkers_C(void *_instance, U32 _self, F32 thickness) {
    [(NSRulerView*)_self setReservedThicknessForMarkers:thickness];
}

// method '-[NSRulerView setRuleThickness:]'
void env___IM_NSRulerView_setRuleThickness_C(void *_instance, U32 _self, F32 thickness) {
    [(NSRulerView*)_self setRuleThickness:thickness];
}

// method '-[NSRulerView setScrollView:]'
void env___IM_NSRulerView_setScrollView_C(void *_instance, U32 _self, U32 scrollViewPointer) {
    id _t1 = (id)scrollViewPointer;
    [(NSRulerView*)_self setScrollView:_t1];
}

// method '-[NSRulerView trackMarker:withMouseEvent:]'
U32 env___IM_NSRulerView_trackMarker_CwithMouseEvent_C(void *_instance, U32 _self, U32 markerPointer, U32 eventPointer) {
    id _t1 = (id)markerPointer;
    id _t2 = (id)eventPointer;
    BOOL _result = (BOOL)[(NSRulerView*)_self trackMarker:_t1 withMouseEvent:_t2];
    return (U32)_result;
}

// method '-[NSSavePanel URL]'
U32 env___IM_NSSavePanel_URL(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self URL];
    return (U32)_result;
}

// method '-[NSSavePanel accessoryView]'
U32 env___IM_NSSavePanel_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSSavePanel allowedFileTypes]'
U32 env___IM_NSSavePanel_allowedFileTypes(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self allowedFileTypes];
    return (U32)_result;
}

// method '-[NSSavePanel allowsOtherFileTypes]'
U32 env___IM_NSSavePanel_allowsOtherFileTypes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSavePanel*)_self allowsOtherFileTypes];
    return (U32)_result;
}

// method '-[NSSavePanel beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void env___IM_NSSavePanel_beginSheetForDirectory_Cfile_CmodalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(void *_instance, U32 _self, U32 pathPointer, U32 namePointer, U32 docWindowPointer, U32 delegatePointer, U32 didEndSelectorPointer, U32 contextInfoPointer) {
    id _t1 = (id)pathPointer;
    id _t2 = (id)namePointer;
    id _t3 = (id)docWindowPointer;
    id _t4 = (id)delegatePointer;
    SEL _t5 = (SEL)didEndSelectorPointer;
    void* _t6 = (void*)contextInfoPointer;
    [(NSSavePanel*)_self beginSheetForDirectory:_t1 file:_t2 modalForWindow:_t3 modalDelegate:_t4 didEndSelector:_t5 contextInfo:_t6];
}

// method '-[NSSavePanel canCreateDirectories]'
U32 env___IM_NSSavePanel_canCreateDirectories(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSavePanel*)_self canCreateDirectories];
    return (U32)_result;
}

// method '-[NSSavePanel canSelectHiddenExtension]'
U32 env___IM_NSSavePanel_canSelectHiddenExtension(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSavePanel*)_self canSelectHiddenExtension];
    return (U32)_result;
}

// method '-[NSSavePanel cancel:]'
void env___IM_NSSavePanel_cancel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSSavePanel*)_self cancel:_t1];
}

// method '-[NSSavePanel delegate]'
U32 env___IM_NSSavePanel_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self delegate];
    return (U32)_result;
}

// method '-[NSSavePanel directory]'
U32 env___IM_NSSavePanel_directory(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self directory];
    return (U32)_result;
}

// method '-[NSSavePanel filename]'
U32 env___IM_NSSavePanel_filename(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self filename];
    return (U32)_result;
}

// method '-[NSSavePanel isExpanded]'
U32 env___IM_NSSavePanel_isExpanded(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSavePanel*)_self isExpanded];
    return (U32)_result;
}

// method '-[NSSavePanel isExtensionHidden]'
U32 env___IM_NSSavePanel_isExtensionHidden(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSavePanel*)_self isExtensionHidden];
    return (U32)_result;
}

// method '-[NSSavePanel message]'
U32 env___IM_NSSavePanel_message(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self message];
    return (U32)_result;
}

// method '-[NSSavePanel nameFieldLabel]'
U32 env___IM_NSSavePanel_nameFieldLabel(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self nameFieldLabel];
    return (U32)_result;
}

// method '-[NSSavePanel ok:]'
void env___IM_NSSavePanel_ok_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSSavePanel*)_self ok:_t1];
}

// method '-[NSSavePanel prompt]'
U32 env___IM_NSSavePanel_prompt(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self prompt];
    return (U32)_result;
}

// method '-[NSSavePanel requiredFileType]'
U32 env___IM_NSSavePanel_requiredFileType(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self requiredFileType];
    return (U32)_result;
}

// method '-[NSSavePanel runModal]'
U32 env___IM_NSSavePanel_runModal(void *_instance, U32 _self) {
    int _result = (int)[(NSSavePanel*)_self runModal];
    return (U32)_result;
}

// method '-[NSSavePanel runModalForDirectory:file:]'
U32 env___IM_NSSavePanel_runModalForDirectory_Cfile_C(void *_instance, U32 _self, U32 pathPointer, U32 namePointer) {
    id _t1 = (id)pathPointer;
    id _t2 = (id)namePointer;
    int _result = (int)[(NSSavePanel*)_self runModalForDirectory:_t1 file:_t2];
    return (U32)_result;
}

// method '+[NSSavePanel savePanel]'
U32 env___CM_NSSavePanel_savePanel(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class savePanel];
    return (U32)_result;
}

// method '-[NSSavePanel selectText:]'
void env___IM_NSSavePanel_selectText_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSSavePanel*)_self selectText:_t1];
}

// method '-[NSSavePanel setAccessoryView:]'
void env___IM_NSSavePanel_setAccessoryView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSSavePanel*)_self setAccessoryView:_t1];
}

// method '-[NSSavePanel setAllowedFileTypes:]'
void env___IM_NSSavePanel_setAllowedFileTypes_C(void *_instance, U32 _self, U32 typesPointer) {
    id _t1 = (id)typesPointer;
    [(NSSavePanel*)_self setAllowedFileTypes:_t1];
}

// method '-[NSSavePanel setAllowsOtherFileTypes:]'
void env___IM_NSSavePanel_setAllowsOtherFileTypes_C(void *_instance, U32 _self, U32 flag) {
    [(NSSavePanel*)_self setAllowsOtherFileTypes:flag];
}

// method '-[NSSavePanel setCanCreateDirectories:]'
void env___IM_NSSavePanel_setCanCreateDirectories_C(void *_instance, U32 _self, U32 flag) {
    [(NSSavePanel*)_self setCanCreateDirectories:flag];
}

// method '-[NSSavePanel setCanSelectHiddenExtension:]'
void env___IM_NSSavePanel_setCanSelectHiddenExtension_C(void *_instance, U32 _self, U32 flag) {
    [(NSSavePanel*)_self setCanSelectHiddenExtension:flag];
}

// method '-[NSSavePanel setDelegate:]'
void env___IM_NSSavePanel_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSSavePanel*)_self setDelegate:_t1];
}

// method '-[NSSavePanel setDirectory:]'
void env___IM_NSSavePanel_setDirectory_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    [(NSSavePanel*)_self setDirectory:_t1];
}

// method '-[NSSavePanel setExtensionHidden:]'
void env___IM_NSSavePanel_setExtensionHidden_C(void *_instance, U32 _self, U32 flag) {
    [(NSSavePanel*)_self setExtensionHidden:flag];
}

// method '-[NSSavePanel setMessage:]'
void env___IM_NSSavePanel_setMessage_C(void *_instance, U32 _self, U32 messagePointer) {
    id _t1 = (id)messagePointer;
    [(NSSavePanel*)_self setMessage:_t1];
}

// method '-[NSSavePanel setNameFieldLabel:]'
void env___IM_NSSavePanel_setNameFieldLabel_C(void *_instance, U32 _self, U32 labelPointer) {
    id _t1 = (id)labelPointer;
    [(NSSavePanel*)_self setNameFieldLabel:_t1];
}

// method '-[NSSavePanel setPrompt:]'
void env___IM_NSSavePanel_setPrompt_C(void *_instance, U32 _self, U32 promptPointer) {
    id _t1 = (id)promptPointer;
    [(NSSavePanel*)_self setPrompt:_t1];
}

// method '-[NSSavePanel setRequiredFileType:]'
void env___IM_NSSavePanel_setRequiredFileType_C(void *_instance, U32 _self, U32 typePointer) {
    id _t1 = (id)typePointer;
    [(NSSavePanel*)_self setRequiredFileType:_t1];
}

// method '-[NSSavePanel setTitle:]'
void env___IM_NSSavePanel_setTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSSavePanel*)_self setTitle:_t1];
}

// method '-[NSSavePanel setTreatsFilePackagesAsDirectories:]'
void env___IM_NSSavePanel_setTreatsFilePackagesAsDirectories_C(void *_instance, U32 _self, U32 flag) {
    [(NSSavePanel*)_self setTreatsFilePackagesAsDirectories:flag];
}

// method '-[NSSavePanel title]'
U32 env___IM_NSSavePanel_title(void *_instance, U32 _self) {
    id _result = (id)[(NSSavePanel*)_self title];
    return (U32)_result;
}

// method '-[NSSavePanel treatsFilePackagesAsDirectories]'
U32 env___IM_NSSavePanel_treatsFilePackagesAsDirectories(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSavePanel*)_self treatsFilePackagesAsDirectories];
    return (U32)_result;
}

// method '-[NSSavePanel validateVisibleColumns]'
void env___IM_NSSavePanel_validateVisibleColumns(void *_instance, U32 _self) {
    [(NSSavePanel*)_self validateVisibleColumns];
}

// method '+[NSScreen deepestScreen]'
U32 env___CM_NSScreen_deepestScreen(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class deepestScreen];
    return (U32)_result;
}

// method '-[NSScreen depth]'
U32 env___IM_NSScreen_depth(void *_instance, U32 _self) {
    int _result = (int)[(NSScreen*)_self depth];
    return (U32)_result;
}

// method '-[NSScreen deviceDescription]'
U32 env___IM_NSScreen_deviceDescription(void *_instance, U32 _self) {
    id _result = (id)[(NSScreen*)_self deviceDescription];
    return (U32)_result;
}

// method '-[NSScreen frame]'
void env___IM_NSScreen_frame(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSScreen*)_self frame];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSScreen mainScreen]'
U32 env___CM_NSScreen_mainScreen(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class mainScreen];
    return (U32)_result;
}

// method '+[NSScreen screens]'
U32 env___CM_NSScreen_screens(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class screens];
    return (U32)_result;
}

// method '-[NSScreen supportedWindowDepths]'
U32 env___IM_NSScreen_supportedWindowDepths(void *_instance, U32 _self) {
    const int* _result = (const int*)[(NSScreen*)_self supportedWindowDepths];
    return (U32)_result;
}

// method '-[NSScreen userSpaceScaleFactor]'
F32 env___IM_NSScreen_userSpaceScaleFactor(void *_instance, U32 _self) {
    float _result = (float)[(NSScreen*)_self userSpaceScaleFactor];
    return (F32)_result;
}

// method '-[NSScreen visibleFrame]'
void env___IM_NSScreen_visibleFrame(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSScreen*)_self visibleFrame];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSScrollView autohidesScrollers]'
U32 env___IM_NSScrollView_autohidesScrollers(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self autohidesScrollers];
    return (U32)_result;
}

// method '-[NSScrollView backgroundColor]'
U32 env___IM_NSScrollView_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSScrollView borderType]'
U32 env___IM_NSScrollView_borderType(void *_instance, U32 _self) {
    int _result = (int)[(NSScrollView*)_self borderType];
    return (U32)_result;
}

// method '-[NSScrollView contentSize]'
void env___IM_NSScrollView_contentSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSScrollView*)_self contentSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSScrollView contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:]'
void env___CM_NSScrollView_contentSizeForFrameSize_ChasHorizontalScroller_ChasVerticalScroller_CborderType_C(void *_instance, U32 _resultIndirect, U32 _class, U32 fSizeIndirect, U32 hFlag, U32 vFlag, U32 aType) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + fSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    NSSize _result = (NSSize)[(Class)_class contentSizeForFrameSize:_t1 hasHorizontalScroller:hFlag hasVerticalScroller:vFlag borderType:aType];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSScrollView contentView]'
U32 env___IM_NSScrollView_contentView(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self contentView];
    return (U32)_result;
}

// method '-[NSScrollView documentCursor]'
U32 env___IM_NSScrollView_documentCursor(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self documentCursor];
    return (U32)_result;
}

// method '-[NSScrollView documentView]'
U32 env___IM_NSScrollView_documentView(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self documentView];
    return (U32)_result;
}

// method '-[NSScrollView documentVisibleRect]'
void env___IM_NSScrollView_documentVisibleRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSScrollView*)_self documentVisibleRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSScrollView drawsBackground]'
U32 env___IM_NSScrollView_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self drawsBackground];
    return (U32)_result;
}

// method '+[NSScrollView frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:]'
void env___CM_NSScrollView_frameSizeForContentSize_ChasHorizontalScroller_ChasVerticalScroller_CborderType_C(void *_instance, U32 _resultIndirect, U32 _class, U32 cSizeIndirect, U32 hFlag, U32 vFlag, U32 aType) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + cSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    NSSize _result = (NSSize)[(Class)_class frameSizeForContentSize:_t1 hasHorizontalScroller:hFlag hasVerticalScroller:vFlag borderType:aType];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSScrollView hasHorizontalRuler]'
U32 env___IM_NSScrollView_hasHorizontalRuler(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self hasHorizontalRuler];
    return (U32)_result;
}

// method '-[NSScrollView hasHorizontalScroller]'
U32 env___IM_NSScrollView_hasHorizontalScroller(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self hasHorizontalScroller];
    return (U32)_result;
}

// method '-[NSScrollView hasVerticalRuler]'
U32 env___IM_NSScrollView_hasVerticalRuler(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self hasVerticalRuler];
    return (U32)_result;
}

// method '-[NSScrollView hasVerticalScroller]'
U32 env___IM_NSScrollView_hasVerticalScroller(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self hasVerticalScroller];
    return (U32)_result;
}

// method '-[NSScrollView horizontalLineScroll]'
F32 env___IM_NSScrollView_horizontalLineScroll(void *_instance, U32 _self) {
    float _result = (float)[(NSScrollView*)_self horizontalLineScroll];
    return (F32)_result;
}

// method '-[NSScrollView horizontalPageScroll]'
F32 env___IM_NSScrollView_horizontalPageScroll(void *_instance, U32 _self) {
    float _result = (float)[(NSScrollView*)_self horizontalPageScroll];
    return (F32)_result;
}

// method '-[NSScrollView horizontalRulerView]'
U32 env___IM_NSScrollView_horizontalRulerView(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self horizontalRulerView];
    return (U32)_result;
}

// method '-[NSScrollView horizontalScroller]'
U32 env___IM_NSScrollView_horizontalScroller(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self horizontalScroller];
    return (U32)_result;
}

// method '-[NSScrollView lineScroll]'
F32 env___IM_NSScrollView_lineScroll(void *_instance, U32 _self) {
    float _result = (float)[(NSScrollView*)_self lineScroll];
    return (F32)_result;
}

// method '-[NSScrollView pageScroll]'
F32 env___IM_NSScrollView_pageScroll(void *_instance, U32 _self) {
    float _result = (float)[(NSScrollView*)_self pageScroll];
    return (F32)_result;
}

// method '-[NSScrollView reflectScrolledClipView:]'
void env___IM_NSScrollView_reflectScrolledClipView_C(void *_instance, U32 _self, U32 cViewPointer) {
    id _t1 = (id)cViewPointer;
    [(NSScrollView*)_self reflectScrolledClipView:_t1];
}

// method '+[NSScrollView rulerViewClass]'
U32 env___CM_NSScrollView_rulerViewClass(void *_instance, U32 _class) {
    Class _result = (Class)[(Class)_class rulerViewClass];
    return (U32)_result;
}

// method '-[NSScrollView rulersVisible]'
U32 env___IM_NSScrollView_rulersVisible(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self rulersVisible];
    return (U32)_result;
}

// method '-[NSScrollView scrollWheel:]'
void env___IM_NSScrollView_scrollWheel_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSScrollView*)_self scrollWheel:_t1];
}

// method '-[NSScrollView scrollsDynamically]'
U32 env___IM_NSScrollView_scrollsDynamically(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSScrollView*)_self scrollsDynamically];
    return (U32)_result;
}

// method '-[NSScrollView setAutohidesScrollers:]'
void env___IM_NSScrollView_setAutohidesScrollers_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setAutohidesScrollers:flag];
}

// method '-[NSScrollView setBackgroundColor:]'
void env___IM_NSScrollView_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSScrollView*)_self setBackgroundColor:_t1];
}

// method '-[NSScrollView setBorderType:]'
void env___IM_NSScrollView_setBorderType_C(void *_instance, U32 _self, U32 aType) {
    [(NSScrollView*)_self setBorderType:aType];
}

// method '-[NSScrollView setContentView:]'
void env___IM_NSScrollView_setContentView_C(void *_instance, U32 _self, U32 contentViewPointer) {
    id _t1 = (id)contentViewPointer;
    [(NSScrollView*)_self setContentView:_t1];
}

// method '-[NSScrollView setDocumentCursor:]'
void env___IM_NSScrollView_setDocumentCursor_C(void *_instance, U32 _self, U32 anObjPointer) {
    id _t1 = (id)anObjPointer;
    [(NSScrollView*)_self setDocumentCursor:_t1];
}

// method '-[NSScrollView setDocumentView:]'
void env___IM_NSScrollView_setDocumentView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSScrollView*)_self setDocumentView:_t1];
}

// method '-[NSScrollView setDrawsBackground:]'
void env___IM_NSScrollView_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setDrawsBackground:flag];
}

// method '-[NSScrollView setHasHorizontalRuler:]'
void env___IM_NSScrollView_setHasHorizontalRuler_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setHasHorizontalRuler:flag];
}

// method '-[NSScrollView setHasHorizontalScroller:]'
void env___IM_NSScrollView_setHasHorizontalScroller_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setHasHorizontalScroller:flag];
}

// method '-[NSScrollView setHasVerticalRuler:]'
void env___IM_NSScrollView_setHasVerticalRuler_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setHasVerticalRuler:flag];
}

// method '-[NSScrollView setHasVerticalScroller:]'
void env___IM_NSScrollView_setHasVerticalScroller_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setHasVerticalScroller:flag];
}

// method '-[NSScrollView setHorizontalLineScroll:]'
void env___IM_NSScrollView_setHorizontalLineScroll_C(void *_instance, U32 _self, F32 value) {
    [(NSScrollView*)_self setHorizontalLineScroll:value];
}

// method '-[NSScrollView setHorizontalPageScroll:]'
void env___IM_NSScrollView_setHorizontalPageScroll_C(void *_instance, U32 _self, F32 value) {
    [(NSScrollView*)_self setHorizontalPageScroll:value];
}

// method '-[NSScrollView setHorizontalRulerView:]'
void env___IM_NSScrollView_setHorizontalRulerView_C(void *_instance, U32 _self, U32 rulerPointer) {
    id _t1 = (id)rulerPointer;
    [(NSScrollView*)_self setHorizontalRulerView:_t1];
}

// method '-[NSScrollView setHorizontalScroller:]'
void env___IM_NSScrollView_setHorizontalScroller_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSScrollView*)_self setHorizontalScroller:_t1];
}

// method '-[NSScrollView setLineScroll:]'
void env___IM_NSScrollView_setLineScroll_C(void *_instance, U32 _self, F32 value) {
    [(NSScrollView*)_self setLineScroll:value];
}

// method '-[NSScrollView setPageScroll:]'
void env___IM_NSScrollView_setPageScroll_C(void *_instance, U32 _self, F32 value) {
    [(NSScrollView*)_self setPageScroll:value];
}

// method '+[NSScrollView setRulerViewClass:]'
void env___CM_NSScrollView_setRulerViewClass_C(void *_instance, U32 _class, U32 rulerViewClassPointer) {
    Class _t1 = (Class)rulerViewClassPointer;
    [(Class)_class setRulerViewClass:_t1];
}

// method '-[NSScrollView setRulersVisible:]'
void env___IM_NSScrollView_setRulersVisible_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setRulersVisible:flag];
}

// method '-[NSScrollView setScrollsDynamically:]'
void env___IM_NSScrollView_setScrollsDynamically_C(void *_instance, U32 _self, U32 flag) {
    [(NSScrollView*)_self setScrollsDynamically:flag];
}

// method '-[NSScrollView setVerticalLineScroll:]'
void env___IM_NSScrollView_setVerticalLineScroll_C(void *_instance, U32 _self, F32 value) {
    [(NSScrollView*)_self setVerticalLineScroll:value];
}

// method '-[NSScrollView setVerticalPageScroll:]'
void env___IM_NSScrollView_setVerticalPageScroll_C(void *_instance, U32 _self, F32 value) {
    [(NSScrollView*)_self setVerticalPageScroll:value];
}

// method '-[NSScrollView setVerticalRulerView:]'
void env___IM_NSScrollView_setVerticalRulerView_C(void *_instance, U32 _self, U32 rulerPointer) {
    id _t1 = (id)rulerPointer;
    [(NSScrollView*)_self setVerticalRulerView:_t1];
}

// method '-[NSScrollView setVerticalScroller:]'
void env___IM_NSScrollView_setVerticalScroller_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSScrollView*)_self setVerticalScroller:_t1];
}

// method '-[NSScrollView tile]'
void env___IM_NSScrollView_tile(void *_instance, U32 _self) {
    [(NSScrollView*)_self tile];
}

// method '-[NSScrollView verticalLineScroll]'
F32 env___IM_NSScrollView_verticalLineScroll(void *_instance, U32 _self) {
    float _result = (float)[(NSScrollView*)_self verticalLineScroll];
    return (F32)_result;
}

// method '-[NSScrollView verticalPageScroll]'
F32 env___IM_NSScrollView_verticalPageScroll(void *_instance, U32 _self) {
    float _result = (float)[(NSScrollView*)_self verticalPageScroll];
    return (F32)_result;
}

// method '-[NSScrollView verticalRulerView]'
U32 env___IM_NSScrollView_verticalRulerView(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self verticalRulerView];
    return (U32)_result;
}

// method '-[NSScrollView verticalScroller]'
U32 env___IM_NSScrollView_verticalScroller(void *_instance, U32 _self) {
    id _result = (id)[(NSScrollView*)_self verticalScroller];
    return (U32)_result;
}

// method '-[NSScroller arrowsPosition]'
U32 env___IM_NSScroller_arrowsPosition(void *_instance, U32 _self) {
    int _result = (int)[(NSScroller*)_self arrowsPosition];
    return (U32)_result;
}

// method '-[NSScroller checkSpaceForParts]'
void env___IM_NSScroller_checkSpaceForParts(void *_instance, U32 _self) {
    [(NSScroller*)_self checkSpaceForParts];
}

// method '-[NSScroller controlSize]'
U32 env___IM_NSScroller_controlSize(void *_instance, U32 _self) {
    int _result = (int)[(NSScroller*)_self controlSize];
    return (U32)_result;
}

// method '-[NSScroller controlTint]'
U32 env___IM_NSScroller_controlTint(void *_instance, U32 _self) {
    int _result = (int)[(NSScroller*)_self controlTint];
    return (U32)_result;
}

// method '-[NSScroller drawArrow:highlight:]'
void env___IM_NSScroller_drawArrow_Chighlight_C(void *_instance, U32 _self, U32 whichArrow, U32 flag) {
    [(NSScroller*)_self drawArrow:whichArrow highlight:flag];
}

// method '-[NSScroller drawKnob]'
void env___IM_NSScroller_drawKnob(void *_instance, U32 _self) {
    [(NSScroller*)_self drawKnob];
}

// method '-[NSScroller drawParts]'
void env___IM_NSScroller_drawParts(void *_instance, U32 _self) {
    [(NSScroller*)_self drawParts];
}

// method '-[NSScroller highlight:]'
void env___IM_NSScroller_highlight_C(void *_instance, U32 _self, U32 flag) {
    [(NSScroller*)_self highlight:flag];
}

// method '-[NSScroller hitPart]'
U32 env___IM_NSScroller_hitPart(void *_instance, U32 _self) {
    int _result = (int)[(NSScroller*)_self hitPart];
    return (U32)_result;
}

// method '-[NSScroller knobProportion]'
F32 env___IM_NSScroller_knobProportion(void *_instance, U32 _self) {
    float _result = (float)[(NSScroller*)_self knobProportion];
    return (F32)_result;
}

// method '-[NSScroller rectForPart:]'
void env___IM_NSScroller_rectForPart_C(void *_instance, U32 _resultIndirect, U32 _self, U32 partCode) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSScroller*)_self rectForPart:partCode];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSScroller scrollerWidth]'
F32 env___CM_NSScroller_scrollerWidth(void *_instance, U32 _class) {
    float _result = (float)[(Class)_class scrollerWidth];
    return (F32)_result;
}

// method '+[NSScroller scrollerWidthForControlSize:]'
F32 env___CM_NSScroller_scrollerWidthForControlSize_C(void *_instance, U32 _class, U32 controlSize) {
    float _result = (float)[(Class)_class scrollerWidthForControlSize:controlSize];
    return (F32)_result;
}

// method '-[NSScroller setArrowsPosition:]'
void env___IM_NSScroller_setArrowsPosition_C(void *_instance, U32 _self, U32 where) {
    [(NSScroller*)_self setArrowsPosition:where];
}

// method '-[NSScroller setControlSize:]'
void env___IM_NSScroller_setControlSize_C(void *_instance, U32 _self, U32 controlSize) {
    [(NSScroller*)_self setControlSize:controlSize];
}

// method '-[NSScroller setControlTint:]'
void env___IM_NSScroller_setControlTint_C(void *_instance, U32 _self, U32 controlTint) {
    [(NSScroller*)_self setControlTint:controlTint];
}

// method '-[NSScroller setFloatValue:knobProportion:]'
void env___IM_NSScroller_setFloatValue_CknobProportion_C(void *_instance, U32 _self, F32 aFloat, F32 percent) {
    [(NSScroller*)_self setFloatValue:aFloat knobProportion:percent];
}

// method '-[NSScroller testPart:]'
U32 env___IM_NSScroller_testPart_C(void *_instance, U32 _self, U32 thePointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + thePointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    int _result = (int)[(NSScroller*)_self testPart:_t1];
    return (U32)_result;
}

// method '-[NSScroller trackKnob:]'
void env___IM_NSScroller_trackKnob_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSScroller*)_self trackKnob:_t1];
}

// method '-[NSScroller trackScrollButtons:]'
void env___IM_NSScroller_trackScrollButtons_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSScroller*)_self trackScrollButtons:_t1];
}

// method '-[NSScroller usableParts]'
U32 env___IM_NSScroller_usableParts(void *_instance, U32 _self) {
    int _result = (int)[(NSScroller*)_self usableParts];
    return (U32)_result;
}

// method '-[NSSearchField recentSearches]'
U32 env___IM_NSSearchField_recentSearches(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchField*)_self recentSearches];
    return (U32)_result;
}

// method '-[NSSearchField recentsAutosaveName]'
U32 env___IM_NSSearchField_recentsAutosaveName(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchField*)_self recentsAutosaveName];
    return (U32)_result;
}

// method '-[NSSearchField setRecentSearches:]'
void env___IM_NSSearchField_setRecentSearches_C(void *_instance, U32 _self, U32 searchesPointer) {
    id _t1 = (id)searchesPointer;
    [(NSSearchField*)_self setRecentSearches:_t1];
}

// method '-[NSSearchField setRecentsAutosaveName:]'
void env___IM_NSSearchField_setRecentsAutosaveName_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSSearchField*)_self setRecentsAutosaveName:_t1];
}

// method '-[NSSearchFieldCell cancelButtonCell]'
U32 env___IM_NSSearchFieldCell_cancelButtonCell(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchFieldCell*)_self cancelButtonCell];
    return (U32)_result;
}

// method '-[NSSearchFieldCell cancelButtonRectForBounds:]'
void env___IM_NSSearchFieldCell_cancelButtonRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSSearchFieldCell*)_self cancelButtonRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSearchFieldCell maximumRecents]'
U32 env___IM_NSSearchFieldCell_maximumRecents(void *_instance, U32 _self) {
    int _result = (int)[(NSSearchFieldCell*)_self maximumRecents];
    return (U32)_result;
}

// method '-[NSSearchFieldCell recentSearches]'
U32 env___IM_NSSearchFieldCell_recentSearches(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchFieldCell*)_self recentSearches];
    return (U32)_result;
}

// method '-[NSSearchFieldCell recentsAutosaveName]'
U32 env___IM_NSSearchFieldCell_recentsAutosaveName(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchFieldCell*)_self recentsAutosaveName];
    return (U32)_result;
}

// method '-[NSSearchFieldCell resetCancelButtonCell]'
void env___IM_NSSearchFieldCell_resetCancelButtonCell(void *_instance, U32 _self) {
    [(NSSearchFieldCell*)_self resetCancelButtonCell];
}

// method '-[NSSearchFieldCell resetSearchButtonCell]'
void env___IM_NSSearchFieldCell_resetSearchButtonCell(void *_instance, U32 _self) {
    [(NSSearchFieldCell*)_self resetSearchButtonCell];
}

// method '-[NSSearchFieldCell searchButtonCell]'
U32 env___IM_NSSearchFieldCell_searchButtonCell(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchFieldCell*)_self searchButtonCell];
    return (U32)_result;
}

// method '-[NSSearchFieldCell searchButtonRectForBounds:]'
void env___IM_NSSearchFieldCell_searchButtonRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSSearchFieldCell*)_self searchButtonRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSearchFieldCell searchMenuTemplate]'
U32 env___IM_NSSearchFieldCell_searchMenuTemplate(void *_instance, U32 _self) {
    id _result = (id)[(NSSearchFieldCell*)_self searchMenuTemplate];
    return (U32)_result;
}

// method '-[NSSearchFieldCell searchTextRectForBounds:]'
void env___IM_NSSearchFieldCell_searchTextRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSSearchFieldCell*)_self searchTextRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSearchFieldCell sendsSearchStringImmediately]'
U32 env___IM_NSSearchFieldCell_sendsSearchStringImmediately(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSearchFieldCell*)_self sendsSearchStringImmediately];
    return (U32)_result;
}

// method '-[NSSearchFieldCell sendsWholeSearchString]'
U32 env___IM_NSSearchFieldCell_sendsWholeSearchString(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSearchFieldCell*)_self sendsWholeSearchString];
    return (U32)_result;
}

// method '-[NSSearchFieldCell setCancelButtonCell:]'
void env___IM_NSSearchFieldCell_setCancelButtonCell_C(void *_instance, U32 _self, U32 cellPointer) {
    id _t1 = (id)cellPointer;
    [(NSSearchFieldCell*)_self setCancelButtonCell:_t1];
}

// method '-[NSSearchFieldCell setMaximumRecents:]'
void env___IM_NSSearchFieldCell_setMaximumRecents_C(void *_instance, U32 _self, U32 maxRecents) {
    [(NSSearchFieldCell*)_self setMaximumRecents:maxRecents];
}

// method '-[NSSearchFieldCell setRecentSearches:]'
void env___IM_NSSearchFieldCell_setRecentSearches_C(void *_instance, U32 _self, U32 searchesPointer) {
    id _t1 = (id)searchesPointer;
    [(NSSearchFieldCell*)_self setRecentSearches:_t1];
}

// method '-[NSSearchFieldCell setRecentsAutosaveName:]'
void env___IM_NSSearchFieldCell_setRecentsAutosaveName_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSSearchFieldCell*)_self setRecentsAutosaveName:_t1];
}

// method '-[NSSearchFieldCell setSearchButtonCell:]'
void env___IM_NSSearchFieldCell_setSearchButtonCell_C(void *_instance, U32 _self, U32 cellPointer) {
    id _t1 = (id)cellPointer;
    [(NSSearchFieldCell*)_self setSearchButtonCell:_t1];
}

// method '-[NSSearchFieldCell setSearchMenuTemplate:]'
void env___IM_NSSearchFieldCell_setSearchMenuTemplate_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSSearchFieldCell*)_self setSearchMenuTemplate:_t1];
}

// method '-[NSSearchFieldCell setSendsSearchStringImmediately:]'
void env___IM_NSSearchFieldCell_setSendsSearchStringImmediately_C(void *_instance, U32 _self, U32 flag) {
    [(NSSearchFieldCell*)_self setSendsSearchStringImmediately:flag];
}

// method '-[NSSearchFieldCell setSendsWholeSearchString:]'
void env___IM_NSSearchFieldCell_setSendsWholeSearchString_C(void *_instance, U32 _self, U32 flag) {
    [(NSSearchFieldCell*)_self setSendsWholeSearchString:flag];
}

// method '-[NSSecureTextFieldCell echosBullets]'
U32 env___IM_NSSecureTextFieldCell_echosBullets(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSecureTextFieldCell*)_self echosBullets];
    return (U32)_result;
}

// method '-[NSSecureTextFieldCell setEchosBullets:]'
void env___IM_NSSecureTextFieldCell_setEchosBullets_C(void *_instance, U32 _self, U32 flag) {
    [(NSSecureTextFieldCell*)_self setEchosBullets:flag];
}

// method '-[NSSegmentedCell drawSegment:inFrame:withView:]'
void env___IM_NSSegmentedCell_drawSegment_CinFrame_CwithView_C(void *_instance, U32 _self, U32 segment, U32 frameIndirect, U32 controlViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSSegmentedCell*)_self drawSegment:segment inFrame:_t1 withView:_t2];
}

// method '-[NSSegmentedCell imageForSegment:]'
U32 env___IM_NSSegmentedCell_imageForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedCell*)_self imageForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell isEnabledForSegment:]'
U32 env___IM_NSSegmentedCell_isEnabledForSegment_C(void *_instance, U32 _self, U32 segment) {
    BOOL _result = (BOOL)[(NSSegmentedCell*)_self isEnabledForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell isSelectedForSegment:]'
U32 env___IM_NSSegmentedCell_isSelectedForSegment_C(void *_instance, U32 _self, U32 segment) {
    BOOL _result = (BOOL)[(NSSegmentedCell*)_self isSelectedForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell labelForSegment:]'
U32 env___IM_NSSegmentedCell_labelForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedCell*)_self labelForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell makeNextSegmentKey]'
void env___IM_NSSegmentedCell_makeNextSegmentKey(void *_instance, U32 _self) {
    [(NSSegmentedCell*)_self makeNextSegmentKey];
}

// method '-[NSSegmentedCell makePreviousSegmentKey]'
void env___IM_NSSegmentedCell_makePreviousSegmentKey(void *_instance, U32 _self) {
    [(NSSegmentedCell*)_self makePreviousSegmentKey];
}

// method '-[NSSegmentedCell menuForSegment:]'
U32 env___IM_NSSegmentedCell_menuForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedCell*)_self menuForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell segmentCount]'
U32 env___IM_NSSegmentedCell_segmentCount(void *_instance, U32 _self) {
    int _result = (int)[(NSSegmentedCell*)_self segmentCount];
    return (U32)_result;
}

// method '-[NSSegmentedCell selectSegmentWithTag:]'
U32 env___IM_NSSegmentedCell_selectSegmentWithTag_C(void *_instance, U32 _self, U32 tag) {
    BOOL _result = (BOOL)[(NSSegmentedCell*)_self selectSegmentWithTag:tag];
    return (U32)_result;
}

// method '-[NSSegmentedCell selectedSegment]'
U32 env___IM_NSSegmentedCell_selectedSegment(void *_instance, U32 _self) {
    int _result = (int)[(NSSegmentedCell*)_self selectedSegment];
    return (U32)_result;
}

// method '-[NSSegmentedCell setEnabled:forSegment:]'
void env___IM_NSSegmentedCell_setEnabled_CforSegment_C(void *_instance, U32 _self, U32 enabled, U32 segment) {
    [(NSSegmentedCell*)_self setEnabled:enabled forSegment:segment];
}

// method '-[NSSegmentedCell setImage:forSegment:]'
void env___IM_NSSegmentedCell_setImage_CforSegment_C(void *_instance, U32 _self, U32 imagePointer, U32 segment) {
    id _t1 = (id)imagePointer;
    [(NSSegmentedCell*)_self setImage:_t1 forSegment:segment];
}

// method '-[NSSegmentedCell setLabel:forSegment:]'
void env___IM_NSSegmentedCell_setLabel_CforSegment_C(void *_instance, U32 _self, U32 labelPointer, U32 segment) {
    id _t1 = (id)labelPointer;
    [(NSSegmentedCell*)_self setLabel:_t1 forSegment:segment];
}

// method '-[NSSegmentedCell setMenu:forSegment:]'
void env___IM_NSSegmentedCell_setMenu_CforSegment_C(void *_instance, U32 _self, U32 menuPointer, U32 segment) {
    id _t1 = (id)menuPointer;
    [(NSSegmentedCell*)_self setMenu:_t1 forSegment:segment];
}

// method '-[NSSegmentedCell setSegmentCount:]'
void env___IM_NSSegmentedCell_setSegmentCount_C(void *_instance, U32 _self, U32 count) {
    [(NSSegmentedCell*)_self setSegmentCount:count];
}

// method '-[NSSegmentedCell setSelected:forSegment:]'
void env___IM_NSSegmentedCell_setSelected_CforSegment_C(void *_instance, U32 _self, U32 selected, U32 segment) {
    [(NSSegmentedCell*)_self setSelected:selected forSegment:segment];
}

// method '-[NSSegmentedCell setSelectedSegment:]'
void env___IM_NSSegmentedCell_setSelectedSegment_C(void *_instance, U32 _self, U32 selectedSegment) {
    [(NSSegmentedCell*)_self setSelectedSegment:selectedSegment];
}

// method '-[NSSegmentedCell setTag:forSegment:]'
void env___IM_NSSegmentedCell_setTag_CforSegment_C(void *_instance, U32 _self, U32 tag, U32 segment) {
    [(NSSegmentedCell*)_self setTag:tag forSegment:segment];
}

// method '-[NSSegmentedCell setToolTip:forSegment:]'
void env___IM_NSSegmentedCell_setToolTip_CforSegment_C(void *_instance, U32 _self, U32 toolTipPointer, U32 segment) {
    id _t1 = (id)toolTipPointer;
    [(NSSegmentedCell*)_self setToolTip:_t1 forSegment:segment];
}

// method '-[NSSegmentedCell setTrackingMode:]'
void env___IM_NSSegmentedCell_setTrackingMode_C(void *_instance, U32 _self, U32 trackingMode) {
    [(NSSegmentedCell*)_self setTrackingMode:trackingMode];
}

// method '-[NSSegmentedCell setWidth:forSegment:]'
void env___IM_NSSegmentedCell_setWidth_CforSegment_C(void *_instance, U32 _self, F32 width, U32 segment) {
    [(NSSegmentedCell*)_self setWidth:width forSegment:segment];
}

// method '-[NSSegmentedCell tagForSegment:]'
U32 env___IM_NSSegmentedCell_tagForSegment_C(void *_instance, U32 _self, U32 segment) {
    int _result = (int)[(NSSegmentedCell*)_self tagForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell toolTipForSegment:]'
U32 env___IM_NSSegmentedCell_toolTipForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedCell*)_self toolTipForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedCell trackingMode]'
U32 env___IM_NSSegmentedCell_trackingMode(void *_instance, U32 _self) {
    int _result = (int)[(NSSegmentedCell*)_self trackingMode];
    return (U32)_result;
}

// method '-[NSSegmentedCell widthForSegment:]'
F32 env___IM_NSSegmentedCell_widthForSegment_C(void *_instance, U32 _self, U32 segment) {
    float _result = (float)[(NSSegmentedCell*)_self widthForSegment:segment];
    return (F32)_result;
}

// method '-[NSSegmentedControl imageForSegment:]'
U32 env___IM_NSSegmentedControl_imageForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedControl*)_self imageForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedControl isEnabledForSegment:]'
U32 env___IM_NSSegmentedControl_isEnabledForSegment_C(void *_instance, U32 _self, U32 segment) {
    BOOL _result = (BOOL)[(NSSegmentedControl*)_self isEnabledForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedControl isSelectedForSegment:]'
U32 env___IM_NSSegmentedControl_isSelectedForSegment_C(void *_instance, U32 _self, U32 segment) {
    BOOL _result = (BOOL)[(NSSegmentedControl*)_self isSelectedForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedControl labelForSegment:]'
U32 env___IM_NSSegmentedControl_labelForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedControl*)_self labelForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedControl menuForSegment:]'
U32 env___IM_NSSegmentedControl_menuForSegment_C(void *_instance, U32 _self, U32 segment) {
    id _result = (id)[(NSSegmentedControl*)_self menuForSegment:segment];
    return (U32)_result;
}

// method '-[NSSegmentedControl segmentCount]'
U32 env___IM_NSSegmentedControl_segmentCount(void *_instance, U32 _self) {
    int _result = (int)[(NSSegmentedControl*)_self segmentCount];
    return (U32)_result;
}

// method '-[NSSegmentedControl selectSegmentWithTag:]'
U32 env___IM_NSSegmentedControl_selectSegmentWithTag_C(void *_instance, U32 _self, U32 tag) {
    BOOL _result = (BOOL)[(NSSegmentedControl*)_self selectSegmentWithTag:tag];
    return (U32)_result;
}

// method '-[NSSegmentedControl selectedSegment]'
U32 env___IM_NSSegmentedControl_selectedSegment(void *_instance, U32 _self) {
    int _result = (int)[(NSSegmentedControl*)_self selectedSegment];
    return (U32)_result;
}

// method '-[NSSegmentedControl setEnabled:forSegment:]'
void env___IM_NSSegmentedControl_setEnabled_CforSegment_C(void *_instance, U32 _self, U32 enabled, U32 segment) {
    [(NSSegmentedControl*)_self setEnabled:enabled forSegment:segment];
}

// method '-[NSSegmentedControl setImage:forSegment:]'
void env___IM_NSSegmentedControl_setImage_CforSegment_C(void *_instance, U32 _self, U32 imagePointer, U32 segment) {
    id _t1 = (id)imagePointer;
    [(NSSegmentedControl*)_self setImage:_t1 forSegment:segment];
}

// method '-[NSSegmentedControl setLabel:forSegment:]'
void env___IM_NSSegmentedControl_setLabel_CforSegment_C(void *_instance, U32 _self, U32 labelPointer, U32 segment) {
    id _t1 = (id)labelPointer;
    [(NSSegmentedControl*)_self setLabel:_t1 forSegment:segment];
}

// method '-[NSSegmentedControl setMenu:forSegment:]'
void env___IM_NSSegmentedControl_setMenu_CforSegment_C(void *_instance, U32 _self, U32 menuPointer, U32 segment) {
    id _t1 = (id)menuPointer;
    [(NSSegmentedControl*)_self setMenu:_t1 forSegment:segment];
}

// method '-[NSSegmentedControl setSegmentCount:]'
void env___IM_NSSegmentedControl_setSegmentCount_C(void *_instance, U32 _self, U32 count) {
    [(NSSegmentedControl*)_self setSegmentCount:count];
}

// method '-[NSSegmentedControl setSelected:forSegment:]'
void env___IM_NSSegmentedControl_setSelected_CforSegment_C(void *_instance, U32 _self, U32 selected, U32 segment) {
    [(NSSegmentedControl*)_self setSelected:selected forSegment:segment];
}

// method '-[NSSegmentedControl setSelectedSegment:]'
void env___IM_NSSegmentedControl_setSelectedSegment_C(void *_instance, U32 _self, U32 selectedSegment) {
    [(NSSegmentedControl*)_self setSelectedSegment:selectedSegment];
}

// method '-[NSSegmentedControl setWidth:forSegment:]'
void env___IM_NSSegmentedControl_setWidth_CforSegment_C(void *_instance, U32 _self, F32 width, U32 segment) {
    [(NSSegmentedControl*)_self setWidth:width forSegment:segment];
}

// method '-[NSSegmentedControl widthForSegment:]'
F32 env___IM_NSSegmentedControl_widthForSegment_C(void *_instance, U32 _self, U32 segment) {
    float _result = (float)[(NSSegmentedControl*)_self widthForSegment:segment];
    return (F32)_result;
}

// method '-[NSShadow init]'
U32 env___IM_NSShadow_init(void *_instance, U32 _self) {
    id _result = (id)[(NSShadow*)_self init];
    return (U32)_result;
}

// method '-[NSShadow set]'
void env___IM_NSShadow_set(void *_instance, U32 _self) {
    [(NSShadow*)_self set];
}

// method '-[NSShadow setShadowBlurRadius:]'
void env___IM_NSShadow_setShadowBlurRadius_C(void *_instance, U32 _self, F32 val) {
    [(NSShadow*)_self setShadowBlurRadius:val];
}

// method '-[NSShadow setShadowColor:]'
void env___IM_NSShadow_setShadowColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSShadow*)_self setShadowColor:_t1];
}

// method '-[NSShadow setShadowOffset:]'
void env___IM_NSShadow_setShadowOffset_C(void *_instance, U32 _self, U32 offsetIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + offsetIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSShadow*)_self setShadowOffset:_t1];
}

// method '-[NSShadow shadowBlurRadius]'
F32 env___IM_NSShadow_shadowBlurRadius(void *_instance, U32 _self) {
    float _result = (float)[(NSShadow*)_self shadowBlurRadius];
    return (F32)_result;
}

// method '-[NSShadow shadowColor]'
U32 env___IM_NSShadow_shadowColor(void *_instance, U32 _self) {
    id _result = (id)[(NSShadow*)_self shadowColor];
    return (U32)_result;
}

// method '-[NSShadow shadowOffset]'
void env___IM_NSShadow_shadowOffset(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSShadow*)_self shadowOffset];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSlider acceptsFirstMouse:]'
U32 env___IM_NSSlider_acceptsFirstMouse_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSSlider*)_self acceptsFirstMouse:_t1];
    return (U32)_result;
}

// method '-[NSSlider allowsTickMarkValuesOnly]'
U32 env___IM_NSSlider_allowsTickMarkValuesOnly(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSlider*)_self allowsTickMarkValuesOnly];
    return (U32)_result;
}

// method '-[NSSlider altIncrementValue]'
F64 env___IM_NSSlider_altIncrementValue(void *_instance, U32 _self) {
    double _result = (double)[(NSSlider*)_self altIncrementValue];
    return (F64)_result;
}

// method '-[NSSlider closestTickMarkValueToValue:]'
F64 env___IM_NSSlider_closestTickMarkValueToValue_C(void *_instance, U32 _self, F64 value) {
    double _result = (double)[(NSSlider*)_self closestTickMarkValueToValue:value];
    return (F64)_result;
}

// method '-[NSSlider image]'
U32 env___IM_NSSlider_image(void *_instance, U32 _self) {
    id _result = (id)[(NSSlider*)_self image];
    return (U32)_result;
}

// method '-[NSSlider indexOfTickMarkAtPoint:]'
U32 env___IM_NSSlider_indexOfTickMarkAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    int _result = (int)[(NSSlider*)_self indexOfTickMarkAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSSlider isVertical]'
U32 env___IM_NSSlider_isVertical(void *_instance, U32 _self) {
    int _result = (int)[(NSSlider*)_self isVertical];
    return (U32)_result;
}

// method '-[NSSlider knobThickness]'
F32 env___IM_NSSlider_knobThickness(void *_instance, U32 _self) {
    float _result = (float)[(NSSlider*)_self knobThickness];
    return (F32)_result;
}

// method '-[NSSlider maxValue]'
F64 env___IM_NSSlider_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSSlider*)_self maxValue];
    return (F64)_result;
}

// method '-[NSSlider minValue]'
F64 env___IM_NSSlider_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSSlider*)_self minValue];
    return (F64)_result;
}

// method '-[NSSlider numberOfTickMarks]'
U32 env___IM_NSSlider_numberOfTickMarks(void *_instance, U32 _self) {
    int _result = (int)[(NSSlider*)_self numberOfTickMarks];
    return (U32)_result;
}

// method '-[NSSlider rectOfTickMarkAtIndex:]'
void env___IM_NSSlider_rectOfTickMarkAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 index) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSSlider*)_self rectOfTickMarkAtIndex:index];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSlider setAllowsTickMarkValuesOnly:]'
void env___IM_NSSlider_setAllowsTickMarkValuesOnly_C(void *_instance, U32 _self, U32 yorn) {
    [(NSSlider*)_self setAllowsTickMarkValuesOnly:yorn];
}

// method '-[NSSlider setAltIncrementValue:]'
void env___IM_NSSlider_setAltIncrementValue_C(void *_instance, U32 _self, F64 incValue) {
    [(NSSlider*)_self setAltIncrementValue:incValue];
}

// method '-[NSSlider setImage:]'
void env___IM_NSSlider_setImage_C(void *_instance, U32 _self, U32 backgroundImagePointer) {
    id _t1 = (id)backgroundImagePointer;
    [(NSSlider*)_self setImage:_t1];
}

// method '-[NSSlider setKnobThickness:]'
void env___IM_NSSlider_setKnobThickness_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSSlider*)_self setKnobThickness:aFloat];
}

// method '-[NSSlider setMaxValue:]'
void env___IM_NSSlider_setMaxValue_C(void *_instance, U32 _self, F64 aDouble) {
    [(NSSlider*)_self setMaxValue:aDouble];
}

// method '-[NSSlider setMinValue:]'
void env___IM_NSSlider_setMinValue_C(void *_instance, U32 _self, F64 aDouble) {
    [(NSSlider*)_self setMinValue:aDouble];
}

// method '-[NSSlider setNumberOfTickMarks:]'
void env___IM_NSSlider_setNumberOfTickMarks_C(void *_instance, U32 _self, U32 count) {
    [(NSSlider*)_self setNumberOfTickMarks:count];
}

// method '-[NSSlider setTickMarkPosition:]'
void env___IM_NSSlider_setTickMarkPosition_C(void *_instance, U32 _self, U32 position) {
    [(NSSlider*)_self setTickMarkPosition:position];
}

// method '-[NSSlider setTitle:]'
void env___IM_NSSlider_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSSlider*)_self setTitle:_t1];
}

// method '-[NSSlider setTitleCell:]'
void env___IM_NSSlider_setTitleCell_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSSlider*)_self setTitleCell:_t1];
}

// method '-[NSSlider setTitleColor:]'
void env___IM_NSSlider_setTitleColor_C(void *_instance, U32 _self, U32 newColorPointer) {
    id _t1 = (id)newColorPointer;
    [(NSSlider*)_self setTitleColor:_t1];
}

// method '-[NSSlider setTitleFont:]'
void env___IM_NSSlider_setTitleFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSSlider*)_self setTitleFont:_t1];
}

// method '-[NSSlider tickMarkPosition]'
U32 env___IM_NSSlider_tickMarkPosition(void *_instance, U32 _self) {
    int _result = (int)[(NSSlider*)_self tickMarkPosition];
    return (U32)_result;
}

// method '-[NSSlider tickMarkValueAtIndex:]'
F64 env___IM_NSSlider_tickMarkValueAtIndex_C(void *_instance, U32 _self, U32 index) {
    double _result = (double)[(NSSlider*)_self tickMarkValueAtIndex:index];
    return (F64)_result;
}

// method '-[NSSlider title]'
U32 env___IM_NSSlider_title(void *_instance, U32 _self) {
    id _result = (id)[(NSSlider*)_self title];
    return (U32)_result;
}

// method '-[NSSlider titleCell]'
U32 env___IM_NSSlider_titleCell(void *_instance, U32 _self) {
    id _result = (id)[(NSSlider*)_self titleCell];
    return (U32)_result;
}

// method '-[NSSlider titleColor]'
U32 env___IM_NSSlider_titleColor(void *_instance, U32 _self) {
    id _result = (id)[(NSSlider*)_self titleColor];
    return (U32)_result;
}

// method '-[NSSlider titleFont]'
U32 env___IM_NSSlider_titleFont(void *_instance, U32 _self) {
    id _result = (id)[(NSSlider*)_self titleFont];
    return (U32)_result;
}

// method '-[NSSliderCell allowsTickMarkValuesOnly]'
U32 env___IM_NSSliderCell_allowsTickMarkValuesOnly(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSliderCell*)_self allowsTickMarkValuesOnly];
    return (U32)_result;
}

// method '-[NSSliderCell altIncrementValue]'
F64 env___IM_NSSliderCell_altIncrementValue(void *_instance, U32 _self) {
    double _result = (double)[(NSSliderCell*)_self altIncrementValue];
    return (F64)_result;
}

// method '-[NSSliderCell closestTickMarkValueToValue:]'
F64 env___IM_NSSliderCell_closestTickMarkValueToValue_C(void *_instance, U32 _self, F64 value) {
    double _result = (double)[(NSSliderCell*)_self closestTickMarkValueToValue:value];
    return (F64)_result;
}

// method '-[NSSliderCell drawBarInside:flipped:]'
void env___IM_NSSliderCell_drawBarInside_Cflipped_C(void *_instance, U32 _self, U32 aRectIndirect, U32 flipped) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSSliderCell*)_self drawBarInside:_t1 flipped:flipped];
}

// method '-[NSSliderCell drawKnob]'
void env___IM_NSSliderCell_drawKnob(void *_instance, U32 _self) {
    [(NSSliderCell*)_self drawKnob];
}

// method '-[NSSliderCell drawKnob:]'
void env___IM_NSSliderCell_drawKnob_C(void *_instance, U32 _self, U32 knobRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + knobRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSSliderCell*)_self drawKnob:_t1];
}

// method '-[NSSliderCell indexOfTickMarkAtPoint:]'
U32 env___IM_NSSliderCell_indexOfTickMarkAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    int _result = (int)[(NSSliderCell*)_self indexOfTickMarkAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSSliderCell isVertical]'
U32 env___IM_NSSliderCell_isVertical(void *_instance, U32 _self) {
    int _result = (int)[(NSSliderCell*)_self isVertical];
    return (U32)_result;
}

// method '-[NSSliderCell knobRectFlipped:]'
void env___IM_NSSliderCell_knobRectFlipped_C(void *_instance, U32 _resultIndirect, U32 _self, U32 flipped) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSSliderCell*)_self knobRectFlipped:flipped];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSliderCell knobThickness]'
F32 env___IM_NSSliderCell_knobThickness(void *_instance, U32 _self) {
    float _result = (float)[(NSSliderCell*)_self knobThickness];
    return (F32)_result;
}

// method '-[NSSliderCell maxValue]'
F64 env___IM_NSSliderCell_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSSliderCell*)_self maxValue];
    return (F64)_result;
}

// method '-[NSSliderCell minValue]'
F64 env___IM_NSSliderCell_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSSliderCell*)_self minValue];
    return (F64)_result;
}

// method '-[NSSliderCell numberOfTickMarks]'
U32 env___IM_NSSliderCell_numberOfTickMarks(void *_instance, U32 _self) {
    int _result = (int)[(NSSliderCell*)_self numberOfTickMarks];
    return (U32)_result;
}

// method '+[NSSliderCell prefersTrackingUntilMouseUp]'
U32 env___CM_NSSliderCell_prefersTrackingUntilMouseUp(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class prefersTrackingUntilMouseUp];
    return (U32)_result;
}

// method '-[NSSliderCell rectOfTickMarkAtIndex:]'
void env___IM_NSSliderCell_rectOfTickMarkAtIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 index) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSSliderCell*)_self rectOfTickMarkAtIndex:index];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSliderCell setAllowsTickMarkValuesOnly:]'
void env___IM_NSSliderCell_setAllowsTickMarkValuesOnly_C(void *_instance, U32 _self, U32 yorn) {
    [(NSSliderCell*)_self setAllowsTickMarkValuesOnly:yorn];
}

// method '-[NSSliderCell setAltIncrementValue:]'
void env___IM_NSSliderCell_setAltIncrementValue_C(void *_instance, U32 _self, F64 incValue) {
    [(NSSliderCell*)_self setAltIncrementValue:incValue];
}

// method '-[NSSliderCell setKnobThickness:]'
void env___IM_NSSliderCell_setKnobThickness_C(void *_instance, U32 _self, F32 aFloat) {
    [(NSSliderCell*)_self setKnobThickness:aFloat];
}

// method '-[NSSliderCell setMaxValue:]'
void env___IM_NSSliderCell_setMaxValue_C(void *_instance, U32 _self, F64 aDouble) {
    [(NSSliderCell*)_self setMaxValue:aDouble];
}

// method '-[NSSliderCell setMinValue:]'
void env___IM_NSSliderCell_setMinValue_C(void *_instance, U32 _self, F64 aDouble) {
    [(NSSliderCell*)_self setMinValue:aDouble];
}

// method '-[NSSliderCell setNumberOfTickMarks:]'
void env___IM_NSSliderCell_setNumberOfTickMarks_C(void *_instance, U32 _self, U32 count) {
    [(NSSliderCell*)_self setNumberOfTickMarks:count];
}

// method '-[NSSliderCell setSliderType:]'
void env___IM_NSSliderCell_setSliderType_C(void *_instance, U32 _self, U32 sliderType) {
    [(NSSliderCell*)_self setSliderType:sliderType];
}

// method '-[NSSliderCell setTickMarkPosition:]'
void env___IM_NSSliderCell_setTickMarkPosition_C(void *_instance, U32 _self, U32 position) {
    [(NSSliderCell*)_self setTickMarkPosition:position];
}

// method '-[NSSliderCell setTitle:]'
void env___IM_NSSliderCell_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSSliderCell*)_self setTitle:_t1];
}

// method '-[NSSliderCell setTitleCell:]'
void env___IM_NSSliderCell_setTitleCell_C(void *_instance, U32 _self, U32 aCellPointer) {
    id _t1 = (id)aCellPointer;
    [(NSSliderCell*)_self setTitleCell:_t1];
}

// method '-[NSSliderCell setTitleColor:]'
void env___IM_NSSliderCell_setTitleColor_C(void *_instance, U32 _self, U32 newColorPointer) {
    id _t1 = (id)newColorPointer;
    [(NSSliderCell*)_self setTitleColor:_t1];
}

// method '-[NSSliderCell setTitleFont:]'
void env___IM_NSSliderCell_setTitleFont_C(void *_instance, U32 _self, U32 fontObjPointer) {
    id _t1 = (id)fontObjPointer;
    [(NSSliderCell*)_self setTitleFont:_t1];
}

// method '-[NSSliderCell sliderType]'
U32 env___IM_NSSliderCell_sliderType(void *_instance, U32 _self) {
    int _result = (int)[(NSSliderCell*)_self sliderType];
    return (U32)_result;
}

// method '-[NSSliderCell tickMarkPosition]'
U32 env___IM_NSSliderCell_tickMarkPosition(void *_instance, U32 _self) {
    int _result = (int)[(NSSliderCell*)_self tickMarkPosition];
    return (U32)_result;
}

// method '-[NSSliderCell tickMarkValueAtIndex:]'
F64 env___IM_NSSliderCell_tickMarkValueAtIndex_C(void *_instance, U32 _self, U32 index) {
    double _result = (double)[(NSSliderCell*)_self tickMarkValueAtIndex:index];
    return (F64)_result;
}

// method '-[NSSliderCell title]'
U32 env___IM_NSSliderCell_title(void *_instance, U32 _self) {
    id _result = (id)[(NSSliderCell*)_self title];
    return (U32)_result;
}

// method '-[NSSliderCell titleCell]'
U32 env___IM_NSSliderCell_titleCell(void *_instance, U32 _self) {
    id _result = (id)[(NSSliderCell*)_self titleCell];
    return (U32)_result;
}

// method '-[NSSliderCell titleColor]'
U32 env___IM_NSSliderCell_titleColor(void *_instance, U32 _self) {
    id _result = (id)[(NSSliderCell*)_self titleColor];
    return (U32)_result;
}

// method '-[NSSliderCell titleFont]'
U32 env___IM_NSSliderCell_titleFont(void *_instance, U32 _self) {
    id _result = (id)[(NSSliderCell*)_self titleFont];
    return (U32)_result;
}

// method '-[NSSliderCell trackRect]'
void env___IM_NSSliderCell_trackRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSSliderCell*)_self trackRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSSound canInitWithPasteboard:]'
U32 env___CM_NSSound_canInitWithPasteboard_C(void *_instance, U32 _class, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    BOOL _result = (BOOL)[(Class)_class canInitWithPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSSound delegate]'
U32 env___IM_NSSound_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSSound*)_self delegate];
    return (U32)_result;
}

// method '-[NSSound initWithContentsOfFile:byReference:]'
U32 env___IM_NSSound_initWithContentsOfFile_CbyReference_C(void *_instance, U32 _self, U32 pathPointer, U32 byRef) {
    id _t1 = (id)pathPointer;
    id _result = (id)[(NSSound*)_self initWithContentsOfFile:_t1 byReference:byRef];
    return (U32)_result;
}

// method '-[NSSound initWithContentsOfURL:byReference:]'
U32 env___IM_NSSound_initWithContentsOfURL_CbyReference_C(void *_instance, U32 _self, U32 urlPointer, U32 byRef) {
    id _t1 = (id)urlPointer;
    id _result = (id)[(NSSound*)_self initWithContentsOfURL:_t1 byReference:byRef];
    return (U32)_result;
}

// method '-[NSSound initWithData:]'
U32 env___IM_NSSound_initWithData_C(void *_instance, U32 _self, U32 dataPointer) {
    id _t1 = (id)dataPointer;
    id _result = (id)[(NSSound*)_self initWithData:_t1];
    return (U32)_result;
}

// method '-[NSSound initWithPasteboard:]'
U32 env___IM_NSSound_initWithPasteboard_C(void *_instance, U32 _self, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    id _result = (id)[(NSSound*)_self initWithPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSSound isPlaying]'
U32 env___IM_NSSound_isPlaying(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSound*)_self isPlaying];
    return (U32)_result;
}

// method '-[NSSound name]'
U32 env___IM_NSSound_name(void *_instance, U32 _self) {
    id _result = (id)[(NSSound*)_self name];
    return (U32)_result;
}

// method '-[NSSound pause]'
U32 env___IM_NSSound_pause(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSound*)_self pause];
    return (U32)_result;
}

// method '-[NSSound play]'
U32 env___IM_NSSound_play(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSound*)_self play];
    return (U32)_result;
}

// method '-[NSSound resume]'
U32 env___IM_NSSound_resume(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSound*)_self resume];
    return (U32)_result;
}

// method '-[NSSound setDelegate:]'
void env___IM_NSSound_setDelegate_C(void *_instance, U32 _self, U32 aDelegatePointer) {
    id _t1 = (id)aDelegatePointer;
    [(NSSound*)_self setDelegate:_t1];
}

// method '-[NSSound setName:]'
U32 env___IM_NSSound_setName_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    BOOL _result = (BOOL)[(NSSound*)_self setName:_t1];
    return (U32)_result;
}

// method '+[NSSound soundNamed:]'
U32 env___CM_NSSound_soundNamed_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    id _result = (id)[(Class)_class soundNamed:_t1];
    return (U32)_result;
}

// method '+[NSSound soundUnfilteredFileTypes]'
U32 env___CM_NSSound_soundUnfilteredFileTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class soundUnfilteredFileTypes];
    return (U32)_result;
}

// method '+[NSSound soundUnfilteredPasteboardTypes]'
U32 env___CM_NSSound_soundUnfilteredPasteboardTypes(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class soundUnfilteredPasteboardTypes];
    return (U32)_result;
}

// method '-[NSSound stop]'
U32 env___IM_NSSound_stop(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSound*)_self stop];
    return (U32)_result;
}

// method '-[NSSound writeToPasteboard:]'
void env___IM_NSSound_writeToPasteboard_C(void *_instance, U32 _self, U32 pasteboardPointer) {
    id _t1 = (id)pasteboardPointer;
    [(NSSound*)_self writeToPasteboard:_t1];
}

// method '-[NSSpeechRecognizer blocksOtherRecognizers]'
U32 env___IM_NSSpeechRecognizer_blocksOtherRecognizers(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSpeechRecognizer*)_self blocksOtherRecognizers];
    return (U32)_result;
}

// method '-[NSSpeechRecognizer commands]'
U32 env___IM_NSSpeechRecognizer_commands(void *_instance, U32 _self) {
    id _result = (id)[(NSSpeechRecognizer*)_self commands];
    return (U32)_result;
}

// method '-[NSSpeechRecognizer delegate]'
U32 env___IM_NSSpeechRecognizer_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSSpeechRecognizer*)_self delegate];
    return (U32)_result;
}

// method '-[NSSpeechRecognizer displayedCommandsTitle]'
U32 env___IM_NSSpeechRecognizer_displayedCommandsTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSSpeechRecognizer*)_self displayedCommandsTitle];
    return (U32)_result;
}

// method '-[NSSpeechRecognizer init]'
U32 env___IM_NSSpeechRecognizer_init(void *_instance, U32 _self) {
    id _result = (id)[(NSSpeechRecognizer*)_self init];
    return (U32)_result;
}

// method '-[NSSpeechRecognizer listensInForegroundOnly]'
U32 env___IM_NSSpeechRecognizer_listensInForegroundOnly(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSpeechRecognizer*)_self listensInForegroundOnly];
    return (U32)_result;
}

// method '-[NSSpeechRecognizer setBlocksOtherRecognizers:]'
void env___IM_NSSpeechRecognizer_setBlocksOtherRecognizers_C(void *_instance, U32 _self, U32 flag) {
    [(NSSpeechRecognizer*)_self setBlocksOtherRecognizers:flag];
}

// method '-[NSSpeechRecognizer setCommands:]'
void env___IM_NSSpeechRecognizer_setCommands_C(void *_instance, U32 _self, U32 commandsPointer) {
    id _t1 = (id)commandsPointer;
    [(NSSpeechRecognizer*)_self setCommands:_t1];
}

// method '-[NSSpeechRecognizer setDelegate:]'
void env___IM_NSSpeechRecognizer_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSSpeechRecognizer*)_self setDelegate:_t1];
}

// method '-[NSSpeechRecognizer setDisplayedCommandsTitle:]'
void env___IM_NSSpeechRecognizer_setDisplayedCommandsTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSSpeechRecognizer*)_self setDisplayedCommandsTitle:_t1];
}

// method '-[NSSpeechRecognizer setListensInForegroundOnly:]'
void env___IM_NSSpeechRecognizer_setListensInForegroundOnly_C(void *_instance, U32 _self, U32 flag) {
    [(NSSpeechRecognizer*)_self setListensInForegroundOnly:flag];
}

// method '-[NSSpeechRecognizer startListening]'
void env___IM_NSSpeechRecognizer_startListening(void *_instance, U32 _self) {
    [(NSSpeechRecognizer*)_self startListening];
}

// method '-[NSSpeechRecognizer stopListening]'
void env___IM_NSSpeechRecognizer_stopListening(void *_instance, U32 _self) {
    [(NSSpeechRecognizer*)_self stopListening];
}

// method '+[NSSpeechSynthesizer attributesForVoice:]'
U32 env___CM_NSSpeechSynthesizer_attributesForVoice_C(void *_instance, U32 _class, U32 voicePointer) {
    id _t1 = (id)voicePointer;
    id _result = (id)[(Class)_class attributesForVoice:_t1];
    return (U32)_result;
}

// method '+[NSSpeechSynthesizer availableVoices]'
U32 env___CM_NSSpeechSynthesizer_availableVoices(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class availableVoices];
    return (U32)_result;
}

// method '+[NSSpeechSynthesizer defaultVoice]'
U32 env___CM_NSSpeechSynthesizer_defaultVoice(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultVoice];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer delegate]'
U32 env___IM_NSSpeechSynthesizer_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSSpeechSynthesizer*)_self delegate];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer initWithVoice:]'
U32 env___IM_NSSpeechSynthesizer_initWithVoice_C(void *_instance, U32 _self, U32 voicePointer) {
    id _t1 = (id)voicePointer;
    id _result = (id)[(NSSpeechSynthesizer*)_self initWithVoice:_t1];
    return (U32)_result;
}

// method '+[NSSpeechSynthesizer isAnyApplicationSpeaking]'
U32 env___CM_NSSpeechSynthesizer_isAnyApplicationSpeaking(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class isAnyApplicationSpeaking];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer isSpeaking]'
U32 env___IM_NSSpeechSynthesizer_isSpeaking(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSpeechSynthesizer*)_self isSpeaking];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer setDelegate:]'
void env___IM_NSSpeechSynthesizer_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSSpeechSynthesizer*)_self setDelegate:_t1];
}

// method '-[NSSpeechSynthesizer setUsesFeedbackWindow:]'
void env___IM_NSSpeechSynthesizer_setUsesFeedbackWindow_C(void *_instance, U32 _self, U32 flag) {
    [(NSSpeechSynthesizer*)_self setUsesFeedbackWindow:flag];
}

// method '-[NSSpeechSynthesizer setVoice:]'
U32 env___IM_NSSpeechSynthesizer_setVoice_C(void *_instance, U32 _self, U32 voicePointer) {
    id _t1 = (id)voicePointer;
    BOOL _result = (BOOL)[(NSSpeechSynthesizer*)_self setVoice:_t1];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer startSpeakingString:]'
U32 env___IM_NSSpeechSynthesizer_startSpeakingString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    BOOL _result = (BOOL)[(NSSpeechSynthesizer*)_self startSpeakingString:_t1];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer startSpeakingString:toURL:]'
U32 env___IM_NSSpeechSynthesizer_startSpeakingString_CtoURL_C(void *_instance, U32 _self, U32 stringPointer, U32 urlPointer) {
    id _t1 = (id)stringPointer;
    id _t2 = (id)urlPointer;
    BOOL _result = (BOOL)[(NSSpeechSynthesizer*)_self startSpeakingString:_t1 toURL:_t2];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer stopSpeaking]'
void env___IM_NSSpeechSynthesizer_stopSpeaking(void *_instance, U32 _self) {
    [(NSSpeechSynthesizer*)_self stopSpeaking];
}

// method '-[NSSpeechSynthesizer usesFeedbackWindow]'
U32 env___IM_NSSpeechSynthesizer_usesFeedbackWindow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSpeechSynthesizer*)_self usesFeedbackWindow];
    return (U32)_result;
}

// method '-[NSSpeechSynthesizer voice]'
U32 env___IM_NSSpeechSynthesizer_voice(void *_instance, U32 _self) {
    id _result = (id)[(NSSpeechSynthesizer*)_self voice];
    return (U32)_result;
}

// method '-[NSSpellChecker accessoryView]'
U32 env___IM_NSSpellChecker_accessoryView(void *_instance, U32 _self) {
    id _result = (id)[(NSSpellChecker*)_self accessoryView];
    return (U32)_result;
}

// method '-[NSSpellChecker checkSpellingOfString:startingAt:]'
void env___IM_NSSpellChecker_checkSpellingOfString_CstartingAt_C(void *_instance, U32 _resultIndirect, U32 _self, U32 stringToCheckPointer, U32 startingOffset) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)stringToCheckPointer;
    NSRange _result = (NSRange)[(NSSpellChecker*)_self checkSpellingOfString:_t1 startingAt:startingOffset];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSpellChecker checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:]'
void env___IM_NSSpellChecker_checkSpellingOfString_CstartingAt_Clanguage_Cwrap_CinSpellDocumentWithTag_CwordCount_C(void *_instance, U32 _resultIndirect, U32 _self, U32 stringToCheckPointer, U32 startingOffset, U32 languagePointer, U32 wrapFlag, U32 tag, U32 wordCountPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)stringToCheckPointer;
    id _t2 = (id)languagePointer;
    int* _t3 = (int*)wordCountPointer;
    NSRange _result = (NSRange)[(NSSpellChecker*)_self checkSpellingOfString:_t1 startingAt:startingOffset language:_t2 wrap:wrapFlag inSpellDocumentWithTag:tag wordCount:_t3];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSSpellChecker closeSpellDocumentWithTag:]'
void env___IM_NSSpellChecker_closeSpellDocumentWithTag_C(void *_instance, U32 _self, U32 tag) {
    [(NSSpellChecker*)_self closeSpellDocumentWithTag:tag];
}

// method '-[NSSpellChecker completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:]'
U32 env___IM_NSSpellChecker_completionsForPartialWordRange_CinString_Clanguage_CinSpellDocumentWithTag_C(void *_instance, U32 _self, U32 rangeIndirect, U32 stringPointer, U32 languagePointer, U32 tag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)stringPointer;
    id _t3 = (id)languagePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSSpellChecker*)_self completionsForPartialWordRange:_t1 inString:_t2 language:_t3 inSpellDocumentWithTag:tag];
    return (U32)_result;
}

// method '-[NSSpellChecker countWordsInString:language:]'
U32 env___IM_NSSpellChecker_countWordsInString_Clanguage_C(void *_instance, U32 _self, U32 stringToCountPointer, U32 languagePointer) {
    id _t1 = (id)stringToCountPointer;
    id _t2 = (id)languagePointer;
    int _result = (int)[(NSSpellChecker*)_self countWordsInString:_t1 language:_t2];
    return (U32)_result;
}

// method '-[NSSpellChecker guessesForWord:]'
U32 env___IM_NSSpellChecker_guessesForWord_C(void *_instance, U32 _self, U32 wordPointer) {
    id _t1 = (id)wordPointer;
    id _result = (id)[(NSSpellChecker*)_self guessesForWord:_t1];
    return (U32)_result;
}

// method '-[NSSpellChecker ignoreWord:inSpellDocumentWithTag:]'
void env___IM_NSSpellChecker_ignoreWord_CinSpellDocumentWithTag_C(void *_instance, U32 _self, U32 wordToIgnorePointer, U32 tag) {
    id _t1 = (id)wordToIgnorePointer;
    [(NSSpellChecker*)_self ignoreWord:_t1 inSpellDocumentWithTag:tag];
}

// method '-[NSSpellChecker ignoredWordsInSpellDocumentWithTag:]'
U32 env___IM_NSSpellChecker_ignoredWordsInSpellDocumentWithTag_C(void *_instance, U32 _self, U32 tag) {
    id _result = (id)[(NSSpellChecker*)_self ignoredWordsInSpellDocumentWithTag:tag];
    return (U32)_result;
}

// method '-[NSSpellChecker language]'
U32 env___IM_NSSpellChecker_language(void *_instance, U32 _self) {
    id _result = (id)[(NSSpellChecker*)_self language];
    return (U32)_result;
}

// method '-[NSSpellChecker setAccessoryView:]'
void env___IM_NSSpellChecker_setAccessoryView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSSpellChecker*)_self setAccessoryView:_t1];
}

// method '-[NSSpellChecker setIgnoredWords:inSpellDocumentWithTag:]'
void env___IM_NSSpellChecker_setIgnoredWords_CinSpellDocumentWithTag_C(void *_instance, U32 _self, U32 wordsPointer, U32 tag) {
    id _t1 = (id)wordsPointer;
    [(NSSpellChecker*)_self setIgnoredWords:_t1 inSpellDocumentWithTag:tag];
}

// method '-[NSSpellChecker setLanguage:]'
U32 env___IM_NSSpellChecker_setLanguage_C(void *_instance, U32 _self, U32 languagePointer) {
    id _t1 = (id)languagePointer;
    BOOL _result = (BOOL)[(NSSpellChecker*)_self setLanguage:_t1];
    return (U32)_result;
}

// method '-[NSSpellChecker setWordFieldStringValue:]'
void env___IM_NSSpellChecker_setWordFieldStringValue_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSSpellChecker*)_self setWordFieldStringValue:_t1];
}

// method '+[NSSpellChecker sharedSpellChecker]'
U32 env___CM_NSSpellChecker_sharedSpellChecker(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedSpellChecker];
    return (U32)_result;
}

// method '+[NSSpellChecker sharedSpellCheckerExists]'
U32 env___CM_NSSpellChecker_sharedSpellCheckerExists(void *_instance, U32 _class) {
    BOOL _result = (BOOL)[(Class)_class sharedSpellCheckerExists];
    return (U32)_result;
}

// method '-[NSSpellChecker spellingPanel]'
U32 env___IM_NSSpellChecker_spellingPanel(void *_instance, U32 _self) {
    id _result = (id)[(NSSpellChecker*)_self spellingPanel];
    return (U32)_result;
}

// method '+[NSSpellChecker uniqueSpellDocumentTag]'
U32 env___CM_NSSpellChecker_uniqueSpellDocumentTag(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class uniqueSpellDocumentTag];
    return (U32)_result;
}

// method '-[NSSpellChecker updateSpellingPanelWithMisspelledWord:]'
void env___IM_NSSpellChecker_updateSpellingPanelWithMisspelledWord_C(void *_instance, U32 _self, U32 wordPointer) {
    id _t1 = (id)wordPointer;
    [(NSSpellChecker*)_self updateSpellingPanelWithMisspelledWord:_t1];
}

// method '-[NSSplitView adjustSubviews]'
void env___IM_NSSplitView_adjustSubviews(void *_instance, U32 _self) {
    [(NSSplitView*)_self adjustSubviews];
}

// method '-[NSSplitView delegate]'
U32 env___IM_NSSplitView_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSSplitView*)_self delegate];
    return (U32)_result;
}

// method '-[NSSplitView dividerThickness]'
F32 env___IM_NSSplitView_dividerThickness(void *_instance, U32 _self) {
    float _result = (float)[(NSSplitView*)_self dividerThickness];
    return (F32)_result;
}

// method '-[NSSplitView drawDividerInRect:]'
void env___IM_NSSplitView_drawDividerInRect_C(void *_instance, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSSplitView*)_self drawDividerInRect:_t1];
}

// method '-[NSSplitView isPaneSplitter]'
U32 env___IM_NSSplitView_isPaneSplitter(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSplitView*)_self isPaneSplitter];
    return (U32)_result;
}

// method '-[NSSplitView isSubviewCollapsed:]'
U32 env___IM_NSSplitView_isSubviewCollapsed_C(void *_instance, U32 _self, U32 subviewPointer) {
    id _t1 = (id)subviewPointer;
    BOOL _result = (BOOL)[(NSSplitView*)_self isSubviewCollapsed:_t1];
    return (U32)_result;
}

// method '-[NSSplitView isVertical]'
U32 env___IM_NSSplitView_isVertical(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSSplitView*)_self isVertical];
    return (U32)_result;
}

// method '-[NSSplitView setDelegate:]'
void env___IM_NSSplitView_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSSplitView*)_self setDelegate:_t1];
}

// method '-[NSSplitView setIsPaneSplitter:]'
void env___IM_NSSplitView_setIsPaneSplitter_C(void *_instance, U32 _self, U32 flag) {
    [(NSSplitView*)_self setIsPaneSplitter:flag];
}

// method '-[NSSplitView setVertical:]'
void env___IM_NSSplitView_setVertical_C(void *_instance, U32 _self, U32 flag) {
    [(NSSplitView*)_self setVertical:flag];
}

// method '-[NSStatusBar isVertical]'
U32 env___IM_NSStatusBar_isVertical(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStatusBar*)_self isVertical];
    return (U32)_result;
}

// method '-[NSStatusBar removeStatusItem:]'
void env___IM_NSStatusBar_removeStatusItem_C(void *_instance, U32 _self, U32 itemPointer) {
    id _t1 = (id)itemPointer;
    [(NSStatusBar*)_self removeStatusItem:_t1];
}

// method '-[NSStatusBar statusItemWithLength:]'
U32 env___IM_NSStatusBar_statusItemWithLength_C(void *_instance, U32 _self, F32 length) {
    id _result = (id)[(NSStatusBar*)_self statusItemWithLength:length];
    return (U32)_result;
}

// method '+[NSStatusBar systemStatusBar]'
U32 env___CM_NSStatusBar_systemStatusBar(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class systemStatusBar];
    return (U32)_result;
}

// method '-[NSStatusBar thickness]'
F32 env___IM_NSStatusBar_thickness(void *_instance, U32 _self) {
    float _result = (float)[(NSStatusBar*)_self thickness];
    return (F32)_result;
}

// method '-[NSStatusItem action]'
U32 env___IM_NSStatusItem_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSStatusItem*)_self action];
    return (U32)_result;
}

// method '-[NSStatusItem alternateImage]'
U32 env___IM_NSStatusItem_alternateImage(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self alternateImage];
    return (U32)_result;
}

// method '-[NSStatusItem attributedTitle]'
U32 env___IM_NSStatusItem_attributedTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self attributedTitle];
    return (U32)_result;
}

// method '-[NSStatusItem doubleAction]'
U32 env___IM_NSStatusItem_doubleAction(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSStatusItem*)_self doubleAction];
    return (U32)_result;
}

// method '-[NSStatusItem drawStatusBarBackgroundInRect:withHighlight:]'
void env___IM_NSStatusItem_drawStatusBarBackgroundInRect_CwithHighlight_C(void *_instance, U32 _self, U32 rectIndirect, U32 highlight) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSStatusItem*)_self drawStatusBarBackgroundInRect:_t1 withHighlight:highlight];
}

// method '-[NSStatusItem highlightMode]'
U32 env___IM_NSStatusItem_highlightMode(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStatusItem*)_self highlightMode];
    return (U32)_result;
}

// method '-[NSStatusItem image]'
U32 env___IM_NSStatusItem_image(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self image];
    return (U32)_result;
}

// method '-[NSStatusItem isEnabled]'
U32 env___IM_NSStatusItem_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStatusItem*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSStatusItem length]'
F32 env___IM_NSStatusItem_length(void *_instance, U32 _self) {
    float _result = (float)[(NSStatusItem*)_self length];
    return (F32)_result;
}

// method '-[NSStatusItem menu]'
U32 env___IM_NSStatusItem_menu(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self menu];
    return (U32)_result;
}

// method '-[NSStatusItem popUpStatusItemMenu:]'
void env___IM_NSStatusItem_popUpStatusItemMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSStatusItem*)_self popUpStatusItemMenu:_t1];
}

// method '-[NSStatusItem sendActionOn:]'
void env___IM_NSStatusItem_sendActionOn_C(void *_instance, U32 _self, U32 mask) {
    [(NSStatusItem*)_self sendActionOn:mask];
}

// method '-[NSStatusItem setAction:]'
void env___IM_NSStatusItem_setAction_C(void *_instance, U32 _self, U32 actionPointer) {
    SEL _t1 = (SEL)actionPointer;
    [(NSStatusItem*)_self setAction:_t1];
}

// method '-[NSStatusItem setAlternateImage:]'
void env___IM_NSStatusItem_setAlternateImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSStatusItem*)_self setAlternateImage:_t1];
}

// method '-[NSStatusItem setAttributedTitle:]'
void env___IM_NSStatusItem_setAttributedTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSStatusItem*)_self setAttributedTitle:_t1];
}

// method '-[NSStatusItem setDoubleAction:]'
void env___IM_NSStatusItem_setDoubleAction_C(void *_instance, U32 _self, U32 actionPointer) {
    SEL _t1 = (SEL)actionPointer;
    [(NSStatusItem*)_self setDoubleAction:_t1];
}

// method '-[NSStatusItem setEnabled:]'
void env___IM_NSStatusItem_setEnabled_C(void *_instance, U32 _self, U32 enabled) {
    [(NSStatusItem*)_self setEnabled:enabled];
}

// method '-[NSStatusItem setHighlightMode:]'
void env___IM_NSStatusItem_setHighlightMode_C(void *_instance, U32 _self, U32 highlightMode) {
    [(NSStatusItem*)_self setHighlightMode:highlightMode];
}

// method '-[NSStatusItem setImage:]'
void env___IM_NSStatusItem_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSStatusItem*)_self setImage:_t1];
}

// method '-[NSStatusItem setLength:]'
void env___IM_NSStatusItem_setLength_C(void *_instance, U32 _self, F32 length) {
    [(NSStatusItem*)_self setLength:length];
}

// method '-[NSStatusItem setMenu:]'
void env___IM_NSStatusItem_setMenu_C(void *_instance, U32 _self, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(NSStatusItem*)_self setMenu:_t1];
}

// method '-[NSStatusItem setTarget:]'
void env___IM_NSStatusItem_setTarget_C(void *_instance, U32 _self, U32 targetPointer) {
    id _t1 = (id)targetPointer;
    [(NSStatusItem*)_self setTarget:_t1];
}

// method '-[NSStatusItem setTitle:]'
void env___IM_NSStatusItem_setTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSStatusItem*)_self setTitle:_t1];
}

// method '-[NSStatusItem setToolTip:]'
void env___IM_NSStatusItem_setToolTip_C(void *_instance, U32 _self, U32 toolTipPointer) {
    id _t1 = (id)toolTipPointer;
    [(NSStatusItem*)_self setToolTip:_t1];
}

// method '-[NSStatusItem setView:]'
void env___IM_NSStatusItem_setView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSStatusItem*)_self setView:_t1];
}

// method '-[NSStatusItem statusBar]'
U32 env___IM_NSStatusItem_statusBar(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self statusBar];
    return (U32)_result;
}

// method '-[NSStatusItem target]'
U32 env___IM_NSStatusItem_target(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self target];
    return (U32)_result;
}

// method '-[NSStatusItem title]'
U32 env___IM_NSStatusItem_title(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self title];
    return (U32)_result;
}

// method '-[NSStatusItem toolTip]'
U32 env___IM_NSStatusItem_toolTip(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self toolTip];
    return (U32)_result;
}

// method '-[NSStatusItem view]'
U32 env___IM_NSStatusItem_view(void *_instance, U32 _self) {
    id _result = (id)[(NSStatusItem*)_self view];
    return (U32)_result;
}

// method '-[NSStepper autorepeat]'
U32 env___IM_NSStepper_autorepeat(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStepper*)_self autorepeat];
    return (U32)_result;
}

// method '-[NSStepper increment]'
F64 env___IM_NSStepper_increment(void *_instance, U32 _self) {
    double _result = (double)[(NSStepper*)_self increment];
    return (F64)_result;
}

// method '-[NSStepper maxValue]'
F64 env___IM_NSStepper_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSStepper*)_self maxValue];
    return (F64)_result;
}

// method '-[NSStepper minValue]'
F64 env___IM_NSStepper_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSStepper*)_self minValue];
    return (F64)_result;
}

// method '-[NSStepper setAutorepeat:]'
void env___IM_NSStepper_setAutorepeat_C(void *_instance, U32 _self, U32 autorepeat) {
    [(NSStepper*)_self setAutorepeat:autorepeat];
}

// method '-[NSStepper setIncrement:]'
void env___IM_NSStepper_setIncrement_C(void *_instance, U32 _self, F64 increment) {
    [(NSStepper*)_self setIncrement:increment];
}

// method '-[NSStepper setMaxValue:]'
void env___IM_NSStepper_setMaxValue_C(void *_instance, U32 _self, F64 maxValue) {
    [(NSStepper*)_self setMaxValue:maxValue];
}

// method '-[NSStepper setMinValue:]'
void env___IM_NSStepper_setMinValue_C(void *_instance, U32 _self, F64 minValue) {
    [(NSStepper*)_self setMinValue:minValue];
}

// method '-[NSStepper setValueWraps:]'
void env___IM_NSStepper_setValueWraps_C(void *_instance, U32 _self, U32 valueWraps) {
    [(NSStepper*)_self setValueWraps:valueWraps];
}

// method '-[NSStepper valueWraps]'
U32 env___IM_NSStepper_valueWraps(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStepper*)_self valueWraps];
    return (U32)_result;
}

// method '-[NSStepperCell autorepeat]'
U32 env___IM_NSStepperCell_autorepeat(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStepperCell*)_self autorepeat];
    return (U32)_result;
}

// method '-[NSStepperCell increment]'
F64 env___IM_NSStepperCell_increment(void *_instance, U32 _self) {
    double _result = (double)[(NSStepperCell*)_self increment];
    return (F64)_result;
}

// method '-[NSStepperCell maxValue]'
F64 env___IM_NSStepperCell_maxValue(void *_instance, U32 _self) {
    double _result = (double)[(NSStepperCell*)_self maxValue];
    return (F64)_result;
}

// method '-[NSStepperCell minValue]'
F64 env___IM_NSStepperCell_minValue(void *_instance, U32 _self) {
    double _result = (double)[(NSStepperCell*)_self minValue];
    return (F64)_result;
}

// method '-[NSStepperCell setAutorepeat:]'
void env___IM_NSStepperCell_setAutorepeat_C(void *_instance, U32 _self, U32 autorepeat) {
    [(NSStepperCell*)_self setAutorepeat:autorepeat];
}

// method '-[NSStepperCell setIncrement:]'
void env___IM_NSStepperCell_setIncrement_C(void *_instance, U32 _self, F64 increment) {
    [(NSStepperCell*)_self setIncrement:increment];
}

// method '-[NSStepperCell setMaxValue:]'
void env___IM_NSStepperCell_setMaxValue_C(void *_instance, U32 _self, F64 maxValue) {
    [(NSStepperCell*)_self setMaxValue:maxValue];
}

// method '-[NSStepperCell setMinValue:]'
void env___IM_NSStepperCell_setMinValue_C(void *_instance, U32 _self, F64 minValue) {
    [(NSStepperCell*)_self setMinValue:minValue];
}

// method '-[NSStepperCell setValueWraps:]'
void env___IM_NSStepperCell_setValueWraps_C(void *_instance, U32 _self, U32 valueWraps) {
    [(NSStepperCell*)_self setValueWraps:valueWraps];
}

// method '-[NSStepperCell valueWraps]'
U32 env___IM_NSStepperCell_valueWraps(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSStepperCell*)_self valueWraps];
    return (U32)_result;
}

// method '-[NSString boundingRectWithSize:options:attributes:]'
void env___IM_NSString_boundingRectWithSize_Coptions_Cattributes_C(void *_instance, U32 _resultIndirect, U32 _self, U32 sizeIndirect, U32 options, U32 attributesPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    id _t2 = (id)attributesPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    NSRect _result = (NSRect)[(NSString*)_self boundingRectWithSize:_t1 options:options attributes:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSString drawAtPoint:withAttributes:]'
void env___IM_NSString_drawAtPoint_CwithAttributes_C(void *_instance, U32 _self, U32 pointIndirect, U32 attrsPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    id _t2 = (id)attrsPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSString*)_self drawAtPoint:_t1 withAttributes:_t2];
}

// method '-[NSString drawInRect:withAttributes:]'
void env___IM_NSString_drawInRect_CwithAttributes_C(void *_instance, U32 _self, U32 rectIndirect, U32 attrsPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)attrsPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSString*)_self drawInRect:_t1 withAttributes:_t2];
}

// method '-[NSString drawWithRect:options:attributes:]'
void env___IM_NSString_drawWithRect_Coptions_Cattributes_C(void *_instance, U32 _self, U32 rectIndirect, U32 options, U32 attributesPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)attributesPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSString*)_self drawWithRect:_t1 options:options attributes:_t2];
}

// method '-[NSString sizeWithAttributes:]'
void env___IM_NSString_sizeWithAttributes_C(void *_instance, U32 _resultIndirect, U32 _self, U32 attrsPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)attrsPointer;
    NSSize _result = (NSSize)[(NSString*)_self sizeWithAttributes:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTabView addTabViewItem:]'
void env___IM_NSTabView_addTabViewItem_C(void *_instance, U32 _self, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewItemPointer;
    [(NSTabView*)_self addTabViewItem:_t1];
}

// method '-[NSTabView allowsTruncatedLabels]'
U32 env___IM_NSTabView_allowsTruncatedLabels(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTabView*)_self allowsTruncatedLabels];
    return (U32)_result;
}

// method '-[NSTabView contentRect]'
void env___IM_NSTabView_contentRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSTabView*)_self contentRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTabView controlSize]'
U32 env___IM_NSTabView_controlSize(void *_instance, U32 _self) {
    int _result = (int)[(NSTabView*)_self controlSize];
    return (U32)_result;
}

// method '-[NSTabView controlTint]'
U32 env___IM_NSTabView_controlTint(void *_instance, U32 _self) {
    int _result = (int)[(NSTabView*)_self controlTint];
    return (U32)_result;
}

// method '-[NSTabView delegate]'
U32 env___IM_NSTabView_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSTabView*)_self delegate];
    return (U32)_result;
}

// method '-[NSTabView drawsBackground]'
U32 env___IM_NSTabView_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTabView*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSTabView font]'
U32 env___IM_NSTabView_font(void *_instance, U32 _self) {
    id _result = (id)[(NSTabView*)_self font];
    return (U32)_result;
}

// method '-[NSTabView indexOfTabViewItem:]'
U32 env___IM_NSTabView_indexOfTabViewItem_C(void *_instance, U32 _self, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewItemPointer;
    int _result = (int)[(NSTabView*)_self indexOfTabViewItem:_t1];
    return (U32)_result;
}

// method '-[NSTabView indexOfTabViewItemWithIdentifier:]'
U32 env___IM_NSTabView_indexOfTabViewItemWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    int _result = (int)[(NSTabView*)_self indexOfTabViewItemWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSTabView insertTabViewItem:atIndex:]'
void env___IM_NSTabView_insertTabViewItem_CatIndex_C(void *_instance, U32 _self, U32 tabViewItemPointer, U32 index) {
    id _t1 = (id)tabViewItemPointer;
    [(NSTabView*)_self insertTabViewItem:_t1 atIndex:index];
}

// method '-[NSTabView minimumSize]'
void env___IM_NSTabView_minimumSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSTabView*)_self minimumSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTabView numberOfTabViewItems]'
U32 env___IM_NSTabView_numberOfTabViewItems(void *_instance, U32 _self) {
    int _result = (int)[(NSTabView*)_self numberOfTabViewItems];
    return (U32)_result;
}

// method '-[NSTabView removeTabViewItem:]'
void env___IM_NSTabView_removeTabViewItem_C(void *_instance, U32 _self, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewItemPointer;
    [(NSTabView*)_self removeTabViewItem:_t1];
}

// method '-[NSTabView selectFirstTabViewItem:]'
void env___IM_NSTabView_selectFirstTabViewItem_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTabView*)_self selectFirstTabViewItem:_t1];
}

// method '-[NSTabView selectLastTabViewItem:]'
void env___IM_NSTabView_selectLastTabViewItem_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTabView*)_self selectLastTabViewItem:_t1];
}

// method '-[NSTabView selectNextTabViewItem:]'
void env___IM_NSTabView_selectNextTabViewItem_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTabView*)_self selectNextTabViewItem:_t1];
}

// method '-[NSTabView selectPreviousTabViewItem:]'
void env___IM_NSTabView_selectPreviousTabViewItem_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTabView*)_self selectPreviousTabViewItem:_t1];
}

// method '-[NSTabView selectTabViewItem:]'
void env___IM_NSTabView_selectTabViewItem_C(void *_instance, U32 _self, U32 tabViewItemPointer) {
    id _t1 = (id)tabViewItemPointer;
    [(NSTabView*)_self selectTabViewItem:_t1];
}

// method '-[NSTabView selectTabViewItemAtIndex:]'
void env___IM_NSTabView_selectTabViewItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSTabView*)_self selectTabViewItemAtIndex:index];
}

// method '-[NSTabView selectTabViewItemWithIdentifier:]'
void env___IM_NSTabView_selectTabViewItemWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    [(NSTabView*)_self selectTabViewItemWithIdentifier:_t1];
}

// method '-[NSTabView selectedTabViewItem]'
U32 env___IM_NSTabView_selectedTabViewItem(void *_instance, U32 _self) {
    id _result = (id)[(NSTabView*)_self selectedTabViewItem];
    return (U32)_result;
}

// method '-[NSTabView setAllowsTruncatedLabels:]'
void env___IM_NSTabView_setAllowsTruncatedLabels_C(void *_instance, U32 _self, U32 allowTruncatedLabels) {
    [(NSTabView*)_self setAllowsTruncatedLabels:allowTruncatedLabels];
}

// method '-[NSTabView setControlSize:]'
void env___IM_NSTabView_setControlSize_C(void *_instance, U32 _self, U32 controlSize) {
    [(NSTabView*)_self setControlSize:controlSize];
}

// method '-[NSTabView setControlTint:]'
void env___IM_NSTabView_setControlTint_C(void *_instance, U32 _self, U32 controlTint) {
    [(NSTabView*)_self setControlTint:controlTint];
}

// method '-[NSTabView setDelegate:]'
void env___IM_NSTabView_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSTabView*)_self setDelegate:_t1];
}

// method '-[NSTabView setDrawsBackground:]'
void env___IM_NSTabView_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSTabView*)_self setDrawsBackground:flag];
}

// method '-[NSTabView setFont:]'
void env___IM_NSTabView_setFont_C(void *_instance, U32 _self, U32 fontPointer) {
    id _t1 = (id)fontPointer;
    [(NSTabView*)_self setFont:_t1];
}

// method '-[NSTabView setTabViewType:]'
void env___IM_NSTabView_setTabViewType_C(void *_instance, U32 _self, U32 tabViewType) {
    [(NSTabView*)_self setTabViewType:tabViewType];
}

// method '-[NSTabView tabViewItemAtIndex:]'
U32 env___IM_NSTabView_tabViewItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    id _result = (id)[(NSTabView*)_self tabViewItemAtIndex:index];
    return (U32)_result;
}

// method '-[NSTabView tabViewItemAtPoint:]'
U32 env___IM_NSTabView_tabViewItemAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(NSTabView*)_self tabViewItemAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSTabView tabViewItems]'
U32 env___IM_NSTabView_tabViewItems(void *_instance, U32 _self) {
    id _result = (id)[(NSTabView*)_self tabViewItems];
    return (U32)_result;
}

// method '-[NSTabView tabViewType]'
U32 env___IM_NSTabView_tabViewType(void *_instance, U32 _self) {
    int _result = (int)[(NSTabView*)_self tabViewType];
    return (U32)_result;
}

// method '-[NSTabView takeSelectedTabViewItemFromSender:]'
void env___IM_NSTabView_takeSelectedTabViewItemFromSender_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTabView*)_self takeSelectedTabViewItemFromSender:_t1];
}

// method '-[NSTabViewItem color]'
U32 env___IM_NSTabViewItem_color(void *_instance, U32 _self) {
    id _result = (id)[(NSTabViewItem*)_self color];
    return (U32)_result;
}

// method '-[NSTabViewItem drawLabel:inRect:]'
void env___IM_NSTabViewItem_drawLabel_CinRect_C(void *_instance, U32 _self, U32 shouldTruncateLabel, U32 labelRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + labelRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTabViewItem*)_self drawLabel:shouldTruncateLabel inRect:_t1];
}

// method '-[NSTabViewItem identifier]'
U32 env___IM_NSTabViewItem_identifier(void *_instance, U32 _self) {
    id _result = (id)[(NSTabViewItem*)_self identifier];
    return (U32)_result;
}

// method '-[NSTabViewItem initWithIdentifier:]'
U32 env___IM_NSTabViewItem_initWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    id _result = (id)[(NSTabViewItem*)_self initWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSTabViewItem initialFirstResponder]'
U32 env___IM_NSTabViewItem_initialFirstResponder(void *_instance, U32 _self) {
    id _result = (id)[(NSTabViewItem*)_self initialFirstResponder];
    return (U32)_result;
}

// method '-[NSTabViewItem label]'
U32 env___IM_NSTabViewItem_label(void *_instance, U32 _self) {
    id _result = (id)[(NSTabViewItem*)_self label];
    return (U32)_result;
}

// method '-[NSTabViewItem setColor:]'
void env___IM_NSTabViewItem_setColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTabViewItem*)_self setColor:_t1];
}

// method '-[NSTabViewItem setIdentifier:]'
void env___IM_NSTabViewItem_setIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    [(NSTabViewItem*)_self setIdentifier:_t1];
}

// method '-[NSTabViewItem setInitialFirstResponder:]'
void env___IM_NSTabViewItem_setInitialFirstResponder_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSTabViewItem*)_self setInitialFirstResponder:_t1];
}

// method '-[NSTabViewItem setLabel:]'
void env___IM_NSTabViewItem_setLabel_C(void *_instance, U32 _self, U32 labelPointer) {
    id _t1 = (id)labelPointer;
    [(NSTabViewItem*)_self setLabel:_t1];
}

// method '-[NSTabViewItem setView:]'
void env___IM_NSTabViewItem_setView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSTabViewItem*)_self setView:_t1];
}

// method '-[NSTabViewItem sizeOfLabel:]'
void env___IM_NSTabViewItem_sizeOfLabel_C(void *_instance, U32 _resultIndirect, U32 _self, U32 computeMin) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSTabViewItem*)_self sizeOfLabel:computeMin];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTabViewItem tabState]'
U32 env___IM_NSTabViewItem_tabState(void *_instance, U32 _self) {
    int _result = (int)[(NSTabViewItem*)_self tabState];
    return (U32)_result;
}

// method '-[NSTabViewItem tabView]'
U32 env___IM_NSTabViewItem_tabView(void *_instance, U32 _self) {
    id _result = (id)[(NSTabViewItem*)_self tabView];
    return (U32)_result;
}

// method '-[NSTabViewItem view]'
U32 env___IM_NSTabViewItem_view(void *_instance, U32 _self) {
    id _result = (id)[(NSTabViewItem*)_self view];
    return (U32)_result;
}

// method '-[NSTableColumn dataCell]'
U32 env___IM_NSTableColumn_dataCell(void *_instance, U32 _self) {
    id _result = (id)[(NSTableColumn*)_self dataCell];
    return (U32)_result;
}

// method '-[NSTableColumn dataCellForRow:]'
U32 env___IM_NSTableColumn_dataCellForRow_C(void *_instance, U32 _self, U32 row) {
    id _result = (id)[(NSTableColumn*)_self dataCellForRow:row];
    return (U32)_result;
}

// method '-[NSTableColumn headerCell]'
U32 env___IM_NSTableColumn_headerCell(void *_instance, U32 _self) {
    id _result = (id)[(NSTableColumn*)_self headerCell];
    return (U32)_result;
}

// method '-[NSTableColumn identifier]'
U32 env___IM_NSTableColumn_identifier(void *_instance, U32 _self) {
    id _result = (id)[(NSTableColumn*)_self identifier];
    return (U32)_result;
}

// method '-[NSTableColumn initWithIdentifier:]'
U32 env___IM_NSTableColumn_initWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    id _result = (id)[(NSTableColumn*)_self initWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSTableColumn isEditable]'
U32 env___IM_NSTableColumn_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableColumn*)_self isEditable];
    return (U32)_result;
}

// method '-[NSTableColumn isResizable]'
U32 env___IM_NSTableColumn_isResizable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableColumn*)_self isResizable];
    return (U32)_result;
}

// method '-[NSTableColumn maxWidth]'
F32 env___IM_NSTableColumn_maxWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSTableColumn*)_self maxWidth];
    return (F32)_result;
}

// method '-[NSTableColumn minWidth]'
F32 env___IM_NSTableColumn_minWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSTableColumn*)_self minWidth];
    return (F32)_result;
}

// method '-[NSTableColumn resizingMask]'
U32 env___IM_NSTableColumn_resizingMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSTableColumn*)_self resizingMask];
    return (U32)_result;
}

// method '-[NSTableColumn setDataCell:]'
void env___IM_NSTableColumn_setDataCell_C(void *_instance, U32 _self, U32 cellPointer) {
    id _t1 = (id)cellPointer;
    [(NSTableColumn*)_self setDataCell:_t1];
}

// method '-[NSTableColumn setEditable:]'
void env___IM_NSTableColumn_setEditable_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableColumn*)_self setEditable:flag];
}

// method '-[NSTableColumn setHeaderCell:]'
void env___IM_NSTableColumn_setHeaderCell_C(void *_instance, U32 _self, U32 cellPointer) {
    id _t1 = (id)cellPointer;
    [(NSTableColumn*)_self setHeaderCell:_t1];
}

// method '-[NSTableColumn setIdentifier:]'
void env___IM_NSTableColumn_setIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    [(NSTableColumn*)_self setIdentifier:_t1];
}

// method '-[NSTableColumn setMaxWidth:]'
void env___IM_NSTableColumn_setMaxWidth_C(void *_instance, U32 _self, F32 maxWidth) {
    [(NSTableColumn*)_self setMaxWidth:maxWidth];
}

// method '-[NSTableColumn setMinWidth:]'
void env___IM_NSTableColumn_setMinWidth_C(void *_instance, U32 _self, F32 minWidth) {
    [(NSTableColumn*)_self setMinWidth:minWidth];
}

// method '-[NSTableColumn setResizable:]'
void env___IM_NSTableColumn_setResizable_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableColumn*)_self setResizable:flag];
}

// method '-[NSTableColumn setResizingMask:]'
void env___IM_NSTableColumn_setResizingMask_C(void *_instance, U32 _self, U32 resizingMask) {
    [(NSTableColumn*)_self setResizingMask:resizingMask];
}

// method '-[NSTableColumn setSortDescriptorPrototype:]'
void env___IM_NSTableColumn_setSortDescriptorPrototype_C(void *_instance, U32 _self, U32 sortDescriptorPointer) {
    id _t1 = (id)sortDescriptorPointer;
    [(NSTableColumn*)_self setSortDescriptorPrototype:_t1];
}

// method '-[NSTableColumn setTableView:]'
void env___IM_NSTableColumn_setTableView_C(void *_instance, U32 _self, U32 tableViewPointer) {
    id _t1 = (id)tableViewPointer;
    [(NSTableColumn*)_self setTableView:_t1];
}

// method '-[NSTableColumn setWidth:]'
void env___IM_NSTableColumn_setWidth_C(void *_instance, U32 _self, F32 width) {
    [(NSTableColumn*)_self setWidth:width];
}

// method '-[NSTableColumn sizeToFit]'
void env___IM_NSTableColumn_sizeToFit(void *_instance, U32 _self) {
    [(NSTableColumn*)_self sizeToFit];
}

// method '-[NSTableColumn sortDescriptorPrototype]'
U32 env___IM_NSTableColumn_sortDescriptorPrototype(void *_instance, U32 _self) {
    id _result = (id)[(NSTableColumn*)_self sortDescriptorPrototype];
    return (U32)_result;
}

// method '-[NSTableColumn tableView]'
U32 env___IM_NSTableColumn_tableView(void *_instance, U32 _self) {
    id _result = (id)[(NSTableColumn*)_self tableView];
    return (U32)_result;
}

// method '-[NSTableColumn width]'
F32 env___IM_NSTableColumn_width(void *_instance, U32 _self) {
    float _result = (float)[(NSTableColumn*)_self width];
    return (F32)_result;
}

// method '-[NSTableHeaderCell drawSortIndicatorWithFrame:inView:ascending:priority:]'
void env___IM_NSTableHeaderCell_drawSortIndicatorWithFrame_CinView_Cascending_Cpriority_C(void *_instance, U32 _self, U32 cellFrameIndirect, U32 controlViewPointer, U32 ascending, U32 priority) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cellFrameIndirect);
    id _t2 = (id)controlViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTableHeaderCell*)_self drawSortIndicatorWithFrame:_t1 inView:_t2 ascending:ascending priority:priority];
}

// method '-[NSTableHeaderCell sortIndicatorRectForBounds:]'
void env___IM_NSTableHeaderCell_sortIndicatorRectForBounds_C(void *_instance, U32 _resultIndirect, U32 _self, U32 theRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + theRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSTableHeaderCell*)_self sortIndicatorRectForBounds:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableHeaderView columnAtPoint:]'
U32 env___IM_NSTableHeaderView_columnAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    int _result = (int)[(NSTableHeaderView*)_self columnAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSTableHeaderView draggedColumn]'
U32 env___IM_NSTableHeaderView_draggedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSTableHeaderView*)_self draggedColumn];
    return (U32)_result;
}

// method '-[NSTableHeaderView draggedDistance]'
F32 env___IM_NSTableHeaderView_draggedDistance(void *_instance, U32 _self) {
    float _result = (float)[(NSTableHeaderView*)_self draggedDistance];
    return (F32)_result;
}

// method '-[NSTableHeaderView headerRectOfColumn:]'
void env___IM_NSTableHeaderView_headerRectOfColumn_C(void *_instance, U32 _resultIndirect, U32 _self, U32 column) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSTableHeaderView*)_self headerRectOfColumn:column];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableHeaderView resizedColumn]'
U32 env___IM_NSTableHeaderView_resizedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSTableHeaderView*)_self resizedColumn];
    return (U32)_result;
}

// method '-[NSTableHeaderView setTableView:]'
void env___IM_NSTableHeaderView_setTableView_C(void *_instance, U32 _self, U32 tableViewPointer) {
    id _t1 = (id)tableViewPointer;
    [(NSTableHeaderView*)_self setTableView:_t1];
}

// method '-[NSTableHeaderView tableView]'
U32 env___IM_NSTableHeaderView_tableView(void *_instance, U32 _self) {
    id _result = (id)[(NSTableHeaderView*)_self tableView];
    return (U32)_result;
}

// method '-[NSTableView addTableColumn:]'
void env___IM_NSTableView_addTableColumn_C(void *_instance, U32 _self, U32 columnPointer) {
    id _t1 = (id)columnPointer;
    [(NSTableView*)_self addTableColumn:_t1];
}

// method '-[NSTableView allowsColumnReordering]'
U32 env___IM_NSTableView_allowsColumnReordering(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self allowsColumnReordering];
    return (U32)_result;
}

// method '-[NSTableView allowsColumnResizing]'
U32 env___IM_NSTableView_allowsColumnResizing(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self allowsColumnResizing];
    return (U32)_result;
}

// method '-[NSTableView allowsColumnSelection]'
U32 env___IM_NSTableView_allowsColumnSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self allowsColumnSelection];
    return (U32)_result;
}

// method '-[NSTableView allowsEmptySelection]'
U32 env___IM_NSTableView_allowsEmptySelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self allowsEmptySelection];
    return (U32)_result;
}

// method '-[NSTableView allowsMultipleSelection]'
U32 env___IM_NSTableView_allowsMultipleSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self allowsMultipleSelection];
    return (U32)_result;
}

// method '-[NSTableView autoresizesAllColumnsToFit]'
U32 env___IM_NSTableView_autoresizesAllColumnsToFit(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self autoresizesAllColumnsToFit];
    return (U32)_result;
}

// method '-[NSTableView autosaveName]'
U32 env___IM_NSTableView_autosaveName(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self autosaveName];
    return (U32)_result;
}

// method '-[NSTableView autosaveTableColumns]'
U32 env___IM_NSTableView_autosaveTableColumns(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self autosaveTableColumns];
    return (U32)_result;
}

// method '-[NSTableView backgroundColor]'
U32 env___IM_NSTableView_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSTableView canDragRowsWithIndexes:atPoint:]'
U32 env___IM_NSTableView_canDragRowsWithIndexes_CatPoint_C(void *_instance, U32 _self, U32 rowIndexesPointer, U32 mouseDownPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)rowIndexesPointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + mouseDownPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    BOOL _result = (BOOL)[(NSTableView*)_self canDragRowsWithIndexes:_t1 atPoint:_t2];
    return (U32)_result;
}

// method '-[NSTableView clickedColumn]'
U32 env___IM_NSTableView_clickedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self clickedColumn];
    return (U32)_result;
}

// method '-[NSTableView clickedRow]'
U32 env___IM_NSTableView_clickedRow(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self clickedRow];
    return (U32)_result;
}

// method '-[NSTableView columnAtPoint:]'
U32 env___IM_NSTableView_columnAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    int _result = (int)[(NSTableView*)_self columnAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSTableView columnAutoresizingStyle]'
U32 env___IM_NSTableView_columnAutoresizingStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self columnAutoresizingStyle];
    return (U32)_result;
}

// method '-[NSTableView columnWithIdentifier:]'
U32 env___IM_NSTableView_columnWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    int _result = (int)[(NSTableView*)_self columnWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSTableView columnsInRect:]'
void env___IM_NSTableView_columnsInRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRange _result = (NSRange)[(NSTableView*)_self columnsInRect:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableView cornerView]'
U32 env___IM_NSTableView_cornerView(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self cornerView];
    return (U32)_result;
}

// method '-[NSTableView dataSource]'
U32 env___IM_NSTableView_dataSource(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self dataSource];
    return (U32)_result;
}

// method '-[NSTableView delegate]'
U32 env___IM_NSTableView_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self delegate];
    return (U32)_result;
}

// method '-[NSTableView deselectAll:]'
void env___IM_NSTableView_deselectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTableView*)_self deselectAll:_t1];
}

// method '-[NSTableView deselectColumn:]'
void env___IM_NSTableView_deselectColumn_C(void *_instance, U32 _self, U32 column) {
    [(NSTableView*)_self deselectColumn:column];
}

// method '-[NSTableView deselectRow:]'
void env___IM_NSTableView_deselectRow_C(void *_instance, U32 _self, U32 row) {
    [(NSTableView*)_self deselectRow:row];
}

// method '-[NSTableView doubleAction]'
U32 env___IM_NSTableView_doubleAction(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSTableView*)_self doubleAction];
    return (U32)_result;
}

// method '-[NSTableView dragImageForRows:event:dragImageOffset:]'
U32 env___IM_NSTableView_dragImageForRows_Cevent_CdragImageOffset_C(void *_instance, U32 _self, U32 dragRowsPointer, U32 dragEventPointer, U32 dragImageOffsetPointer) {
    id _t1 = (id)dragRowsPointer;
    id _t2 = (id)dragEventPointer;
    NSPointPointer _t3 = (NSPointPointer)dragImageOffsetPointer;
    id _result = (id)[(NSTableView*)_self dragImageForRows:_t1 event:_t2 dragImageOffset:_t3];
    return (U32)_result;
}

// method '-[NSTableView dragImageForRowsWithIndexes:tableColumns:event:offset:]'
U32 env___IM_NSTableView_dragImageForRowsWithIndexes_CtableColumns_Cevent_Coffset_C(void *_instance, U32 _self, U32 dragRowsPointer, U32 tableColumnsPointer, U32 dragEventPointer, U32 dragImageOffsetPointer) {
    id _t1 = (id)dragRowsPointer;
    id _t2 = (id)tableColumnsPointer;
    id _t3 = (id)dragEventPointer;
    NSPointPointer _t4 = (NSPointPointer)dragImageOffsetPointer;
    id _result = (id)[(NSTableView*)_self dragImageForRowsWithIndexes:_t1 tableColumns:_t2 event:_t3 offset:_t4];
    return (U32)_result;
}

// method '-[NSTableView drawBackgroundInClipRect:]'
void env___IM_NSTableView_drawBackgroundInClipRect_C(void *_instance, U32 _self, U32 clipRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + clipRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTableView*)_self drawBackgroundInClipRect:_t1];
}

// method '-[NSTableView drawGridInClipRect:]'
void env___IM_NSTableView_drawGridInClipRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTableView*)_self drawGridInClipRect:_t1];
}

// method '-[NSTableView drawRow:clipRect:]'
void env___IM_NSTableView_drawRow_CclipRect_C(void *_instance, U32 _self, U32 row, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTableView*)_self drawRow:row clipRect:_t1];
}

// method '-[NSTableView drawsGrid]'
U32 env___IM_NSTableView_drawsGrid(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self drawsGrid];
    return (U32)_result;
}

// method '-[NSTableView editColumn:row:withEvent:select:]'
void env___IM_NSTableView_editColumn_Crow_CwithEvent_Cselect_C(void *_instance, U32 _self, U32 column, U32 row, U32 theEventPointer, U32 select) {
    id _t1 = (id)theEventPointer;
    [(NSTableView*)_self editColumn:column row:row withEvent:_t1 select:select];
}

// method '-[NSTableView editedColumn]'
U32 env___IM_NSTableView_editedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self editedColumn];
    return (U32)_result;
}

// method '-[NSTableView editedRow]'
U32 env___IM_NSTableView_editedRow(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self editedRow];
    return (U32)_result;
}

// method '-[NSTableView frameOfCellAtColumn:row:]'
void env___IM_NSTableView_frameOfCellAtColumn_Crow_C(void *_instance, U32 _resultIndirect, U32 _self, U32 column, U32 row) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSTableView*)_self frameOfCellAtColumn:column row:row];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableView gridColor]'
U32 env___IM_NSTableView_gridColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self gridColor];
    return (U32)_result;
}

// method '-[NSTableView gridStyleMask]'
U32 env___IM_NSTableView_gridStyleMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSTableView*)_self gridStyleMask];
    return (U32)_result;
}

// method '-[NSTableView headerView]'
U32 env___IM_NSTableView_headerView(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self headerView];
    return (U32)_result;
}

// method '-[NSTableView highlightSelectionInClipRect:]'
void env___IM_NSTableView_highlightSelectionInClipRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTableView*)_self highlightSelectionInClipRect:_t1];
}

// method '-[NSTableView highlightedTableColumn]'
U32 env___IM_NSTableView_highlightedTableColumn(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self highlightedTableColumn];
    return (U32)_result;
}

// method '-[NSTableView indicatorImageInTableColumn:]'
U32 env___IM_NSTableView_indicatorImageInTableColumn_C(void *_instance, U32 _self, U32 tcPointer) {
    id _t1 = (id)tcPointer;
    id _result = (id)[(NSTableView*)_self indicatorImageInTableColumn:_t1];
    return (U32)_result;
}

// method '-[NSTableView intercellSpacing]'
void env___IM_NSTableView_intercellSpacing(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSTableView*)_self intercellSpacing];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableView isColumnSelected:]'
U32 env___IM_NSTableView_isColumnSelected_C(void *_instance, U32 _self, U32 row) {
    BOOL _result = (BOOL)[(NSTableView*)_self isColumnSelected:row];
    return (U32)_result;
}

// method '-[NSTableView isRowSelected:]'
U32 env___IM_NSTableView_isRowSelected_C(void *_instance, U32 _self, U32 row) {
    BOOL _result = (BOOL)[(NSTableView*)_self isRowSelected:row];
    return (U32)_result;
}

// method '-[NSTableView moveColumn:toColumn:]'
void env___IM_NSTableView_moveColumn_CtoColumn_C(void *_instance, U32 _self, U32 column, U32 newIndex) {
    [(NSTableView*)_self moveColumn:column toColumn:newIndex];
}

// method '-[NSTableView noteHeightOfRowsWithIndexesChanged:]'
void env___IM_NSTableView_noteHeightOfRowsWithIndexesChanged_C(void *_instance, U32 _self, U32 indexSetPointer) {
    id _t1 = (id)indexSetPointer;
    [(NSTableView*)_self noteHeightOfRowsWithIndexesChanged:_t1];
}

// method '-[NSTableView noteNumberOfRowsChanged]'
void env___IM_NSTableView_noteNumberOfRowsChanged(void *_instance, U32 _self) {
    [(NSTableView*)_self noteNumberOfRowsChanged];
}

// method '-[NSTableView numberOfColumns]'
U32 env___IM_NSTableView_numberOfColumns(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self numberOfColumns];
    return (U32)_result;
}

// method '-[NSTableView numberOfRows]'
U32 env___IM_NSTableView_numberOfRows(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self numberOfRows];
    return (U32)_result;
}

// method '-[NSTableView numberOfSelectedColumns]'
U32 env___IM_NSTableView_numberOfSelectedColumns(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self numberOfSelectedColumns];
    return (U32)_result;
}

// method '-[NSTableView numberOfSelectedRows]'
U32 env___IM_NSTableView_numberOfSelectedRows(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self numberOfSelectedRows];
    return (U32)_result;
}

// method '-[NSTableView rectOfColumn:]'
void env___IM_NSTableView_rectOfColumn_C(void *_instance, U32 _resultIndirect, U32 _self, U32 column) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSTableView*)_self rectOfColumn:column];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableView rectOfRow:]'
void env___IM_NSTableView_rectOfRow_C(void *_instance, U32 _resultIndirect, U32 _self, U32 row) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSTableView*)_self rectOfRow:row];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableView reloadData]'
void env___IM_NSTableView_reloadData(void *_instance, U32 _self) {
    [(NSTableView*)_self reloadData];
}

// method '-[NSTableView removeTableColumn:]'
void env___IM_NSTableView_removeTableColumn_C(void *_instance, U32 _self, U32 columnPointer) {
    id _t1 = (id)columnPointer;
    [(NSTableView*)_self removeTableColumn:_t1];
}

// method '-[NSTableView rowAtPoint:]'
U32 env___IM_NSTableView_rowAtPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    int _result = (int)[(NSTableView*)_self rowAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSTableView rowHeight]'
F32 env___IM_NSTableView_rowHeight(void *_instance, U32 _self) {
    float _result = (float)[(NSTableView*)_self rowHeight];
    return (F32)_result;
}

// method '-[NSTableView rowsInRect:]'
void env___IM_NSTableView_rowsInRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRange _result = (NSRange)[(NSTableView*)_self rowsInRect:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTableView scrollColumnToVisible:]'
void env___IM_NSTableView_scrollColumnToVisible_C(void *_instance, U32 _self, U32 column) {
    [(NSTableView*)_self scrollColumnToVisible:column];
}

// method '-[NSTableView scrollRowToVisible:]'
void env___IM_NSTableView_scrollRowToVisible_C(void *_instance, U32 _self, U32 row) {
    [(NSTableView*)_self scrollRowToVisible:row];
}

// method '-[NSTableView selectAll:]'
void env___IM_NSTableView_selectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTableView*)_self selectAll:_t1];
}

// method '-[NSTableView selectColumn:byExtendingSelection:]'
void env___IM_NSTableView_selectColumn_CbyExtendingSelection_C(void *_instance, U32 _self, U32 column, U32 extend) {
    [(NSTableView*)_self selectColumn:column byExtendingSelection:extend];
}

// method '-[NSTableView selectColumnIndexes:byExtendingSelection:]'
void env___IM_NSTableView_selectColumnIndexes_CbyExtendingSelection_C(void *_instance, U32 _self, U32 indexesPointer, U32 extend) {
    id _t1 = (id)indexesPointer;
    [(NSTableView*)_self selectColumnIndexes:_t1 byExtendingSelection:extend];
}

// method '-[NSTableView selectRow:byExtendingSelection:]'
void env___IM_NSTableView_selectRow_CbyExtendingSelection_C(void *_instance, U32 _self, U32 row, U32 extend) {
    [(NSTableView*)_self selectRow:row byExtendingSelection:extend];
}

// method '-[NSTableView selectRowIndexes:byExtendingSelection:]'
void env___IM_NSTableView_selectRowIndexes_CbyExtendingSelection_C(void *_instance, U32 _self, U32 indexesPointer, U32 extend) {
    id _t1 = (id)indexesPointer;
    [(NSTableView*)_self selectRowIndexes:_t1 byExtendingSelection:extend];
}

// method '-[NSTableView selectedColumn]'
U32 env___IM_NSTableView_selectedColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self selectedColumn];
    return (U32)_result;
}

// method '-[NSTableView selectedColumnEnumerator]'
U32 env___IM_NSTableView_selectedColumnEnumerator(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self selectedColumnEnumerator];
    return (U32)_result;
}

// method '-[NSTableView selectedColumnIndexes]'
U32 env___IM_NSTableView_selectedColumnIndexes(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self selectedColumnIndexes];
    return (U32)_result;
}

// method '-[NSTableView selectedRow]'
U32 env___IM_NSTableView_selectedRow(void *_instance, U32 _self) {
    int _result = (int)[(NSTableView*)_self selectedRow];
    return (U32)_result;
}

// method '-[NSTableView selectedRowEnumerator]'
U32 env___IM_NSTableView_selectedRowEnumerator(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self selectedRowEnumerator];
    return (U32)_result;
}

// method '-[NSTableView selectedRowIndexes]'
U32 env___IM_NSTableView_selectedRowIndexes(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self selectedRowIndexes];
    return (U32)_result;
}

// method '-[NSTableView setAllowsColumnReordering:]'
void env___IM_NSTableView_setAllowsColumnReordering_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setAllowsColumnReordering:flag];
}

// method '-[NSTableView setAllowsColumnResizing:]'
void env___IM_NSTableView_setAllowsColumnResizing_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setAllowsColumnResizing:flag];
}

// method '-[NSTableView setAllowsColumnSelection:]'
void env___IM_NSTableView_setAllowsColumnSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setAllowsColumnSelection:flag];
}

// method '-[NSTableView setAllowsEmptySelection:]'
void env___IM_NSTableView_setAllowsEmptySelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setAllowsEmptySelection:flag];
}

// method '-[NSTableView setAllowsMultipleSelection:]'
void env___IM_NSTableView_setAllowsMultipleSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setAllowsMultipleSelection:flag];
}

// method '-[NSTableView setAutoresizesAllColumnsToFit:]'
void env___IM_NSTableView_setAutoresizesAllColumnsToFit_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setAutoresizesAllColumnsToFit:flag];
}

// method '-[NSTableView setAutosaveName:]'
void env___IM_NSTableView_setAutosaveName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(NSTableView*)_self setAutosaveName:_t1];
}

// method '-[NSTableView setAutosaveTableColumns:]'
void env___IM_NSTableView_setAutosaveTableColumns_C(void *_instance, U32 _self, U32 save) {
    [(NSTableView*)_self setAutosaveTableColumns:save];
}

// method '-[NSTableView setBackgroundColor:]'
void env___IM_NSTableView_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTableView*)_self setBackgroundColor:_t1];
}

// method '-[NSTableView setColumnAutoresizingStyle:]'
void env___IM_NSTableView_setColumnAutoresizingStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSTableView*)_self setColumnAutoresizingStyle:style];
}

// method '-[NSTableView setCornerView:]'
void env___IM_NSTableView_setCornerView_C(void *_instance, U32 _self, U32 cornerViewPointer) {
    id _t1 = (id)cornerViewPointer;
    [(NSTableView*)_self setCornerView:_t1];
}

// method '-[NSTableView setDataSource:]'
void env___IM_NSTableView_setDataSource_C(void *_instance, U32 _self, U32 aSourcePointer) {
    id _t1 = (id)aSourcePointer;
    [(NSTableView*)_self setDataSource:_t1];
}

// method '-[NSTableView setDelegate:]'
void env___IM_NSTableView_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSTableView*)_self setDelegate:_t1];
}

// method '-[NSTableView setDoubleAction:]'
void env___IM_NSTableView_setDoubleAction_C(void *_instance, U32 _self, U32 aSelectorPointer) {
    SEL _t1 = (SEL)aSelectorPointer;
    [(NSTableView*)_self setDoubleAction:_t1];
}

// method '-[NSTableView setDraggingSourceOperationMask:forLocal:]'
void env___IM_NSTableView_setDraggingSourceOperationMask_CforLocal_C(void *_instance, U32 _self, U32 mask, U32 isLocal) {
    [(NSTableView*)_self setDraggingSourceOperationMask:mask forLocal:isLocal];
}

// method '-[NSTableView setDrawsGrid:]'
void env___IM_NSTableView_setDrawsGrid_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setDrawsGrid:flag];
}

// method '-[NSTableView setDropRow:dropOperation:]'
void env___IM_NSTableView_setDropRow_CdropOperation_C(void *_instance, U32 _self, U32 row, U32 op) {
    [(NSTableView*)_self setDropRow:row dropOperation:op];
}

// method '-[NSTableView setGridColor:]'
void env___IM_NSTableView_setGridColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTableView*)_self setGridColor:_t1];
}

// method '-[NSTableView setGridStyleMask:]'
void env___IM_NSTableView_setGridStyleMask_C(void *_instance, U32 _self, U32 gridType) {
    [(NSTableView*)_self setGridStyleMask:gridType];
}

// method '-[NSTableView setHeaderView:]'
void env___IM_NSTableView_setHeaderView_C(void *_instance, U32 _self, U32 headerViewPointer) {
    id _t1 = (id)headerViewPointer;
    [(NSTableView*)_self setHeaderView:_t1];
}

// method '-[NSTableView setHighlightedTableColumn:]'
void env___IM_NSTableView_setHighlightedTableColumn_C(void *_instance, U32 _self, U32 tcPointer) {
    id _t1 = (id)tcPointer;
    [(NSTableView*)_self setHighlightedTableColumn:_t1];
}

// method '-[NSTableView setIndicatorImage:inTableColumn:]'
void env___IM_NSTableView_setIndicatorImage_CinTableColumn_C(void *_instance, U32 _self, U32 anImagePointer, U32 tcPointer) {
    id _t1 = (id)anImagePointer;
    id _t2 = (id)tcPointer;
    [(NSTableView*)_self setIndicatorImage:_t1 inTableColumn:_t2];
}

// method '-[NSTableView setIntercellSpacing:]'
void env___IM_NSTableView_setIntercellSpacing_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSTableView*)_self setIntercellSpacing:_t1];
}

// method '-[NSTableView setRowHeight:]'
void env___IM_NSTableView_setRowHeight_C(void *_instance, U32 _self, F32 rowHeight) {
    [(NSTableView*)_self setRowHeight:rowHeight];
}

// method '-[NSTableView setSortDescriptors:]'
void env___IM_NSTableView_setSortDescriptors_C(void *_instance, U32 _self, U32 arrayPointer) {
    id _t1 = (id)arrayPointer;
    [(NSTableView*)_self setSortDescriptors:_t1];
}

// method '-[NSTableView setUsesAlternatingRowBackgroundColors:]'
void env___IM_NSTableView_setUsesAlternatingRowBackgroundColors_C(void *_instance, U32 _self, U32 useAlternatingRowColors) {
    [(NSTableView*)_self setUsesAlternatingRowBackgroundColors:useAlternatingRowColors];
}

// method '-[NSTableView setVerticalMotionCanBeginDrag:]'
void env___IM_NSTableView_setVerticalMotionCanBeginDrag_C(void *_instance, U32 _self, U32 flag) {
    [(NSTableView*)_self setVerticalMotionCanBeginDrag:flag];
}

// method '-[NSTableView sizeLastColumnToFit]'
void env___IM_NSTableView_sizeLastColumnToFit(void *_instance, U32 _self) {
    [(NSTableView*)_self sizeLastColumnToFit];
}

// method '-[NSTableView sizeToFit]'
void env___IM_NSTableView_sizeToFit(void *_instance, U32 _self) {
    [(NSTableView*)_self sizeToFit];
}

// method '-[NSTableView sortDescriptors]'
U32 env___IM_NSTableView_sortDescriptors(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self sortDescriptors];
    return (U32)_result;
}

// method '-[NSTableView tableColumnWithIdentifier:]'
U32 env___IM_NSTableView_tableColumnWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    id _result = (id)[(NSTableView*)_self tableColumnWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSTableView tableColumns]'
U32 env___IM_NSTableView_tableColumns(void *_instance, U32 _self) {
    id _result = (id)[(NSTableView*)_self tableColumns];
    return (U32)_result;
}

// method '-[NSTableView textDidBeginEditing:]'
void env___IM_NSTableView_textDidBeginEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSTableView*)_self textDidBeginEditing:_t1];
}

// method '-[NSTableView textDidChange:]'
void env___IM_NSTableView_textDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSTableView*)_self textDidChange:_t1];
}

// method '-[NSTableView textDidEndEditing:]'
void env___IM_NSTableView_textDidEndEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSTableView*)_self textDidEndEditing:_t1];
}

// method '-[NSTableView textShouldBeginEditing:]'
U32 env___IM_NSTableView_textShouldBeginEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(NSTableView*)_self textShouldBeginEditing:_t1];
    return (U32)_result;
}

// method '-[NSTableView textShouldEndEditing:]'
U32 env___IM_NSTableView_textShouldEndEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(NSTableView*)_self textShouldEndEditing:_t1];
    return (U32)_result;
}

// method '-[NSTableView tile]'
void env___IM_NSTableView_tile(void *_instance, U32 _self) {
    [(NSTableView*)_self tile];
}

// method '-[NSTableView usesAlternatingRowBackgroundColors]'
U32 env___IM_NSTableView_usesAlternatingRowBackgroundColors(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self usesAlternatingRowBackgroundColors];
    return (U32)_result;
}

// method '-[NSTableView verticalMotionCanBeginDrag]'
U32 env___IM_NSTableView_verticalMotionCanBeginDrag(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTableView*)_self verticalMotionCanBeginDrag];
    return (U32)_result;
}

// method '-[NSText RTFDFromRange:]'
U32 env___IM_NSText_RTFDFromRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSText*)_self RTFDFromRange:_t1];
    return (U32)_result;
}

// method '-[NSText RTFFromRange:]'
U32 env___IM_NSText_RTFFromRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSText*)_self RTFFromRange:_t1];
    return (U32)_result;
}

// method '-[NSText alignCenter:]'
void env___IM_NSText_alignCenter_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self alignCenter:_t1];
}

// method '-[NSText alignLeft:]'
void env___IM_NSText_alignLeft_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self alignLeft:_t1];
}

// method '-[NSText alignRight:]'
void env___IM_NSText_alignRight_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self alignRight:_t1];
}

// method '-[NSText alignment]'
U32 env___IM_NSText_alignment(void *_instance, U32 _self) {
    int _result = (int)[(NSText*)_self alignment];
    return (U32)_result;
}

// method '-[NSText backgroundColor]'
U32 env___IM_NSText_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSText*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSText baseWritingDirection]'
U32 env___IM_NSText_baseWritingDirection(void *_instance, U32 _self) {
    int _result = (int)[(NSText*)_self baseWritingDirection];
    return (U32)_result;
}

// method '-[NSText changeFont:]'
void env___IM_NSText_changeFont_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self changeFont:_t1];
}

// method '-[NSText checkSpelling:]'
void env___IM_NSText_checkSpelling_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self checkSpelling:_t1];
}

// method '-[NSText copy:]'
void env___IM_NSText_copy_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self copy:_t1];
}

// method '-[NSText copyFont:]'
void env___IM_NSText_copyFont_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self copyFont:_t1];
}

// method '-[NSText copyRuler:]'
void env___IM_NSText_copyRuler_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self copyRuler:_t1];
}

// method '-[NSText cut:]'
void env___IM_NSText_cut_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self cut:_t1];
}

// method '-[NSText delegate]'
U32 env___IM_NSText_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSText*)_self delegate];
    return (U32)_result;
}

// method '-[NSText delete:]'
void env___IM_NSText_delete_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self delete:_t1];
}

// method '-[NSText drawsBackground]'
U32 env___IM_NSText_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSText font]'
U32 env___IM_NSText_font(void *_instance, U32 _self) {
    id _result = (id)[(NSText*)_self font];
    return (U32)_result;
}

// method '-[NSText importsGraphics]'
U32 env___IM_NSText_importsGraphics(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self importsGraphics];
    return (U32)_result;
}

// method '-[NSText isEditable]'
U32 env___IM_NSText_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isEditable];
    return (U32)_result;
}

// method '-[NSText isFieldEditor]'
U32 env___IM_NSText_isFieldEditor(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isFieldEditor];
    return (U32)_result;
}

// method '-[NSText isHorizontallyResizable]'
U32 env___IM_NSText_isHorizontallyResizable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isHorizontallyResizable];
    return (U32)_result;
}

// method '-[NSText isRichText]'
U32 env___IM_NSText_isRichText(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isRichText];
    return (U32)_result;
}

// method '-[NSText isRulerVisible]'
U32 env___IM_NSText_isRulerVisible(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isRulerVisible];
    return (U32)_result;
}

// method '-[NSText isSelectable]'
U32 env___IM_NSText_isSelectable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isSelectable];
    return (U32)_result;
}

// method '-[NSText isVerticallyResizable]'
U32 env___IM_NSText_isVerticallyResizable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self isVerticallyResizable];
    return (U32)_result;
}

// method '-[NSText maxSize]'
void env___IM_NSText_maxSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSText*)_self maxSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSText minSize]'
void env___IM_NSText_minSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSText*)_self minSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSText paste:]'
void env___IM_NSText_paste_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self paste:_t1];
}

// method '-[NSText pasteFont:]'
void env___IM_NSText_pasteFont_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self pasteFont:_t1];
}

// method '-[NSText pasteRuler:]'
void env___IM_NSText_pasteRuler_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self pasteRuler:_t1];
}

// method '-[NSText readRTFDFromFile:]'
U32 env___IM_NSText_readRTFDFromFile_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSText*)_self readRTFDFromFile:_t1];
    return (U32)_result;
}

// method '-[NSText replaceCharactersInRange:withRTF:]'
void env___IM_NSText_replaceCharactersInRange_CwithRTF_C(void *_instance, U32 _self, U32 rangeIndirect, U32 rtfDataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)rtfDataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSText*)_self replaceCharactersInRange:_t1 withRTF:_t2];
}

// method '-[NSText replaceCharactersInRange:withRTFD:]'
void env___IM_NSText_replaceCharactersInRange_CwithRTFD_C(void *_instance, U32 _self, U32 rangeIndirect, U32 rtfdDataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)rtfdDataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSText*)_self replaceCharactersInRange:_t1 withRTFD:_t2];
}

// method '-[NSText replaceCharactersInRange:withString:]'
void env___IM_NSText_replaceCharactersInRange_CwithString_C(void *_instance, U32 _self, U32 rangeIndirect, U32 aStringPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    id _t2 = (id)aStringPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSText*)_self replaceCharactersInRange:_t1 withString:_t2];
}

// method '-[NSText scrollRangeToVisible:]'
void env___IM_NSText_scrollRangeToVisible_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSText*)_self scrollRangeToVisible:_t1];
}

// method '-[NSText selectAll:]'
void env___IM_NSText_selectAll_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self selectAll:_t1];
}

// method '-[NSText selectedRange]'
void env___IM_NSText_selectedRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSText*)_self selectedRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSText setAlignment:]'
void env___IM_NSText_setAlignment_C(void *_instance, U32 _self, U32 mode) {
    [(NSText*)_self setAlignment:mode];
}

// method '-[NSText setBackgroundColor:]'
void env___IM_NSText_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSText*)_self setBackgroundColor:_t1];
}

// method '-[NSText setBaseWritingDirection:]'
void env___IM_NSText_setBaseWritingDirection_C(void *_instance, U32 _self, U32 writingDirection) {
    [(NSText*)_self setBaseWritingDirection:writingDirection];
}

// method '-[NSText setDelegate:]'
void env___IM_NSText_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSText*)_self setDelegate:_t1];
}

// method '-[NSText setDrawsBackground:]'
void env___IM_NSText_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setDrawsBackground:flag];
}

// method '-[NSText setEditable:]'
void env___IM_NSText_setEditable_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setEditable:flag];
}

// method '-[NSText setFieldEditor:]'
void env___IM_NSText_setFieldEditor_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setFieldEditor:flag];
}

// method '-[NSText setFont:]'
void env___IM_NSText_setFont_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSText*)_self setFont:_t1];
}

// method '-[NSText setFont:range:]'
void env___IM_NSText_setFont_Crange_C(void *_instance, U32 _self, U32 fontPointer, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)fontPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSText*)_self setFont:_t1 range:_t2];
}

// method '-[NSText setHorizontallyResizable:]'
void env___IM_NSText_setHorizontallyResizable_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setHorizontallyResizable:flag];
}

// method '-[NSText setImportsGraphics:]'
void env___IM_NSText_setImportsGraphics_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setImportsGraphics:flag];
}

// method '-[NSText setMaxSize:]'
void env___IM_NSText_setMaxSize_C(void *_instance, U32 _self, U32 newMaxSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + newMaxSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSText*)_self setMaxSize:_t1];
}

// method '-[NSText setMinSize:]'
void env___IM_NSText_setMinSize_C(void *_instance, U32 _self, U32 newMinSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + newMinSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSText*)_self setMinSize:_t1];
}

// method '-[NSText setRichText:]'
void env___IM_NSText_setRichText_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setRichText:flag];
}

// method '-[NSText setSelectable:]'
void env___IM_NSText_setSelectable_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setSelectable:flag];
}

// method '-[NSText setSelectedRange:]'
void env___IM_NSText_setSelectedRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSText*)_self setSelectedRange:_t1];
}

// method '-[NSText setString:]'
void env___IM_NSText_setString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSText*)_self setString:_t1];
}

// method '-[NSText setTextColor:]'
void env___IM_NSText_setTextColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSText*)_self setTextColor:_t1];
}

// method '-[NSText setTextColor:range:]'
void env___IM_NSText_setTextColor_Crange_C(void *_instance, U32 _self, U32 colorPointer, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)colorPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSText*)_self setTextColor:_t1 range:_t2];
}

// method '-[NSText setUsesFontPanel:]'
void env___IM_NSText_setUsesFontPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setUsesFontPanel:flag];
}

// method '-[NSText setVerticallyResizable:]'
void env___IM_NSText_setVerticallyResizable_C(void *_instance, U32 _self, U32 flag) {
    [(NSText*)_self setVerticallyResizable:flag];
}

// method '-[NSText showGuessPanel:]'
void env___IM_NSText_showGuessPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self showGuessPanel:_t1];
}

// method '-[NSText sizeToFit]'
void env___IM_NSText_sizeToFit(void *_instance, U32 _self) {
    [(NSText*)_self sizeToFit];
}

// method '-[NSText string]'
U32 env___IM_NSText_string(void *_instance, U32 _self) {
    id _result = (id)[(NSText*)_self string];
    return (U32)_result;
}

// method '-[NSText subscript:]'
void env___IM_NSText_subscript_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self subscript:_t1];
}

// method '-[NSText superscript:]'
void env___IM_NSText_superscript_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self superscript:_t1];
}

// method '-[NSText textColor]'
U32 env___IM_NSText_textColor(void *_instance, U32 _self) {
    id _result = (id)[(NSText*)_self textColor];
    return (U32)_result;
}

// method '-[NSText toggleRuler:]'
void env___IM_NSText_toggleRuler_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self toggleRuler:_t1];
}

// method '-[NSText underline:]'
void env___IM_NSText_underline_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self underline:_t1];
}

// method '-[NSText unscript:]'
void env___IM_NSText_unscript_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSText*)_self unscript:_t1];
}

// method '-[NSText usesFontPanel]'
U32 env___IM_NSText_usesFontPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSText*)_self usesFontPanel];
    return (U32)_result;
}

// method '-[NSText writeRTFDToFile:atomically:]'
U32 env___IM_NSText_writeRTFDToFile_Catomically_C(void *_instance, U32 _self, U32 pathPointer, U32 flag) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSText*)_self writeRTFDToFile:_t1 atomically:flag];
    return (U32)_result;
}

// method '-[NSTextAttachment attachmentCell]'
U32 env___IM_NSTextAttachment_attachmentCell(void *_instance, U32 _self) {
    id _result = (id)[(NSTextAttachment*)_self attachmentCell];
    return (U32)_result;
}

// method '-[NSTextAttachment fileWrapper]'
U32 env___IM_NSTextAttachment_fileWrapper(void *_instance, U32 _self) {
    id _result = (id)[(NSTextAttachment*)_self fileWrapper];
    return (U32)_result;
}

// method '-[NSTextAttachment initWithFileWrapper:]'
U32 env___IM_NSTextAttachment_initWithFileWrapper_C(void *_instance, U32 _self, U32 fileWrapperPointer) {
    id _t1 = (id)fileWrapperPointer;
    id _result = (id)[(NSTextAttachment*)_self initWithFileWrapper:_t1];
    return (U32)_result;
}

// method '-[NSTextAttachment setAttachmentCell:]'
void env___IM_NSTextAttachment_setAttachmentCell_C(void *_instance, U32 _self, U32 cellPointer) {
    id _t1 = (id)cellPointer;
    [(NSTextAttachment*)_self setAttachmentCell:_t1];
}

// method '-[NSTextAttachment setFileWrapper:]'
void env___IM_NSTextAttachment_setFileWrapper_C(void *_instance, U32 _self, U32 fileWrapperPointer) {
    id _t1 = (id)fileWrapperPointer;
    [(NSTextAttachment*)_self setFileWrapper:_t1];
}

// method '-[NSTextBlock backgroundColor]'
U32 env___IM_NSTextBlock_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextBlock*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSTextBlock borderColorForEdge:]'
U32 env___IM_NSTextBlock_borderColorForEdge_C(void *_instance, U32 _self, U32 edge) {
    id _result = (id)[(NSTextBlock*)_self borderColorForEdge:edge];
    return (U32)_result;
}

// method '-[NSTextBlock boundsRectForContentRect:inRect:textContainer:characterRange:]'
void env___IM_NSTextBlock_boundsRectForContentRect_CinRect_CtextContainer_CcharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 contentRectIndirect, U32 rectIndirect, U32 textContainerPointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + contentRectIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)textContainerPointer;
    NSRange _t4 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t4.location);
    swap_I(&_t4.length);
    #endif
    NSRect _result = (NSRect)[(NSTextBlock*)_self boundsRectForContentRect:_t1 inRect:_t2 textContainer:_t3 characterRange:_t4];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextBlock contentWidth]'
F32 env___IM_NSTextBlock_contentWidth(void *_instance, U32 _self) {
    float _result = (float)[(NSTextBlock*)_self contentWidth];
    return (F32)_result;
}

// method '-[NSTextBlock contentWidthValueType]'
U32 env___IM_NSTextBlock_contentWidthValueType(void *_instance, U32 _self) {
    int _result = (int)[(NSTextBlock*)_self contentWidthValueType];
    return (U32)_result;
}

// method '-[NSTextBlock drawBackgroundWithFrame:inView:characterRange:layoutManager:]'
void env___IM_NSTextBlock_drawBackgroundWithFrame_CinView_CcharacterRange_ClayoutManager_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 controlViewPointer, U32 charRangeIndirect, U32 layoutManagerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    id _t2 = (id)controlViewPointer;
    NSRange _t3 = *(NSRange*)(_mem->data + charRangeIndirect);
    id _t4 = (id)layoutManagerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    #endif
    [(NSTextBlock*)_self drawBackgroundWithFrame:_t1 inView:_t2 characterRange:_t3 layoutManager:_t4];
}

// method '-[NSTextBlock init]'
U32 env___IM_NSTextBlock_init(void *_instance, U32 _self) {
    id _result = (id)[(NSTextBlock*)_self init];
    return (U32)_result;
}

// method '-[NSTextBlock rectForLayoutAtPoint:inRect:textContainer:characterRange:]'
void env___IM_NSTextBlock_rectForLayoutAtPoint_CinRect_CtextContainer_CcharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 startingPointIndirect, U32 rectIndirect, U32 textContainerPointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + startingPointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)textContainerPointer;
    NSRange _t4 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t4.location);
    swap_I(&_t4.length);
    #endif
    NSRect _result = (NSRect)[(NSTextBlock*)_self rectForLayoutAtPoint:_t1 inRect:_t2 textContainer:_t3 characterRange:_t4];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextBlock setBackgroundColor:]'
void env___IM_NSTextBlock_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextBlock*)_self setBackgroundColor:_t1];
}

// method '-[NSTextBlock setBorderColor:]'
void env___IM_NSTextBlock_setBorderColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextBlock*)_self setBorderColor:_t1];
}

// method '-[NSTextBlock setBorderColor:forEdge:]'
void env___IM_NSTextBlock_setBorderColor_CforEdge_C(void *_instance, U32 _self, U32 colorPointer, U32 edge) {
    id _t1 = (id)colorPointer;
    [(NSTextBlock*)_self setBorderColor:_t1 forEdge:edge];
}

// method '-[NSTextBlock setContentWidth:type:]'
void env___IM_NSTextBlock_setContentWidth_Ctype_C(void *_instance, U32 _self, F32 val, U32 type) {
    [(NSTextBlock*)_self setContentWidth:val type:type];
}

// method '-[NSTextBlock setValue:type:forDimension:]'
void env___IM_NSTextBlock_setValue_Ctype_CforDimension_C(void *_instance, U32 _self, F32 val, U32 type, U32 dimension) {
    [(NSTextBlock*)_self setValue:val type:type forDimension:dimension];
}

// method '-[NSTextBlock setVerticalAlignment:]'
void env___IM_NSTextBlock_setVerticalAlignment_C(void *_instance, U32 _self, U32 alignment) {
    [(NSTextBlock*)_self setVerticalAlignment:alignment];
}

// method '-[NSTextBlock setWidth:type:forLayer:]'
void env___IM_NSTextBlock_setWidth_Ctype_CforLayer_C(void *_instance, U32 _self, F32 val, U32 type, U32 layer) {
    [(NSTextBlock*)_self setWidth:val type:type forLayer:layer];
}

// method '-[NSTextBlock setWidth:type:forLayer:edge:]'
void env___IM_NSTextBlock_setWidth_Ctype_CforLayer_Cedge_C(void *_instance, U32 _self, F32 val, U32 type, U32 layer, U32 edge) {
    [(NSTextBlock*)_self setWidth:val type:type forLayer:layer edge:edge];
}

// method '-[NSTextBlock valueForDimension:]'
F32 env___IM_NSTextBlock_valueForDimension_C(void *_instance, U32 _self, U32 dimension) {
    float _result = (float)[(NSTextBlock*)_self valueForDimension:dimension];
    return (F32)_result;
}

// method '-[NSTextBlock valueTypeForDimension:]'
U32 env___IM_NSTextBlock_valueTypeForDimension_C(void *_instance, U32 _self, U32 dimension) {
    int _result = (int)[(NSTextBlock*)_self valueTypeForDimension:dimension];
    return (U32)_result;
}

// method '-[NSTextBlock verticalAlignment]'
U32 env___IM_NSTextBlock_verticalAlignment(void *_instance, U32 _self) {
    int _result = (int)[(NSTextBlock*)_self verticalAlignment];
    return (U32)_result;
}

// method '-[NSTextBlock widthForLayer:edge:]'
F32 env___IM_NSTextBlock_widthForLayer_Cedge_C(void *_instance, U32 _self, U32 layer, U32 edge) {
    float _result = (float)[(NSTextBlock*)_self widthForLayer:layer edge:edge];
    return (F32)_result;
}

// method '-[NSTextBlock widthValueTypeForLayer:edge:]'
U32 env___IM_NSTextBlock_widthValueTypeForLayer_Cedge_C(void *_instance, U32 _self, U32 layer, U32 edge) {
    int _result = (int)[(NSTextBlock*)_self widthValueTypeForLayer:layer edge:edge];
    return (U32)_result;
}

// method '-[NSTextContainer containerSize]'
void env___IM_NSTextContainer_containerSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSTextContainer*)_self containerSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextContainer containsPoint:]'
U32 env___IM_NSTextContainer_containsPoint_C(void *_instance, U32 _self, U32 pointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + pointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    BOOL _result = (BOOL)[(NSTextContainer*)_self containsPoint:_t1];
    return (U32)_result;
}

// method '-[NSTextContainer heightTracksTextView]'
U32 env___IM_NSTextContainer_heightTracksTextView(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextContainer*)_self heightTracksTextView];
    return (U32)_result;
}

// method '-[NSTextContainer initWithContainerSize:]'
U32 env___IM_NSTextContainer_initWithContainerSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    id _result = (id)[(NSTextContainer*)_self initWithContainerSize:_t1];
    return (U32)_result;
}

// method '-[NSTextContainer isSimpleRectangularTextContainer]'
U32 env___IM_NSTextContainer_isSimpleRectangularTextContainer(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextContainer*)_self isSimpleRectangularTextContainer];
    return (U32)_result;
}

// method '-[NSTextContainer layoutManager]'
U32 env___IM_NSTextContainer_layoutManager(void *_instance, U32 _self) {
    id _result = (id)[(NSTextContainer*)_self layoutManager];
    return (U32)_result;
}

// method '-[NSTextContainer lineFragmentPadding]'
F32 env___IM_NSTextContainer_lineFragmentPadding(void *_instance, U32 _self) {
    float _result = (float)[(NSTextContainer*)_self lineFragmentPadding];
    return (F32)_result;
}

// method '-[NSTextContainer lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:]'
void env___IM_NSTextContainer_lineFragmentRectForProposedRect_CsweepDirection_CmovementDirection_CremainingRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 proposedRectIndirect, U32 sweepDirection, U32 movementDirection, U32 remainingRectPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + proposedRectIndirect);
    NSRectPointer _t2 = (NSRectPointer)remainingRectPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSTextContainer*)_self lineFragmentRectForProposedRect:_t1 sweepDirection:sweepDirection movementDirection:movementDirection remainingRect:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextContainer replaceLayoutManager:]'
void env___IM_NSTextContainer_replaceLayoutManager_C(void *_instance, U32 _self, U32 newLayoutManagerPointer) {
    id _t1 = (id)newLayoutManagerPointer;
    [(NSTextContainer*)_self replaceLayoutManager:_t1];
}

// method '-[NSTextContainer setContainerSize:]'
void env___IM_NSTextContainer_setContainerSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSTextContainer*)_self setContainerSize:_t1];
}

// method '-[NSTextContainer setHeightTracksTextView:]'
void env___IM_NSTextContainer_setHeightTracksTextView_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextContainer*)_self setHeightTracksTextView:flag];
}

// method '-[NSTextContainer setLayoutManager:]'
void env___IM_NSTextContainer_setLayoutManager_C(void *_instance, U32 _self, U32 layoutManagerPointer) {
    id _t1 = (id)layoutManagerPointer;
    [(NSTextContainer*)_self setLayoutManager:_t1];
}

// method '-[NSTextContainer setLineFragmentPadding:]'
void env___IM_NSTextContainer_setLineFragmentPadding_C(void *_instance, U32 _self, F32 pad) {
    [(NSTextContainer*)_self setLineFragmentPadding:pad];
}

// method '-[NSTextContainer setTextView:]'
void env___IM_NSTextContainer_setTextView_C(void *_instance, U32 _self, U32 textViewPointer) {
    id _t1 = (id)textViewPointer;
    [(NSTextContainer*)_self setTextView:_t1];
}

// method '-[NSTextContainer setWidthTracksTextView:]'
void env___IM_NSTextContainer_setWidthTracksTextView_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextContainer*)_self setWidthTracksTextView:flag];
}

// method '-[NSTextContainer textView]'
U32 env___IM_NSTextContainer_textView(void *_instance, U32 _self) {
    id _result = (id)[(NSTextContainer*)_self textView];
    return (U32)_result;
}

// method '-[NSTextContainer widthTracksTextView]'
U32 env___IM_NSTextContainer_widthTracksTextView(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextContainer*)_self widthTracksTextView];
    return (U32)_result;
}

// method '-[NSTextField acceptsFirstResponder]'
U32 env___IM_NSTextField_acceptsFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self acceptsFirstResponder];
    return (U32)_result;
}

// method '-[NSTextField allowsEditingTextAttributes]'
U32 env___IM_NSTextField_allowsEditingTextAttributes(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self allowsEditingTextAttributes];
    return (U32)_result;
}

// method '-[NSTextField backgroundColor]'
U32 env___IM_NSTextField_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextField*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSTextField bezelStyle]'
U32 env___IM_NSTextField_bezelStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSTextField*)_self bezelStyle];
    return (U32)_result;
}

// method '-[NSTextField delegate]'
U32 env___IM_NSTextField_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSTextField*)_self delegate];
    return (U32)_result;
}

// method '-[NSTextField drawsBackground]'
U32 env___IM_NSTextField_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSTextField importsGraphics]'
U32 env___IM_NSTextField_importsGraphics(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self importsGraphics];
    return (U32)_result;
}

// method '-[NSTextField isBezeled]'
U32 env___IM_NSTextField_isBezeled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self isBezeled];
    return (U32)_result;
}

// method '-[NSTextField isBordered]'
U32 env___IM_NSTextField_isBordered(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self isBordered];
    return (U32)_result;
}

// method '-[NSTextField isEditable]'
U32 env___IM_NSTextField_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self isEditable];
    return (U32)_result;
}

// method '-[NSTextField isSelectable]'
U32 env___IM_NSTextField_isSelectable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextField*)_self isSelectable];
    return (U32)_result;
}

// method '-[NSTextField selectText:]'
void env___IM_NSTextField_selectText_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextField*)_self selectText:_t1];
}

// method '-[NSTextField setAllowsEditingTextAttributes:]'
void env___IM_NSTextField_setAllowsEditingTextAttributes_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setAllowsEditingTextAttributes:flag];
}

// method '-[NSTextField setBackgroundColor:]'
void env___IM_NSTextField_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextField*)_self setBackgroundColor:_t1];
}

// method '-[NSTextField setBezelStyle:]'
void env___IM_NSTextField_setBezelStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSTextField*)_self setBezelStyle:style];
}

// method '-[NSTextField setBezeled:]'
void env___IM_NSTextField_setBezeled_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setBezeled:flag];
}

// method '-[NSTextField setBordered:]'
void env___IM_NSTextField_setBordered_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setBordered:flag];
}

// method '-[NSTextField setDelegate:]'
void env___IM_NSTextField_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSTextField*)_self setDelegate:_t1];
}

// method '-[NSTextField setDrawsBackground:]'
void env___IM_NSTextField_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setDrawsBackground:flag];
}

// method '-[NSTextField setEditable:]'
void env___IM_NSTextField_setEditable_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setEditable:flag];
}

// method '-[NSTextField setImportsGraphics:]'
void env___IM_NSTextField_setImportsGraphics_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setImportsGraphics:flag];
}

// method '-[NSTextField setSelectable:]'
void env___IM_NSTextField_setSelectable_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextField*)_self setSelectable:flag];
}

// method '-[NSTextField setTextColor:]'
void env___IM_NSTextField_setTextColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextField*)_self setTextColor:_t1];
}

// method '-[NSTextField setTitleWithMnemonic:]'
void env___IM_NSTextField_setTitleWithMnemonic_C(void *_instance, U32 _self, U32 stringWithAmpersandPointer) {
    id _t1 = (id)stringWithAmpersandPointer;
    [(NSTextField*)_self setTitleWithMnemonic:_t1];
}

// method '-[NSTextField textColor]'
U32 env___IM_NSTextField_textColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextField*)_self textColor];
    return (U32)_result;
}

// method '-[NSTextField textDidBeginEditing:]'
void env___IM_NSTextField_textDidBeginEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSTextField*)_self textDidBeginEditing:_t1];
}

// method '-[NSTextField textDidChange:]'
void env___IM_NSTextField_textDidChange_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSTextField*)_self textDidChange:_t1];
}

// method '-[NSTextField textDidEndEditing:]'
void env___IM_NSTextField_textDidEndEditing_C(void *_instance, U32 _self, U32 notificationPointer) {
    id _t1 = (id)notificationPointer;
    [(NSTextField*)_self textDidEndEditing:_t1];
}

// method '-[NSTextField textShouldBeginEditing:]'
U32 env___IM_NSTextField_textShouldBeginEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(NSTextField*)_self textShouldBeginEditing:_t1];
    return (U32)_result;
}

// method '-[NSTextField textShouldEndEditing:]'
U32 env___IM_NSTextField_textShouldEndEditing_C(void *_instance, U32 _self, U32 textObjectPointer) {
    id _t1 = (id)textObjectPointer;
    BOOL _result = (BOOL)[(NSTextField*)_self textShouldEndEditing:_t1];
    return (U32)_result;
}

// method '-[NSTextFieldCell backgroundColor]'
U32 env___IM_NSTextFieldCell_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextFieldCell*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSTextFieldCell bezelStyle]'
U32 env___IM_NSTextFieldCell_bezelStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSTextFieldCell*)_self bezelStyle];
    return (U32)_result;
}

// method '-[NSTextFieldCell drawsBackground]'
U32 env___IM_NSTextFieldCell_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextFieldCell*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSTextFieldCell placeholderAttributedString]'
U32 env___IM_NSTextFieldCell_placeholderAttributedString(void *_instance, U32 _self) {
    id _result = (id)[(NSTextFieldCell*)_self placeholderAttributedString];
    return (U32)_result;
}

// method '-[NSTextFieldCell placeholderString]'
U32 env___IM_NSTextFieldCell_placeholderString(void *_instance, U32 _self) {
    id _result = (id)[(NSTextFieldCell*)_self placeholderString];
    return (U32)_result;
}

// method '-[NSTextFieldCell setBackgroundColor:]'
void env___IM_NSTextFieldCell_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextFieldCell*)_self setBackgroundColor:_t1];
}

// method '-[NSTextFieldCell setBezelStyle:]'
void env___IM_NSTextFieldCell_setBezelStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSTextFieldCell*)_self setBezelStyle:style];
}

// method '-[NSTextFieldCell setDrawsBackground:]'
void env___IM_NSTextFieldCell_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextFieldCell*)_self setDrawsBackground:flag];
}

// method '-[NSTextFieldCell setPlaceholderAttributedString:]'
void env___IM_NSTextFieldCell_setPlaceholderAttributedString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSTextFieldCell*)_self setPlaceholderAttributedString:_t1];
}

// method '-[NSTextFieldCell setPlaceholderString:]'
void env___IM_NSTextFieldCell_setPlaceholderString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSTextFieldCell*)_self setPlaceholderString:_t1];
}

// method '-[NSTextFieldCell setTextColor:]'
void env___IM_NSTextFieldCell_setTextColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextFieldCell*)_self setTextColor:_t1];
}

// method '-[NSTextFieldCell setUpFieldEditorAttributes:]'
U32 env___IM_NSTextFieldCell_setUpFieldEditorAttributes_C(void *_instance, U32 _self, U32 textObjPointer) {
    id _t1 = (id)textObjPointer;
    id _result = (id)[(NSTextFieldCell*)_self setUpFieldEditorAttributes:_t1];
    return (U32)_result;
}

// method '-[NSTextFieldCell textColor]'
U32 env___IM_NSTextFieldCell_textColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextFieldCell*)_self textColor];
    return (U32)_result;
}

// method '-[NSTextList initWithMarkerFormat:options:]'
U32 env___IM_NSTextList_initWithMarkerFormat_Coptions_C(void *_instance, U32 _self, U32 formatPointer, U32 mask) {
    id _t1 = (id)formatPointer;
    id _result = (id)[(NSTextList*)_self initWithMarkerFormat:_t1 options:mask];
    return (U32)_result;
}

// method '-[NSTextList listOptions]'
U32 env___IM_NSTextList_listOptions(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSTextList*)_self listOptions];
    return (U32)_result;
}

// method '-[NSTextList markerForItemNumber:]'
U32 env___IM_NSTextList_markerForItemNumber_C(void *_instance, U32 _self, U32 itemNum) {
    id _result = (id)[(NSTextList*)_self markerForItemNumber:itemNum];
    return (U32)_result;
}

// method '-[NSTextList markerFormat]'
U32 env___IM_NSTextList_markerFormat(void *_instance, U32 _self) {
    id _result = (id)[(NSTextList*)_self markerFormat];
    return (U32)_result;
}

// method '-[NSTextStorage addLayoutManager:]'
void env___IM_NSTextStorage_addLayoutManager_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSTextStorage*)_self addLayoutManager:_t1];
}

// method '-[NSTextStorage attributeRuns]'
U32 env___IM_NSTextStorage_attributeRuns(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self attributeRuns];
    return (U32)_result;
}

// method '-[NSTextStorage changeInLength]'
U32 env___IM_NSTextStorage_changeInLength(void *_instance, U32 _self) {
    int _result = (int)[(NSTextStorage*)_self changeInLength];
    return (U32)_result;
}

// method '-[NSTextStorage characters]'
U32 env___IM_NSTextStorage_characters(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self characters];
    return (U32)_result;
}

// method '-[NSTextStorage delegate]'
U32 env___IM_NSTextStorage_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self delegate];
    return (U32)_result;
}

// method '-[NSTextStorage edited:range:changeInLength:]'
void env___IM_NSTextStorage_edited_Crange_CchangeInLength_C(void *_instance, U32 _self, U32 editedMask, U32 rangeIndirect, U32 delta) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextStorage*)_self edited:editedMask range:_t1 changeInLength:delta];
}

// method '-[NSTextStorage editedMask]'
U32 env___IM_NSTextStorage_editedMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSTextStorage*)_self editedMask];
    return (U32)_result;
}

// method '-[NSTextStorage editedRange]'
void env___IM_NSTextStorage_editedRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTextStorage*)_self editedRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextStorage ensureAttributesAreFixedInRange:]'
void env___IM_NSTextStorage_ensureAttributesAreFixedInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextStorage*)_self ensureAttributesAreFixedInRange:_t1];
}

// method '-[NSTextStorage fixesAttributesLazily]'
U32 env___IM_NSTextStorage_fixesAttributesLazily(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextStorage*)_self fixesAttributesLazily];
    return (U32)_result;
}

// method '-[NSTextStorage font]'
U32 env___IM_NSTextStorage_font(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self font];
    return (U32)_result;
}

// method '-[NSTextStorage foregroundColor]'
U32 env___IM_NSTextStorage_foregroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self foregroundColor];
    return (U32)_result;
}

// method '-[NSTextStorage invalidateAttributesInRange:]'
void env___IM_NSTextStorage_invalidateAttributesInRange_C(void *_instance, U32 _self, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextStorage*)_self invalidateAttributesInRange:_t1];
}

// method '-[NSTextStorage layoutManagers]'
U32 env___IM_NSTextStorage_layoutManagers(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self layoutManagers];
    return (U32)_result;
}

// method '-[NSTextStorage paragraphs]'
U32 env___IM_NSTextStorage_paragraphs(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self paragraphs];
    return (U32)_result;
}

// method '-[NSTextStorage processEditing]'
void env___IM_NSTextStorage_processEditing(void *_instance, U32 _self) {
    [(NSTextStorage*)_self processEditing];
}

// method '-[NSTextStorage removeLayoutManager:]'
void env___IM_NSTextStorage_removeLayoutManager_C(void *_instance, U32 _self, U32 objPointer) {
    id _t1 = (id)objPointer;
    [(NSTextStorage*)_self removeLayoutManager:_t1];
}

// method '-[NSTextStorage setAttributeRuns:]'
void env___IM_NSTextStorage_setAttributeRuns_C(void *_instance, U32 _self, U32 attributeRunsPointer) {
    id _t1 = (id)attributeRunsPointer;
    [(NSTextStorage*)_self setAttributeRuns:_t1];
}

// method '-[NSTextStorage setCharacters:]'
void env___IM_NSTextStorage_setCharacters_C(void *_instance, U32 _self, U32 charactersPointer) {
    id _t1 = (id)charactersPointer;
    [(NSTextStorage*)_self setCharacters:_t1];
}

// method '-[NSTextStorage setDelegate:]'
void env___IM_NSTextStorage_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSTextStorage*)_self setDelegate:_t1];
}

// method '-[NSTextStorage setFont:]'
void env___IM_NSTextStorage_setFont_C(void *_instance, U32 _self, U32 fontPointer) {
    id _t1 = (id)fontPointer;
    [(NSTextStorage*)_self setFont:_t1];
}

// method '-[NSTextStorage setForegroundColor:]'
void env___IM_NSTextStorage_setForegroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextStorage*)_self setForegroundColor:_t1];
}

// method '-[NSTextStorage setParagraphs:]'
void env___IM_NSTextStorage_setParagraphs_C(void *_instance, U32 _self, U32 paragraphsPointer) {
    id _t1 = (id)paragraphsPointer;
    [(NSTextStorage*)_self setParagraphs:_t1];
}

// method '-[NSTextStorage setWords:]'
void env___IM_NSTextStorage_setWords_C(void *_instance, U32 _self, U32 wordsPointer) {
    id _t1 = (id)wordsPointer;
    [(NSTextStorage*)_self setWords:_t1];
}

// method '-[NSTextStorage words]'
U32 env___IM_NSTextStorage_words(void *_instance, U32 _self) {
    id _result = (id)[(NSTextStorage*)_self words];
    return (U32)_result;
}

// method '-[NSTextTab alignment]'
U32 env___IM_NSTextTab_alignment(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTab*)_self alignment];
    return (U32)_result;
}

// method '-[NSTextTab initWithTextAlignment:location:options:]'
U32 env___IM_NSTextTab_initWithTextAlignment_Clocation_Coptions_C(void *_instance, U32 _self, U32 alignment, F32 loc, U32 optionsPointer) {
    id _t1 = (id)optionsPointer;
    id _result = (id)[(NSTextTab*)_self initWithTextAlignment:alignment location:loc options:_t1];
    return (U32)_result;
}

// method '-[NSTextTab initWithType:location:]'
U32 env___IM_NSTextTab_initWithType_Clocation_C(void *_instance, U32 _self, U32 type, F32 loc) {
    id _result = (id)[(NSTextTab*)_self initWithType:type location:loc];
    return (U32)_result;
}

// method '-[NSTextTab location]'
F32 env___IM_NSTextTab_location(void *_instance, U32 _self) {
    float _result = (float)[(NSTextTab*)_self location];
    return (F32)_result;
}

// method '-[NSTextTab options]'
U32 env___IM_NSTextTab_options(void *_instance, U32 _self) {
    id _result = (id)[(NSTextTab*)_self options];
    return (U32)_result;
}

// method '-[NSTextTab tabStopType]'
U32 env___IM_NSTextTab_tabStopType(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTab*)_self tabStopType];
    return (U32)_result;
}

// method '-[NSTextTable boundsRectForBlock:contentRect:inRect:textContainer:characterRange:]'
void env___IM_NSTextTable_boundsRectForBlock_CcontentRect_CinRect_CtextContainer_CcharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 contentRectIndirect, U32 rectIndirect, U32 textContainerPointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + contentRectIndirect);
    NSRect _t3 = *(NSRect*)(_mem->data + rectIndirect);
    id _t4 = (id)textContainerPointer;
    NSRange _t5 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    swap_I(&_t5.location);
    swap_I(&_t5.length);
    #endif
    NSRect _result = (NSRect)[(NSTextTable*)_self boundsRectForBlock:_t1 contentRect:_t2 inRect:_t3 textContainer:_t4 characterRange:_t5];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextTable collapsesBorders]'
U32 env___IM_NSTextTable_collapsesBorders(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextTable*)_self collapsesBorders];
    return (U32)_result;
}

// method '-[NSTextTable drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:]'
void env___IM_NSTextTable_drawBackgroundForBlock_CwithFrame_CinView_CcharacterRange_ClayoutManager_C(void *_instance, U32 _self, U32 blockPointer, U32 frameRectIndirect, U32 controlViewPointer, U32 charRangeIndirect, U32 layoutManagerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + frameRectIndirect);
    id _t3 = (id)controlViewPointer;
    NSRange _t4 = *(NSRange*)(_mem->data + charRangeIndirect);
    id _t5 = (id)layoutManagerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_I(&_t4.location);
    swap_I(&_t4.length);
    #endif
    [(NSTextTable*)_self drawBackgroundForBlock:_t1 withFrame:_t2 inView:_t3 characterRange:_t4 layoutManager:_t5];
}

// method '-[NSTextTable hidesEmptyCells]'
U32 env___IM_NSTextTable_hidesEmptyCells(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextTable*)_self hidesEmptyCells];
    return (U32)_result;
}

// method '-[NSTextTable layoutAlgorithm]'
U32 env___IM_NSTextTable_layoutAlgorithm(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTable*)_self layoutAlgorithm];
    return (U32)_result;
}

// method '-[NSTextTable numberOfColumns]'
U32 env___IM_NSTextTable_numberOfColumns(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSTextTable*)_self numberOfColumns];
    return (U32)_result;
}

// method '-[NSTextTable rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:]'
void env___IM_NSTextTable_rectForBlock_ClayoutAtPoint_CinRect_CtextContainer_CcharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 blockPointer, U32 startingPointIndirect, U32 rectIndirect, U32 textContainerPointer, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)blockPointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + startingPointIndirect);
    NSRect _t3 = *(NSRect*)(_mem->data + rectIndirect);
    id _t4 = (id)textContainerPointer;
    NSRange _t5 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    swap_I(&_t5.location);
    swap_I(&_t5.length);
    #endif
    NSRect _result = (NSRect)[(NSTextTable*)_self rectForBlock:_t1 layoutAtPoint:_t2 inRect:_t3 textContainer:_t4 characterRange:_t5];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextTable setCollapsesBorders:]'
void env___IM_NSTextTable_setCollapsesBorders_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextTable*)_self setCollapsesBorders:flag];
}

// method '-[NSTextTable setHidesEmptyCells:]'
void env___IM_NSTextTable_setHidesEmptyCells_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextTable*)_self setHidesEmptyCells:flag];
}

// method '-[NSTextTable setLayoutAlgorithm:]'
void env___IM_NSTextTable_setLayoutAlgorithm_C(void *_instance, U32 _self, U32 algorithm) {
    [(NSTextTable*)_self setLayoutAlgorithm:algorithm];
}

// method '-[NSTextTable setNumberOfColumns:]'
void env___IM_NSTextTable_setNumberOfColumns_C(void *_instance, U32 _self, U32 numCols) {
    [(NSTextTable*)_self setNumberOfColumns:numCols];
}

// method '-[NSTextTableBlock columnSpan]'
U32 env___IM_NSTextTableBlock_columnSpan(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTableBlock*)_self columnSpan];
    return (U32)_result;
}

// method '-[NSTextTableBlock initWithTable:startingRow:rowSpan:startingColumn:columnSpan:]'
U32 env___IM_NSTextTableBlock_initWithTable_CstartingRow_CrowSpan_CstartingColumn_CcolumnSpan_C(void *_instance, U32 _self, U32 tablePointer, U32 row, U32 rowSpan, U32 col, U32 colSpan) {
    id _t1 = (id)tablePointer;
    id _result = (id)[(NSTextTableBlock*)_self initWithTable:_t1 startingRow:row rowSpan:rowSpan startingColumn:col columnSpan:colSpan];
    return (U32)_result;
}

// method '-[NSTextTableBlock rowSpan]'
U32 env___IM_NSTextTableBlock_rowSpan(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTableBlock*)_self rowSpan];
    return (U32)_result;
}

// method '-[NSTextTableBlock startingColumn]'
U32 env___IM_NSTextTableBlock_startingColumn(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTableBlock*)_self startingColumn];
    return (U32)_result;
}

// method '-[NSTextTableBlock startingRow]'
U32 env___IM_NSTextTableBlock_startingRow(void *_instance, U32 _self) {
    int _result = (int)[(NSTextTableBlock*)_self startingRow];
    return (U32)_result;
}

// method '-[NSTextTableBlock table]'
U32 env___IM_NSTextTableBlock_table(void *_instance, U32 _self) {
    id _result = (id)[(NSTextTableBlock*)_self table];
    return (U32)_result;
}

// method '-[NSTextView acceptableDragTypes]'
U32 env___IM_NSTextView_acceptableDragTypes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self acceptableDragTypes];
    return (U32)_result;
}

// method '-[NSTextView acceptsGlyphInfo]'
U32 env___IM_NSTextView_acceptsGlyphInfo(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self acceptsGlyphInfo];
    return (U32)_result;
}

// method '-[NSTextView alignJustified:]'
void env___IM_NSTextView_alignJustified_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self alignJustified:_t1];
}

// method '-[NSTextView allowsDocumentBackgroundColorChange]'
U32 env___IM_NSTextView_allowsDocumentBackgroundColorChange(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self allowsDocumentBackgroundColorChange];
    return (U32)_result;
}

// method '-[NSTextView allowsUndo]'
U32 env___IM_NSTextView_allowsUndo(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self allowsUndo];
    return (U32)_result;
}

// method '-[NSTextView backgroundColor]'
U32 env___IM_NSTextView_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSTextView becomeFirstResponder]'
U32 env___IM_NSTextView_becomeFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self becomeFirstResponder];
    return (U32)_result;
}

// method '-[NSTextView breakUndoCoalescing]'
void env___IM_NSTextView_breakUndoCoalescing(void *_instance, U32 _self) {
    [(NSTextView*)_self breakUndoCoalescing];
}

// method '-[NSTextView changeAttributes:]'
void env___IM_NSTextView_changeAttributes_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self changeAttributes:_t1];
}

// method '-[NSTextView changeColor:]'
void env___IM_NSTextView_changeColor_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self changeColor:_t1];
}

// method '-[NSTextView changeDocumentBackgroundColor:]'
void env___IM_NSTextView_changeDocumentBackgroundColor_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self changeDocumentBackgroundColor:_t1];
}

// method '-[NSTextView cleanUpAfterDragOperation]'
void env___IM_NSTextView_cleanUpAfterDragOperation(void *_instance, U32 _self) {
    [(NSTextView*)_self cleanUpAfterDragOperation];
}

// method '-[NSTextView clickedOnLink:atIndex:]'
void env___IM_NSTextView_clickedOnLink_CatIndex_C(void *_instance, U32 _self, U32 linkPointer, U32 charIndex) {
    id _t1 = (id)linkPointer;
    [(NSTextView*)_self clickedOnLink:_t1 atIndex:charIndex];
}

// method '-[NSTextView complete:]'
void env___IM_NSTextView_complete_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self complete:_t1];
}

// method '-[NSTextView completionsForPartialWordRange:indexOfSelectedItem:]'
U32 env___IM_NSTextView_completionsForPartialWordRange_CindexOfSelectedItem_C(void *_instance, U32 _self, U32 charRangeIndirect, U32 indexPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    int* _t2 = (int*)indexPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    id _result = (id)[(NSTextView*)_self completionsForPartialWordRange:_t1 indexOfSelectedItem:_t2];
    return (U32)_result;
}

// method '-[NSTextView defaultParagraphStyle]'
U32 env___IM_NSTextView_defaultParagraphStyle(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self defaultParagraphStyle];
    return (U32)_result;
}

// method '-[NSTextView delegate]'
U32 env___IM_NSTextView_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self delegate];
    return (U32)_result;
}

// method '-[NSTextView didChangeText]'
void env___IM_NSTextView_didChangeText(void *_instance, U32 _self) {
    [(NSTextView*)_self didChangeText];
}

// method '-[NSTextView dragImageForSelectionWithEvent:origin:]'
U32 env___IM_NSTextView_dragImageForSelectionWithEvent_Corigin_C(void *_instance, U32 _self, U32 eventPointer, U32 originPointer) {
    id _t1 = (id)eventPointer;
    NSPointPointer _t2 = (NSPointPointer)originPointer;
    id _result = (id)[(NSTextView*)_self dragImageForSelectionWithEvent:_t1 origin:_t2];
    return (U32)_result;
}

// method '-[NSTextView dragOperationForDraggingInfo:type:]'
U32 env___IM_NSTextView_dragOperationForDraggingInfo_Ctype_C(void *_instance, U32 _self, U32 dragInfoPointer, U32 typePointer) {
    id _t1 = (id)dragInfoPointer;
    id _t2 = (id)typePointer;
    unsigned int _result = (unsigned int)[(NSTextView*)_self dragOperationForDraggingInfo:_t1 type:_t2];
    return (U32)_result;
}

// method '-[NSTextView dragSelectionWithEvent:offset:slideBack:]'
U32 env___IM_NSTextView_dragSelectionWithEvent_Coffset_CslideBack_C(void *_instance, U32 _self, U32 eventPointer, U32 mouseOffsetIndirect, U32 slideBack) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)eventPointer;
    NSSize _t2 = *(NSSize*)(_mem->data + mouseOffsetIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.width);
    swap_f(&_t2.height);
    #endif
    BOOL _result = (BOOL)[(NSTextView*)_self dragSelectionWithEvent:_t1 offset:_t2 slideBack:slideBack];
    return (U32)_result;
}

// method '-[NSTextView drawInsertionPointInRect:color:turnedOn:]'
void env___IM_NSTextView_drawInsertionPointInRect_Ccolor_CturnedOn_C(void *_instance, U32 _self, U32 rectIndirect, U32 colorPointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)colorPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTextView*)_self drawInsertionPointInRect:_t1 color:_t2 turnedOn:flag];
}

// method '-[NSTextView drawViewBackgroundInRect:]'
void env___IM_NSTextView_drawViewBackgroundInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTextView*)_self drawViewBackgroundInRect:_t1];
}

// method '-[NSTextView drawsBackground]'
U32 env___IM_NSTextView_drawsBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self drawsBackground];
    return (U32)_result;
}

// method '-[NSTextView importsGraphics]'
U32 env___IM_NSTextView_importsGraphics(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self importsGraphics];
    return (U32)_result;
}

// method '-[NSTextView initWithFrame:]'
U32 env___IM_NSTextView_initWithFrame_C(void *_instance, U32 _self, U32 frameRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSTextView*)_self initWithFrame:_t1];
    return (U32)_result;
}

// method '-[NSTextView initWithFrame:textContainer:]'
U32 env___IM_NSTextView_initWithFrame_CtextContainer_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 containerPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    id _t2 = (id)containerPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSTextView*)_self initWithFrame:_t1 textContainer:_t2];
    return (U32)_result;
}

// method '-[NSTextView insertCompletion:forPartialWordRange:movement:isFinal:]'
void env___IM_NSTextView_insertCompletion_CforPartialWordRange_Cmovement_CisFinal_C(void *_instance, U32 _self, U32 wordPointer, U32 charRangeIndirect, U32 movement, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)wordPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSTextView*)_self insertCompletion:_t1 forPartialWordRange:_t2 movement:movement isFinal:flag];
}

// method '-[NSTextView insertText:]'
void env___IM_NSTextView_insertText_C(void *_instance, U32 _self, U32 insertStringPointer) {
    id _t1 = (id)insertStringPointer;
    [(NSTextView*)_self insertText:_t1];
}

// method '-[NSTextView insertionPointColor]'
U32 env___IM_NSTextView_insertionPointColor(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self insertionPointColor];
    return (U32)_result;
}

// method '-[NSTextView invalidateTextContainerOrigin]'
void env___IM_NSTextView_invalidateTextContainerOrigin(void *_instance, U32 _self) {
    [(NSTextView*)_self invalidateTextContainerOrigin];
}

// method '-[NSTextView isContinuousSpellCheckingEnabled]'
U32 env___IM_NSTextView_isContinuousSpellCheckingEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self isContinuousSpellCheckingEnabled];
    return (U32)_result;
}

// method '-[NSTextView isEditable]'
U32 env___IM_NSTextView_isEditable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self isEditable];
    return (U32)_result;
}

// method '-[NSTextView isFieldEditor]'
U32 env___IM_NSTextView_isFieldEditor(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self isFieldEditor];
    return (U32)_result;
}

// method '-[NSTextView isRichText]'
U32 env___IM_NSTextView_isRichText(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self isRichText];
    return (U32)_result;
}

// method '-[NSTextView isRulerVisible]'
U32 env___IM_NSTextView_isRulerVisible(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self isRulerVisible];
    return (U32)_result;
}

// method '-[NSTextView isSelectable]'
U32 env___IM_NSTextView_isSelectable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self isSelectable];
    return (U32)_result;
}

// method '-[NSTextView layoutManager]'
U32 env___IM_NSTextView_layoutManager(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self layoutManager];
    return (U32)_result;
}

// method '-[NSTextView linkTextAttributes]'
U32 env___IM_NSTextView_linkTextAttributes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self linkTextAttributes];
    return (U32)_result;
}

// method '-[NSTextView loosenKerning:]'
void env___IM_NSTextView_loosenKerning_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self loosenKerning:_t1];
}

// method '-[NSTextView lowerBaseline:]'
void env___IM_NSTextView_lowerBaseline_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self lowerBaseline:_t1];
}

// method '-[NSTextView markedTextAttributes]'
U32 env___IM_NSTextView_markedTextAttributes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self markedTextAttributes];
    return (U32)_result;
}

// method '-[NSTextView orderFrontLinkPanel:]'
void env___IM_NSTextView_orderFrontLinkPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self orderFrontLinkPanel:_t1];
}

// method '-[NSTextView orderFrontListPanel:]'
void env___IM_NSTextView_orderFrontListPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self orderFrontListPanel:_t1];
}

// method '-[NSTextView orderFrontSpacingPanel:]'
void env___IM_NSTextView_orderFrontSpacingPanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self orderFrontSpacingPanel:_t1];
}

// method '-[NSTextView orderFrontTablePanel:]'
void env___IM_NSTextView_orderFrontTablePanel_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self orderFrontTablePanel:_t1];
}

// method '-[NSTextView outline:]'
void env___IM_NSTextView_outline_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self outline:_t1];
}

// method '-[NSTextView pasteAsPlainText:]'
void env___IM_NSTextView_pasteAsPlainText_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self pasteAsPlainText:_t1];
}

// method '-[NSTextView pasteAsRichText:]'
void env___IM_NSTextView_pasteAsRichText_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self pasteAsRichText:_t1];
}

// method '-[NSTextView performFindPanelAction:]'
void env___IM_NSTextView_performFindPanelAction_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self performFindPanelAction:_t1];
}

// method '-[NSTextView preferredPasteboardTypeFromArray:restrictedToTypesFromArray:]'
U32 env___IM_NSTextView_preferredPasteboardTypeFromArray_CrestrictedToTypesFromArray_C(void *_instance, U32 _self, U32 availableTypesPointer, U32 allowedTypesPointer) {
    id _t1 = (id)availableTypesPointer;
    id _t2 = (id)allowedTypesPointer;
    id _result = (id)[(NSTextView*)_self preferredPasteboardTypeFromArray:_t1 restrictedToTypesFromArray:_t2];
    return (U32)_result;
}

// method '-[NSTextView raiseBaseline:]'
void env___IM_NSTextView_raiseBaseline_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self raiseBaseline:_t1];
}

// method '-[NSTextView rangeForUserCharacterAttributeChange]'
void env___IM_NSTextView_rangeForUserCharacterAttributeChange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTextView*)_self rangeForUserCharacterAttributeChange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView rangeForUserCompletion]'
void env___IM_NSTextView_rangeForUserCompletion(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTextView*)_self rangeForUserCompletion];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView rangeForUserParagraphAttributeChange]'
void env___IM_NSTextView_rangeForUserParagraphAttributeChange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTextView*)_self rangeForUserParagraphAttributeChange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView rangeForUserTextChange]'
void env___IM_NSTextView_rangeForUserTextChange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTextView*)_self rangeForUserTextChange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView rangesForUserCharacterAttributeChange]'
U32 env___IM_NSTextView_rangesForUserCharacterAttributeChange(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self rangesForUserCharacterAttributeChange];
    return (U32)_result;
}

// method '-[NSTextView rangesForUserParagraphAttributeChange]'
U32 env___IM_NSTextView_rangesForUserParagraphAttributeChange(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self rangesForUserParagraphAttributeChange];
    return (U32)_result;
}

// method '-[NSTextView rangesForUserTextChange]'
U32 env___IM_NSTextView_rangesForUserTextChange(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self rangesForUserTextChange];
    return (U32)_result;
}

// method '-[NSTextView readSelectionFromPasteboard:]'
U32 env___IM_NSTextView_readSelectionFromPasteboard_C(void *_instance, U32 _self, U32 pboardPointer) {
    id _t1 = (id)pboardPointer;
    BOOL _result = (BOOL)[(NSTextView*)_self readSelectionFromPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSTextView readSelectionFromPasteboard:type:]'
U32 env___IM_NSTextView_readSelectionFromPasteboard_Ctype_C(void *_instance, U32 _self, U32 pboardPointer, U32 typePointer) {
    id _t1 = (id)pboardPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSTextView*)_self readSelectionFromPasteboard:_t1 type:_t2];
    return (U32)_result;
}

// method '-[NSTextView readablePasteboardTypes]'
U32 env___IM_NSTextView_readablePasteboardTypes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self readablePasteboardTypes];
    return (U32)_result;
}

// method '+[NSTextView registerForServices]'
void env___CM_NSTextView_registerForServices(void *_instance, U32 _class) {
    [(Class)_class registerForServices];
}

// method '-[NSTextView replaceTextContainer:]'
void env___IM_NSTextView_replaceTextContainer_C(void *_instance, U32 _self, U32 newContainerPointer) {
    id _t1 = (id)newContainerPointer;
    [(NSTextView*)_self replaceTextContainer:_t1];
}

// method '-[NSTextView resignFirstResponder]'
U32 env___IM_NSTextView_resignFirstResponder(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self resignFirstResponder];
    return (U32)_result;
}

// method '-[NSTextView rulerView:didAddMarker:]'
void env___IM_NSTextView_rulerView_CdidAddMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    [(NSTextView*)_self rulerView:_t1 didAddMarker:_t2];
}

// method '-[NSTextView rulerView:didMoveMarker:]'
void env___IM_NSTextView_rulerView_CdidMoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    [(NSTextView*)_self rulerView:_t1 didMoveMarker:_t2];
}

// method '-[NSTextView rulerView:didRemoveMarker:]'
void env___IM_NSTextView_rulerView_CdidRemoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    [(NSTextView*)_self rulerView:_t1 didRemoveMarker:_t2];
}

// method '-[NSTextView rulerView:handleMouseDown:]'
void env___IM_NSTextView_rulerView_ChandleMouseDown_C(void *_instance, U32 _self, U32 rulerPointer, U32 eventPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)eventPointer;
    [(NSTextView*)_self rulerView:_t1 handleMouseDown:_t2];
}

// method '-[NSTextView rulerView:shouldAddMarker:]'
U32 env___IM_NSTextView_rulerView_CshouldAddMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    BOOL _result = (BOOL)[(NSTextView*)_self rulerView:_t1 shouldAddMarker:_t2];
    return (U32)_result;
}

// method '-[NSTextView rulerView:shouldMoveMarker:]'
U32 env___IM_NSTextView_rulerView_CshouldMoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    BOOL _result = (BOOL)[(NSTextView*)_self rulerView:_t1 shouldMoveMarker:_t2];
    return (U32)_result;
}

// method '-[NSTextView rulerView:shouldRemoveMarker:]'
U32 env___IM_NSTextView_rulerView_CshouldRemoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    BOOL _result = (BOOL)[(NSTextView*)_self rulerView:_t1 shouldRemoveMarker:_t2];
    return (U32)_result;
}

// method '-[NSTextView rulerView:willAddMarker:atLocation:]'
F32 env___IM_NSTextView_rulerView_CwillAddMarker_CatLocation_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer, F32 location) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    float _result = (float)[(NSTextView*)_self rulerView:_t1 willAddMarker:_t2 atLocation:location];
    return (F32)_result;
}

// method '-[NSTextView rulerView:willMoveMarker:toLocation:]'
F32 env___IM_NSTextView_rulerView_CwillMoveMarker_CtoLocation_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer, F32 location) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    float _result = (float)[(NSTextView*)_self rulerView:_t1 willMoveMarker:_t2 toLocation:location];
    return (F32)_result;
}

// method '-[NSTextView selectedRanges]'
U32 env___IM_NSTextView_selectedRanges(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self selectedRanges];
    return (U32)_result;
}

// method '-[NSTextView selectedTextAttributes]'
U32 env___IM_NSTextView_selectedTextAttributes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self selectedTextAttributes];
    return (U32)_result;
}

// method '-[NSTextView selectionAffinity]'
U32 env___IM_NSTextView_selectionAffinity(void *_instance, U32 _self) {
    int _result = (int)[(NSTextView*)_self selectionAffinity];
    return (U32)_result;
}

// method '-[NSTextView selectionGranularity]'
U32 env___IM_NSTextView_selectionGranularity(void *_instance, U32 _self) {
    int _result = (int)[(NSTextView*)_self selectionGranularity];
    return (U32)_result;
}

// method '-[NSTextView selectionRangeForProposedRange:granularity:]'
void env___IM_NSTextView_selectionRangeForProposedRange_Cgranularity_C(void *_instance, U32 _resultIndirect, U32 _self, U32 proposedCharRangeIndirect, U32 granularity) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + proposedCharRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRange _result = (NSRange)[(NSTextView*)_self selectionRangeForProposedRange:_t1 granularity:granularity];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView setAcceptsGlyphInfo:]'
void env___IM_NSTextView_setAcceptsGlyphInfo_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setAcceptsGlyphInfo:flag];
}

// method '-[NSTextView setAlignment:range:]'
void env___IM_NSTextView_setAlignment_Crange_C(void *_instance, U32 _self, U32 alignment, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextView*)_self setAlignment:alignment range:_t1];
}

// method '-[NSTextView setAllowsDocumentBackgroundColorChange:]'
void env___IM_NSTextView_setAllowsDocumentBackgroundColorChange_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setAllowsDocumentBackgroundColorChange:flag];
}

// method '-[NSTextView setAllowsUndo:]'
void env___IM_NSTextView_setAllowsUndo_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setAllowsUndo:flag];
}

// method '-[NSTextView setBackgroundColor:]'
void env___IM_NSTextView_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextView*)_self setBackgroundColor:_t1];
}

// method '-[NSTextView setBaseWritingDirection:range:]'
void env___IM_NSTextView_setBaseWritingDirection_Crange_C(void *_instance, U32 _self, U32 writingDirection, U32 rangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + rangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextView*)_self setBaseWritingDirection:writingDirection range:_t1];
}

// method '-[NSTextView setConstrainedFrameSize:]'
void env___IM_NSTextView_setConstrainedFrameSize_C(void *_instance, U32 _self, U32 desiredSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + desiredSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSTextView*)_self setConstrainedFrameSize:_t1];
}

// method '-[NSTextView setContinuousSpellCheckingEnabled:]'
void env___IM_NSTextView_setContinuousSpellCheckingEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setContinuousSpellCheckingEnabled:flag];
}

// method '-[NSTextView setDefaultParagraphStyle:]'
void env___IM_NSTextView_setDefaultParagraphStyle_C(void *_instance, U32 _self, U32 paragraphStylePointer) {
    id _t1 = (id)paragraphStylePointer;
    [(NSTextView*)_self setDefaultParagraphStyle:_t1];
}

// method '-[NSTextView setDelegate:]'
void env___IM_NSTextView_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSTextView*)_self setDelegate:_t1];
}

// method '-[NSTextView setDrawsBackground:]'
void env___IM_NSTextView_setDrawsBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setDrawsBackground:flag];
}

// method '-[NSTextView setEditable:]'
void env___IM_NSTextView_setEditable_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setEditable:flag];
}

// method '-[NSTextView setFieldEditor:]'
void env___IM_NSTextView_setFieldEditor_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setFieldEditor:flag];
}

// method '-[NSTextView setImportsGraphics:]'
void env___IM_NSTextView_setImportsGraphics_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setImportsGraphics:flag];
}

// method '-[NSTextView setInsertionPointColor:]'
void env___IM_NSTextView_setInsertionPointColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSTextView*)_self setInsertionPointColor:_t1];
}

// method '-[NSTextView setLinkTextAttributes:]'
void env___IM_NSTextView_setLinkTextAttributes_C(void *_instance, U32 _self, U32 attributeDictionaryPointer) {
    id _t1 = (id)attributeDictionaryPointer;
    [(NSTextView*)_self setLinkTextAttributes:_t1];
}

// method '-[NSTextView setMarkedTextAttributes:]'
void env___IM_NSTextView_setMarkedTextAttributes_C(void *_instance, U32 _self, U32 attributeDictionaryPointer) {
    id _t1 = (id)attributeDictionaryPointer;
    [(NSTextView*)_self setMarkedTextAttributes:_t1];
}

// method '-[NSTextView setNeedsDisplayInRect:avoidAdditionalLayout:]'
void env___IM_NSTextView_setNeedsDisplayInRect_CavoidAdditionalLayout_C(void *_instance, U32 _self, U32 rectIndirect, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSTextView*)_self setNeedsDisplayInRect:_t1 avoidAdditionalLayout:flag];
}

// method '-[NSTextView setRichText:]'
void env___IM_NSTextView_setRichText_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setRichText:flag];
}

// method '-[NSTextView setRulerVisible:]'
void env___IM_NSTextView_setRulerVisible_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setRulerVisible:flag];
}

// method '-[NSTextView setSelectable:]'
void env___IM_NSTextView_setSelectable_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setSelectable:flag];
}

// method '-[NSTextView setSelectedRange:]'
void env___IM_NSTextView_setSelectedRange_C(void *_instance, U32 _self, U32 charRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextView*)_self setSelectedRange:_t1];
}

// method '-[NSTextView setSelectedRange:affinity:stillSelecting:]'
void env___IM_NSTextView_setSelectedRange_Caffinity_CstillSelecting_C(void *_instance, U32 _self, U32 charRangeIndirect, U32 affinity, U32 stillSelectingFlag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTextView*)_self setSelectedRange:_t1 affinity:affinity stillSelecting:stillSelectingFlag];
}

// method '-[NSTextView setSelectedRanges:]'
void env___IM_NSTextView_setSelectedRanges_C(void *_instance, U32 _self, U32 rangesPointer) {
    id _t1 = (id)rangesPointer;
    [(NSTextView*)_self setSelectedRanges:_t1];
}

// method '-[NSTextView setSelectedRanges:affinity:stillSelecting:]'
void env___IM_NSTextView_setSelectedRanges_Caffinity_CstillSelecting_C(void *_instance, U32 _self, U32 rangesPointer, U32 affinity, U32 stillSelectingFlag) {
    id _t1 = (id)rangesPointer;
    [(NSTextView*)_self setSelectedRanges:_t1 affinity:affinity stillSelecting:stillSelectingFlag];
}

// method '-[NSTextView setSelectedTextAttributes:]'
void env___IM_NSTextView_setSelectedTextAttributes_C(void *_instance, U32 _self, U32 attributeDictionaryPointer) {
    id _t1 = (id)attributeDictionaryPointer;
    [(NSTextView*)_self setSelectedTextAttributes:_t1];
}

// method '-[NSTextView setSelectionGranularity:]'
void env___IM_NSTextView_setSelectionGranularity_C(void *_instance, U32 _self, U32 granularity) {
    [(NSTextView*)_self setSelectionGranularity:granularity];
}

// method '-[NSTextView setSmartInsertDeleteEnabled:]'
void env___IM_NSTextView_setSmartInsertDeleteEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setSmartInsertDeleteEnabled:flag];
}

// method '-[NSTextView setTextContainer:]'
void env___IM_NSTextView_setTextContainer_C(void *_instance, U32 _self, U32 containerPointer) {
    id _t1 = (id)containerPointer;
    [(NSTextView*)_self setTextContainer:_t1];
}

// method '-[NSTextView setTextContainerInset:]'
void env___IM_NSTextView_setTextContainerInset_C(void *_instance, U32 _self, U32 insetIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + insetIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSTextView*)_self setTextContainerInset:_t1];
}

// method '-[NSTextView setTypingAttributes:]'
void env___IM_NSTextView_setTypingAttributes_C(void *_instance, U32 _self, U32 attrsPointer) {
    id _t1 = (id)attrsPointer;
    [(NSTextView*)_self setTypingAttributes:_t1];
}

// method '-[NSTextView setUsesFindPanel:]'
void env___IM_NSTextView_setUsesFindPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setUsesFindPanel:flag];
}

// method '-[NSTextView setUsesFontPanel:]'
void env___IM_NSTextView_setUsesFontPanel_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setUsesFontPanel:flag];
}

// method '-[NSTextView setUsesRuler:]'
void env___IM_NSTextView_setUsesRuler_C(void *_instance, U32 _self, U32 flag) {
    [(NSTextView*)_self setUsesRuler:flag];
}

// method '-[NSTextView shouldChangeTextInRange:replacementString:]'
U32 env___IM_NSTextView_shouldChangeTextInRange_CreplacementString_C(void *_instance, U32 _self, U32 affectedCharRangeIndirect, U32 replacementStringPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + affectedCharRangeIndirect);
    id _t2 = (id)replacementStringPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    BOOL _result = (BOOL)[(NSTextView*)_self shouldChangeTextInRange:_t1 replacementString:_t2];
    return (U32)_result;
}

// method '-[NSTextView shouldChangeTextInRanges:replacementStrings:]'
U32 env___IM_NSTextView_shouldChangeTextInRanges_CreplacementStrings_C(void *_instance, U32 _self, U32 affectedRangesPointer, U32 replacementStringsPointer) {
    id _t1 = (id)affectedRangesPointer;
    id _t2 = (id)replacementStringsPointer;
    BOOL _result = (BOOL)[(NSTextView*)_self shouldChangeTextInRanges:_t1 replacementStrings:_t2];
    return (U32)_result;
}

// method '-[NSTextView shouldDrawInsertionPoint]'
U32 env___IM_NSTextView_shouldDrawInsertionPoint(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self shouldDrawInsertionPoint];
    return (U32)_result;
}

// method '-[NSTextView smartDeleteRangeForProposedRange:]'
void env___IM_NSTextView_smartDeleteRangeForProposedRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 proposedCharRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + proposedCharRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRange _result = (NSRange)[(NSTextView*)_self smartDeleteRangeForProposedRange:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView smartInsertAfterStringForString:replacingRange:]'
U32 env___IM_NSTextView_smartInsertAfterStringForString_CreplacingRange_C(void *_instance, U32 _self, U32 pasteStringPointer, U32 charRangeToReplaceIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)pasteStringPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeToReplaceIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    id _result = (id)[(NSTextView*)_self smartInsertAfterStringForString:_t1 replacingRange:_t2];
    return (U32)_result;
}

// method '-[NSTextView smartInsertBeforeStringForString:replacingRange:]'
U32 env___IM_NSTextView_smartInsertBeforeStringForString_CreplacingRange_C(void *_instance, U32 _self, U32 pasteStringPointer, U32 charRangeToReplaceIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)pasteStringPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeToReplaceIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    id _result = (id)[(NSTextView*)_self smartInsertBeforeStringForString:_t1 replacingRange:_t2];
    return (U32)_result;
}

// method '-[NSTextView smartInsertDeleteEnabled]'
U32 env___IM_NSTextView_smartInsertDeleteEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self smartInsertDeleteEnabled];
    return (U32)_result;
}

// method '-[NSTextView smartInsertForString:replacingRange:beforeString:afterString:]'
void env___IM_NSTextView_smartInsertForString_CreplacingRange_CbeforeString_CafterString_C(void *_instance, U32 _self, U32 pasteStringPointer, U32 charRangeToReplaceIndirect, U32 beforeStringPointer, U32 afterStringPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)pasteStringPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + charRangeToReplaceIndirect);
    id* _t3 = (id*)beforeStringPointer;
    id* _t4 = (id*)afterStringPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSTextView*)_self smartInsertForString:_t1 replacingRange:_t2 beforeString:_t3 afterString:_t4];
}

// method '-[NSTextView spellCheckerDocumentTag]'
U32 env___IM_NSTextView_spellCheckerDocumentTag(void *_instance, U32 _self) {
    int _result = (int)[(NSTextView*)_self spellCheckerDocumentTag];
    return (U32)_result;
}

// method '-[NSTextView startSpeaking:]'
void env___IM_NSTextView_startSpeaking_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self startSpeaking:_t1];
}

// method '-[NSTextView stopSpeaking:]'
void env___IM_NSTextView_stopSpeaking_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self stopSpeaking:_t1];
}

// method '-[NSTextView textContainer]'
U32 env___IM_NSTextView_textContainer(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self textContainer];
    return (U32)_result;
}

// method '-[NSTextView textContainerInset]'
void env___IM_NSTextView_textContainerInset(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSTextView*)_self textContainerInset];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView textContainerOrigin]'
void env___IM_NSTextView_textContainerOrigin(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSTextView*)_self textContainerOrigin];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTextView textStorage]'
U32 env___IM_NSTextView_textStorage(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self textStorage];
    return (U32)_result;
}

// method '-[NSTextView tightenKerning:]'
void env___IM_NSTextView_tightenKerning_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self tightenKerning:_t1];
}

// method '-[NSTextView toggleBaseWritingDirection:]'
void env___IM_NSTextView_toggleBaseWritingDirection_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self toggleBaseWritingDirection:_t1];
}

// method '-[NSTextView toggleContinuousSpellChecking:]'
void env___IM_NSTextView_toggleContinuousSpellChecking_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self toggleContinuousSpellChecking:_t1];
}

// method '-[NSTextView toggleTraditionalCharacterShape:]'
void env___IM_NSTextView_toggleTraditionalCharacterShape_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self toggleTraditionalCharacterShape:_t1];
}

// method '-[NSTextView turnOffKerning:]'
void env___IM_NSTextView_turnOffKerning_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self turnOffKerning:_t1];
}

// method '-[NSTextView turnOffLigatures:]'
void env___IM_NSTextView_turnOffLigatures_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self turnOffLigatures:_t1];
}

// method '-[NSTextView typingAttributes]'
U32 env___IM_NSTextView_typingAttributes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self typingAttributes];
    return (U32)_result;
}

// method '-[NSTextView updateDragTypeRegistration]'
void env___IM_NSTextView_updateDragTypeRegistration(void *_instance, U32 _self) {
    [(NSTextView*)_self updateDragTypeRegistration];
}

// method '-[NSTextView updateFontPanel]'
void env___IM_NSTextView_updateFontPanel(void *_instance, U32 _self) {
    [(NSTextView*)_self updateFontPanel];
}

// method '-[NSTextView updateInsertionPointStateAndRestartTimer:]'
void env___IM_NSTextView_updateInsertionPointStateAndRestartTimer_C(void *_instance, U32 _self, U32 restartFlag) {
    [(NSTextView*)_self updateInsertionPointStateAndRestartTimer:restartFlag];
}

// method '-[NSTextView updateRuler]'
void env___IM_NSTextView_updateRuler(void *_instance, U32 _self) {
    [(NSTextView*)_self updateRuler];
}

// method '-[NSTextView useAllLigatures:]'
void env___IM_NSTextView_useAllLigatures_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self useAllLigatures:_t1];
}

// method '-[NSTextView useStandardKerning:]'
void env___IM_NSTextView_useStandardKerning_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self useStandardKerning:_t1];
}

// method '-[NSTextView useStandardLigatures:]'
void env___IM_NSTextView_useStandardLigatures_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTextView*)_self useStandardLigatures:_t1];
}

// method '-[NSTextView usesFindPanel]'
U32 env___IM_NSTextView_usesFindPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self usesFindPanel];
    return (U32)_result;
}

// method '-[NSTextView usesFontPanel]'
U32 env___IM_NSTextView_usesFontPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self usesFontPanel];
    return (U32)_result;
}

// method '-[NSTextView usesRuler]'
U32 env___IM_NSTextView_usesRuler(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTextView*)_self usesRuler];
    return (U32)_result;
}

// method '-[NSTextView validRequestorForSendType:returnType:]'
U32 env___IM_NSTextView_validRequestorForSendType_CreturnType_C(void *_instance, U32 _self, U32 sendTypePointer, U32 returnTypePointer) {
    id _t1 = (id)sendTypePointer;
    id _t2 = (id)returnTypePointer;
    id _result = (id)[(NSTextView*)_self validRequestorForSendType:_t1 returnType:_t2];
    return (U32)_result;
}

// method '-[NSTextView writablePasteboardTypes]'
U32 env___IM_NSTextView_writablePasteboardTypes(void *_instance, U32 _self) {
    id _result = (id)[(NSTextView*)_self writablePasteboardTypes];
    return (U32)_result;
}

// method '-[NSTextView writeSelectionToPasteboard:type:]'
U32 env___IM_NSTextView_writeSelectionToPasteboard_Ctype_C(void *_instance, U32 _self, U32 pboardPointer, U32 typePointer) {
    id _t1 = (id)pboardPointer;
    id _t2 = (id)typePointer;
    BOOL _result = (BOOL)[(NSTextView*)_self writeSelectionToPasteboard:_t1 type:_t2];
    return (U32)_result;
}

// method '-[NSTextView writeSelectionToPasteboard:types:]'
U32 env___IM_NSTextView_writeSelectionToPasteboard_Ctypes_C(void *_instance, U32 _self, U32 pboardPointer, U32 typesPointer) {
    id _t1 = (id)pboardPointer;
    id _t2 = (id)typesPointer;
    BOOL _result = (BOOL)[(NSTextView*)_self writeSelectionToPasteboard:_t1 types:_t2];
    return (U32)_result;
}

// method '-[NSTokenField completionDelay]'
F64 env___IM_NSTokenField_completionDelay(void *_instance, U32 _self) {
    double _result = (double)[(NSTokenField*)_self completionDelay];
    return (F64)_result;
}

// method '+[NSTokenField defaultCompletionDelay]'
F64 env___CM_NSTokenField_defaultCompletionDelay(void *_instance, U32 _class) {
    double _result = (double)[(Class)_class defaultCompletionDelay];
    return (F64)_result;
}

// method '+[NSTokenField defaultTokenizingCharacterSet]'
U32 env___CM_NSTokenField_defaultTokenizingCharacterSet(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultTokenizingCharacterSet];
    return (U32)_result;
}

// method '-[NSTokenField setCompletionDelay:]'
void env___IM_NSTokenField_setCompletionDelay_C(void *_instance, U32 _self, F64 delay) {
    [(NSTokenField*)_self setCompletionDelay:delay];
}

// method '-[NSTokenField setTokenStyle:]'
void env___IM_NSTokenField_setTokenStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSTokenField*)_self setTokenStyle:style];
}

// method '-[NSTokenField setTokenizingCharacterSet:]'
void env___IM_NSTokenField_setTokenizingCharacterSet_C(void *_instance, U32 _self, U32 characterSetPointer) {
    id _t1 = (id)characterSetPointer;
    [(NSTokenField*)_self setTokenizingCharacterSet:_t1];
}

// method '-[NSTokenField tokenStyle]'
U32 env___IM_NSTokenField_tokenStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSTokenField*)_self tokenStyle];
    return (U32)_result;
}

// method '-[NSTokenField tokenizingCharacterSet]'
U32 env___IM_NSTokenField_tokenizingCharacterSet(void *_instance, U32 _self) {
    id _result = (id)[(NSTokenField*)_self tokenizingCharacterSet];
    return (U32)_result;
}

// method '-[NSTokenFieldCell completionDelay]'
F64 env___IM_NSTokenFieldCell_completionDelay(void *_instance, U32 _self) {
    double _result = (double)[(NSTokenFieldCell*)_self completionDelay];
    return (F64)_result;
}

// method '+[NSTokenFieldCell defaultCompletionDelay]'
F64 env___CM_NSTokenFieldCell_defaultCompletionDelay(void *_instance, U32 _class) {
    double _result = (double)[(Class)_class defaultCompletionDelay];
    return (F64)_result;
}

// method '+[NSTokenFieldCell defaultTokenizingCharacterSet]'
U32 env___CM_NSTokenFieldCell_defaultTokenizingCharacterSet(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultTokenizingCharacterSet];
    return (U32)_result;
}

// method '-[NSTokenFieldCell delegate]'
U32 env___IM_NSTokenFieldCell_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSTokenFieldCell*)_self delegate];
    return (U32)_result;
}

// method '-[NSTokenFieldCell setCompletionDelay:]'
void env___IM_NSTokenFieldCell_setCompletionDelay_C(void *_instance, U32 _self, F64 delay) {
    [(NSTokenFieldCell*)_self setCompletionDelay:delay];
}

// method '-[NSTokenFieldCell setDelegate:]'
void env___IM_NSTokenFieldCell_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSTokenFieldCell*)_self setDelegate:_t1];
}

// method '-[NSTokenFieldCell setTokenStyle:]'
void env___IM_NSTokenFieldCell_setTokenStyle_C(void *_instance, U32 _self, U32 style) {
    [(NSTokenFieldCell*)_self setTokenStyle:style];
}

// method '-[NSTokenFieldCell setTokenizingCharacterSet:]'
void env___IM_NSTokenFieldCell_setTokenizingCharacterSet_C(void *_instance, U32 _self, U32 characterSetPointer) {
    id _t1 = (id)characterSetPointer;
    [(NSTokenFieldCell*)_self setTokenizingCharacterSet:_t1];
}

// method '-[NSTokenFieldCell tokenStyle]'
U32 env___IM_NSTokenFieldCell_tokenStyle(void *_instance, U32 _self) {
    int _result = (int)[(NSTokenFieldCell*)_self tokenStyle];
    return (U32)_result;
}

// method '-[NSTokenFieldCell tokenizingCharacterSet]'
U32 env___IM_NSTokenFieldCell_tokenizingCharacterSet(void *_instance, U32 _self) {
    id _result = (id)[(NSTokenFieldCell*)_self tokenizingCharacterSet];
    return (U32)_result;
}

// method '-[NSToolbar allowsUserCustomization]'
U32 env___IM_NSToolbar_allowsUserCustomization(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbar*)_self allowsUserCustomization];
    return (U32)_result;
}

// method '-[NSToolbar autosavesConfiguration]'
U32 env___IM_NSToolbar_autosavesConfiguration(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbar*)_self autosavesConfiguration];
    return (U32)_result;
}

// method '-[NSToolbar configurationDictionary]'
U32 env___IM_NSToolbar_configurationDictionary(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbar*)_self configurationDictionary];
    return (U32)_result;
}

// method '-[NSToolbar customizationPaletteIsRunning]'
U32 env___IM_NSToolbar_customizationPaletteIsRunning(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbar*)_self customizationPaletteIsRunning];
    return (U32)_result;
}

// method '-[NSToolbar delegate]'
U32 env___IM_NSToolbar_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbar*)_self delegate];
    return (U32)_result;
}

// method '-[NSToolbar displayMode]'
U32 env___IM_NSToolbar_displayMode(void *_instance, U32 _self) {
    int _result = (int)[(NSToolbar*)_self displayMode];
    return (U32)_result;
}

// method '-[NSToolbar identifier]'
U32 env___IM_NSToolbar_identifier(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbar*)_self identifier];
    return (U32)_result;
}

// method '-[NSToolbar initWithIdentifier:]'
U32 env___IM_NSToolbar_initWithIdentifier_C(void *_instance, U32 _self, U32 identifierPointer) {
    id _t1 = (id)identifierPointer;
    id _result = (id)[(NSToolbar*)_self initWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSToolbar insertItemWithItemIdentifier:atIndex:]'
void env___IM_NSToolbar_insertItemWithItemIdentifier_CatIndex_C(void *_instance, U32 _self, U32 itemIdentifierPointer, U32 index) {
    id _t1 = (id)itemIdentifierPointer;
    [(NSToolbar*)_self insertItemWithItemIdentifier:_t1 atIndex:index];
}

// method '-[NSToolbar isVisible]'
U32 env___IM_NSToolbar_isVisible(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbar*)_self isVisible];
    return (U32)_result;
}

// method '-[NSToolbar items]'
U32 env___IM_NSToolbar_items(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbar*)_self items];
    return (U32)_result;
}

// method '-[NSToolbar removeItemAtIndex:]'
void env___IM_NSToolbar_removeItemAtIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSToolbar*)_self removeItemAtIndex:index];
}

// method '-[NSToolbar runCustomizationPalette:]'
void env___IM_NSToolbar_runCustomizationPalette_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSToolbar*)_self runCustomizationPalette:_t1];
}

// method '-[NSToolbar selectedItemIdentifier]'
U32 env___IM_NSToolbar_selectedItemIdentifier(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbar*)_self selectedItemIdentifier];
    return (U32)_result;
}

// method '-[NSToolbar setAllowsUserCustomization:]'
void env___IM_NSToolbar_setAllowsUserCustomization_C(void *_instance, U32 _self, U32 allowCustomization) {
    [(NSToolbar*)_self setAllowsUserCustomization:allowCustomization];
}

// method '-[NSToolbar setAutosavesConfiguration:]'
void env___IM_NSToolbar_setAutosavesConfiguration_C(void *_instance, U32 _self, U32 flag) {
    [(NSToolbar*)_self setAutosavesConfiguration:flag];
}

// method '-[NSToolbar setConfigurationFromDictionary:]'
void env___IM_NSToolbar_setConfigurationFromDictionary_C(void *_instance, U32 _self, U32 configDictPointer) {
    id _t1 = (id)configDictPointer;
    [(NSToolbar*)_self setConfigurationFromDictionary:_t1];
}

// method '-[NSToolbar setDelegate:]'
void env___IM_NSToolbar_setDelegate_C(void *_instance, U32 _self, U32 delegatePointer) {
    id _t1 = (id)delegatePointer;
    [(NSToolbar*)_self setDelegate:_t1];
}

// method '-[NSToolbar setDisplayMode:]'
void env___IM_NSToolbar_setDisplayMode_C(void *_instance, U32 _self, U32 displayMode) {
    [(NSToolbar*)_self setDisplayMode:displayMode];
}

// method '-[NSToolbar setSelectedItemIdentifier:]'
void env___IM_NSToolbar_setSelectedItemIdentifier_C(void *_instance, U32 _self, U32 itemIdentifierPointer) {
    id _t1 = (id)itemIdentifierPointer;
    [(NSToolbar*)_self setSelectedItemIdentifier:_t1];
}

// method '-[NSToolbar setShowsBaselineSeparator:]'
void env___IM_NSToolbar_setShowsBaselineSeparator_C(void *_instance, U32 _self, U32 flag) {
    [(NSToolbar*)_self setShowsBaselineSeparator:flag];
}

// method '-[NSToolbar setSizeMode:]'
void env___IM_NSToolbar_setSizeMode_C(void *_instance, U32 _self, U32 sizeMode) {
    [(NSToolbar*)_self setSizeMode:sizeMode];
}

// method '-[NSToolbar setVisible:]'
void env___IM_NSToolbar_setVisible_C(void *_instance, U32 _self, U32 shown) {
    [(NSToolbar*)_self setVisible:shown];
}

// method '-[NSToolbar showsBaselineSeparator]'
U32 env___IM_NSToolbar_showsBaselineSeparator(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbar*)_self showsBaselineSeparator];
    return (U32)_result;
}

// method '-[NSToolbar sizeMode]'
U32 env___IM_NSToolbar_sizeMode(void *_instance, U32 _self) {
    int _result = (int)[(NSToolbar*)_self sizeMode];
    return (U32)_result;
}

// method '-[NSToolbar validateVisibleItems]'
void env___IM_NSToolbar_validateVisibleItems(void *_instance, U32 _self) {
    [(NSToolbar*)_self validateVisibleItems];
}

// method '-[NSToolbar visibleItems]'
U32 env___IM_NSToolbar_visibleItems(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbar*)_self visibleItems];
    return (U32)_result;
}

// method '-[NSToolbarItem action]'
U32 env___IM_NSToolbarItem_action(void *_instance, U32 _self) {
    SEL _result = (SEL)[(NSToolbarItem*)_self action];
    return (U32)_result;
}

// method '-[NSToolbarItem allowsDuplicatesInToolbar]'
U32 env___IM_NSToolbarItem_allowsDuplicatesInToolbar(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbarItem*)_self allowsDuplicatesInToolbar];
    return (U32)_result;
}

// method '-[NSToolbarItem autovalidates]'
U32 env___IM_NSToolbarItem_autovalidates(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbarItem*)_self autovalidates];
    return (U32)_result;
}

// method '-[NSToolbarItem image]'
U32 env___IM_NSToolbarItem_image(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self image];
    return (U32)_result;
}

// method '-[NSToolbarItem initWithItemIdentifier:]'
U32 env___IM_NSToolbarItem_initWithItemIdentifier_C(void *_instance, U32 _self, U32 itemIdentifierPointer) {
    id _t1 = (id)itemIdentifierPointer;
    id _result = (id)[(NSToolbarItem*)_self initWithItemIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSToolbarItem isEnabled]'
U32 env___IM_NSToolbarItem_isEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSToolbarItem*)_self isEnabled];
    return (U32)_result;
}

// method '-[NSToolbarItem itemIdentifier]'
U32 env___IM_NSToolbarItem_itemIdentifier(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self itemIdentifier];
    return (U32)_result;
}

// method '-[NSToolbarItem label]'
U32 env___IM_NSToolbarItem_label(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self label];
    return (U32)_result;
}

// method '-[NSToolbarItem maxSize]'
void env___IM_NSToolbarItem_maxSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSToolbarItem*)_self maxSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSToolbarItem menuFormRepresentation]'
U32 env___IM_NSToolbarItem_menuFormRepresentation(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self menuFormRepresentation];
    return (U32)_result;
}

// method '-[NSToolbarItem minSize]'
void env___IM_NSToolbarItem_minSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSToolbarItem*)_self minSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSToolbarItem paletteLabel]'
U32 env___IM_NSToolbarItem_paletteLabel(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self paletteLabel];
    return (U32)_result;
}

// method '-[NSToolbarItem setAction:]'
void env___IM_NSToolbarItem_setAction_C(void *_instance, U32 _self, U32 actionPointer) {
    SEL _t1 = (SEL)actionPointer;
    [(NSToolbarItem*)_self setAction:_t1];
}

// method '-[NSToolbarItem setAutovalidates:]'
void env___IM_NSToolbarItem_setAutovalidates_C(void *_instance, U32 _self, U32 resistance) {
    [(NSToolbarItem*)_self setAutovalidates:resistance];
}

// method '-[NSToolbarItem setEnabled:]'
void env___IM_NSToolbarItem_setEnabled_C(void *_instance, U32 _self, U32 enabled) {
    [(NSToolbarItem*)_self setEnabled:enabled];
}

// method '-[NSToolbarItem setImage:]'
void env___IM_NSToolbarItem_setImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSToolbarItem*)_self setImage:_t1];
}

// method '-[NSToolbarItem setLabel:]'
void env___IM_NSToolbarItem_setLabel_C(void *_instance, U32 _self, U32 labelPointer) {
    id _t1 = (id)labelPointer;
    [(NSToolbarItem*)_self setLabel:_t1];
}

// method '-[NSToolbarItem setMaxSize:]'
void env___IM_NSToolbarItem_setMaxSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSToolbarItem*)_self setMaxSize:_t1];
}

// method '-[NSToolbarItem setMenuFormRepresentation:]'
void env___IM_NSToolbarItem_setMenuFormRepresentation_C(void *_instance, U32 _self, U32 menuItemPointer) {
    id _t1 = (id)menuItemPointer;
    [(NSToolbarItem*)_self setMenuFormRepresentation:_t1];
}

// method '-[NSToolbarItem setMinSize:]'
void env___IM_NSToolbarItem_setMinSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSToolbarItem*)_self setMinSize:_t1];
}

// method '-[NSToolbarItem setPaletteLabel:]'
void env___IM_NSToolbarItem_setPaletteLabel_C(void *_instance, U32 _self, U32 paletteLabelPointer) {
    id _t1 = (id)paletteLabelPointer;
    [(NSToolbarItem*)_self setPaletteLabel:_t1];
}

// method '-[NSToolbarItem setTag:]'
void env___IM_NSToolbarItem_setTag_C(void *_instance, U32 _self, U32 tag) {
    [(NSToolbarItem*)_self setTag:tag];
}

// method '-[NSToolbarItem setTarget:]'
void env___IM_NSToolbarItem_setTarget_C(void *_instance, U32 _self, U32 targetPointer) {
    id _t1 = (id)targetPointer;
    [(NSToolbarItem*)_self setTarget:_t1];
}

// method '-[NSToolbarItem setToolTip:]'
void env___IM_NSToolbarItem_setToolTip_C(void *_instance, U32 _self, U32 toolTipPointer) {
    id _t1 = (id)toolTipPointer;
    [(NSToolbarItem*)_self setToolTip:_t1];
}

// method '-[NSToolbarItem setView:]'
void env___IM_NSToolbarItem_setView_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSToolbarItem*)_self setView:_t1];
}

// method '-[NSToolbarItem setVisibilityPriority:]'
void env___IM_NSToolbarItem_setVisibilityPriority_C(void *_instance, U32 _self, U32 visibilityPriority) {
    [(NSToolbarItem*)_self setVisibilityPriority:visibilityPriority];
}

// method '-[NSToolbarItem tag]'
U32 env___IM_NSToolbarItem_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSToolbarItem*)_self tag];
    return (U32)_result;
}

// method '-[NSToolbarItem target]'
U32 env___IM_NSToolbarItem_target(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self target];
    return (U32)_result;
}

// method '-[NSToolbarItem toolTip]'
U32 env___IM_NSToolbarItem_toolTip(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self toolTip];
    return (U32)_result;
}

// method '-[NSToolbarItem toolbar]'
U32 env___IM_NSToolbarItem_toolbar(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self toolbar];
    return (U32)_result;
}

// method '-[NSToolbarItem validate]'
void env___IM_NSToolbarItem_validate(void *_instance, U32 _self) {
    [(NSToolbarItem*)_self validate];
}

// method '-[NSToolbarItem view]'
U32 env___IM_NSToolbarItem_view(void *_instance, U32 _self) {
    id _result = (id)[(NSToolbarItem*)_self view];
    return (U32)_result;
}

// method '-[NSToolbarItem visibilityPriority]'
U32 env___IM_NSToolbarItem_visibilityPriority(void *_instance, U32 _self) {
    int _result = (int)[(NSToolbarItem*)_self visibilityPriority];
    return (U32)_result;
}

// method '-[NSTreeController add:]'
void env___IM_NSTreeController_add_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTreeController*)_self add:_t1];
}

// method '-[NSTreeController addChild:]'
void env___IM_NSTreeController_addChild_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTreeController*)_self addChild:_t1];
}

// method '-[NSTreeController addSelectionIndexPaths:]'
U32 env___IM_NSTreeController_addSelectionIndexPaths_C(void *_instance, U32 _self, U32 indexPathsPointer) {
    id _t1 = (id)indexPathsPointer;
    BOOL _result = (BOOL)[(NSTreeController*)_self addSelectionIndexPaths:_t1];
    return (U32)_result;
}

// method '-[NSTreeController alwaysUsesMultipleValuesMarker]'
U32 env___IM_NSTreeController_alwaysUsesMultipleValuesMarker(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self alwaysUsesMultipleValuesMarker];
    return (U32)_result;
}

// method '-[NSTreeController arrangedObjects]'
U32 env___IM_NSTreeController_arrangedObjects(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self arrangedObjects];
    return (U32)_result;
}

// method '-[NSTreeController avoidsEmptySelection]'
U32 env___IM_NSTreeController_avoidsEmptySelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self avoidsEmptySelection];
    return (U32)_result;
}

// method '-[NSTreeController canAddChild]'
U32 env___IM_NSTreeController_canAddChild(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self canAddChild];
    return (U32)_result;
}

// method '-[NSTreeController canInsert]'
U32 env___IM_NSTreeController_canInsert(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self canInsert];
    return (U32)_result;
}

// method '-[NSTreeController canInsertChild]'
U32 env___IM_NSTreeController_canInsertChild(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self canInsertChild];
    return (U32)_result;
}

// method '-[NSTreeController childrenKeyPath]'
U32 env___IM_NSTreeController_childrenKeyPath(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self childrenKeyPath];
    return (U32)_result;
}

// method '-[NSTreeController content]'
U32 env___IM_NSTreeController_content(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self content];
    return (U32)_result;
}

// method '-[NSTreeController countKeyPath]'
U32 env___IM_NSTreeController_countKeyPath(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self countKeyPath];
    return (U32)_result;
}

// method '-[NSTreeController insert:]'
void env___IM_NSTreeController_insert_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTreeController*)_self insert:_t1];
}

// method '-[NSTreeController insertChild:]'
void env___IM_NSTreeController_insertChild_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTreeController*)_self insertChild:_t1];
}

// method '-[NSTreeController insertObject:atArrangedObjectIndexPath:]'
void env___IM_NSTreeController_insertObject_CatArrangedObjectIndexPath_C(void *_instance, U32 _self, U32 objectPointer, U32 indexPathPointer) {
    id _t1 = (id)objectPointer;
    id _t2 = (id)indexPathPointer;
    [(NSTreeController*)_self insertObject:_t1 atArrangedObjectIndexPath:_t2];
}

// method '-[NSTreeController insertObjects:atArrangedObjectIndexPaths:]'
void env___IM_NSTreeController_insertObjects_CatArrangedObjectIndexPaths_C(void *_instance, U32 _self, U32 objectsPointer, U32 indexPathsPointer) {
    id _t1 = (id)objectsPointer;
    id _t2 = (id)indexPathsPointer;
    [(NSTreeController*)_self insertObjects:_t1 atArrangedObjectIndexPaths:_t2];
}

// method '-[NSTreeController leafKeyPath]'
U32 env___IM_NSTreeController_leafKeyPath(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self leafKeyPath];
    return (U32)_result;
}

// method '-[NSTreeController preservesSelection]'
U32 env___IM_NSTreeController_preservesSelection(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self preservesSelection];
    return (U32)_result;
}

// method '-[NSTreeController rearrangeObjects]'
void env___IM_NSTreeController_rearrangeObjects(void *_instance, U32 _self) {
    [(NSTreeController*)_self rearrangeObjects];
}

// method '-[NSTreeController remove:]'
void env___IM_NSTreeController_remove_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSTreeController*)_self remove:_t1];
}

// method '-[NSTreeController removeObjectAtArrangedObjectIndexPath:]'
void env___IM_NSTreeController_removeObjectAtArrangedObjectIndexPath_C(void *_instance, U32 _self, U32 indexPathPointer) {
    id _t1 = (id)indexPathPointer;
    [(NSTreeController*)_self removeObjectAtArrangedObjectIndexPath:_t1];
}

// method '-[NSTreeController removeObjectsAtArrangedObjectIndexPaths:]'
void env___IM_NSTreeController_removeObjectsAtArrangedObjectIndexPaths_C(void *_instance, U32 _self, U32 indexPathsPointer) {
    id _t1 = (id)indexPathsPointer;
    [(NSTreeController*)_self removeObjectsAtArrangedObjectIndexPaths:_t1];
}

// method '-[NSTreeController removeSelectionIndexPaths:]'
U32 env___IM_NSTreeController_removeSelectionIndexPaths_C(void *_instance, U32 _self, U32 indexPathsPointer) {
    id _t1 = (id)indexPathsPointer;
    BOOL _result = (BOOL)[(NSTreeController*)_self removeSelectionIndexPaths:_t1];
    return (U32)_result;
}

// method '-[NSTreeController selectedObjects]'
U32 env___IM_NSTreeController_selectedObjects(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self selectedObjects];
    return (U32)_result;
}

// method '-[NSTreeController selectionIndexPath]'
U32 env___IM_NSTreeController_selectionIndexPath(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self selectionIndexPath];
    return (U32)_result;
}

// method '-[NSTreeController selectionIndexPaths]'
U32 env___IM_NSTreeController_selectionIndexPaths(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self selectionIndexPaths];
    return (U32)_result;
}

// method '-[NSTreeController selectsInsertedObjects]'
U32 env___IM_NSTreeController_selectsInsertedObjects(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTreeController*)_self selectsInsertedObjects];
    return (U32)_result;
}

// method '-[NSTreeController setAlwaysUsesMultipleValuesMarker:]'
void env___IM_NSTreeController_setAlwaysUsesMultipleValuesMarker_C(void *_instance, U32 _self, U32 flag) {
    [(NSTreeController*)_self setAlwaysUsesMultipleValuesMarker:flag];
}

// method '-[NSTreeController setAvoidsEmptySelection:]'
void env___IM_NSTreeController_setAvoidsEmptySelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSTreeController*)_self setAvoidsEmptySelection:flag];
}

// method '-[NSTreeController setChildrenKeyPath:]'
void env___IM_NSTreeController_setChildrenKeyPath_C(void *_instance, U32 _self, U32 keyPathPointer) {
    id _t1 = (id)keyPathPointer;
    [(NSTreeController*)_self setChildrenKeyPath:_t1];
}

// method '-[NSTreeController setContent:]'
void env___IM_NSTreeController_setContent_C(void *_instance, U32 _self, U32 contentPointer) {
    id _t1 = (id)contentPointer;
    [(NSTreeController*)_self setContent:_t1];
}

// method '-[NSTreeController setCountKeyPath:]'
void env___IM_NSTreeController_setCountKeyPath_C(void *_instance, U32 _self, U32 keyPathPointer) {
    id _t1 = (id)keyPathPointer;
    [(NSTreeController*)_self setCountKeyPath:_t1];
}

// method '-[NSTreeController setLeafKeyPath:]'
void env___IM_NSTreeController_setLeafKeyPath_C(void *_instance, U32 _self, U32 keyPathPointer) {
    id _t1 = (id)keyPathPointer;
    [(NSTreeController*)_self setLeafKeyPath:_t1];
}

// method '-[NSTreeController setPreservesSelection:]'
void env___IM_NSTreeController_setPreservesSelection_C(void *_instance, U32 _self, U32 flag) {
    [(NSTreeController*)_self setPreservesSelection:flag];
}

// method '-[NSTreeController setSelectionIndexPath:]'
U32 env___IM_NSTreeController_setSelectionIndexPath_C(void *_instance, U32 _self, U32 indexPathPointer) {
    id _t1 = (id)indexPathPointer;
    BOOL _result = (BOOL)[(NSTreeController*)_self setSelectionIndexPath:_t1];
    return (U32)_result;
}

// method '-[NSTreeController setSelectionIndexPaths:]'
U32 env___IM_NSTreeController_setSelectionIndexPaths_C(void *_instance, U32 _self, U32 indexPathsPointer) {
    id _t1 = (id)indexPathsPointer;
    BOOL _result = (BOOL)[(NSTreeController*)_self setSelectionIndexPaths:_t1];
    return (U32)_result;
}

// method '-[NSTreeController setSelectsInsertedObjects:]'
void env___IM_NSTreeController_setSelectsInsertedObjects_C(void *_instance, U32 _self, U32 flag) {
    [(NSTreeController*)_self setSelectsInsertedObjects:flag];
}

// method '-[NSTreeController setSortDescriptors:]'
void env___IM_NSTreeController_setSortDescriptors_C(void *_instance, U32 _self, U32 sortDescriptorsPointer) {
    id _t1 = (id)sortDescriptorsPointer;
    [(NSTreeController*)_self setSortDescriptors:_t1];
}

// method '-[NSTreeController sortDescriptors]'
U32 env___IM_NSTreeController_sortDescriptors(void *_instance, U32 _self) {
    id _result = (id)[(NSTreeController*)_self sortDescriptors];
    return (U32)_result;
}

// method '-[NSTypesetter actionForControlCharacterAtIndex:]'
U32 env___IM_NSTypesetter_actionForControlCharacterAtIndex_C(void *_instance, U32 _self, U32 charIndex) {
    int _result = (int)[(NSTypesetter*)_self actionForControlCharacterAtIndex:charIndex];
    return (U32)_result;
}

// method '-[NSTypesetter attributedString]'
U32 env___IM_NSTypesetter_attributedString(void *_instance, U32 _self) {
    id _result = (id)[(NSTypesetter*)_self attributedString];
    return (U32)_result;
}

// method '-[NSTypesetter attributesForExtraLineFragment]'
U32 env___IM_NSTypesetter_attributesForExtraLineFragment(void *_instance, U32 _self) {
    id _result = (id)[(NSTypesetter*)_self attributesForExtraLineFragment];
    return (U32)_result;
}

// method '-[NSTypesetter baselineOffsetInLayoutManager:glyphIndex:]'
F32 env___IM_NSTypesetter_baselineOffsetInLayoutManager_CglyphIndex_C(void *_instance, U32 _self, U32 layoutMgrPointer, U32 glyphIndex) {
    id _t1 = (id)layoutMgrPointer;
    float _result = (float)[(NSTypesetter*)_self baselineOffsetInLayoutManager:_t1 glyphIndex:glyphIndex];
    return (F32)_result;
}

// method '-[NSTypesetter beginLineWithGlyphAtIndex:]'
void env___IM_NSTypesetter_beginLineWithGlyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    [(NSTypesetter*)_self beginLineWithGlyphAtIndex:glyphIndex];
}

// method '-[NSTypesetter beginParagraph]'
void env___IM_NSTypesetter_beginParagraph(void *_instance, U32 _self) {
    [(NSTypesetter*)_self beginParagraph];
}

// method '-[NSTypesetter bidiProcessingEnabled]'
U32 env___IM_NSTypesetter_bidiProcessingEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTypesetter*)_self bidiProcessingEnabled];
    return (U32)_result;
}

// method '-[NSTypesetter boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:]'
void env___IM_NSTypesetter_boundingBoxForControlGlyphAtIndex_CforTextContainer_CproposedLineFragment_CglyphPosition_CcharacterIndex_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphIndex, U32 textContainerPointer, U32 proposedRectIndirect, U32 glyphPositionIndirect, U32 charIndex) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)textContainerPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + proposedRectIndirect);
    NSPoint _t3 = *(NSPoint*)(_mem->data + glyphPositionIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    NSRect _result = (NSRect)[(NSTypesetter*)_self boundingBoxForControlGlyphAtIndex:glyphIndex forTextContainer:_t1 proposedLineFragment:_t2 glyphPosition:_t3 characterIndex:charIndex];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter characterRangeForGlyphRange:actualGlyphRange:]'
void env___IM_NSTypesetter_characterRangeForGlyphRange_CactualGlyphRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 glyphRangeIndirect, U32 actualGlyphRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRangePointer _t2 = (NSRangePointer)actualGlyphRangePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRange _result = (NSRange)[(NSTypesetter*)_self characterRangeForGlyphRange:_t1 actualGlyphRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter currentParagraphStyle]'
U32 env___IM_NSTypesetter_currentParagraphStyle(void *_instance, U32 _self) {
    id _result = (id)[(NSTypesetter*)_self currentParagraphStyle];
    return (U32)_result;
}

// method '-[NSTypesetter currentTextContainer]'
U32 env___IM_NSTypesetter_currentTextContainer(void *_instance, U32 _self) {
    id _result = (id)[(NSTypesetter*)_self currentTextContainer];
    return (U32)_result;
}

// method '+[NSTypesetter defaultTypesetterBehavior]'
U32 env___CM_NSTypesetter_defaultTypesetterBehavior(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultTypesetterBehavior];
    return (U32)_result;
}

// method '-[NSTypesetter deleteGlyphsInRange:]'
void env___IM_NSTypesetter_deleteGlyphsInRange_C(void *_instance, U32 _self, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTypesetter*)_self deleteGlyphsInRange:_t1];
}

// method '-[NSTypesetter endLineWithGlyphRange:]'
void env___IM_NSTypesetter_endLineWithGlyphRange_C(void *_instance, U32 _self, U32 lineGlyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + lineGlyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTypesetter*)_self endLineWithGlyphRange:_t1];
}

// method '-[NSTypesetter endParagraph]'
void env___IM_NSTypesetter_endParagraph(void *_instance, U32 _self) {
    [(NSTypesetter*)_self endParagraph];
}

// method '-[NSTypesetter getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:]'
void env___IM_NSTypesetter_getLineFragmentRect_CusedRect_CforParagraphSeparatorGlyphRange_CatProposedOrigin_C(void *_instance, U32 _self, U32 lineFragmentRectPointer, U32 lineFragmentUsedRectPointer, U32 paragraphSeparatorGlyphRangeIndirect, U32 lineOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRectPointer _t1 = (NSRectPointer)lineFragmentRectPointer;
    NSRectPointer _t2 = (NSRectPointer)lineFragmentUsedRectPointer;
    NSRange _t3 = *(NSRange*)(_mem->data + paragraphSeparatorGlyphRangeIndirect);
    NSPoint _t4 = *(NSPoint*)(_mem->data + lineOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t3.location);
    swap_I(&_t3.length);
    swap_f(&_t4.x);
    swap_f(&_t4.y);
    #endif
    [(NSTypesetter*)_self getLineFragmentRect:_t1 usedRect:_t2 forParagraphSeparatorGlyphRange:_t3 atProposedOrigin:_t4];
}

// method '-[NSTypesetter getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:]'
void env___IM_NSTypesetter_getLineFragmentRect_CusedRect_CremainingRect_CforStartingGlyphAtIndex_CproposedRect_ClineSpacing_CparagraphSpacingBefore_CparagraphSpacingAfter_C(void *_instance, U32 _self, U32 lineFragmentRectPointer, U32 lineFragmentUsedRectPointer, U32 remainingRectPointer, U32 startingGlyphIndex, U32 proposedRectIndirect, F32 lineSpacing, F32 paragraphSpacingBefore, F32 paragraphSpacingAfter) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRectPointer _t1 = (NSRectPointer)lineFragmentRectPointer;
    NSRectPointer _t2 = (NSRectPointer)lineFragmentUsedRectPointer;
    NSRectPointer _t3 = (NSRectPointer)remainingRectPointer;
    NSRect _t4 = *(NSRect*)(_mem->data + proposedRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t4.origin.x);
    swap_f(&_t4.origin.y);
    swap_f(&_t4.size.width);
    swap_f(&_t4.size.height);
    #endif
    [(NSTypesetter*)_self getLineFragmentRect:_t1 usedRect:_t2 remainingRect:_t3 forStartingGlyphAtIndex:startingGlyphIndex proposedRect:_t4 lineSpacing:lineSpacing paragraphSpacingBefore:paragraphSpacingBefore paragraphSpacingAfter:paragraphSpacingAfter];
}

// method '-[NSTypesetter glyphRangeForCharacterRange:actualCharacterRange:]'
void env___IM_NSTypesetter_glyphRangeForCharacterRange_CactualCharacterRange_C(void *_instance, U32 _resultIndirect, U32 _self, U32 charRangeIndirect, U32 actualCharRangePointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + charRangeIndirect);
    NSRangePointer _t2 = (NSRangePointer)actualCharRangePointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    NSRange _result = (NSRange)[(NSTypesetter*)_self glyphRangeForCharacterRange:_t1 actualCharacterRange:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter hyphenCharacterForGlyphAtIndex:]'
U32 env___IM_NSTypesetter_hyphenCharacterForGlyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    unsigned long _result = (unsigned long)[(NSTypesetter*)_self hyphenCharacterForGlyphAtIndex:glyphIndex];
    return (U32)_result;
}

// method '-[NSTypesetter hyphenationFactor]'
F32 env___IM_NSTypesetter_hyphenationFactor(void *_instance, U32 _self) {
    float _result = (float)[(NSTypesetter*)_self hyphenationFactor];
    return (F32)_result;
}

// method '-[NSTypesetter hyphenationFactorForGlyphAtIndex:]'
F32 env___IM_NSTypesetter_hyphenationFactorForGlyphAtIndex_C(void *_instance, U32 _self, U32 glyphIndex) {
    float _result = (float)[(NSTypesetter*)_self hyphenationFactorForGlyphAtIndex:glyphIndex];
    return (F32)_result;
}

// method '-[NSTypesetter insertGlyph:atGlyphIndex:characterIndex:]'
void env___IM_NSTypesetter_insertGlyph_CatGlyphIndex_CcharacterIndex_C(void *_instance, U32 _self, U32 glyph, U32 glyphIndex, U32 characterIndex) {
    [(NSTypesetter*)_self insertGlyph:glyph atGlyphIndex:glyphIndex characterIndex:characterIndex];
}

// method '-[NSTypesetter layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:]'
void env___IM_NSTypesetter_layoutGlyphsInLayoutManager_CstartingAtGlyphIndex_CmaxNumberOfLineFragments_CnextGlyphIndex_C(void *_instance, U32 _self, U32 layoutManagerPointer, U32 startGlyphIndex, U32 maxNumLines, U32 nextGlyphPointer) {
    id _t1 = (id)layoutManagerPointer;
    unsigned int* _t2 = (unsigned int*)nextGlyphPointer;
    [(NSTypesetter*)_self layoutGlyphsInLayoutManager:_t1 startingAtGlyphIndex:startGlyphIndex maxNumberOfLineFragments:maxNumLines nextGlyphIndex:_t2];
}

// method '-[NSTypesetter layoutManager]'
U32 env___IM_NSTypesetter_layoutManager(void *_instance, U32 _self) {
    id _result = (id)[(NSTypesetter*)_self layoutManager];
    return (U32)_result;
}

// method '-[NSTypesetter layoutParagraphAtPoint:]'
U32 env___IM_NSTypesetter_layoutParagraphAtPoint_C(void *_instance, U32 _self, U32 lineFragmentOriginPointer) {
    NSPointPointer _t1 = (NSPointPointer)lineFragmentOriginPointer;
    unsigned int _result = (unsigned int)[(NSTypesetter*)_self layoutParagraphAtPoint:_t1];
    return (U32)_result;
}

// method '-[NSTypesetter lineFragmentPadding]'
F32 env___IM_NSTypesetter_lineFragmentPadding(void *_instance, U32 _self) {
    float _result = (float)[(NSTypesetter*)_self lineFragmentPadding];
    return (F32)_result;
}

// method '-[NSTypesetter lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:]'
F32 env___IM_NSTypesetter_lineSpacingAfterGlyphAtIndex_CwithProposedLineFragmentRect_C(void *_instance, U32 _self, U32 glyphIndex, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    float _result = (float)[(NSTypesetter*)_self lineSpacingAfterGlyphAtIndex:glyphIndex withProposedLineFragmentRect:_t1];
    return (F32)_result;
}

// method '-[NSTypesetter paragraphCharacterRange]'
void env___IM_NSTypesetter_paragraphCharacterRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTypesetter*)_self paragraphCharacterRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter paragraphGlyphRange]'
void env___IM_NSTypesetter_paragraphGlyphRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTypesetter*)_self paragraphGlyphRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter paragraphSeparatorCharacterRange]'
void env___IM_NSTypesetter_paragraphSeparatorCharacterRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTypesetter*)_self paragraphSeparatorCharacterRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter paragraphSeparatorGlyphRange]'
void env___IM_NSTypesetter_paragraphSeparatorGlyphRange(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _result = (NSRange)[(NSTypesetter*)_self paragraphSeparatorGlyphRange];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_result.location);
    swap_I(&_result.length);
    #endif
    *(NSRange*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:]'
F32 env___IM_NSTypesetter_paragraphSpacingAfterGlyphAtIndex_CwithProposedLineFragmentRect_C(void *_instance, U32 _self, U32 glyphIndex, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    float _result = (float)[(NSTypesetter*)_self paragraphSpacingAfterGlyphAtIndex:glyphIndex withProposedLineFragmentRect:_t1];
    return (F32)_result;
}

// method '-[NSTypesetter paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:]'
F32 env___IM_NSTypesetter_paragraphSpacingBeforeGlyphAtIndex_CwithProposedLineFragmentRect_C(void *_instance, U32 _self, U32 glyphIndex, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    float _result = (float)[(NSTypesetter*)_self paragraphSpacingBeforeGlyphAtIndex:glyphIndex withProposedLineFragmentRect:_t1];
    return (F32)_result;
}

// method '+[NSTypesetter printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:]'
void env___CM_NSTypesetter_printingAdjustmentInLayoutManager_CforNominallySpacedGlyphRange_CpackedGlyphs_Ccount_C(void *_instance, U32 _resultIndirect, U32 _class, U32 layoutMgrPointer, U32 nominallySpacedGlyphsRangeIndirect, U32 packedGlyphsPointer, U32 packedGlyphsCount) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)layoutMgrPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + nominallySpacedGlyphsRangeIndirect);
    const unsigned char* _t3 = (const unsigned char*)packedGlyphsPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    NSSize _result = (NSSize)[(Class)_class printingAdjustmentInLayoutManager:_t1 forNominallySpacedGlyphRange:_t2 packedGlyphs:_t3 count:packedGlyphsCount];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSTypesetter setAttachmentSize:forGlyphRange:]'
void env___IM_NSTypesetter_setAttachmentSize_CforGlyphRange_C(void *_instance, U32 _self, U32 attachmentSizeIndirect, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + attachmentSizeIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSTypesetter*)_self setAttachmentSize:_t1 forGlyphRange:_t2];
}

// method '-[NSTypesetter setAttributedString:]'
void env___IM_NSTypesetter_setAttributedString_C(void *_instance, U32 _self, U32 attrStringPointer) {
    id _t1 = (id)attrStringPointer;
    [(NSTypesetter*)_self setAttributedString:_t1];
}

// method '-[NSTypesetter setBidiProcessingEnabled:]'
void env___IM_NSTypesetter_setBidiProcessingEnabled_C(void *_instance, U32 _self, U32 flag) {
    [(NSTypesetter*)_self setBidiProcessingEnabled:flag];
}

// method '-[NSTypesetter setDrawsOutsideLineFragment:forGlyphRange:]'
void env___IM_NSTypesetter_setDrawsOutsideLineFragment_CforGlyphRange_C(void *_instance, U32 _self, U32 flag, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTypesetter*)_self setDrawsOutsideLineFragment:flag forGlyphRange:_t1];
}

// method '-[NSTypesetter setHardInvalidation:forGlyphRange:]'
void env___IM_NSTypesetter_setHardInvalidation_CforGlyphRange_C(void *_instance, U32 _self, U32 flag, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTypesetter*)_self setHardInvalidation:flag forGlyphRange:_t1];
}

// method '-[NSTypesetter setHyphenationFactor:]'
void env___IM_NSTypesetter_setHyphenationFactor_C(void *_instance, U32 _self, F32 factor) {
    [(NSTypesetter*)_self setHyphenationFactor:factor];
}

// method '-[NSTypesetter setLineFragmentPadding:]'
void env___IM_NSTypesetter_setLineFragmentPadding_C(void *_instance, U32 _self, F32 padding) {
    [(NSTypesetter*)_self setLineFragmentPadding:padding];
}

// method '-[NSTypesetter setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:]'
void env___IM_NSTypesetter_setLineFragmentRect_CforGlyphRange_CusedRect_CbaselineOffset_C(void *_instance, U32 _self, U32 fragmentRectIndirect, U32 glyphRangeIndirect, U32 usedRectIndirect, F32 baselineOffset) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + fragmentRectIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRect _t3 = *(NSRect*)(_mem->data + usedRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    swap_f(&_t3.origin.x);
    swap_f(&_t3.origin.y);
    swap_f(&_t3.size.width);
    swap_f(&_t3.size.height);
    #endif
    [(NSTypesetter*)_self setLineFragmentRect:_t1 forGlyphRange:_t2 usedRect:_t3 baselineOffset:baselineOffset];
}

// method '-[NSTypesetter setNotShownAttribute:forGlyphRange:]'
void env___IM_NSTypesetter_setNotShownAttribute_CforGlyphRange_C(void *_instance, U32 _self, U32 flag, U32 glyphRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    #endif
    [(NSTypesetter*)_self setNotShownAttribute:flag forGlyphRange:_t1];
}

// method '-[NSTypesetter setParagraphGlyphRange:separatorGlyphRange:]'
void env___IM_NSTypesetter_setParagraphGlyphRange_CseparatorGlyphRange_C(void *_instance, U32 _self, U32 paragraphRangeIndirect, U32 paragraphSeparatorRangeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRange _t1 = *(NSRange*)(_mem->data + paragraphRangeIndirect);
    NSRange _t2 = *(NSRange*)(_mem->data + paragraphSeparatorRangeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t1.location);
    swap_I(&_t1.length);
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSTypesetter*)_self setParagraphGlyphRange:_t1 separatorGlyphRange:_t2];
}

// method '-[NSTypesetter setTypesetterBehavior:]'
void env___IM_NSTypesetter_setTypesetterBehavior_C(void *_instance, U32 _self, U32 behavior) {
    [(NSTypesetter*)_self setTypesetterBehavior:behavior];
}

// method '-[NSTypesetter setUsesFontLeading:]'
void env___IM_NSTypesetter_setUsesFontLeading_C(void *_instance, U32 _self, U32 flag) {
    [(NSTypesetter*)_self setUsesFontLeading:flag];
}

// method '+[NSTypesetter sharedSystemTypesetter]'
U32 env___CM_NSTypesetter_sharedSystemTypesetter(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedSystemTypesetter];
    return (U32)_result;
}

// method '+[NSTypesetter sharedSystemTypesetterForBehavior:]'
U32 env___CM_NSTypesetter_sharedSystemTypesetterForBehavior_C(void *_instance, U32 _class, U32 theBehavior) {
    id _result = (id)[(Class)_class sharedSystemTypesetterForBehavior:theBehavior];
    return (U32)_result;
}

// method '-[NSTypesetter shouldBreakLineByHyphenatingBeforeCharacterAtIndex:]'
U32 env___IM_NSTypesetter_shouldBreakLineByHyphenatingBeforeCharacterAtIndex_C(void *_instance, U32 _self, U32 charIndex) {
    BOOL _result = (BOOL)[(NSTypesetter*)_self shouldBreakLineByHyphenatingBeforeCharacterAtIndex:charIndex];
    return (U32)_result;
}

// method '-[NSTypesetter shouldBreakLineByWordBeforeCharacterAtIndex:]'
U32 env___IM_NSTypesetter_shouldBreakLineByWordBeforeCharacterAtIndex_C(void *_instance, U32 _self, U32 charIndex) {
    BOOL _result = (BOOL)[(NSTypesetter*)_self shouldBreakLineByWordBeforeCharacterAtIndex:charIndex];
    return (U32)_result;
}

// method '-[NSTypesetter substituteFontForFont:]'
U32 env___IM_NSTypesetter_substituteFontForFont_C(void *_instance, U32 _self, U32 originalFontPointer) {
    id _t1 = (id)originalFontPointer;
    id _result = (id)[(NSTypesetter*)_self substituteFontForFont:_t1];
    return (U32)_result;
}

// method '-[NSTypesetter textContainers]'
U32 env___IM_NSTypesetter_textContainers(void *_instance, U32 _self) {
    id _result = (id)[(NSTypesetter*)_self textContainers];
    return (U32)_result;
}

// method '-[NSTypesetter textTabForGlyphLocation:writingDirection:maxLocation:]'
U32 env___IM_NSTypesetter_textTabForGlyphLocation_CwritingDirection_CmaxLocation_C(void *_instance, U32 _self, F32 glyphLocation, U32 direction, F32 maxLocation) {
    id _result = (id)[(NSTypesetter*)_self textTabForGlyphLocation:glyphLocation writingDirection:direction maxLocation:maxLocation];
    return (U32)_result;
}

// method '-[NSTypesetter typesetterBehavior]'
U32 env___IM_NSTypesetter_typesetterBehavior(void *_instance, U32 _self) {
    int _result = (int)[(NSTypesetter*)_self typesetterBehavior];
    return (U32)_result;
}

// method '-[NSTypesetter usesFontLeading]'
U32 env___IM_NSTypesetter_usesFontLeading(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSTypesetter*)_self usesFontLeading];
    return (U32)_result;
}

// method '-[NSTypesetter willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:]'
void env___IM_NSTypesetter_willSetLineFragmentRect_CforGlyphRange_CusedRect_CbaselineOffset_C(void *_instance, U32 _self, U32 lineRectPointer, U32 glyphRangeIndirect, U32 usedRectPointer, U32 baselineOffsetPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRectPointer _t1 = (NSRectPointer)lineRectPointer;
    NSRange _t2 = *(NSRange*)(_mem->data + glyphRangeIndirect);
    NSRectPointer _t3 = (NSRectPointer)usedRectPointer;
    float* _t4 = (float*)baselineOffsetPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_I(&_t2.location);
    swap_I(&_t2.length);
    #endif
    [(NSTypesetter*)_self willSetLineFragmentRect:_t1 forGlyphRange:_t2 usedRect:_t3 baselineOffset:_t4];
}

// method '+[NSURL URLFromPasteboard:]'
U32 env___CM_NSURL_URLFromPasteboard_C(void *_instance, U32 _class, U32 pasteBoardPointer) {
    id _t1 = (id)pasteBoardPointer;
    id _result = (id)[(Class)_class URLFromPasteboard:_t1];
    return (U32)_result;
}

// method '-[NSURL writeToPasteboard:]'
void env___IM_NSURL_writeToPasteboard_C(void *_instance, U32 _self, U32 pasteBoardPointer) {
    id _t1 = (id)pasteBoardPointer;
    [(NSURL*)_self writeToPasteboard:_t1];
}

// method '-[NSUserDefaultsController appliesImmediately]'
U32 env___IM_NSUserDefaultsController_appliesImmediately(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSUserDefaultsController*)_self appliesImmediately];
    return (U32)_result;
}

// method '-[NSUserDefaultsController defaults]'
U32 env___IM_NSUserDefaultsController_defaults(void *_instance, U32 _self) {
    id _result = (id)[(NSUserDefaultsController*)_self defaults];
    return (U32)_result;
}

// method '-[NSUserDefaultsController hasUnappliedChanges]'
U32 env___IM_NSUserDefaultsController_hasUnappliedChanges(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSUserDefaultsController*)_self hasUnappliedChanges];
    return (U32)_result;
}

// method '-[NSUserDefaultsController initWithDefaults:initialValues:]'
U32 env___IM_NSUserDefaultsController_initWithDefaults_CinitialValues_C(void *_instance, U32 _self, U32 defaultsPointer, U32 initialValuesPointer) {
    id _t1 = (id)defaultsPointer;
    id _t2 = (id)initialValuesPointer;
    id _result = (id)[(NSUserDefaultsController*)_self initWithDefaults:_t1 initialValues:_t2];
    return (U32)_result;
}

// method '-[NSUserDefaultsController initialValues]'
U32 env___IM_NSUserDefaultsController_initialValues(void *_instance, U32 _self) {
    id _result = (id)[(NSUserDefaultsController*)_self initialValues];
    return (U32)_result;
}

// method '-[NSUserDefaultsController revert:]'
void env___IM_NSUserDefaultsController_revert_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSUserDefaultsController*)_self revert:_t1];
}

// method '-[NSUserDefaultsController revertToInitialValues:]'
void env___IM_NSUserDefaultsController_revertToInitialValues_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSUserDefaultsController*)_self revertToInitialValues:_t1];
}

// method '-[NSUserDefaultsController save:]'
void env___IM_NSUserDefaultsController_save_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSUserDefaultsController*)_self save:_t1];
}

// method '-[NSUserDefaultsController setAppliesImmediately:]'
void env___IM_NSUserDefaultsController_setAppliesImmediately_C(void *_instance, U32 _self, U32 flag) {
    [(NSUserDefaultsController*)_self setAppliesImmediately:flag];
}

// method '-[NSUserDefaultsController setInitialValues:]'
void env___IM_NSUserDefaultsController_setInitialValues_C(void *_instance, U32 _self, U32 initialValuesPointer) {
    id _t1 = (id)initialValuesPointer;
    [(NSUserDefaultsController*)_self setInitialValues:_t1];
}

// method '+[NSUserDefaultsController sharedUserDefaultsController]'
U32 env___CM_NSUserDefaultsController_sharedUserDefaultsController(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedUserDefaultsController];
    return (U32)_result;
}

// method '-[NSUserDefaultsController values]'
U32 env___IM_NSUserDefaultsController_values(void *_instance, U32 _self) {
    id _result = (id)[(NSUserDefaultsController*)_self values];
    return (U32)_result;
}

// method '-[NSView acceptsFirstMouse:]'
U32 env___IM_NSView_acceptsFirstMouse_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSView*)_self acceptsFirstMouse:_t1];
    return (U32)_result;
}

// method '-[NSView addCursorRect:cursor:]'
void env___IM_NSView_addCursorRect_Ccursor_C(void *_instance, U32 _self, U32 aRectIndirect, U32 anObjPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)anObjPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self addCursorRect:_t1 cursor:_t2];
}

// method '-[NSView addSubview:]'
void env___IM_NSView_addSubview_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSView*)_self addSubview:_t1];
}

// method '-[NSView addSubview:positioned:relativeTo:]'
void env___IM_NSView_addSubview_Cpositioned_CrelativeTo_C(void *_instance, U32 _self, U32 aViewPointer, U32 place, U32 otherViewPointer) {
    id _t1 = (id)aViewPointer;
    id _t2 = (id)otherViewPointer;
    [(NSView*)_self addSubview:_t1 positioned:place relativeTo:_t2];
}

// method '-[NSView addToolTipRect:owner:userData:]'
U32 env___IM_NSView_addToolTipRect_Cowner_CuserData_C(void *_instance, U32 _self, U32 aRectIndirect, U32 anObjectPointer, U32 dataPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)anObjectPointer;
    void* _t3 = (void*)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    int _result = (int)[(NSView*)_self addToolTipRect:_t1 owner:_t2 userData:_t3];
    return (U32)_result;
}

// method '-[NSView addTrackingRect:owner:userData:assumeInside:]'
U32 env___IM_NSView_addTrackingRect_Cowner_CuserData_CassumeInside_C(void *_instance, U32 _self, U32 aRectIndirect, U32 anObjectPointer, U32 dataPointer, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)anObjectPointer;
    void* _t3 = (void*)dataPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    int _result = (int)[(NSView*)_self addTrackingRect:_t1 owner:_t2 userData:_t3 assumeInside:flag];
    return (U32)_result;
}

// method '-[NSView adjustPageHeightNew:top:bottom:limit:]'
void env___IM_NSView_adjustPageHeightNew_Ctop_Cbottom_Climit_C(void *_instance, U32 _self, U32 newBottomPointer, F32 oldTop, F32 oldBottom, F32 bottomLimit) {
    float* _t1 = (float*)newBottomPointer;
    [(NSView*)_self adjustPageHeightNew:_t1 top:oldTop bottom:oldBottom limit:bottomLimit];
}

// method '-[NSView adjustPageWidthNew:left:right:limit:]'
void env___IM_NSView_adjustPageWidthNew_Cleft_Cright_Climit_C(void *_instance, U32 _self, U32 newRightPointer, F32 oldLeft, F32 oldRight, F32 rightLimit) {
    float* _t1 = (float*)newRightPointer;
    [(NSView*)_self adjustPageWidthNew:_t1 left:oldLeft right:oldRight limit:rightLimit];
}

// method '-[NSView adjustScroll:]'
void env___IM_NSView_adjustScroll_C(void *_instance, U32 _resultIndirect, U32 _self, U32 newVisibleIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + newVisibleIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSView*)_self adjustScroll:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView allocateGState]'
void env___IM_NSView_allocateGState(void *_instance, U32 _self) {
    [(NSView*)_self allocateGState];
}

// method '-[NSView ancestorSharedWithView:]'
U32 env___IM_NSView_ancestorSharedWithView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    id _result = (id)[(NSView*)_self ancestorSharedWithView:_t1];
    return (U32)_result;
}

// method '-[NSView autoresizesSubviews]'
U32 env___IM_NSView_autoresizesSubviews(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self autoresizesSubviews];
    return (U32)_result;
}

// method '-[NSView autoresizingMask]'
U32 env___IM_NSView_autoresizingMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSView*)_self autoresizingMask];
    return (U32)_result;
}

// method '-[NSView autoscroll:]'
U32 env___IM_NSView_autoscroll_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSView*)_self autoscroll:_t1];
    return (U32)_result;
}

// method '-[NSView beginDocument]'
void env___IM_NSView_beginDocument(void *_instance, U32 _self) {
    [(NSView*)_self beginDocument];
}

// method '-[NSView beginPageInRect:atPlacement:]'
void env___IM_NSView_beginPageInRect_CatPlacement_C(void *_instance, U32 _self, U32 aRectIndirect, U32 locationIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSPoint _t2 = *(NSPoint*)(_mem->data + locationIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(NSView*)_self beginPageInRect:_t1 atPlacement:_t2];
}

// method '-[NSView bitmapImageRepForCachingDisplayInRect:]'
U32 env___IM_NSView_bitmapImageRepForCachingDisplayInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSView*)_self bitmapImageRepForCachingDisplayInRect:_t1];
    return (U32)_result;
}

// method '-[NSView bounds]'
void env___IM_NSView_bounds(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSView*)_self bounds];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView boundsRotation]'
F32 env___IM_NSView_boundsRotation(void *_instance, U32 _self) {
    float _result = (float)[(NSView*)_self boundsRotation];
    return (F32)_result;
}

// method '-[NSView cacheDisplayInRect:toBitmapImageRep:]'
void env___IM_NSView_cacheDisplayInRect_CtoBitmapImageRep_C(void *_instance, U32 _self, U32 rectIndirect, U32 bitmapImageRepPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)bitmapImageRepPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self cacheDisplayInRect:_t1 toBitmapImageRep:_t2];
}

// method '-[NSView canBecomeKeyView]'
U32 env___IM_NSView_canBecomeKeyView(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self canBecomeKeyView];
    return (U32)_result;
}

// method '-[NSView canDraw]'
U32 env___IM_NSView_canDraw(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self canDraw];
    return (U32)_result;
}

// method '-[NSView centerScanRect:]'
void env___IM_NSView_centerScanRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSView*)_self centerScanRect:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView convertPoint:fromView:]'
void env___IM_NSView_convertPoint_CfromView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aPointIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    id _t2 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    NSPoint _result = (NSPoint)[(NSView*)_self convertPoint:_t1 fromView:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView convertPoint:toView:]'
void env___IM_NSView_convertPoint_CtoView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aPointIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    id _t2 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    NSPoint _result = (NSPoint)[(NSView*)_self convertPoint:_t1 toView:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView convertRect:fromView:]'
void env___IM_NSView_convertRect_CfromView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aRectIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSView*)_self convertRect:_t1 fromView:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView convertRect:toView:]'
void env___IM_NSView_convertRect_CtoView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aRectIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSView*)_self convertRect:_t1 toView:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView convertSize:fromView:]'
void env___IM_NSView_convertSize_CfromView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aSizeIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    id _t2 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    NSSize _result = (NSSize)[(NSView*)_self convertSize:_t1 fromView:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView convertSize:toView:]'
void env___IM_NSView_convertSize_CtoView_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aSizeIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    id _t2 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    NSSize _result = (NSSize)[(NSView*)_self convertSize:_t1 toView:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView dataWithEPSInsideRect:]'
U32 env___IM_NSView_dataWithEPSInsideRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSView*)_self dataWithEPSInsideRect:_t1];
    return (U32)_result;
}

// method '-[NSView dataWithPDFInsideRect:]'
U32 env___IM_NSView_dataWithPDFInsideRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSView*)_self dataWithPDFInsideRect:_t1];
    return (U32)_result;
}

// method '+[NSView defaultFocusRingType]'
U32 env___CM_NSView_defaultFocusRingType(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultFocusRingType];
    return (U32)_result;
}

// method '+[NSView defaultMenu]'
U32 env___CM_NSView_defaultMenu(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class defaultMenu];
    return (U32)_result;
}

// method '-[NSView didAddSubview:]'
void env___IM_NSView_didAddSubview_C(void *_instance, U32 _self, U32 subviewPointer) {
    id _t1 = (id)subviewPointer;
    [(NSView*)_self didAddSubview:_t1];
}

// method '-[NSView discardCursorRects]'
void env___IM_NSView_discardCursorRects(void *_instance, U32 _self) {
    [(NSView*)_self discardCursorRects];
}

// method '-[NSView display]'
void env___IM_NSView_display(void *_instance, U32 _self) {
    [(NSView*)_self display];
}

// method '-[NSView displayIfNeeded]'
void env___IM_NSView_displayIfNeeded(void *_instance, U32 _self) {
    [(NSView*)_self displayIfNeeded];
}

// method '-[NSView displayIfNeededIgnoringOpacity]'
void env___IM_NSView_displayIfNeededIgnoringOpacity(void *_instance, U32 _self) {
    [(NSView*)_self displayIfNeededIgnoringOpacity];
}

// method '-[NSView displayIfNeededInRect:]'
void env___IM_NSView_displayIfNeededInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self displayIfNeededInRect:_t1];
}

// method '-[NSView displayIfNeededInRectIgnoringOpacity:]'
void env___IM_NSView_displayIfNeededInRectIgnoringOpacity_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self displayIfNeededInRectIgnoringOpacity:_t1];
}

// method '-[NSView displayRect:]'
void env___IM_NSView_displayRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self displayRect:_t1];
}

// method '-[NSView displayRectIgnoringOpacity:]'
void env___IM_NSView_displayRectIgnoringOpacity_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self displayRectIgnoringOpacity:_t1];
}

// method '-[NSView displayRectIgnoringOpacity:inContext:]'
void env___IM_NSView_displayRectIgnoringOpacity_CinContext_C(void *_instance, U32 _self, U32 aRectIndirect, U32 contextPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)contextPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self displayRectIgnoringOpacity:_t1 inContext:_t2];
}

// method '-[NSView dragFile:fromRect:slideBack:event:]'
U32 env___IM_NSView_dragFile_CfromRect_CslideBack_Cevent_C(void *_instance, U32 _self, U32 filenamePointer, U32 rectIndirect, U32 aFlag, U32 eventPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)filenamePointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)eventPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(NSView*)_self dragFile:_t1 fromRect:_t2 slideBack:aFlag event:_t3];
    return (U32)_result;
}

// method '-[NSView dragImage:at:offset:event:pasteboard:source:slideBack:]'
void env___IM_NSView_dragImage_Cat_Coffset_Cevent_Cpasteboard_Csource_CslideBack_C(void *_instance, U32 _self, U32 anImagePointer, U32 viewLocationIndirect, U32 initialOffsetIndirect, U32 eventPointer, U32 pboardPointer, U32 sourceObjPointer, U32 slideFlag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)anImagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + viewLocationIndirect);
    NSSize _t3 = *(NSSize*)(_mem->data + initialOffsetIndirect);
    id _t4 = (id)eventPointer;
    id _t5 = (id)pboardPointer;
    id _t6 = (id)sourceObjPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    swap_f(&_t3.width);
    swap_f(&_t3.height);
    #endif
    [(NSView*)_self dragImage:_t1 at:_t2 offset:_t3 event:_t4 pasteboard:_t5 source:_t6 slideBack:slideFlag];
}

// method '-[NSView dragPromisedFilesOfTypes:fromRect:source:slideBack:event:]'
U32 env___IM_NSView_dragPromisedFilesOfTypes_CfromRect_Csource_CslideBack_Cevent_C(void *_instance, U32 _self, U32 typeArrayPointer, U32 rectIndirect, U32 sourceObjectPointer, U32 aFlag, U32 eventPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)typeArrayPointer;
    NSRect _t2 = *(NSRect*)(_mem->data + rectIndirect);
    id _t3 = (id)sourceObjectPointer;
    id _t4 = (id)eventPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(NSView*)_self dragPromisedFilesOfTypes:_t1 fromRect:_t2 source:_t3 slideBack:aFlag event:_t4];
    return (U32)_result;
}

// method '-[NSView drawPageBorderWithSize:]'
void env___IM_NSView_drawPageBorderWithSize_C(void *_instance, U32 _self, U32 borderSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + borderSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self drawPageBorderWithSize:_t1];
}

// method '-[NSView drawRect:]'
void env___IM_NSView_drawRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self drawRect:_t1];
}

// method '-[NSView drawSheetBorderWithSize:]'
void env___IM_NSView_drawSheetBorderWithSize_C(void *_instance, U32 _self, U32 borderSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + borderSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self drawSheetBorderWithSize:_t1];
}

// method '-[NSView enclosingScrollView]'
U32 env___IM_NSView_enclosingScrollView(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self enclosingScrollView];
    return (U32)_result;
}

// method '-[NSView endDocument]'
void env___IM_NSView_endDocument(void *_instance, U32 _self) {
    [(NSView*)_self endDocument];
}

// method '-[NSView endPage]'
void env___IM_NSView_endPage(void *_instance, U32 _self) {
    [(NSView*)_self endPage];
}

// method '-[NSView focusRingType]'
U32 env___IM_NSView_focusRingType(void *_instance, U32 _self) {
    int _result = (int)[(NSView*)_self focusRingType];
    return (U32)_result;
}

// method '+[NSView focusView]'
U32 env___CM_NSView_focusView(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class focusView];
    return (U32)_result;
}

// method '-[NSView frame]'
void env___IM_NSView_frame(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSView*)_self frame];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView frameRotation]'
F32 env___IM_NSView_frameRotation(void *_instance, U32 _self) {
    float _result = (float)[(NSView*)_self frameRotation];
    return (F32)_result;
}

// method '-[NSView gState]'
U32 env___IM_NSView_gState(void *_instance, U32 _self) {
    int _result = (int)[(NSView*)_self gState];
    return (U32)_result;
}

// method '-[NSView getRectsBeingDrawn:count:]'
void env___IM_NSView_getRectsBeingDrawn_Ccount_C(void *_instance, U32 _self, U32 rectsPointer, U32 countPointer) {
    const NSRect** _t1 = (const NSRect**)rectsPointer;
    int* _t2 = (int*)countPointer;
    [(NSView*)_self getRectsBeingDrawn:_t1 count:_t2];
}

// method '-[NSView getRectsExposedDuringLiveResize:count:]'
void env___IM_NSView_getRectsExposedDuringLiveResize_Ccount_C(void *_instance, U32 _self, U32 exposedRectsPointer, U32 countPointer) {
    NSRect* _t1 = (NSRect*)exposedRectsPointer;
    int* _t2 = (int*)countPointer;
    [(NSView*)_self getRectsExposedDuringLiveResize:_t1 count:_t2];
}

// method '-[NSView heightAdjustLimit]'
F32 env___IM_NSView_heightAdjustLimit(void *_instance, U32 _self) {
    float _result = (float)[(NSView*)_self heightAdjustLimit];
    return (F32)_result;
}

// method '-[NSView hitTest:]'
U32 env___IM_NSView_hitTest_C(void *_instance, U32 _self, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    id _result = (id)[(NSView*)_self hitTest:_t1];
    return (U32)_result;
}

// method '-[NSView inLiveResize]'
U32 env___IM_NSView_inLiveResize(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self inLiveResize];
    return (U32)_result;
}

// method '-[NSView initWithFrame:]'
U32 env___IM_NSView_initWithFrame_C(void *_instance, U32 _self, U32 frameRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSView*)_self initWithFrame:_t1];
    return (U32)_result;
}

// method '-[NSView isDescendantOf:]'
U32 env___IM_NSView_isDescendantOf_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    BOOL _result = (BOOL)[(NSView*)_self isDescendantOf:_t1];
    return (U32)_result;
}

// method '-[NSView isFlipped]'
U32 env___IM_NSView_isFlipped(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self isFlipped];
    return (U32)_result;
}

// method '-[NSView isHidden]'
U32 env___IM_NSView_isHidden(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self isHidden];
    return (U32)_result;
}

// method '-[NSView isHiddenOrHasHiddenAncestor]'
U32 env___IM_NSView_isHiddenOrHasHiddenAncestor(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self isHiddenOrHasHiddenAncestor];
    return (U32)_result;
}

// method '-[NSView isOpaque]'
U32 env___IM_NSView_isOpaque(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self isOpaque];
    return (U32)_result;
}

// method '-[NSView isRotatedFromBase]'
U32 env___IM_NSView_isRotatedFromBase(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self isRotatedFromBase];
    return (U32)_result;
}

// method '-[NSView isRotatedOrScaledFromBase]'
U32 env___IM_NSView_isRotatedOrScaledFromBase(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self isRotatedOrScaledFromBase];
    return (U32)_result;
}

// method '-[NSView knowsPageRange:]'
U32 env___IM_NSView_knowsPageRange_C(void *_instance, U32 _self, U32 rangePointer) {
    NSRangePointer _t1 = (NSRangePointer)rangePointer;
    BOOL _result = (BOOL)[(NSView*)_self knowsPageRange:_t1];
    return (U32)_result;
}

// method '-[NSView locationOfPrintRect:]'
void env___IM_NSView_locationOfPrintRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSPoint _result = (NSPoint)[(NSView*)_self locationOfPrintRect:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView lockFocus]'
void env___IM_NSView_lockFocus(void *_instance, U32 _self) {
    [(NSView*)_self lockFocus];
}

// method '-[NSView lockFocusIfCanDraw]'
U32 env___IM_NSView_lockFocusIfCanDraw(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self lockFocusIfCanDraw];
    return (U32)_result;
}

// method '-[NSView lockFocusIfCanDrawInContext:]'
U32 env___IM_NSView_lockFocusIfCanDrawInContext_C(void *_instance, U32 _self, U32 contextPointer) {
    id _t1 = (id)contextPointer;
    BOOL _result = (BOOL)[(NSView*)_self lockFocusIfCanDrawInContext:_t1];
    return (U32)_result;
}

// method '-[NSView menuForEvent:]'
U32 env___IM_NSView_menuForEvent_C(void *_instance, U32 _self, U32 eventPointer) {
    id _t1 = (id)eventPointer;
    id _result = (id)[(NSView*)_self menuForEvent:_t1];
    return (U32)_result;
}

// method '-[NSView mouse:inRect:]'
U32 env___IM_NSView_mouse_CinRect_C(void *_instance, U32 _self, U32 aPointIndirect, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    NSRect _t2 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    swap_f(&_t2.origin.x);
    swap_f(&_t2.origin.y);
    swap_f(&_t2.size.width);
    swap_f(&_t2.size.height);
    #endif
    BOOL _result = (BOOL)[(NSView*)_self mouse:_t1 inRect:_t2];
    return (U32)_result;
}

// method '-[NSView mouseDownCanMoveWindow]'
U32 env___IM_NSView_mouseDownCanMoveWindow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self mouseDownCanMoveWindow];
    return (U32)_result;
}

// method '-[NSView needsDisplay]'
U32 env___IM_NSView_needsDisplay(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self needsDisplay];
    return (U32)_result;
}

// method '-[NSView needsPanelToBecomeKey]'
U32 env___IM_NSView_needsPanelToBecomeKey(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self needsPanelToBecomeKey];
    return (U32)_result;
}

// method '-[NSView needsToDrawRect:]'
U32 env___IM_NSView_needsToDrawRect_C(void *_instance, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    BOOL _result = (BOOL)[(NSView*)_self needsToDrawRect:_t1];
    return (U32)_result;
}

// method '-[NSView nextKeyView]'
U32 env___IM_NSView_nextKeyView(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self nextKeyView];
    return (U32)_result;
}

// method '-[NSView nextValidKeyView]'
U32 env___IM_NSView_nextValidKeyView(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self nextValidKeyView];
    return (U32)_result;
}

// method '-[NSView opaqueAncestor]'
U32 env___IM_NSView_opaqueAncestor(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self opaqueAncestor];
    return (U32)_result;
}

// method '-[NSView pageFooter]'
U32 env___IM_NSView_pageFooter(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self pageFooter];
    return (U32)_result;
}

// method '-[NSView pageHeader]'
U32 env___IM_NSView_pageHeader(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self pageHeader];
    return (U32)_result;
}

// method '-[NSView performKeyEquivalent:]'
U32 env___IM_NSView_performKeyEquivalent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSView*)_self performKeyEquivalent:_t1];
    return (U32)_result;
}

// method '-[NSView performMnemonic:]'
U32 env___IM_NSView_performMnemonic_C(void *_instance, U32 _self, U32 theStringPointer) {
    id _t1 = (id)theStringPointer;
    BOOL _result = (BOOL)[(NSView*)_self performMnemonic:_t1];
    return (U32)_result;
}

// method '-[NSView postsBoundsChangedNotifications]'
U32 env___IM_NSView_postsBoundsChangedNotifications(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self postsBoundsChangedNotifications];
    return (U32)_result;
}

// method '-[NSView postsFrameChangedNotifications]'
U32 env___IM_NSView_postsFrameChangedNotifications(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self postsFrameChangedNotifications];
    return (U32)_result;
}

// method '-[NSView preservesContentDuringLiveResize]'
U32 env___IM_NSView_preservesContentDuringLiveResize(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self preservesContentDuringLiveResize];
    return (U32)_result;
}

// method '-[NSView previousKeyView]'
U32 env___IM_NSView_previousKeyView(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self previousKeyView];
    return (U32)_result;
}

// method '-[NSView previousValidKeyView]'
U32 env___IM_NSView_previousValidKeyView(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self previousValidKeyView];
    return (U32)_result;
}

// method '-[NSView print:]'
void env___IM_NSView_print_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSView*)_self print:_t1];
}

// method '-[NSView printJobTitle]'
U32 env___IM_NSView_printJobTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self printJobTitle];
    return (U32)_result;
}

// method '-[NSView rectForPage:]'
void env___IM_NSView_rectForPage_C(void *_instance, U32 _resultIndirect, U32 _self, U32 page) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSView*)_self rectForPage:page];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView rectPreservedDuringLiveResize]'
void env___IM_NSView_rectPreservedDuringLiveResize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSView*)_self rectPreservedDuringLiveResize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView reflectScrolledClipView:]'
void env___IM_NSView_reflectScrolledClipView_C(void *_instance, U32 _self, U32 aClipViewPointer) {
    id _t1 = (id)aClipViewPointer;
    [(NSView*)_self reflectScrolledClipView:_t1];
}

// method '-[NSView registerForDraggedTypes:]'
void env___IM_NSView_registerForDraggedTypes_C(void *_instance, U32 _self, U32 newTypesPointer) {
    id _t1 = (id)newTypesPointer;
    [(NSView*)_self registerForDraggedTypes:_t1];
}

// method '-[NSView registeredDraggedTypes]'
U32 env___IM_NSView_registeredDraggedTypes(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self registeredDraggedTypes];
    return (U32)_result;
}

// method '-[NSView releaseGState]'
void env___IM_NSView_releaseGState(void *_instance, U32 _self) {
    [(NSView*)_self releaseGState];
}

// method '-[NSView removeAllToolTips]'
void env___IM_NSView_removeAllToolTips(void *_instance, U32 _self) {
    [(NSView*)_self removeAllToolTips];
}

// method '-[NSView removeCursorRect:cursor:]'
void env___IM_NSView_removeCursorRect_Ccursor_C(void *_instance, U32 _self, U32 aRectIndirect, U32 anObjPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    id _t2 = (id)anObjPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self removeCursorRect:_t1 cursor:_t2];
}

// method '-[NSView removeFromSuperview]'
void env___IM_NSView_removeFromSuperview(void *_instance, U32 _self) {
    [(NSView*)_self removeFromSuperview];
}

// method '-[NSView removeFromSuperviewWithoutNeedingDisplay]'
void env___IM_NSView_removeFromSuperviewWithoutNeedingDisplay(void *_instance, U32 _self) {
    [(NSView*)_self removeFromSuperviewWithoutNeedingDisplay];
}

// method '-[NSView removeToolTip:]'
void env___IM_NSView_removeToolTip_C(void *_instance, U32 _self, U32 tag) {
    [(NSView*)_self removeToolTip:tag];
}

// method '-[NSView removeTrackingRect:]'
void env___IM_NSView_removeTrackingRect_C(void *_instance, U32 _self, U32 tag) {
    [(NSView*)_self removeTrackingRect:tag];
}

// method '-[NSView renewGState]'
void env___IM_NSView_renewGState(void *_instance, U32 _self) {
    [(NSView*)_self renewGState];
}

// method '-[NSView replaceSubview:with:]'
void env___IM_NSView_replaceSubview_Cwith_C(void *_instance, U32 _self, U32 oldViewPointer, U32 newViewPointer) {
    id _t1 = (id)oldViewPointer;
    id _t2 = (id)newViewPointer;
    [(NSView*)_self replaceSubview:_t1 with:_t2];
}

// method '-[NSView resetCursorRects]'
void env___IM_NSView_resetCursorRects(void *_instance, U32 _self) {
    [(NSView*)_self resetCursorRects];
}

// method '-[NSView resizeSubviewsWithOldSize:]'
void env___IM_NSView_resizeSubviewsWithOldSize_C(void *_instance, U32 _self, U32 oldSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + oldSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self resizeSubviewsWithOldSize:_t1];
}

// method '-[NSView resizeWithOldSuperviewSize:]'
void env___IM_NSView_resizeWithOldSuperviewSize_C(void *_instance, U32 _self, U32 oldSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + oldSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self resizeWithOldSuperviewSize:_t1];
}

// method '-[NSView rotateByAngle:]'
void env___IM_NSView_rotateByAngle_C(void *_instance, U32 _self, F32 angle) {
    [(NSView*)_self rotateByAngle:angle];
}

// method '-[NSView rulerView:didAddMarker:]'
void env___IM_NSView_rulerView_CdidAddMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    [(NSView*)_self rulerView:_t1 didAddMarker:_t2];
}

// method '-[NSView rulerView:didMoveMarker:]'
void env___IM_NSView_rulerView_CdidMoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    [(NSView*)_self rulerView:_t1 didMoveMarker:_t2];
}

// method '-[NSView rulerView:didRemoveMarker:]'
void env___IM_NSView_rulerView_CdidRemoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    [(NSView*)_self rulerView:_t1 didRemoveMarker:_t2];
}

// method '-[NSView rulerView:handleMouseDown:]'
void env___IM_NSView_rulerView_ChandleMouseDown_C(void *_instance, U32 _self, U32 rulerPointer, U32 eventPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)eventPointer;
    [(NSView*)_self rulerView:_t1 handleMouseDown:_t2];
}

// method '-[NSView rulerView:shouldAddMarker:]'
U32 env___IM_NSView_rulerView_CshouldAddMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    BOOL _result = (BOOL)[(NSView*)_self rulerView:_t1 shouldAddMarker:_t2];
    return (U32)_result;
}

// method '-[NSView rulerView:shouldMoveMarker:]'
U32 env___IM_NSView_rulerView_CshouldMoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    BOOL _result = (BOOL)[(NSView*)_self rulerView:_t1 shouldMoveMarker:_t2];
    return (U32)_result;
}

// method '-[NSView rulerView:shouldRemoveMarker:]'
U32 env___IM_NSView_rulerView_CshouldRemoveMarker_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    BOOL _result = (BOOL)[(NSView*)_self rulerView:_t1 shouldRemoveMarker:_t2];
    return (U32)_result;
}

// method '-[NSView rulerView:willAddMarker:atLocation:]'
F32 env___IM_NSView_rulerView_CwillAddMarker_CatLocation_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer, F32 location) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    float _result = (float)[(NSView*)_self rulerView:_t1 willAddMarker:_t2 atLocation:location];
    return (F32)_result;
}

// method '-[NSView rulerView:willMoveMarker:toLocation:]'
F32 env___IM_NSView_rulerView_CwillMoveMarker_CtoLocation_C(void *_instance, U32 _self, U32 rulerPointer, U32 markerPointer, F32 location) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)markerPointer;
    float _result = (float)[(NSView*)_self rulerView:_t1 willMoveMarker:_t2 toLocation:location];
    return (F32)_result;
}

// method '-[NSView rulerView:willSetClientView:]'
void env___IM_NSView_rulerView_CwillSetClientView_C(void *_instance, U32 _self, U32 rulerPointer, U32 newClientPointer) {
    id _t1 = (id)rulerPointer;
    id _t2 = (id)newClientPointer;
    [(NSView*)_self rulerView:_t1 willSetClientView:_t2];
}

// method '-[NSView scaleUnitSquareToSize:]'
void env___IM_NSView_scaleUnitSquareToSize_C(void *_instance, U32 _self, U32 newUnitSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + newUnitSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self scaleUnitSquareToSize:_t1];
}

// method '-[NSView scrollClipView:toPoint:]'
void env___IM_NSView_scrollClipView_CtoPoint_C(void *_instance, U32 _self, U32 aClipViewPointer, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)aClipViewPointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    #endif
    [(NSView*)_self scrollClipView:_t1 toPoint:_t2];
}

// method '-[NSView scrollPoint:]'
void env___IM_NSView_scrollPoint_C(void *_instance, U32 _self, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSView*)_self scrollPoint:_t1];
}

// method '-[NSView scrollRect:by:]'
void env___IM_NSView_scrollRect_Cby_C(void *_instance, U32 _self, U32 aRectIndirect, U32 deltaIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    NSSize _t2 = *(NSSize*)(_mem->data + deltaIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    swap_f(&_t2.width);
    swap_f(&_t2.height);
    #endif
    [(NSView*)_self scrollRect:_t1 by:_t2];
}

// method '-[NSView scrollRectToVisible:]'
U32 env___IM_NSView_scrollRectToVisible_C(void *_instance, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    BOOL _result = (BOOL)[(NSView*)_self scrollRectToVisible:_t1];
    return (U32)_result;
}

// method '-[NSView setAutoresizesSubviews:]'
void env___IM_NSView_setAutoresizesSubviews_C(void *_instance, U32 _self, U32 flag) {
    [(NSView*)_self setAutoresizesSubviews:flag];
}

// method '-[NSView setAutoresizingMask:]'
void env___IM_NSView_setAutoresizingMask_C(void *_instance, U32 _self, U32 mask) {
    [(NSView*)_self setAutoresizingMask:mask];
}

// method '-[NSView setBounds:]'
void env___IM_NSView_setBounds_C(void *_instance, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self setBounds:_t1];
}

// method '-[NSView setBoundsOrigin:]'
void env___IM_NSView_setBoundsOrigin_C(void *_instance, U32 _self, U32 newOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + newOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSView*)_self setBoundsOrigin:_t1];
}

// method '-[NSView setBoundsRotation:]'
void env___IM_NSView_setBoundsRotation_C(void *_instance, U32 _self, F32 angle) {
    [(NSView*)_self setBoundsRotation:angle];
}

// method '-[NSView setBoundsSize:]'
void env___IM_NSView_setBoundsSize_C(void *_instance, U32 _self, U32 newSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + newSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self setBoundsSize:_t1];
}

// method '-[NSView setFocusRingType:]'
void env___IM_NSView_setFocusRingType_C(void *_instance, U32 _self, U32 focusRingType) {
    [(NSView*)_self setFocusRingType:focusRingType];
}

// method '-[NSView setFrame:]'
void env___IM_NSView_setFrame_C(void *_instance, U32 _self, U32 frameRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self setFrame:_t1];
}

// method '-[NSView setFrameOrigin:]'
void env___IM_NSView_setFrameOrigin_C(void *_instance, U32 _self, U32 newOriginIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + newOriginIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSView*)_self setFrameOrigin:_t1];
}

// method '-[NSView setFrameRotation:]'
void env___IM_NSView_setFrameRotation_C(void *_instance, U32 _self, F32 angle) {
    [(NSView*)_self setFrameRotation:angle];
}

// method '-[NSView setFrameSize:]'
void env___IM_NSView_setFrameSize_C(void *_instance, U32 _self, U32 newSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + newSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSView*)_self setFrameSize:_t1];
}

// method '-[NSView setHidden:]'
void env___IM_NSView_setHidden_C(void *_instance, U32 _self, U32 flag) {
    [(NSView*)_self setHidden:flag];
}

// method '-[NSView setKeyboardFocusRingNeedsDisplayInRect:]'
void env___IM_NSView_setKeyboardFocusRingNeedsDisplayInRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self setKeyboardFocusRingNeedsDisplayInRect:_t1];
}

// method '-[NSView setNeedsDisplay:]'
void env___IM_NSView_setNeedsDisplay_C(void *_instance, U32 _self, U32 flag) {
    [(NSView*)_self setNeedsDisplay:flag];
}

// method '-[NSView setNeedsDisplayInRect:]'
void env___IM_NSView_setNeedsDisplayInRect_C(void *_instance, U32 _self, U32 invalidRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + invalidRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self setNeedsDisplayInRect:_t1];
}

// method '-[NSView setNextKeyView:]'
void env___IM_NSView_setNextKeyView_C(void *_instance, U32 _self, U32 nextPointer) {
    id _t1 = (id)nextPointer;
    [(NSView*)_self setNextKeyView:_t1];
}

// method '-[NSView setPostsBoundsChangedNotifications:]'
void env___IM_NSView_setPostsBoundsChangedNotifications_C(void *_instance, U32 _self, U32 flag) {
    [(NSView*)_self setPostsBoundsChangedNotifications:flag];
}

// method '-[NSView setPostsFrameChangedNotifications:]'
void env___IM_NSView_setPostsFrameChangedNotifications_C(void *_instance, U32 _self, U32 flag) {
    [(NSView*)_self setPostsFrameChangedNotifications:flag];
}

// method '-[NSView setToolTip:]'
void env___IM_NSView_setToolTip_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSView*)_self setToolTip:_t1];
}

// method '-[NSView setUpGState]'
void env___IM_NSView_setUpGState(void *_instance, U32 _self) {
    [(NSView*)_self setUpGState];
}

// method '-[NSView shouldDelayWindowOrderingForEvent:]'
U32 env___IM_NSView_shouldDelayWindowOrderingForEvent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    BOOL _result = (BOOL)[(NSView*)_self shouldDelayWindowOrderingForEvent:_t1];
    return (U32)_result;
}

// method '-[NSView shouldDrawColor]'
U32 env___IM_NSView_shouldDrawColor(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self shouldDrawColor];
    return (U32)_result;
}

// method '-[NSView subviews]'
U32 env___IM_NSView_subviews(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self subviews];
    return (U32)_result;
}

// method '-[NSView superview]'
U32 env___IM_NSView_superview(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self superview];
    return (U32)_result;
}

// method '-[NSView tag]'
U32 env___IM_NSView_tag(void *_instance, U32 _self) {
    int _result = (int)[(NSView*)_self tag];
    return (U32)_result;
}

// method '-[NSView toolTip]'
U32 env___IM_NSView_toolTip(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self toolTip];
    return (U32)_result;
}

// method '-[NSView translateOriginToPoint:]'
void env___IM_NSView_translateOriginToPoint_C(void *_instance, U32 _self, U32 translationIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + translationIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSView*)_self translateOriginToPoint:_t1];
}

// method '-[NSView unlockFocus]'
void env___IM_NSView_unlockFocus(void *_instance, U32 _self) {
    [(NSView*)_self unlockFocus];
}

// method '-[NSView unregisterDraggedTypes]'
void env___IM_NSView_unregisterDraggedTypes(void *_instance, U32 _self) {
    [(NSView*)_self unregisterDraggedTypes];
}

// method '-[NSView viewDidEndLiveResize]'
void env___IM_NSView_viewDidEndLiveResize(void *_instance, U32 _self) {
    [(NSView*)_self viewDidEndLiveResize];
}

// method '-[NSView viewDidMoveToSuperview]'
void env___IM_NSView_viewDidMoveToSuperview(void *_instance, U32 _self) {
    [(NSView*)_self viewDidMoveToSuperview];
}

// method '-[NSView viewDidMoveToWindow]'
void env___IM_NSView_viewDidMoveToWindow(void *_instance, U32 _self) {
    [(NSView*)_self viewDidMoveToWindow];
}

// method '-[NSView viewWillMoveToSuperview:]'
void env___IM_NSView_viewWillMoveToSuperview_C(void *_instance, U32 _self, U32 newSuperviewPointer) {
    id _t1 = (id)newSuperviewPointer;
    [(NSView*)_self viewWillMoveToSuperview:_t1];
}

// method '-[NSView viewWillMoveToWindow:]'
void env___IM_NSView_viewWillMoveToWindow_C(void *_instance, U32 _self, U32 newWindowPointer) {
    id _t1 = (id)newWindowPointer;
    [(NSView*)_self viewWillMoveToWindow:_t1];
}

// method '-[NSView viewWillStartLiveResize]'
void env___IM_NSView_viewWillStartLiveResize(void *_instance, U32 _self) {
    [(NSView*)_self viewWillStartLiveResize];
}

// method '-[NSView viewWithTag:]'
U32 env___IM_NSView_viewWithTag_C(void *_instance, U32 _self, U32 aTag) {
    id _result = (id)[(NSView*)_self viewWithTag:aTag];
    return (U32)_result;
}

// method '-[NSView visibleRect]'
void env___IM_NSView_visibleRect(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSView*)_self visibleRect];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSView wantsDefaultClipping]'
U32 env___IM_NSView_wantsDefaultClipping(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSView*)_self wantsDefaultClipping];
    return (U32)_result;
}

// method '-[NSView widthAdjustLimit]'
F32 env___IM_NSView_widthAdjustLimit(void *_instance, U32 _self) {
    float _result = (float)[(NSView*)_self widthAdjustLimit];
    return (F32)_result;
}

// method '-[NSView willRemoveSubview:]'
void env___IM_NSView_willRemoveSubview_C(void *_instance, U32 _self, U32 subviewPointer) {
    id _t1 = (id)subviewPointer;
    [(NSView*)_self willRemoveSubview:_t1];
}

// method '-[NSView window]'
U32 env___IM_NSView_window(void *_instance, U32 _self) {
    id _result = (id)[(NSView*)_self window];
    return (U32)_result;
}

// method '-[NSView writeEPSInsideRect:toPasteboard:]'
void env___IM_NSView_writeEPSInsideRect_CtoPasteboard_C(void *_instance, U32 _self, U32 rectIndirect, U32 pasteboardPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)pasteboardPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self writeEPSInsideRect:_t1 toPasteboard:_t2];
}

// method '-[NSView writePDFInsideRect:toPasteboard:]'
void env___IM_NSView_writePDFInsideRect_CtoPasteboard_C(void *_instance, U32 _self, U32 rectIndirect, U32 pasteboardPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    id _t2 = (id)pasteboardPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSView*)_self writePDFInsideRect:_t1 toPasteboard:_t2];
}

// method '-[NSViewAnimation initWithViewAnimations:]'
U32 env___IM_NSViewAnimation_initWithViewAnimations_C(void *_instance, U32 _self, U32 viewAnimationsPointer) {
    id _t1 = (id)viewAnimationsPointer;
    id _result = (id)[(NSViewAnimation*)_self initWithViewAnimations:_t1];
    return (U32)_result;
}

// method '-[NSViewAnimation setViewAnimations:]'
void env___IM_NSViewAnimation_setViewAnimations_C(void *_instance, U32 _self, U32 viewAnimationsPointer) {
    id _t1 = (id)viewAnimationsPointer;
    [(NSViewAnimation*)_self setViewAnimations:_t1];
}

// method '-[NSViewAnimation viewAnimations]'
U32 env___IM_NSViewAnimation_viewAnimations(void *_instance, U32 _self) {
    id _result = (id)[(NSViewAnimation*)_self viewAnimations];
    return (U32)_result;
}

// method '-[NSWindow acceptsMouseMovedEvents]'
U32 env___IM_NSWindow_acceptsMouseMovedEvents(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self acceptsMouseMovedEvents];
    return (U32)_result;
}

// method '-[NSWindow addChildWindow:ordered:]'
void env___IM_NSWindow_addChildWindow_Cordered_C(void *_instance, U32 _self, U32 childWinPointer, U32 place) {
    id _t1 = (id)childWinPointer;
    [(NSWindow*)_self addChildWindow:_t1 ordered:place];
}

// method '-[NSWindow allowsToolTipsWhenApplicationIsInactive]'
U32 env___IM_NSWindow_allowsToolTipsWhenApplicationIsInactive(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self allowsToolTipsWhenApplicationIsInactive];
    return (U32)_result;
}

// method '-[NSWindow alphaValue]'
F32 env___IM_NSWindow_alphaValue(void *_instance, U32 _self) {
    float _result = (float)[(NSWindow*)_self alphaValue];
    return (F32)_result;
}

// method '-[NSWindow animationResizeTime:]'
F64 env___IM_NSWindow_animationResizeTime_C(void *_instance, U32 _self, U32 newFrameIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + newFrameIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    double _result = (double)[(NSWindow*)_self animationResizeTime:_t1];
    return (F64)_result;
}

// method '-[NSWindow areCursorRectsEnabled]'
U32 env___IM_NSWindow_areCursorRectsEnabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self areCursorRectsEnabled];
    return (U32)_result;
}

// method '-[NSWindow aspectRatio]'
void env___IM_NSWindow_aspectRatio(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self aspectRatio];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow attachedSheet]'
U32 env___IM_NSWindow_attachedSheet(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self attachedSheet];
    return (U32)_result;
}

// method '-[NSWindow autorecalculatesKeyViewLoop]'
U32 env___IM_NSWindow_autorecalculatesKeyViewLoop(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self autorecalculatesKeyViewLoop];
    return (U32)_result;
}

// method '-[NSWindow backgroundColor]'
U32 env___IM_NSWindow_backgroundColor(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self backgroundColor];
    return (U32)_result;
}

// method '-[NSWindow backingType]'
U32 env___IM_NSWindow_backingType(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self backingType];
    return (U32)_result;
}

// method '-[NSWindow becomeKeyWindow]'
void env___IM_NSWindow_becomeKeyWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self becomeKeyWindow];
}

// method '-[NSWindow becomeMainWindow]'
void env___IM_NSWindow_becomeMainWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self becomeMainWindow];
}

// method '-[NSWindow cacheImageInRect:]'
void env___IM_NSWindow_cacheImageInRect_C(void *_instance, U32 _self, U32 aRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + aRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSWindow*)_self cacheImageInRect:_t1];
}

// method '-[NSWindow canBecomeKeyWindow]'
U32 env___IM_NSWindow_canBecomeKeyWindow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self canBecomeKeyWindow];
    return (U32)_result;
}

// method '-[NSWindow canBecomeMainWindow]'
U32 env___IM_NSWindow_canBecomeMainWindow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self canBecomeMainWindow];
    return (U32)_result;
}

// method '-[NSWindow canHide]'
U32 env___IM_NSWindow_canHide(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self canHide];
    return (U32)_result;
}

// method '-[NSWindow canStoreColor]'
U32 env___IM_NSWindow_canStoreColor(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self canStoreColor];
    return (U32)_result;
}

// method '-[NSWindow cascadeTopLeftFromPoint:]'
void env___IM_NSWindow_cascadeTopLeftFromPoint_C(void *_instance, U32 _resultIndirect, U32 _self, U32 topLeftPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + topLeftPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    NSPoint _result = (NSPoint)[(NSWindow*)_self cascadeTopLeftFromPoint:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow center]'
void env___IM_NSWindow_center(void *_instance, U32 _self) {
    [(NSWindow*)_self center];
}

// method '-[NSWindow childWindows]'
U32 env___IM_NSWindow_childWindows(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self childWindows];
    return (U32)_result;
}

// method '-[NSWindow close]'
void env___IM_NSWindow_close(void *_instance, U32 _self) {
    [(NSWindow*)_self close];
}

// method '-[NSWindow constrainFrameRect:toScreen:]'
void env___IM_NSWindow_constrainFrameRect_CtoScreen_C(void *_instance, U32 _resultIndirect, U32 _self, U32 frameRectIndirect, U32 screenPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    id _t2 = (id)screenPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSWindow*)_self constrainFrameRect:_t1 toScreen:_t2];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow contentAspectRatio]'
void env___IM_NSWindow_contentAspectRatio(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self contentAspectRatio];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow contentMaxSize]'
void env___IM_NSWindow_contentMaxSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self contentMaxSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow contentMinSize]'
void env___IM_NSWindow_contentMinSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self contentMinSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow contentRectForFrameRect:]'
void env___IM_NSWindow_contentRectForFrameRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 frameRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSWindow*)_self contentRectForFrameRect:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSWindow contentRectForFrameRect:styleMask:]'
void env___CM_NSWindow_contentRectForFrameRect_CstyleMask_C(void *_instance, U32 _resultIndirect, U32 _class, U32 fRectIndirect, U32 aStyle) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + fRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(Class)_class contentRectForFrameRect:_t1 styleMask:aStyle];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow contentResizeIncrements]'
void env___IM_NSWindow_contentResizeIncrements(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self contentResizeIncrements];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow contentView]'
U32 env___IM_NSWindow_contentView(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self contentView];
    return (U32)_result;
}

// method '-[NSWindow convertBaseToScreen:]'
void env___IM_NSWindow_convertBaseToScreen_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    NSPoint _result = (NSPoint)[(NSWindow*)_self convertBaseToScreen:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow convertScreenToBase:]'
void env___IM_NSWindow_convertScreenToBase_C(void *_instance, U32 _resultIndirect, U32 _self, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    NSPoint _result = (NSPoint)[(NSWindow*)_self convertScreenToBase:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow currentEvent]'
U32 env___IM_NSWindow_currentEvent(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self currentEvent];
    return (U32)_result;
}

// method '-[NSWindow dataWithEPSInsideRect:]'
U32 env___IM_NSWindow_dataWithEPSInsideRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSWindow*)_self dataWithEPSInsideRect:_t1];
    return (U32)_result;
}

// method '-[NSWindow dataWithPDFInsideRect:]'
U32 env___IM_NSWindow_dataWithPDFInsideRect_C(void *_instance, U32 _self, U32 rectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + rectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSWindow*)_self dataWithPDFInsideRect:_t1];
    return (U32)_result;
}

// method '-[NSWindow deepestScreen]'
U32 env___IM_NSWindow_deepestScreen(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self deepestScreen];
    return (U32)_result;
}

// method '-[NSWindow defaultButtonCell]'
U32 env___IM_NSWindow_defaultButtonCell(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self defaultButtonCell];
    return (U32)_result;
}

// method '+[NSWindow defaultDepthLimit]'
U32 env___CM_NSWindow_defaultDepthLimit(void *_instance, U32 _class) {
    int _result = (int)[(Class)_class defaultDepthLimit];
    return (U32)_result;
}

// method '-[NSWindow delegate]'
U32 env___IM_NSWindow_delegate(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self delegate];
    return (U32)_result;
}

// method '-[NSWindow deminiaturize:]'
void env___IM_NSWindow_deminiaturize_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self deminiaturize:_t1];
}

// method '-[NSWindow depthLimit]'
U32 env___IM_NSWindow_depthLimit(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self depthLimit];
    return (U32)_result;
}

// method '-[NSWindow deviceDescription]'
U32 env___IM_NSWindow_deviceDescription(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self deviceDescription];
    return (U32)_result;
}

// method '-[NSWindow disableCursorRects]'
void env___IM_NSWindow_disableCursorRects(void *_instance, U32 _self) {
    [(NSWindow*)_self disableCursorRects];
}

// method '-[NSWindow disableFlushWindow]'
void env___IM_NSWindow_disableFlushWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self disableFlushWindow];
}

// method '-[NSWindow disableKeyEquivalentForDefaultButtonCell]'
void env___IM_NSWindow_disableKeyEquivalentForDefaultButtonCell(void *_instance, U32 _self) {
    [(NSWindow*)_self disableKeyEquivalentForDefaultButtonCell];
}

// method '-[NSWindow disableScreenUpdatesUntilFlush]'
void env___IM_NSWindow_disableScreenUpdatesUntilFlush(void *_instance, U32 _self) {
    [(NSWindow*)_self disableScreenUpdatesUntilFlush];
}

// method '-[NSWindow discardCachedImage]'
void env___IM_NSWindow_discardCachedImage(void *_instance, U32 _self) {
    [(NSWindow*)_self discardCachedImage];
}

// method '-[NSWindow discardCursorRects]'
void env___IM_NSWindow_discardCursorRects(void *_instance, U32 _self) {
    [(NSWindow*)_self discardCursorRects];
}

// method '-[NSWindow discardEventsMatchingMask:beforeEvent:]'
void env___IM_NSWindow_discardEventsMatchingMask_CbeforeEvent_C(void *_instance, U32 _self, U32 mask, U32 lastEventPointer) {
    id _t1 = (id)lastEventPointer;
    [(NSWindow*)_self discardEventsMatchingMask:mask beforeEvent:_t1];
}

// method '-[NSWindow display]'
void env___IM_NSWindow_display(void *_instance, U32 _self) {
    [(NSWindow*)_self display];
}

// method '-[NSWindow displayIfNeeded]'
void env___IM_NSWindow_displayIfNeeded(void *_instance, U32 _self) {
    [(NSWindow*)_self displayIfNeeded];
}

// method '-[NSWindow displaysWhenScreenProfileChanges]'
U32 env___IM_NSWindow_displaysWhenScreenProfileChanges(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self displaysWhenScreenProfileChanges];
    return (U32)_result;
}

// method '-[NSWindow dragImage:at:offset:event:pasteboard:source:slideBack:]'
void env___IM_NSWindow_dragImage_Cat_Coffset_Cevent_Cpasteboard_Csource_CslideBack_C(void *_instance, U32 _self, U32 anImagePointer, U32 baseLocationIndirect, U32 initialOffsetIndirect, U32 eventPointer, U32 pboardPointer, U32 sourceObjPointer, U32 slideFlag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)anImagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + baseLocationIndirect);
    NSSize _t3 = *(NSSize*)(_mem->data + initialOffsetIndirect);
    id _t4 = (id)eventPointer;
    id _t5 = (id)pboardPointer;
    id _t6 = (id)sourceObjPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    swap_f(&_t3.width);
    swap_f(&_t3.height);
    #endif
    [(NSWindow*)_self dragImage:_t1 at:_t2 offset:_t3 event:_t4 pasteboard:_t5 source:_t6 slideBack:slideFlag];
}

// method '-[NSWindow drawers]'
U32 env___IM_NSWindow_drawers(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self drawers];
    return (U32)_result;
}

// method '-[NSWindow enableCursorRects]'
void env___IM_NSWindow_enableCursorRects(void *_instance, U32 _self) {
    [(NSWindow*)_self enableCursorRects];
}

// method '-[NSWindow enableFlushWindow]'
void env___IM_NSWindow_enableFlushWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self enableFlushWindow];
}

// method '-[NSWindow enableKeyEquivalentForDefaultButtonCell]'
void env___IM_NSWindow_enableKeyEquivalentForDefaultButtonCell(void *_instance, U32 _self) {
    [(NSWindow*)_self enableKeyEquivalentForDefaultButtonCell];
}

// method '-[NSWindow endEditingFor:]'
void env___IM_NSWindow_endEditingFor_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSWindow*)_self endEditingFor:_t1];
}

// method '-[NSWindow fieldEditor:forObject:]'
U32 env___IM_NSWindow_fieldEditor_CforObject_C(void *_instance, U32 _self, U32 createFlag, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    id _result = (id)[(NSWindow*)_self fieldEditor:createFlag forObject:_t1];
    return (U32)_result;
}

// method '-[NSWindow firstResponder]'
U32 env___IM_NSWindow_firstResponder(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self firstResponder];
    return (U32)_result;
}

// method '-[NSWindow flushWindow]'
void env___IM_NSWindow_flushWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self flushWindow];
}

// method '-[NSWindow flushWindowIfNeeded]'
void env___IM_NSWindow_flushWindowIfNeeded(void *_instance, U32 _self) {
    [(NSWindow*)_self flushWindowIfNeeded];
}

// method '-[NSWindow frame]'
void env___IM_NSWindow_frame(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _result = (NSRect)[(NSWindow*)_self frame];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow frameAutosaveName]'
U32 env___IM_NSWindow_frameAutosaveName(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self frameAutosaveName];
    return (U32)_result;
}

// method '-[NSWindow frameRectForContentRect:]'
void env___IM_NSWindow_frameRectForContentRect_C(void *_instance, U32 _resultIndirect, U32 _self, U32 contentRectIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + contentRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(NSWindow*)_self frameRectForContentRect:_t1];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSWindow frameRectForContentRect:styleMask:]'
void env___CM_NSWindow_frameRectForContentRect_CstyleMask_C(void *_instance, U32 _resultIndirect, U32 _class, U32 cRectIndirect, U32 aStyle) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + cRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    NSRect _result = (NSRect)[(Class)_class frameRectForContentRect:_t1 styleMask:aStyle];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.origin.x);
    swap_f(&_result.origin.y);
    swap_f(&_result.size.width);
    swap_f(&_result.size.height);
    #endif
    *(NSRect*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow gState]'
U32 env___IM_NSWindow_gState(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self gState];
    return (U32)_result;
}

// method '-[NSWindow graphicsContext]'
U32 env___IM_NSWindow_graphicsContext(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self graphicsContext];
    return (U32)_result;
}

// method '-[NSWindow handleCloseScriptCommand:]'
U32 env___IM_NSWindow_handleCloseScriptCommand_C(void *_instance, U32 _self, U32 commandPointer) {
    id _t1 = (id)commandPointer;
    id _result = (id)[(NSWindow*)_self handleCloseScriptCommand:_t1];
    return (U32)_result;
}

// method '-[NSWindow handlePrintScriptCommand:]'
U32 env___IM_NSWindow_handlePrintScriptCommand_C(void *_instance, U32 _self, U32 commandPointer) {
    id _t1 = (id)commandPointer;
    id _result = (id)[(NSWindow*)_self handlePrintScriptCommand:_t1];
    return (U32)_result;
}

// method '-[NSWindow handleSaveScriptCommand:]'
U32 env___IM_NSWindow_handleSaveScriptCommand_C(void *_instance, U32 _self, U32 commandPointer) {
    id _t1 = (id)commandPointer;
    id _result = (id)[(NSWindow*)_self handleSaveScriptCommand:_t1];
    return (U32)_result;
}

// method '-[NSWindow hasCloseBox]'
U32 env___IM_NSWindow_hasCloseBox(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self hasCloseBox];
    return (U32)_result;
}

// method '-[NSWindow hasDynamicDepthLimit]'
U32 env___IM_NSWindow_hasDynamicDepthLimit(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self hasDynamicDepthLimit];
    return (U32)_result;
}

// method '-[NSWindow hasShadow]'
U32 env___IM_NSWindow_hasShadow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self hasShadow];
    return (U32)_result;
}

// method '-[NSWindow hasTitleBar]'
U32 env___IM_NSWindow_hasTitleBar(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self hasTitleBar];
    return (U32)_result;
}

// method '-[NSWindow hidesOnDeactivate]'
U32 env___IM_NSWindow_hidesOnDeactivate(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self hidesOnDeactivate];
    return (U32)_result;
}

// method '-[NSWindow ignoresMouseEvents]'
U32 env___IM_NSWindow_ignoresMouseEvents(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self ignoresMouseEvents];
    return (U32)_result;
}

// method '-[NSWindow initWithContentRect:styleMask:backing:defer:]'
U32 env___IM_NSWindow_initWithContentRect_CstyleMask_Cbacking_Cdefer_C(void *_instance, U32 _self, U32 contentRectIndirect, U32 aStyle, U32 bufferingType, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + contentRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSWindow*)_self initWithContentRect:_t1 styleMask:aStyle backing:bufferingType defer:flag];
    return (U32)_result;
}

// method '-[NSWindow initWithContentRect:styleMask:backing:defer:screen:]'
U32 env___IM_NSWindow_initWithContentRect_CstyleMask_Cbacking_Cdefer_Cscreen_C(void *_instance, U32 _self, U32 contentRectIndirect, U32 aStyle, U32 bufferingType, U32 flag, U32 screenPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + contentRectIndirect);
    id _t2 = (id)screenPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    id _result = (id)[(NSWindow*)_self initWithContentRect:_t1 styleMask:aStyle backing:bufferingType defer:flag screen:_t2];
    return (U32)_result;
}

// method '-[NSWindow initWithWindowRef:]'
U32 env___IM_NSWindow_initWithWindowRef_C(void *_instance, U32 _self, U32 windowRefPointer) {
    struct OpaqueWindowPtr* _t1 = (struct OpaqueWindowPtr*)windowRefPointer;
    id _result = (id)[(NSWindow*)_self initWithWindowRef:_t1];
    return (U32)_result;
}

// method '-[NSWindow initialFirstResponder]'
U32 env___IM_NSWindow_initialFirstResponder(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self initialFirstResponder];
    return (U32)_result;
}

// method '-[NSWindow invalidateCursorRectsForView:]'
void env___IM_NSWindow_invalidateCursorRectsForView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSWindow*)_self invalidateCursorRectsForView:_t1];
}

// method '-[NSWindow invalidateShadow]'
void env___IM_NSWindow_invalidateShadow(void *_instance, U32 _self) {
    [(NSWindow*)_self invalidateShadow];
}

// method '-[NSWindow isAutodisplay]'
U32 env___IM_NSWindow_isAutodisplay(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isAutodisplay];
    return (U32)_result;
}

// method '-[NSWindow isDocumentEdited]'
U32 env___IM_NSWindow_isDocumentEdited(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isDocumentEdited];
    return (U32)_result;
}

// method '-[NSWindow isExcludedFromWindowsMenu]'
U32 env___IM_NSWindow_isExcludedFromWindowsMenu(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isExcludedFromWindowsMenu];
    return (U32)_result;
}

// method '-[NSWindow isFloatingPanel]'
U32 env___IM_NSWindow_isFloatingPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isFloatingPanel];
    return (U32)_result;
}

// method '-[NSWindow isFlushWindowDisabled]'
U32 env___IM_NSWindow_isFlushWindowDisabled(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isFlushWindowDisabled];
    return (U32)_result;
}

// method '-[NSWindow isKeyWindow]'
U32 env___IM_NSWindow_isKeyWindow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isKeyWindow];
    return (U32)_result;
}

// method '-[NSWindow isMainWindow]'
U32 env___IM_NSWindow_isMainWindow(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isMainWindow];
    return (U32)_result;
}

// method '-[NSWindow isMiniaturizable]'
U32 env___IM_NSWindow_isMiniaturizable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isMiniaturizable];
    return (U32)_result;
}

// method '-[NSWindow isMiniaturized]'
U32 env___IM_NSWindow_isMiniaturized(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isMiniaturized];
    return (U32)_result;
}

// method '-[NSWindow isModalPanel]'
U32 env___IM_NSWindow_isModalPanel(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isModalPanel];
    return (U32)_result;
}

// method '-[NSWindow isMovableByWindowBackground]'
U32 env___IM_NSWindow_isMovableByWindowBackground(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isMovableByWindowBackground];
    return (U32)_result;
}

// method '-[NSWindow isOneShot]'
U32 env___IM_NSWindow_isOneShot(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isOneShot];
    return (U32)_result;
}

// method '-[NSWindow isOpaque]'
U32 env___IM_NSWindow_isOpaque(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isOpaque];
    return (U32)_result;
}

// method '-[NSWindow isReleasedWhenClosed]'
U32 env___IM_NSWindow_isReleasedWhenClosed(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isReleasedWhenClosed];
    return (U32)_result;
}

// method '-[NSWindow isResizable]'
U32 env___IM_NSWindow_isResizable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isResizable];
    return (U32)_result;
}

// method '-[NSWindow isSheet]'
U32 env___IM_NSWindow_isSheet(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isSheet];
    return (U32)_result;
}

// method '-[NSWindow isVisible]'
U32 env___IM_NSWindow_isVisible(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isVisible];
    return (U32)_result;
}

// method '-[NSWindow isZoomable]'
U32 env___IM_NSWindow_isZoomable(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isZoomable];
    return (U32)_result;
}

// method '-[NSWindow isZoomed]'
U32 env___IM_NSWindow_isZoomed(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self isZoomed];
    return (U32)_result;
}

// method '-[NSWindow keyDown:]'
void env___IM_NSWindow_keyDown_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSWindow*)_self keyDown:_t1];
}

// method '-[NSWindow keyViewSelectionDirection]'
U32 env___IM_NSWindow_keyViewSelectionDirection(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self keyViewSelectionDirection];
    return (U32)_result;
}

// method '-[NSWindow level]'
U32 env___IM_NSWindow_level(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self level];
    return (U32)_result;
}

// method '-[NSWindow makeFirstResponder:]'
U32 env___IM_NSWindow_makeFirstResponder_C(void *_instance, U32 _self, U32 aResponderPointer) {
    id _t1 = (id)aResponderPointer;
    BOOL _result = (BOOL)[(NSWindow*)_self makeFirstResponder:_t1];
    return (U32)_result;
}

// method '-[NSWindow makeKeyAndOrderFront:]'
void env___IM_NSWindow_makeKeyAndOrderFront_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self makeKeyAndOrderFront:_t1];
}

// method '-[NSWindow makeKeyWindow]'
void env___IM_NSWindow_makeKeyWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self makeKeyWindow];
}

// method '-[NSWindow makeMainWindow]'
void env___IM_NSWindow_makeMainWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self makeMainWindow];
}

// method '-[NSWindow maxSize]'
void env___IM_NSWindow_maxSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self maxSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '+[NSWindow menuChanged:]'
void env___CM_NSWindow_menuChanged_C(void *_instance, U32 _class, U32 menuPointer) {
    id _t1 = (id)menuPointer;
    [(Class)_class menuChanged:_t1];
}

// method '+[NSWindow minFrameWidthWithTitle:styleMask:]'
F32 env___CM_NSWindow_minFrameWidthWithTitle_CstyleMask_C(void *_instance, U32 _class, U32 aTitlePointer, U32 aStyle) {
    id _t1 = (id)aTitlePointer;
    float _result = (float)[(Class)_class minFrameWidthWithTitle:_t1 styleMask:aStyle];
    return (F32)_result;
}

// method '-[NSWindow minSize]'
void env___IM_NSWindow_minSize(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self minSize];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow miniaturize:]'
void env___IM_NSWindow_miniaturize_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self miniaturize:_t1];
}

// method '-[NSWindow miniwindowImage]'
U32 env___IM_NSWindow_miniwindowImage(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self miniwindowImage];
    return (U32)_result;
}

// method '-[NSWindow miniwindowTitle]'
U32 env___IM_NSWindow_miniwindowTitle(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self miniwindowTitle];
    return (U32)_result;
}

// method '-[NSWindow mouseLocationOutsideOfEventStream]'
void env___IM_NSWindow_mouseLocationOutsideOfEventStream(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _result = (NSPoint)[(NSWindow*)_self mouseLocationOutsideOfEventStream];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.x);
    swap_f(&_result.y);
    #endif
    *(NSPoint*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow nextEventMatchingMask:]'
U32 env___IM_NSWindow_nextEventMatchingMask_C(void *_instance, U32 _self, U32 mask) {
    id _result = (id)[(NSWindow*)_self nextEventMatchingMask:mask];
    return (U32)_result;
}

// method '-[NSWindow nextEventMatchingMask:untilDate:inMode:dequeue:]'
U32 env___IM_NSWindow_nextEventMatchingMask_CuntilDate_CinMode_Cdequeue_C(void *_instance, U32 _self, U32 mask, U32 expirationPointer, U32 modePointer, U32 deqFlag) {
    id _t1 = (id)expirationPointer;
    id _t2 = (id)modePointer;
    id _result = (id)[(NSWindow*)_self nextEventMatchingMask:mask untilDate:_t1 inMode:_t2 dequeue:deqFlag];
    return (U32)_result;
}

// method '-[NSWindow orderBack:]'
void env___IM_NSWindow_orderBack_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self orderBack:_t1];
}

// method '-[NSWindow orderFront:]'
void env___IM_NSWindow_orderFront_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self orderFront:_t1];
}

// method '-[NSWindow orderFrontRegardless]'
void env___IM_NSWindow_orderFrontRegardless(void *_instance, U32 _self) {
    [(NSWindow*)_self orderFrontRegardless];
}

// method '-[NSWindow orderOut:]'
void env___IM_NSWindow_orderOut_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self orderOut:_t1];
}

// method '-[NSWindow orderWindow:relativeTo:]'
void env___IM_NSWindow_orderWindow_CrelativeTo_C(void *_instance, U32 _self, U32 place, U32 otherWin) {
    [(NSWindow*)_self orderWindow:place relativeTo:otherWin];
}

// method '-[NSWindow orderedIndex]'
U32 env___IM_NSWindow_orderedIndex(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self orderedIndex];
    return (U32)_result;
}

// method '-[NSWindow parentWindow]'
U32 env___IM_NSWindow_parentWindow(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self parentWindow];
    return (U32)_result;
}

// method '-[NSWindow performClose:]'
void env___IM_NSWindow_performClose_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self performClose:_t1];
}

// method '-[NSWindow performMiniaturize:]'
void env___IM_NSWindow_performMiniaturize_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self performMiniaturize:_t1];
}

// method '-[NSWindow performZoom:]'
void env___IM_NSWindow_performZoom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self performZoom:_t1];
}

// method '-[NSWindow postEvent:atStart:]'
void env___IM_NSWindow_postEvent_CatStart_C(void *_instance, U32 _self, U32 eventPointer, U32 flag) {
    id _t1 = (id)eventPointer;
    [(NSWindow*)_self postEvent:_t1 atStart:flag];
}

// method '-[NSWindow preservesContentDuringLiveResize]'
U32 env___IM_NSWindow_preservesContentDuringLiveResize(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self preservesContentDuringLiveResize];
    return (U32)_result;
}

// method '-[NSWindow print:]'
void env___IM_NSWindow_print_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self print:_t1];
}

// method '-[NSWindow recalculateKeyViewLoop]'
void env___IM_NSWindow_recalculateKeyViewLoop(void *_instance, U32 _self) {
    [(NSWindow*)_self recalculateKeyViewLoop];
}

// method '-[NSWindow registerForDraggedTypes:]'
void env___IM_NSWindow_registerForDraggedTypes_C(void *_instance, U32 _self, U32 newTypesPointer) {
    id _t1 = (id)newTypesPointer;
    [(NSWindow*)_self registerForDraggedTypes:_t1];
}

// method '-[NSWindow removeChildWindow:]'
void env___IM_NSWindow_removeChildWindow_C(void *_instance, U32 _self, U32 childWinPointer) {
    id _t1 = (id)childWinPointer;
    [(NSWindow*)_self removeChildWindow:_t1];
}

// method '+[NSWindow removeFrameUsingName:]'
void env___CM_NSWindow_removeFrameUsingName_C(void *_instance, U32 _class, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(Class)_class removeFrameUsingName:_t1];
}

// method '-[NSWindow representedFilename]'
U32 env___IM_NSWindow_representedFilename(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self representedFilename];
    return (U32)_result;
}

// method '-[NSWindow resetCursorRects]'
void env___IM_NSWindow_resetCursorRects(void *_instance, U32 _self) {
    [(NSWindow*)_self resetCursorRects];
}

// method '-[NSWindow resignKeyWindow]'
void env___IM_NSWindow_resignKeyWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self resignKeyWindow];
}

// method '-[NSWindow resignMainWindow]'
void env___IM_NSWindow_resignMainWindow(void *_instance, U32 _self) {
    [(NSWindow*)_self resignMainWindow];
}

// method '-[NSWindow resizeFlags]'
U32 env___IM_NSWindow_resizeFlags(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self resizeFlags];
    return (U32)_result;
}

// method '-[NSWindow resizeIncrements]'
void env___IM_NSWindow_resizeIncrements(void *_instance, U32 _resultIndirect, U32 _self) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _result = (NSSize)[(NSWindow*)_self resizeIncrements];
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_result.width);
    swap_f(&_result.height);
    #endif
    *(NSSize*)(_mem->data + _resultIndirect) = _result;
}

// method '-[NSWindow restoreCachedImage]'
void env___IM_NSWindow_restoreCachedImage(void *_instance, U32 _self) {
    [(NSWindow*)_self restoreCachedImage];
}

// method '-[NSWindow runToolbarCustomizationPalette:]'
void env___IM_NSWindow_runToolbarCustomizationPalette_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self runToolbarCustomizationPalette:_t1];
}

// method '-[NSWindow saveFrameUsingName:]'
void env___IM_NSWindow_saveFrameUsingName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(NSWindow*)_self saveFrameUsingName:_t1];
}

// method '-[NSWindow screen]'
U32 env___IM_NSWindow_screen(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self screen];
    return (U32)_result;
}

// method '-[NSWindow selectKeyViewFollowingView:]'
void env___IM_NSWindow_selectKeyViewFollowingView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSWindow*)_self selectKeyViewFollowingView:_t1];
}

// method '-[NSWindow selectKeyViewPrecedingView:]'
void env___IM_NSWindow_selectKeyViewPrecedingView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSWindow*)_self selectKeyViewPrecedingView:_t1];
}

// method '-[NSWindow selectNextKeyView:]'
void env___IM_NSWindow_selectNextKeyView_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self selectNextKeyView:_t1];
}

// method '-[NSWindow selectPreviousKeyView:]'
void env___IM_NSWindow_selectPreviousKeyView_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self selectPreviousKeyView:_t1];
}

// method '-[NSWindow sendEvent:]'
void env___IM_NSWindow_sendEvent_C(void *_instance, U32 _self, U32 theEventPointer) {
    id _t1 = (id)theEventPointer;
    [(NSWindow*)_self sendEvent:_t1];
}

// method '-[NSWindow setAcceptsMouseMovedEvents:]'
void env___IM_NSWindow_setAcceptsMouseMovedEvents_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setAcceptsMouseMovedEvents:flag];
}

// method '-[NSWindow setAllowsToolTipsWhenApplicationIsInactive:]'
void env___IM_NSWindow_setAllowsToolTipsWhenApplicationIsInactive_C(void *_instance, U32 _self, U32 allowWhenInactive) {
    [(NSWindow*)_self setAllowsToolTipsWhenApplicationIsInactive:allowWhenInactive];
}

// method '-[NSWindow setAlphaValue:]'
void env___IM_NSWindow_setAlphaValue_C(void *_instance, U32 _self, F32 windowAlpha) {
    [(NSWindow*)_self setAlphaValue:windowAlpha];
}

// method '-[NSWindow setAspectRatio:]'
void env___IM_NSWindow_setAspectRatio_C(void *_instance, U32 _self, U32 ratioIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + ratioIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setAspectRatio:_t1];
}

// method '-[NSWindow setAutodisplay:]'
void env___IM_NSWindow_setAutodisplay_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setAutodisplay:flag];
}

// method '-[NSWindow setAutorecalculatesKeyViewLoop:]'
void env___IM_NSWindow_setAutorecalculatesKeyViewLoop_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setAutorecalculatesKeyViewLoop:flag];
}

// method '-[NSWindow setBackgroundColor:]'
void env___IM_NSWindow_setBackgroundColor_C(void *_instance, U32 _self, U32 colorPointer) {
    id _t1 = (id)colorPointer;
    [(NSWindow*)_self setBackgroundColor:_t1];
}

// method '-[NSWindow setBackingType:]'
void env___IM_NSWindow_setBackingType_C(void *_instance, U32 _self, U32 bufferingType) {
    [(NSWindow*)_self setBackingType:bufferingType];
}

// method '-[NSWindow setCanHide:]'
void env___IM_NSWindow_setCanHide_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setCanHide:flag];
}

// method '-[NSWindow setContentAspectRatio:]'
void env___IM_NSWindow_setContentAspectRatio_C(void *_instance, U32 _self, U32 ratioIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + ratioIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setContentAspectRatio:_t1];
}

// method '-[NSWindow setContentMaxSize:]'
void env___IM_NSWindow_setContentMaxSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setContentMaxSize:_t1];
}

// method '-[NSWindow setContentMinSize:]'
void env___IM_NSWindow_setContentMinSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setContentMinSize:_t1];
}

// method '-[NSWindow setContentResizeIncrements:]'
void env___IM_NSWindow_setContentResizeIncrements_C(void *_instance, U32 _self, U32 incrementsIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + incrementsIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setContentResizeIncrements:_t1];
}

// method '-[NSWindow setContentSize:]'
void env___IM_NSWindow_setContentSize_C(void *_instance, U32 _self, U32 aSizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + aSizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setContentSize:_t1];
}

// method '-[NSWindow setContentView:]'
void env___IM_NSWindow_setContentView_C(void *_instance, U32 _self, U32 aViewPointer) {
    id _t1 = (id)aViewPointer;
    [(NSWindow*)_self setContentView:_t1];
}

// method '-[NSWindow setDefaultButtonCell:]'
void env___IM_NSWindow_setDefaultButtonCell_C(void *_instance, U32 _self, U32 defButtPointer) {
    id _t1 = (id)defButtPointer;
    [(NSWindow*)_self setDefaultButtonCell:_t1];
}

// method '-[NSWindow setDelegate:]'
void env___IM_NSWindow_setDelegate_C(void *_instance, U32 _self, U32 anObjectPointer) {
    id _t1 = (id)anObjectPointer;
    [(NSWindow*)_self setDelegate:_t1];
}

// method '-[NSWindow setDepthLimit:]'
void env___IM_NSWindow_setDepthLimit_C(void *_instance, U32 _self, U32 limit) {
    [(NSWindow*)_self setDepthLimit:limit];
}

// method '-[NSWindow setDisplaysWhenScreenProfileChanges:]'
void env___IM_NSWindow_setDisplaysWhenScreenProfileChanges_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setDisplaysWhenScreenProfileChanges:flag];
}

// method '-[NSWindow setDocumentEdited:]'
void env___IM_NSWindow_setDocumentEdited_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setDocumentEdited:flag];
}

// method '-[NSWindow setDynamicDepthLimit:]'
void env___IM_NSWindow_setDynamicDepthLimit_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setDynamicDepthLimit:flag];
}

// method '-[NSWindow setExcludedFromWindowsMenu:]'
void env___IM_NSWindow_setExcludedFromWindowsMenu_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setExcludedFromWindowsMenu:flag];
}

// method '-[NSWindow setFrame:display:]'
void env___IM_NSWindow_setFrame_Cdisplay_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 flag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSWindow*)_self setFrame:_t1 display:flag];
}

// method '-[NSWindow setFrame:display:animate:]'
void env___IM_NSWindow_setFrame_Cdisplay_Canimate_C(void *_instance, U32 _self, U32 frameRectIndirect, U32 displayFlag, U32 animateFlag) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSRect _t1 = *(NSRect*)(_mem->data + frameRectIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.origin.x);
    swap_f(&_t1.origin.y);
    swap_f(&_t1.size.width);
    swap_f(&_t1.size.height);
    #endif
    [(NSWindow*)_self setFrame:_t1 display:displayFlag animate:animateFlag];
}

// method '-[NSWindow setFrameAutosaveName:]'
U32 env___IM_NSWindow_setFrameAutosaveName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    BOOL _result = (BOOL)[(NSWindow*)_self setFrameAutosaveName:_t1];
    return (U32)_result;
}

// method '-[NSWindow setFrameFromString:]'
void env___IM_NSWindow_setFrameFromString_C(void *_instance, U32 _self, U32 stringPointer) {
    id _t1 = (id)stringPointer;
    [(NSWindow*)_self setFrameFromString:_t1];
}

// method '-[NSWindow setFrameOrigin:]'
void env___IM_NSWindow_setFrameOrigin_C(void *_instance, U32 _self, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSWindow*)_self setFrameOrigin:_t1];
}

// method '-[NSWindow setFrameTopLeftPoint:]'
void env___IM_NSWindow_setFrameTopLeftPoint_C(void *_instance, U32 _self, U32 aPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSPoint _t1 = *(NSPoint*)(_mem->data + aPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.x);
    swap_f(&_t1.y);
    #endif
    [(NSWindow*)_self setFrameTopLeftPoint:_t1];
}

// method '-[NSWindow setFrameUsingName:]'
U32 env___IM_NSWindow_setFrameUsingName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    BOOL _result = (BOOL)[(NSWindow*)_self setFrameUsingName:_t1];
    return (U32)_result;
}

// method '-[NSWindow setFrameUsingName:force:]'
U32 env___IM_NSWindow_setFrameUsingName_Cforce_C(void *_instance, U32 _self, U32 namePointer, U32 force) {
    id _t1 = (id)namePointer;
    BOOL _result = (BOOL)[(NSWindow*)_self setFrameUsingName:_t1 force:force];
    return (U32)_result;
}

// method '-[NSWindow setHasShadow:]'
void env___IM_NSWindow_setHasShadow_C(void *_instance, U32 _self, U32 hasShadow) {
    [(NSWindow*)_self setHasShadow:hasShadow];
}

// method '-[NSWindow setHidesOnDeactivate:]'
void env___IM_NSWindow_setHidesOnDeactivate_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setHidesOnDeactivate:flag];
}

// method '-[NSWindow setIgnoresMouseEvents:]'
void env___IM_NSWindow_setIgnoresMouseEvents_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setIgnoresMouseEvents:flag];
}

// method '-[NSWindow setInitialFirstResponder:]'
void env___IM_NSWindow_setInitialFirstResponder_C(void *_instance, U32 _self, U32 viewPointer) {
    id _t1 = (id)viewPointer;
    [(NSWindow*)_self setInitialFirstResponder:_t1];
}

// method '-[NSWindow setIsMiniaturized:]'
void env___IM_NSWindow_setIsMiniaturized_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setIsMiniaturized:flag];
}

// method '-[NSWindow setIsVisible:]'
void env___IM_NSWindow_setIsVisible_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setIsVisible:flag];
}

// method '-[NSWindow setIsZoomed:]'
void env___IM_NSWindow_setIsZoomed_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setIsZoomed:flag];
}

// method '-[NSWindow setLevel:]'
void env___IM_NSWindow_setLevel_C(void *_instance, U32 _self, U32 newLevel) {
    [(NSWindow*)_self setLevel:newLevel];
}

// method '-[NSWindow setMaxSize:]'
void env___IM_NSWindow_setMaxSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setMaxSize:_t1];
}

// method '-[NSWindow setMinSize:]'
void env___IM_NSWindow_setMinSize_C(void *_instance, U32 _self, U32 sizeIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + sizeIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setMinSize:_t1];
}

// method '-[NSWindow setMiniwindowImage:]'
void env___IM_NSWindow_setMiniwindowImage_C(void *_instance, U32 _self, U32 imagePointer) {
    id _t1 = (id)imagePointer;
    [(NSWindow*)_self setMiniwindowImage:_t1];
}

// method '-[NSWindow setMiniwindowTitle:]'
void env___IM_NSWindow_setMiniwindowTitle_C(void *_instance, U32 _self, U32 titlePointer) {
    id _t1 = (id)titlePointer;
    [(NSWindow*)_self setMiniwindowTitle:_t1];
}

// method '-[NSWindow setMovableByWindowBackground:]'
void env___IM_NSWindow_setMovableByWindowBackground_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setMovableByWindowBackground:flag];
}

// method '-[NSWindow setOneShot:]'
void env___IM_NSWindow_setOneShot_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setOneShot:flag];
}

// method '-[NSWindow setOpaque:]'
void env___IM_NSWindow_setOpaque_C(void *_instance, U32 _self, U32 isOpaque) {
    [(NSWindow*)_self setOpaque:isOpaque];
}

// method '-[NSWindow setOrderedIndex:]'
void env___IM_NSWindow_setOrderedIndex_C(void *_instance, U32 _self, U32 index) {
    [(NSWindow*)_self setOrderedIndex:index];
}

// method '-[NSWindow setParentWindow:]'
void env___IM_NSWindow_setParentWindow_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    [(NSWindow*)_self setParentWindow:_t1];
}

// method '-[NSWindow setPreservesContentDuringLiveResize:]'
void env___IM_NSWindow_setPreservesContentDuringLiveResize_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setPreservesContentDuringLiveResize:flag];
}

// method '-[NSWindow setReleasedWhenClosed:]'
void env___IM_NSWindow_setReleasedWhenClosed_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setReleasedWhenClosed:flag];
}

// method '-[NSWindow setRepresentedFilename:]'
void env___IM_NSWindow_setRepresentedFilename_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSWindow*)_self setRepresentedFilename:_t1];
}

// method '-[NSWindow setResizeIncrements:]'
void env___IM_NSWindow_setResizeIncrements_C(void *_instance, U32 _self, U32 incrementsIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    NSSize _t1 = *(NSSize*)(_mem->data + incrementsIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t1.width);
    swap_f(&_t1.height);
    #endif
    [(NSWindow*)_self setResizeIncrements:_t1];
}

// method '-[NSWindow setShowsResizeIndicator:]'
void env___IM_NSWindow_setShowsResizeIndicator_C(void *_instance, U32 _self, U32 show) {
    [(NSWindow*)_self setShowsResizeIndicator:show];
}

// method '-[NSWindow setShowsToolbarButton:]'
void env___IM_NSWindow_setShowsToolbarButton_C(void *_instance, U32 _self, U32 show) {
    [(NSWindow*)_self setShowsToolbarButton:show];
}

// method '-[NSWindow setTitle:]'
void env___IM_NSWindow_setTitle_C(void *_instance, U32 _self, U32 aStringPointer) {
    id _t1 = (id)aStringPointer;
    [(NSWindow*)_self setTitle:_t1];
}

// method '-[NSWindow setTitleWithRepresentedFilename:]'
void env___IM_NSWindow_setTitleWithRepresentedFilename_C(void *_instance, U32 _self, U32 filenamePointer) {
    id _t1 = (id)filenamePointer;
    [(NSWindow*)_self setTitleWithRepresentedFilename:_t1];
}

// method '-[NSWindow setToolbar:]'
void env___IM_NSWindow_setToolbar_C(void *_instance, U32 _self, U32 toolbarPointer) {
    id _t1 = (id)toolbarPointer;
    [(NSWindow*)_self setToolbar:_t1];
}

// method '-[NSWindow setViewsNeedDisplay:]'
void env___IM_NSWindow_setViewsNeedDisplay_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self setViewsNeedDisplay:flag];
}

// method '-[NSWindow setWindowController:]'
void env___IM_NSWindow_setWindowController_C(void *_instance, U32 _self, U32 windowControllerPointer) {
    id _t1 = (id)windowControllerPointer;
    [(NSWindow*)_self setWindowController:_t1];
}

// method '-[NSWindow showsResizeIndicator]'
U32 env___IM_NSWindow_showsResizeIndicator(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self showsResizeIndicator];
    return (U32)_result;
}

// method '-[NSWindow showsToolbarButton]'
U32 env___IM_NSWindow_showsToolbarButton(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self showsToolbarButton];
    return (U32)_result;
}

// method '-[NSWindow standardWindowButton:]'
U32 env___IM_NSWindow_standardWindowButton_C(void *_instance, U32 _self, U32 b) {
    id _result = (id)[(NSWindow*)_self standardWindowButton:b];
    return (U32)_result;
}

// method '+[NSWindow standardWindowButton:forStyleMask:]'
U32 env___CM_NSWindow_standardWindowButton_CforStyleMask_C(void *_instance, U32 _class, U32 b, U32 styleMask) {
    id _result = (id)[(Class)_class standardWindowButton:b forStyleMask:styleMask];
    return (U32)_result;
}

// method '-[NSWindow stringWithSavedFrame]'
U32 env___IM_NSWindow_stringWithSavedFrame(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self stringWithSavedFrame];
    return (U32)_result;
}

// method '-[NSWindow styleMask]'
U32 env___IM_NSWindow_styleMask(void *_instance, U32 _self) {
    unsigned int _result = (unsigned int)[(NSWindow*)_self styleMask];
    return (U32)_result;
}

// method '-[NSWindow title]'
U32 env___IM_NSWindow_title(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self title];
    return (U32)_result;
}

// method '-[NSWindow toggleToolbarShown:]'
void env___IM_NSWindow_toggleToolbarShown_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self toggleToolbarShown:_t1];
}

// method '-[NSWindow toolbar]'
U32 env___IM_NSWindow_toolbar(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self toolbar];
    return (U32)_result;
}

// method '-[NSWindow tryToPerform:with:]'
U32 env___IM_NSWindow_tryToPerform_Cwith_C(void *_instance, U32 _self, U32 anActionPointer, U32 anObjectPointer) {
    SEL _t1 = (SEL)anActionPointer;
    id _t2 = (id)anObjectPointer;
    BOOL _result = (BOOL)[(NSWindow*)_self tryToPerform:_t1 with:_t2];
    return (U32)_result;
}

// method '-[NSWindow unregisterDraggedTypes]'
void env___IM_NSWindow_unregisterDraggedTypes(void *_instance, U32 _self) {
    [(NSWindow*)_self unregisterDraggedTypes];
}

// method '-[NSWindow update]'
void env___IM_NSWindow_update(void *_instance, U32 _self) {
    [(NSWindow*)_self update];
}

// method '-[NSWindow useOptimizedDrawing:]'
void env___IM_NSWindow_useOptimizedDrawing_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindow*)_self useOptimizedDrawing:flag];
}

// method '-[NSWindow userSpaceScaleFactor]'
F32 env___IM_NSWindow_userSpaceScaleFactor(void *_instance, U32 _self) {
    float _result = (float)[(NSWindow*)_self userSpaceScaleFactor];
    return (F32)_result;
}

// method '-[NSWindow validRequestorForSendType:returnType:]'
U32 env___IM_NSWindow_validRequestorForSendType_CreturnType_C(void *_instance, U32 _self, U32 sendTypePointer, U32 returnTypePointer) {
    id _t1 = (id)sendTypePointer;
    id _t2 = (id)returnTypePointer;
    id _result = (id)[(NSWindow*)_self validRequestorForSendType:_t1 returnType:_t2];
    return (U32)_result;
}

// method '-[NSWindow viewsNeedDisplay]'
U32 env___IM_NSWindow_viewsNeedDisplay(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self viewsNeedDisplay];
    return (U32)_result;
}

// method '-[NSWindow windowController]'
U32 env___IM_NSWindow_windowController(void *_instance, U32 _self) {
    id _result = (id)[(NSWindow*)_self windowController];
    return (U32)_result;
}

// method '-[NSWindow windowNumber]'
U32 env___IM_NSWindow_windowNumber(void *_instance, U32 _self) {
    int _result = (int)[(NSWindow*)_self windowNumber];
    return (U32)_result;
}

// method '-[NSWindow windowRef]'
U32 env___IM_NSWindow_windowRef(void *_instance, U32 _self) {
    struct OpaqueWindowPtr* _result = (struct OpaqueWindowPtr*)[(NSWindow*)_self windowRef];
    return (U32)_result;
}

// method '-[NSWindow worksWhenModal]'
U32 env___IM_NSWindow_worksWhenModal(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindow*)_self worksWhenModal];
    return (U32)_result;
}

// method '-[NSWindow zoom:]'
void env___IM_NSWindow_zoom_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindow*)_self zoom:_t1];
}

// method '-[NSWindowController close]'
void env___IM_NSWindowController_close(void *_instance, U32 _self) {
    [(NSWindowController*)_self close];
}

// method '-[NSWindowController document]'
U32 env___IM_NSWindowController_document(void *_instance, U32 _self) {
    id _result = (id)[(NSWindowController*)_self document];
    return (U32)_result;
}

// method '-[NSWindowController initWithWindow:]'
U32 env___IM_NSWindowController_initWithWindow_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    id _result = (id)[(NSWindowController*)_self initWithWindow:_t1];
    return (U32)_result;
}

// method '-[NSWindowController initWithWindowNibName:]'
U32 env___IM_NSWindowController_initWithWindowNibName_C(void *_instance, U32 _self, U32 windowNibNamePointer) {
    id _t1 = (id)windowNibNamePointer;
    id _result = (id)[(NSWindowController*)_self initWithWindowNibName:_t1];
    return (U32)_result;
}

// method '-[NSWindowController initWithWindowNibName:owner:]'
U32 env___IM_NSWindowController_initWithWindowNibName_Cowner_C(void *_instance, U32 _self, U32 windowNibNamePointer, U32 ownerPointer) {
    id _t1 = (id)windowNibNamePointer;
    id _t2 = (id)ownerPointer;
    id _result = (id)[(NSWindowController*)_self initWithWindowNibName:_t1 owner:_t2];
    return (U32)_result;
}

// method '-[NSWindowController initWithWindowNibPath:owner:]'
U32 env___IM_NSWindowController_initWithWindowNibPath_Cowner_C(void *_instance, U32 _self, U32 windowNibPathPointer, U32 ownerPointer) {
    id _t1 = (id)windowNibPathPointer;
    id _t2 = (id)ownerPointer;
    id _result = (id)[(NSWindowController*)_self initWithWindowNibPath:_t1 owner:_t2];
    return (U32)_result;
}

// method '-[NSWindowController isWindowLoaded]'
U32 env___IM_NSWindowController_isWindowLoaded(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindowController*)_self isWindowLoaded];
    return (U32)_result;
}

// method '-[NSWindowController loadWindow]'
void env___IM_NSWindowController_loadWindow(void *_instance, U32 _self) {
    [(NSWindowController*)_self loadWindow];
}

// method '-[NSWindowController owner]'
U32 env___IM_NSWindowController_owner(void *_instance, U32 _self) {
    id _result = (id)[(NSWindowController*)_self owner];
    return (U32)_result;
}

// method '-[NSWindowController setDocument:]'
void env___IM_NSWindowController_setDocument_C(void *_instance, U32 _self, U32 documentPointer) {
    id _t1 = (id)documentPointer;
    [(NSWindowController*)_self setDocument:_t1];
}

// method '-[NSWindowController setDocumentEdited:]'
void env___IM_NSWindowController_setDocumentEdited_C(void *_instance, U32 _self, U32 dirtyFlag) {
    [(NSWindowController*)_self setDocumentEdited:dirtyFlag];
}

// method '-[NSWindowController setShouldCascadeWindows:]'
void env___IM_NSWindowController_setShouldCascadeWindows_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindowController*)_self setShouldCascadeWindows:flag];
}

// method '-[NSWindowController setShouldCloseDocument:]'
void env___IM_NSWindowController_setShouldCloseDocument_C(void *_instance, U32 _self, U32 flag) {
    [(NSWindowController*)_self setShouldCloseDocument:flag];
}

// method '-[NSWindowController setWindow:]'
void env___IM_NSWindowController_setWindow_C(void *_instance, U32 _self, U32 windowPointer) {
    id _t1 = (id)windowPointer;
    [(NSWindowController*)_self setWindow:_t1];
}

// method '-[NSWindowController setWindowFrameAutosaveName:]'
void env___IM_NSWindowController_setWindowFrameAutosaveName_C(void *_instance, U32 _self, U32 namePointer) {
    id _t1 = (id)namePointer;
    [(NSWindowController*)_self setWindowFrameAutosaveName:_t1];
}

// method '-[NSWindowController shouldCascadeWindows]'
U32 env___IM_NSWindowController_shouldCascadeWindows(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindowController*)_self shouldCascadeWindows];
    return (U32)_result;
}

// method '-[NSWindowController shouldCloseDocument]'
U32 env___IM_NSWindowController_shouldCloseDocument(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWindowController*)_self shouldCloseDocument];
    return (U32)_result;
}

// method '-[NSWindowController showWindow:]'
void env___IM_NSWindowController_showWindow_C(void *_instance, U32 _self, U32 senderPointer) {
    id _t1 = (id)senderPointer;
    [(NSWindowController*)_self showWindow:_t1];
}

// method '-[NSWindowController synchronizeWindowTitleWithDocumentName]'
void env___IM_NSWindowController_synchronizeWindowTitleWithDocumentName(void *_instance, U32 _self) {
    [(NSWindowController*)_self synchronizeWindowTitleWithDocumentName];
}

// method '-[NSWindowController window]'
U32 env___IM_NSWindowController_window(void *_instance, U32 _self) {
    id _result = (id)[(NSWindowController*)_self window];
    return (U32)_result;
}

// method '-[NSWindowController windowDidLoad]'
void env___IM_NSWindowController_windowDidLoad(void *_instance, U32 _self) {
    [(NSWindowController*)_self windowDidLoad];
}

// method '-[NSWindowController windowFrameAutosaveName]'
U32 env___IM_NSWindowController_windowFrameAutosaveName(void *_instance, U32 _self) {
    id _result = (id)[(NSWindowController*)_self windowFrameAutosaveName];
    return (U32)_result;
}

// method '-[NSWindowController windowNibName]'
U32 env___IM_NSWindowController_windowNibName(void *_instance, U32 _self) {
    id _result = (id)[(NSWindowController*)_self windowNibName];
    return (U32)_result;
}

// method '-[NSWindowController windowNibPath]'
U32 env___IM_NSWindowController_windowNibPath(void *_instance, U32 _self) {
    id _result = (id)[(NSWindowController*)_self windowNibPath];
    return (U32)_result;
}

// method '-[NSWindowController windowTitleForDocumentDisplayName:]'
U32 env___IM_NSWindowController_windowTitleForDocumentDisplayName_C(void *_instance, U32 _self, U32 displayNamePointer) {
    id _t1 = (id)displayNamePointer;
    id _result = (id)[(NSWindowController*)_self windowTitleForDocumentDisplayName:_t1];
    return (U32)_result;
}

// method '-[NSWindowController windowWillLoad]'
void env___IM_NSWindowController_windowWillLoad(void *_instance, U32 _self) {
    [(NSWindowController*)_self windowWillLoad];
}

// method '-[NSWorkspace absolutePathForAppBundleWithIdentifier:]'
U32 env___IM_NSWorkspace_absolutePathForAppBundleWithIdentifier_C(void *_instance, U32 _self, U32 bundleIdentifierPointer) {
    id _t1 = (id)bundleIdentifierPointer;
    id _result = (id)[(NSWorkspace*)_self absolutePathForAppBundleWithIdentifier:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace activeApplication]'
U32 env___IM_NSWorkspace_activeApplication(void *_instance, U32 _self) {
    id _result = (id)[(NSWorkspace*)_self activeApplication];
    return (U32)_result;
}

// method '-[NSWorkspace checkForRemovableMedia]'
void env___IM_NSWorkspace_checkForRemovableMedia(void *_instance, U32 _self) {
    [(NSWorkspace*)_self checkForRemovableMedia];
}

// method '-[NSWorkspace extendPowerOffBy:]'
U32 env___IM_NSWorkspace_extendPowerOffBy_C(void *_instance, U32 _self, U32 requested) {
    int _result = (int)[(NSWorkspace*)_self extendPowerOffBy:requested];
    return (U32)_result;
}

// method '-[NSWorkspace fileSystemChanged]'
U32 env___IM_NSWorkspace_fileSystemChanged(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWorkspace*)_self fileSystemChanged];
    return (U32)_result;
}

// method '-[NSWorkspace findApplications]'
void env___IM_NSWorkspace_findApplications(void *_instance, U32 _self) {
    [(NSWorkspace*)_self findApplications];
}

// method '-[NSWorkspace fullPathForApplication:]'
U32 env___IM_NSWorkspace_fullPathForApplication_C(void *_instance, U32 _self, U32 appNamePointer) {
    id _t1 = (id)appNamePointer;
    id _result = (id)[(NSWorkspace*)_self fullPathForApplication:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:]'
U32 env___IM_NSWorkspace_getFileSystemInfoForPath_CisRemovable_CisWritable_CisUnmountable_Cdescription_Ctype_C(void *_instance, U32 _self, U32 fullPathPointer, U32 removableFlagPointer, U32 writableFlagPointer, U32 unmountableFlagPointer, U32 descriptionPointer, U32 fileSystemTypePointer) {
    id _t1 = (id)fullPathPointer;
    BOOL* _t2 = (BOOL*)removableFlagPointer;
    BOOL* _t3 = (BOOL*)writableFlagPointer;
    BOOL* _t4 = (BOOL*)unmountableFlagPointer;
    id* _t5 = (id*)descriptionPointer;
    id* _t6 = (id*)fileSystemTypePointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self getFileSystemInfoForPath:_t1 isRemovable:_t2 isWritable:_t3 isUnmountable:_t4 description:_t5 type:_t6];
    return (U32)_result;
}

// method '-[NSWorkspace getInfoForFile:application:type:]'
U32 env___IM_NSWorkspace_getInfoForFile_Capplication_Ctype_C(void *_instance, U32 _self, U32 fullPathPointer, U32 appNamePointer, U32 typePointer) {
    id _t1 = (id)fullPathPointer;
    id* _t2 = (id*)appNamePointer;
    id* _t3 = (id*)typePointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self getInfoForFile:_t1 application:_t2 type:_t3];
    return (U32)_result;
}

// method '-[NSWorkspace hideOtherApplications]'
void env___IM_NSWorkspace_hideOtherApplications(void *_instance, U32 _self) {
    [(NSWorkspace*)_self hideOtherApplications];
}

// method '-[NSWorkspace iconForFile:]'
U32 env___IM_NSWorkspace_iconForFile_C(void *_instance, U32 _self, U32 fullPathPointer) {
    id _t1 = (id)fullPathPointer;
    id _result = (id)[(NSWorkspace*)_self iconForFile:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace iconForFileType:]'
U32 env___IM_NSWorkspace_iconForFileType_C(void *_instance, U32 _self, U32 fileTypePointer) {
    id _t1 = (id)fileTypePointer;
    id _result = (id)[(NSWorkspace*)_self iconForFileType:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace iconForFiles:]'
U32 env___IM_NSWorkspace_iconForFiles_C(void *_instance, U32 _self, U32 fullPathsPointer) {
    id _t1 = (id)fullPathsPointer;
    id _result = (id)[(NSWorkspace*)_self iconForFiles:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace isFilePackageAtPath:]'
U32 env___IM_NSWorkspace_isFilePackageAtPath_C(void *_instance, U32 _self, U32 fullPathPointer) {
    id _t1 = (id)fullPathPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self isFilePackageAtPath:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:]'
U32 env___IM_NSWorkspace_launchAppWithBundleIdentifier_Coptions_CadditionalEventParamDescriptor_ClaunchIdentifier_C(void *_instance, U32 _self, U32 bundleIdentifierPointer, U32 options, U32 descriptorPointer, U32 identifierPointer) {
    id _t1 = (id)bundleIdentifierPointer;
    id _t2 = (id)descriptorPointer;
    id* _t3 = (id*)identifierPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self launchAppWithBundleIdentifier:_t1 options:options additionalEventParamDescriptor:_t2 launchIdentifier:_t3];
    return (U32)_result;
}

// method '-[NSWorkspace launchApplication:]'
U32 env___IM_NSWorkspace_launchApplication_C(void *_instance, U32 _self, U32 appNamePointer) {
    id _t1 = (id)appNamePointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self launchApplication:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace launchApplication:showIcon:autolaunch:]'
U32 env___IM_NSWorkspace_launchApplication_CshowIcon_Cautolaunch_C(void *_instance, U32 _self, U32 appNamePointer, U32 showIcon, U32 autolaunch) {
    id _t1 = (id)appNamePointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self launchApplication:_t1 showIcon:showIcon autolaunch:autolaunch];
    return (U32)_result;
}

// method '-[NSWorkspace launchedApplications]'
U32 env___IM_NSWorkspace_launchedApplications(void *_instance, U32 _self) {
    id _result = (id)[(NSWorkspace*)_self launchedApplications];
    return (U32)_result;
}

// method '-[NSWorkspace mountNewRemovableMedia]'
U32 env___IM_NSWorkspace_mountNewRemovableMedia(void *_instance, U32 _self) {
    id _result = (id)[(NSWorkspace*)_self mountNewRemovableMedia];
    return (U32)_result;
}

// method '-[NSWorkspace mountedLocalVolumePaths]'
U32 env___IM_NSWorkspace_mountedLocalVolumePaths(void *_instance, U32 _self) {
    id _result = (id)[(NSWorkspace*)_self mountedLocalVolumePaths];
    return (U32)_result;
}

// method '-[NSWorkspace mountedRemovableMedia]'
U32 env___IM_NSWorkspace_mountedRemovableMedia(void *_instance, U32 _self) {
    id _result = (id)[(NSWorkspace*)_self mountedRemovableMedia];
    return (U32)_result;
}

// method '-[NSWorkspace noteFileSystemChanged]'
void env___IM_NSWorkspace_noteFileSystemChanged(void *_instance, U32 _self) {
    [(NSWorkspace*)_self noteFileSystemChanged];
}

// method '-[NSWorkspace noteFileSystemChanged:]'
void env___IM_NSWorkspace_noteFileSystemChanged_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    [(NSWorkspace*)_self noteFileSystemChanged:_t1];
}

// method '-[NSWorkspace noteUserDefaultsChanged]'
void env___IM_NSWorkspace_noteUserDefaultsChanged(void *_instance, U32 _self) {
    [(NSWorkspace*)_self noteUserDefaultsChanged];
}

// method '-[NSWorkspace notificationCenter]'
U32 env___IM_NSWorkspace_notificationCenter(void *_instance, U32 _self) {
    id _result = (id)[(NSWorkspace*)_self notificationCenter];
    return (U32)_result;
}

// method '-[NSWorkspace openFile:]'
U32 env___IM_NSWorkspace_openFile_C(void *_instance, U32 _self, U32 fullPathPointer) {
    id _t1 = (id)fullPathPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self openFile:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace openFile:fromImage:at:inView:]'
U32 env___IM_NSWorkspace_openFile_CfromImage_Cat_CinView_C(void *_instance, U32 _self, U32 fullPathPointer, U32 anImagePointer, U32 pointIndirect, U32 aViewPointer) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)fullPathPointer;
    id _t2 = (id)anImagePointer;
    NSPoint _t3 = *(NSPoint*)(_mem->data + pointIndirect);
    id _t4 = (id)aViewPointer;
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    BOOL _result = (BOOL)[(NSWorkspace*)_self openFile:_t1 fromImage:_t2 at:_t3 inView:_t4];
    return (U32)_result;
}

// method '-[NSWorkspace openFile:withApplication:]'
U32 env___IM_NSWorkspace_openFile_CwithApplication_C(void *_instance, U32 _self, U32 fullPathPointer, U32 appNamePointer) {
    id _t1 = (id)fullPathPointer;
    id _t2 = (id)appNamePointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self openFile:_t1 withApplication:_t2];
    return (U32)_result;
}

// method '-[NSWorkspace openFile:withApplication:andDeactivate:]'
U32 env___IM_NSWorkspace_openFile_CwithApplication_CandDeactivate_C(void *_instance, U32 _self, U32 fullPathPointer, U32 appNamePointer, U32 flag) {
    id _t1 = (id)fullPathPointer;
    id _t2 = (id)appNamePointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self openFile:_t1 withApplication:_t2 andDeactivate:flag];
    return (U32)_result;
}

// method '-[NSWorkspace openTempFile:]'
U32 env___IM_NSWorkspace_openTempFile_C(void *_instance, U32 _self, U32 fullPathPointer) {
    id _t1 = (id)fullPathPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self openTempFile:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace openURL:]'
U32 env___IM_NSWorkspace_openURL_C(void *_instance, U32 _self, U32 urlPointer) {
    id _t1 = (id)urlPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self openURL:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:]'
U32 env___IM_NSWorkspace_openURLs_CwithAppBundleIdentifier_Coptions_CadditionalEventParamDescriptor_ClaunchIdentifiers_C(void *_instance, U32 _self, U32 urlsPointer, U32 bundleIdentifierPointer, U32 options, U32 descriptorPointer, U32 identifiersPointer) {
    id _t1 = (id)urlsPointer;
    id _t2 = (id)bundleIdentifierPointer;
    id _t3 = (id)descriptorPointer;
    id* _t4 = (id*)identifiersPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self openURLs:_t1 withAppBundleIdentifier:_t2 options:options additionalEventParamDescriptor:_t3 launchIdentifiers:_t4];
    return (U32)_result;
}

// method '-[NSWorkspace performFileOperation:source:destination:files:tag:]'
U32 env___IM_NSWorkspace_performFileOperation_Csource_Cdestination_Cfiles_Ctag_C(void *_instance, U32 _self, U32 operationPointer, U32 sourcePointer, U32 destinationPointer, U32 filesPointer, U32 tagPointer) {
    id _t1 = (id)operationPointer;
    id _t2 = (id)sourcePointer;
    id _t3 = (id)destinationPointer;
    id _t4 = (id)filesPointer;
    int* _t5 = (int*)tagPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self performFileOperation:_t1 source:_t2 destination:_t3 files:_t4 tag:_t5];
    return (U32)_result;
}

// method '-[NSWorkspace selectFile:inFileViewerRootedAtPath:]'
U32 env___IM_NSWorkspace_selectFile_CinFileViewerRootedAtPath_C(void *_instance, U32 _self, U32 fullPathPointer, U32 rootFullpathPointer) {
    id _t1 = (id)fullPathPointer;
    id _t2 = (id)rootFullpathPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self selectFile:_t1 inFileViewerRootedAtPath:_t2];
    return (U32)_result;
}

// method '-[NSWorkspace setIcon:forFile:options:]'
U32 env___IM_NSWorkspace_setIcon_CforFile_Coptions_C(void *_instance, U32 _self, U32 imagePointer, U32 fullPathPointer, U32 options) {
    id _t1 = (id)imagePointer;
    id _t2 = (id)fullPathPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self setIcon:_t1 forFile:_t2 options:options];
    return (U32)_result;
}

// method '+[NSWorkspace sharedWorkspace]'
U32 env___CM_NSWorkspace_sharedWorkspace(void *_instance, U32 _class) {
    id _result = (id)[(Class)_class sharedWorkspace];
    return (U32)_result;
}

// method '-[NSWorkspace slideImage:from:to:]'
void env___IM_NSWorkspace_slideImage_Cfrom_Cto_C(void *_instance, U32 _self, U32 imagePointer, U32 fromPointIndirect, U32 toPointIndirect) {
    wasmMemory* _mem = w2c2BridgeMemory(_instance);
    id _t1 = (id)imagePointer;
    NSPoint _t2 = *(NSPoint*)(_mem->data + fromPointIndirect);
    NSPoint _t3 = *(NSPoint*)(_mem->data + toPointIndirect);
    #if WASM_ENDIAN == WASM_BIG_ENDIAN
    swap_f(&_t2.x);
    swap_f(&_t2.y);
    swap_f(&_t3.x);
    swap_f(&_t3.y);
    #endif
    [(NSWorkspace*)_self slideImage:_t1 from:_t2 to:_t3];
}

// method '-[NSWorkspace unmountAndEjectDeviceAtPath:]'
U32 env___IM_NSWorkspace_unmountAndEjectDeviceAtPath_C(void *_instance, U32 _self, U32 pathPointer) {
    id _t1 = (id)pathPointer;
    BOOL _result = (BOOL)[(NSWorkspace*)_self unmountAndEjectDeviceAtPath:_t1];
    return (U32)_result;
}

// method '-[NSWorkspace userDefaultsChanged]'
U32 env___IM_NSWorkspace_userDefaultsChanged(void *_instance, U32 _self) {
    BOOL _result = (BOOL)[(NSWorkspace*)_self userDefaultsChanged];
    return (U32)_result;
}


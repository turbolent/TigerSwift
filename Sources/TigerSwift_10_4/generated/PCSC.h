// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// struct '_MSCKeyACL'
struct _MSCKeyACL {
    unsigned short readPermission;
    unsigned short writePermission;
    unsigned short usePermission;
};

typedef struct _MSCKeyACL MSCKeyACL;

// struct '_MSCKeyPolicy'
struct _MSCKeyPolicy {
    unsigned short cipherMode;
    unsigned short cipherDirection;
};

typedef struct _MSCKeyPolicy MSCKeyPolicy;

// struct '_MSCLPGenKeyParams'
struct _MSCLPGenKeyParams {
    unsigned char algoType;
    unsigned short keySize;
    struct _MSCKeyACL privateKeyACL;
    struct _MSCKeyACL publicKeyACL;
    struct _MSCKeyPolicy privateKeyPolicy;
    struct _MSCKeyPolicy publicKeyPolicy;
    unsigned char keyGenOptions;
    char *pOptParams;
    unsigned int optParamsSize;
};

typedef struct _MSCLPGenKeyParams MSCLPGenKeyParams;

// struct '_MSCObjectACL'
struct _MSCObjectACL {
    unsigned short readPermission;
    unsigned short writePermission;
    unsigned short deletePermission;
};

typedef struct _MSCObjectACL MSCObjectACL;

// struct '_MSCStatusInfo'
struct _MSCStatusInfo {
    unsigned short appVersion;
    unsigned short swVersion;
    unsigned int freeMemory;
    unsigned int totalMemory;
    unsigned char usedPINs;
    unsigned char usedKeys;
    unsigned short loggedID;
};

typedef struct _MSCStatusInfo MSCStatusInfo;

// struct '_MSCKeyInfo'
struct _MSCKeyInfo {
    unsigned char keyNum;
    unsigned char keyType;
    unsigned char keyPartner;
    unsigned char keyMapping;
    unsigned short keySize;
    struct _MSCKeyPolicy keyPolicy;
    struct _MSCKeyACL keyACL;
};

typedef struct _MSCKeyInfo MSCKeyInfo;

// struct '_MSCLPKeyInfo'
struct _MSCLPKeyInfo {
    unsigned char keyNum;
    unsigned char keyType;
    unsigned char keyPartner;
    unsigned char keyMapping;
    unsigned short keySize;
    struct _MSCKeyPolicy keyPolicy;
    struct _MSCKeyACL keyACL;
};

typedef struct _MSCLPKeyInfo MSCLPKeyInfo;

// struct '_MSCCertACL'
struct _MSCCertACL {
    unsigned short readPermission;
    unsigned short writePermission;
    unsigned short deletePermission;
};

typedef struct _MSCCertACL MSCCertACL;

// struct '_MSCCryptInit'
struct _MSCCryptInit {
    unsigned char keyNum;
    unsigned char cipherMode;
    unsigned char cipherDirection;
    char *optParams;
    unsigned short optParamsSize;
};

typedef struct _MSCCryptInit MSCCryptInit;

// struct '_MSCLPStatusInfo'
struct _MSCLPStatusInfo {
    unsigned short appVersion;
    unsigned short swVersion;
    unsigned int freeMemory;
    unsigned int totalMemory;
    unsigned char usedPINs;
    unsigned char usedKeys;
    unsigned short loggedID;
};

typedef struct _MSCLPStatusInfo MSCLPStatusInfo;

// struct '_CFDyLibPointers'
struct _CFDyLibPointers {
    void *pvfWriteFramework;
    void *pvfInitializePlugin;
    void *pvfIdentifyToken;
    void *pvfFinalizePlugin;
    void *pvfGetStatus;
    void *pvfGetCapabilities;
    void *pvfExtendedFeature;
    void *pvfGenerateKeys;
    void *pvfImportKey;
    void *pvfExportKey;
    void *pvfComputeCrypt;
    void *pvfExtAuthenticate;
    void *pvfListKeys;
    void *pvfCreatePIN;
    void *pvfVerifyPIN;
    void *pvfChangePIN;
    void *pvfUnblockPIN;
    void *pvfListPINs;
    void *pvfCreateObject;
    void *pvfDeleteObject;
    void *pvfWriteObject;
    void *pvfReadObject;
    void *pvfListObjects;
    void *pvfLogoutAll;
    void *pvfGetChallenge;
};

typedef struct _CFDyLibPointers CFDyLibPointers;

// struct '_LPCFDyLibPointers'
struct _LPCFDyLibPointers {
    void *pvfWriteFramework;
    void *pvfInitializePlugin;
    void *pvfIdentifyToken;
    void *pvfFinalizePlugin;
    void *pvfGetStatus;
    void *pvfGetCapabilities;
    void *pvfExtendedFeature;
    void *pvfGenerateKeys;
    void *pvfImportKey;
    void *pvfExportKey;
    void *pvfComputeCrypt;
    void *pvfExtAuthenticate;
    void *pvfListKeys;
    void *pvfCreatePIN;
    void *pvfVerifyPIN;
    void *pvfChangePIN;
    void *pvfUnblockPIN;
    void *pvfListPINs;
    void *pvfCreateObject;
    void *pvfDeleteObject;
    void *pvfWriteObject;
    void *pvfReadObject;
    void *pvfListObjects;
    void *pvfLogoutAll;
    void *pvfGetChallenge;
};

typedef struct _LPCFDyLibPointers LPCFDyLibPointers;

// struct '_MSCLPKeyPolicy'
struct _MSCLPKeyPolicy {
    unsigned short cipherMode;
    unsigned short cipherDirection;
};

typedef struct _MSCLPKeyPolicy MSCLPKeyPolicy;

// struct '_SCARD_IO_REQUEST'
struct _SCARD_IO_REQUEST {
    unsigned int dwProtocol;
    unsigned int cbPciLength;
};

typedef struct _SCARD_IO_REQUEST LPSCARD_IO_REQUEST;

// struct '_MSCLPObjectACL'
struct _MSCLPObjectACL {
    unsigned short readPermission;
    unsigned short writePermission;
    unsigned short deletePermission;
};

typedef struct _MSCLPObjectACL MSCLPObjectACL;

// struct '_MSCLPKeyACL'
struct _MSCLPKeyACL {
    unsigned short readPermission;
    unsigned short writePermission;
    unsigned short usePermission;
};

typedef struct _MSCLPKeyACL MSCLPKeyACL;

// struct '_MSCLPCryptInit'
struct _MSCLPCryptInit {
    unsigned char keyNum;
    unsigned char cipherMode;
    unsigned char cipherDirection;
    char *optParams;
    unsigned short optParamsSize;
};

typedef struct _MSCLPCryptInit MSCLPCryptInit;

// struct '_MSCLPCertACL'
struct _MSCLPCertACL {
    unsigned short readPermission;
    unsigned short writePermission;
    unsigned short deletePermission;
};

typedef struct _MSCLPCertACL MSCLPCertACL;

// struct '_MSCGenKeyParams'
struct _MSCGenKeyParams {
    unsigned char algoType;
    unsigned short keySize;
    struct _MSCKeyACL privateKeyACL;
    struct _MSCKeyACL publicKeyACL;
    struct _MSCKeyPolicy privateKeyPolicy;
    struct _MSCKeyPolicy publicKeyPolicy;
    unsigned char keyGenOptions;
    char *pOptParams;
    unsigned int optParamsSize;
};

typedef struct _MSCGenKeyParams MSCGenKeyParams;

// getter for constant 'g_rgSCardRawPci'
struct _SCARD_IO_REQUEST _get_g_rgSCardRawPci(void);

// setter for constant 'g_rgSCardRawPci'
void _set_g_rgSCardRawPci(struct _SCARD_IO_REQUEST value);

// getter for constant 'g_rgSCardT0Pci'
struct _SCARD_IO_REQUEST _get_g_rgSCardT0Pci(void);

// setter for constant 'g_rgSCardT0Pci'
void _set_g_rgSCardT0Pci(struct _SCARD_IO_REQUEST value);

// getter for constant 'g_rgSCardT1Pci'
struct _SCARD_IO_REQUEST _get_g_rgSCardT1Pci(void);

// setter for constant 'g_rgSCardT1Pci'
void _set_g_rgSCardT1Pci(struct _SCARD_IO_REQUEST value);

enum { BLOCK_STATUS_BLOCKING = 250 };

enum { BLOCK_STATUS_RESUME = 255 };

enum { INFINITE = 4294967295 };

enum { MAX_ATR_SIZE = 33 };

enum { MAX_BUFFER_SIZE = 264 };

enum { MAX_LIBNAME = 100 };

enum { MAX_READERNAME = 50 };

enum { MSC_AUTH_FAILED = 39938 };

enum { MSC_AUT_ALL = 0 };

enum { MSC_AUT_KEY_0 = 256 };

enum { MSC_AUT_KEY_1 = 512 };

enum { MSC_AUT_KEY_2 = 1024 };

enum { MSC_AUT_KEY_3 = 2048 };

enum { MSC_AUT_KEY_4 = 4096 };

enum { MSC_AUT_KEY_5 = 8192 };

enum { MSC_AUT_NONE = 65535 };

enum { MSC_AUT_PIN_0 = 1 };

enum { MSC_AUT_PIN_1 = 2 };

enum { MSC_AUT_PIN_2 = 4 };

enum { MSC_AUT_PIN_3 = 8 };

enum { MSC_AUT_PIN_4 = 16 };

enum { MSC_AUT_USR_0 = 16384 };

enum { MSC_AUT_USR_1 = 32768 };

enum { MSC_BLOB_ENC_CRYPT = 1 };

enum { MSC_BLOB_ENC_PLAIN = 0 };

enum { MSC_BLOCKSTATUS_BLOCKING = 1 };

enum { MSC_BLOCKSTATUS_CANCELLING = 2 };

enum { MSC_BLOCKSTATUS_RESUME = 0 };

enum { MSC_CANCELLED = 40016 };

enum { MSC_CAPABLE_3DES_3KEY = 8192 };

enum { MSC_CAPABLE_3DES_CBC = 16384 };

enum { MSC_CAPABLE_3DES_EBC = 32768 };

enum { MSC_CAPABLE_3DES_ECB = 65536 };

enum { MSC_CAPABLE_3DES_KEYGEN = 4096 };

enum { MSC_CAPABLE_AES_CBC = 8192 };

enum { MSC_CAPABLE_AES_ECB = 32768 };

enum { MSC_CAPABLE_AES_KEYGEN = 4096 };

enum { MSC_CAPABLE_DES_CBC = 8192 };

enum { MSC_CAPABLE_DES_EBC = 16384 };

enum { MSC_CAPABLE_DES_ECB = 32768 };

enum { MSC_CAPABLE_DES_KEYGEN = 4096 };

enum { MSC_CAPABLE_DSA_1024 = 4 };

enum { MSC_CAPABLE_DSA_2048 = 8 };

enum { MSC_CAPABLE_DSA_4096 = 16 };

enum { MSC_CAPABLE_DSA_512 = 1 };

enum { MSC_CAPABLE_DSA_768 = 2 };

enum { MSC_CAPABLE_DSA_KEYGEN = 4096 };

enum { MSC_CAPABLE_IDEA_CBC = 8192 };

enum { MSC_CAPABLE_IDEA_ECB = 32768 };

enum { MSC_CAPABLE_IDEA_KEYGEN = 4096 };

enum { MSC_CAPABLE_ID_STATE = 1 };

enum { MSC_CAPABLE_OBJ_ZERO = 65536 };

enum { MSC_CAPABLE_PIN_0_9 = 4 };

enum { MSC_CAPABLE_PIN_A_Z = 1 };

enum { MSC_CAPABLE_PIN_CALC = 16 };

enum { MSC_CAPABLE_PIN_HISTORY = 4096 };

enum { MSC_CAPABLE_PIN_LEAVE = 512 };

enum { MSC_CAPABLE_PIN_NONALPHA = 32 };

enum { MSC_CAPABLE_PIN_RESET = 256 };

enum { MSC_CAPABLE_PIN_SPACE = 8 };

enum { MSC_CAPABLE_PIN_a_z = 2 };

enum { MSC_CAPABLE_RANDOM_SEED = 1 };

enum { MSC_CAPABLE_RSA_1024 = 4 };

enum { MSC_CAPABLE_RSA_2048 = 8 };

enum { MSC_CAPABLE_RSA_4096 = 16 };

enum { MSC_CAPABLE_RSA_512 = 1 };

enum { MSC_CAPABLE_RSA_768 = 2 };

enum { MSC_CAPABLE_RSA_KEYGEN = 4096 };

enum { MSC_CAPABLE_RSA_NOPAD = 8192 };

enum { MSC_CAPABLE_RSA_PKCS1 = 16384 };

enum { MSC_CIPHER_FINAL = 3 };

enum { MSC_CIPHER_INIT = 1 };

enum { MSC_CIPHER_PROCESS = 2 };

enum { MSC_DIR_DECRYPT = 4 };

enum { MSC_DIR_ENCRYPT = 3 };

enum { MSC_DIR_SIGN = 1 };

enum { MSC_DIR_VERIFY = 2 };

enum { MSC_EJECT_TOKEN = 3 };

enum { MSC_GEN_ALG_3DES = 4 };

enum { MSC_GEN_ALG_3DES3 = 5 };

enum { MSC_GEN_ALG_DES = 3 };

enum { MSC_GEN_ALG_DSA = 2 };

enum { MSC_GEN_ALG_RSA = 0 };

enum { MSC_GEN_ALG_RSA_CRT = 1 };

enum { MSC_IDENTITY_BLOCKED = 39948 };

enum { MSC_INCONSISTENT_STATUS = 39940 };

enum { MSC_INCORRECT_ALG = 39945 };

enum { MSC_INCORRECT_P1 = 39952 };

enum { MSC_INCORRECT_P2 = 39953 };

enum { MSC_INIT_DEFAULT_KEY = 0 };

enum { MSC_INIT_IGNORE_KEY = 1 };

enum { MSC_INIT_USE_KEY = 2 };

enum { MSC_INSUFFICIENT_BUFFER = 40017 };

enum { MSC_INTERNAL_ERROR = 40191 };

enum { MSC_INVALID_HANDLE = 40025 };

enum { MSC_INVALID_PARAMETER = 39951 };

enum { MSC_KEYPOLICY_DIR_DECRYPT = 2048 };

enum { MSC_KEYPOLICY_DIR_ENCRYPT = 1024 };

enum { MSC_KEYPOLICY_DIR_SIGN = 256 };

enum { MSC_KEYPOLICY_DIR_VERIFY = 512 };

enum { MSC_KEYPOLICY_MODE_DES_CBC_NOPAD = 8 };

enum { MSC_KEYPOLICY_MODE_DES_ECB_NOPAD = 16 };

enum { MSC_KEYPOLICY_MODE_DSA_SHA = 4 };

enum { MSC_KEYPOLICY_MODE_RSA_NOPAD = 1 };

enum { MSC_KEYPOLICY_MODE_RSA_PAD_PKCS1 = 2 };

enum { MSC_KEY_3DES = 7 };

enum { MSC_KEY_3DES3 = 8 };

enum { MSC_KEY_DES = 6 };

enum { MSC_KEY_DSA_PRIVATE = 5 };

enum { MSC_KEY_DSA_PUBLIC = 4 };

enum { MSC_KEY_RSA_PRIVATE = 2 };

enum { MSC_KEY_RSA_PRIVATE_CRT = 3 };

enum { MSC_KEY_RSA_PUBLIC = 1 };

enum { MSC_LEAVE_TOKEN = 0 };

enum { MSC_LIST_ALL = 3 };

enum { MSC_LIST_KNOWN = 1 };

enum { MSC_LIST_SLOTS = 2 };

enum { MSC_MAXSIZEOF_APDU_DATALEN = 255 };

enum { MSC_MAXSIZE_AID = 64 };

enum { MSC_MAXSIZE_BUFFER = 264 };

enum { MSC_MAXSIZE_CERT_ISSUER = 512 };

enum { MSC_MAXSIZE_CERT_SERIAL = 512 };

enum { MSC_MAXSIZE_CERT_SUBJECT = 512 };

enum { MSC_MAXSIZE_LABEL = 32 };

enum { MSC_MAXSIZE_MAC = 128 };

enum { MSC_MAXSIZE_OBJID = 16 };

enum { MSC_MAXSIZE_SVCPROV = 200 };

enum { MSC_MAXSIZE_TOKENAME = 150 };

enum { MSC_MAXSIZE_TOKENARRAY = 255 };

enum { MSC_MAX_KEYS = 16 };

enum { MSC_MAX_PINS = 8 };

enum { MSC_MODE_DES_CBC_NOPAD = 32 };

enum { MSC_MODE_DES_ECB_NOPAD = 33 };

enum { MSC_MODE_DSA_SHA = 16 };

enum { MSC_MODE_RSA_NOPAD = 0 };

enum { MSC_MODE_RSA_PAD_PKCS1 = 1 };

enum { MSC_NO_MEMORY_LEFT = 39937 };

enum { MSC_NO_TIMEOUT = 4294967295 };

enum { MSC_OBJECT_EXISTS = 39944 };

enum { MSC_OBJECT_NOT_FOUND = 39943 };

enum { MSC_OK = 36864 };

enum { MSC_OPERATION_NOT_ALLOWED = 39939 };

enum { MSC_OPT_DEFAULT = 0 };

enum { MSC_OPT_DSA_GPQ = 2 };

enum { MSC_OPT_RSA_PUB_EXP = 1 };

enum { MSC_PERCENT_STEPSIZE = 1000 };

enum { MSC_RESET_TOKEN = 1 };

enum { MSC_SEQUENCE_END = 39954 };

enum { MSC_SEQUENCE_NEXT = 1 };

enum { MSC_SEQUENCE_RESET = 0 };

enum { MSC_SERVICE_UNRESPONSIVE = 40019 };

enum { MSC_SHARE_DIRECT = 3 };

enum { MSC_SHARE_EXCLUSIVE = 1 };

enum { MSC_SHARE_SHARED = 2 };

enum { MSC_SHARING_VIOLATION = 40032 };

enum { MSC_SIGNATURE_INVALID = 39947 };

enum { MSC_SINGLE_READ_PACKET = 255 };

enum { MSC_SIZEOF_KEYPACKET = 200 };

enum { MSC_STATE_CHANGED = 2 };

enum { MSC_STATE_EMPTY = 16 };

enum { MSC_STATE_EXCLUSIVE = 128 };

enum { MSC_STATE_INUSE = 256 };

enum { MSC_STATE_MUTE = 512 };

enum { MSC_STATE_PRESENT = 32 };

enum { MSC_STATE_UNAVAILABLE = 8 };

enum { MSC_STATE_UNAWARE = 16384 };

enum { MSC_STATE_UNKNOWN = 4 };

enum { MSC_SUCCESS = 36864 };

enum { MSC_SUPPORT_3DES = 32 };

enum { MSC_SUPPORT_AES = 128 };

enum { MSC_SUPPORT_BLOWFISH = 256 };

enum { MSC_SUPPORT_CHANGEPIN = 256 };

enum { MSC_SUPPORT_COMPUTECRYPT = 8 };

enum { MSC_SUPPORT_CREATEOBJECT = 2048 };

enum { MSC_SUPPORT_CREATEPIN = 64 };

enum { MSC_SUPPORT_DELETEOBJECT = 4096 };

enum { MSC_SUPPORT_DES = 16 };

enum { MSC_SUPPORT_DSA = 2 };

enum { MSC_SUPPORT_ECURVE = 4 };

enum { MSC_SUPPORT_ELGAMAL = 8 };

enum { MSC_SUPPORT_EXPORTKEY = 4 };

enum { MSC_SUPPORT_EXTAUTH = 16 };

enum { MSC_SUPPORT_GENKEYS = 1 };

enum { MSC_SUPPORT_GETCHALLENGE = 131072 };

enum { MSC_SUPPORT_IDEA = 64 };

enum { MSC_SUPPORT_IMPORTKEY = 2 };

enum { MSC_SUPPORT_LISTKEYS = 32 };

enum { MSC_SUPPORT_LISTOBJECTS = 32768 };

enum { MSC_SUPPORT_LISTPINS = 1024 };

enum { MSC_SUPPORT_LOGOUTALL = 65536 };

enum { MSC_SUPPORT_MD5 = 2048 };

enum { MSC_SUPPORT_READOBJECT = 16384 };

enum { MSC_SUPPORT_RSA = 1 };

enum { MSC_SUPPORT_SHA1 = 1024 };

enum { MSC_SUPPORT_TWOFISH = 512 };

enum { MSC_SUPPORT_UNBLOCKPIN = 512 };

enum { MSC_SUPPORT_VERIFYPIN = 128 };

enum { MSC_SUPPORT_WRITEOBJECT = 8192 };

enum { MSC_TAG_CAPABLE_3DES = 202 };

enum { MSC_TAG_CAPABLE_AES = 204 };

enum { MSC_TAG_CAPABLE_BLOWFISH = 205 };

enum { MSC_TAG_CAPABLE_DES = 201 };

enum { MSC_TAG_CAPABLE_DSA = 104 };

enum { MSC_TAG_CAPABLE_ECURVE = 105 };

enum { MSC_TAG_CAPABLE_ELGAMAL = 106 };

enum { MSC_TAG_CAPABLE_IDEA = 203 };

enum { MSC_TAG_CAPABLE_ID_STATE = 501 };

enum { MSC_TAG_CAPABLE_KEY_AUTH = 180 };

enum { MSC_TAG_CAPABLE_MD5 = 207 };

enum { MSC_TAG_CAPABLE_OBJ_ATTR = 301 };

enum { MSC_TAG_CAPABLE_OBJ_AUTH = 303 };

enum { MSC_TAG_CAPABLE_OBJ_IDSIZE = 302 };

enum { MSC_TAG_CAPABLE_OBJ_MAXNUM = 304 };

enum { MSC_TAG_CAPABLE_PIN_ATTR = 401 };

enum { MSC_TAG_CAPABLE_PIN_AUTH = 407 };

enum { MSC_TAG_CAPABLE_PIN_CHARSET = 405 };

enum { MSC_TAG_CAPABLE_PIN_MAXNUM = 402 };

enum { MSC_TAG_CAPABLE_PIN_MAXSIZE = 404 };

enum { MSC_TAG_CAPABLE_PIN_MINSIZE = 403 };

enum { MSC_TAG_CAPABLE_PIN_POLICY = 406 };

enum { MSC_TAG_CAPABLE_RANDOM = 600 };

enum { MSC_TAG_CAPABLE_RANDOM_MAX = 601 };

enum { MSC_TAG_CAPABLE_RANDOM_MIN = 602 };

enum { MSC_TAG_CAPABLE_RSA = 103 };

enum { MSC_TAG_CAPABLE_SHA1 = 208 };

enum { MSC_TAG_CAPABLE_TWOFISH = 206 };

enum { MSC_TAG_SUPPORT_CRYPTOALG = 102 };

enum { MSC_TAG_SUPPORT_FUNCTIONS = 101 };

enum { MSC_TIMEOUT_OCCURRED = 40020 };

enum { MSC_TOKEN_INSERTED = 40023 };

enum { MSC_TOKEN_REMOVED = 40021 };

enum { MSC_TOKEN_RESET = 40022 };

enum { MSC_TOKEN_TYPE_KNOWN = 4 };

enum { MSC_TOKEN_TYPE_REMOVED = 1 };

enum { MSC_TOKEN_TYPE_RESET = 8 };

enum { MSC_TOKEN_TYPE_UNKNOWN = 2 };

enum { MSC_TOKEN_UNRESPONSIVE = 40024 };

enum { MSC_TRANSPORT_ERROR = 39950 };

enum { MSC_UNAUTHORIZED = 39942 };

enum { MSC_UNRECOGNIZED_TOKEN = 40018 };

enum { MSC_UNSPECIFIED_ERROR = 39949 };

enum { MSC_UNSUPPORTED_FEATURE = 39941 };

enum { MSC_ZF_DEFAULT = 0 };

enum { MSC_ZF_WRITE_ZERO = 1 };

enum { PCSCLITE_CLIENT_ATTEMPTS = 120 };

enum { PCSCLITE_INFINITE_TIMEOUT = 4320000 };

enum { PCSCLITE_MAX_APPLICATIONS = 16 };

enum { PCSCLITE_MAX_CHANNELS = 16 };

enum { PCSCLITE_MAX_COMSIZE = 64 };

enum { PCSCLITE_MAX_CONTEXTS = 16 };

enum { PCSCLITE_MAX_MESSAGE_SIZE = 2048 };

enum { PCSCLITE_MAX_THREADS = 16 };

enum { PCSCLITE_MCLIENT_ATTEMPTS = 20 };

enum { PCSCLITE_MSG_KEY_LEN = 16 };

enum { PCSCLITE_RW_ATTEMPTS = 100 };

enum { PCSCLITE_SERVER_ATTEMPTS = 5 };

enum { PCSCLITE_STATUS_POLL_RATE = 400000 };

enum { PCSCLITE_STATUS_WAIT = 200000 };

enum { PCSCLITE_SVC_IDENTITY = 16973824 };

enum { PCSCLITE_TRANSACTION_TIMEOUT = 40 };

enum { SCARD_ABSENT = 2 };

enum { SCARD_ATR_LENGTH = 33 };

enum { SCARD_EJECT_CARD = 3 };

enum { SCARD_E_CANCELLED = 2148532226 };

enum { SCARD_E_CANT_DISPOSE = 2148532238 };

enum { SCARD_E_CARD_UNSUPPORTED = 2148532252 };

enum { SCARD_E_DUPLICATE_READER = 2148532251 };

enum { SCARD_E_INSUFFICIENT_BUFFER = 2148532232 };

enum { SCARD_E_INVALID_ATR = 2148532245 };

enum { SCARD_E_INVALID_HANDLE = 2148532227 };

enum { SCARD_E_INVALID_PARAMETER = 2148532228 };

enum { SCARD_E_INVALID_TARGET = 2148532229 };

enum { SCARD_E_INVALID_VALUE = 2148532241 };

enum { SCARD_E_NOT_READY = 2148532240 };

enum { SCARD_E_NOT_TRANSACTED = 2148532246 };

enum { SCARD_E_NO_MEMORY = 2148532230 };

enum { SCARD_E_NO_SERVICE = 2148532253 };

enum { SCARD_E_NO_SMARTCARD = 2148532236 };

enum { SCARD_E_PCI_TOO_SMALL = 2148532249 };

enum { SCARD_E_PROTO_MISMATCH = 2148532239 };

enum { SCARD_E_READER_UNAVAILABLE = 2148532247 };

enum { SCARD_E_READER_UNSUPPORTED = 2148532250 };

enum { SCARD_E_SERVICE_STOPPED = 2148532254 };

enum { SCARD_E_SHARING_VIOLATION = 2148532235 };

enum { SCARD_E_SYSTEM_CANCELLED = 2148532242 };

enum { SCARD_E_TIMEOUT = 2148532234 };

enum { SCARD_E_UNKNOWN_CARD = 2148532237 };

enum { SCARD_E_UNKNOWN_READER = 2148532233 };

enum { SCARD_E_UNSUPPORTED_FEATURE = 2148532255 };

enum { SCARD_F_COMM_ERROR = 2148532243 };

enum { SCARD_F_INTERNAL_ERROR = 2148532225 };

enum { SCARD_F_UNKNOWN_ERROR = 2148532244 };

enum { SCARD_F_WAITED_TOO_LONG = 2148532231 };

enum { SCARD_INSERTED = 2 };

enum { SCARD_LEAVE_CARD = 0 };

enum { SCARD_NEGOTIABLE = 32 };

enum { SCARD_POWERED = 16 };

enum { SCARD_PRESENT = 4 };

enum { SCARD_PROTOCOL_ANY = 4096 };

enum { SCARD_PROTOCOL_RAW = 4 };

enum { SCARD_PROTOCOL_T0 = 1 };

enum { SCARD_PROTOCOL_T1 = 2 };

enum { SCARD_REMOVED = 4 };

enum { SCARD_RESET = 1 };

enum { SCARD_RESET_CARD = 1 };

enum { SCARD_SCOPE_GLOBAL = 3 };

enum { SCARD_SCOPE_SYSTEM = 2 };

enum { SCARD_SCOPE_TERMINAL = 1 };

enum { SCARD_SCOPE_USER = 0 };

enum { SCARD_SHARE_DIRECT = 3 };

enum { SCARD_SHARE_EXCLUSIVE = 1 };

enum { SCARD_SHARE_SHARED = 2 };

enum { SCARD_SPECIFIC = 64 };

enum { SCARD_STATE_ATRMATCH = 64 };

enum { SCARD_STATE_CHANGED = 2 };

enum { SCARD_STATE_EMPTY = 16 };

enum { SCARD_STATE_EXCLUSIVE = 128 };

enum { SCARD_STATE_IGNORE = 1 };

enum { SCARD_STATE_INUSE = 256 };

enum { SCARD_STATE_MUTE = 512 };

enum { SCARD_STATE_PRESENT = 32 };

enum { SCARD_STATE_UNAVAILABLE = 8 };

enum { SCARD_STATE_UNAWARE = 0 };

enum { SCARD_STATE_UNKNOWN = 4 };

enum { SCARD_SWALLOWED = 8 };

enum { SCARD_S_SUCCESS = 0 };

enum { SCARD_UNKNOWN = 1 };

enum { SCARD_UNPOWER_CARD = 2 };

enum { SCARD_W_INSERTED_CARD = 2148532330 };

enum { SCARD_W_REMOVED_CARD = 2148532329 };

enum { SCARD_W_RESET_CARD = 2148532328 };

enum { SCARD_W_UNPOWERED_CARD = 2148532327 };

enum { SCARD_W_UNRESPONSIVE_CARD = 2148532326 };

enum { SCARD_W_UNSUPPORTED_CARD = 2148532325 };

// function 'MSCCallbackCancelEvent'
unsigned int MSCCallbackCancelEvent(void);

// function 'MSCCancelEventWait'
unsigned int MSCCancelEventWait(void);

// function 'SCardBeginTransaction'
int SCardBeginTransaction(int hCard);

// function 'SCardCancel'
int SCardCancel(int hContext);

// function 'SCardCancelTransaction'
int SCardCancelTransaction(int hCard);

// function 'SCardConnect'
int SCardConnect(int hContext, const char* szReader, unsigned int dwShareMode, unsigned int dwPreferredProtocols, int *phCard, unsigned int *pdwActiveProtocol);

// function 'SCardControl'
int SCardControl(int hCard, const unsigned char* pbSendBuffer, unsigned int cbSendLength, unsigned char* pbRecvBuffer, unsigned int *pcbRecvLength);

// function 'SCardDisconnect'
int SCardDisconnect(int hCard, unsigned int dwDisposition);

// function 'SCardEndTransaction'
int SCardEndTransaction(int hCard, unsigned int dwDisposition);

// function 'SCardEstablishContext'
int SCardEstablishContext(unsigned int dwScope, const void* pvReserved1, const void* pvReserved2, int *phContext);

// function 'SCardListReaderGroups'
int SCardListReaderGroups(int hContext, char* mszGroups, unsigned int *pcchGroups);

// function 'SCardListReaders'
int SCardListReaders(int hContext, const char* mszGroups, char* mszReaders, unsigned int *pcchReaders);

// function 'SCardReconnect'
int SCardReconnect(int hCard, unsigned int dwShareMode, unsigned int dwPreferredProtocols, unsigned int dwInitialization, unsigned int *pdwActiveProtocol);

// function 'SCardReleaseContext'
int SCardReleaseContext(int hContext);

// function 'SCardSetTimeout'
int SCardSetTimeout(int hContext, unsigned int dwTimeout);

// function 'SCardStatus'
int SCardStatus(int hCard, char* mszReaderNames, unsigned int *pcchReaderLen, unsigned int *pdwState, unsigned int *pdwProtocol, unsigned char* pbAtr, unsigned int *pcbAtrLen);

// function 'SCardTransmit'
int SCardTransmit(int hCard, struct _SCARD_IO_REQUEST *pioSendPci, const unsigned char* pbSendBuffer, unsigned int cbSendLength, struct _SCARD_IO_REQUEST *pioRecvPci, unsigned char* pbRecvBuffer, unsigned int *pcbRecvLength);

// function 'msc_error'
char* msc_error(unsigned long errorCode);

// function 'pcsc_stringify_error'
char* pcsc_stringify_error(int err);


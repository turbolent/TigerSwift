// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// class 'NSAttributeDescription'
typedef struct objc_object NSAttributeDescription;

// class 'NSEntityDescription'
typedef struct objc_object NSEntityDescription;

// class 'NSFetchRequest'
typedef struct objc_object NSFetchRequest;

// class 'NSFetchedPropertyDescription'
typedef struct objc_object NSFetchedPropertyDescription;

// class 'NSManagedObject'
typedef struct objc_object NSManagedObject;

// class 'NSManagedObjectContext'
typedef struct objc_object NSManagedObjectContext;

// class 'NSManagedObjectID'
typedef struct objc_object NSManagedObjectID;

// class 'NSManagedObjectModel'
typedef struct objc_object NSManagedObjectModel;

// class 'NSPersistentStoreCoordinator'
typedef struct objc_object NSPersistentStoreCoordinator;

// class 'NSPropertyDescription'
typedef struct objc_object NSPropertyDescription;

// class 'NSRelationshipDescription'
typedef struct objc_object NSRelationshipDescription;

// getter for constant 'NSAddedPersistentStoresKey'
id _get_NSAddedPersistentStoresKey(void);

// getter for constant 'NSAffectedObjectsErrorKey'
id _get_NSAffectedObjectsErrorKey(void);

// getter for constant 'NSAffectedStoresErrorKey'
id _get_NSAffectedStoresErrorKey(void);

// getter for constant 'NSBinaryStoreType'
id _get_NSBinaryStoreType(void);

// getter for constant 'NSCoreDataVersionNumber'
double _get_NSCoreDataVersionNumber(void);

// setter for constant 'NSCoreDataVersionNumber'
void _set_NSCoreDataVersionNumber(double value);

// getter for constant 'NSDeletedObjectsKey'
id _get_NSDeletedObjectsKey(void);

// getter for constant 'NSDetailedErrorsKey'
id _get_NSDetailedErrorsKey(void);

// getter for constant 'NSErrorMergePolicy'
id _get_NSErrorMergePolicy(void);

// setter for constant 'NSErrorMergePolicy'
void _set_NSErrorMergePolicy(id value);

// getter for constant 'NSInMemoryStoreType'
id _get_NSInMemoryStoreType(void);

// getter for constant 'NSInsertedObjectsKey'
id _get_NSInsertedObjectsKey(void);

// getter for constant 'NSManagedObjectContextDidSaveNotification'
id _get_NSManagedObjectContextDidSaveNotification(void);

// getter for constant 'NSManagedObjectContextObjectsDidChangeNotification'
id _get_NSManagedObjectContextObjectsDidChangeNotification(void);

// getter for constant 'NSMergeByPropertyObjectTrumpMergePolicy'
id _get_NSMergeByPropertyObjectTrumpMergePolicy(void);

// setter for constant 'NSMergeByPropertyObjectTrumpMergePolicy'
void _set_NSMergeByPropertyObjectTrumpMergePolicy(id value);

// getter for constant 'NSMergeByPropertyStoreTrumpMergePolicy'
id _get_NSMergeByPropertyStoreTrumpMergePolicy(void);

// setter for constant 'NSMergeByPropertyStoreTrumpMergePolicy'
void _set_NSMergeByPropertyStoreTrumpMergePolicy(id value);

// getter for constant 'NSOverwriteMergePolicy'
id _get_NSOverwriteMergePolicy(void);

// setter for constant 'NSOverwriteMergePolicy'
void _set_NSOverwriteMergePolicy(id value);

// getter for constant 'NSPersistentStoreCoordinatorStoresDidChangeNotification'
id _get_NSPersistentStoreCoordinatorStoresDidChangeNotification(void);

// getter for constant 'NSReadOnlyPersistentStoreOption'
id _get_NSReadOnlyPersistentStoreOption(void);

// getter for constant 'NSRemovedPersistentStoresKey'
id _get_NSRemovedPersistentStoresKey(void);

// getter for constant 'NSRollbackMergePolicy'
id _get_NSRollbackMergePolicy(void);

// setter for constant 'NSRollbackMergePolicy'
void _set_NSRollbackMergePolicy(id value);

// getter for constant 'NSSQLiteStoreType'
id _get_NSSQLiteStoreType(void);

// getter for constant 'NSStoreTypeKey'
id _get_NSStoreTypeKey(void);

// getter for constant 'NSStoreUUIDKey'
id _get_NSStoreUUIDKey(void);

// getter for constant 'NSUUIDChangedPersistentStoresKey'
id _get_NSUUIDChangedPersistentStoresKey(void);

// getter for constant 'NSUpdatedObjectsKey'
id _get_NSUpdatedObjectsKey(void);

// getter for constant 'NSValidateXMLStoreOption'
id _get_NSValidateXMLStoreOption(void);

// getter for constant 'NSValidationKeyErrorKey'
id _get_NSValidationKeyErrorKey(void);

// getter for constant 'NSValidationObjectErrorKey'
id _get_NSValidationObjectErrorKey(void);

// getter for constant 'NSValidationPredicateErrorKey'
id _get_NSValidationPredicateErrorKey(void);

// getter for constant 'NSValidationValueErrorKey'
id _get_NSValidationValueErrorKey(void);

// getter for constant 'NSXMLStoreType'
id _get_NSXMLStoreType(void);

enum { NSBinaryDataAttributeType = 1000 };

enum { NSBooleanAttributeType = 800 };

enum { NSCascadeDeleteRule = 2 };

enum { NSDateAttributeType = 900 };

enum { NSDecimalAttributeType = 400 };

enum { NSDenyDeleteRule = 3 };

enum { NSDoubleAttributeType = 500 };

enum { NSFloatAttributeType = 600 };

enum { NSInteger16AttributeType = 100 };

enum { NSInteger32AttributeType = 200 };

enum { NSInteger64AttributeType = 300 };

enum { NSManagedObjectContextLockingError = 132000 };

enum { NSManagedObjectExternalRelationshipError = 133010 };

enum { NSManagedObjectMergeError = 133020 };

enum { NSManagedObjectReferentialIntegrityError = 133000 };

enum { NSManagedObjectValidationError = 1550 };

enum { NSNoActionDeleteRule = 0 };

enum { NSNullifyDeleteRule = 1 };

enum { NSPersistentStoreCoordinatorLockingError = 132010 };

enum { NSPersistentStoreIncompatibleSchemaError = 134020 };

enum { NSPersistentStoreIncompleteSaveError = 134040 };

enum { NSPersistentStoreInvalidTypeError = 134000 };

enum { NSPersistentStoreSaveError = 134030 };

enum { NSPersistentStoreTypeMismatchError = 134010 };

enum { NSStringAttributeType = 700 };

enum { NSUndefinedAttributeType = 0 };

enum { NSValidationDateTooLateError = 1630 };

enum { NSValidationDateTooSoonError = 1640 };

enum { NSValidationInvalidDateError = 1650 };

enum { NSValidationMissingMandatoryPropertyError = 1570 };

enum { NSValidationMultipleErrorsError = 1560 };

enum { NSValidationNumberTooLargeError = 1610 };

enum { NSValidationNumberTooSmallError = 1620 };

enum { NSValidationRelationshipDeniedDeleteError = 1600 };

enum { NSValidationRelationshipExceedsMaximumCountError = 1590 };

enum { NSValidationRelationshipLacksMinimumCountError = 1580 };

enum { NSValidationStringPatternMatchingError = 1680 };

enum { NSValidationStringTooLongError = 1660 };

enum { NSValidationStringTooShortError = 1670 };

// method '-[NSAttributeDescription attributeType]'
int _IM_NSAttributeDescription_attributeType(NSAttributeDescription *_self);

// method '-[NSAttributeDescription attributeValueClassName]'
id _IM_NSAttributeDescription_attributeValueClassName(NSAttributeDescription *_self);

// method '-[NSAttributeDescription defaultValue]'
id _IM_NSAttributeDescription_defaultValue(NSAttributeDescription *_self);

// method '-[NSAttributeDescription setAttributeType:]'
void _IM_NSAttributeDescription_setAttributeType_C(NSAttributeDescription *_self, int type);

// method '-[NSAttributeDescription setDefaultValue:]'
void _IM_NSAttributeDescription_setDefaultValue_C(NSAttributeDescription *_self, id value);

// method '-[NSEntityDescription attributesByName]'
id _IM_NSEntityDescription_attributesByName(NSEntityDescription *_self);

// method '+[NSEntityDescription entityForName:inManagedObjectContext:]'
NSEntityDescription* _CM_NSEntityDescription_entityForName_CinManagedObjectContext_C(Class _class, id entityName, NSManagedObjectContext* context);

// method '+[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]'
id _CM_NSEntityDescription_insertNewObjectForEntityForName_CinManagedObjectContext_C(Class _class, id entityName, NSManagedObjectContext* context);

// method '-[NSEntityDescription isAbstract]'
BOOL _IM_NSEntityDescription_isAbstract(NSEntityDescription *_self);

// method '-[NSEntityDescription managedObjectClassName]'
id _IM_NSEntityDescription_managedObjectClassName(NSEntityDescription *_self);

// method '-[NSEntityDescription managedObjectModel]'
NSManagedObjectModel* _IM_NSEntityDescription_managedObjectModel(NSEntityDescription *_self);

// method '-[NSEntityDescription name]'
id _IM_NSEntityDescription_name(NSEntityDescription *_self);

// method '-[NSEntityDescription properties]'
id _IM_NSEntityDescription_properties(NSEntityDescription *_self);

// method '-[NSEntityDescription propertiesByName]'
id _IM_NSEntityDescription_propertiesByName(NSEntityDescription *_self);

// method '-[NSEntityDescription relationshipsByName]'
id _IM_NSEntityDescription_relationshipsByName(NSEntityDescription *_self);

// method '-[NSEntityDescription relationshipsWithDestinationEntity:]'
id _IM_NSEntityDescription_relationshipsWithDestinationEntity_C(NSEntityDescription *_self, NSEntityDescription* entity);

// method '-[NSEntityDescription setAbstract:]'
void _IM_NSEntityDescription_setAbstract_C(NSEntityDescription *_self, BOOL flag);

// method '-[NSEntityDescription setManagedObjectClassName:]'
void _IM_NSEntityDescription_setManagedObjectClassName_C(NSEntityDescription *_self, id name);

// method '-[NSEntityDescription setName:]'
void _IM_NSEntityDescription_setName_C(NSEntityDescription *_self, id name);

// method '-[NSEntityDescription setProperties:]'
void _IM_NSEntityDescription_setProperties_C(NSEntityDescription *_self, id properties);

// method '-[NSEntityDescription setSubentities:]'
void _IM_NSEntityDescription_setSubentities_C(NSEntityDescription *_self, id array);

// method '-[NSEntityDescription setUserInfo:]'
void _IM_NSEntityDescription_setUserInfo_C(NSEntityDescription *_self, id dictionary);

// method '-[NSEntityDescription subentities]'
id _IM_NSEntityDescription_subentities(NSEntityDescription *_self);

// method '-[NSEntityDescription subentitiesByName]'
id _IM_NSEntityDescription_subentitiesByName(NSEntityDescription *_self);

// method '-[NSEntityDescription superentity]'
NSEntityDescription* _IM_NSEntityDescription_superentity(NSEntityDescription *_self);

// method '-[NSEntityDescription userInfo]'
id _IM_NSEntityDescription_userInfo(NSEntityDescription *_self);

// method '-[NSFetchRequest affectedStores]'
id _IM_NSFetchRequest_affectedStores(NSFetchRequest *_self);

// method '-[NSFetchRequest entity]'
NSEntityDescription* _IM_NSFetchRequest_entity(NSFetchRequest *_self);

// method '-[NSFetchRequest fetchLimit]'
unsigned int _IM_NSFetchRequest_fetchLimit(NSFetchRequest *_self);

// method '-[NSFetchRequest predicate]'
id _IM_NSFetchRequest_predicate(NSFetchRequest *_self);

// method '-[NSFetchRequest setAffectedStores:]'
void _IM_NSFetchRequest_setAffectedStores_C(NSFetchRequest *_self, id stores);

// method '-[NSFetchRequest setEntity:]'
void _IM_NSFetchRequest_setEntity_C(NSFetchRequest *_self, NSEntityDescription* entity);

// method '-[NSFetchRequest setFetchLimit:]'
void _IM_NSFetchRequest_setFetchLimit_C(NSFetchRequest *_self, unsigned int limit);

// method '-[NSFetchRequest setPredicate:]'
void _IM_NSFetchRequest_setPredicate_C(NSFetchRequest *_self, id predicate);

// method '-[NSFetchRequest setSortDescriptors:]'
void _IM_NSFetchRequest_setSortDescriptors_C(NSFetchRequest *_self, id sortDescriptors);

// method '-[NSFetchRequest sortDescriptors]'
id _IM_NSFetchRequest_sortDescriptors(NSFetchRequest *_self);

// method '-[NSFetchedPropertyDescription fetchRequest]'
NSFetchRequest* _IM_NSFetchedPropertyDescription_fetchRequest(NSFetchedPropertyDescription *_self);

// method '-[NSFetchedPropertyDescription setFetchRequest:]'
void _IM_NSFetchedPropertyDescription_setFetchRequest_C(NSFetchedPropertyDescription *_self, NSFetchRequest* fetchRequest);

// method '-[NSManagedObject awakeFromFetch]'
void _IM_NSManagedObject_awakeFromFetch(NSManagedObject *_self);

// method '-[NSManagedObject awakeFromInsert]'
void _IM_NSManagedObject_awakeFromInsert(NSManagedObject *_self);

// method '-[NSManagedObject changedValues]'
id _IM_NSManagedObject_changedValues(NSManagedObject *_self);

// method '-[NSManagedObject committedValuesForKeys:]'
id _IM_NSManagedObject_committedValuesForKeys_C(NSManagedObject *_self, id keys);

// method '-[NSManagedObject didAccessValueForKey:]'
void _IM_NSManagedObject_didAccessValueForKey_C(NSManagedObject *_self, id key);

// method '-[NSManagedObject didChangeValueForKey:]'
void _IM_NSManagedObject_didChangeValueForKey_C(NSManagedObject *_self, id key);

// method '-[NSManagedObject didChangeValueForKey:withSetMutation:usingObjects:]'
void _IM_NSManagedObject_didChangeValueForKey_CwithSetMutation_CusingObjects_C(NSManagedObject *_self, id inKey, int inMutationKind, id inObjects);

// method '-[NSManagedObject didSave]'
void _IM_NSManagedObject_didSave(NSManagedObject *_self);

// method '-[NSManagedObject didTurnIntoFault]'
void _IM_NSManagedObject_didTurnIntoFault(NSManagedObject *_self);

// method '-[NSManagedObject entity]'
NSEntityDescription* _IM_NSManagedObject_entity(NSManagedObject *_self);

// method '-[NSManagedObject initWithEntity:insertIntoManagedObjectContext:]'
NSManagedObject *_IM_NSManagedObject_initWithEntity_CinsertIntoManagedObjectContext_C(NSManagedObject *_self, NSEntityDescription* entity, NSManagedObjectContext* context);

// method '-[NSManagedObject isDeleted]'
BOOL _IM_NSManagedObject_isDeleted(NSManagedObject *_self);

// method '-[NSManagedObject isFault]'
BOOL _IM_NSManagedObject_isFault(NSManagedObject *_self);

// method '-[NSManagedObject isInserted]'
BOOL _IM_NSManagedObject_isInserted(NSManagedObject *_self);

// method '-[NSManagedObject isUpdated]'
BOOL _IM_NSManagedObject_isUpdated(NSManagedObject *_self);

// method '-[NSManagedObject managedObjectContext]'
NSManagedObjectContext* _IM_NSManagedObject_managedObjectContext(NSManagedObject *_self);

// method '-[NSManagedObject objectID]'
NSManagedObjectID* _IM_NSManagedObject_objectID(NSManagedObject *_self);

// method '-[NSManagedObject observationInfo]'
void *_IM_NSManagedObject_observationInfo(NSManagedObject *_self);

// method '-[NSManagedObject primitiveValueForKey:]'
id _IM_NSManagedObject_primitiveValueForKey_C(NSManagedObject *_self, id key);

// method '-[NSManagedObject setObservationInfo:]'
void _IM_NSManagedObject_setObservationInfo_C(NSManagedObject *_self, void *inObservationInfo);

// method '-[NSManagedObject setPrimitiveValue:forKey:]'
void _IM_NSManagedObject_setPrimitiveValue_CforKey_C(NSManagedObject *_self, id value, id key);

// method '-[NSManagedObject setValue:forKey:]'
void _IM_NSManagedObject_setValue_CforKey_C(NSManagedObject *_self, id value, id key);

// method '-[NSManagedObject validateForDelete:]'
BOOL _IM_NSManagedObject_validateForDelete_C(NSManagedObject *_self, id *error);

// method '-[NSManagedObject validateForInsert:]'
BOOL _IM_NSManagedObject_validateForInsert_C(NSManagedObject *_self, id *error);

// method '-[NSManagedObject validateForUpdate:]'
BOOL _IM_NSManagedObject_validateForUpdate_C(NSManagedObject *_self, id *error);

// method '-[NSManagedObject validateValue:forKey:error:]'
BOOL _IM_NSManagedObject_validateValue_CforKey_Cerror_C(NSManagedObject *_self, id *value, id key, id *error);

// method '-[NSManagedObject valueForKey:]'
id _IM_NSManagedObject_valueForKey_C(NSManagedObject *_self, id key);

// method '-[NSManagedObject willAccessValueForKey:]'
void _IM_NSManagedObject_willAccessValueForKey_C(NSManagedObject *_self, id key);

// method '-[NSManagedObject willChangeValueForKey:]'
void _IM_NSManagedObject_willChangeValueForKey_C(NSManagedObject *_self, id key);

// method '-[NSManagedObject willChangeValueForKey:withSetMutation:usingObjects:]'
void _IM_NSManagedObject_willChangeValueForKey_CwithSetMutation_CusingObjects_C(NSManagedObject *_self, id inKey, int inMutationKind, id inObjects);

// method '-[NSManagedObject willSave]'
void _IM_NSManagedObject_willSave(NSManagedObject *_self);

// method '-[NSManagedObjectContext assignObject:toPersistentStore:]'
void _IM_NSManagedObjectContext_assignObject_CtoPersistentStore_C(NSManagedObjectContext *_self, id object, id store);

// method '-[NSManagedObjectContext deleteObject:]'
void _IM_NSManagedObjectContext_deleteObject_C(NSManagedObjectContext *_self, NSManagedObject* object);

// method '-[NSManagedObjectContext deletedObjects]'
id _IM_NSManagedObjectContext_deletedObjects(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext detectConflictsForObject:]'
void _IM_NSManagedObjectContext_detectConflictsForObject_C(NSManagedObjectContext *_self, NSManagedObject* object);

// method '-[NSManagedObjectContext executeFetchRequest:error:]'
id _IM_NSManagedObjectContext_executeFetchRequest_Cerror_C(NSManagedObjectContext *_self, NSFetchRequest* request, id *error);

// method '-[NSManagedObjectContext hasChanges]'
BOOL _IM_NSManagedObjectContext_hasChanges(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext insertObject:]'
void _IM_NSManagedObjectContext_insertObject_C(NSManagedObjectContext *_self, NSManagedObject* object);

// method '-[NSManagedObjectContext insertedObjects]'
id _IM_NSManagedObjectContext_insertedObjects(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext lock]'
void _IM_NSManagedObjectContext_lock(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext mergePolicy]'
id _IM_NSManagedObjectContext_mergePolicy(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext objectRegisteredForID:]'
NSManagedObject* _IM_NSManagedObjectContext_objectRegisteredForID_C(NSManagedObjectContext *_self, NSManagedObjectID* objectID);

// method '-[NSManagedObjectContext objectWithID:]'
NSManagedObject* _IM_NSManagedObjectContext_objectWithID_C(NSManagedObjectContext *_self, NSManagedObjectID* objectID);

// method '-[NSManagedObjectContext observeValueForKeyPath:ofObject:change:context:]'
void _IM_NSManagedObjectContext_observeValueForKeyPath_CofObject_Cchange_Ccontext_C(NSManagedObjectContext *_self, id keyPath, id object, id change, void *context);

// method '-[NSManagedObjectContext persistentStoreCoordinator]'
NSPersistentStoreCoordinator* _IM_NSManagedObjectContext_persistentStoreCoordinator(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext processPendingChanges]'
void _IM_NSManagedObjectContext_processPendingChanges(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext propagatesDeletesAtEndOfEvent]'
BOOL _IM_NSManagedObjectContext_propagatesDeletesAtEndOfEvent(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext redo]'
void _IM_NSManagedObjectContext_redo(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext refreshObject:mergeChanges:]'
void _IM_NSManagedObjectContext_refreshObject_CmergeChanges_C(NSManagedObjectContext *_self, NSManagedObject* object, BOOL flag);

// method '-[NSManagedObjectContext registeredObjects]'
id _IM_NSManagedObjectContext_registeredObjects(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext reset]'
void _IM_NSManagedObjectContext_reset(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext retainsRegisteredObjects]'
BOOL _IM_NSManagedObjectContext_retainsRegisteredObjects(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext rollback]'
void _IM_NSManagedObjectContext_rollback(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext save:]'
BOOL _IM_NSManagedObjectContext_save_C(NSManagedObjectContext *_self, id *error);

// method '-[NSManagedObjectContext setMergePolicy:]'
void _IM_NSManagedObjectContext_setMergePolicy_C(NSManagedObjectContext *_self, id mergePolicy);

// method '-[NSManagedObjectContext setPersistentStoreCoordinator:]'
void _IM_NSManagedObjectContext_setPersistentStoreCoordinator_C(NSManagedObjectContext *_self, NSPersistentStoreCoordinator* coordinator);

// method '-[NSManagedObjectContext setPropagatesDeletesAtEndOfEvent:]'
void _IM_NSManagedObjectContext_setPropagatesDeletesAtEndOfEvent_C(NSManagedObjectContext *_self, BOOL flag);

// method '-[NSManagedObjectContext setRetainsRegisteredObjects:]'
void _IM_NSManagedObjectContext_setRetainsRegisteredObjects_C(NSManagedObjectContext *_self, BOOL flag);

// method '-[NSManagedObjectContext setStalenessInterval:]'
void _IM_NSManagedObjectContext_setStalenessInterval_C(NSManagedObjectContext *_self, double expiration);

// method '-[NSManagedObjectContext setUndoManager:]'
void _IM_NSManagedObjectContext_setUndoManager_C(NSManagedObjectContext *_self, id undoManager);

// method '-[NSManagedObjectContext stalenessInterval]'
double _IM_NSManagedObjectContext_stalenessInterval(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext tryLock]'
BOOL _IM_NSManagedObjectContext_tryLock(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext undo]'
void _IM_NSManagedObjectContext_undo(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext undoManager]'
id _IM_NSManagedObjectContext_undoManager(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext unlock]'
void _IM_NSManagedObjectContext_unlock(NSManagedObjectContext *_self);

// method '-[NSManagedObjectContext updatedObjects]'
id _IM_NSManagedObjectContext_updatedObjects(NSManagedObjectContext *_self);

// method '-[NSManagedObjectID URIRepresentation]'
id _IM_NSManagedObjectID_URIRepresentation(NSManagedObjectID *_self);

// method '-[NSManagedObjectID entity]'
NSEntityDescription* _IM_NSManagedObjectID_entity(NSManagedObjectID *_self);

// method '-[NSManagedObjectID isTemporaryID]'
BOOL _IM_NSManagedObjectID_isTemporaryID(NSManagedObjectID *_self);

// method '-[NSManagedObjectID persistentStore]'
id _IM_NSManagedObjectID_persistentStore(NSManagedObjectID *_self);

// method '-[NSManagedObjectModel configurations]'
id _IM_NSManagedObjectModel_configurations(NSManagedObjectModel *_self);

// method '-[NSManagedObjectModel entities]'
id _IM_NSManagedObjectModel_entities(NSManagedObjectModel *_self);

// method '-[NSManagedObjectModel entitiesByName]'
id _IM_NSManagedObjectModel_entitiesByName(NSManagedObjectModel *_self);

// method '-[NSManagedObjectModel entitiesForConfiguration:]'
id _IM_NSManagedObjectModel_entitiesForConfiguration_C(NSManagedObjectModel *_self, id configuration);

// method '-[NSManagedObjectModel fetchRequestFromTemplateWithName:substitutionVariables:]'
NSFetchRequest* _IM_NSManagedObjectModel_fetchRequestFromTemplateWithName_CsubstitutionVariables_C(NSManagedObjectModel *_self, id name, id variables);

// method '-[NSManagedObjectModel fetchRequestTemplateForName:]'
NSFetchRequest* _IM_NSManagedObjectModel_fetchRequestTemplateForName_C(NSManagedObjectModel *_self, id name);

// method '-[NSManagedObjectModel init]'
NSManagedObjectModel *_IM_NSManagedObjectModel_init(NSManagedObjectModel *_self);

// method '-[NSManagedObjectModel initWithContentsOfURL:]'
NSManagedObjectModel *_IM_NSManagedObjectModel_initWithContentsOfURL_C(NSManagedObjectModel *_self, id url);

// method '-[NSManagedObjectModel localizationDictionary]'
id _IM_NSManagedObjectModel_localizationDictionary(NSManagedObjectModel *_self);

// method '+[NSManagedObjectModel mergedModelFromBundles:]'
NSManagedObjectModel* _CM_NSManagedObjectModel_mergedModelFromBundles_C(Class _class, id bundles);

// method '+[NSManagedObjectModel modelByMergingModels:]'
NSManagedObjectModel* _CM_NSManagedObjectModel_modelByMergingModels_C(Class _class, id models);

// method '-[NSManagedObjectModel setEntities:]'
void _IM_NSManagedObjectModel_setEntities_C(NSManagedObjectModel *_self, id entities);

// method '-[NSManagedObjectModel setEntities:forConfiguration:]'
void _IM_NSManagedObjectModel_setEntities_CforConfiguration_C(NSManagedObjectModel *_self, id entities, id configuration);

// method '-[NSManagedObjectModel setFetchRequestTemplate:forName:]'
void _IM_NSManagedObjectModel_setFetchRequestTemplate_CforName_C(NSManagedObjectModel *_self, NSFetchRequest* fetchRequestTemplate, id name);

// method '-[NSManagedObjectModel setLocalizationDictionary:]'
void _IM_NSManagedObjectModel_setLocalizationDictionary_C(NSManagedObjectModel *_self, id localizationDictionary);

// method '-[NSPersistentStoreCoordinator URLForPersistentStore:]'
id _IM_NSPersistentStoreCoordinator_URLForPersistentStore_C(NSPersistentStoreCoordinator *_self, id store);

// method '-[NSPersistentStoreCoordinator addPersistentStoreWithType:configuration:URL:options:error:]'
id _IM_NSPersistentStoreCoordinator_addPersistentStoreWithType_Cconfiguration_CURL_Coptions_Cerror_C(NSPersistentStoreCoordinator *_self, id storeType, id configuration, id storeURL, id options, id *error);

// method '-[NSPersistentStoreCoordinator initWithManagedObjectModel:]'
NSPersistentStoreCoordinator *_IM_NSPersistentStoreCoordinator_initWithManagedObjectModel_C(NSPersistentStoreCoordinator *_self, NSManagedObjectModel* model);

// method '-[NSPersistentStoreCoordinator lock]'
void _IM_NSPersistentStoreCoordinator_lock(NSPersistentStoreCoordinator *_self);

// method '-[NSPersistentStoreCoordinator managedObjectIDForURIRepresentation:]'
NSManagedObjectID* _IM_NSPersistentStoreCoordinator_managedObjectIDForURIRepresentation_C(NSPersistentStoreCoordinator *_self, id url);

// method '-[NSPersistentStoreCoordinator managedObjectModel]'
NSManagedObjectModel* _IM_NSPersistentStoreCoordinator_managedObjectModel(NSPersistentStoreCoordinator *_self);

// method '-[NSPersistentStoreCoordinator metadataForPersistentStore:]'
id _IM_NSPersistentStoreCoordinator_metadataForPersistentStore_C(NSPersistentStoreCoordinator *_self, id store);

// method '+[NSPersistentStoreCoordinator metadataForPersistentStoreWithURL:error:]'
id _CM_NSPersistentStoreCoordinator_metadataForPersistentStoreWithURL_Cerror_C(Class _class, id url, id *error);

// method '-[NSPersistentStoreCoordinator migratePersistentStore:toURL:options:withType:error:]'
id _IM_NSPersistentStoreCoordinator_migratePersistentStore_CtoURL_Coptions_CwithType_Cerror_C(NSPersistentStoreCoordinator *_self, id store, id URL, id options, id storeType, id *error);

// method '-[NSPersistentStoreCoordinator persistentStoreForURL:]'
id _IM_NSPersistentStoreCoordinator_persistentStoreForURL_C(NSPersistentStoreCoordinator *_self, id URL);

// method '-[NSPersistentStoreCoordinator persistentStores]'
id _IM_NSPersistentStoreCoordinator_persistentStores(NSPersistentStoreCoordinator *_self);

// method '-[NSPersistentStoreCoordinator removePersistentStore:error:]'
BOOL _IM_NSPersistentStoreCoordinator_removePersistentStore_Cerror_C(NSPersistentStoreCoordinator *_self, id store, id *error);

// method '-[NSPersistentStoreCoordinator setMetadata:forPersistentStore:]'
void _IM_NSPersistentStoreCoordinator_setMetadata_CforPersistentStore_C(NSPersistentStoreCoordinator *_self, id metadata, id store);

// method '-[NSPersistentStoreCoordinator tryLock]'
BOOL _IM_NSPersistentStoreCoordinator_tryLock(NSPersistentStoreCoordinator *_self);

// method '-[NSPersistentStoreCoordinator unlock]'
void _IM_NSPersistentStoreCoordinator_unlock(NSPersistentStoreCoordinator *_self);

// method '-[NSPropertyDescription entity]'
NSEntityDescription* _IM_NSPropertyDescription_entity(NSPropertyDescription *_self);

// method '-[NSPropertyDescription isOptional]'
BOOL _IM_NSPropertyDescription_isOptional(NSPropertyDescription *_self);

// method '-[NSPropertyDescription isTransient]'
BOOL _IM_NSPropertyDescription_isTransient(NSPropertyDescription *_self);

// method '-[NSPropertyDescription name]'
id _IM_NSPropertyDescription_name(NSPropertyDescription *_self);

// method '-[NSPropertyDescription setName:]'
void _IM_NSPropertyDescription_setName_C(NSPropertyDescription *_self, id name);

// method '-[NSPropertyDescription setOptional:]'
void _IM_NSPropertyDescription_setOptional_C(NSPropertyDescription *_self, BOOL flag);

// method '-[NSPropertyDescription setTransient:]'
void _IM_NSPropertyDescription_setTransient_C(NSPropertyDescription *_self, BOOL flag);

// method '-[NSPropertyDescription setUserInfo:]'
void _IM_NSPropertyDescription_setUserInfo_C(NSPropertyDescription *_self, id dictionary);

// method '-[NSPropertyDescription setValidationPredicates:withValidationWarnings:]'
void _IM_NSPropertyDescription_setValidationPredicates_CwithValidationWarnings_C(NSPropertyDescription *_self, id validationPredicates, id validationWarnings);

// method '-[NSPropertyDescription userInfo]'
id _IM_NSPropertyDescription_userInfo(NSPropertyDescription *_self);

// method '-[NSPropertyDescription validationPredicates]'
id _IM_NSPropertyDescription_validationPredicates(NSPropertyDescription *_self);

// method '-[NSPropertyDescription validationWarnings]'
id _IM_NSPropertyDescription_validationWarnings(NSPropertyDescription *_self);

// method '-[NSRelationshipDescription deleteRule]'
int _IM_NSRelationshipDescription_deleteRule(NSRelationshipDescription *_self);

// method '-[NSRelationshipDescription destinationEntity]'
NSEntityDescription* _IM_NSRelationshipDescription_destinationEntity(NSRelationshipDescription *_self);

// method '-[NSRelationshipDescription inverseRelationship]'
NSRelationshipDescription* _IM_NSRelationshipDescription_inverseRelationship(NSRelationshipDescription *_self);

// method '-[NSRelationshipDescription isToMany]'
BOOL _IM_NSRelationshipDescription_isToMany(NSRelationshipDescription *_self);

// method '-[NSRelationshipDescription maxCount]'
unsigned int _IM_NSRelationshipDescription_maxCount(NSRelationshipDescription *_self);

// method '-[NSRelationshipDescription minCount]'
unsigned int _IM_NSRelationshipDescription_minCount(NSRelationshipDescription *_self);

// method '-[NSRelationshipDescription setDeleteRule:]'
void _IM_NSRelationshipDescription_setDeleteRule_C(NSRelationshipDescription *_self, int rule);

// method '-[NSRelationshipDescription setDestinationEntity:]'
void _IM_NSRelationshipDescription_setDestinationEntity_C(NSRelationshipDescription *_self, NSEntityDescription* entity);

// method '-[NSRelationshipDescription setInverseRelationship:]'
void _IM_NSRelationshipDescription_setInverseRelationship_C(NSRelationshipDescription *_self, NSRelationshipDescription* relationship);

// method '-[NSRelationshipDescription setMaxCount:]'
void _IM_NSRelationshipDescription_setMaxCount_C(NSRelationshipDescription *_self, unsigned int maxCount);

// method '-[NSRelationshipDescription setMinCount:]'
void _IM_NSRelationshipDescription_setMinCount_C(NSRelationshipDescription *_self, unsigned int minCount);


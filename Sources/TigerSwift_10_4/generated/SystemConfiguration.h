// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'SCDynamicStoreRef'
typedef struct __SCDynamicStore *SCDynamicStoreRef;

// CoreFoundation type 'SCNetworkConnectionRef'
typedef struct __SCNetworkConnection *SCNetworkConnectionRef;

// CoreFoundation type 'SCNetworkInterfaceRef'
typedef struct __SCNetworkInterface *SCNetworkInterfaceRef;

// CoreFoundation type 'SCNetworkProtocolRef'
typedef struct __SCNetworkProtocol *SCNetworkProtocolRef;

// CoreFoundation type 'SCNetworkReachabilityRef'
typedef struct __SCNetworkReachability *SCNetworkReachabilityRef;

// CoreFoundation type 'SCNetworkServiceRef'
typedef struct __SCNetworkService *SCNetworkServiceRef;

// CoreFoundation type 'SCNetworkSetRef'
typedef struct __SCNetworkSet *SCNetworkSetRef;

// CoreFoundation type 'SCPreferencesRef'
typedef struct __SCPreferences *SCPreferencesRef;

// getter for constant 'kSCDynamicStoreUseSessionKeys'
struct __CFString *_get_kSCDynamicStoreUseSessionKeys(void);

// getter for constant 'kSCNetworkInterfaceIPv4'
struct __SCNetworkInterface *_get_kSCNetworkInterfaceIPv4(void);

// getter for constant 'kSCNetworkInterfaceType6to4'
struct __CFString *_get_kSCNetworkInterfaceType6to4(void);

// getter for constant 'kSCNetworkInterfaceTypeBluetooth'
struct __CFString *_get_kSCNetworkInterfaceTypeBluetooth(void);

// getter for constant 'kSCNetworkInterfaceTypeBond'
struct __CFString *_get_kSCNetworkInterfaceTypeBond(void);

// getter for constant 'kSCNetworkInterfaceTypeEthernet'
struct __CFString *_get_kSCNetworkInterfaceTypeEthernet(void);

// getter for constant 'kSCNetworkInterfaceTypeFireWire'
struct __CFString *_get_kSCNetworkInterfaceTypeFireWire(void);

// getter for constant 'kSCNetworkInterfaceTypeIEEE80211'
struct __CFString *_get_kSCNetworkInterfaceTypeIEEE80211(void);

// getter for constant 'kSCNetworkInterfaceTypeIPv4'
struct __CFString *_get_kSCNetworkInterfaceTypeIPv4(void);

// getter for constant 'kSCNetworkInterfaceTypeIrDA'
struct __CFString *_get_kSCNetworkInterfaceTypeIrDA(void);

// getter for constant 'kSCNetworkInterfaceTypeL2TP'
struct __CFString *_get_kSCNetworkInterfaceTypeL2TP(void);

// getter for constant 'kSCNetworkInterfaceTypeModem'
struct __CFString *_get_kSCNetworkInterfaceTypeModem(void);

// getter for constant 'kSCNetworkInterfaceTypePPP'
struct __CFString *_get_kSCNetworkInterfaceTypePPP(void);

// getter for constant 'kSCNetworkInterfaceTypePPTP'
struct __CFString *_get_kSCNetworkInterfaceTypePPTP(void);

// getter for constant 'kSCNetworkInterfaceTypeSerial'
struct __CFString *_get_kSCNetworkInterfaceTypeSerial(void);

// getter for constant 'kSCNetworkInterfaceTypeVLAN'
struct __CFString *_get_kSCNetworkInterfaceTypeVLAN(void);

// getter for constant 'kSCNetworkProtocolTypeAppleTalk'
struct __CFString *_get_kSCNetworkProtocolTypeAppleTalk(void);

// getter for constant 'kSCNetworkProtocolTypeDNS'
struct __CFString *_get_kSCNetworkProtocolTypeDNS(void);

// getter for constant 'kSCNetworkProtocolTypeIPv4'
struct __CFString *_get_kSCNetworkProtocolTypeIPv4(void);

// getter for constant 'kSCNetworkProtocolTypeIPv6'
struct __CFString *_get_kSCNetworkProtocolTypeIPv6(void);

// getter for constant 'kSCNetworkProtocolTypeProxies'
struct __CFString *_get_kSCNetworkProtocolTypeProxies(void);

enum { kSCNetworkConnectionConnected = 2 };

enum { kSCNetworkConnectionConnecting = 1 };

enum { kSCNetworkConnectionDisconnected = 0 };

enum { kSCNetworkConnectionDisconnecting = 3 };

enum { kSCNetworkConnectionInvalid = -1 };

enum { kSCNetworkConnectionPPPAuthenticating = 5 };

enum { kSCNetworkConnectionPPPConnected = 8 };

enum { kSCNetworkConnectionPPPConnectingLink = 2 };

enum { kSCNetworkConnectionPPPDialOnTraffic = 3 };

enum { kSCNetworkConnectionPPPDisconnected = 0 };

enum { kSCNetworkConnectionPPPDisconnectingLink = 10 };

enum { kSCNetworkConnectionPPPHoldingLinkOff = 11 };

enum { kSCNetworkConnectionPPPInitializing = 1 };

enum { kSCNetworkConnectionPPPNegotiatingLink = 4 };

enum { kSCNetworkConnectionPPPNegotiatingNetwork = 7 };

enum { kSCNetworkConnectionPPPSuspended = 12 };

enum { kSCNetworkConnectionPPPTerminating = 9 };

enum { kSCNetworkConnectionPPPWaitingForCallBack = 6 };

enum { kSCNetworkConnectionPPPWaitingForRedial = 13 };

enum { kSCNetworkFlagsConnectionAutomatic = 8 };

enum { kSCNetworkFlagsConnectionRequired = 4 };

enum { kSCNetworkFlagsInterventionRequired = 16 };

enum { kSCNetworkFlagsIsDirect = 131072 };

enum { kSCNetworkFlagsIsLocalAddress = 65536 };

enum { kSCNetworkFlagsReachable = 2 };

enum { kSCNetworkFlagsTransientConnection = 1 };

enum { kSCPreferencesNotificationApply = 2 };

enum { kSCPreferencesNotificationCommit = 1 };

enum { kSCStatusAccessError = 1003 };

enum { kSCStatusFailed = 1001 };

enum { kSCStatusInvalidArgument = 1002 };

enum { kSCStatusKeyExists = 1005 };

enum { kSCStatusLocked = 1006 };

enum { kSCStatusMaxLink = 3006 };

enum { kSCStatusNeedLock = 1007 };

enum { kSCStatusNoConfigFile = 3003 };

enum { kSCStatusNoKey = 1004 };

enum { kSCStatusNoLink = 3004 };

enum { kSCStatusNoPrefsSession = 3001 };

enum { kSCStatusNoStoreServer = 2002 };

enum { kSCStatusNoStoreSession = 2001 };

enum { kSCStatusNotifierActive = 2003 };

enum { kSCStatusOK = 0 };

enum { kSCStatusPrefsBusy = 3002 };

enum { kSCStatusReachabilityUnknown = 4001 };

enum { kSCStatusStale = 3005 };

// function 'DHCPClientPreferencesCopyApplicationOptions'
UInt8* DHCPClientPreferencesCopyApplicationOptions(struct __CFString *applicationID, int *count);

// function 'DHCPClientPreferencesSetApplicationOptions'
Boolean DHCPClientPreferencesSetApplicationOptions(struct __CFString *applicationID, UInt8* options, long count);

// function 'DHCPInfoGetLeaseStartTime'
struct __CFDate *DHCPInfoGetLeaseStartTime(struct __CFDictionary *info);

// function 'DHCPInfoGetOptionData'
struct __CFData *DHCPInfoGetOptionData(struct __CFDictionary *info, unsigned char code);

// function 'SCDynamicStoreAddTemporaryValue'
Boolean SCDynamicStoreAddTemporaryValue(struct __SCDynamicStore *store, struct __CFString *key, id value);

// function 'SCDynamicStoreAddValue'
Boolean SCDynamicStoreAddValue(struct __SCDynamicStore *store, struct __CFString *key, id value);

// function 'SCDynamicStoreCopyComputerName'
struct __CFString *SCDynamicStoreCopyComputerName(struct __SCDynamicStore *store, unsigned int *nameEncoding);

// function 'SCDynamicStoreCopyConsoleUser'
struct __CFString *SCDynamicStoreCopyConsoleUser(struct __SCDynamicStore *store, unsigned int *uid, unsigned int *gid);

// function 'SCDynamicStoreCopyDHCPInfo'
struct __CFDictionary *SCDynamicStoreCopyDHCPInfo(struct __SCDynamicStore *store, struct __CFString *serviceID);

// function 'SCDynamicStoreCopyKeyList'
struct __CFArray *SCDynamicStoreCopyKeyList(struct __SCDynamicStore *store, struct __CFString *pattern);

// function 'SCDynamicStoreCopyLocalHostName'
struct __CFString *SCDynamicStoreCopyLocalHostName(struct __SCDynamicStore *store);

// function 'SCDynamicStoreCopyLocation'
struct __CFString *SCDynamicStoreCopyLocation(struct __SCDynamicStore *store);

// function 'SCDynamicStoreCopyMultiple'
struct __CFDictionary *SCDynamicStoreCopyMultiple(struct __SCDynamicStore *store, struct __CFArray *keys, struct __CFArray *patterns);

// function 'SCDynamicStoreCopyNotifiedKeys'
struct __CFArray *SCDynamicStoreCopyNotifiedKeys(struct __SCDynamicStore *store);

// function 'SCDynamicStoreCopyProxies'
struct __CFDictionary *SCDynamicStoreCopyProxies(struct __SCDynamicStore *store);

// function 'SCDynamicStoreCopyValue'
id SCDynamicStoreCopyValue(struct __SCDynamicStore *store, struct __CFString *key);

// function 'SCDynamicStoreCreateRunLoopSource'
struct __CFRunLoopSource *SCDynamicStoreCreateRunLoopSource(struct __CFAllocator *allocator, struct __SCDynamicStore *store, long order);

// function 'SCDynamicStoreGetTypeID'
unsigned long SCDynamicStoreGetTypeID(void);

// function 'SCDynamicStoreKeyCreateComputerName'
struct __CFString *SCDynamicStoreKeyCreateComputerName(struct __CFAllocator *allocator);

// function 'SCDynamicStoreKeyCreateConsoleUser'
struct __CFString *SCDynamicStoreKeyCreateConsoleUser(struct __CFAllocator *allocator);

// function 'SCDynamicStoreKeyCreateHostNames'
struct __CFString *SCDynamicStoreKeyCreateHostNames(struct __CFAllocator *allocator);

// function 'SCDynamicStoreKeyCreateLocation'
struct __CFString *SCDynamicStoreKeyCreateLocation(struct __CFAllocator *allocator);

// function 'SCDynamicStoreKeyCreateNetworkGlobalEntity'
struct __CFString *SCDynamicStoreKeyCreateNetworkGlobalEntity(struct __CFAllocator *allocator, struct __CFString *domain, struct __CFString *entity);

// function 'SCDynamicStoreKeyCreateNetworkInterface'
struct __CFString *SCDynamicStoreKeyCreateNetworkInterface(struct __CFAllocator *allocator, struct __CFString *domain);

// function 'SCDynamicStoreKeyCreateNetworkInterfaceEntity'
struct __CFString *SCDynamicStoreKeyCreateNetworkInterfaceEntity(struct __CFAllocator *allocator, struct __CFString *domain, struct __CFString *ifname, struct __CFString *entity);

// function 'SCDynamicStoreKeyCreateNetworkServiceEntity'
struct __CFString *SCDynamicStoreKeyCreateNetworkServiceEntity(struct __CFAllocator *allocator, struct __CFString *domain, struct __CFString *serviceID, struct __CFString *entity);

// function 'SCDynamicStoreKeyCreateProxies'
struct __CFString *SCDynamicStoreKeyCreateProxies(struct __CFAllocator *allocator);

// function 'SCDynamicStoreNotifyValue'
Boolean SCDynamicStoreNotifyValue(struct __SCDynamicStore *store, struct __CFString *key);

// function 'SCDynamicStoreRemoveValue'
Boolean SCDynamicStoreRemoveValue(struct __SCDynamicStore *store, struct __CFString *key);

// function 'SCDynamicStoreSetMultiple'
Boolean SCDynamicStoreSetMultiple(struct __SCDynamicStore *store, struct __CFDictionary *keysToSet, struct __CFArray *keysToRemove, struct __CFArray *keysToNotify);

// function 'SCDynamicStoreSetNotificationKeys'
Boolean SCDynamicStoreSetNotificationKeys(struct __SCDynamicStore *store, struct __CFArray *keys, struct __CFArray *patterns);

// function 'SCDynamicStoreSetValue'
Boolean SCDynamicStoreSetValue(struct __SCDynamicStore *store, struct __CFString *key, id value);

// function 'SCError'
int SCError(void);

// function 'SCErrorString'
const char* SCErrorString(int status);

// function 'SCNetworkCheckReachabilityByName'
Boolean SCNetworkCheckReachabilityByName(const char* nodename, unsigned int *flags);

// function 'SCNetworkConnectionCopyExtendedStatus'
struct __CFDictionary *SCNetworkConnectionCopyExtendedStatus(struct __SCNetworkConnection *connection);

// function 'SCNetworkConnectionCopyServiceID'
struct __CFString *SCNetworkConnectionCopyServiceID(struct __SCNetworkConnection *connection);

// function 'SCNetworkConnectionCopyStatistics'
struct __CFDictionary *SCNetworkConnectionCopyStatistics(struct __SCNetworkConnection *connection);

// function 'SCNetworkConnectionCopyUserOptions'
struct __CFDictionary *SCNetworkConnectionCopyUserOptions(struct __SCNetworkConnection *connection);

// function 'SCNetworkConnectionCopyUserPreferences'
Boolean SCNetworkConnectionCopyUserPreferences(struct __CFDictionary *selectionOptions, struct __CFString **serviceID, struct __CFDictionary **userOptions);

// function 'SCNetworkConnectionGetStatus'
int SCNetworkConnectionGetStatus(struct __SCNetworkConnection *connection);

// function 'SCNetworkConnectionGetTypeID'
unsigned long SCNetworkConnectionGetTypeID(void);

// function 'SCNetworkConnectionScheduleWithRunLoop'
Boolean SCNetworkConnectionScheduleWithRunLoop(struct __SCNetworkConnection *connection, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'SCNetworkConnectionStart'
Boolean SCNetworkConnectionStart(struct __SCNetworkConnection *connection, struct __CFDictionary *userOptions, Boolean linger);

// function 'SCNetworkConnectionStop'
Boolean SCNetworkConnectionStop(struct __SCNetworkConnection *connection, Boolean forceDisconnect);

// function 'SCNetworkConnectionUnscheduleFromRunLoop'
Boolean SCNetworkConnectionUnscheduleFromRunLoop(struct __SCNetworkConnection *connection, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'SCNetworkInterfaceCopyAll'
struct __CFArray *SCNetworkInterfaceCopyAll(void);

// function 'SCNetworkInterfaceCreateWithInterface'
struct __SCNetworkInterface *SCNetworkInterfaceCreateWithInterface(struct __SCNetworkInterface *interface, struct __CFString *interfaceType);

// function 'SCNetworkInterfaceGetBSDName'
struct __CFString *SCNetworkInterfaceGetBSDName(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetConfiguration'
struct __CFDictionary *SCNetworkInterfaceGetConfiguration(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetHardwareAddressString'
struct __CFString *SCNetworkInterfaceGetHardwareAddressString(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetInterface'
struct __SCNetworkInterface *SCNetworkInterfaceGetInterface(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetInterfaceType'
struct __CFString *SCNetworkInterfaceGetInterfaceType(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetLocalizedDisplayName'
struct __CFString *SCNetworkInterfaceGetLocalizedDisplayName(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetSupportedInterfaceTypes'
struct __CFArray *SCNetworkInterfaceGetSupportedInterfaceTypes(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetSupportedProtocolTypes'
struct __CFArray *SCNetworkInterfaceGetSupportedProtocolTypes(struct __SCNetworkInterface *interface);

// function 'SCNetworkInterfaceGetTypeID'
unsigned long SCNetworkInterfaceGetTypeID(void);

// function 'SCNetworkInterfaceRefreshConfiguration'
Boolean SCNetworkInterfaceRefreshConfiguration(struct __CFString *ifName);

// function 'SCNetworkInterfaceSetConfiguration'
Boolean SCNetworkInterfaceSetConfiguration(struct __SCNetworkInterface *interface, struct __CFDictionary *config);

// function 'SCNetworkProtocolGetConfiguration'
struct __CFDictionary *SCNetworkProtocolGetConfiguration(struct __SCNetworkProtocol *protocol);

// function 'SCNetworkProtocolGetEnabled'
Boolean SCNetworkProtocolGetEnabled(struct __SCNetworkProtocol *protocol);

// function 'SCNetworkProtocolGetProtocolType'
struct __CFString *SCNetworkProtocolGetProtocolType(struct __SCNetworkProtocol *protocol);

// function 'SCNetworkProtocolGetTypeID'
unsigned long SCNetworkProtocolGetTypeID(void);

// function 'SCNetworkProtocolSetConfiguration'
Boolean SCNetworkProtocolSetConfiguration(struct __SCNetworkProtocol *protocol, struct __CFDictionary *config);

// function 'SCNetworkProtocolSetEnabled'
Boolean SCNetworkProtocolSetEnabled(struct __SCNetworkProtocol *protocol, Boolean enabled);

// function 'SCNetworkReachabilityCreateWithName'
struct __SCNetworkReachability *SCNetworkReachabilityCreateWithName(struct __CFAllocator *allocator, const char* nodename);

// function 'SCNetworkReachabilityGetFlags'
Boolean SCNetworkReachabilityGetFlags(struct __SCNetworkReachability *target, unsigned int *flags);

// function 'SCNetworkReachabilityGetTypeID'
unsigned long SCNetworkReachabilityGetTypeID(void);

// function 'SCNetworkReachabilityScheduleWithRunLoop'
Boolean SCNetworkReachabilityScheduleWithRunLoop(struct __SCNetworkReachability *target, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'SCNetworkReachabilityUnscheduleFromRunLoop'
Boolean SCNetworkReachabilityUnscheduleFromRunLoop(struct __SCNetworkReachability *target, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'SCNetworkServiceAddProtocolType'
Boolean SCNetworkServiceAddProtocolType(struct __SCNetworkService *service, struct __CFString *protocolType);

// function 'SCNetworkServiceCopy'
struct __SCNetworkService *SCNetworkServiceCopy(struct __SCPreferences *prefs, struct __CFString *serviceID);

// function 'SCNetworkServiceCopyAll'
struct __CFArray *SCNetworkServiceCopyAll(struct __SCPreferences *prefs);

// function 'SCNetworkServiceCopyProtocol'
struct __SCNetworkProtocol *SCNetworkServiceCopyProtocol(struct __SCNetworkService *service, struct __CFString *protocolType);

// function 'SCNetworkServiceCopyProtocols'
struct __CFArray *SCNetworkServiceCopyProtocols(struct __SCNetworkService *service);

// function 'SCNetworkServiceCreate'
struct __SCNetworkService *SCNetworkServiceCreate(struct __SCPreferences *prefs, struct __SCNetworkInterface *interface);

// function 'SCNetworkServiceGetEnabled'
Boolean SCNetworkServiceGetEnabled(struct __SCNetworkService *service);

// function 'SCNetworkServiceGetInterface'
struct __SCNetworkInterface *SCNetworkServiceGetInterface(struct __SCNetworkService *service);

// function 'SCNetworkServiceGetName'
struct __CFString *SCNetworkServiceGetName(struct __SCNetworkService *service);

// function 'SCNetworkServiceGetServiceID'
struct __CFString *SCNetworkServiceGetServiceID(struct __SCNetworkService *service);

// function 'SCNetworkServiceGetTypeID'
unsigned long SCNetworkServiceGetTypeID(void);

// function 'SCNetworkServiceRemove'
Boolean SCNetworkServiceRemove(struct __SCNetworkService *service);

// function 'SCNetworkServiceRemoveProtocolType'
Boolean SCNetworkServiceRemoveProtocolType(struct __SCNetworkService *service, struct __CFString *protocolType);

// function 'SCNetworkServiceSetEnabled'
Boolean SCNetworkServiceSetEnabled(struct __SCNetworkService *service, Boolean enabled);

// function 'SCNetworkServiceSetName'
Boolean SCNetworkServiceSetName(struct __SCNetworkService *service, struct __CFString *name);

// function 'SCNetworkSetAddService'
Boolean SCNetworkSetAddService(struct __SCNetworkSet *set, struct __SCNetworkService *service);

// function 'SCNetworkSetCopy'
struct __SCNetworkSet *SCNetworkSetCopy(struct __SCPreferences *prefs, struct __CFString *setID);

// function 'SCNetworkSetCopyAll'
struct __CFArray *SCNetworkSetCopyAll(struct __SCPreferences *prefs);

// function 'SCNetworkSetCopyCurrent'
struct __SCNetworkSet *SCNetworkSetCopyCurrent(struct __SCPreferences *prefs);

// function 'SCNetworkSetCopyServices'
struct __CFArray *SCNetworkSetCopyServices(struct __SCNetworkSet *set);

// function 'SCNetworkSetCreate'
struct __SCNetworkSet *SCNetworkSetCreate(struct __SCPreferences *prefs);

// function 'SCNetworkSetGetName'
struct __CFString *SCNetworkSetGetName(struct __SCNetworkSet *set);

// function 'SCNetworkSetGetServiceOrder'
struct __CFArray *SCNetworkSetGetServiceOrder(struct __SCNetworkSet *set);

// function 'SCNetworkSetGetSetID'
struct __CFString *SCNetworkSetGetSetID(struct __SCNetworkSet *set);

// function 'SCNetworkSetGetTypeID'
unsigned long SCNetworkSetGetTypeID(void);

// function 'SCNetworkSetRemove'
Boolean SCNetworkSetRemove(struct __SCNetworkSet *set);

// function 'SCNetworkSetRemoveService'
Boolean SCNetworkSetRemoveService(struct __SCNetworkSet *set, struct __SCNetworkService *service);

// function 'SCNetworkSetSetCurrent'
Boolean SCNetworkSetSetCurrent(struct __SCNetworkSet *set);

// function 'SCNetworkSetSetName'
Boolean SCNetworkSetSetName(struct __SCNetworkSet *set, struct __CFString *name);

// function 'SCNetworkSetSetServiceOrder'
Boolean SCNetworkSetSetServiceOrder(struct __SCNetworkSet *set, struct __CFArray *newOrder);

// function 'SCPreferencesAddValue'
Boolean SCPreferencesAddValue(struct __SCPreferences *prefs, struct __CFString *key, id value);

// function 'SCPreferencesApplyChanges'
Boolean SCPreferencesApplyChanges(struct __SCPreferences *prefs);

// function 'SCPreferencesCommitChanges'
Boolean SCPreferencesCommitChanges(struct __SCPreferences *prefs);

// function 'SCPreferencesCopyKeyList'
struct __CFArray *SCPreferencesCopyKeyList(struct __SCPreferences *prefs);

// function 'SCPreferencesCreate'
struct __SCPreferences *SCPreferencesCreate(struct __CFAllocator *allocator, struct __CFString *name, struct __CFString *prefsID);

// function 'SCPreferencesGetSignature'
struct __CFData *SCPreferencesGetSignature(struct __SCPreferences *prefs);

// function 'SCPreferencesGetTypeID'
unsigned long SCPreferencesGetTypeID(void);

// function 'SCPreferencesGetValue'
id SCPreferencesGetValue(struct __SCPreferences *prefs, struct __CFString *key);

// function 'SCPreferencesLock'
Boolean SCPreferencesLock(struct __SCPreferences *prefs, Boolean wait);

// function 'SCPreferencesPathCreateUniqueChild'
struct __CFString *SCPreferencesPathCreateUniqueChild(struct __SCPreferences *prefs, struct __CFString *prefix);

// function 'SCPreferencesPathGetLink'
struct __CFString *SCPreferencesPathGetLink(struct __SCPreferences *prefs, struct __CFString *path);

// function 'SCPreferencesPathGetValue'
struct __CFDictionary *SCPreferencesPathGetValue(struct __SCPreferences *prefs, struct __CFString *path);

// function 'SCPreferencesPathRemoveValue'
Boolean SCPreferencesPathRemoveValue(struct __SCPreferences *prefs, struct __CFString *path);

// function 'SCPreferencesPathSetLink'
Boolean SCPreferencesPathSetLink(struct __SCPreferences *prefs, struct __CFString *path, struct __CFString *link);

// function 'SCPreferencesPathSetValue'
Boolean SCPreferencesPathSetValue(struct __SCPreferences *prefs, struct __CFString *path, struct __CFDictionary *value);

// function 'SCPreferencesRemoveValue'
Boolean SCPreferencesRemoveValue(struct __SCPreferences *prefs, struct __CFString *key);

// function 'SCPreferencesScheduleWithRunLoop'
Boolean SCPreferencesScheduleWithRunLoop(struct __SCPreferences *prefs, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'SCPreferencesSetComputerName'
Boolean SCPreferencesSetComputerName(struct __SCPreferences *prefs, struct __CFString *name, unsigned long nameEncoding);

// function 'SCPreferencesSetLocalHostName'
Boolean SCPreferencesSetLocalHostName(struct __SCPreferences *prefs, struct __CFString *name);

// function 'SCPreferencesSetValue'
Boolean SCPreferencesSetValue(struct __SCPreferences *prefs, struct __CFString *key, id value);

// function 'SCPreferencesSynchronize'
void SCPreferencesSynchronize(struct __SCPreferences *prefs);

// function 'SCPreferencesUnlock'
Boolean SCPreferencesUnlock(struct __SCPreferences *prefs);

// function 'SCPreferencesUnscheduleFromRunLoop'
Boolean SCPreferencesUnscheduleFromRunLoop(struct __SCPreferences *prefs, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);


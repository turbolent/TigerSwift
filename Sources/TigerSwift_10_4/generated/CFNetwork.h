// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'CFHTTPAuthenticationRef'
typedef struct _CFHTTPAuthentication *CFHTTPAuthenticationRef;

// CoreFoundation type 'CFHTTPMessageRef'
typedef struct __CFHTTPMessage *CFHTTPMessageRef;

// CoreFoundation type 'CFHostRef'
typedef struct __CFHost *CFHostRef;

// CoreFoundation type 'CFNetDiagnosticRef'
typedef struct __CFNetDiagnostic *CFNetDiagnosticRef;

// CoreFoundation type 'CFNetServiceBrowserRef'
typedef struct __CFNetServiceBrowser *CFNetServiceBrowserRef;

// CoreFoundation type 'CFNetServiceMonitorRef'
typedef struct __CFNetServiceMonitor *CFNetServiceMonitorRef;

// CoreFoundation type 'CFNetServiceRef'
typedef struct __CFNetService *CFNetServiceRef;

// getter for constant 'kCFFTPResourceGroup'
struct __CFString *_get_kCFFTPResourceGroup(void);

// getter for constant 'kCFFTPResourceLink'
struct __CFString *_get_kCFFTPResourceLink(void);

// getter for constant 'kCFFTPResourceModDate'
struct __CFString *_get_kCFFTPResourceModDate(void);

// getter for constant 'kCFFTPResourceMode'
struct __CFString *_get_kCFFTPResourceMode(void);

// getter for constant 'kCFFTPResourceName'
struct __CFString *_get_kCFFTPResourceName(void);

// getter for constant 'kCFFTPResourceOwner'
struct __CFString *_get_kCFFTPResourceOwner(void);

// getter for constant 'kCFFTPResourceSize'
struct __CFString *_get_kCFFTPResourceSize(void);

// getter for constant 'kCFFTPResourceType'
struct __CFString *_get_kCFFTPResourceType(void);

// getter for constant 'kCFHTTPAuthenticationAccountDomain'
struct __CFString *_get_kCFHTTPAuthenticationAccountDomain(void);

// getter for constant 'kCFHTTPAuthenticationPassword'
struct __CFString *_get_kCFHTTPAuthenticationPassword(void);

// getter for constant 'kCFHTTPAuthenticationSchemeBasic'
struct __CFString *_get_kCFHTTPAuthenticationSchemeBasic(void);

// getter for constant 'kCFHTTPAuthenticationSchemeDigest'
struct __CFString *_get_kCFHTTPAuthenticationSchemeDigest(void);

// getter for constant 'kCFHTTPAuthenticationUsername'
struct __CFString *_get_kCFHTTPAuthenticationUsername(void);

// getter for constant 'kCFHTTPVersion1_0'
struct __CFString *_get_kCFHTTPVersion1_0(void);

// getter for constant 'kCFHTTPVersion1_1'
struct __CFString *_get_kCFHTTPVersion1_1(void);

// getter for constant 'kCFStreamErrorDomainFTP'
long _get_kCFStreamErrorDomainFTP(void);

// getter for constant 'kCFStreamErrorDomainHTTP'
long _get_kCFStreamErrorDomainHTTP(void);

// getter for constant 'kCFStreamErrorDomainMach'
long _get_kCFStreamErrorDomainMach(void);

// getter for constant 'kCFStreamErrorDomainNetDB'
long _get_kCFStreamErrorDomainNetDB(void);

// getter for constant 'kCFStreamErrorDomainNetServices'
long _get_kCFStreamErrorDomainNetServices(void);

// getter for constant 'kCFStreamErrorDomainSOCKS'
int _get_kCFStreamErrorDomainSOCKS(void);

// getter for constant 'kCFStreamErrorDomainSSL'
int _get_kCFStreamErrorDomainSSL(void);

// getter for constant 'kCFStreamErrorDomainSystemConfiguration'
long _get_kCFStreamErrorDomainSystemConfiguration(void);

// getter for constant 'kCFStreamPropertyFTPAttemptPersistentConnection'
struct __CFString *_get_kCFStreamPropertyFTPAttemptPersistentConnection(void);

// getter for constant 'kCFStreamPropertyFTPFetchResourceInfo'
struct __CFString *_get_kCFStreamPropertyFTPFetchResourceInfo(void);

// getter for constant 'kCFStreamPropertyFTPFileTransferOffset'
struct __CFString *_get_kCFStreamPropertyFTPFileTransferOffset(void);

// getter for constant 'kCFStreamPropertyFTPPassword'
struct __CFString *_get_kCFStreamPropertyFTPPassword(void);

// getter for constant 'kCFStreamPropertyFTPProxy'
struct __CFString *_get_kCFStreamPropertyFTPProxy(void);

// getter for constant 'kCFStreamPropertyFTPProxyHost'
struct __CFString *_get_kCFStreamPropertyFTPProxyHost(void);

// getter for constant 'kCFStreamPropertyFTPProxyPassword'
struct __CFString *_get_kCFStreamPropertyFTPProxyPassword(void);

// getter for constant 'kCFStreamPropertyFTPProxyPort'
struct __CFString *_get_kCFStreamPropertyFTPProxyPort(void);

// getter for constant 'kCFStreamPropertyFTPProxyUser'
struct __CFString *_get_kCFStreamPropertyFTPProxyUser(void);

// getter for constant 'kCFStreamPropertyFTPResourceSize'
struct __CFString *_get_kCFStreamPropertyFTPResourceSize(void);

// getter for constant 'kCFStreamPropertyFTPUsePassiveMode'
struct __CFString *_get_kCFStreamPropertyFTPUsePassiveMode(void);

// getter for constant 'kCFStreamPropertyFTPUserName'
struct __CFString *_get_kCFStreamPropertyFTPUserName(void);

// getter for constant 'kCFStreamPropertyHTTPAttemptPersistentConnection'
struct __CFString *_get_kCFStreamPropertyHTTPAttemptPersistentConnection(void);

// getter for constant 'kCFStreamPropertyHTTPFinalURL'
struct __CFString *_get_kCFStreamPropertyHTTPFinalURL(void);

// getter for constant 'kCFStreamPropertyHTTPProxy'
struct __CFString *_get_kCFStreamPropertyHTTPProxy(void);

// getter for constant 'kCFStreamPropertyHTTPProxyHost'
struct __CFString *_get_kCFStreamPropertyHTTPProxyHost(void);

// getter for constant 'kCFStreamPropertyHTTPProxyPort'
struct __CFString *_get_kCFStreamPropertyHTTPProxyPort(void);

// getter for constant 'kCFStreamPropertyHTTPRequestBytesWrittenCount'
struct __CFString *_get_kCFStreamPropertyHTTPRequestBytesWrittenCount(void);

// getter for constant 'kCFStreamPropertyHTTPResponseHeader'
struct __CFString *_get_kCFStreamPropertyHTTPResponseHeader(void);

// getter for constant 'kCFStreamPropertyHTTPSProxyHost'
struct __CFString *_get_kCFStreamPropertyHTTPSProxyHost(void);

// getter for constant 'kCFStreamPropertyHTTPSProxyPort'
struct __CFString *_get_kCFStreamPropertyHTTPSProxyPort(void);

// getter for constant 'kCFStreamPropertyHTTPShouldAutoredirect'
struct __CFString *_get_kCFStreamPropertyHTTPShouldAutoredirect(void);

// getter for constant 'kCFStreamPropertyProxyLocalBypass'
struct __CFString *_get_kCFStreamPropertyProxyLocalBypass(void);

// getter for constant 'kCFStreamPropertySOCKSPassword'
struct __CFString *_get_kCFStreamPropertySOCKSPassword(void);

// getter for constant 'kCFStreamPropertySOCKSProxy'
struct __CFString *_get_kCFStreamPropertySOCKSProxy(void);

// getter for constant 'kCFStreamPropertySOCKSProxyHost'
struct __CFString *_get_kCFStreamPropertySOCKSProxyHost(void);

// getter for constant 'kCFStreamPropertySOCKSProxyPort'
struct __CFString *_get_kCFStreamPropertySOCKSProxyPort(void);

// getter for constant 'kCFStreamPropertySOCKSUser'
struct __CFString *_get_kCFStreamPropertySOCKSUser(void);

// getter for constant 'kCFStreamPropertySOCKSVersion'
struct __CFString *_get_kCFStreamPropertySOCKSVersion(void);

// getter for constant 'kCFStreamPropertySSLPeerCertificates'
struct __CFString *_get_kCFStreamPropertySSLPeerCertificates(void);

// getter for constant 'kCFStreamPropertySSLSettings'
struct __CFString *_get_kCFStreamPropertySSLSettings(void);

// getter for constant 'kCFStreamPropertyShouldCloseNativeSocket'
struct __CFString *_get_kCFStreamPropertyShouldCloseNativeSocket(void);

// getter for constant 'kCFStreamPropertySocketRemoteHost'
struct __CFString *_get_kCFStreamPropertySocketRemoteHost(void);

// getter for constant 'kCFStreamPropertySocketRemoteNetService'
struct __CFString *_get_kCFStreamPropertySocketRemoteNetService(void);

// getter for constant 'kCFStreamPropertySocketSecurityLevel'
struct __CFString *_get_kCFStreamPropertySocketSecurityLevel(void);

// getter for constant 'kCFStreamSSLAllowsAnyRoot'
struct __CFString *_get_kCFStreamSSLAllowsAnyRoot(void);

// getter for constant 'kCFStreamSSLAllowsExpiredCertificates'
struct __CFString *_get_kCFStreamSSLAllowsExpiredCertificates(void);

// getter for constant 'kCFStreamSSLAllowsExpiredRoots'
struct __CFString *_get_kCFStreamSSLAllowsExpiredRoots(void);

// getter for constant 'kCFStreamSSLCertificates'
struct __CFString *_get_kCFStreamSSLCertificates(void);

// getter for constant 'kCFStreamSSLIsServer'
struct __CFString *_get_kCFStreamSSLIsServer(void);

// getter for constant 'kCFStreamSSLLevel'
struct __CFString *_get_kCFStreamSSLLevel(void);

// getter for constant 'kCFStreamSSLPeerName'
struct __CFString *_get_kCFStreamSSLPeerName(void);

// getter for constant 'kCFStreamSSLValidatesCertificateChain'
struct __CFString *_get_kCFStreamSSLValidatesCertificateChain(void);

// getter for constant 'kCFStreamSocketSOCKSVersion4'
struct __CFString *_get_kCFStreamSocketSOCKSVersion4(void);

// getter for constant 'kCFStreamSocketSOCKSVersion5'
struct __CFString *_get_kCFStreamSocketSOCKSVersion5(void);

// getter for constant 'kCFStreamSocketSecurityLevelNegotiatedSSL'
struct __CFString *_get_kCFStreamSocketSecurityLevelNegotiatedSSL(void);

// getter for constant 'kCFStreamSocketSecurityLevelNone'
struct __CFString *_get_kCFStreamSocketSecurityLevelNone(void);

// getter for constant 'kCFStreamSocketSecurityLevelSSLv2'
struct __CFString *_get_kCFStreamSocketSecurityLevelSSLv2(void);

// getter for constant 'kCFStreamSocketSecurityLevelSSLv3'
struct __CFString *_get_kCFStreamSocketSecurityLevelSSLv3(void);

// getter for constant 'kCFStreamSocketSecurityLevelTLSv1'
struct __CFString *_get_kCFStreamSocketSecurityLevelTLSv1(void);

enum { kCFHostAddresses = 0 };

enum { kCFHostNames = 1 };

enum { kCFHostReachability = 2 };

enum { kCFNetDiagnosticConnectionDown = -66557 };

enum { kCFNetDiagnosticConnectionIndeterminate = -66558 };

enum { kCFNetDiagnosticConnectionUp = -66559 };

enum { kCFNetDiagnosticErr = -66560 };

enum { kCFNetDiagnosticNoErr = 0 };

enum { kCFNetServiceFlagIsDefault = 4 };

enum { kCFNetServiceFlagIsDomain = 2 };

enum { kCFNetServiceFlagIsRegistrationDomain = 4 };

enum { kCFNetServiceFlagMoreComing = 1 };

enum { kCFNetServiceFlagNoAutoRename = 1 };

enum { kCFNetServiceFlagRemove = 8 };

enum { kCFNetServiceMonitorTXT = 1 };

enum { kCFNetServicesErrorBadArgument = -72004 };

enum { kCFNetServicesErrorCancel = -72005 };

enum { kCFNetServicesErrorCollision = -72001 };

enum { kCFNetServicesErrorInProgress = -72003 };

enum { kCFNetServicesErrorInvalid = -72006 };

enum { kCFNetServicesErrorNotFound = -72002 };

enum { kCFNetServicesErrorTimeout = -72007 };

enum { kCFNetServicesErrorUnknown = -72000 };

enum { kCFStreamErrorHTTPAuthenticationBadPassword = -1002 };

enum { kCFStreamErrorHTTPAuthenticationBadUserName = -1001 };

enum { kCFStreamErrorHTTPAuthenticationTypeUnsupported = -1000 };

enum { kCFStreamErrorHTTPBadURL = -3 };

enum { kCFStreamErrorHTTPParseFailure = -1 };

enum { kCFStreamErrorHTTPRedirectionLoop = -2 };

enum { kCFStreamErrorSOCKS4IdConflict = 93 };

enum { kCFStreamErrorSOCKS4IdentdFailed = 92 };

enum { kCFStreamErrorSOCKS4RequestFailed = 91 };

enum { kCFStreamErrorSOCKS4SubDomainResponse = 2 };

enum { kCFStreamErrorSOCKS5BadResponseAddr = 1 };

enum { kCFStreamErrorSOCKS5BadState = 2 };

enum { kCFStreamErrorSOCKS5SubDomainMethod = 4 };

enum { kCFStreamErrorSOCKS5SubDomainResponse = 5 };

enum { kCFStreamErrorSOCKS5SubDomainUserPass = 3 };

enum { kCFStreamErrorSOCKSSubDomainNone = 0 };

enum { kCFStreamErrorSOCKSSubDomainVersionCode = 1 };

enum { kCFStreamErrorSOCKSUnknownClientVersion = 3 };

enum { kCFStreamSocketSecurityNone = 0 };

enum { kCFStreamSocketSecuritySSLv2 = 1 };

enum { kCFStreamSocketSecuritySSLv23 = 3 };

enum { kCFStreamSocketSecuritySSLv3 = 2 };

enum { kCFStreamSocketSecurityTLSv1 = 4 };

enum { kSOCKS5NoAcceptableMethod = 255 };

// function 'CFFTPCreateParsedResourceListing'
long CFFTPCreateParsedResourceListing(struct __CFAllocator *alloc, const UInt8* buffer, long bufferLength, struct __CFDictionary **parsed);

// function 'CFHTTPAuthenticationAppliesToRequest'
Boolean CFHTTPAuthenticationAppliesToRequest(struct _CFHTTPAuthentication *auth, struct __CFHTTPMessage *request);

// function 'CFHTTPAuthenticationCopyDomains'
struct __CFArray *CFHTTPAuthenticationCopyDomains(struct _CFHTTPAuthentication *auth);

// function 'CFHTTPAuthenticationCopyMethod'
struct __CFString *CFHTTPAuthenticationCopyMethod(struct _CFHTTPAuthentication *auth);

// function 'CFHTTPAuthenticationCopyRealm'
struct __CFString *CFHTTPAuthenticationCopyRealm(struct _CFHTTPAuthentication *auth);

// function 'CFHTTPAuthenticationCreateFromResponse'
struct _CFHTTPAuthentication *CFHTTPAuthenticationCreateFromResponse(struct __CFAllocator *alloc, struct __CFHTTPMessage *response);

// function 'CFHTTPAuthenticationGetTypeID'
unsigned long CFHTTPAuthenticationGetTypeID(void);

// function 'CFHTTPAuthenticationIsValid'
Boolean CFHTTPAuthenticationIsValid(struct _CFHTTPAuthentication *auth, struct _CFStreamError *error);

// function 'CFHTTPAuthenticationRequiresAccountDomain'
Boolean CFHTTPAuthenticationRequiresAccountDomain(struct _CFHTTPAuthentication *auth);

// function 'CFHTTPAuthenticationRequiresOrderedRequests'
Boolean CFHTTPAuthenticationRequiresOrderedRequests(struct _CFHTTPAuthentication *auth);

// function 'CFHTTPAuthenticationRequiresUserNameAndPassword'
Boolean CFHTTPAuthenticationRequiresUserNameAndPassword(struct _CFHTTPAuthentication *auth);

// function 'CFHTTPMessageAddAuthentication'
Boolean CFHTTPMessageAddAuthentication(struct __CFHTTPMessage *request, struct __CFHTTPMessage *authenticationFailureResponse, struct __CFString *username, struct __CFString *password, struct __CFString *authenticationScheme, Boolean forProxy);

// function 'CFHTTPMessageAppendBytes'
Boolean CFHTTPMessageAppendBytes(struct __CFHTTPMessage *message, const UInt8* newBytes, long numBytes);

// function 'CFHTTPMessageApplyCredentialDictionary'
Boolean CFHTTPMessageApplyCredentialDictionary(struct __CFHTTPMessage *request, struct _CFHTTPAuthentication *auth, struct __CFDictionary *dict, struct _CFStreamError *error);

// function 'CFHTTPMessageApplyCredentials'
Boolean CFHTTPMessageApplyCredentials(struct __CFHTTPMessage *request, struct _CFHTTPAuthentication *auth, struct __CFString *username, struct __CFString *password, struct _CFStreamError *error);

// function 'CFHTTPMessageCopyAllHeaderFields'
struct __CFDictionary *CFHTTPMessageCopyAllHeaderFields(struct __CFHTTPMessage *message);

// function 'CFHTTPMessageCopyBody'
struct __CFData *CFHTTPMessageCopyBody(struct __CFHTTPMessage *message);

// function 'CFHTTPMessageCopyHeaderFieldValue'
struct __CFString *CFHTTPMessageCopyHeaderFieldValue(struct __CFHTTPMessage *message, struct __CFString *headerField);

// function 'CFHTTPMessageCopyRequestMethod'
struct __CFString *CFHTTPMessageCopyRequestMethod(struct __CFHTTPMessage *request);

// function 'CFHTTPMessageCopyRequestURL'
struct __CFURL *CFHTTPMessageCopyRequestURL(struct __CFHTTPMessage *request);

// function 'CFHTTPMessageCopyResponseStatusLine'
struct __CFString *CFHTTPMessageCopyResponseStatusLine(struct __CFHTTPMessage *response);

// function 'CFHTTPMessageCopySerializedMessage'
struct __CFData *CFHTTPMessageCopySerializedMessage(struct __CFHTTPMessage *request);

// function 'CFHTTPMessageCopyVersion'
struct __CFString *CFHTTPMessageCopyVersion(struct __CFHTTPMessage *message);

// function 'CFHTTPMessageCreateCopy'
struct __CFHTTPMessage *CFHTTPMessageCreateCopy(struct __CFAllocator *alloc, struct __CFHTTPMessage *message);

// function 'CFHTTPMessageCreateEmpty'
struct __CFHTTPMessage *CFHTTPMessageCreateEmpty(struct __CFAllocator *alloc, Boolean isRequest);

// function 'CFHTTPMessageCreateRequest'
struct __CFHTTPMessage *CFHTTPMessageCreateRequest(struct __CFAllocator *alloc, struct __CFString *requestMethod, struct __CFURL *url, struct __CFString *httpVersion);

// function 'CFHTTPMessageCreateResponse'
struct __CFHTTPMessage *CFHTTPMessageCreateResponse(struct __CFAllocator *alloc, int statusCode, struct __CFString *statusDescription, struct __CFString *httpVersion);

// function 'CFHTTPMessageGetResponseStatusCode'
unsigned long CFHTTPMessageGetResponseStatusCode(struct __CFHTTPMessage *response);

// function 'CFHTTPMessageGetTypeID'
unsigned long CFHTTPMessageGetTypeID(void);

// function 'CFHTTPMessageIsHeaderComplete'
Boolean CFHTTPMessageIsHeaderComplete(struct __CFHTTPMessage *message);

// function 'CFHTTPMessageIsRequest'
Boolean CFHTTPMessageIsRequest(struct __CFHTTPMessage *message);

// function 'CFHTTPMessageSetBody'
void CFHTTPMessageSetBody(struct __CFHTTPMessage *message, struct __CFData *bodyData);

// function 'CFHTTPMessageSetHeaderFieldValue'
void CFHTTPMessageSetHeaderFieldValue(struct __CFHTTPMessage *message, struct __CFString *headerField, struct __CFString *value);

// function 'CFHTTPReadStreamSetProxy'
void CFHTTPReadStreamSetProxy(struct __CFReadStream *httpStream, struct __CFString *proxyHost, long proxyPort);

// function 'CFHTTPReadStreamSetRedirectsAutomatically'
void CFHTTPReadStreamSetRedirectsAutomatically(struct __CFReadStream *httpStream, Boolean shouldAutoRedirect);

// function 'CFHostCancelInfoResolution'
void CFHostCancelInfoResolution(struct __CFHost *theHost, int info);

// function 'CFHostCreateCopy'
struct __CFHost *CFHostCreateCopy(struct __CFAllocator *alloc, struct __CFHost *host);

// function 'CFHostCreateWithAddress'
struct __CFHost *CFHostCreateWithAddress(struct __CFAllocator *allocator, struct __CFData *addr);

// function 'CFHostCreateWithName'
struct __CFHost *CFHostCreateWithName(struct __CFAllocator *allocator, struct __CFString *hostname);

// function 'CFHostGetAddressing'
struct __CFArray *CFHostGetAddressing(struct __CFHost *theHost, Boolean* hasBeenResolved);

// function 'CFHostGetNames'
struct __CFArray *CFHostGetNames(struct __CFHost *theHost, Boolean* hasBeenResolved);

// function 'CFHostGetReachability'
struct __CFData *CFHostGetReachability(struct __CFHost *theHost, Boolean* hasBeenResolved);

// function 'CFHostGetTypeID'
unsigned long CFHostGetTypeID(void);

// function 'CFHostScheduleWithRunLoop'
void CFHostScheduleWithRunLoop(struct __CFHost *theHost, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFHostStartInfoResolution'
Boolean CFHostStartInfoResolution(struct __CFHost *theHost, int info, struct _CFStreamError *error);

// function 'CFHostUnscheduleFromRunLoop'
void CFHostUnscheduleFromRunLoop(struct __CFHost *theHost, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFNetDiagnosticCopyNetworkStatusPassively'
int CFNetDiagnosticCopyNetworkStatusPassively(struct __CFNetDiagnostic *details, struct __CFString **description);

// function 'CFNetDiagnosticCreateWithStreams'
struct __CFNetDiagnostic *CFNetDiagnosticCreateWithStreams(struct __CFAllocator *alloc, struct __CFReadStream *readStream, struct __CFWriteStream *writeStream);

// function 'CFNetDiagnosticCreateWithURL'
struct __CFNetDiagnostic *CFNetDiagnosticCreateWithURL(struct __CFAllocator *alloc, struct __CFURL *url);

// function 'CFNetDiagnosticDiagnoseProblemInteractively'
int CFNetDiagnosticDiagnoseProblemInteractively(struct __CFNetDiagnostic *details);

// function 'CFNetDiagnosticSetName'
void CFNetDiagnosticSetName(struct __CFNetDiagnostic *details, struct __CFString *name);

// function 'CFNetServiceBrowserGetTypeID'
unsigned long CFNetServiceBrowserGetTypeID(void);

// function 'CFNetServiceBrowserInvalidate'
void CFNetServiceBrowserInvalidate(struct __CFNetServiceBrowser *browser);

// function 'CFNetServiceBrowserScheduleWithRunLoop'
void CFNetServiceBrowserScheduleWithRunLoop(struct __CFNetServiceBrowser *browser, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFNetServiceBrowserSearchForDomains'
Boolean CFNetServiceBrowserSearchForDomains(struct __CFNetServiceBrowser *browser, Boolean registrationDomains, struct _CFStreamError *error);

// function 'CFNetServiceBrowserSearchForServices'
Boolean CFNetServiceBrowserSearchForServices(struct __CFNetServiceBrowser *browser, struct __CFString *domain, struct __CFString *serviceType, struct _CFStreamError *error);

// function 'CFNetServiceBrowserStopSearch'
void CFNetServiceBrowserStopSearch(struct __CFNetServiceBrowser *browser, struct _CFStreamError *error);

// function 'CFNetServiceBrowserUnscheduleFromRunLoop'
void CFNetServiceBrowserUnscheduleFromRunLoop(struct __CFNetServiceBrowser *browser, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFNetServiceCancel'
void CFNetServiceCancel(struct __CFNetService *theService);

// function 'CFNetServiceCreate'
struct __CFNetService *CFNetServiceCreate(struct __CFAllocator *alloc, struct __CFString *domain, struct __CFString *serviceType, struct __CFString *name, unsigned long port);

// function 'CFNetServiceCreateCopy'
struct __CFNetService *CFNetServiceCreateCopy(struct __CFAllocator *alloc, struct __CFNetService *service);

// function 'CFNetServiceCreateDictionaryWithTXTData'
struct __CFDictionary *CFNetServiceCreateDictionaryWithTXTData(struct __CFAllocator *alloc, struct __CFData *txtRecord);

// function 'CFNetServiceCreateTXTDataWithDictionary'
struct __CFData *CFNetServiceCreateTXTDataWithDictionary(struct __CFAllocator *alloc, struct __CFDictionary *keyValuePairs);

// function 'CFNetServiceGetAddressing'
struct __CFArray *CFNetServiceGetAddressing(struct __CFNetService *theService);

// function 'CFNetServiceGetDomain'
struct __CFString *CFNetServiceGetDomain(struct __CFNetService *theService);

// function 'CFNetServiceGetName'
struct __CFString *CFNetServiceGetName(struct __CFNetService *theService);

// function 'CFNetServiceGetProtocolSpecificInformation'
struct __CFString *CFNetServiceGetProtocolSpecificInformation(struct __CFNetService *theService);

// function 'CFNetServiceGetTXTData'
struct __CFData *CFNetServiceGetTXTData(struct __CFNetService *theService);

// function 'CFNetServiceGetTargetHost'
struct __CFString *CFNetServiceGetTargetHost(struct __CFNetService *theService);

// function 'CFNetServiceGetType'
struct __CFString *CFNetServiceGetType(struct __CFNetService *theService);

// function 'CFNetServiceGetTypeID'
unsigned long CFNetServiceGetTypeID(void);

// function 'CFNetServiceMonitorGetTypeID'
unsigned long CFNetServiceMonitorGetTypeID(void);

// function 'CFNetServiceMonitorInvalidate'
void CFNetServiceMonitorInvalidate(struct __CFNetServiceMonitor *monitor);

// function 'CFNetServiceMonitorScheduleWithRunLoop'
void CFNetServiceMonitorScheduleWithRunLoop(struct __CFNetServiceMonitor *monitor, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFNetServiceMonitorStart'
Boolean CFNetServiceMonitorStart(struct __CFNetServiceMonitor *monitor, int recordType, struct _CFStreamError *error);

// function 'CFNetServiceMonitorStop'
void CFNetServiceMonitorStop(struct __CFNetServiceMonitor *monitor, struct _CFStreamError *error);

// function 'CFNetServiceMonitorUnscheduleFromRunLoop'
void CFNetServiceMonitorUnscheduleFromRunLoop(struct __CFNetServiceMonitor *monitor, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFNetServiceRegister'
Boolean CFNetServiceRegister(struct __CFNetService *theService, struct _CFStreamError *error);

// function 'CFNetServiceRegisterWithOptions'
Boolean CFNetServiceRegisterWithOptions(struct __CFNetService *theService, unsigned long options, struct _CFStreamError *error);

// function 'CFNetServiceResolve'
Boolean CFNetServiceResolve(struct __CFNetService *theService, struct _CFStreamError *error);

// function 'CFNetServiceResolveWithTimeout'
Boolean CFNetServiceResolveWithTimeout(struct __CFNetService *theService, double timeout, struct _CFStreamError *error);

// function 'CFNetServiceScheduleWithRunLoop'
void CFNetServiceScheduleWithRunLoop(struct __CFNetService *theService, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFNetServiceSetProtocolSpecificInformation'
void CFNetServiceSetProtocolSpecificInformation(struct __CFNetService *theService, struct __CFString *theInfo);

// function 'CFNetServiceSetTXTData'
Boolean CFNetServiceSetTXTData(struct __CFNetService *theService, struct __CFData *txtRecord);

// function 'CFNetServiceUnscheduleFromRunLoop'
void CFNetServiceUnscheduleFromRunLoop(struct __CFNetService *theService, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFReadStreamCreateForHTTPRequest'
struct __CFReadStream *CFReadStreamCreateForHTTPRequest(struct __CFAllocator *alloc, struct __CFHTTPMessage *request);

// function 'CFReadStreamCreateForStreamedHTTPRequest'
struct __CFReadStream *CFReadStreamCreateForStreamedHTTPRequest(struct __CFAllocator *alloc, struct __CFHTTPMessage *requestHeaders, struct __CFReadStream *requestBody);

// function 'CFReadStreamCreateWithFTPURL'
struct __CFReadStream *CFReadStreamCreateWithFTPURL(struct __CFAllocator *alloc, struct __CFURL *ftpURL);

// function 'CFSocketStreamPairSetSecurityProtocol'
Boolean CFSocketStreamPairSetSecurityProtocol(struct __CFReadStream *socketReadStream, struct __CFWriteStream *socketWriteStream, int securityProtocol);

// function 'CFSocketStreamSOCKSGetError'
long CFSocketStreamSOCKSGetError(struct _CFStreamError *error);

// function 'CFSocketStreamSOCKSGetErrorSubdomain'
long CFSocketStreamSOCKSGetErrorSubdomain(struct _CFStreamError *error);

// function 'CFStreamCreatePairWithSocketToCFHost'
void CFStreamCreatePairWithSocketToCFHost(struct __CFAllocator *alloc, struct __CFHost *host, unsigned long port, struct __CFReadStream **readStream, struct __CFWriteStream **writeStream);

// function 'CFStreamCreatePairWithSocketToNetService'
void CFStreamCreatePairWithSocketToNetService(struct __CFAllocator *alloc, struct __CFNetService *service, struct __CFReadStream **readStream, struct __CFWriteStream **writeStream);

// function 'CFWriteStreamCreateWithFTPURL'
struct __CFWriteStream *CFWriteStreamCreateWithFTPURL(struct __CFAllocator *alloc, struct __CFURL *ftpURL);


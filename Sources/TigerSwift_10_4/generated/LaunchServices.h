// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// struct 'LSItemInfoRecord'
struct LSItemInfoRecord {
    unsigned int flags;
    unsigned int filetype;
    unsigned int creator;
    struct __CFString *extension;
    struct __CFString *iconFileName;
    unsigned int kindID;
};

// struct 'LSApplicationParameters'
struct LSApplicationParameters {
    int version;
    unsigned int flags;
    struct FSRef *application;
    void *asyncLaunchRefCon;
    struct __CFDictionary *environment;
    struct __CFArray *argv;
    struct AEDesc *initialEvent;
};

// struct 'LSLaunchURLSpec'
struct LSLaunchURLSpec {
    struct __CFURL *appURL;
    struct __CFArray *itemURLs;
    struct AEDesc *passThruParams;
    unsigned int launchFlags;
    void *asyncRefCon;
};

// struct 'LSLaunchFSRefSpec'
struct LSLaunchFSRefSpec {
    struct FSRef *appRef;
    unsigned int numDocs;
    struct FSRef *itemRefs;
    struct AEDesc *passThruParams;
    unsigned int launchFlags;
    void *asyncRefCon;
};

// getter for constant 'kLSItemContentType'
struct __CFString *_get_kLSItemContentType(void);

// getter for constant 'kLSItemDisplayKind'
struct __CFString *_get_kLSItemDisplayKind(void);

// getter for constant 'kLSItemDisplayName'
struct __CFString *_get_kLSItemDisplayName(void);

// getter for constant 'kLSItemExtension'
struct __CFString *_get_kLSItemExtension(void);

// getter for constant 'kLSItemExtensionIsHidden'
struct __CFString *_get_kLSItemExtensionIsHidden(void);

// getter for constant 'kLSItemFileCreator'
struct __CFString *_get_kLSItemFileCreator(void);

// getter for constant 'kLSItemFileType'
struct __CFString *_get_kLSItemFileType(void);

// getter for constant 'kLSItemIsInvisible'
struct __CFString *_get_kLSItemIsInvisible(void);

// getter for constant 'kLSItemRoleHandlerDisplayName'
struct __CFString *_get_kLSItemRoleHandlerDisplayName(void);

// getter for constant 'kUTExportedTypeDeclarationsKey'
struct __CFString *_get_kUTExportedTypeDeclarationsKey(void);

// getter for constant 'kUTImportedTypeDeclarationsKey'
struct __CFString *_get_kUTImportedTypeDeclarationsKey(void);

// getter for constant 'kUTTagClassFilenameExtension'
struct __CFString *_get_kUTTagClassFilenameExtension(void);

// getter for constant 'kUTTagClassMIMEType'
struct __CFString *_get_kUTTagClassMIMEType(void);

// getter for constant 'kUTTagClassNSPboardType'
struct __CFString *_get_kUTTagClassNSPboardType(void);

// getter for constant 'kUTTagClassOSType'
struct __CFString *_get_kUTTagClassOSType(void);

// getter for constant 'kUTTypeAliasFile'
struct __CFString *_get_kUTTypeAliasFile(void);

// getter for constant 'kUTTypeAliasRecord'
struct __CFString *_get_kUTTypeAliasRecord(void);

// getter for constant 'kUTTypeAppleICNS'
struct __CFString *_get_kUTTypeAppleICNS(void);

// getter for constant 'kUTTypeAppleProtectedMPEG4Audio'
struct __CFString *_get_kUTTypeAppleProtectedMPEG4Audio(void);

// getter for constant 'kUTTypeApplication'
struct __CFString *_get_kUTTypeApplication(void);

// getter for constant 'kUTTypeApplicationBundle'
struct __CFString *_get_kUTTypeApplicationBundle(void);

// getter for constant 'kUTTypeApplicationFile'
struct __CFString *_get_kUTTypeApplicationFile(void);

// getter for constant 'kUTTypeArchive'
struct __CFString *_get_kUTTypeArchive(void);

// getter for constant 'kUTTypeAudio'
struct __CFString *_get_kUTTypeAudio(void);

// getter for constant 'kUTTypeAudiovisualContent'
struct __CFString *_get_kUTTypeAudiovisualContent(void);

// getter for constant 'kUTTypeBMP'
struct __CFString *_get_kUTTypeBMP(void);

// getter for constant 'kUTTypeBundle'
struct __CFString *_get_kUTTypeBundle(void);

// getter for constant 'kUTTypeCHeader'
struct __CFString *_get_kUTTypeCHeader(void);

// getter for constant 'kUTTypeCPlusPlusHeader'
struct __CFString *_get_kUTTypeCPlusPlusHeader(void);

// getter for constant 'kUTTypeCPlusPlusSource'
struct __CFString *_get_kUTTypeCPlusPlusSource(void);

// getter for constant 'kUTTypeCSource'
struct __CFString *_get_kUTTypeCSource(void);

// getter for constant 'kUTTypeCompositeContent'
struct __CFString *_get_kUTTypeCompositeContent(void);

// getter for constant 'kUTTypeConformsToKey'
struct __CFString *_get_kUTTypeConformsToKey(void);

// getter for constant 'kUTTypeContact'
struct __CFString *_get_kUTTypeContact(void);

// getter for constant 'kUTTypeContent'
struct __CFString *_get_kUTTypeContent(void);

// getter for constant 'kUTTypeData'
struct __CFString *_get_kUTTypeData(void);

// getter for constant 'kUTTypeDescriptionKey'
struct __CFString *_get_kUTTypeDescriptionKey(void);

// getter for constant 'kUTTypeDirectory'
struct __CFString *_get_kUTTypeDirectory(void);

// getter for constant 'kUTTypeDiskImage'
struct __CFString *_get_kUTTypeDiskImage(void);

// getter for constant 'kUTTypeFileURL'
struct __CFString *_get_kUTTypeFileURL(void);

// getter for constant 'kUTTypeFlatRTFD'
struct __CFString *_get_kUTTypeFlatRTFD(void);

// getter for constant 'kUTTypeFolder'
struct __CFString *_get_kUTTypeFolder(void);

// getter for constant 'kUTTypeFramework'
struct __CFString *_get_kUTTypeFramework(void);

// getter for constant 'kUTTypeGIF'
struct __CFString *_get_kUTTypeGIF(void);

// getter for constant 'kUTTypeHTML'
struct __CFString *_get_kUTTypeHTML(void);

// getter for constant 'kUTTypeICO'
struct __CFString *_get_kUTTypeICO(void);

// getter for constant 'kUTTypeIconFileKey'
struct __CFString *_get_kUTTypeIconFileKey(void);

// getter for constant 'kUTTypeIdentifierKey'
struct __CFString *_get_kUTTypeIdentifierKey(void);

// getter for constant 'kUTTypeImage'
struct __CFString *_get_kUTTypeImage(void);

// getter for constant 'kUTTypeInkText'
struct __CFString *_get_kUTTypeInkText(void);

// getter for constant 'kUTTypeItem'
struct __CFString *_get_kUTTypeItem(void);

// getter for constant 'kUTTypeJPEG'
struct __CFString *_get_kUTTypeJPEG(void);

// getter for constant 'kUTTypeJPEG2000'
struct __CFString *_get_kUTTypeJPEG2000(void);

// getter for constant 'kUTTypeJavaSource'
struct __CFString *_get_kUTTypeJavaSource(void);

// getter for constant 'kUTTypeMP3'
struct __CFString *_get_kUTTypeMP3(void);

// getter for constant 'kUTTypeMPEG'
struct __CFString *_get_kUTTypeMPEG(void);

// getter for constant 'kUTTypeMPEG4'
struct __CFString *_get_kUTTypeMPEG4(void);

// getter for constant 'kUTTypeMPEG4Audio'
struct __CFString *_get_kUTTypeMPEG4Audio(void);

// getter for constant 'kUTTypeMessage'
struct __CFString *_get_kUTTypeMessage(void);

// getter for constant 'kUTTypeMountPoint'
struct __CFString *_get_kUTTypeMountPoint(void);

// getter for constant 'kUTTypeMovie'
struct __CFString *_get_kUTTypeMovie(void);

// getter for constant 'kUTTypeObjectiveCPlusPlusSource'
struct __CFString *_get_kUTTypeObjectiveCPlusPlusSource(void);

// getter for constant 'kUTTypeObjectiveCSource'
struct __CFString *_get_kUTTypeObjectiveCSource(void);

// getter for constant 'kUTTypePDF'
struct __CFString *_get_kUTTypePDF(void);

// getter for constant 'kUTTypePICT'
struct __CFString *_get_kUTTypePICT(void);

// getter for constant 'kUTTypePNG'
struct __CFString *_get_kUTTypePNG(void);

// getter for constant 'kUTTypePackage'
struct __CFString *_get_kUTTypePackage(void);

// getter for constant 'kUTTypePlainText'
struct __CFString *_get_kUTTypePlainText(void);

// getter for constant 'kUTTypeQuickTimeImage'
struct __CFString *_get_kUTTypeQuickTimeImage(void);

// getter for constant 'kUTTypeQuickTimeMovie'
struct __CFString *_get_kUTTypeQuickTimeMovie(void);

// getter for constant 'kUTTypeRTF'
struct __CFString *_get_kUTTypeRTF(void);

// getter for constant 'kUTTypeRTFD'
struct __CFString *_get_kUTTypeRTFD(void);

// getter for constant 'kUTTypeReferenceURLKey'
struct __CFString *_get_kUTTypeReferenceURLKey(void);

// getter for constant 'kUTTypeResolvable'
struct __CFString *_get_kUTTypeResolvable(void);

// getter for constant 'kUTTypeSourceCode'
struct __CFString *_get_kUTTypeSourceCode(void);

// getter for constant 'kUTTypeSymLink'
struct __CFString *_get_kUTTypeSymLink(void);

// getter for constant 'kUTTypeTIFF'
struct __CFString *_get_kUTTypeTIFF(void);

// getter for constant 'kUTTypeTXNTextAndMultimediaData'
struct __CFString *_get_kUTTypeTXNTextAndMultimediaData(void);

// getter for constant 'kUTTypeTagSpecificationKey'
struct __CFString *_get_kUTTypeTagSpecificationKey(void);

// getter for constant 'kUTTypeText'
struct __CFString *_get_kUTTypeText(void);

// getter for constant 'kUTTypeURL'
struct __CFString *_get_kUTTypeURL(void);

// getter for constant 'kUTTypeUTF16ExternalPlainText'
struct __CFString *_get_kUTTypeUTF16ExternalPlainText(void);

// getter for constant 'kUTTypeUTF16PlainText'
struct __CFString *_get_kUTTypeUTF16PlainText(void);

// getter for constant 'kUTTypeUTF8PlainText'
struct __CFString *_get_kUTTypeUTF8PlainText(void);

// getter for constant 'kUTTypeVCard'
struct __CFString *_get_kUTTypeVCard(void);

// getter for constant 'kUTTypeVersionKey'
struct __CFString *_get_kUTTypeVersionKey(void);

// getter for constant 'kUTTypeVideo'
struct __CFString *_get_kUTTypeVideo(void);

// getter for constant 'kUTTypeVolume'
struct __CFString *_get_kUTTypeVolume(void);

// getter for constant 'kUTTypeWebArchive'
struct __CFString *_get_kUTTypeWebArchive(void);

// getter for constant 'kUTTypeXML'
struct __CFString *_get_kUTTypeXML(void);

enum { kLSAcceptAllowLoginUI = 2 };

enum { kLSAcceptDefault = 1 };

enum { kLSAppDoesNotClaimTypeErr = -10820 };

enum { kLSAppDoesNotSupportSchemeWarning = -10821 };

enum { kLSAppInTrashErr = -10660 };

enum { kLSApplicationNotFoundErr = -10814 };

enum { kLSCannotSetInfoErr = -10823 };

enum { kLSDataErr = -10817 };

enum { kLSDataTooOldErr = -10816 };

enum { kLSDataUnavailableErr = -10813 };

enum { kLSExecutableIncorrectFormat = -10661 };

enum { kLSHandlerOptionsDefault = 0 };

enum { kLSHandlerOptionsIgnoreCreator = 1 };

enum { kLSIncompatibleSystemVersionErr = -10825 };

enum { kLSInitializeDefaults = 1 };

enum { kLSInvalidExtensionIndex = 4294967295 };

enum { kLSItemInfoAppIsScriptable = 2048 };

enum { kLSItemInfoAppPrefersClassic = 1024 };

enum { kLSItemInfoAppPrefersNative = 512 };

enum { kLSItemInfoExtensionIsHidden = 1048576 };

enum { kLSItemInfoIsAliasFile = 16 };

enum { kLSItemInfoIsApplication = 4 };

enum { kLSItemInfoIsClassicApp = 256 };

enum { kLSItemInfoIsContainer = 8 };

enum { kLSItemInfoIsInvisible = 64 };

enum { kLSItemInfoIsNativeApp = 128 };

enum { kLSItemInfoIsPackage = 2 };

enum { kLSItemInfoIsPlainFile = 1 };

enum { kLSItemInfoIsSymlink = 32 };

enum { kLSItemInfoIsVolume = 4096 };

enum { kLSLaunchAndDisplayErrors = 64 };

enum { kLSLaunchAndHide = 1048576 };

enum { kLSLaunchAndHideOthers = 2097152 };

enum { kLSLaunchAndPrint = 2 };

enum { kLSLaunchAsync = 65536 };

enum { kLSLaunchDefaults = 1 };

enum { kLSLaunchDontAddToRecents = 256 };

enum { kLSLaunchDontSwitch = 512 };

enum { kLSLaunchHasUntrustedContents = 4194304 };

enum { kLSLaunchInClassic = 262144 };

enum { kLSLaunchInProgressErr = -10818 };

enum { kLSLaunchInhibitBGOnly = 128 };

enum { kLSLaunchNewInstance = 524288 };

enum { kLSLaunchNoParams = 2048 };

enum { kLSLaunchReserved2 = 4 };

enum { kLSLaunchReserved3 = 8 };

enum { kLSLaunchReserved4 = 16 };

enum { kLSLaunchReserved5 = 32 };

enum { kLSLaunchStartClassic = 131072 };

enum { kLSMinCatInfoBitmap = 6154 };

enum { kLSMultipleSessionsNotSupportedErr = -10829 };

enum { kLSNoClassicEnvironmentErr = -10828 };

enum { kLSNoExecutableErr = -10827 };

enum { kLSNoLaunchPermissionErr = -10826 };

enum { kLSNoRegistrationInfoErr = -10824 };

enum { kLSNotAnApplicationErr = -10811 };

enum { kLSNotInitializedErr = -10812 };

enum { kLSNotRegisteredErr = -10819 };

enum { kLSRequestAllFlags = 16 };

enum { kLSRequestAllInfo = 4294967295 };

enum { kLSRequestAppTypeFlags = 8 };

enum { kLSRequestBasicFlagsOnly = 4 };

enum { kLSRequestExtension = 1 };

enum { kLSRequestExtensionFlagsOnly = 64 };

enum { kLSRequestIconAndKind = 32 };

enum { kLSRequestTypeCreator = 2 };

enum { kLSRolesAll = 4294967295 };

enum { kLSRolesEditor = 4 };

enum { kLSRolesNone = 1 };

enum { kLSRolesShell = 8 };

enum { kLSRolesViewer = 2 };

enum { kLSServerCommunicationErr = -10822 };

enum { kLSUnknownCreator = 0 };

enum { kLSUnknownErr = -10810 };

enum { kLSUnknownKindID = 0 };

enum { kLSUnknownType = 0 };

enum { kLSUnknownTypeErr = -10815 };

// function 'LSCanURLAcceptURL'
long LSCanURLAcceptURL(struct __CFURL *inItemURL, struct __CFURL *inTargetURL, unsigned long inRoleMask, unsigned long inFlags, Boolean* outAcceptsItem);

// function 'LSCopyAllHandlersForURLScheme'
struct __CFArray *LSCopyAllHandlersForURLScheme(struct __CFString *inURLScheme);

// function 'LSCopyAllRoleHandlersForContentType'
struct __CFArray *LSCopyAllRoleHandlersForContentType(struct __CFString *inContentType, unsigned long inRole);

// function 'LSCopyApplicationForMIMEType'
long LSCopyApplicationForMIMEType(struct __CFString *inMIMEType, unsigned long inRoleMask, struct __CFURL **outAppURL);

// function 'LSCopyApplicationURLsForURL'
struct __CFArray *LSCopyApplicationURLsForURL(struct __CFURL *inURL, unsigned long inRoleMask);

// function 'LSCopyDefaultHandlerForURLScheme'
struct __CFString *LSCopyDefaultHandlerForURLScheme(struct __CFString *inURLScheme);

// function 'LSCopyDefaultRoleHandlerForContentType'
struct __CFString *LSCopyDefaultRoleHandlerForContentType(struct __CFString *inContentType, unsigned long inRole);

// function 'LSCopyDisplayNameForURL'
long LSCopyDisplayNameForURL(struct __CFURL *inURL, struct __CFString **outDisplayName);

// function 'LSCopyItemInfoForURL'
long LSCopyItemInfoForURL(struct __CFURL *inURL, unsigned long inWhichInfo, struct LSItemInfoRecord *outItemInfo);

// function 'LSCopyKindStringForMIMEType'
long LSCopyKindStringForMIMEType(struct __CFString *inMIMEType, struct __CFString **outKindString);

// function 'LSCopyKindStringForTypeInfo'
long LSCopyKindStringForTypeInfo(unsigned long inType, unsigned long inCreator, struct __CFString *inExtension, struct __CFString **outKindString);

// function 'LSCopyKindStringForURL'
long LSCopyKindStringForURL(struct __CFURL *inURL, struct __CFString **outKindString);

// function 'LSGetExtensionInfo'
long LSGetExtensionInfo(unsigned long inNameLen, const unsigned short* inNameBuffer, unsigned int *outExtStartIndex);

// function 'LSGetHandlerOptionsForContentType'
unsigned long LSGetHandlerOptionsForContentType(struct __CFString *inContentType);

// function 'LSInit'
long LSInit(unsigned long inFlags);

// function 'LSOpenApplication'
long LSOpenApplication(const struct LSApplicationParameters* appParams, struct ProcessSerialNumber *outPSN);

// function 'LSOpenCFURLRef'
long LSOpenCFURLRef(struct __CFURL *inURL, struct __CFURL **outLaunchedURL);

// function 'LSOpenFromURLSpec'
long LSOpenFromURLSpec(const struct LSLaunchURLSpec* inLaunchSpec, struct __CFURL **outLaunchedURL);

// function 'LSOpenURLsWithRole'
long LSOpenURLsWithRole(struct __CFArray *inURLs, unsigned long inRole, const struct AEKeyDesc* inAEParam, const struct LSApplicationParameters* inAppParams, struct ProcessSerialNumber *outPSNs, long inMaxPSNCount);

// function 'LSRegisterURL'
long LSRegisterURL(struct __CFURL *inURL, Boolean inUpdate);

// function 'LSSetDefaultHandlerForURLScheme'
long LSSetDefaultHandlerForURLScheme(struct __CFString *inURLScheme, struct __CFString *inHandlerBundleID);

// function 'LSSetDefaultRoleHandlerForContentType'
long LSSetDefaultRoleHandlerForContentType(struct __CFString *inContentType, unsigned long inRole, struct __CFString *inHandlerBundleID);

// function 'LSSetExtensionHiddenForURL'
long LSSetExtensionHiddenForURL(struct __CFURL *inURL, Boolean inHide);

// function 'LSSetHandlerOptionsForContentType'
long LSSetHandlerOptionsForContentType(struct __CFString *inContentType, unsigned long inOptions);

// function 'LSTerm'
long LSTerm(void);

// function 'UTCreateStringForOSType'
struct __CFString *UTCreateStringForOSType(unsigned long inOSType);

// function 'UTGetOSTypeFromString'
unsigned long UTGetOSTypeFromString(struct __CFString *inString);

// function 'UTTypeConformsTo'
Boolean UTTypeConformsTo(struct __CFString *inUTI, struct __CFString *inConformsToUTI);

// function 'UTTypeCopyDeclaration'
struct __CFDictionary *UTTypeCopyDeclaration(struct __CFString *inUTI);

// function 'UTTypeCopyDeclaringBundleURL'
struct __CFURL *UTTypeCopyDeclaringBundleURL(struct __CFString *inUTI);

// function 'UTTypeCopyDescription'
struct __CFString *UTTypeCopyDescription(struct __CFString *inUTI);

// function 'UTTypeCopyPreferredTagWithClass'
struct __CFString *UTTypeCopyPreferredTagWithClass(struct __CFString *inUTI, struct __CFString *inTagClass);

// function 'UTTypeCreateAllIdentifiersForTag'
struct __CFArray *UTTypeCreateAllIdentifiersForTag(struct __CFString *inTagClass, struct __CFString *inTag, struct __CFString *inConformingToUTI);

// function 'UTTypeCreatePreferredIdentifierForTag'
struct __CFString *UTTypeCreatePreferredIdentifierForTag(struct __CFString *inTagClass, struct __CFString *inTag, struct __CFString *inConformingToUTI);

// function 'UTTypeEqual'
Boolean UTTypeEqual(struct __CFString *inUTI1, struct __CFString *inUTI2);


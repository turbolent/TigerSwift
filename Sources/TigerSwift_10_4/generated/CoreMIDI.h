// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'MIDIClientRef'
typedef struct OpaqueMIDIClient *MIDIClientRef;

// CoreFoundation type 'MIDIDeviceRef'
typedef struct OpaqueMIDIDevice *MIDIDeviceRef;

// CoreFoundation type 'MIDIEndpointRef'
typedef struct OpaqueMIDIEndpoint *MIDIEndpointRef;

// CoreFoundation type 'MIDIEntityRef'
typedef struct OpaqueMIDIEntity *MIDIEntityRef;

// CoreFoundation type 'MIDIObjectRef'
typedef void *MIDIObjectRef;

// CoreFoundation type 'MIDIPortRef'
typedef struct OpaqueMIDIPort *MIDIPortRef;

// CoreFoundation type 'MIDISetupRef'
typedef struct OpaqueMIDISetup *MIDISetupRef;

// CoreFoundation type 'MIDIThruConnectionRef'
typedef struct OpaqueMIDIThruConnection *MIDIThruConnectionRef;

// struct 'MIDIIOErrorNotification'
struct MIDIIOErrorNotification {
    int messageID;
    unsigned int messageSize;
    struct OpaqueMIDIDevice *driverDevice;
    int errorCode;
};

// struct 'MIDIObjectPropertyChangeNotification'
struct MIDIObjectPropertyChangeNotification {
    int messageID;
    unsigned int messageSize;
    void *object;
    int objectType;
    struct __CFString *propertyName;
};

// struct 'MIDIThruConnectionEndpoint'
struct MIDIThruConnectionEndpoint {
    struct OpaqueMIDIEndpoint *endpointRef;
    int uniqueID;
};

// struct 'MIDITransform'
struct MIDITransform {
    unsigned short transform;
    short param;
};

// struct 'MIDINotification'
struct MIDINotification {
    int messageID;
    unsigned int messageSize;
};

// struct 'MIDIObjectAddRemoveNotification'
struct MIDIObjectAddRemoveNotification {
    int messageID;
    unsigned int messageSize;
    void *parent;
    int parentType;
    void *child;
    int childType;
};

// struct 'MIDIControlTransform'
struct MIDIControlTransform {
    unsigned char controlType;
    unsigned char remappedControlType;
    unsigned short controlNumber;
    unsigned short transform;
    short param;
};

// getter for constant 'kMIDIPropertyAdvanceScheduleTimeMuSec'
struct __CFString *_get_kMIDIPropertyAdvanceScheduleTimeMuSec(void);

// getter for constant 'kMIDIPropertyCanRoute'
struct __CFString *_get_kMIDIPropertyCanRoute(void);

// getter for constant 'kMIDIPropertyConnectionUniqueID'
struct __CFString *_get_kMIDIPropertyConnectionUniqueID(void);

// getter for constant 'kMIDIPropertyDeviceID'
struct __CFString *_get_kMIDIPropertyDeviceID(void);

// getter for constant 'kMIDIPropertyDisplayName'
struct __CFString *_get_kMIDIPropertyDisplayName(void);

// getter for constant 'kMIDIPropertyDriverDeviceEditorApp'
struct __CFString *_get_kMIDIPropertyDriverDeviceEditorApp(void);

// getter for constant 'kMIDIPropertyDriverOwner'
struct __CFString *_get_kMIDIPropertyDriverOwner(void);

// getter for constant 'kMIDIPropertyDriverVersion'
struct __CFString *_get_kMIDIPropertyDriverVersion(void);

// getter for constant 'kMIDIPropertyFactoryPatchNameFile'
struct __CFString *_get_kMIDIPropertyFactoryPatchNameFile(void);

// getter for constant 'kMIDIPropertyImage'
struct __CFString *_get_kMIDIPropertyImage(void);

// getter for constant 'kMIDIPropertyIsBroadcast'
struct __CFString *_get_kMIDIPropertyIsBroadcast(void);

// getter for constant 'kMIDIPropertyIsDrumMachine'
struct __CFString *_get_kMIDIPropertyIsDrumMachine(void);

// getter for constant 'kMIDIPropertyIsEffectUnit'
struct __CFString *_get_kMIDIPropertyIsEffectUnit(void);

// getter for constant 'kMIDIPropertyIsEmbeddedEntity'
struct __CFString *_get_kMIDIPropertyIsEmbeddedEntity(void);

// getter for constant 'kMIDIPropertyIsMixer'
struct __CFString *_get_kMIDIPropertyIsMixer(void);

// getter for constant 'kMIDIPropertyIsSampler'
struct __CFString *_get_kMIDIPropertyIsSampler(void);

// getter for constant 'kMIDIPropertyManufacturer'
struct __CFString *_get_kMIDIPropertyManufacturer(void);

// getter for constant 'kMIDIPropertyMaxReceiveChannels'
struct __CFString *_get_kMIDIPropertyMaxReceiveChannels(void);

// getter for constant 'kMIDIPropertyMaxSysExSpeed'
struct __CFString *_get_kMIDIPropertyMaxSysExSpeed(void);

// getter for constant 'kMIDIPropertyMaxTransmitChannels'
struct __CFString *_get_kMIDIPropertyMaxTransmitChannels(void);

// getter for constant 'kMIDIPropertyModel'
struct __CFString *_get_kMIDIPropertyModel(void);

// getter for constant 'kMIDIPropertyName'
struct __CFString *_get_kMIDIPropertyName(void);

// getter for constant 'kMIDIPropertyNameConfiguration'
struct __CFString *_get_kMIDIPropertyNameConfiguration(void);

// getter for constant 'kMIDIPropertyOffline'
struct __CFString *_get_kMIDIPropertyOffline(void);

// getter for constant 'kMIDIPropertyPanDisruptsStereo'
struct __CFString *_get_kMIDIPropertyPanDisruptsStereo(void);

// getter for constant 'kMIDIPropertyPrivate'
struct __CFString *_get_kMIDIPropertyPrivate(void);

// getter for constant 'kMIDIPropertyReceiveChannels'
struct __CFString *_get_kMIDIPropertyReceiveChannels(void);

// getter for constant 'kMIDIPropertyReceivesBankSelectLSB'
struct __CFString *_get_kMIDIPropertyReceivesBankSelectLSB(void);

// getter for constant 'kMIDIPropertyReceivesBankSelectMSB'
struct __CFString *_get_kMIDIPropertyReceivesBankSelectMSB(void);

// getter for constant 'kMIDIPropertyReceivesClock'
struct __CFString *_get_kMIDIPropertyReceivesClock(void);

// getter for constant 'kMIDIPropertyReceivesMTC'
struct __CFString *_get_kMIDIPropertyReceivesMTC(void);

// getter for constant 'kMIDIPropertyReceivesNotes'
struct __CFString *_get_kMIDIPropertyReceivesNotes(void);

// getter for constant 'kMIDIPropertyReceivesProgramChanges'
struct __CFString *_get_kMIDIPropertyReceivesProgramChanges(void);

// getter for constant 'kMIDIPropertySingleRealtimeEntity'
struct __CFString *_get_kMIDIPropertySingleRealtimeEntity(void);

// getter for constant 'kMIDIPropertySupportsGeneralMIDI'
struct __CFString *_get_kMIDIPropertySupportsGeneralMIDI(void);

// getter for constant 'kMIDIPropertySupportsMMC'
struct __CFString *_get_kMIDIPropertySupportsMMC(void);

// getter for constant 'kMIDIPropertySupportsShowControl'
struct __CFString *_get_kMIDIPropertySupportsShowControl(void);

// getter for constant 'kMIDIPropertyTransmitChannels'
struct __CFString *_get_kMIDIPropertyTransmitChannels(void);

// getter for constant 'kMIDIPropertyTransmitsBankSelectLSB'
struct __CFString *_get_kMIDIPropertyTransmitsBankSelectLSB(void);

// getter for constant 'kMIDIPropertyTransmitsBankSelectMSB'
struct __CFString *_get_kMIDIPropertyTransmitsBankSelectMSB(void);

// getter for constant 'kMIDIPropertyTransmitsClock'
struct __CFString *_get_kMIDIPropertyTransmitsClock(void);

// getter for constant 'kMIDIPropertyTransmitsMTC'
struct __CFString *_get_kMIDIPropertyTransmitsMTC(void);

// getter for constant 'kMIDIPropertyTransmitsNotes'
struct __CFString *_get_kMIDIPropertyTransmitsNotes(void);

// getter for constant 'kMIDIPropertyTransmitsProgramChanges'
struct __CFString *_get_kMIDIPropertyTransmitsProgramChanges(void);

// getter for constant 'kMIDIPropertyUniqueID'
struct __CFString *_get_kMIDIPropertyUniqueID(void);

// getter for constant 'kMIDIPropertyUserPatchNameFile'
struct __CFString *_get_kMIDIPropertyUserPatchNameFile(void);

enum { kMIDIControlType_14Bit = 1 };

enum { kMIDIControlType_14BitNRPN = 5 };

enum { kMIDIControlType_14BitRPN = 3 };

enum { kMIDIControlType_7Bit = 0 };

enum { kMIDIControlType_7BitNRPN = 4 };

enum { kMIDIControlType_7BitRPN = 2 };

enum { kMIDIIDNotUnique = -10843 };

enum { kMIDIInvalidClient = -10830 };

enum { kMIDIInvalidPort = -10831 };

enum { kMIDIInvalidUniqueID = 0 };

enum { kMIDIMessageSendErr = -10838 };

enum { kMIDIMsgIOError = 7 };

enum { kMIDIMsgObjectAdded = 2 };

enum { kMIDIMsgObjectRemoved = 3 };

enum { kMIDIMsgPropertyChanged = 4 };

enum { kMIDIMsgSerialPortOwnerChanged = 6 };

enum { kMIDIMsgSetupChanged = 1 };

enum { kMIDIMsgThruConnectionsChanged = 5 };

enum { kMIDINoConnection = -10833 };

enum { kMIDINoCurrentSetup = -10837 };

enum { kMIDIObjectNotFound = -10842 };

enum { kMIDIObjectType_Destination = 3 };

enum { kMIDIObjectType_Device = 0 };

enum { kMIDIObjectType_Entity = 1 };

enum { kMIDIObjectType_ExternalDestination = 19 };

enum { kMIDIObjectType_ExternalDevice = 16 };

enum { kMIDIObjectType_ExternalEntity = 17 };

enum { kMIDIObjectType_ExternalMask = 16 };

enum { kMIDIObjectType_ExternalSource = 18 };

enum { kMIDIObjectType_Other = -1 };

enum { kMIDIObjectType_Source = 2 };

enum { kMIDIServerStartErr = -10839 };

enum { kMIDISetupFormatErr = -10840 };

enum { kMIDIThruConnection_MaxEndpoints = 8 };

enum { kMIDITransform_Add = 8 };

enum { kMIDITransform_FilterOut = 1 };

enum { kMIDITransform_MapControl = 2 };

enum { kMIDITransform_MapValue = 12 };

enum { kMIDITransform_MaxValue = 11 };

enum { kMIDITransform_MinValue = 10 };

enum { kMIDITransform_None = 0 };

enum { kMIDITransform_Scale = 9 };

enum { kMIDIUnknownEndpoint = -10834 };

enum { kMIDIUnknownProperty = -10835 };

enum { kMIDIWrongEndpointType = -10832 };

enum { kMIDIWrongPropertyType = -10836 };

enum { kMIDIWrongThread = -10841 };

// function 'MIDIClientDispose'
long MIDIClientDispose(struct OpaqueMIDIClient *client);

// function 'MIDIDeviceAddEntity'
long MIDIDeviceAddEntity(struct OpaqueMIDIDevice *device, struct __CFString *name, Boolean embedded, unsigned long numSourceEndpoints, unsigned long numDestinationEndpoints, struct OpaqueMIDIEntity **newEntity);

// function 'MIDIDeviceGetEntity'
struct OpaqueMIDIEntity *MIDIDeviceGetEntity(struct OpaqueMIDIDevice *device, unsigned long entityIndex0);

// function 'MIDIDeviceGetNumberOfEntities'
unsigned long MIDIDeviceGetNumberOfEntities(struct OpaqueMIDIDevice *device);

// function 'MIDIDeviceRemoveEntity'
long MIDIDeviceRemoveEntity(struct OpaqueMIDIDevice *device, struct OpaqueMIDIEntity *entity);

// function 'MIDIEndpointDispose'
long MIDIEndpointDispose(struct OpaqueMIDIEndpoint *endpt);

// function 'MIDIEndpointGetEntity'
long MIDIEndpointGetEntity(struct OpaqueMIDIEndpoint *inEndpoint, struct OpaqueMIDIEntity **outEntity);

// function 'MIDIEntityAddOrRemoveEndpoints'
long MIDIEntityAddOrRemoveEndpoints(struct OpaqueMIDIEntity *entity, unsigned long numSourceEndpoints, unsigned long numDestinationEndpoints);

// function 'MIDIEntityGetDestination'
struct OpaqueMIDIEndpoint *MIDIEntityGetDestination(struct OpaqueMIDIEntity *entity, unsigned long destIndex0);

// function 'MIDIEntityGetDevice'
long MIDIEntityGetDevice(struct OpaqueMIDIEntity *inEntity, struct OpaqueMIDIDevice **outDevice);

// function 'MIDIEntityGetNumberOfDestinations'
unsigned long MIDIEntityGetNumberOfDestinations(struct OpaqueMIDIEntity *entity);

// function 'MIDIEntityGetNumberOfSources'
unsigned long MIDIEntityGetNumberOfSources(struct OpaqueMIDIEntity *entity);

// function 'MIDIEntityGetSource'
struct OpaqueMIDIEndpoint *MIDIEntityGetSource(struct OpaqueMIDIEntity *entity, unsigned long sourceIndex0);

// function 'MIDIExternalDeviceCreate'
long MIDIExternalDeviceCreate(struct __CFString *name, struct __CFString *manufacturer, struct __CFString *model, struct OpaqueMIDIDevice **outDevice);

// function 'MIDIFlushOutput'
long MIDIFlushOutput(struct OpaqueMIDIEndpoint *dest);

// function 'MIDIGetDestination'
struct OpaqueMIDIEndpoint *MIDIGetDestination(unsigned long destIndex0);

// function 'MIDIGetDevice'
struct OpaqueMIDIDevice *MIDIGetDevice(unsigned long deviceIndex0);

// function 'MIDIGetExternalDevice'
struct OpaqueMIDIDevice *MIDIGetExternalDevice(unsigned long deviceIndex0);

// function 'MIDIGetNumberOfDestinations'
unsigned long MIDIGetNumberOfDestinations(void);

// function 'MIDIGetNumberOfDevices'
unsigned long MIDIGetNumberOfDevices(void);

// function 'MIDIGetNumberOfExternalDevices'
unsigned long MIDIGetNumberOfExternalDevices(void);

// function 'MIDIGetNumberOfSources'
unsigned long MIDIGetNumberOfSources(void);

// function 'MIDIGetSerialPortDrivers'
long MIDIGetSerialPortDrivers(struct __CFArray **outDriverNames);

// function 'MIDIGetSerialPortOwner'
long MIDIGetSerialPortOwner(struct __CFString *portName, struct __CFString **outDriverName);

// function 'MIDIGetSource'
struct OpaqueMIDIEndpoint *MIDIGetSource(unsigned long sourceIndex0);

// function 'MIDIObjectFindByUniqueID'
long MIDIObjectFindByUniqueID(long inUniqueID, void **outObject, int *outObjectType);

// function 'MIDIObjectGetDataProperty'
long MIDIObjectGetDataProperty(id obj, struct __CFString *propertyID, struct __CFData **outData);

// function 'MIDIObjectGetDictionaryProperty'
long MIDIObjectGetDictionaryProperty(id obj, struct __CFString *propertyID, struct __CFDictionary **outDict);

// function 'MIDIObjectGetIntegerProperty'
long MIDIObjectGetIntegerProperty(id obj, struct __CFString *propertyID, int *outValue);

// function 'MIDIObjectGetProperties'
long MIDIObjectGetProperties(id obj, void **outProperties, Boolean deep);

// function 'MIDIObjectGetStringProperty'
long MIDIObjectGetStringProperty(id obj, struct __CFString *propertyID, struct __CFString **str);

// function 'MIDIObjectRemoveProperty'
long MIDIObjectRemoveProperty(id obj, struct __CFString *propertyID);

// function 'MIDIObjectSetDataProperty'
long MIDIObjectSetDataProperty(id obj, struct __CFString *propertyID, struct __CFData *data);

// function 'MIDIObjectSetDictionaryProperty'
long MIDIObjectSetDictionaryProperty(id obj, struct __CFString *propertyID, struct __CFDictionary *data);

// function 'MIDIObjectSetIntegerProperty'
long MIDIObjectSetIntegerProperty(id obj, struct __CFString *propertyID, long value);

// function 'MIDIObjectSetStringProperty'
long MIDIObjectSetStringProperty(id obj, struct __CFString *propertyID, struct __CFString *str);

// function 'MIDIOutputPortCreate'
long MIDIOutputPortCreate(struct OpaqueMIDIClient *client, struct __CFString *portName, struct OpaqueMIDIPort **outPort);

// function 'MIDIPortConnectSource'
long MIDIPortConnectSource(struct OpaqueMIDIPort *port, struct OpaqueMIDIEndpoint *source, void *connRefCon);

// function 'MIDIPortDisconnectSource'
long MIDIPortDisconnectSource(struct OpaqueMIDIPort *port, struct OpaqueMIDIEndpoint *source);

// function 'MIDIPortDispose'
long MIDIPortDispose(struct OpaqueMIDIPort *port);

// function 'MIDIRestart'
long MIDIRestart(void);

// function 'MIDISetSerialPortOwner'
long MIDISetSerialPortOwner(struct __CFString *portName, struct __CFString *driverName);

// function 'MIDISetupAddDevice'
long MIDISetupAddDevice(struct OpaqueMIDIDevice *device);

// function 'MIDISetupAddExternalDevice'
long MIDISetupAddExternalDevice(struct OpaqueMIDIDevice *device);

// function 'MIDISetupCreate'
long MIDISetupCreate(struct OpaqueMIDISetup **outSetup);

// function 'MIDISetupDispose'
long MIDISetupDispose(struct OpaqueMIDISetup *setup);

// function 'MIDISetupFromData'
long MIDISetupFromData(struct __CFData *data, struct OpaqueMIDISetup **outSetup);

// function 'MIDISetupGetCurrent'
long MIDISetupGetCurrent(struct OpaqueMIDISetup **outSetup);

// function 'MIDISetupInstall'
long MIDISetupInstall(struct OpaqueMIDISetup *setup);

// function 'MIDISetupRemoveDevice'
long MIDISetupRemoveDevice(struct OpaqueMIDIDevice *device);

// function 'MIDISetupRemoveExternalDevice'
long MIDISetupRemoveExternalDevice(struct OpaqueMIDIDevice *device);

// function 'MIDISetupToData'
long MIDISetupToData(struct OpaqueMIDISetup *setup, struct __CFData **outData);

// function 'MIDISourceCreate'
long MIDISourceCreate(struct OpaqueMIDIClient *client, struct __CFString *name, struct OpaqueMIDIEndpoint **outSrc);

// function 'MIDIThruConnectionCreate'
long MIDIThruConnectionCreate(struct __CFString *inPersistentOwnerID, struct __CFData *inConnectionParams, struct OpaqueMIDIThruConnection **outConnection);

// function 'MIDIThruConnectionDispose'
long MIDIThruConnectionDispose(struct OpaqueMIDIThruConnection *connection);

// function 'MIDIThruConnectionFind'
long MIDIThruConnectionFind(struct __CFString *inPersistentOwnerID, struct __CFData **outConnectionList);

// function 'MIDIThruConnectionGetParams'
long MIDIThruConnectionGetParams(struct OpaqueMIDIThruConnection *connection, struct __CFData **outConnectionParams);

// function 'MIDIThruConnectionSetParams'
long MIDIThruConnectionSetParams(struct OpaqueMIDIThruConnection *connection, struct __CFData *inConnectionParams);


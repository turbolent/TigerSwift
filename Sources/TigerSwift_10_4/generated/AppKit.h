// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// opaque 'NSModalSession'
typedef struct _NSModalSession *NSModalSession;

// opaque 'NSOpenGLContextAuxiliary'
typedef struct _CGLContextObject *NSOpenGLContextAuxiliary;

// opaque 'NSOpenGLPixelFormatAuxiliary'
typedef struct _CGLPixelFormatObject *NSOpenGLPixelFormatAuxiliary;

// opaque 'NSScreenAuxiliaryOpaque'
typedef struct NSScreenAuxiliary *NSScreenAuxiliaryOpaque;

// opaque '_NSProgressIndicatorThreadInfo'
typedef struct __NSProgressIndicatorThreadInfo *_NSProgressIndicatorThreadInfo;

// opaque '_NSThreadPrivate'
typedef struct NSThreadPrivate *_NSThreadPrivate;

// class 'CIColor'
typedef struct objc_object CIColor;

// class 'CIImage'
typedef struct objc_object CIImage;

// class 'NSATSTypesetter'
typedef struct objc_object NSATSTypesetter;

// class 'NSActionCell'
typedef struct objc_object NSActionCell;

// class 'NSAffineTransform'
typedef struct objc_object NSAffineTransform;

// class 'NSAlert'
typedef struct objc_object NSAlert;

// class 'NSAnimation'
typedef struct objc_object NSAnimation;

// class 'NSAppleScript'
typedef struct objc_object NSAppleScript;

// class 'NSApplication'
typedef struct objc_object NSApplication;

// class 'NSArrayController'
typedef struct objc_object NSArrayController;

// class 'NSAttributedString'
typedef struct objc_object NSAttributedString;

// class 'NSBezierPath'
typedef struct objc_object NSBezierPath;

// class 'NSBitmapImageRep'
typedef struct objc_object NSBitmapImageRep;

// class 'NSBox'
typedef struct objc_object NSBox;

// class 'NSBrowser'
typedef struct objc_object NSBrowser;

// class 'NSBrowserCell'
typedef struct objc_object NSBrowserCell;

// class 'NSBundle'
typedef struct objc_object NSBundle;

// class 'NSButton'
typedef struct objc_object NSButton;

// class 'NSButtonCell'
typedef struct objc_object NSButtonCell;

// class 'NSCIImageRep'
typedef struct objc_object NSCIImageRep;

// class 'NSCachedImageRep'
typedef struct objc_object NSCachedImageRep;

// class 'NSCell'
typedef struct objc_object NSCell;

// class 'NSClipView'
typedef struct objc_object NSClipView;

// class 'NSCoder'
typedef struct objc_object NSCoder;

// class 'NSColor'
typedef struct objc_object NSColor;

// class 'NSColorList'
typedef struct objc_object NSColorList;

// class 'NSColorPanel'
typedef struct objc_object NSColorPanel;

// class 'NSColorPicker'
typedef struct objc_object NSColorPicker;

// class 'NSColorSpace'
typedef struct objc_object NSColorSpace;

// class 'NSColorWell'
typedef struct objc_object NSColorWell;

// class 'NSComboBox'
typedef struct objc_object NSComboBox;

// class 'NSComboBoxCell'
typedef struct objc_object NSComboBoxCell;

// class 'NSControl'
typedef struct objc_object NSControl;

// class 'NSController'
typedef struct objc_object NSController;

// class 'NSCursor'
typedef struct objc_object NSCursor;

// class 'NSCustomImageRep'
typedef struct objc_object NSCustomImageRep;

// class 'NSDatePicker'
typedef struct objc_object NSDatePicker;

// class 'NSDatePickerCell'
typedef struct objc_object NSDatePickerCell;

// class 'NSDocument'
typedef struct objc_object NSDocument;

// class 'NSDocumentController'
typedef struct objc_object NSDocumentController;

// class 'NSDrawer'
typedef struct objc_object NSDrawer;

// class 'NSEPSImageRep'
typedef struct objc_object NSEPSImageRep;

// class 'NSEvent'
typedef struct objc_object NSEvent;

// class 'NSFileWrapper'
typedef struct objc_object NSFileWrapper;

// class 'NSFont'
typedef struct objc_object NSFont;

// class 'NSFontDescriptor'
typedef struct objc_object NSFontDescriptor;

// class 'NSFontManager'
typedef struct objc_object NSFontManager;

// class 'NSFontPanel'
typedef struct objc_object NSFontPanel;

// class 'NSForm'
typedef struct objc_object NSForm;

// class 'NSFormCell'
typedef struct objc_object NSFormCell;

// class 'NSGlyphGenerator'
typedef struct objc_object NSGlyphGenerator;

// class 'NSGlyphInfo'
typedef struct objc_object NSGlyphInfo;

// class 'NSGraphicsContext'
typedef struct objc_object NSGraphicsContext;

// class 'NSHelpManager'
typedef struct objc_object NSHelpManager;

// class 'NSImage'
typedef struct objc_object NSImage;

// class 'NSImageCell'
typedef struct objc_object NSImageCell;

// class 'NSImageRep'
typedef struct objc_object NSImageRep;

// class 'NSImageView'
typedef struct objc_object NSImageView;

// class 'NSInputManager'
typedef struct objc_object NSInputManager;

// class 'NSInputServer'
typedef struct objc_object NSInputServer;

// class 'NSLayoutManager'
typedef struct objc_object NSLayoutManager;

// class 'NSLevelIndicator'
typedef struct objc_object NSLevelIndicator;

// class 'NSLevelIndicatorCell'
typedef struct objc_object NSLevelIndicatorCell;

// class 'NSMatrix'
typedef struct objc_object NSMatrix;

// class 'NSMenu'
typedef struct objc_object NSMenu;

// class 'NSMenuItem'
typedef struct objc_object NSMenuItem;

// class 'NSMenuItemCell'
typedef struct objc_object NSMenuItemCell;

// class 'NSMovieView'
typedef struct objc_object NSMovieView;

// class 'NSMutableAttributedString'
typedef struct objc_object NSMutableAttributedString;

// class 'NSMutableParagraphStyle'
typedef struct objc_object NSMutableParagraphStyle;

// class 'NSNib'
typedef struct objc_object NSNib;

// class 'NSNibConnector'
typedef struct objc_object NSNibConnector;

// class 'NSNibControlConnector'
typedef struct objc_object NSNibControlConnector;

// class 'NSNibOutletConnector'
typedef struct objc_object NSNibOutletConnector;

// class 'NSObject'
typedef struct objc_object NSObject;

// class 'NSObjectController'
typedef struct objc_object NSObjectController;

// class 'NSOpenGLContext'
typedef struct objc_object NSOpenGLContext;

// class 'NSOpenGLPixelBuffer'
typedef struct objc_object NSOpenGLPixelBuffer;

// class 'NSOpenGLPixelFormat'
typedef struct objc_object NSOpenGLPixelFormat;

// class 'NSOpenGLView'
typedef struct objc_object NSOpenGLView;

// class 'NSOpenPanel'
typedef struct objc_object NSOpenPanel;

// class 'NSOutlineView'
typedef struct objc_object NSOutlineView;

// class 'NSPDFImageRep'
typedef struct objc_object NSPDFImageRep;

// class 'NSPICTImageRep'
typedef struct objc_object NSPICTImageRep;

// class 'NSPageLayout'
typedef struct objc_object NSPageLayout;

// class 'NSPanel'
typedef struct objc_object NSPanel;

// class 'NSParagraphStyle'
typedef struct objc_object NSParagraphStyle;

// class 'NSPasteboard'
typedef struct objc_object NSPasteboard;

// class 'NSPersistentDocument'
typedef struct objc_object NSPersistentDocument;

// class 'NSPopUpButton'
typedef struct objc_object NSPopUpButton;

// class 'NSPopUpButtonCell'
typedef struct objc_object NSPopUpButtonCell;

// class 'NSPrintInfo'
typedef struct objc_object NSPrintInfo;

// class 'NSPrintOperation'
typedef struct objc_object NSPrintOperation;

// class 'NSPrintPanel'
typedef struct objc_object NSPrintPanel;

// class 'NSPrinter'
typedef struct objc_object NSPrinter;

// class 'NSProgressIndicator'
typedef struct objc_object NSProgressIndicator;

// class 'NSQuickDrawView'
typedef struct objc_object NSQuickDrawView;

// class 'NSResponder'
typedef struct objc_object NSResponder;

// class 'NSRulerMarker'
typedef struct objc_object NSRulerMarker;

// class 'NSRulerView'
typedef struct objc_object NSRulerView;

// class 'NSSavePanel'
typedef struct objc_object NSSavePanel;

// class 'NSScreen'
typedef struct objc_object NSScreen;

// class 'NSScrollView'
typedef struct objc_object NSScrollView;

// class 'NSScroller'
typedef struct objc_object NSScroller;

// class 'NSSearchField'
typedef struct objc_object NSSearchField;

// class 'NSSearchFieldCell'
typedef struct objc_object NSSearchFieldCell;

// class 'NSSecureTextFieldCell'
typedef struct objc_object NSSecureTextFieldCell;

// class 'NSSegmentedCell'
typedef struct objc_object NSSegmentedCell;

// class 'NSSegmentedControl'
typedef struct objc_object NSSegmentedControl;

// class 'NSShadow'
typedef struct objc_object NSShadow;

// class 'NSSlider'
typedef struct objc_object NSSlider;

// class 'NSSliderCell'
typedef struct objc_object NSSliderCell;

// class 'NSSound'
typedef struct objc_object NSSound;

// class 'NSSpeechRecognizer'
typedef struct objc_object NSSpeechRecognizer;

// class 'NSSpeechSynthesizer'
typedef struct objc_object NSSpeechSynthesizer;

// class 'NSSpellChecker'
typedef struct objc_object NSSpellChecker;

// class 'NSSplitView'
typedef struct objc_object NSSplitView;

// class 'NSStatusBar'
typedef struct objc_object NSStatusBar;

// class 'NSStatusItem'
typedef struct objc_object NSStatusItem;

// class 'NSStepper'
typedef struct objc_object NSStepper;

// class 'NSStepperCell'
typedef struct objc_object NSStepperCell;

// class 'NSString'
typedef struct objc_object NSString;

// class 'NSTabView'
typedef struct objc_object NSTabView;

// class 'NSTabViewItem'
typedef struct objc_object NSTabViewItem;

// class 'NSTableColumn'
typedef struct objc_object NSTableColumn;

// class 'NSTableHeaderCell'
typedef struct objc_object NSTableHeaderCell;

// class 'NSTableHeaderView'
typedef struct objc_object NSTableHeaderView;

// class 'NSTableView'
typedef struct objc_object NSTableView;

// class 'NSText'
typedef struct objc_object NSText;

// class 'NSTextAttachment'
typedef struct objc_object NSTextAttachment;

// class 'NSTextBlock'
typedef struct objc_object NSTextBlock;

// class 'NSTextContainer'
typedef struct objc_object NSTextContainer;

// class 'NSTextField'
typedef struct objc_object NSTextField;

// class 'NSTextFieldCell'
typedef struct objc_object NSTextFieldCell;

// class 'NSTextList'
typedef struct objc_object NSTextList;

// class 'NSTextStorage'
typedef struct objc_object NSTextStorage;

// class 'NSTextTab'
typedef struct objc_object NSTextTab;

// class 'NSTextTable'
typedef struct objc_object NSTextTable;

// class 'NSTextTableBlock'
typedef struct objc_object NSTextTableBlock;

// class 'NSTextView'
typedef struct objc_object NSTextView;

// class 'NSTokenField'
typedef struct objc_object NSTokenField;

// class 'NSTokenFieldCell'
typedef struct objc_object NSTokenFieldCell;

// class 'NSToolbar'
typedef struct objc_object NSToolbar;

// class 'NSToolbarItem'
typedef struct objc_object NSToolbarItem;

// class 'NSTreeController'
typedef struct objc_object NSTreeController;

// class 'NSTypesetter'
typedef struct objc_object NSTypesetter;

// class 'NSURL'
typedef struct objc_object NSURL;

// class 'NSUserDefaultsController'
typedef struct objc_object NSUserDefaultsController;

// class 'NSView'
typedef struct objc_object NSView;

// class 'NSViewAnimation'
typedef struct objc_object NSViewAnimation;

// class 'NSWindow'
typedef struct objc_object NSWindow;

// class 'NSWindowController'
typedef struct objc_object NSWindowController;

// class 'NSWorkspace'
typedef struct objc_object NSWorkspace;

// getter for constant 'NSAFMAscender'
NSString* _get_NSAFMAscender(void);

// setter for constant 'NSAFMAscender'
void _set_NSAFMAscender(NSString* value);

// getter for constant 'NSAFMCapHeight'
NSString* _get_NSAFMCapHeight(void);

// setter for constant 'NSAFMCapHeight'
void _set_NSAFMCapHeight(NSString* value);

// getter for constant 'NSAFMCharacterSet'
NSString* _get_NSAFMCharacterSet(void);

// setter for constant 'NSAFMCharacterSet'
void _set_NSAFMCharacterSet(NSString* value);

// getter for constant 'NSAFMDescender'
NSString* _get_NSAFMDescender(void);

// setter for constant 'NSAFMDescender'
void _set_NSAFMDescender(NSString* value);

// getter for constant 'NSAFMEncodingScheme'
NSString* _get_NSAFMEncodingScheme(void);

// setter for constant 'NSAFMEncodingScheme'
void _set_NSAFMEncodingScheme(NSString* value);

// getter for constant 'NSAFMFamilyName'
NSString* _get_NSAFMFamilyName(void);

// setter for constant 'NSAFMFamilyName'
void _set_NSAFMFamilyName(NSString* value);

// getter for constant 'NSAFMFontName'
NSString* _get_NSAFMFontName(void);

// setter for constant 'NSAFMFontName'
void _set_NSAFMFontName(NSString* value);

// getter for constant 'NSAFMFormatVersion'
NSString* _get_NSAFMFormatVersion(void);

// setter for constant 'NSAFMFormatVersion'
void _set_NSAFMFormatVersion(NSString* value);

// getter for constant 'NSAFMFullName'
NSString* _get_NSAFMFullName(void);

// setter for constant 'NSAFMFullName'
void _set_NSAFMFullName(NSString* value);

// getter for constant 'NSAFMItalicAngle'
NSString* _get_NSAFMItalicAngle(void);

// setter for constant 'NSAFMItalicAngle'
void _set_NSAFMItalicAngle(NSString* value);

// getter for constant 'NSAFMMappingScheme'
NSString* _get_NSAFMMappingScheme(void);

// setter for constant 'NSAFMMappingScheme'
void _set_NSAFMMappingScheme(NSString* value);

// getter for constant 'NSAFMNotice'
NSString* _get_NSAFMNotice(void);

// setter for constant 'NSAFMNotice'
void _set_NSAFMNotice(NSString* value);

// getter for constant 'NSAFMUnderlinePosition'
NSString* _get_NSAFMUnderlinePosition(void);

// setter for constant 'NSAFMUnderlinePosition'
void _set_NSAFMUnderlinePosition(NSString* value);

// getter for constant 'NSAFMUnderlineThickness'
NSString* _get_NSAFMUnderlineThickness(void);

// setter for constant 'NSAFMUnderlineThickness'
void _set_NSAFMUnderlineThickness(NSString* value);

// getter for constant 'NSAFMVersion'
NSString* _get_NSAFMVersion(void);

// setter for constant 'NSAFMVersion'
void _set_NSAFMVersion(NSString* value);

// getter for constant 'NSAFMWeight'
NSString* _get_NSAFMWeight(void);

// setter for constant 'NSAFMWeight'
void _set_NSAFMWeight(NSString* value);

// getter for constant 'NSAFMXHeight'
NSString* _get_NSAFMXHeight(void);

// setter for constant 'NSAFMXHeight'
void _set_NSAFMXHeight(NSString* value);

// getter for constant 'NSAbortModalException'
NSString* _get_NSAbortModalException(void);

// setter for constant 'NSAbortModalException'
void _set_NSAbortModalException(NSString* value);

// getter for constant 'NSAbortPrintingException'
NSString* _get_NSAbortPrintingException(void);

// setter for constant 'NSAbortPrintingException'
void _set_NSAbortPrintingException(NSString* value);

// getter for constant 'NSAccessibilityAllowedValuesAttribute'
NSString* _get_NSAccessibilityAllowedValuesAttribute(void);

// getter for constant 'NSAccessibilityApplicationActivatedNotification'
NSString* _get_NSAccessibilityApplicationActivatedNotification(void);

// getter for constant 'NSAccessibilityApplicationDeactivatedNotification'
NSString* _get_NSAccessibilityApplicationDeactivatedNotification(void);

// getter for constant 'NSAccessibilityApplicationHiddenNotification'
NSString* _get_NSAccessibilityApplicationHiddenNotification(void);

// getter for constant 'NSAccessibilityApplicationRole'
NSString* _get_NSAccessibilityApplicationRole(void);

// getter for constant 'NSAccessibilityApplicationShownNotification'
NSString* _get_NSAccessibilityApplicationShownNotification(void);

// getter for constant 'NSAccessibilityAscendingSortDirectionValue'
NSString* _get_NSAccessibilityAscendingSortDirectionValue(void);

// getter for constant 'NSAccessibilityAttachmentTextAttribute'
NSString* _get_NSAccessibilityAttachmentTextAttribute(void);

// getter for constant 'NSAccessibilityAttributedStringForRangeParameterizedAttribute'
NSString* _get_NSAccessibilityAttributedStringForRangeParameterizedAttribute(void);

// getter for constant 'NSAccessibilityBackgroundColorTextAttribute'
NSString* _get_NSAccessibilityBackgroundColorTextAttribute(void);

// getter for constant 'NSAccessibilityBoundsForRangeParameterizedAttribute'
NSString* _get_NSAccessibilityBoundsForRangeParameterizedAttribute(void);

// getter for constant 'NSAccessibilityBrowserRole'
NSString* _get_NSAccessibilityBrowserRole(void);

// getter for constant 'NSAccessibilityBusyIndicatorRole'
NSString* _get_NSAccessibilityBusyIndicatorRole(void);

// getter for constant 'NSAccessibilityButtonRole'
NSString* _get_NSAccessibilityButtonRole(void);

// getter for constant 'NSAccessibilityCancelAction'
NSString* _get_NSAccessibilityCancelAction(void);

// getter for constant 'NSAccessibilityCancelButtonAttribute'
NSString* _get_NSAccessibilityCancelButtonAttribute(void);

// getter for constant 'NSAccessibilityCenterTabStopMarkerTypeValue'
NSString* _get_NSAccessibilityCenterTabStopMarkerTypeValue(void);

// getter for constant 'NSAccessibilityCentimetersUnitValue'
NSString* _get_NSAccessibilityCentimetersUnitValue(void);

// getter for constant 'NSAccessibilityCheckBoxRole'
NSString* _get_NSAccessibilityCheckBoxRole(void);

// getter for constant 'NSAccessibilityChildrenAttribute'
NSString* _get_NSAccessibilityChildrenAttribute(void);

// getter for constant 'NSAccessibilityClearButtonAttribute'
NSString* _get_NSAccessibilityClearButtonAttribute(void);

// getter for constant 'NSAccessibilityCloseButtonAttribute'
NSString* _get_NSAccessibilityCloseButtonAttribute(void);

// getter for constant 'NSAccessibilityCloseButtonSubrole'
NSString* _get_NSAccessibilityCloseButtonSubrole(void);

// getter for constant 'NSAccessibilityColorWellRole'
NSString* _get_NSAccessibilityColorWellRole(void);

// getter for constant 'NSAccessibilityColumnRole'
NSString* _get_NSAccessibilityColumnRole(void);

// getter for constant 'NSAccessibilityColumnTitlesAttribute'
NSString* _get_NSAccessibilityColumnTitlesAttribute(void);

// getter for constant 'NSAccessibilityColumnsAttribute'
NSString* _get_NSAccessibilityColumnsAttribute(void);

// getter for constant 'NSAccessibilityComboBoxRole'
NSString* _get_NSAccessibilityComboBoxRole(void);

// getter for constant 'NSAccessibilityConfirmAction'
NSString* _get_NSAccessibilityConfirmAction(void);

// getter for constant 'NSAccessibilityContentsAttribute'
NSString* _get_NSAccessibilityContentsAttribute(void);

// getter for constant 'NSAccessibilityCreatedNotification'
NSString* _get_NSAccessibilityCreatedNotification(void);

// getter for constant 'NSAccessibilityDecimalTabStopMarkerTypeValue'
NSString* _get_NSAccessibilityDecimalTabStopMarkerTypeValue(void);

// getter for constant 'NSAccessibilityDecrementAction'
NSString* _get_NSAccessibilityDecrementAction(void);

// getter for constant 'NSAccessibilityDecrementArrowSubrole'
NSString* _get_NSAccessibilityDecrementArrowSubrole(void);

// getter for constant 'NSAccessibilityDecrementButtonAttribute'
NSString* _get_NSAccessibilityDecrementButtonAttribute(void);

// getter for constant 'NSAccessibilityDecrementPageSubrole'
NSString* _get_NSAccessibilityDecrementPageSubrole(void);

// getter for constant 'NSAccessibilityDefaultButtonAttribute'
NSString* _get_NSAccessibilityDefaultButtonAttribute(void);

// getter for constant 'NSAccessibilityDeleteAction'
NSString* _get_NSAccessibilityDeleteAction(void);

// getter for constant 'NSAccessibilityDescendingSortDirectionValue'
NSString* _get_NSAccessibilityDescendingSortDirectionValue(void);

// getter for constant 'NSAccessibilityDescriptionAttribute'
NSString* _get_NSAccessibilityDescriptionAttribute(void);

// getter for constant 'NSAccessibilityDialogSubrole'
NSString* _get_NSAccessibilityDialogSubrole(void);

// getter for constant 'NSAccessibilityDisclosedByRowAttribute'
NSString* _get_NSAccessibilityDisclosedByRowAttribute(void);

// getter for constant 'NSAccessibilityDisclosedRowsAttribute'
NSString* _get_NSAccessibilityDisclosedRowsAttribute(void);

// getter for constant 'NSAccessibilityDisclosingAttribute'
NSString* _get_NSAccessibilityDisclosingAttribute(void);

// getter for constant 'NSAccessibilityDisclosureLevelAttribute'
NSString* _get_NSAccessibilityDisclosureLevelAttribute(void);

// getter for constant 'NSAccessibilityDocumentAttribute'
NSString* _get_NSAccessibilityDocumentAttribute(void);

// getter for constant 'NSAccessibilityDrawerCreatedNotification'
NSString* _get_NSAccessibilityDrawerCreatedNotification(void);

// getter for constant 'NSAccessibilityDrawerRole'
NSString* _get_NSAccessibilityDrawerRole(void);

// getter for constant 'NSAccessibilityEditedAttribute'
NSString* _get_NSAccessibilityEditedAttribute(void);

// getter for constant 'NSAccessibilityEnabledAttribute'
NSString* _get_NSAccessibilityEnabledAttribute(void);

// getter for constant 'NSAccessibilityErrorCodeExceptionInfo'
NSString* _get_NSAccessibilityErrorCodeExceptionInfo(void);

// getter for constant 'NSAccessibilityException'
NSString* _get_NSAccessibilityException(void);

// setter for constant 'NSAccessibilityException'
void _set_NSAccessibilityException(NSString* value);

// getter for constant 'NSAccessibilityExpandedAttribute'
NSString* _get_NSAccessibilityExpandedAttribute(void);

// getter for constant 'NSAccessibilityFilenameAttribute'
NSString* _get_NSAccessibilityFilenameAttribute(void);

// getter for constant 'NSAccessibilityFirstLineIndentMarkerTypeValue'
NSString* _get_NSAccessibilityFirstLineIndentMarkerTypeValue(void);

// getter for constant 'NSAccessibilityFloatingWindowSubrole'
NSString* _get_NSAccessibilityFloatingWindowSubrole(void);

// getter for constant 'NSAccessibilityFocusedAttribute'
NSString* _get_NSAccessibilityFocusedAttribute(void);

// getter for constant 'NSAccessibilityFocusedUIElementAttribute'
NSString* _get_NSAccessibilityFocusedUIElementAttribute(void);

// getter for constant 'NSAccessibilityFocusedUIElementChangedNotification'
NSString* _get_NSAccessibilityFocusedUIElementChangedNotification(void);

// getter for constant 'NSAccessibilityFocusedWindowAttribute'
NSString* _get_NSAccessibilityFocusedWindowAttribute(void);

// getter for constant 'NSAccessibilityFocusedWindowChangedNotification'
NSString* _get_NSAccessibilityFocusedWindowChangedNotification(void);

// getter for constant 'NSAccessibilityFontFamilyKey'
NSString* _get_NSAccessibilityFontFamilyKey(void);

// getter for constant 'NSAccessibilityFontNameKey'
NSString* _get_NSAccessibilityFontNameKey(void);

// getter for constant 'NSAccessibilityFontSizeKey'
NSString* _get_NSAccessibilityFontSizeKey(void);

// getter for constant 'NSAccessibilityFontTextAttribute'
NSString* _get_NSAccessibilityFontTextAttribute(void);

// getter for constant 'NSAccessibilityForegroundColorTextAttribute'
NSString* _get_NSAccessibilityForegroundColorTextAttribute(void);

// getter for constant 'NSAccessibilityFrontmostAttribute'
NSString* _get_NSAccessibilityFrontmostAttribute(void);

// getter for constant 'NSAccessibilityGroupRole'
NSString* _get_NSAccessibilityGroupRole(void);

// getter for constant 'NSAccessibilityGrowAreaAttribute'
NSString* _get_NSAccessibilityGrowAreaAttribute(void);

// getter for constant 'NSAccessibilityGrowAreaRole'
NSString* _get_NSAccessibilityGrowAreaRole(void);

// getter for constant 'NSAccessibilityHeadIndentMarkerTypeValue'
NSString* _get_NSAccessibilityHeadIndentMarkerTypeValue(void);

// getter for constant 'NSAccessibilityHeaderAttribute'
NSString* _get_NSAccessibilityHeaderAttribute(void);

// getter for constant 'NSAccessibilityHelpAttribute'
NSString* _get_NSAccessibilityHelpAttribute(void);

// getter for constant 'NSAccessibilityHelpTagCreatedNotification'
NSString* _get_NSAccessibilityHelpTagCreatedNotification(void);

// getter for constant 'NSAccessibilityHelpTagRole'
NSString* _get_NSAccessibilityHelpTagRole(void);

// getter for constant 'NSAccessibilityHiddenAttribute'
NSString* _get_NSAccessibilityHiddenAttribute(void);

// getter for constant 'NSAccessibilityHorizontalOrientationValue'
NSString* _get_NSAccessibilityHorizontalOrientationValue(void);

// getter for constant 'NSAccessibilityHorizontalScrollBarAttribute'
NSString* _get_NSAccessibilityHorizontalScrollBarAttribute(void);

// getter for constant 'NSAccessibilityImageRole'
NSString* _get_NSAccessibilityImageRole(void);

// getter for constant 'NSAccessibilityInchesUnitValue'
NSString* _get_NSAccessibilityInchesUnitValue(void);

// getter for constant 'NSAccessibilityIncrementAction'
NSString* _get_NSAccessibilityIncrementAction(void);

// getter for constant 'NSAccessibilityIncrementArrowSubrole'
NSString* _get_NSAccessibilityIncrementArrowSubrole(void);

// getter for constant 'NSAccessibilityIncrementButtonAttribute'
NSString* _get_NSAccessibilityIncrementButtonAttribute(void);

// getter for constant 'NSAccessibilityIncrementPageSubrole'
NSString* _get_NSAccessibilityIncrementPageSubrole(void);

// getter for constant 'NSAccessibilityIncrementorRole'
NSString* _get_NSAccessibilityIncrementorRole(void);

// getter for constant 'NSAccessibilityIndexAttribute'
NSString* _get_NSAccessibilityIndexAttribute(void);

// getter for constant 'NSAccessibilityInsertionPointLineNumberAttribute'
NSString* _get_NSAccessibilityInsertionPointLineNumberAttribute(void);

// getter for constant 'NSAccessibilityLabelUIElementsAttribute'
NSString* _get_NSAccessibilityLabelUIElementsAttribute(void);

// getter for constant 'NSAccessibilityLabelValueAttribute'
NSString* _get_NSAccessibilityLabelValueAttribute(void);

// getter for constant 'NSAccessibilityLeftTabStopMarkerTypeValue'
NSString* _get_NSAccessibilityLeftTabStopMarkerTypeValue(void);

// getter for constant 'NSAccessibilityLineForIndexParameterizedAttribute'
NSString* _get_NSAccessibilityLineForIndexParameterizedAttribute(void);

// getter for constant 'NSAccessibilityLinkRole'
NSString* _get_NSAccessibilityLinkRole(void);

// getter for constant 'NSAccessibilityLinkTextAttribute'
NSString* _get_NSAccessibilityLinkTextAttribute(void);

// getter for constant 'NSAccessibilityLinkedUIElementsAttribute'
NSString* _get_NSAccessibilityLinkedUIElementsAttribute(void);

// getter for constant 'NSAccessibilityListRole'
NSString* _get_NSAccessibilityListRole(void);

// getter for constant 'NSAccessibilityMainAttribute'
NSString* _get_NSAccessibilityMainAttribute(void);

// getter for constant 'NSAccessibilityMainWindowAttribute'
NSString* _get_NSAccessibilityMainWindowAttribute(void);

// getter for constant 'NSAccessibilityMainWindowChangedNotification'
NSString* _get_NSAccessibilityMainWindowChangedNotification(void);

// getter for constant 'NSAccessibilityMarkerGroupUIElementAttribute'
NSString* _get_NSAccessibilityMarkerGroupUIElementAttribute(void);

// getter for constant 'NSAccessibilityMarkerTypeAttribute'
NSString* _get_NSAccessibilityMarkerTypeAttribute(void);

// getter for constant 'NSAccessibilityMarkerTypeDescriptionAttribute'
NSString* _get_NSAccessibilityMarkerTypeDescriptionAttribute(void);

// getter for constant 'NSAccessibilityMarkerUIElementsAttribute'
NSString* _get_NSAccessibilityMarkerUIElementsAttribute(void);

// getter for constant 'NSAccessibilityMarkerValuesAttribute'
NSString* _get_NSAccessibilityMarkerValuesAttribute(void);

// getter for constant 'NSAccessibilityMatteContentUIElementAttribute'
NSString* _get_NSAccessibilityMatteContentUIElementAttribute(void);

// getter for constant 'NSAccessibilityMatteHoleAttribute'
NSString* _get_NSAccessibilityMatteHoleAttribute(void);

// getter for constant 'NSAccessibilityMatteRole'
NSString* _get_NSAccessibilityMatteRole(void);

// getter for constant 'NSAccessibilityMaxValueAttribute'
NSString* _get_NSAccessibilityMaxValueAttribute(void);

// getter for constant 'NSAccessibilityMenuBarAttribute'
NSString* _get_NSAccessibilityMenuBarAttribute(void);

// getter for constant 'NSAccessibilityMenuBarRole'
NSString* _get_NSAccessibilityMenuBarRole(void);

// getter for constant 'NSAccessibilityMenuButtonRole'
NSString* _get_NSAccessibilityMenuButtonRole(void);

// getter for constant 'NSAccessibilityMenuItemRole'
NSString* _get_NSAccessibilityMenuItemRole(void);

// getter for constant 'NSAccessibilityMenuRole'
NSString* _get_NSAccessibilityMenuRole(void);

// getter for constant 'NSAccessibilityMinValueAttribute'
NSString* _get_NSAccessibilityMinValueAttribute(void);

// getter for constant 'NSAccessibilityMinimizeButtonAttribute'
NSString* _get_NSAccessibilityMinimizeButtonAttribute(void);

// getter for constant 'NSAccessibilityMinimizeButtonSubrole'
NSString* _get_NSAccessibilityMinimizeButtonSubrole(void);

// getter for constant 'NSAccessibilityMinimizedAttribute'
NSString* _get_NSAccessibilityMinimizedAttribute(void);

// getter for constant 'NSAccessibilityMisspelledTextAttribute'
NSString* _get_NSAccessibilityMisspelledTextAttribute(void);

// getter for constant 'NSAccessibilityModalAttribute'
NSString* _get_NSAccessibilityModalAttribute(void);

// getter for constant 'NSAccessibilityMovedNotification'
NSString* _get_NSAccessibilityMovedNotification(void);

// getter for constant 'NSAccessibilityNextContentsAttribute'
NSString* _get_NSAccessibilityNextContentsAttribute(void);

// getter for constant 'NSAccessibilityNumberOfCharactersAttribute'
NSString* _get_NSAccessibilityNumberOfCharactersAttribute(void);

// getter for constant 'NSAccessibilityOrientationAttribute'
NSString* _get_NSAccessibilityOrientationAttribute(void);

// getter for constant 'NSAccessibilityOutlineRole'
NSString* _get_NSAccessibilityOutlineRole(void);

// getter for constant 'NSAccessibilityOutlineRowSubrole'
NSString* _get_NSAccessibilityOutlineRowSubrole(void);

// getter for constant 'NSAccessibilityOverflowButtonAttribute'
NSString* _get_NSAccessibilityOverflowButtonAttribute(void);

// getter for constant 'NSAccessibilityParentAttribute'
NSString* _get_NSAccessibilityParentAttribute(void);

// getter for constant 'NSAccessibilityPicasUnitValue'
NSString* _get_NSAccessibilityPicasUnitValue(void);

// getter for constant 'NSAccessibilityPickAction'
NSString* _get_NSAccessibilityPickAction(void);

// getter for constant 'NSAccessibilityPointsUnitValue'
NSString* _get_NSAccessibilityPointsUnitValue(void);

// getter for constant 'NSAccessibilityPopUpButtonRole'
NSString* _get_NSAccessibilityPopUpButtonRole(void);

// getter for constant 'NSAccessibilityPositionAttribute'
NSString* _get_NSAccessibilityPositionAttribute(void);

// getter for constant 'NSAccessibilityPressAction'
NSString* _get_NSAccessibilityPressAction(void);

// getter for constant 'NSAccessibilityPreviousContentsAttribute'
NSString* _get_NSAccessibilityPreviousContentsAttribute(void);

// getter for constant 'NSAccessibilityProgressIndicatorRole'
NSString* _get_NSAccessibilityProgressIndicatorRole(void);

// getter for constant 'NSAccessibilityProxyAttribute'
NSString* _get_NSAccessibilityProxyAttribute(void);

// getter for constant 'NSAccessibilityRTFForRangeParameterizedAttribute'
NSString* _get_NSAccessibilityRTFForRangeParameterizedAttribute(void);

// getter for constant 'NSAccessibilityRadioButtonRole'
NSString* _get_NSAccessibilityRadioButtonRole(void);

// getter for constant 'NSAccessibilityRadioGroupRole'
NSString* _get_NSAccessibilityRadioGroupRole(void);

// getter for constant 'NSAccessibilityRaiseAction'
NSString* _get_NSAccessibilityRaiseAction(void);

// getter for constant 'NSAccessibilityRangeForIndexParameterizedAttribute'
NSString* _get_NSAccessibilityRangeForIndexParameterizedAttribute(void);

// getter for constant 'NSAccessibilityRangeForLineParameterizedAttribute'
NSString* _get_NSAccessibilityRangeForLineParameterizedAttribute(void);

// getter for constant 'NSAccessibilityRangeForPositionParameterizedAttribute'
NSString* _get_NSAccessibilityRangeForPositionParameterizedAttribute(void);

// getter for constant 'NSAccessibilityResizedNotification'
NSString* _get_NSAccessibilityResizedNotification(void);

// getter for constant 'NSAccessibilityRightTabStopMarkerTypeValue'
NSString* _get_NSAccessibilityRightTabStopMarkerTypeValue(void);

// getter for constant 'NSAccessibilityRoleAttribute'
NSString* _get_NSAccessibilityRoleAttribute(void);

// getter for constant 'NSAccessibilityRoleDescriptionAttribute'
NSString* _get_NSAccessibilityRoleDescriptionAttribute(void);

// getter for constant 'NSAccessibilityRowCountChangedNotification'
NSString* _get_NSAccessibilityRowCountChangedNotification(void);

// getter for constant 'NSAccessibilityRowRole'
NSString* _get_NSAccessibilityRowRole(void);

// getter for constant 'NSAccessibilityRowsAttribute'
NSString* _get_NSAccessibilityRowsAttribute(void);

// getter for constant 'NSAccessibilityRulerMarkerRole'
NSString* _get_NSAccessibilityRulerMarkerRole(void);

// getter for constant 'NSAccessibilityRulerRole'
NSString* _get_NSAccessibilityRulerRole(void);

// getter for constant 'NSAccessibilityScrollAreaRole'
NSString* _get_NSAccessibilityScrollAreaRole(void);

// getter for constant 'NSAccessibilityScrollBarRole'
NSString* _get_NSAccessibilityScrollBarRole(void);

// getter for constant 'NSAccessibilitySearchButtonAttribute'
NSString* _get_NSAccessibilitySearchButtonAttribute(void);

// getter for constant 'NSAccessibilitySearchFieldSubrole'
NSString* _get_NSAccessibilitySearchFieldSubrole(void);

// getter for constant 'NSAccessibilitySearchMenuAttribute'
NSString* _get_NSAccessibilitySearchMenuAttribute(void);

// getter for constant 'NSAccessibilitySecureTextFieldSubrole'
NSString* _get_NSAccessibilitySecureTextFieldSubrole(void);

// getter for constant 'NSAccessibilitySelectedAttribute'
NSString* _get_NSAccessibilitySelectedAttribute(void);

// getter for constant 'NSAccessibilitySelectedChildrenAttribute'
NSString* _get_NSAccessibilitySelectedChildrenAttribute(void);

// getter for constant 'NSAccessibilitySelectedChildrenChangedNotification'
NSString* _get_NSAccessibilitySelectedChildrenChangedNotification(void);

// getter for constant 'NSAccessibilitySelectedColumnsAttribute'
NSString* _get_NSAccessibilitySelectedColumnsAttribute(void);

// getter for constant 'NSAccessibilitySelectedColumnsChangedNotification'
NSString* _get_NSAccessibilitySelectedColumnsChangedNotification(void);

// getter for constant 'NSAccessibilitySelectedRowsAttribute'
NSString* _get_NSAccessibilitySelectedRowsAttribute(void);

// getter for constant 'NSAccessibilitySelectedRowsChangedNotification'
NSString* _get_NSAccessibilitySelectedRowsChangedNotification(void);

// getter for constant 'NSAccessibilitySelectedTextAttribute'
NSString* _get_NSAccessibilitySelectedTextAttribute(void);

// getter for constant 'NSAccessibilitySelectedTextChangedNotification'
NSString* _get_NSAccessibilitySelectedTextChangedNotification(void);

// getter for constant 'NSAccessibilitySelectedTextRangeAttribute'
NSString* _get_NSAccessibilitySelectedTextRangeAttribute(void);

// getter for constant 'NSAccessibilityServesAsTitleForUIElementsAttribute'
NSString* _get_NSAccessibilityServesAsTitleForUIElementsAttribute(void);

// getter for constant 'NSAccessibilityShadowTextAttribute'
NSString* _get_NSAccessibilityShadowTextAttribute(void);

// getter for constant 'NSAccessibilitySharedCharacterRangeAttribute'
NSString* _get_NSAccessibilitySharedCharacterRangeAttribute(void);

// getter for constant 'NSAccessibilitySharedTextUIElementsAttribute'
NSString* _get_NSAccessibilitySharedTextUIElementsAttribute(void);

// getter for constant 'NSAccessibilitySheetCreatedNotification'
NSString* _get_NSAccessibilitySheetCreatedNotification(void);

// getter for constant 'NSAccessibilitySheetRole'
NSString* _get_NSAccessibilitySheetRole(void);

// getter for constant 'NSAccessibilityShowMenuAction'
NSString* _get_NSAccessibilityShowMenuAction(void);

// getter for constant 'NSAccessibilityShownMenuAttribute'
NSString* _get_NSAccessibilityShownMenuAttribute(void);

// getter for constant 'NSAccessibilitySizeAttribute'
NSString* _get_NSAccessibilitySizeAttribute(void);

// getter for constant 'NSAccessibilitySliderRole'
NSString* _get_NSAccessibilitySliderRole(void);

// getter for constant 'NSAccessibilitySortButtonRole'
NSString* _get_NSAccessibilitySortButtonRole(void);

// getter for constant 'NSAccessibilitySortDirectionAttribute'
NSString* _get_NSAccessibilitySortDirectionAttribute(void);

// getter for constant 'NSAccessibilitySplitGroupRole'
NSString* _get_NSAccessibilitySplitGroupRole(void);

// getter for constant 'NSAccessibilitySplitterRole'
NSString* _get_NSAccessibilitySplitterRole(void);

// getter for constant 'NSAccessibilitySplittersAttribute'
NSString* _get_NSAccessibilitySplittersAttribute(void);

// getter for constant 'NSAccessibilityStandardWindowSubrole'
NSString* _get_NSAccessibilityStandardWindowSubrole(void);

// getter for constant 'NSAccessibilityStaticTextRole'
NSString* _get_NSAccessibilityStaticTextRole(void);

// getter for constant 'NSAccessibilityStrikethroughColorTextAttribute'
NSString* _get_NSAccessibilityStrikethroughColorTextAttribute(void);

// getter for constant 'NSAccessibilityStrikethroughTextAttribute'
NSString* _get_NSAccessibilityStrikethroughTextAttribute(void);

// getter for constant 'NSAccessibilityStringForRangeParameterizedAttribute'
NSString* _get_NSAccessibilityStringForRangeParameterizedAttribute(void);

// getter for constant 'NSAccessibilityStyleRangeForIndexParameterizedAttribute'
NSString* _get_NSAccessibilityStyleRangeForIndexParameterizedAttribute(void);

// getter for constant 'NSAccessibilitySubroleAttribute'
NSString* _get_NSAccessibilitySubroleAttribute(void);

// getter for constant 'NSAccessibilitySuperscriptTextAttribute'
NSString* _get_NSAccessibilitySuperscriptTextAttribute(void);

// getter for constant 'NSAccessibilitySystemDialogSubrole'
NSString* _get_NSAccessibilitySystemDialogSubrole(void);

// getter for constant 'NSAccessibilitySystemFloatingWindowSubrole'
NSString* _get_NSAccessibilitySystemFloatingWindowSubrole(void);

// getter for constant 'NSAccessibilitySystemWideRole'
NSString* _get_NSAccessibilitySystemWideRole(void);

// getter for constant 'NSAccessibilityTabGroupRole'
NSString* _get_NSAccessibilityTabGroupRole(void);

// getter for constant 'NSAccessibilityTableRole'
NSString* _get_NSAccessibilityTableRole(void);

// getter for constant 'NSAccessibilityTableRowSubrole'
NSString* _get_NSAccessibilityTableRowSubrole(void);

// getter for constant 'NSAccessibilityTabsAttribute'
NSString* _get_NSAccessibilityTabsAttribute(void);

// getter for constant 'NSAccessibilityTailIndentMarkerTypeValue'
NSString* _get_NSAccessibilityTailIndentMarkerTypeValue(void);

// getter for constant 'NSAccessibilityTextAreaRole'
NSString* _get_NSAccessibilityTextAreaRole(void);

// getter for constant 'NSAccessibilityTextAttachmentSubrole'
NSString* _get_NSAccessibilityTextAttachmentSubrole(void);

// getter for constant 'NSAccessibilityTextFieldRole'
NSString* _get_NSAccessibilityTextFieldRole(void);

// getter for constant 'NSAccessibilityTextLinkSubrole'
NSString* _get_NSAccessibilityTextLinkSubrole(void);

// getter for constant 'NSAccessibilityTitleAttribute'
NSString* _get_NSAccessibilityTitleAttribute(void);

// getter for constant 'NSAccessibilityTitleChangedNotification'
NSString* _get_NSAccessibilityTitleChangedNotification(void);

// getter for constant 'NSAccessibilityTitleUIElementAttribute'
NSString* _get_NSAccessibilityTitleUIElementAttribute(void);

// getter for constant 'NSAccessibilityToolbarButtonAttribute'
NSString* _get_NSAccessibilityToolbarButtonAttribute(void);

// getter for constant 'NSAccessibilityToolbarButtonSubrole'
NSString* _get_NSAccessibilityToolbarButtonSubrole(void);

// getter for constant 'NSAccessibilityToolbarRole'
NSString* _get_NSAccessibilityToolbarRole(void);

// getter for constant 'NSAccessibilityTopLevelUIElementAttribute'
NSString* _get_NSAccessibilityTopLevelUIElementAttribute(void);

// getter for constant 'NSAccessibilityUIElementDestroyedNotification'
NSString* _get_NSAccessibilityUIElementDestroyedNotification(void);

// getter for constant 'NSAccessibilityURLAttribute'
NSString* _get_NSAccessibilityURLAttribute(void);

// getter for constant 'NSAccessibilityUnderlineColorTextAttribute'
NSString* _get_NSAccessibilityUnderlineColorTextAttribute(void);

// getter for constant 'NSAccessibilityUnderlineTextAttribute'
NSString* _get_NSAccessibilityUnderlineTextAttribute(void);

// getter for constant 'NSAccessibilityUnitDescriptionAttribute'
NSString* _get_NSAccessibilityUnitDescriptionAttribute(void);

// getter for constant 'NSAccessibilityUnitsAttribute'
NSString* _get_NSAccessibilityUnitsAttribute(void);

// getter for constant 'NSAccessibilityUnknownMarkerTypeValue'
NSString* _get_NSAccessibilityUnknownMarkerTypeValue(void);

// getter for constant 'NSAccessibilityUnknownRole'
NSString* _get_NSAccessibilityUnknownRole(void);

// getter for constant 'NSAccessibilityUnknownSortDirectionValue'
NSString* _get_NSAccessibilityUnknownSortDirectionValue(void);

// getter for constant 'NSAccessibilityUnknownSubrole'
NSString* _get_NSAccessibilityUnknownSubrole(void);

// getter for constant 'NSAccessibilityUnknownUnitValue'
NSString* _get_NSAccessibilityUnknownUnitValue(void);

// getter for constant 'NSAccessibilityValueAttribute'
NSString* _get_NSAccessibilityValueAttribute(void);

// getter for constant 'NSAccessibilityValueChangedNotification'
NSString* _get_NSAccessibilityValueChangedNotification(void);

// getter for constant 'NSAccessibilityValueIndicatorRole'
NSString* _get_NSAccessibilityValueIndicatorRole(void);

// getter for constant 'NSAccessibilityVerticalOrientationValue'
NSString* _get_NSAccessibilityVerticalOrientationValue(void);

// getter for constant 'NSAccessibilityVerticalScrollBarAttribute'
NSString* _get_NSAccessibilityVerticalScrollBarAttribute(void);

// getter for constant 'NSAccessibilityVisibleCharacterRangeAttribute'
NSString* _get_NSAccessibilityVisibleCharacterRangeAttribute(void);

// getter for constant 'NSAccessibilityVisibleChildrenAttribute'
NSString* _get_NSAccessibilityVisibleChildrenAttribute(void);

// getter for constant 'NSAccessibilityVisibleColumnsAttribute'
NSString* _get_NSAccessibilityVisibleColumnsAttribute(void);

// getter for constant 'NSAccessibilityVisibleNameKey'
NSString* _get_NSAccessibilityVisibleNameKey(void);

// getter for constant 'NSAccessibilityVisibleRowsAttribute'
NSString* _get_NSAccessibilityVisibleRowsAttribute(void);

// getter for constant 'NSAccessibilityWindowAttribute'
NSString* _get_NSAccessibilityWindowAttribute(void);

// getter for constant 'NSAccessibilityWindowCreatedNotification'
NSString* _get_NSAccessibilityWindowCreatedNotification(void);

// getter for constant 'NSAccessibilityWindowDeminiaturizedNotification'
NSString* _get_NSAccessibilityWindowDeminiaturizedNotification(void);

// getter for constant 'NSAccessibilityWindowMiniaturizedNotification'
NSString* _get_NSAccessibilityWindowMiniaturizedNotification(void);

// getter for constant 'NSAccessibilityWindowMovedNotification'
NSString* _get_NSAccessibilityWindowMovedNotification(void);

// getter for constant 'NSAccessibilityWindowResizedNotification'
NSString* _get_NSAccessibilityWindowResizedNotification(void);

// getter for constant 'NSAccessibilityWindowRole'
NSString* _get_NSAccessibilityWindowRole(void);

// getter for constant 'NSAccessibilityWindowsAttribute'
NSString* _get_NSAccessibilityWindowsAttribute(void);

// getter for constant 'NSAccessibilityZoomButtonAttribute'
NSString* _get_NSAccessibilityZoomButtonAttribute(void);

// getter for constant 'NSAccessibilityZoomButtonSubrole'
NSString* _get_NSAccessibilityZoomButtonSubrole(void);

// getter for constant 'NSAlignmentBinding'
NSString* _get_NSAlignmentBinding(void);

// setter for constant 'NSAlignmentBinding'
void _set_NSAlignmentBinding(NSString* value);

// getter for constant 'NSAllowsEditingMultipleValuesSelectionBindingOption'
NSString* _get_NSAllowsEditingMultipleValuesSelectionBindingOption(void);

// setter for constant 'NSAllowsEditingMultipleValuesSelectionBindingOption'
void _set_NSAllowsEditingMultipleValuesSelectionBindingOption(NSString* value);

// getter for constant 'NSAllowsNullArgumentBindingOption'
NSString* _get_NSAllowsNullArgumentBindingOption(void);

// setter for constant 'NSAllowsNullArgumentBindingOption'
void _set_NSAllowsNullArgumentBindingOption(NSString* value);

// getter for constant 'NSAlternateImageBinding'
NSString* _get_NSAlternateImageBinding(void);

// setter for constant 'NSAlternateImageBinding'
void _set_NSAlternateImageBinding(NSString* value);

// getter for constant 'NSAlternateTitleBinding'
NSString* _get_NSAlternateTitleBinding(void);

// setter for constant 'NSAlternateTitleBinding'
void _set_NSAlternateTitleBinding(NSString* value);

// getter for constant 'NSAlwaysPresentsApplicationModalAlertsBindingOption'
NSString* _get_NSAlwaysPresentsApplicationModalAlertsBindingOption(void);

// setter for constant 'NSAlwaysPresentsApplicationModalAlertsBindingOption'
void _set_NSAlwaysPresentsApplicationModalAlertsBindingOption(NSString* value);

// getter for constant 'NSAnimateBinding'
NSString* _get_NSAnimateBinding(void);

// setter for constant 'NSAnimateBinding'
void _set_NSAnimateBinding(NSString* value);

// getter for constant 'NSAnimationDelayBinding'
NSString* _get_NSAnimationDelayBinding(void);

// setter for constant 'NSAnimationDelayBinding'
void _set_NSAnimationDelayBinding(NSString* value);

// getter for constant 'NSAnimationProgressMark'
NSString* _get_NSAnimationProgressMark(void);

// setter for constant 'NSAnimationProgressMark'
void _set_NSAnimationProgressMark(NSString* value);

// getter for constant 'NSAnimationProgressMarkNotification'
NSString* _get_NSAnimationProgressMarkNotification(void);

// setter for constant 'NSAnimationProgressMarkNotification'
void _set_NSAnimationProgressMarkNotification(NSString* value);

// getter for constant 'NSAntialiasThresholdChangedNotification'
NSString* _get_NSAntialiasThresholdChangedNotification(void);

// setter for constant 'NSAntialiasThresholdChangedNotification'
void _set_NSAntialiasThresholdChangedNotification(NSString* value);

// getter for constant 'NSApp'
id _get_NSApp(void);

// setter for constant 'NSApp'
void _set_NSApp(id value);

// getter for constant 'NSAppKitIgnoredException'
NSString* _get_NSAppKitIgnoredException(void);

// setter for constant 'NSAppKitIgnoredException'
void _set_NSAppKitIgnoredException(NSString* value);

// getter for constant 'NSAppKitVersionNumber'
double _get_NSAppKitVersionNumber(void);

// getter for constant 'NSAppKitVirtualMemoryException'
NSString* _get_NSAppKitVirtualMemoryException(void);

// setter for constant 'NSAppKitVirtualMemoryException'
void _set_NSAppKitVirtualMemoryException(NSString* value);

// getter for constant 'NSApplicationDidBecomeActiveNotification'
NSString* _get_NSApplicationDidBecomeActiveNotification(void);

// setter for constant 'NSApplicationDidBecomeActiveNotification'
void _set_NSApplicationDidBecomeActiveNotification(NSString* value);

// getter for constant 'NSApplicationDidChangeScreenParametersNotification'
NSString* _get_NSApplicationDidChangeScreenParametersNotification(void);

// setter for constant 'NSApplicationDidChangeScreenParametersNotification'
void _set_NSApplicationDidChangeScreenParametersNotification(NSString* value);

// getter for constant 'NSApplicationDidFinishLaunchingNotification'
NSString* _get_NSApplicationDidFinishLaunchingNotification(void);

// setter for constant 'NSApplicationDidFinishLaunchingNotification'
void _set_NSApplicationDidFinishLaunchingNotification(NSString* value);

// getter for constant 'NSApplicationDidHideNotification'
NSString* _get_NSApplicationDidHideNotification(void);

// setter for constant 'NSApplicationDidHideNotification'
void _set_NSApplicationDidHideNotification(NSString* value);

// getter for constant 'NSApplicationDidResignActiveNotification'
NSString* _get_NSApplicationDidResignActiveNotification(void);

// setter for constant 'NSApplicationDidResignActiveNotification'
void _set_NSApplicationDidResignActiveNotification(NSString* value);

// getter for constant 'NSApplicationDidUnhideNotification'
NSString* _get_NSApplicationDidUnhideNotification(void);

// setter for constant 'NSApplicationDidUnhideNotification'
void _set_NSApplicationDidUnhideNotification(NSString* value);

// getter for constant 'NSApplicationDidUpdateNotification'
NSString* _get_NSApplicationDidUpdateNotification(void);

// setter for constant 'NSApplicationDidUpdateNotification'
void _set_NSApplicationDidUpdateNotification(NSString* value);

// getter for constant 'NSApplicationFileType'
NSString* _get_NSApplicationFileType(void);

// setter for constant 'NSApplicationFileType'
void _set_NSApplicationFileType(NSString* value);

// getter for constant 'NSApplicationWillBecomeActiveNotification'
NSString* _get_NSApplicationWillBecomeActiveNotification(void);

// setter for constant 'NSApplicationWillBecomeActiveNotification'
void _set_NSApplicationWillBecomeActiveNotification(NSString* value);

// getter for constant 'NSApplicationWillFinishLaunchingNotification'
NSString* _get_NSApplicationWillFinishLaunchingNotification(void);

// setter for constant 'NSApplicationWillFinishLaunchingNotification'
void _set_NSApplicationWillFinishLaunchingNotification(NSString* value);

// getter for constant 'NSApplicationWillHideNotification'
NSString* _get_NSApplicationWillHideNotification(void);

// setter for constant 'NSApplicationWillHideNotification'
void _set_NSApplicationWillHideNotification(NSString* value);

// getter for constant 'NSApplicationWillResignActiveNotification'
NSString* _get_NSApplicationWillResignActiveNotification(void);

// setter for constant 'NSApplicationWillResignActiveNotification'
void _set_NSApplicationWillResignActiveNotification(NSString* value);

// getter for constant 'NSApplicationWillTerminateNotification'
NSString* _get_NSApplicationWillTerminateNotification(void);

// setter for constant 'NSApplicationWillTerminateNotification'
void _set_NSApplicationWillTerminateNotification(NSString* value);

// getter for constant 'NSApplicationWillUnhideNotification'
NSString* _get_NSApplicationWillUnhideNotification(void);

// setter for constant 'NSApplicationWillUnhideNotification'
void _set_NSApplicationWillUnhideNotification(NSString* value);

// getter for constant 'NSApplicationWillUpdateNotification'
NSString* _get_NSApplicationWillUpdateNotification(void);

// setter for constant 'NSApplicationWillUpdateNotification'
void _set_NSApplicationWillUpdateNotification(NSString* value);

// getter for constant 'NSArgumentBinding'
NSString* _get_NSArgumentBinding(void);

// setter for constant 'NSArgumentBinding'
void _set_NSArgumentBinding(NSString* value);

// getter for constant 'NSAttachmentAttributeName'
NSString* _get_NSAttachmentAttributeName(void);

// setter for constant 'NSAttachmentAttributeName'
void _set_NSAttachmentAttributeName(NSString* value);

// getter for constant 'NSAttributedStringBinding'
NSString* _get_NSAttributedStringBinding(void);

// setter for constant 'NSAttributedStringBinding'
void _set_NSAttributedStringBinding(NSString* value);

// getter for constant 'NSAuthorDocumentAttribute'
NSString* _get_NSAuthorDocumentAttribute(void);

// setter for constant 'NSAuthorDocumentAttribute'
void _set_NSAuthorDocumentAttribute(NSString* value);

// getter for constant 'NSBackgroundColorAttributeName'
NSString* _get_NSBackgroundColorAttributeName(void);

// setter for constant 'NSBackgroundColorAttributeName'
void _set_NSBackgroundColorAttributeName(NSString* value);

// getter for constant 'NSBackgroundColorDocumentAttribute'
NSString* _get_NSBackgroundColorDocumentAttribute(void);

// setter for constant 'NSBackgroundColorDocumentAttribute'
void _set_NSBackgroundColorDocumentAttribute(NSString* value);

// getter for constant 'NSBadBitmapParametersException'
NSString* _get_NSBadBitmapParametersException(void);

// setter for constant 'NSBadBitmapParametersException'
void _set_NSBadBitmapParametersException(NSString* value);

// getter for constant 'NSBadComparisonException'
NSString* _get_NSBadComparisonException(void);

// setter for constant 'NSBadComparisonException'
void _set_NSBadComparisonException(NSString* value);

// getter for constant 'NSBadRTFColorTableException'
NSString* _get_NSBadRTFColorTableException(void);

// setter for constant 'NSBadRTFColorTableException'
void _set_NSBadRTFColorTableException(NSString* value);

// getter for constant 'NSBadRTFDirectiveException'
NSString* _get_NSBadRTFDirectiveException(void);

// setter for constant 'NSBadRTFDirectiveException'
void _set_NSBadRTFDirectiveException(NSString* value);

// getter for constant 'NSBadRTFFontTableException'
NSString* _get_NSBadRTFFontTableException(void);

// setter for constant 'NSBadRTFFontTableException'
void _set_NSBadRTFFontTableException(NSString* value);

// getter for constant 'NSBadRTFStyleSheetException'
NSString* _get_NSBadRTFStyleSheetException(void);

// setter for constant 'NSBadRTFStyleSheetException'
void _set_NSBadRTFStyleSheetException(NSString* value);

// getter for constant 'NSBaseURLDocumentOption'
NSString* _get_NSBaseURLDocumentOption(void);

// setter for constant 'NSBaseURLDocumentOption'
void _set_NSBaseURLDocumentOption(NSString* value);

// getter for constant 'NSBaselineOffsetAttributeName'
NSString* _get_NSBaselineOffsetAttributeName(void);

// setter for constant 'NSBaselineOffsetAttributeName'
void _set_NSBaselineOffsetAttributeName(NSString* value);

// getter for constant 'NSBlack'
float _get_NSBlack(void);

// getter for constant 'NSBottomMarginDocumentAttribute'
NSString* _get_NSBottomMarginDocumentAttribute(void);

// setter for constant 'NSBottomMarginDocumentAttribute'
void _set_NSBottomMarginDocumentAttribute(NSString* value);

// getter for constant 'NSBrowserColumnConfigurationDidChangeNotification'
NSString* _get_NSBrowserColumnConfigurationDidChangeNotification(void);

// setter for constant 'NSBrowserColumnConfigurationDidChangeNotification'
void _set_NSBrowserColumnConfigurationDidChangeNotification(NSString* value);

// getter for constant 'NSBrowserIllegalDelegateException'
NSString* _get_NSBrowserIllegalDelegateException(void);

// setter for constant 'NSBrowserIllegalDelegateException'
void _set_NSBrowserIllegalDelegateException(NSString* value);

// getter for constant 'NSCalibratedBlackColorSpace'
NSString* _get_NSCalibratedBlackColorSpace(void);

// setter for constant 'NSCalibratedBlackColorSpace'
void _set_NSCalibratedBlackColorSpace(NSString* value);

// getter for constant 'NSCalibratedRGBColorSpace'
NSString* _get_NSCalibratedRGBColorSpace(void);

// setter for constant 'NSCalibratedRGBColorSpace'
void _set_NSCalibratedRGBColorSpace(NSString* value);

// getter for constant 'NSCalibratedWhiteColorSpace'
NSString* _get_NSCalibratedWhiteColorSpace(void);

// setter for constant 'NSCalibratedWhiteColorSpace'
void _set_NSCalibratedWhiteColorSpace(NSString* value);

// getter for constant 'NSCharacterEncodingDocumentAttribute'
NSString* _get_NSCharacterEncodingDocumentAttribute(void);

// setter for constant 'NSCharacterEncodingDocumentAttribute'
void _set_NSCharacterEncodingDocumentAttribute(NSString* value);

// getter for constant 'NSCharacterEncodingDocumentOption'
NSString* _get_NSCharacterEncodingDocumentOption(void);

// setter for constant 'NSCharacterEncodingDocumentOption'
void _set_NSCharacterEncodingDocumentOption(NSString* value);

// getter for constant 'NSCharacterShapeAttributeName'
NSString* _get_NSCharacterShapeAttributeName(void);

// setter for constant 'NSCharacterShapeAttributeName'
void _set_NSCharacterShapeAttributeName(NSString* value);

// getter for constant 'NSCocoaVersionDocumentAttribute'
NSString* _get_NSCocoaVersionDocumentAttribute(void);

// setter for constant 'NSCocoaVersionDocumentAttribute'
void _set_NSCocoaVersionDocumentAttribute(NSString* value);

// getter for constant 'NSColorListDidChangeNotification'
NSString* _get_NSColorListDidChangeNotification(void);

// setter for constant 'NSColorListDidChangeNotification'
void _set_NSColorListDidChangeNotification(NSString* value);

// getter for constant 'NSColorListIOException'
NSString* _get_NSColorListIOException(void);

// setter for constant 'NSColorListIOException'
void _set_NSColorListIOException(NSString* value);

// getter for constant 'NSColorListNotEditableException'
NSString* _get_NSColorListNotEditableException(void);

// setter for constant 'NSColorListNotEditableException'
void _set_NSColorListNotEditableException(NSString* value);

// getter for constant 'NSColorPanelColorDidChangeNotification'
NSString* _get_NSColorPanelColorDidChangeNotification(void);

// setter for constant 'NSColorPanelColorDidChangeNotification'
void _set_NSColorPanelColorDidChangeNotification(NSString* value);

// getter for constant 'NSColorPboardType'
NSString* _get_NSColorPboardType(void);

// setter for constant 'NSColorPboardType'
void _set_NSColorPboardType(NSString* value);

// getter for constant 'NSComboBoxSelectionDidChangeNotification'
NSString* _get_NSComboBoxSelectionDidChangeNotification(void);

// setter for constant 'NSComboBoxSelectionDidChangeNotification'
void _set_NSComboBoxSelectionDidChangeNotification(NSString* value);

// getter for constant 'NSComboBoxSelectionIsChangingNotification'
NSString* _get_NSComboBoxSelectionIsChangingNotification(void);

// setter for constant 'NSComboBoxSelectionIsChangingNotification'
void _set_NSComboBoxSelectionIsChangingNotification(NSString* value);

// getter for constant 'NSComboBoxWillDismissNotification'
NSString* _get_NSComboBoxWillDismissNotification(void);

// setter for constant 'NSComboBoxWillDismissNotification'
void _set_NSComboBoxWillDismissNotification(NSString* value);

// getter for constant 'NSComboBoxWillPopUpNotification'
NSString* _get_NSComboBoxWillPopUpNotification(void);

// setter for constant 'NSComboBoxWillPopUpNotification'
void _set_NSComboBoxWillPopUpNotification(NSString* value);

// getter for constant 'NSCommentDocumentAttribute'
NSString* _get_NSCommentDocumentAttribute(void);

// setter for constant 'NSCommentDocumentAttribute'
void _set_NSCommentDocumentAttribute(NSString* value);

// getter for constant 'NSCompanyDocumentAttribute'
NSString* _get_NSCompanyDocumentAttribute(void);

// setter for constant 'NSCompanyDocumentAttribute'
void _set_NSCompanyDocumentAttribute(NSString* value);

// getter for constant 'NSConditionallySetsEditableBindingOption'
NSString* _get_NSConditionallySetsEditableBindingOption(void);

// setter for constant 'NSConditionallySetsEditableBindingOption'
void _set_NSConditionallySetsEditableBindingOption(NSString* value);

// getter for constant 'NSConditionallySetsEnabledBindingOption'
NSString* _get_NSConditionallySetsEnabledBindingOption(void);

// setter for constant 'NSConditionallySetsEnabledBindingOption'
void _set_NSConditionallySetsEnabledBindingOption(NSString* value);

// getter for constant 'NSConditionallySetsHiddenBindingOption'
NSString* _get_NSConditionallySetsHiddenBindingOption(void);

// setter for constant 'NSConditionallySetsHiddenBindingOption'
void _set_NSConditionallySetsHiddenBindingOption(NSString* value);

// getter for constant 'NSContentArrayBinding'
NSString* _get_NSContentArrayBinding(void);

// setter for constant 'NSContentArrayBinding'
void _set_NSContentArrayBinding(NSString* value);

// getter for constant 'NSContentArrayForMultipleSelectionBinding'
NSString* _get_NSContentArrayForMultipleSelectionBinding(void);

// setter for constant 'NSContentArrayForMultipleSelectionBinding'
void _set_NSContentArrayForMultipleSelectionBinding(NSString* value);

// getter for constant 'NSContentBinding'
NSString* _get_NSContentBinding(void);

// setter for constant 'NSContentBinding'
void _set_NSContentBinding(NSString* value);

// getter for constant 'NSContentHeightBinding'
NSString* _get_NSContentHeightBinding(void);

// setter for constant 'NSContentHeightBinding'
void _set_NSContentHeightBinding(NSString* value);

// getter for constant 'NSContentObjectBinding'
NSString* _get_NSContentObjectBinding(void);

// setter for constant 'NSContentObjectBinding'
void _set_NSContentObjectBinding(NSString* value);

// getter for constant 'NSContentObjectsBinding'
NSString* _get_NSContentObjectsBinding(void);

// setter for constant 'NSContentObjectsBinding'
void _set_NSContentObjectsBinding(NSString* value);

// getter for constant 'NSContentSetBinding'
NSString* _get_NSContentSetBinding(void);

// setter for constant 'NSContentSetBinding'
void _set_NSContentSetBinding(NSString* value);

// getter for constant 'NSContentValuesBinding'
NSString* _get_NSContentValuesBinding(void);

// setter for constant 'NSContentValuesBinding'
void _set_NSContentValuesBinding(NSString* value);

// getter for constant 'NSContentWidthBinding'
NSString* _get_NSContentWidthBinding(void);

// setter for constant 'NSContentWidthBinding'
void _set_NSContentWidthBinding(NSString* value);

// getter for constant 'NSContextHelpModeDidActivateNotification'
NSString* _get_NSContextHelpModeDidActivateNotification(void);

// setter for constant 'NSContextHelpModeDidActivateNotification'
void _set_NSContextHelpModeDidActivateNotification(NSString* value);

// getter for constant 'NSContextHelpModeDidDeactivateNotification'
NSString* _get_NSContextHelpModeDidDeactivateNotification(void);

// setter for constant 'NSContextHelpModeDidDeactivateNotification'
void _set_NSContextHelpModeDidDeactivateNotification(NSString* value);

// getter for constant 'NSContinuouslyUpdatesValueBindingOption'
NSString* _get_NSContinuouslyUpdatesValueBindingOption(void);

// setter for constant 'NSContinuouslyUpdatesValueBindingOption'
void _set_NSContinuouslyUpdatesValueBindingOption(NSString* value);

// getter for constant 'NSControlTextDidBeginEditingNotification'
NSString* _get_NSControlTextDidBeginEditingNotification(void);

// setter for constant 'NSControlTextDidBeginEditingNotification'
void _set_NSControlTextDidBeginEditingNotification(NSString* value);

// getter for constant 'NSControlTextDidChangeNotification'
NSString* _get_NSControlTextDidChangeNotification(void);

// setter for constant 'NSControlTextDidChangeNotification'
void _set_NSControlTextDidChangeNotification(NSString* value);

// getter for constant 'NSControlTextDidEndEditingNotification'
NSString* _get_NSControlTextDidEndEditingNotification(void);

// setter for constant 'NSControlTextDidEndEditingNotification'
void _set_NSControlTextDidEndEditingNotification(NSString* value);

// getter for constant 'NSControlTintDidChangeNotification'
NSString* _get_NSControlTintDidChangeNotification(void);

// setter for constant 'NSControlTintDidChangeNotification'
void _set_NSControlTintDidChangeNotification(NSString* value);

// getter for constant 'NSConvertedDocumentAttribute'
NSString* _get_NSConvertedDocumentAttribute(void);

// setter for constant 'NSConvertedDocumentAttribute'
void _set_NSConvertedDocumentAttribute(NSString* value);

// getter for constant 'NSCopyrightDocumentAttribute'
NSString* _get_NSCopyrightDocumentAttribute(void);

// setter for constant 'NSCopyrightDocumentAttribute'
void _set_NSCopyrightDocumentAttribute(NSString* value);

// getter for constant 'NSCreatesSortDescriptorBindingOption'
NSString* _get_NSCreatesSortDescriptorBindingOption(void);

// setter for constant 'NSCreatesSortDescriptorBindingOption'
void _set_NSCreatesSortDescriptorBindingOption(NSString* value);

// getter for constant 'NSCreationTimeDocumentAttribute'
NSString* _get_NSCreationTimeDocumentAttribute(void);

// setter for constant 'NSCreationTimeDocumentAttribute'
void _set_NSCreationTimeDocumentAttribute(NSString* value);

// getter for constant 'NSCriticalValueBinding'
NSString* _get_NSCriticalValueBinding(void);

// setter for constant 'NSCriticalValueBinding'
void _set_NSCriticalValueBinding(NSString* value);

// getter for constant 'NSCursorAttributeName'
NSString* _get_NSCursorAttributeName(void);

// setter for constant 'NSCursorAttributeName'
void _set_NSCursorAttributeName(NSString* value);

// getter for constant 'NSCustomColorSpace'
NSString* _get_NSCustomColorSpace(void);

// setter for constant 'NSCustomColorSpace'
void _set_NSCustomColorSpace(NSString* value);

// getter for constant 'NSDarkGray'
float _get_NSDarkGray(void);

// getter for constant 'NSDataBinding'
NSString* _get_NSDataBinding(void);

// setter for constant 'NSDataBinding'
void _set_NSDataBinding(NSString* value);

// getter for constant 'NSDefaultAttributesDocumentOption'
NSString* _get_NSDefaultAttributesDocumentOption(void);

// setter for constant 'NSDefaultAttributesDocumentOption'
void _set_NSDefaultAttributesDocumentOption(NSString* value);

// getter for constant 'NSDefaultTabIntervalDocumentAttribute'
NSString* _get_NSDefaultTabIntervalDocumentAttribute(void);

// setter for constant 'NSDefaultTabIntervalDocumentAttribute'
void _set_NSDefaultTabIntervalDocumentAttribute(NSString* value);

// getter for constant 'NSDeletesObjectsOnRemoveBindingsOption'
NSString* _get_NSDeletesObjectsOnRemoveBindingsOption(void);

// setter for constant 'NSDeletesObjectsOnRemoveBindingsOption'
void _set_NSDeletesObjectsOnRemoveBindingsOption(NSString* value);

// getter for constant 'NSDeviceBitsPerSample'
NSString* _get_NSDeviceBitsPerSample(void);

// setter for constant 'NSDeviceBitsPerSample'
void _set_NSDeviceBitsPerSample(NSString* value);

// getter for constant 'NSDeviceBlackColorSpace'
NSString* _get_NSDeviceBlackColorSpace(void);

// setter for constant 'NSDeviceBlackColorSpace'
void _set_NSDeviceBlackColorSpace(NSString* value);

// getter for constant 'NSDeviceCMYKColorSpace'
NSString* _get_NSDeviceCMYKColorSpace(void);

// setter for constant 'NSDeviceCMYKColorSpace'
void _set_NSDeviceCMYKColorSpace(NSString* value);

// getter for constant 'NSDeviceColorSpaceName'
NSString* _get_NSDeviceColorSpaceName(void);

// setter for constant 'NSDeviceColorSpaceName'
void _set_NSDeviceColorSpaceName(NSString* value);

// getter for constant 'NSDeviceIsPrinter'
NSString* _get_NSDeviceIsPrinter(void);

// setter for constant 'NSDeviceIsPrinter'
void _set_NSDeviceIsPrinter(NSString* value);

// getter for constant 'NSDeviceIsScreen'
NSString* _get_NSDeviceIsScreen(void);

// setter for constant 'NSDeviceIsScreen'
void _set_NSDeviceIsScreen(NSString* value);

// getter for constant 'NSDeviceRGBColorSpace'
NSString* _get_NSDeviceRGBColorSpace(void);

// setter for constant 'NSDeviceRGBColorSpace'
void _set_NSDeviceRGBColorSpace(NSString* value);

// getter for constant 'NSDeviceResolution'
NSString* _get_NSDeviceResolution(void);

// setter for constant 'NSDeviceResolution'
void _set_NSDeviceResolution(NSString* value);

// getter for constant 'NSDeviceSize'
NSString* _get_NSDeviceSize(void);

// setter for constant 'NSDeviceSize'
void _set_NSDeviceSize(NSString* value);

// getter for constant 'NSDeviceWhiteColorSpace'
NSString* _get_NSDeviceWhiteColorSpace(void);

// setter for constant 'NSDeviceWhiteColorSpace'
void _set_NSDeviceWhiteColorSpace(NSString* value);

// getter for constant 'NSDirectoryFileType'
NSString* _get_NSDirectoryFileType(void);

// setter for constant 'NSDirectoryFileType'
void _set_NSDirectoryFileType(NSString* value);

// getter for constant 'NSDisplayNameBindingOption'
NSString* _get_NSDisplayNameBindingOption(void);

// setter for constant 'NSDisplayNameBindingOption'
void _set_NSDisplayNameBindingOption(NSString* value);

// getter for constant 'NSDisplayPatternBindingOption'
NSString* _get_NSDisplayPatternBindingOption(void);

// setter for constant 'NSDisplayPatternBindingOption'
void _set_NSDisplayPatternBindingOption(NSString* value);

// getter for constant 'NSDisplayPatternTitleBinding'
NSString* _get_NSDisplayPatternTitleBinding(void);

// setter for constant 'NSDisplayPatternTitleBinding'
void _set_NSDisplayPatternTitleBinding(NSString* value);

// getter for constant 'NSDisplayPatternValueBinding'
NSString* _get_NSDisplayPatternValueBinding(void);

// setter for constant 'NSDisplayPatternValueBinding'
void _set_NSDisplayPatternValueBinding(NSString* value);

// getter for constant 'NSDocFormatTextDocumentType'
NSString* _get_NSDocFormatTextDocumentType(void);

// setter for constant 'NSDocFormatTextDocumentType'
void _set_NSDocFormatTextDocumentType(NSString* value);

// getter for constant 'NSDocumentEditedBinding'
NSString* _get_NSDocumentEditedBinding(void);

// setter for constant 'NSDocumentEditedBinding'
void _set_NSDocumentEditedBinding(NSString* value);

// getter for constant 'NSDocumentTypeDocumentAttribute'
NSString* _get_NSDocumentTypeDocumentAttribute(void);

// setter for constant 'NSDocumentTypeDocumentAttribute'
void _set_NSDocumentTypeDocumentAttribute(NSString* value);

// getter for constant 'NSDocumentTypeDocumentOption'
NSString* _get_NSDocumentTypeDocumentOption(void);

// setter for constant 'NSDocumentTypeDocumentOption'
void _set_NSDocumentTypeDocumentOption(NSString* value);

// getter for constant 'NSDoubleClickArgumentBinding'
NSString* _get_NSDoubleClickArgumentBinding(void);

// setter for constant 'NSDoubleClickArgumentBinding'
void _set_NSDoubleClickArgumentBinding(NSString* value);

// getter for constant 'NSDoubleClickTargetBinding'
NSString* _get_NSDoubleClickTargetBinding(void);

// setter for constant 'NSDoubleClickTargetBinding'
void _set_NSDoubleClickTargetBinding(NSString* value);

// getter for constant 'NSDragPboard'
NSString* _get_NSDragPboard(void);

// setter for constant 'NSDragPboard'
void _set_NSDragPboard(NSString* value);

// getter for constant 'NSDraggingException'
NSString* _get_NSDraggingException(void);

// setter for constant 'NSDraggingException'
void _set_NSDraggingException(NSString* value);

// getter for constant 'NSDrawerDidCloseNotification'
NSString* _get_NSDrawerDidCloseNotification(void);

// setter for constant 'NSDrawerDidCloseNotification'
void _set_NSDrawerDidCloseNotification(NSString* value);

// getter for constant 'NSDrawerDidOpenNotification'
NSString* _get_NSDrawerDidOpenNotification(void);

// setter for constant 'NSDrawerDidOpenNotification'
void _set_NSDrawerDidOpenNotification(NSString* value);

// getter for constant 'NSDrawerWillCloseNotification'
NSString* _get_NSDrawerWillCloseNotification(void);

// setter for constant 'NSDrawerWillCloseNotification'
void _set_NSDrawerWillCloseNotification(NSString* value);

// getter for constant 'NSDrawerWillOpenNotification'
NSString* _get_NSDrawerWillOpenNotification(void);

// setter for constant 'NSDrawerWillOpenNotification'
void _set_NSDrawerWillOpenNotification(NSString* value);

// getter for constant 'NSEditableBinding'
NSString* _get_NSEditableBinding(void);

// setter for constant 'NSEditableBinding'
void _set_NSEditableBinding(NSString* value);

// getter for constant 'NSEditorDocumentAttribute'
NSString* _get_NSEditorDocumentAttribute(void);

// setter for constant 'NSEditorDocumentAttribute'
void _set_NSEditorDocumentAttribute(NSString* value);

// getter for constant 'NSEnabledBinding'
NSString* _get_NSEnabledBinding(void);

// setter for constant 'NSEnabledBinding'
void _set_NSEnabledBinding(NSString* value);

// getter for constant 'NSEventTrackingRunLoopMode'
NSString* _get_NSEventTrackingRunLoopMode(void);

// setter for constant 'NSEventTrackingRunLoopMode'
void _set_NSEventTrackingRunLoopMode(NSString* value);

// getter for constant 'NSExcludedElementsDocumentAttribute'
NSString* _get_NSExcludedElementsDocumentAttribute(void);

// setter for constant 'NSExcludedElementsDocumentAttribute'
void _set_NSExcludedElementsDocumentAttribute(NSString* value);

// getter for constant 'NSExpansionAttributeName'
NSString* _get_NSExpansionAttributeName(void);

// setter for constant 'NSExpansionAttributeName'
void _set_NSExpansionAttributeName(NSString* value);

// getter for constant 'NSFileContentsPboardType'
NSString* _get_NSFileContentsPboardType(void);

// setter for constant 'NSFileContentsPboardType'
void _set_NSFileContentsPboardType(NSString* value);

// getter for constant 'NSFilenamesPboardType'
NSString* _get_NSFilenamesPboardType(void);

// setter for constant 'NSFilenamesPboardType'
void _set_NSFilenamesPboardType(NSString* value);

// getter for constant 'NSFilesPromisePboardType'
NSString* _get_NSFilesPromisePboardType(void);

// setter for constant 'NSFilesPromisePboardType'
void _set_NSFilesPromisePboardType(NSString* value);

// getter for constant 'NSFilesystemFileType'
NSString* _get_NSFilesystemFileType(void);

// setter for constant 'NSFilesystemFileType'
void _set_NSFilesystemFileType(NSString* value);

// getter for constant 'NSFilterPredicateBinding'
NSString* _get_NSFilterPredicateBinding(void);

// setter for constant 'NSFilterPredicateBinding'
void _set_NSFilterPredicateBinding(NSString* value);

// getter for constant 'NSFindPboard'
NSString* _get_NSFindPboard(void);

// setter for constant 'NSFindPboard'
void _set_NSFindPboard(NSString* value);

// getter for constant 'NSFontAttributeName'
NSString* _get_NSFontAttributeName(void);

// setter for constant 'NSFontAttributeName'
void _set_NSFontAttributeName(NSString* value);

// getter for constant 'NSFontBinding'
NSString* _get_NSFontBinding(void);

// setter for constant 'NSFontBinding'
void _set_NSFontBinding(NSString* value);

// getter for constant 'NSFontBoldBinding'
NSString* _get_NSFontBoldBinding(void);

// setter for constant 'NSFontBoldBinding'
void _set_NSFontBoldBinding(NSString* value);

// getter for constant 'NSFontCascadeListAttribute'
NSString* _get_NSFontCascadeListAttribute(void);

// setter for constant 'NSFontCascadeListAttribute'
void _set_NSFontCascadeListAttribute(NSString* value);

// getter for constant 'NSFontCharacterSetAttribute'
NSString* _get_NSFontCharacterSetAttribute(void);

// setter for constant 'NSFontCharacterSetAttribute'
void _set_NSFontCharacterSetAttribute(NSString* value);

// getter for constant 'NSFontColorAttribute'
NSString* _get_NSFontColorAttribute(void);

// setter for constant 'NSFontColorAttribute'
void _set_NSFontColorAttribute(NSString* value);

// getter for constant 'NSFontFaceAttribute'
NSString* _get_NSFontFaceAttribute(void);

// setter for constant 'NSFontFaceAttribute'
void _set_NSFontFaceAttribute(NSString* value);

// getter for constant 'NSFontFamilyAttribute'
NSString* _get_NSFontFamilyAttribute(void);

// setter for constant 'NSFontFamilyAttribute'
void _set_NSFontFamilyAttribute(NSString* value);

// getter for constant 'NSFontFamilyNameBinding'
NSString* _get_NSFontFamilyNameBinding(void);

// setter for constant 'NSFontFamilyNameBinding'
void _set_NSFontFamilyNameBinding(NSString* value);

// getter for constant 'NSFontFixedAdvanceAttribute'
NSString* _get_NSFontFixedAdvanceAttribute(void);

// setter for constant 'NSFontFixedAdvanceAttribute'
void _set_NSFontFixedAdvanceAttribute(NSString* value);

// getter for constant 'NSFontIdentityMatrix'
float *_get_NSFontIdentityMatrix(void);

// getter for constant 'NSFontItalicBinding'
NSString* _get_NSFontItalicBinding(void);

// setter for constant 'NSFontItalicBinding'
void _set_NSFontItalicBinding(NSString* value);

// getter for constant 'NSFontMatrixAttribute'
NSString* _get_NSFontMatrixAttribute(void);

// setter for constant 'NSFontMatrixAttribute'
void _set_NSFontMatrixAttribute(NSString* value);

// getter for constant 'NSFontNameAttribute'
NSString* _get_NSFontNameAttribute(void);

// setter for constant 'NSFontNameAttribute'
void _set_NSFontNameAttribute(NSString* value);

// getter for constant 'NSFontNameBinding'
NSString* _get_NSFontNameBinding(void);

// setter for constant 'NSFontNameBinding'
void _set_NSFontNameBinding(NSString* value);

// getter for constant 'NSFontPboard'
NSString* _get_NSFontPboard(void);

// setter for constant 'NSFontPboard'
void _set_NSFontPboard(NSString* value);

// getter for constant 'NSFontPboardType'
NSString* _get_NSFontPboardType(void);

// setter for constant 'NSFontPboardType'
void _set_NSFontPboardType(NSString* value);

// getter for constant 'NSFontSetChangedNotification'
NSString* _get_NSFontSetChangedNotification(void);

// setter for constant 'NSFontSetChangedNotification'
void _set_NSFontSetChangedNotification(NSString* value);

// getter for constant 'NSFontSizeAttribute'
NSString* _get_NSFontSizeAttribute(void);

// setter for constant 'NSFontSizeAttribute'
void _set_NSFontSizeAttribute(NSString* value);

// getter for constant 'NSFontSizeBinding'
NSString* _get_NSFontSizeBinding(void);

// setter for constant 'NSFontSizeBinding'
void _set_NSFontSizeBinding(NSString* value);

// getter for constant 'NSFontSlantTrait'
NSString* _get_NSFontSlantTrait(void);

// setter for constant 'NSFontSlantTrait'
void _set_NSFontSlantTrait(NSString* value);

// getter for constant 'NSFontSymbolicTrait'
NSString* _get_NSFontSymbolicTrait(void);

// setter for constant 'NSFontSymbolicTrait'
void _set_NSFontSymbolicTrait(NSString* value);

// getter for constant 'NSFontTraitsAttribute'
NSString* _get_NSFontTraitsAttribute(void);

// setter for constant 'NSFontTraitsAttribute'
void _set_NSFontTraitsAttribute(NSString* value);

// getter for constant 'NSFontUnavailableException'
NSString* _get_NSFontUnavailableException(void);

// setter for constant 'NSFontUnavailableException'
void _set_NSFontUnavailableException(NSString* value);

// getter for constant 'NSFontVariationAttribute'
NSString* _get_NSFontVariationAttribute(void);

// setter for constant 'NSFontVariationAttribute'
void _set_NSFontVariationAttribute(NSString* value);

// getter for constant 'NSFontVariationAxisDefaultValueKey'
NSString* _get_NSFontVariationAxisDefaultValueKey(void);

// setter for constant 'NSFontVariationAxisDefaultValueKey'
void _set_NSFontVariationAxisDefaultValueKey(NSString* value);

// getter for constant 'NSFontVariationAxisIdentifierKey'
NSString* _get_NSFontVariationAxisIdentifierKey(void);

// setter for constant 'NSFontVariationAxisIdentifierKey'
void _set_NSFontVariationAxisIdentifierKey(NSString* value);

// getter for constant 'NSFontVariationAxisMaximumValueKey'
NSString* _get_NSFontVariationAxisMaximumValueKey(void);

// setter for constant 'NSFontVariationAxisMaximumValueKey'
void _set_NSFontVariationAxisMaximumValueKey(NSString* value);

// getter for constant 'NSFontVariationAxisMinimumValueKey'
NSString* _get_NSFontVariationAxisMinimumValueKey(void);

// setter for constant 'NSFontVariationAxisMinimumValueKey'
void _set_NSFontVariationAxisMinimumValueKey(NSString* value);

// getter for constant 'NSFontVariationAxisNameKey'
NSString* _get_NSFontVariationAxisNameKey(void);

// setter for constant 'NSFontVariationAxisNameKey'
void _set_NSFontVariationAxisNameKey(NSString* value);

// getter for constant 'NSFontVisibleNameAttribute'
NSString* _get_NSFontVisibleNameAttribute(void);

// setter for constant 'NSFontVisibleNameAttribute'
void _set_NSFontVisibleNameAttribute(NSString* value);

// getter for constant 'NSFontWeightTrait'
NSString* _get_NSFontWeightTrait(void);

// setter for constant 'NSFontWeightTrait'
void _set_NSFontWeightTrait(NSString* value);

// getter for constant 'NSFontWidthTrait'
NSString* _get_NSFontWidthTrait(void);

// setter for constant 'NSFontWidthTrait'
void _set_NSFontWidthTrait(NSString* value);

// getter for constant 'NSForegroundColorAttributeName'
NSString* _get_NSForegroundColorAttributeName(void);

// setter for constant 'NSForegroundColorAttributeName'
void _set_NSForegroundColorAttributeName(NSString* value);

// getter for constant 'NSGeneralPboard'
NSString* _get_NSGeneralPboard(void);

// setter for constant 'NSGeneralPboard'
void _set_NSGeneralPboard(NSString* value);

// getter for constant 'NSGlyphInfoAttributeName'
NSString* _get_NSGlyphInfoAttributeName(void);

// setter for constant 'NSGlyphInfoAttributeName'
void _set_NSGlyphInfoAttributeName(NSString* value);

// getter for constant 'NSGraphicsContextDestinationAttributeName'
NSString* _get_NSGraphicsContextDestinationAttributeName(void);

// setter for constant 'NSGraphicsContextDestinationAttributeName'
void _set_NSGraphicsContextDestinationAttributeName(NSString* value);

// getter for constant 'NSGraphicsContextPDFFormat'
NSString* _get_NSGraphicsContextPDFFormat(void);

// setter for constant 'NSGraphicsContextPDFFormat'
void _set_NSGraphicsContextPDFFormat(NSString* value);

// getter for constant 'NSGraphicsContextPSFormat'
NSString* _get_NSGraphicsContextPSFormat(void);

// setter for constant 'NSGraphicsContextPSFormat'
void _set_NSGraphicsContextPSFormat(NSString* value);

// getter for constant 'NSGraphicsContextRepresentationFormatAttributeName'
NSString* _get_NSGraphicsContextRepresentationFormatAttributeName(void);

// setter for constant 'NSGraphicsContextRepresentationFormatAttributeName'
void _set_NSGraphicsContextRepresentationFormatAttributeName(NSString* value);

// getter for constant 'NSHTMLPboardType'
NSString* _get_NSHTMLPboardType(void);

// setter for constant 'NSHTMLPboardType'
void _set_NSHTMLPboardType(NSString* value);

// getter for constant 'NSHTMLTextDocumentType'
NSString* _get_NSHTMLTextDocumentType(void);

// setter for constant 'NSHTMLTextDocumentType'
void _set_NSHTMLTextDocumentType(NSString* value);

// getter for constant 'NSHandlesContentAsCompoundValueBindingOption'
NSString* _get_NSHandlesContentAsCompoundValueBindingOption(void);

// setter for constant 'NSHandlesContentAsCompoundValueBindingOption'
void _set_NSHandlesContentAsCompoundValueBindingOption(NSString* value);

// getter for constant 'NSHeaderTitleBinding'
NSString* _get_NSHeaderTitleBinding(void);

// setter for constant 'NSHeaderTitleBinding'
void _set_NSHeaderTitleBinding(NSString* value);

// getter for constant 'NSHiddenBinding'
NSString* _get_NSHiddenBinding(void);

// setter for constant 'NSHiddenBinding'
void _set_NSHiddenBinding(NSString* value);

// getter for constant 'NSHyphenationFactorDocumentAttribute'
NSString* _get_NSHyphenationFactorDocumentAttribute(void);

// setter for constant 'NSHyphenationFactorDocumentAttribute'
void _set_NSHyphenationFactorDocumentAttribute(NSString* value);

// getter for constant 'NSIllegalSelectorException'
NSString* _get_NSIllegalSelectorException(void);

// setter for constant 'NSIllegalSelectorException'
void _set_NSIllegalSelectorException(NSString* value);

// getter for constant 'NSImageBinding'
NSString* _get_NSImageBinding(void);

// setter for constant 'NSImageBinding'
void _set_NSImageBinding(NSString* value);

// getter for constant 'NSImageCacheException'
NSString* _get_NSImageCacheException(void);

// setter for constant 'NSImageCacheException'
void _set_NSImageCacheException(NSString* value);

// getter for constant 'NSImageColorSyncProfileData'
NSString* _get_NSImageColorSyncProfileData(void);

// setter for constant 'NSImageColorSyncProfileData'
void _set_NSImageColorSyncProfileData(NSString* value);

// getter for constant 'NSImageCompressionFactor'
NSString* _get_NSImageCompressionFactor(void);

// setter for constant 'NSImageCompressionFactor'
void _set_NSImageCompressionFactor(NSString* value);

// getter for constant 'NSImageCompressionMethod'
NSString* _get_NSImageCompressionMethod(void);

// setter for constant 'NSImageCompressionMethod'
void _set_NSImageCompressionMethod(NSString* value);

// getter for constant 'NSImageCurrentFrame'
NSString* _get_NSImageCurrentFrame(void);

// setter for constant 'NSImageCurrentFrame'
void _set_NSImageCurrentFrame(NSString* value);

// getter for constant 'NSImageCurrentFrameDuration'
NSString* _get_NSImageCurrentFrameDuration(void);

// setter for constant 'NSImageCurrentFrameDuration'
void _set_NSImageCurrentFrameDuration(NSString* value);

// getter for constant 'NSImageDitherTransparency'
NSString* _get_NSImageDitherTransparency(void);

// setter for constant 'NSImageDitherTransparency'
void _set_NSImageDitherTransparency(NSString* value);

// getter for constant 'NSImageEXIFData'
NSString* _get_NSImageEXIFData(void);

// setter for constant 'NSImageEXIFData'
void _set_NSImageEXIFData(NSString* value);

// getter for constant 'NSImageFrameCount'
NSString* _get_NSImageFrameCount(void);

// setter for constant 'NSImageFrameCount'
void _set_NSImageFrameCount(NSString* value);

// getter for constant 'NSImageGamma'
NSString* _get_NSImageGamma(void);

// setter for constant 'NSImageGamma'
void _set_NSImageGamma(NSString* value);

// getter for constant 'NSImageInterlaced'
NSString* _get_NSImageInterlaced(void);

// setter for constant 'NSImageInterlaced'
void _set_NSImageInterlaced(NSString* value);

// getter for constant 'NSImageLoopCount'
NSString* _get_NSImageLoopCount(void);

// setter for constant 'NSImageLoopCount'
void _set_NSImageLoopCount(NSString* value);

// getter for constant 'NSImageProgressive'
NSString* _get_NSImageProgressive(void);

// setter for constant 'NSImageProgressive'
void _set_NSImageProgressive(NSString* value);

// getter for constant 'NSImageRGBColorTable'
NSString* _get_NSImageRGBColorTable(void);

// setter for constant 'NSImageRGBColorTable'
void _set_NSImageRGBColorTable(NSString* value);

// getter for constant 'NSImageRepRegistryDidChangeNotification'
NSString* _get_NSImageRepRegistryDidChangeNotification(void);

// setter for constant 'NSImageRepRegistryDidChangeNotification'
void _set_NSImageRepRegistryDidChangeNotification(NSString* value);

// getter for constant 'NSInkTextPboardType'
NSString* _get_NSInkTextPboardType(void);

// setter for constant 'NSInkTextPboardType'
void _set_NSInkTextPboardType(NSString* value);

// getter for constant 'NSInsertsNullPlaceholderBindingOption'
NSString* _get_NSInsertsNullPlaceholderBindingOption(void);

// setter for constant 'NSInsertsNullPlaceholderBindingOption'
void _set_NSInsertsNullPlaceholderBindingOption(NSString* value);

// getter for constant 'NSInterfaceStyleDefault'
NSString* _get_NSInterfaceStyleDefault(void);

// setter for constant 'NSInterfaceStyleDefault'
void _set_NSInterfaceStyleDefault(NSString* value);

// getter for constant 'NSInvokesSeparatelyWithArrayObjectsBindingOption'
NSString* _get_NSInvokesSeparatelyWithArrayObjectsBindingOption(void);

// setter for constant 'NSInvokesSeparatelyWithArrayObjectsBindingOption'
void _set_NSInvokesSeparatelyWithArrayObjectsBindingOption(NSString* value);

// getter for constant 'NSIsIndeterminateBinding'
NSString* _get_NSIsIndeterminateBinding(void);

// setter for constant 'NSIsIndeterminateBinding'
void _set_NSIsIndeterminateBinding(NSString* value);

// getter for constant 'NSKernAttributeName'
NSString* _get_NSKernAttributeName(void);

// setter for constant 'NSKernAttributeName'
void _set_NSKernAttributeName(NSString* value);

// getter for constant 'NSKeywordsDocumentAttribute'
NSString* _get_NSKeywordsDocumentAttribute(void);

// setter for constant 'NSKeywordsDocumentAttribute'
void _set_NSKeywordsDocumentAttribute(NSString* value);

// getter for constant 'NSLabelBinding'
NSString* _get_NSLabelBinding(void);

// setter for constant 'NSLabelBinding'
void _set_NSLabelBinding(NSString* value);

// getter for constant 'NSLeftMarginDocumentAttribute'
NSString* _get_NSLeftMarginDocumentAttribute(void);

// setter for constant 'NSLeftMarginDocumentAttribute'
void _set_NSLeftMarginDocumentAttribute(NSString* value);

// getter for constant 'NSLigatureAttributeName'
NSString* _get_NSLigatureAttributeName(void);

// setter for constant 'NSLigatureAttributeName'
void _set_NSLigatureAttributeName(NSString* value);

// getter for constant 'NSLightGray'
float _get_NSLightGray(void);

// getter for constant 'NSLinkAttributeName'
NSString* _get_NSLinkAttributeName(void);

// setter for constant 'NSLinkAttributeName'
void _set_NSLinkAttributeName(NSString* value);

// getter for constant 'NSMacSimpleTextDocumentType'
NSString* _get_NSMacSimpleTextDocumentType(void);

// setter for constant 'NSMacSimpleTextDocumentType'
void _set_NSMacSimpleTextDocumentType(NSString* value);

// getter for constant 'NSManagedObjectContextBinding'
NSString* _get_NSManagedObjectContextBinding(void);

// setter for constant 'NSManagedObjectContextBinding'
void _set_NSManagedObjectContextBinding(NSString* value);

// getter for constant 'NSMaxValueBinding'
NSString* _get_NSMaxValueBinding(void);

// setter for constant 'NSMaxValueBinding'
void _set_NSMaxValueBinding(NSString* value);

// getter for constant 'NSMaxWidthBinding'
NSString* _get_NSMaxWidthBinding(void);

// setter for constant 'NSMaxWidthBinding'
void _set_NSMaxWidthBinding(NSString* value);

// getter for constant 'NSMaximumRecentsBinding'
NSString* _get_NSMaximumRecentsBinding(void);

// setter for constant 'NSMaximumRecentsBinding'
void _set_NSMaximumRecentsBinding(NSString* value);

// getter for constant 'NSMenuDidAddItemNotification'
NSString* _get_NSMenuDidAddItemNotification(void);

// setter for constant 'NSMenuDidAddItemNotification'
void _set_NSMenuDidAddItemNotification(NSString* value);

// getter for constant 'NSMenuDidChangeItemNotification'
NSString* _get_NSMenuDidChangeItemNotification(void);

// setter for constant 'NSMenuDidChangeItemNotification'
void _set_NSMenuDidChangeItemNotification(NSString* value);

// getter for constant 'NSMenuDidEndTrackingNotification'
NSString* _get_NSMenuDidEndTrackingNotification(void);

// setter for constant 'NSMenuDidEndTrackingNotification'
void _set_NSMenuDidEndTrackingNotification(NSString* value);

// getter for constant 'NSMenuDidRemoveItemNotification'
NSString* _get_NSMenuDidRemoveItemNotification(void);

// setter for constant 'NSMenuDidRemoveItemNotification'
void _set_NSMenuDidRemoveItemNotification(NSString* value);

// getter for constant 'NSMenuDidSendActionNotification'
NSString* _get_NSMenuDidSendActionNotification(void);

// setter for constant 'NSMenuDidSendActionNotification'
void _set_NSMenuDidSendActionNotification(NSString* value);

// getter for constant 'NSMenuWillSendActionNotification'
NSString* _get_NSMenuWillSendActionNotification(void);

// setter for constant 'NSMenuWillSendActionNotification'
void _set_NSMenuWillSendActionNotification(NSString* value);

// getter for constant 'NSMinValueBinding'
NSString* _get_NSMinValueBinding(void);

// setter for constant 'NSMinValueBinding'
void _set_NSMinValueBinding(NSString* value);

// getter for constant 'NSMinWidthBinding'
NSString* _get_NSMinWidthBinding(void);

// setter for constant 'NSMinWidthBinding'
void _set_NSMinWidthBinding(NSString* value);

// getter for constant 'NSMixedStateImageBinding'
NSString* _get_NSMixedStateImageBinding(void);

// setter for constant 'NSMixedStateImageBinding'
void _set_NSMixedStateImageBinding(NSString* value);

// getter for constant 'NSModalPanelRunLoopMode'
NSString* _get_NSModalPanelRunLoopMode(void);

// setter for constant 'NSModalPanelRunLoopMode'
void _set_NSModalPanelRunLoopMode(NSString* value);

// getter for constant 'NSModificationTimeDocumentAttribute'
NSString* _get_NSModificationTimeDocumentAttribute(void);

// setter for constant 'NSModificationTimeDocumentAttribute'
void _set_NSModificationTimeDocumentAttribute(NSString* value);

// getter for constant 'NSMultipleValuesMarker'
id _get_NSMultipleValuesMarker(void);

// setter for constant 'NSMultipleValuesMarker'
void _set_NSMultipleValuesMarker(id value);

// getter for constant 'NSMultipleValuesPlaceholderBindingOption'
NSString* _get_NSMultipleValuesPlaceholderBindingOption(void);

// setter for constant 'NSMultipleValuesPlaceholderBindingOption'
void _set_NSMultipleValuesPlaceholderBindingOption(NSString* value);

// getter for constant 'NSNamedColorSpace'
NSString* _get_NSNamedColorSpace(void);

// setter for constant 'NSNamedColorSpace'
void _set_NSNamedColorSpace(NSString* value);

// getter for constant 'NSNibLoadingException'
NSString* _get_NSNibLoadingException(void);

// setter for constant 'NSNibLoadingException'
void _set_NSNibLoadingException(NSString* value);

// getter for constant 'NSNibOwner'
NSString* _get_NSNibOwner(void);

// setter for constant 'NSNibOwner'
void _set_NSNibOwner(NSString* value);

// getter for constant 'NSNibTopLevelObjects'
NSString* _get_NSNibTopLevelObjects(void);

// setter for constant 'NSNibTopLevelObjects'
void _set_NSNibTopLevelObjects(NSString* value);

// getter for constant 'NSNoSelectionMarker'
id _get_NSNoSelectionMarker(void);

// setter for constant 'NSNoSelectionMarker'
void _set_NSNoSelectionMarker(id value);

// getter for constant 'NSNoSelectionPlaceholderBindingOption'
NSString* _get_NSNoSelectionPlaceholderBindingOption(void);

// setter for constant 'NSNoSelectionPlaceholderBindingOption'
void _set_NSNoSelectionPlaceholderBindingOption(NSString* value);

// getter for constant 'NSNotApplicableMarker'
id _get_NSNotApplicableMarker(void);

// setter for constant 'NSNotApplicableMarker'
void _set_NSNotApplicableMarker(id value);

// getter for constant 'NSNotApplicablePlaceholderBindingOption'
NSString* _get_NSNotApplicablePlaceholderBindingOption(void);

// setter for constant 'NSNotApplicablePlaceholderBindingOption'
void _set_NSNotApplicablePlaceholderBindingOption(NSString* value);

// getter for constant 'NSNullPlaceholderBindingOption'
NSString* _get_NSNullPlaceholderBindingOption(void);

// setter for constant 'NSNullPlaceholderBindingOption'
void _set_NSNullPlaceholderBindingOption(NSString* value);

// getter for constant 'NSObliquenessAttributeName'
NSString* _get_NSObliquenessAttributeName(void);

// setter for constant 'NSObliquenessAttributeName'
void _set_NSObliquenessAttributeName(NSString* value);

// getter for constant 'NSObservedKeyPathKey'
NSString* _get_NSObservedKeyPathKey(void);

// setter for constant 'NSObservedKeyPathKey'
void _set_NSObservedKeyPathKey(NSString* value);

// getter for constant 'NSObservedObjectKey'
NSString* _get_NSObservedObjectKey(void);

// setter for constant 'NSObservedObjectKey'
void _set_NSObservedObjectKey(NSString* value);

// getter for constant 'NSOffStateImageBinding'
NSString* _get_NSOffStateImageBinding(void);

// setter for constant 'NSOffStateImageBinding'
void _set_NSOffStateImageBinding(NSString* value);

// getter for constant 'NSOnStateImageBinding'
NSString* _get_NSOnStateImageBinding(void);

// setter for constant 'NSOnStateImageBinding'
void _set_NSOnStateImageBinding(NSString* value);

// getter for constant 'NSOptionsKey'
NSString* _get_NSOptionsKey(void);

// setter for constant 'NSOptionsKey'
void _set_NSOptionsKey(NSString* value);

// getter for constant 'NSOutlineViewColumnDidMoveNotification'
NSString* _get_NSOutlineViewColumnDidMoveNotification(void);

// setter for constant 'NSOutlineViewColumnDidMoveNotification'
void _set_NSOutlineViewColumnDidMoveNotification(NSString* value);

// getter for constant 'NSOutlineViewColumnDidResizeNotification'
NSString* _get_NSOutlineViewColumnDidResizeNotification(void);

// setter for constant 'NSOutlineViewColumnDidResizeNotification'
void _set_NSOutlineViewColumnDidResizeNotification(NSString* value);

// getter for constant 'NSOutlineViewItemDidCollapseNotification'
NSString* _get_NSOutlineViewItemDidCollapseNotification(void);

// setter for constant 'NSOutlineViewItemDidCollapseNotification'
void _set_NSOutlineViewItemDidCollapseNotification(NSString* value);

// getter for constant 'NSOutlineViewItemDidExpandNotification'
NSString* _get_NSOutlineViewItemDidExpandNotification(void);

// setter for constant 'NSOutlineViewItemDidExpandNotification'
void _set_NSOutlineViewItemDidExpandNotification(NSString* value);

// getter for constant 'NSOutlineViewItemWillCollapseNotification'
NSString* _get_NSOutlineViewItemWillCollapseNotification(void);

// setter for constant 'NSOutlineViewItemWillCollapseNotification'
void _set_NSOutlineViewItemWillCollapseNotification(NSString* value);

// getter for constant 'NSOutlineViewItemWillExpandNotification'
NSString* _get_NSOutlineViewItemWillExpandNotification(void);

// setter for constant 'NSOutlineViewItemWillExpandNotification'
void _set_NSOutlineViewItemWillExpandNotification(NSString* value);

// getter for constant 'NSOutlineViewSelectionDidChangeNotification'
NSString* _get_NSOutlineViewSelectionDidChangeNotification(void);

// setter for constant 'NSOutlineViewSelectionDidChangeNotification'
void _set_NSOutlineViewSelectionDidChangeNotification(NSString* value);

// getter for constant 'NSOutlineViewSelectionIsChangingNotification'
NSString* _get_NSOutlineViewSelectionIsChangingNotification(void);

// setter for constant 'NSOutlineViewSelectionIsChangingNotification'
void _set_NSOutlineViewSelectionIsChangingNotification(NSString* value);

// getter for constant 'NSPDFPboardType'
NSString* _get_NSPDFPboardType(void);

// setter for constant 'NSPDFPboardType'
void _set_NSPDFPboardType(NSString* value);

// getter for constant 'NSPICTPboardType'
NSString* _get_NSPICTPboardType(void);

// setter for constant 'NSPICTPboardType'
void _set_NSPICTPboardType(NSString* value);

// getter for constant 'NSPPDIncludeNotFoundException'
NSString* _get_NSPPDIncludeNotFoundException(void);

// setter for constant 'NSPPDIncludeNotFoundException'
void _set_NSPPDIncludeNotFoundException(NSString* value);

// getter for constant 'NSPPDIncludeStackOverflowException'
NSString* _get_NSPPDIncludeStackOverflowException(void);

// setter for constant 'NSPPDIncludeStackOverflowException'
void _set_NSPPDIncludeStackOverflowException(NSString* value);

// getter for constant 'NSPPDIncludeStackUnderflowException'
NSString* _get_NSPPDIncludeStackUnderflowException(void);

// setter for constant 'NSPPDIncludeStackUnderflowException'
void _set_NSPPDIncludeStackUnderflowException(NSString* value);

// getter for constant 'NSPPDParseException'
NSString* _get_NSPPDParseException(void);

// setter for constant 'NSPPDParseException'
void _set_NSPPDParseException(NSString* value);

// getter for constant 'NSPaperSizeDocumentAttribute'
NSString* _get_NSPaperSizeDocumentAttribute(void);

// setter for constant 'NSPaperSizeDocumentAttribute'
void _set_NSPaperSizeDocumentAttribute(NSString* value);

// getter for constant 'NSParagraphStyleAttributeName'
NSString* _get_NSParagraphStyleAttributeName(void);

// setter for constant 'NSParagraphStyleAttributeName'
void _set_NSParagraphStyleAttributeName(NSString* value);

// getter for constant 'NSPasteboardCommunicationException'
NSString* _get_NSPasteboardCommunicationException(void);

// setter for constant 'NSPasteboardCommunicationException'
void _set_NSPasteboardCommunicationException(NSString* value);

// getter for constant 'NSPatternColorSpace'
NSString* _get_NSPatternColorSpace(void);

// setter for constant 'NSPatternColorSpace'
void _set_NSPatternColorSpace(NSString* value);

// getter for constant 'NSPlainFileType'
NSString* _get_NSPlainFileType(void);

// setter for constant 'NSPlainFileType'
void _set_NSPlainFileType(NSString* value);

// getter for constant 'NSPlainTextDocumentType'
NSString* _get_NSPlainTextDocumentType(void);

// setter for constant 'NSPlainTextDocumentType'
void _set_NSPlainTextDocumentType(NSString* value);

// getter for constant 'NSPopUpButtonCellWillPopUpNotification'
NSString* _get_NSPopUpButtonCellWillPopUpNotification(void);

// setter for constant 'NSPopUpButtonCellWillPopUpNotification'
void _set_NSPopUpButtonCellWillPopUpNotification(NSString* value);

// getter for constant 'NSPopUpButtonWillPopUpNotification'
NSString* _get_NSPopUpButtonWillPopUpNotification(void);

// setter for constant 'NSPopUpButtonWillPopUpNotification'
void _set_NSPopUpButtonWillPopUpNotification(NSString* value);

// getter for constant 'NSPostScriptPboardType'
NSString* _get_NSPostScriptPboardType(void);

// setter for constant 'NSPostScriptPboardType'
void _set_NSPostScriptPboardType(NSString* value);

// getter for constant 'NSPredicateBinding'
NSString* _get_NSPredicateBinding(void);

// setter for constant 'NSPredicateBinding'
void _set_NSPredicateBinding(NSString* value);

// getter for constant 'NSPredicateFormatBindingOption'
NSString* _get_NSPredicateFormatBindingOption(void);

// setter for constant 'NSPredicateFormatBindingOption'
void _set_NSPredicateFormatBindingOption(NSString* value);

// getter for constant 'NSPrefixSpacesDocumentAttribute'
NSString* _get_NSPrefixSpacesDocumentAttribute(void);

// setter for constant 'NSPrefixSpacesDocumentAttribute'
void _set_NSPrefixSpacesDocumentAttribute(NSString* value);

// getter for constant 'NSPrintAllPages'
NSString* _get_NSPrintAllPages(void);

// setter for constant 'NSPrintAllPages'
void _set_NSPrintAllPages(NSString* value);

// getter for constant 'NSPrintBottomMargin'
NSString* _get_NSPrintBottomMargin(void);

// setter for constant 'NSPrintBottomMargin'
void _set_NSPrintBottomMargin(NSString* value);

// getter for constant 'NSPrintCancelJob'
NSString* _get_NSPrintCancelJob(void);

// setter for constant 'NSPrintCancelJob'
void _set_NSPrintCancelJob(NSString* value);

// getter for constant 'NSPrintCopies'
NSString* _get_NSPrintCopies(void);

// setter for constant 'NSPrintCopies'
void _set_NSPrintCopies(NSString* value);

// getter for constant 'NSPrintDetailedErrorReporting'
NSString* _get_NSPrintDetailedErrorReporting(void);

// setter for constant 'NSPrintDetailedErrorReporting'
void _set_NSPrintDetailedErrorReporting(NSString* value);

// getter for constant 'NSPrintFaxCoverSheetName'
NSString* _get_NSPrintFaxCoverSheetName(void);

// setter for constant 'NSPrintFaxCoverSheetName'
void _set_NSPrintFaxCoverSheetName(NSString* value);

// getter for constant 'NSPrintFaxHighResolution'
NSString* _get_NSPrintFaxHighResolution(void);

// setter for constant 'NSPrintFaxHighResolution'
void _set_NSPrintFaxHighResolution(NSString* value);

// getter for constant 'NSPrintFaxJob'
NSString* _get_NSPrintFaxJob(void);

// setter for constant 'NSPrintFaxJob'
void _set_NSPrintFaxJob(NSString* value);

// getter for constant 'NSPrintFaxModem'
NSString* _get_NSPrintFaxModem(void);

// setter for constant 'NSPrintFaxModem'
void _set_NSPrintFaxModem(NSString* value);

// getter for constant 'NSPrintFaxNumber'
NSString* _get_NSPrintFaxNumber(void);

// setter for constant 'NSPrintFaxNumber'
void _set_NSPrintFaxNumber(NSString* value);

// getter for constant 'NSPrintFaxReceiverNames'
NSString* _get_NSPrintFaxReceiverNames(void);

// setter for constant 'NSPrintFaxReceiverNames'
void _set_NSPrintFaxReceiverNames(NSString* value);

// getter for constant 'NSPrintFaxReceiverNumbers'
NSString* _get_NSPrintFaxReceiverNumbers(void);

// setter for constant 'NSPrintFaxReceiverNumbers'
void _set_NSPrintFaxReceiverNumbers(NSString* value);

// getter for constant 'NSPrintFaxReturnReceipt'
NSString* _get_NSPrintFaxReturnReceipt(void);

// setter for constant 'NSPrintFaxReturnReceipt'
void _set_NSPrintFaxReturnReceipt(NSString* value);

// getter for constant 'NSPrintFaxSendTime'
NSString* _get_NSPrintFaxSendTime(void);

// setter for constant 'NSPrintFaxSendTime'
void _set_NSPrintFaxSendTime(NSString* value);

// getter for constant 'NSPrintFaxTrimPageEnds'
NSString* _get_NSPrintFaxTrimPageEnds(void);

// setter for constant 'NSPrintFaxTrimPageEnds'
void _set_NSPrintFaxTrimPageEnds(NSString* value);

// getter for constant 'NSPrintFaxUseCoverSheet'
NSString* _get_NSPrintFaxUseCoverSheet(void);

// setter for constant 'NSPrintFaxUseCoverSheet'
void _set_NSPrintFaxUseCoverSheet(NSString* value);

// getter for constant 'NSPrintFirstPage'
NSString* _get_NSPrintFirstPage(void);

// setter for constant 'NSPrintFirstPage'
void _set_NSPrintFirstPage(NSString* value);

// getter for constant 'NSPrintFormName'
NSString* _get_NSPrintFormName(void);

// setter for constant 'NSPrintFormName'
void _set_NSPrintFormName(NSString* value);

// getter for constant 'NSPrintHeaderAndFooter'
NSString* _get_NSPrintHeaderAndFooter(void);

// setter for constant 'NSPrintHeaderAndFooter'
void _set_NSPrintHeaderAndFooter(NSString* value);

// getter for constant 'NSPrintHorizontalPagination'
NSString* _get_NSPrintHorizontalPagination(void);

// setter for constant 'NSPrintHorizontalPagination'
void _set_NSPrintHorizontalPagination(NSString* value);

// getter for constant 'NSPrintHorizontallyCentered'
NSString* _get_NSPrintHorizontallyCentered(void);

// setter for constant 'NSPrintHorizontallyCentered'
void _set_NSPrintHorizontallyCentered(NSString* value);

// getter for constant 'NSPrintJobDisposition'
NSString* _get_NSPrintJobDisposition(void);

// setter for constant 'NSPrintJobDisposition'
void _set_NSPrintJobDisposition(NSString* value);

// getter for constant 'NSPrintJobFeatures'
NSString* _get_NSPrintJobFeatures(void);

// setter for constant 'NSPrintJobFeatures'
void _set_NSPrintJobFeatures(NSString* value);

// getter for constant 'NSPrintLastPage'
NSString* _get_NSPrintLastPage(void);

// setter for constant 'NSPrintLastPage'
void _set_NSPrintLastPage(NSString* value);

// getter for constant 'NSPrintLeftMargin'
NSString* _get_NSPrintLeftMargin(void);

// setter for constant 'NSPrintLeftMargin'
void _set_NSPrintLeftMargin(NSString* value);

// getter for constant 'NSPrintManualFeed'
NSString* _get_NSPrintManualFeed(void);

// setter for constant 'NSPrintManualFeed'
void _set_NSPrintManualFeed(NSString* value);

// getter for constant 'NSPrintMustCollate'
NSString* _get_NSPrintMustCollate(void);

// setter for constant 'NSPrintMustCollate'
void _set_NSPrintMustCollate(NSString* value);

// getter for constant 'NSPrintOperationExistsException'
NSString* _get_NSPrintOperationExistsException(void);

// setter for constant 'NSPrintOperationExistsException'
void _set_NSPrintOperationExistsException(NSString* value);

// getter for constant 'NSPrintOrientation'
NSString* _get_NSPrintOrientation(void);

// setter for constant 'NSPrintOrientation'
void _set_NSPrintOrientation(NSString* value);

// getter for constant 'NSPrintPackageException'
NSString* _get_NSPrintPackageException(void);

// setter for constant 'NSPrintPackageException'
void _set_NSPrintPackageException(NSString* value);

// getter for constant 'NSPrintPagesAcross'
NSString* _get_NSPrintPagesAcross(void);

// setter for constant 'NSPrintPagesAcross'
void _set_NSPrintPagesAcross(NSString* value);

// getter for constant 'NSPrintPagesDown'
NSString* _get_NSPrintPagesDown(void);

// setter for constant 'NSPrintPagesDown'
void _set_NSPrintPagesDown(NSString* value);

// getter for constant 'NSPrintPagesPerSheet'
NSString* _get_NSPrintPagesPerSheet(void);

// setter for constant 'NSPrintPagesPerSheet'
void _set_NSPrintPagesPerSheet(NSString* value);

// getter for constant 'NSPrintPaperFeed'
NSString* _get_NSPrintPaperFeed(void);

// setter for constant 'NSPrintPaperFeed'
void _set_NSPrintPaperFeed(NSString* value);

// getter for constant 'NSPrintPaperName'
NSString* _get_NSPrintPaperName(void);

// setter for constant 'NSPrintPaperName'
void _set_NSPrintPaperName(NSString* value);

// getter for constant 'NSPrintPaperSize'
NSString* _get_NSPrintPaperSize(void);

// setter for constant 'NSPrintPaperSize'
void _set_NSPrintPaperSize(NSString* value);

// getter for constant 'NSPrintPhotoJobStyleHint'
NSString* _get_NSPrintPhotoJobStyleHint(void);

// setter for constant 'NSPrintPhotoJobStyleHint'
void _set_NSPrintPhotoJobStyleHint(NSString* value);

// getter for constant 'NSPrintPreviewJob'
NSString* _get_NSPrintPreviewJob(void);

// setter for constant 'NSPrintPreviewJob'
void _set_NSPrintPreviewJob(NSString* value);

// getter for constant 'NSPrintPrinter'
NSString* _get_NSPrintPrinter(void);

// setter for constant 'NSPrintPrinter'
void _set_NSPrintPrinter(NSString* value);

// getter for constant 'NSPrintPrinterName'
NSString* _get_NSPrintPrinterName(void);

// setter for constant 'NSPrintPrinterName'
void _set_NSPrintPrinterName(NSString* value);

// getter for constant 'NSPrintReversePageOrder'
NSString* _get_NSPrintReversePageOrder(void);

// setter for constant 'NSPrintReversePageOrder'
void _set_NSPrintReversePageOrder(NSString* value);

// getter for constant 'NSPrintRightMargin'
NSString* _get_NSPrintRightMargin(void);

// setter for constant 'NSPrintRightMargin'
void _set_NSPrintRightMargin(NSString* value);

// getter for constant 'NSPrintSaveJob'
NSString* _get_NSPrintSaveJob(void);

// setter for constant 'NSPrintSaveJob'
void _set_NSPrintSaveJob(NSString* value);

// getter for constant 'NSPrintSavePath'
NSString* _get_NSPrintSavePath(void);

// setter for constant 'NSPrintSavePath'
void _set_NSPrintSavePath(NSString* value);

// getter for constant 'NSPrintScalingFactor'
NSString* _get_NSPrintScalingFactor(void);

// setter for constant 'NSPrintScalingFactor'
void _set_NSPrintScalingFactor(NSString* value);

// getter for constant 'NSPrintSpoolJob'
NSString* _get_NSPrintSpoolJob(void);

// setter for constant 'NSPrintSpoolJob'
void _set_NSPrintSpoolJob(NSString* value);

// getter for constant 'NSPrintTime'
NSString* _get_NSPrintTime(void);

// setter for constant 'NSPrintTime'
void _set_NSPrintTime(NSString* value);

// getter for constant 'NSPrintTopMargin'
NSString* _get_NSPrintTopMargin(void);

// setter for constant 'NSPrintTopMargin'
void _set_NSPrintTopMargin(NSString* value);

// getter for constant 'NSPrintVerticalPagination'
NSString* _get_NSPrintVerticalPagination(void);

// setter for constant 'NSPrintVerticalPagination'
void _set_NSPrintVerticalPagination(NSString* value);

// getter for constant 'NSPrintVerticallyCentered'
NSString* _get_NSPrintVerticallyCentered(void);

// setter for constant 'NSPrintVerticallyCentered'
void _set_NSPrintVerticallyCentered(NSString* value);

// getter for constant 'NSPrintingCommunicationException'
NSString* _get_NSPrintingCommunicationException(void);

// setter for constant 'NSPrintingCommunicationException'
void _set_NSPrintingCommunicationException(NSString* value);

// getter for constant 'NSRTFDPboardType'
NSString* _get_NSRTFDPboardType(void);

// setter for constant 'NSRTFDPboardType'
void _set_NSRTFDPboardType(NSString* value);

// getter for constant 'NSRTFDTextDocumentType'
NSString* _get_NSRTFDTextDocumentType(void);

// setter for constant 'NSRTFDTextDocumentType'
void _set_NSRTFDTextDocumentType(NSString* value);

// getter for constant 'NSRTFPboardType'
NSString* _get_NSRTFPboardType(void);

// setter for constant 'NSRTFPboardType'
void _set_NSRTFPboardType(NSString* value);

// getter for constant 'NSRTFPropertyStackOverflowException'
NSString* _get_NSRTFPropertyStackOverflowException(void);

// setter for constant 'NSRTFPropertyStackOverflowException'
void _set_NSRTFPropertyStackOverflowException(NSString* value);

// getter for constant 'NSRTFTextDocumentType'
NSString* _get_NSRTFTextDocumentType(void);

// setter for constant 'NSRTFTextDocumentType'
void _set_NSRTFTextDocumentType(NSString* value);

// getter for constant 'NSRaisesForNotApplicableKeysBindingOption'
NSString* _get_NSRaisesForNotApplicableKeysBindingOption(void);

// setter for constant 'NSRaisesForNotApplicableKeysBindingOption'
void _set_NSRaisesForNotApplicableKeysBindingOption(NSString* value);

// getter for constant 'NSReadOnlyDocumentAttribute'
NSString* _get_NSReadOnlyDocumentAttribute(void);

// setter for constant 'NSReadOnlyDocumentAttribute'
void _set_NSReadOnlyDocumentAttribute(NSString* value);

// getter for constant 'NSRecentSearchesBinding'
NSString* _get_NSRecentSearchesBinding(void);

// setter for constant 'NSRecentSearchesBinding'
void _set_NSRecentSearchesBinding(NSString* value);

// getter for constant 'NSRepresentedFilenameBinding'
NSString* _get_NSRepresentedFilenameBinding(void);

// setter for constant 'NSRepresentedFilenameBinding'
void _set_NSRepresentedFilenameBinding(NSString* value);

// getter for constant 'NSRightMarginDocumentAttribute'
NSString* _get_NSRightMarginDocumentAttribute(void);

// setter for constant 'NSRightMarginDocumentAttribute'
void _set_NSRightMarginDocumentAttribute(NSString* value);

// getter for constant 'NSRowHeightBinding'
NSString* _get_NSRowHeightBinding(void);

// setter for constant 'NSRowHeightBinding'
void _set_NSRowHeightBinding(NSString* value);

// getter for constant 'NSRulerPboard'
NSString* _get_NSRulerPboard(void);

// setter for constant 'NSRulerPboard'
void _set_NSRulerPboard(NSString* value);

// getter for constant 'NSRulerPboardType'
NSString* _get_NSRulerPboardType(void);

// setter for constant 'NSRulerPboardType'
void _set_NSRulerPboardType(NSString* value);

// getter for constant 'NSSelectedIdentifierBinding'
NSString* _get_NSSelectedIdentifierBinding(void);

// setter for constant 'NSSelectedIdentifierBinding'
void _set_NSSelectedIdentifierBinding(NSString* value);

// getter for constant 'NSSelectedIndexBinding'
NSString* _get_NSSelectedIndexBinding(void);

// setter for constant 'NSSelectedIndexBinding'
void _set_NSSelectedIndexBinding(NSString* value);

// getter for constant 'NSSelectedLabelBinding'
NSString* _get_NSSelectedLabelBinding(void);

// setter for constant 'NSSelectedLabelBinding'
void _set_NSSelectedLabelBinding(NSString* value);

// getter for constant 'NSSelectedObjectBinding'
NSString* _get_NSSelectedObjectBinding(void);

// setter for constant 'NSSelectedObjectBinding'
void _set_NSSelectedObjectBinding(NSString* value);

// getter for constant 'NSSelectedObjectsBinding'
NSString* _get_NSSelectedObjectsBinding(void);

// setter for constant 'NSSelectedObjectsBinding'
void _set_NSSelectedObjectsBinding(NSString* value);

// getter for constant 'NSSelectedTagBinding'
NSString* _get_NSSelectedTagBinding(void);

// setter for constant 'NSSelectedTagBinding'
void _set_NSSelectedTagBinding(NSString* value);

// getter for constant 'NSSelectedValueBinding'
NSString* _get_NSSelectedValueBinding(void);

// setter for constant 'NSSelectedValueBinding'
void _set_NSSelectedValueBinding(NSString* value);

// getter for constant 'NSSelectedValuesBinding'
NSString* _get_NSSelectedValuesBinding(void);

// setter for constant 'NSSelectedValuesBinding'
void _set_NSSelectedValuesBinding(NSString* value);

// getter for constant 'NSSelectionIndexPathsBinding'
NSString* _get_NSSelectionIndexPathsBinding(void);

// setter for constant 'NSSelectionIndexPathsBinding'
void _set_NSSelectionIndexPathsBinding(NSString* value);

// getter for constant 'NSSelectionIndexesBinding'
NSString* _get_NSSelectionIndexesBinding(void);

// setter for constant 'NSSelectionIndexesBinding'
void _set_NSSelectionIndexesBinding(NSString* value);

// getter for constant 'NSSelectorNameBindingOption'
NSString* _get_NSSelectorNameBindingOption(void);

// setter for constant 'NSSelectorNameBindingOption'
void _set_NSSelectorNameBindingOption(NSString* value);

// getter for constant 'NSSelectsAllWhenSettingContentBindingOption'
NSString* _get_NSSelectsAllWhenSettingContentBindingOption(void);

// setter for constant 'NSSelectsAllWhenSettingContentBindingOption'
void _set_NSSelectsAllWhenSettingContentBindingOption(NSString* value);

// getter for constant 'NSShadowAttributeName'
NSString* _get_NSShadowAttributeName(void);

// setter for constant 'NSShadowAttributeName'
void _set_NSShadowAttributeName(NSString* value);

// getter for constant 'NSShellCommandFileType'
NSString* _get_NSShellCommandFileType(void);

// setter for constant 'NSShellCommandFileType'
void _set_NSShellCommandFileType(NSString* value);

// getter for constant 'NSSortDescriptorsBinding'
NSString* _get_NSSortDescriptorsBinding(void);

// setter for constant 'NSSortDescriptorsBinding'
void _set_NSSortDescriptorsBinding(NSString* value);

// getter for constant 'NSSoundPboardType'
NSString* _get_NSSoundPboardType(void);

// getter for constant 'NSSplitViewDidResizeSubviewsNotification'
NSString* _get_NSSplitViewDidResizeSubviewsNotification(void);

// setter for constant 'NSSplitViewDidResizeSubviewsNotification'
void _set_NSSplitViewDidResizeSubviewsNotification(NSString* value);

// getter for constant 'NSSplitViewWillResizeSubviewsNotification'
NSString* _get_NSSplitViewWillResizeSubviewsNotification(void);

// setter for constant 'NSSplitViewWillResizeSubviewsNotification'
void _set_NSSplitViewWillResizeSubviewsNotification(NSString* value);

// getter for constant 'NSStrikethroughColorAttributeName'
NSString* _get_NSStrikethroughColorAttributeName(void);

// setter for constant 'NSStrikethroughColorAttributeName'
void _set_NSStrikethroughColorAttributeName(NSString* value);

// getter for constant 'NSStrikethroughStyleAttributeName'
NSString* _get_NSStrikethroughStyleAttributeName(void);

// setter for constant 'NSStrikethroughStyleAttributeName'
void _set_NSStrikethroughStyleAttributeName(NSString* value);

// getter for constant 'NSStringPboardType'
NSString* _get_NSStringPboardType(void);

// setter for constant 'NSStringPboardType'
void _set_NSStringPboardType(NSString* value);

// getter for constant 'NSStrokeColorAttributeName'
NSString* _get_NSStrokeColorAttributeName(void);

// setter for constant 'NSStrokeColorAttributeName'
void _set_NSStrokeColorAttributeName(NSString* value);

// getter for constant 'NSStrokeWidthAttributeName'
NSString* _get_NSStrokeWidthAttributeName(void);

// setter for constant 'NSStrokeWidthAttributeName'
void _set_NSStrokeWidthAttributeName(NSString* value);

// getter for constant 'NSSubjectDocumentAttribute'
NSString* _get_NSSubjectDocumentAttribute(void);

// setter for constant 'NSSubjectDocumentAttribute'
void _set_NSSubjectDocumentAttribute(NSString* value);

// getter for constant 'NSSuperscriptAttributeName'
NSString* _get_NSSuperscriptAttributeName(void);

// setter for constant 'NSSuperscriptAttributeName'
void _set_NSSuperscriptAttributeName(NSString* value);

// getter for constant 'NSSystemColorsDidChangeNotification'
NSString* _get_NSSystemColorsDidChangeNotification(void);

// setter for constant 'NSSystemColorsDidChangeNotification'
void _set_NSSystemColorsDidChangeNotification(NSString* value);

// getter for constant 'NSTIFFException'
NSString* _get_NSTIFFException(void);

// setter for constant 'NSTIFFException'
void _set_NSTIFFException(NSString* value);

// getter for constant 'NSTIFFPboardType'
NSString* _get_NSTIFFPboardType(void);

// setter for constant 'NSTIFFPboardType'
void _set_NSTIFFPboardType(NSString* value);

// getter for constant 'NSTabColumnTerminatorsAttributeName'
NSString* _get_NSTabColumnTerminatorsAttributeName(void);

// setter for constant 'NSTabColumnTerminatorsAttributeName'
void _set_NSTabColumnTerminatorsAttributeName(NSString* value);

// getter for constant 'NSTableViewColumnDidMoveNotification'
NSString* _get_NSTableViewColumnDidMoveNotification(void);

// setter for constant 'NSTableViewColumnDidMoveNotification'
void _set_NSTableViewColumnDidMoveNotification(NSString* value);

// getter for constant 'NSTableViewColumnDidResizeNotification'
NSString* _get_NSTableViewColumnDidResizeNotification(void);

// setter for constant 'NSTableViewColumnDidResizeNotification'
void _set_NSTableViewColumnDidResizeNotification(NSString* value);

// getter for constant 'NSTableViewSelectionDidChangeNotification'
NSString* _get_NSTableViewSelectionDidChangeNotification(void);

// setter for constant 'NSTableViewSelectionDidChangeNotification'
void _set_NSTableViewSelectionDidChangeNotification(NSString* value);

// getter for constant 'NSTableViewSelectionIsChangingNotification'
NSString* _get_NSTableViewSelectionIsChangingNotification(void);

// setter for constant 'NSTableViewSelectionIsChangingNotification'
void _set_NSTableViewSelectionIsChangingNotification(NSString* value);

// getter for constant 'NSTabularTextPboardType'
NSString* _get_NSTabularTextPboardType(void);

// setter for constant 'NSTabularTextPboardType'
void _set_NSTabularTextPboardType(NSString* value);

// getter for constant 'NSTargetBinding'
NSString* _get_NSTargetBinding(void);

// setter for constant 'NSTargetBinding'
void _set_NSTargetBinding(NSString* value);

// getter for constant 'NSTextColorBinding'
NSString* _get_NSTextColorBinding(void);

// setter for constant 'NSTextColorBinding'
void _set_NSTextColorBinding(NSString* value);

// getter for constant 'NSTextDidBeginEditingNotification'
NSString* _get_NSTextDidBeginEditingNotification(void);

// setter for constant 'NSTextDidBeginEditingNotification'
void _set_NSTextDidBeginEditingNotification(NSString* value);

// getter for constant 'NSTextDidChangeNotification'
NSString* _get_NSTextDidChangeNotification(void);

// setter for constant 'NSTextDidChangeNotification'
void _set_NSTextDidChangeNotification(NSString* value);

// getter for constant 'NSTextDidEndEditingNotification'
NSString* _get_NSTextDidEndEditingNotification(void);

// setter for constant 'NSTextDidEndEditingNotification'
void _set_NSTextDidEndEditingNotification(NSString* value);

// getter for constant 'NSTextEncodingNameDocumentAttribute'
NSString* _get_NSTextEncodingNameDocumentAttribute(void);

// setter for constant 'NSTextEncodingNameDocumentAttribute'
void _set_NSTextEncodingNameDocumentAttribute(NSString* value);

// getter for constant 'NSTextEncodingNameDocumentOption'
NSString* _get_NSTextEncodingNameDocumentOption(void);

// setter for constant 'NSTextEncodingNameDocumentOption'
void _set_NSTextEncodingNameDocumentOption(NSString* value);

// getter for constant 'NSTextLineTooLongException'
NSString* _get_NSTextLineTooLongException(void);

// setter for constant 'NSTextLineTooLongException'
void _set_NSTextLineTooLongException(NSString* value);

// getter for constant 'NSTextNoSelectionException'
NSString* _get_NSTextNoSelectionException(void);

// setter for constant 'NSTextNoSelectionException'
void _set_NSTextNoSelectionException(NSString* value);

// getter for constant 'NSTextReadException'
NSString* _get_NSTextReadException(void);

// setter for constant 'NSTextReadException'
void _set_NSTextReadException(NSString* value);

// getter for constant 'NSTextSizeMultiplierDocumentOption'
NSString* _get_NSTextSizeMultiplierDocumentOption(void);

// setter for constant 'NSTextSizeMultiplierDocumentOption'
void _set_NSTextSizeMultiplierDocumentOption(NSString* value);

// getter for constant 'NSTextStorageDidProcessEditingNotification'
NSString* _get_NSTextStorageDidProcessEditingNotification(void);

// setter for constant 'NSTextStorageDidProcessEditingNotification'
void _set_NSTextStorageDidProcessEditingNotification(NSString* value);

// getter for constant 'NSTextStorageWillProcessEditingNotification'
NSString* _get_NSTextStorageWillProcessEditingNotification(void);

// setter for constant 'NSTextStorageWillProcessEditingNotification'
void _set_NSTextStorageWillProcessEditingNotification(NSString* value);

// getter for constant 'NSTextViewDidChangeSelectionNotification'
NSString* _get_NSTextViewDidChangeSelectionNotification(void);

// setter for constant 'NSTextViewDidChangeSelectionNotification'
void _set_NSTextViewDidChangeSelectionNotification(NSString* value);

// getter for constant 'NSTextViewDidChangeTypingAttributesNotification'
NSString* _get_NSTextViewDidChangeTypingAttributesNotification(void);

// setter for constant 'NSTextViewDidChangeTypingAttributesNotification'
void _set_NSTextViewDidChangeTypingAttributesNotification(NSString* value);

// getter for constant 'NSTextViewWillChangeNotifyingTextViewNotification'
NSString* _get_NSTextViewWillChangeNotifyingTextViewNotification(void);

// setter for constant 'NSTextViewWillChangeNotifyingTextViewNotification'
void _set_NSTextViewWillChangeNotifyingTextViewNotification(NSString* value);

// getter for constant 'NSTextWriteException'
NSString* _get_NSTextWriteException(void);

// setter for constant 'NSTextWriteException'
void _set_NSTextWriteException(NSString* value);

// getter for constant 'NSTimeoutDocumentOption'
NSString* _get_NSTimeoutDocumentOption(void);

// setter for constant 'NSTimeoutDocumentOption'
void _set_NSTimeoutDocumentOption(NSString* value);

// getter for constant 'NSTitleBinding'
NSString* _get_NSTitleBinding(void);

// setter for constant 'NSTitleBinding'
void _set_NSTitleBinding(NSString* value);

// getter for constant 'NSTitleDocumentAttribute'
NSString* _get_NSTitleDocumentAttribute(void);

// setter for constant 'NSTitleDocumentAttribute'
void _set_NSTitleDocumentAttribute(NSString* value);

// getter for constant 'NSToolTipAttributeName'
NSString* _get_NSToolTipAttributeName(void);

// setter for constant 'NSToolTipAttributeName'
void _set_NSToolTipAttributeName(NSString* value);

// getter for constant 'NSToolTipBinding'
NSString* _get_NSToolTipBinding(void);

// setter for constant 'NSToolTipBinding'
void _set_NSToolTipBinding(NSString* value);

// getter for constant 'NSToolbarCustomizeToolbarItemIdentifier'
NSString* _get_NSToolbarCustomizeToolbarItemIdentifier(void);

// setter for constant 'NSToolbarCustomizeToolbarItemIdentifier'
void _set_NSToolbarCustomizeToolbarItemIdentifier(NSString* value);

// getter for constant 'NSToolbarDidRemoveItemNotification'
NSString* _get_NSToolbarDidRemoveItemNotification(void);

// setter for constant 'NSToolbarDidRemoveItemNotification'
void _set_NSToolbarDidRemoveItemNotification(NSString* value);

// getter for constant 'NSToolbarFlexibleSpaceItemIdentifier'
NSString* _get_NSToolbarFlexibleSpaceItemIdentifier(void);

// setter for constant 'NSToolbarFlexibleSpaceItemIdentifier'
void _set_NSToolbarFlexibleSpaceItemIdentifier(NSString* value);

// getter for constant 'NSToolbarPrintItemIdentifier'
NSString* _get_NSToolbarPrintItemIdentifier(void);

// setter for constant 'NSToolbarPrintItemIdentifier'
void _set_NSToolbarPrintItemIdentifier(NSString* value);

// getter for constant 'NSToolbarSeparatorItemIdentifier'
NSString* _get_NSToolbarSeparatorItemIdentifier(void);

// setter for constant 'NSToolbarSeparatorItemIdentifier'
void _set_NSToolbarSeparatorItemIdentifier(NSString* value);

// getter for constant 'NSToolbarShowColorsItemIdentifier'
NSString* _get_NSToolbarShowColorsItemIdentifier(void);

// setter for constant 'NSToolbarShowColorsItemIdentifier'
void _set_NSToolbarShowColorsItemIdentifier(NSString* value);

// getter for constant 'NSToolbarShowFontsItemIdentifier'
NSString* _get_NSToolbarShowFontsItemIdentifier(void);

// setter for constant 'NSToolbarShowFontsItemIdentifier'
void _set_NSToolbarShowFontsItemIdentifier(NSString* value);

// getter for constant 'NSToolbarSpaceItemIdentifier'
NSString* _get_NSToolbarSpaceItemIdentifier(void);

// setter for constant 'NSToolbarSpaceItemIdentifier'
void _set_NSToolbarSpaceItemIdentifier(NSString* value);

// getter for constant 'NSToolbarWillAddItemNotification'
NSString* _get_NSToolbarWillAddItemNotification(void);

// setter for constant 'NSToolbarWillAddItemNotification'
void _set_NSToolbarWillAddItemNotification(NSString* value);

// getter for constant 'NSTopMarginDocumentAttribute'
NSString* _get_NSTopMarginDocumentAttribute(void);

// setter for constant 'NSTopMarginDocumentAttribute'
void _set_NSTopMarginDocumentAttribute(NSString* value);

// getter for constant 'NSTypedStreamVersionException'
NSString* _get_NSTypedStreamVersionException(void);

// setter for constant 'NSTypedStreamVersionException'
void _set_NSTypedStreamVersionException(NSString* value);

// getter for constant 'NSURLPboardType'
NSString* _get_NSURLPboardType(void);

// setter for constant 'NSURLPboardType'
void _set_NSURLPboardType(NSString* value);

// getter for constant 'NSUnderlineByWordMask'
unsigned int _get_NSUnderlineByWordMask(void);

// setter for constant 'NSUnderlineByWordMask'
void _set_NSUnderlineByWordMask(unsigned int value);

// getter for constant 'NSUnderlineColorAttributeName'
NSString* _get_NSUnderlineColorAttributeName(void);

// setter for constant 'NSUnderlineColorAttributeName'
void _set_NSUnderlineColorAttributeName(NSString* value);

// getter for constant 'NSUnderlineStrikethroughMask'
unsigned int _get_NSUnderlineStrikethroughMask(void);

// setter for constant 'NSUnderlineStrikethroughMask'
void _set_NSUnderlineStrikethroughMask(unsigned int value);

// getter for constant 'NSUnderlineStyleAttributeName'
NSString* _get_NSUnderlineStyleAttributeName(void);

// setter for constant 'NSUnderlineStyleAttributeName'
void _set_NSUnderlineStyleAttributeName(NSString* value);

// getter for constant 'NSVCardPboardType'
NSString* _get_NSVCardPboardType(void);

// setter for constant 'NSVCardPboardType'
void _set_NSVCardPboardType(NSString* value);

// getter for constant 'NSValidatesImmediatelyBindingOption'
NSString* _get_NSValidatesImmediatelyBindingOption(void);

// setter for constant 'NSValidatesImmediatelyBindingOption'
void _set_NSValidatesImmediatelyBindingOption(NSString* value);

// getter for constant 'NSValueBinding'
NSString* _get_NSValueBinding(void);

// setter for constant 'NSValueBinding'
void _set_NSValueBinding(NSString* value);

// getter for constant 'NSValuePathBinding'
NSString* _get_NSValuePathBinding(void);

// setter for constant 'NSValuePathBinding'
void _set_NSValuePathBinding(NSString* value);

// getter for constant 'NSValueTransformerBindingOption'
NSString* _get_NSValueTransformerBindingOption(void);

// setter for constant 'NSValueTransformerBindingOption'
void _set_NSValueTransformerBindingOption(NSString* value);

// getter for constant 'NSValueTransformerNameBindingOption'
NSString* _get_NSValueTransformerNameBindingOption(void);

// setter for constant 'NSValueTransformerNameBindingOption'
void _set_NSValueTransformerNameBindingOption(NSString* value);

// getter for constant 'NSValueURLBinding'
NSString* _get_NSValueURLBinding(void);

// setter for constant 'NSValueURLBinding'
void _set_NSValueURLBinding(NSString* value);

// getter for constant 'NSViewAnimationEffectKey'
NSString* _get_NSViewAnimationEffectKey(void);

// setter for constant 'NSViewAnimationEffectKey'
void _set_NSViewAnimationEffectKey(NSString* value);

// getter for constant 'NSViewAnimationEndFrameKey'
NSString* _get_NSViewAnimationEndFrameKey(void);

// setter for constant 'NSViewAnimationEndFrameKey'
void _set_NSViewAnimationEndFrameKey(NSString* value);

// getter for constant 'NSViewAnimationFadeInEffect'
NSString* _get_NSViewAnimationFadeInEffect(void);

// setter for constant 'NSViewAnimationFadeInEffect'
void _set_NSViewAnimationFadeInEffect(NSString* value);

// getter for constant 'NSViewAnimationFadeOutEffect'
NSString* _get_NSViewAnimationFadeOutEffect(void);

// setter for constant 'NSViewAnimationFadeOutEffect'
void _set_NSViewAnimationFadeOutEffect(NSString* value);

// getter for constant 'NSViewAnimationStartFrameKey'
NSString* _get_NSViewAnimationStartFrameKey(void);

// setter for constant 'NSViewAnimationStartFrameKey'
void _set_NSViewAnimationStartFrameKey(NSString* value);

// getter for constant 'NSViewAnimationTargetKey'
NSString* _get_NSViewAnimationTargetKey(void);

// setter for constant 'NSViewAnimationTargetKey'
void _set_NSViewAnimationTargetKey(NSString* value);

// getter for constant 'NSViewBoundsDidChangeNotification'
NSString* _get_NSViewBoundsDidChangeNotification(void);

// setter for constant 'NSViewBoundsDidChangeNotification'
void _set_NSViewBoundsDidChangeNotification(NSString* value);

// getter for constant 'NSViewFocusDidChangeNotification'
NSString* _get_NSViewFocusDidChangeNotification(void);

// setter for constant 'NSViewFocusDidChangeNotification'
void _set_NSViewFocusDidChangeNotification(NSString* value);

// getter for constant 'NSViewFrameDidChangeNotification'
NSString* _get_NSViewFrameDidChangeNotification(void);

// setter for constant 'NSViewFrameDidChangeNotification'
void _set_NSViewFrameDidChangeNotification(NSString* value);

// getter for constant 'NSViewGlobalFrameDidChangeNotification'
NSString* _get_NSViewGlobalFrameDidChangeNotification(void);

// setter for constant 'NSViewGlobalFrameDidChangeNotification'
void _set_NSViewGlobalFrameDidChangeNotification(NSString* value);

// getter for constant 'NSViewModeDocumentAttribute'
NSString* _get_NSViewModeDocumentAttribute(void);

// setter for constant 'NSViewModeDocumentAttribute'
void _set_NSViewModeDocumentAttribute(NSString* value);

// getter for constant 'NSViewSizeDocumentAttribute'
NSString* _get_NSViewSizeDocumentAttribute(void);

// setter for constant 'NSViewSizeDocumentAttribute'
void _set_NSViewSizeDocumentAttribute(NSString* value);

// getter for constant 'NSViewZoomDocumentAttribute'
NSString* _get_NSViewZoomDocumentAttribute(void);

// setter for constant 'NSViewZoomDocumentAttribute'
void _set_NSViewZoomDocumentAttribute(NSString* value);

// getter for constant 'NSVisibleBinding'
NSString* _get_NSVisibleBinding(void);

// setter for constant 'NSVisibleBinding'
void _set_NSVisibleBinding(NSString* value);

// getter for constant 'NSVoiceAge'
NSString* _get_NSVoiceAge(void);

// setter for constant 'NSVoiceAge'
void _set_NSVoiceAge(NSString* value);

// getter for constant 'NSVoiceDemoText'
NSString* _get_NSVoiceDemoText(void);

// setter for constant 'NSVoiceDemoText'
void _set_NSVoiceDemoText(NSString* value);

// getter for constant 'NSVoiceGender'
NSString* _get_NSVoiceGender(void);

// setter for constant 'NSVoiceGender'
void _set_NSVoiceGender(NSString* value);

// getter for constant 'NSVoiceGenderFemale'
NSString* _get_NSVoiceGenderFemale(void);

// setter for constant 'NSVoiceGenderFemale'
void _set_NSVoiceGenderFemale(NSString* value);

// getter for constant 'NSVoiceGenderMale'
NSString* _get_NSVoiceGenderMale(void);

// setter for constant 'NSVoiceGenderMale'
void _set_NSVoiceGenderMale(NSString* value);

// getter for constant 'NSVoiceGenderNeuter'
NSString* _get_NSVoiceGenderNeuter(void);

// setter for constant 'NSVoiceGenderNeuter'
void _set_NSVoiceGenderNeuter(NSString* value);

// getter for constant 'NSVoiceIdentifier'
NSString* _get_NSVoiceIdentifier(void);

// setter for constant 'NSVoiceIdentifier'
void _set_NSVoiceIdentifier(NSString* value);

// getter for constant 'NSVoiceLanguage'
NSString* _get_NSVoiceLanguage(void);

// setter for constant 'NSVoiceLanguage'
void _set_NSVoiceLanguage(NSString* value);

// getter for constant 'NSVoiceName'
NSString* _get_NSVoiceName(void);

// setter for constant 'NSVoiceName'
void _set_NSVoiceName(NSString* value);

// getter for constant 'NSWarningValueBinding'
NSString* _get_NSWarningValueBinding(void);

// setter for constant 'NSWarningValueBinding'
void _set_NSWarningValueBinding(NSString* value);

// getter for constant 'NSWebArchiveTextDocumentType'
NSString* _get_NSWebArchiveTextDocumentType(void);

// setter for constant 'NSWebArchiveTextDocumentType'
void _set_NSWebArchiveTextDocumentType(NSString* value);

// getter for constant 'NSWebPreferencesDocumentOption'
NSString* _get_NSWebPreferencesDocumentOption(void);

// setter for constant 'NSWebPreferencesDocumentOption'
void _set_NSWebPreferencesDocumentOption(NSString* value);

// getter for constant 'NSWebResourceLoadDelegateDocumentOption'
NSString* _get_NSWebResourceLoadDelegateDocumentOption(void);

// setter for constant 'NSWebResourceLoadDelegateDocumentOption'
void _set_NSWebResourceLoadDelegateDocumentOption(NSString* value);

// getter for constant 'NSWhite'
float _get_NSWhite(void);

// getter for constant 'NSWidthBinding'
NSString* _get_NSWidthBinding(void);

// setter for constant 'NSWidthBinding'
void _set_NSWidthBinding(NSString* value);

// getter for constant 'NSWindowDidBecomeKeyNotification'
NSString* _get_NSWindowDidBecomeKeyNotification(void);

// setter for constant 'NSWindowDidBecomeKeyNotification'
void _set_NSWindowDidBecomeKeyNotification(NSString* value);

// getter for constant 'NSWindowDidBecomeMainNotification'
NSString* _get_NSWindowDidBecomeMainNotification(void);

// setter for constant 'NSWindowDidBecomeMainNotification'
void _set_NSWindowDidBecomeMainNotification(NSString* value);

// getter for constant 'NSWindowDidChangeScreenNotification'
NSString* _get_NSWindowDidChangeScreenNotification(void);

// setter for constant 'NSWindowDidChangeScreenNotification'
void _set_NSWindowDidChangeScreenNotification(NSString* value);

// getter for constant 'NSWindowDidChangeScreenProfileNotification'
NSString* _get_NSWindowDidChangeScreenProfileNotification(void);

// setter for constant 'NSWindowDidChangeScreenProfileNotification'
void _set_NSWindowDidChangeScreenProfileNotification(NSString* value);

// getter for constant 'NSWindowDidDeminiaturizeNotification'
NSString* _get_NSWindowDidDeminiaturizeNotification(void);

// setter for constant 'NSWindowDidDeminiaturizeNotification'
void _set_NSWindowDidDeminiaturizeNotification(NSString* value);

// getter for constant 'NSWindowDidEndSheetNotification'
NSString* _get_NSWindowDidEndSheetNotification(void);

// setter for constant 'NSWindowDidEndSheetNotification'
void _set_NSWindowDidEndSheetNotification(NSString* value);

// getter for constant 'NSWindowDidExposeNotification'
NSString* _get_NSWindowDidExposeNotification(void);

// setter for constant 'NSWindowDidExposeNotification'
void _set_NSWindowDidExposeNotification(NSString* value);

// getter for constant 'NSWindowDidMiniaturizeNotification'
NSString* _get_NSWindowDidMiniaturizeNotification(void);

// setter for constant 'NSWindowDidMiniaturizeNotification'
void _set_NSWindowDidMiniaturizeNotification(NSString* value);

// getter for constant 'NSWindowDidMoveNotification'
NSString* _get_NSWindowDidMoveNotification(void);

// setter for constant 'NSWindowDidMoveNotification'
void _set_NSWindowDidMoveNotification(NSString* value);

// getter for constant 'NSWindowDidResignKeyNotification'
NSString* _get_NSWindowDidResignKeyNotification(void);

// setter for constant 'NSWindowDidResignKeyNotification'
void _set_NSWindowDidResignKeyNotification(NSString* value);

// getter for constant 'NSWindowDidResignMainNotification'
NSString* _get_NSWindowDidResignMainNotification(void);

// setter for constant 'NSWindowDidResignMainNotification'
void _set_NSWindowDidResignMainNotification(NSString* value);

// getter for constant 'NSWindowDidResizeNotification'
NSString* _get_NSWindowDidResizeNotification(void);

// setter for constant 'NSWindowDidResizeNotification'
void _set_NSWindowDidResizeNotification(NSString* value);

// getter for constant 'NSWindowDidUpdateNotification'
NSString* _get_NSWindowDidUpdateNotification(void);

// setter for constant 'NSWindowDidUpdateNotification'
void _set_NSWindowDidUpdateNotification(NSString* value);

// getter for constant 'NSWindowServerCommunicationException'
NSString* _get_NSWindowServerCommunicationException(void);

// setter for constant 'NSWindowServerCommunicationException'
void _set_NSWindowServerCommunicationException(NSString* value);

// getter for constant 'NSWindowWillBeginSheetNotification'
NSString* _get_NSWindowWillBeginSheetNotification(void);

// setter for constant 'NSWindowWillBeginSheetNotification'
void _set_NSWindowWillBeginSheetNotification(NSString* value);

// getter for constant 'NSWindowWillCloseNotification'
NSString* _get_NSWindowWillCloseNotification(void);

// setter for constant 'NSWindowWillCloseNotification'
void _set_NSWindowWillCloseNotification(NSString* value);

// getter for constant 'NSWindowWillMiniaturizeNotification'
NSString* _get_NSWindowWillMiniaturizeNotification(void);

// setter for constant 'NSWindowWillMiniaturizeNotification'
void _set_NSWindowWillMiniaturizeNotification(NSString* value);

// getter for constant 'NSWindowWillMoveNotification'
NSString* _get_NSWindowWillMoveNotification(void);

// setter for constant 'NSWindowWillMoveNotification'
void _set_NSWindowWillMoveNotification(NSString* value);

// getter for constant 'NSWordMLTextDocumentType'
NSString* _get_NSWordMLTextDocumentType(void);

// setter for constant 'NSWordMLTextDocumentType'
void _set_NSWordMLTextDocumentType(NSString* value);

// getter for constant 'NSWordTablesReadException'
NSString* _get_NSWordTablesReadException(void);

// setter for constant 'NSWordTablesReadException'
void _set_NSWordTablesReadException(NSString* value);

// getter for constant 'NSWordTablesWriteException'
NSString* _get_NSWordTablesWriteException(void);

// setter for constant 'NSWordTablesWriteException'
void _set_NSWordTablesWriteException(NSString* value);

// getter for constant 'NSWorkspaceCompressOperation'
NSString* _get_NSWorkspaceCompressOperation(void);

// setter for constant 'NSWorkspaceCompressOperation'
void _set_NSWorkspaceCompressOperation(NSString* value);

// getter for constant 'NSWorkspaceCopyOperation'
NSString* _get_NSWorkspaceCopyOperation(void);

// setter for constant 'NSWorkspaceCopyOperation'
void _set_NSWorkspaceCopyOperation(NSString* value);

// getter for constant 'NSWorkspaceDecompressOperation'
NSString* _get_NSWorkspaceDecompressOperation(void);

// setter for constant 'NSWorkspaceDecompressOperation'
void _set_NSWorkspaceDecompressOperation(NSString* value);

// getter for constant 'NSWorkspaceDecryptOperation'
NSString* _get_NSWorkspaceDecryptOperation(void);

// setter for constant 'NSWorkspaceDecryptOperation'
void _set_NSWorkspaceDecryptOperation(NSString* value);

// getter for constant 'NSWorkspaceDestroyOperation'
NSString* _get_NSWorkspaceDestroyOperation(void);

// setter for constant 'NSWorkspaceDestroyOperation'
void _set_NSWorkspaceDestroyOperation(NSString* value);

// getter for constant 'NSWorkspaceDidLaunchApplicationNotification'
NSString* _get_NSWorkspaceDidLaunchApplicationNotification(void);

// setter for constant 'NSWorkspaceDidLaunchApplicationNotification'
void _set_NSWorkspaceDidLaunchApplicationNotification(NSString* value);

// getter for constant 'NSWorkspaceDidMountNotification'
NSString* _get_NSWorkspaceDidMountNotification(void);

// setter for constant 'NSWorkspaceDidMountNotification'
void _set_NSWorkspaceDidMountNotification(NSString* value);

// getter for constant 'NSWorkspaceDidPerformFileOperationNotification'
NSString* _get_NSWorkspaceDidPerformFileOperationNotification(void);

// setter for constant 'NSWorkspaceDidPerformFileOperationNotification'
void _set_NSWorkspaceDidPerformFileOperationNotification(NSString* value);

// getter for constant 'NSWorkspaceDidTerminateApplicationNotification'
NSString* _get_NSWorkspaceDidTerminateApplicationNotification(void);

// setter for constant 'NSWorkspaceDidTerminateApplicationNotification'
void _set_NSWorkspaceDidTerminateApplicationNotification(NSString* value);

// getter for constant 'NSWorkspaceDidUnmountNotification'
NSString* _get_NSWorkspaceDidUnmountNotification(void);

// setter for constant 'NSWorkspaceDidUnmountNotification'
void _set_NSWorkspaceDidUnmountNotification(NSString* value);

// getter for constant 'NSWorkspaceDidWakeNotification'
NSString* _get_NSWorkspaceDidWakeNotification(void);

// setter for constant 'NSWorkspaceDidWakeNotification'
void _set_NSWorkspaceDidWakeNotification(NSString* value);

// getter for constant 'NSWorkspaceDuplicateOperation'
NSString* _get_NSWorkspaceDuplicateOperation(void);

// setter for constant 'NSWorkspaceDuplicateOperation'
void _set_NSWorkspaceDuplicateOperation(NSString* value);

// getter for constant 'NSWorkspaceEncryptOperation'
NSString* _get_NSWorkspaceEncryptOperation(void);

// setter for constant 'NSWorkspaceEncryptOperation'
void _set_NSWorkspaceEncryptOperation(NSString* value);

// getter for constant 'NSWorkspaceLinkOperation'
NSString* _get_NSWorkspaceLinkOperation(void);

// setter for constant 'NSWorkspaceLinkOperation'
void _set_NSWorkspaceLinkOperation(NSString* value);

// getter for constant 'NSWorkspaceMoveOperation'
NSString* _get_NSWorkspaceMoveOperation(void);

// setter for constant 'NSWorkspaceMoveOperation'
void _set_NSWorkspaceMoveOperation(NSString* value);

// getter for constant 'NSWorkspaceRecycleOperation'
NSString* _get_NSWorkspaceRecycleOperation(void);

// setter for constant 'NSWorkspaceRecycleOperation'
void _set_NSWorkspaceRecycleOperation(NSString* value);

// getter for constant 'NSWorkspaceSessionDidBecomeActiveNotification'
NSString* _get_NSWorkspaceSessionDidBecomeActiveNotification(void);

// setter for constant 'NSWorkspaceSessionDidBecomeActiveNotification'
void _set_NSWorkspaceSessionDidBecomeActiveNotification(NSString* value);

// getter for constant 'NSWorkspaceSessionDidResignActiveNotification'
NSString* _get_NSWorkspaceSessionDidResignActiveNotification(void);

// setter for constant 'NSWorkspaceSessionDidResignActiveNotification'
void _set_NSWorkspaceSessionDidResignActiveNotification(NSString* value);

// getter for constant 'NSWorkspaceWillLaunchApplicationNotification'
NSString* _get_NSWorkspaceWillLaunchApplicationNotification(void);

// setter for constant 'NSWorkspaceWillLaunchApplicationNotification'
void _set_NSWorkspaceWillLaunchApplicationNotification(NSString* value);

// getter for constant 'NSWorkspaceWillPowerOffNotification'
NSString* _get_NSWorkspaceWillPowerOffNotification(void);

// setter for constant 'NSWorkspaceWillPowerOffNotification'
void _set_NSWorkspaceWillPowerOffNotification(NSString* value);

// getter for constant 'NSWorkspaceWillSleepNotification'
NSString* _get_NSWorkspaceWillSleepNotification(void);

// setter for constant 'NSWorkspaceWillSleepNotification'
void _set_NSWorkspaceWillSleepNotification(NSString* value);

// getter for constant 'NSWorkspaceWillUnmountNotification'
NSString* _get_NSWorkspaceWillUnmountNotification(void);

// setter for constant 'NSWorkspaceWillUnmountNotification'
void _set_NSWorkspaceWillUnmountNotification(NSString* value);

enum { NSAWTEventType = 16 };

enum { NSAboveBottom = 4 };

enum { NSAboveTop = 1 };

enum { NSAddTraitFontAction = 2 };

enum { NSAdobeCNS1CharacterCollection = 1 };

enum { NSAdobeGB1CharacterCollection = 2 };

enum { NSAdobeJapan1CharacterCollection = 3 };

enum { NSAdobeJapan2CharacterCollection = 4 };

enum { NSAdobeKorea1CharacterCollection = 5 };

enum { NSAlertAlternateReturn = 0 };

enum { NSAlertDefaultReturn = 1 };

enum { NSAlertErrorReturn = -2 };

enum { NSAlertFirstButtonReturn = 1000 };

enum { NSAlertOtherReturn = -1 };

enum { NSAlertSecondButtonReturn = 1001 };

enum { NSAlertThirdButtonReturn = 1002 };

enum { NSAllScrollerParts = 2 };

enum { NSAlphaFirstBitmapFormat = 1 };

enum { NSAlphaNonpremultipliedBitmapFormat = 2 };

enum { NSAlphaShiftKeyMask = 65536 };

enum { NSAlternateKeyMask = 524288 };

enum { NSAnimationBlocking = 0 };

enum { NSAnimationEaseIn = 1 };

enum { NSAnimationEaseInOut = 0 };

enum { NSAnimationEaseOut = 2 };

enum { NSAnimationEffectDisappearingItemDefault = 0 };

enum { NSAnimationEffectPoof = 10 };

enum { NSAnimationLinear = 3 };

enum { NSAnimationNonblocking = 1 };

enum { NSAnimationNonblockingThreaded = 2 };

enum { NSAnyEventMask = 4294967295 };

enum { NSAnyType = 0 };

enum { NSAppKitDefined = 13 };

enum { NSAppKitDefinedMask = 8192 };

enum { NSAppKitVersionNumber10_0 = 577 };

enum { NSAppKitVersionNumber10_1 = 620 };

enum { NSAppKitVersionNumber10_2 = 663 };

#define NSAppKitVersionNumber10_2_3 663.6

enum { NSAppKitVersionNumber10_3 = 743 };

#define NSAppKitVersionNumber10_3_2 743.14

#define NSAppKitVersionNumber10_3_3 743.2

#define NSAppKitVersionNumber10_3_5 743.24

#define NSAppKitVersionNumberWithColumnResizingBrowser 685.0

#define NSAppKitVersionNumberWithContinuousScrollingBrowser 680.0

#define NSAppKitVersionNumberWithCursorSizeSupport 682.0

#define NSAppKitVersionNumberWithCustomSheetPosition 686.0

#define NSAppKitVersionNumberWithDirectionalTabs 631.0

#define NSAppKitVersionNumberWithPatternColorLeakFix 641.0

enum { NSApplicationActivatedEventType = 1 };

enum { NSApplicationDeactivatedEventType = 2 };

enum { NSApplicationDefined = 15 };

enum { NSApplicationDefinedMask = 32768 };

enum { NSApplicationDelegateReplyCancel = 1 };

enum { NSApplicationDelegateReplyFailure = 2 };

enum { NSApplicationDelegateReplySuccess = 0 };

enum { NSAscendingPageOrder = 1 };

enum { NSAtBottom = 5 };

enum { NSAtTop = 2 };

enum { NSAttachmentCharacter = 65532 };

enum { NSAutoPagination = 0 };

enum { NSAutosaveOperation = 3 };

enum { NSBMPFileType = 1 };

enum { NSBackTabCharacter = 25 };

enum { NSBackgroundTab = 1 };

enum { NSBackingStoreBuffered = 2 };

enum { NSBackingStoreNonretained = 1 };

enum { NSBackingStoreRetained = 0 };

enum { NSBackspaceCharacter = 8 };

enum { NSBacktabTextMovement = 18 };

enum { NSBeginFunctionKey = 63274 };

enum { NSBelowBottom = 6 };

enum { NSBelowTop = 3 };

enum { NSBevelLineJoinStyle = 2 };

enum { NSBezelBorder = 2 };

enum { NSBlueControlTint = 1 };

enum { NSBoldFontMask = 2 };

enum { NSBorderlessWindowMask = 0 };

enum { NSBottomTabsBezelBorder = 2 };

enum { NSBoxOldStyle = 3 };

enum { NSBoxPrimary = 0 };

enum { NSBoxSecondary = 1 };

enum { NSBoxSeparator = 2 };

enum { NSBreakFunctionKey = 63282 };

enum { NSBrowserAutoColumnResizing = 1 };

enum { NSBrowserNoColumnResizing = 0 };

enum { NSBrowserUserColumnResizing = 2 };

enum { NSButtLineCapStyle = 0 };

enum { NSCMYKColorSpaceModel = 2 };

enum { NSCMYKModeColorPanel = 2 };

enum { NSCancelButton = 0 };

enum { NSCancelTextMovement = 23 };

enum { NSCarriageReturnCharacter = 13 };

enum { NSCellAllowsMixedState = 16 };

enum { NSCellChangesContents = 14 };

enum { NSCellDisabled = 0 };

enum { NSCellEditable = 3 };

enum { NSCellHasImageHorizontal = 12 };

enum { NSCellHasImageOnLeftOrBottom = 13 };

enum { NSCellHasOverlappingImage = 11 };

enum { NSCellHighlighted = 5 };

enum { NSCellIsBordered = 10 };

enum { NSCellIsInsetButton = 15 };

enum { NSCellLightsByBackground = 9 };

enum { NSCellLightsByContents = 6 };

enum { NSCellLightsByGray = 7 };

enum { NSCellState = 1 };

enum { NSCenterTabStopType = 2 };

enum { NSCenterTextAlignment = 2 };

enum { NSChangeAutosaved = 4 };

enum { NSChangeBackgroundCell = 8 };

enum { NSChangeBackgroundCellMask = 8 };

enum { NSChangeCleared = 2 };

enum { NSChangeDone = 0 };

enum { NSChangeGrayCell = 4 };

enum { NSChangeGrayCellMask = 4 };

enum { NSChangeReadOtherContents = 3 };

enum { NSChangeUndone = 1 };

enum { NSCircularBezelStyle = 7 };

enum { NSCircularSlider = 1 };

enum { NSClearControlTint = 7 };

enum { NSClearDisplayFunctionKey = 63290 };

enum { NSClearLineFunctionKey = 63289 };

enum { NSClipPagination = 2 };

enum { NSClockAndCalendarDatePickerStyle = 1 };

enum { NSClosableWindowMask = 2 };

enum { NSClosePathBezierPathElement = 3 };

enum { NSColorListModeColorPanel = 5 };

enum { NSColorPanelAllModesMask = 65535 };

enum { NSColorPanelCMYKModeMask = 4 };

enum { NSColorPanelColorListModeMask = 32 };

enum { NSColorPanelCrayonModeMask = 128 };

enum { NSColorPanelCustomPaletteModeMask = 16 };

enum { NSColorPanelGrayModeMask = 1 };

enum { NSColorPanelHSBModeMask = 8 };

enum { NSColorPanelRGBModeMask = 2 };

enum { NSColorPanelWheelModeMask = 64 };

enum { NSCommandKeyMask = 1048576 };

enum { NSCompositeClear = 0 };

enum { NSCompositeCopy = 1 };

enum { NSCompositeDestinationAtop = 9 };

enum { NSCompositeDestinationIn = 7 };

enum { NSCompositeDestinationOut = 8 };

enum { NSCompositeDestinationOver = 6 };

enum { NSCompositeHighlight = 12 };

enum { NSCompositePlusDarker = 11 };

enum { NSCompositePlusLighter = 13 };

enum { NSCompositeSourceAtop = 5 };

enum { NSCompositeSourceIn = 3 };

enum { NSCompositeSourceOut = 4 };

enum { NSCompositeSourceOver = 2 };

enum { NSCompositeXOR = 10 };

enum { NSCompressedFontMask = 512 };

enum { NSCondensedFontMask = 64 };

enum { NSContentsCellMask = 1 };

enum { NSContinuousCapacityLevelIndicatorStyle = 1 };

enum { NSControlGlyph = 16777215 };

enum { NSControlKeyMask = 262144 };

enum { NSCrayonModeColorPanel = 7 };

enum { NSCriticalAlertStyle = 2 };

enum { NSCriticalRequest = 0 };

enum { NSCursorPointingDevice = 2 };

enum { NSCursorUpdate = 17 };

enum { NSCursorUpdateMask = 131072 };

enum { NSCurveToBezierPathElement = 2 };

enum { NSCustomPaletteModeColorPanel = 4 };

enum { NSDecimalTabStopType = 3 };

enum { NSDefaultControlTint = 0 };

enum { NSDefaultTokenStyle = 0 };

enum { NSDeleteCharFunctionKey = 63294 };

enum { NSDeleteCharacter = 127 };

enum { NSDeleteFunctionKey = 63272 };

enum { NSDeleteLineFunctionKey = 63292 };

enum { NSDescendingPageOrder = -1 };

enum { NSDeviceIndependentModifierFlagsMask = 4294901760 };

enum { NSDeviceNColorSpaceModel = 4 };

enum { NSDirectSelection = 0 };

enum { NSDisclosureBezelStyle = 5 };

enum { NSDiscreteCapacityLevelIndicatorStyle = 2 };

enum { NSDisplayWindowRunLoopOrdering = 600000 };

enum { NSDocModalWindowMask = 64 };

enum { NSDockWindowLevel = 20 };

enum { NSDoubleType = 6 };

enum { NSDownArrowFunctionKey = 63233 };

enum { NSDownTextMovement = 22 };

enum { NSDragOperationAll = 15 };

enum { NSDragOperationAll_Obsolete = 15 };

enum { NSDragOperationCopy = 1 };

enum { NSDragOperationDelete = 32 };

enum { NSDragOperationEvery = 4294967295 };

enum { NSDragOperationGeneric = 4 };

enum { NSDragOperationLink = 2 };

enum { NSDragOperationMove = 16 };

enum { NSDragOperationNone = 0 };

enum { NSDragOperationPrivate = 8 };

enum { NSDrawerClosedState = 0 };

enum { NSDrawerClosingState = 3 };

enum { NSDrawerOpenState = 2 };

enum { NSDrawerOpeningState = 1 };

enum { NSEndFunctionKey = 63275 };

enum { NSEnterCharacter = 3 };

enum { NSEraDatePickerElementFlag = 256 };

enum { NSEraserPointingDevice = 3 };

enum { NSEvenOddWindingRule = 1 };

enum { NSExclude10_4ElementsIconCreationOption = 4 };

enum { NSExcludeQuickDrawElementsIconCreationOption = 2 };

enum { NSExecuteFunctionKey = 63298 };

enum { NSExpandedFontMask = 32 };

enum { NSF10FunctionKey = 63245 };

enum { NSF11FunctionKey = 63246 };

enum { NSF12FunctionKey = 63247 };

enum { NSF13FunctionKey = 63248 };

enum { NSF14FunctionKey = 63249 };

enum { NSF15FunctionKey = 63250 };

enum { NSF16FunctionKey = 63251 };

enum { NSF17FunctionKey = 63252 };

enum { NSF18FunctionKey = 63253 };

enum { NSF19FunctionKey = 63254 };

enum { NSF1FunctionKey = 63236 };

enum { NSF20FunctionKey = 63255 };

enum { NSF21FunctionKey = 63256 };

enum { NSF22FunctionKey = 63257 };

enum { NSF23FunctionKey = 63258 };

enum { NSF24FunctionKey = 63259 };

enum { NSF25FunctionKey = 63260 };

enum { NSF26FunctionKey = 63261 };

enum { NSF27FunctionKey = 63262 };

enum { NSF28FunctionKey = 63263 };

enum { NSF29FunctionKey = 63264 };

enum { NSF2FunctionKey = 63237 };

enum { NSF30FunctionKey = 63265 };

enum { NSF31FunctionKey = 63266 };

enum { NSF32FunctionKey = 63267 };

enum { NSF33FunctionKey = 63268 };

enum { NSF34FunctionKey = 63269 };

enum { NSF35FunctionKey = 63270 };

enum { NSF3FunctionKey = 63238 };

enum { NSF4FunctionKey = 63239 };

enum { NSF5FunctionKey = 63240 };

enum { NSF6FunctionKey = 63241 };

enum { NSF7FunctionKey = 63242 };

enum { NSF8FunctionKey = 63243 };

enum { NSF9FunctionKey = 63244 };

enum { NSFPCurrentField = 134 };

enum { NSFPPreviewButton = 131 };

enum { NSFPPreviewField = 128 };

enum { NSFPRevertButton = 130 };

enum { NSFPSetButton = 132 };

enum { NSFPSizeField = 129 };

enum { NSFPSizeTitle = 133 };

enum { NSFaxButton = 5 };

enum { NSFileHandlingPanelCancelButton = 0 };

enum { NSFileHandlingPanelOKButton = 1 };

enum { NSFindFunctionKey = 63301 };

enum { NSFindPanelActionNext = 2 };

enum { NSFindPanelActionPrevious = 3 };

enum { NSFindPanelActionReplace = 5 };

enum { NSFindPanelActionReplaceAll = 4 };

enum { NSFindPanelActionReplaceAllInSelection = 8 };

enum { NSFindPanelActionReplaceAndFind = 6 };

enum { NSFindPanelActionSelectAll = 9 };

enum { NSFindPanelActionSelectAllInSelection = 10 };

enum { NSFindPanelActionSetFindString = 7 };

enum { NSFindPanelActionShowFindPanel = 1 };

enum { NSFitPagination = 1 };

enum { NSFixedPitchFontMask = 1024 };

enum { NSFlagsChanged = 12 };

enum { NSFlagsChangedMask = 4096 };

enum { NSFloatType = 3 };

enum { NSFloatingPointSamplesBitmapFormat = 4 };

enum { NSFloatingWindowLevel = 3 };

enum { NSFocusRingAbove = 2 };

enum { NSFocusRingBelow = 1 };

enum { NSFocusRingOnly = 0 };

enum { NSFocusRingTypeDefault = 0 };

enum { NSFocusRingTypeExterior = 2 };

enum { NSFocusRingTypeNone = 1 };

enum { NSFontAntialiasedIntegerAdvancementsRenderingMode = 3 };

enum { NSFontAntialiasedRenderingMode = 1 };

enum { NSFontBoldTrait = 2 };

enum { NSFontClarendonSerifsClass = 1073741824 };

enum { NSFontCollectionApplicationOnlyMask = 1 };

enum { NSFontCondensedTrait = 64 };

enum { NSFontDefaultRenderingMode = 0 };

enum { NSFontExpandedTrait = 32 };

enum { NSFontFamilyClassMask = 4026531840 };

enum { NSFontFreeformSerifsClass = 1879048192 };

enum { NSFontIntegerAdvancementsRenderingMode = 2 };

enum { NSFontItalicTrait = 1 };

enum { NSFontModernSerifsClass = 805306368 };

enum { NSFontMonoSpaceTrait = 1024 };

enum { NSFontOldStyleSerifsClass = 268435456 };

enum { NSFontOrnamentalsClass = -1879048192 };

enum { NSFontPanelAllEffectsModeMask = 1048320 };

enum { NSFontPanelAllModesMask = 4294967295 };

enum { NSFontPanelCollectionModeMask = 4 };

enum { NSFontPanelDocumentColorEffectModeMask = 2048 };

enum { NSFontPanelFaceModeMask = 1 };

enum { NSFontPanelShadowEffectModeMask = 4096 };

enum { NSFontPanelSizeModeMask = 2 };

enum { NSFontPanelStandardModesMask = 65535 };

enum { NSFontPanelStrikethroughEffectModeMask = 512 };

enum { NSFontPanelTextColorEffectModeMask = 1024 };

enum { NSFontPanelUnderlineEffectModeMask = 256 };

enum { NSFontSansSerifClass = -2147483648 };

enum { NSFontScriptsClass = -1610612736 };

enum { NSFontSlabSerifsClass = 1342177280 };

enum { NSFontSymbolicClass = -1073741824 };

enum { NSFontTransitionalSerifsClass = 536870912 };

enum { NSFontUIOptimizedTrait = 4096 };

enum { NSFontUnknownClass = 0 };

enum { NSFontVerticalTrait = 2048 };

enum { NSFormFeedCharacter = 12 };

enum { NSFunctionKeyMask = 8388608 };

enum { NSGIFFileType = 2 };

enum { NSGlyphAttributeBidiLevel = 2 };

enum { NSGlyphAttributeElastic = 1 };

enum { NSGlyphAttributeInscribe = 5 };

enum { NSGlyphAttributeSoft = 0 };

enum { NSGlyphInscribeAbove = 2 };

enum { NSGlyphInscribeBase = 0 };

enum { NSGlyphInscribeBelow = 1 };

enum { NSGlyphInscribeOverBelow = 4 };

enum { NSGlyphInscribeOverstrike = 3 };

enum { NSGradientConcaveStrong = 2 };

enum { NSGradientConcaveWeak = 1 };

enum { NSGradientConvexStrong = 4 };

enum { NSGradientConvexWeak = 3 };

enum { NSGradientNone = 0 };

enum { NSGraphiteControlTint = 6 };

enum { NSGrayColorSpaceModel = 0 };

enum { NSGrayModeColorPanel = 0 };

enum { NSGrooveBorder = 3 };

enum { NSHSBModeColorPanel = 3 };

enum { NSHeavierFontAction = 5 };

enum { NSHelpButtonBezelStyle = 9 };

enum { NSHelpFunctionKey = 63302 };

enum { NSHelpKeyMask = 4194304 };

enum { NSHighlightModeMatrix = 1 };

enum { NSHomeFunctionKey = 63273 };

enum { NSHorizontalRuler = 0 };

enum { NSHourMinuteDatePickerElementFlag = 12 };

enum { NSHourMinuteSecondDatePickerElementFlag = 14 };

enum { NSIdentityMappingCharacterCollection = 0 };

enum { NSIllegalTextMovement = 0 };

enum { NSImageAbove = 5 };

enum { NSImageAlignBottom = 5 };

enum { NSImageAlignBottomLeft = 6 };

enum { NSImageAlignBottomRight = 7 };

enum { NSImageAlignCenter = 0 };

enum { NSImageAlignLeft = 4 };

enum { NSImageAlignRight = 8 };

enum { NSImageAlignTop = 1 };

enum { NSImageAlignTopLeft = 2 };

enum { NSImageAlignTopRight = 3 };

enum { NSImageBelow = 4 };

enum { NSImageCacheAlways = 1 };

enum { NSImageCacheBySize = 2 };

enum { NSImageCacheDefault = 0 };

enum { NSImageCacheNever = 3 };

enum { NSImageCellType = 2 };

enum { NSImageFrameButton = 4 };

enum { NSImageFrameGrayBezel = 2 };

enum { NSImageFrameGroove = 3 };

enum { NSImageFrameNone = 0 };

enum { NSImageFramePhoto = 1 };

enum { NSImageInterpolationDefault = 0 };

enum { NSImageInterpolationHigh = 3 };

enum { NSImageInterpolationLow = 2 };

enum { NSImageInterpolationNone = 1 };

enum { NSImageLeft = 2 };

enum { NSImageLoadStatusCancelled = 1 };

enum { NSImageLoadStatusCompleted = 0 };

enum { NSImageLoadStatusInvalidData = 2 };

enum { NSImageLoadStatusReadError = 4 };

enum { NSImageLoadStatusUnexpectedEOF = 3 };

enum { NSImageOnly = 1 };

enum { NSImageOverlaps = 6 };

enum { NSImageRepLoadStatusCompleted = -6 };

enum { NSImageRepLoadStatusInvalidData = -4 };

enum { NSImageRepLoadStatusReadingHeader = -2 };

enum { NSImageRepLoadStatusUnexpectedEOF = -5 };

enum { NSImageRepLoadStatusUnknownType = -1 };

enum { NSImageRepLoadStatusWillNeedAllData = -3 };

enum { NSImageRepMatchesDevice = 0 };

enum { NSImageRight = 3 };

enum { NSInformationalAlertStyle = 1 };

enum { NSInformationalRequest = 10 };

enum { NSInsertCharFunctionKey = 63293 };

enum { NSInsertFunctionKey = 63271 };

enum { NSInsertLineFunctionKey = 63291 };

enum { NSIntType = 1 };

enum { NSItalicFontMask = 1 };

enum { NSJPEG2000FileType = 5 };

enum { NSJPEGFileType = 3 };

enum { NSJustifiedTextAlignment = 3 };

enum { NSKeyDown = 10 };

enum { NSKeyDownMask = 1024 };

enum { NSKeyUp = 11 };

enum { NSKeyUpMask = 2048 };

enum { NSLABColorSpaceModel = 3 };

enum { NSLandscapeOrientation = 1 };

enum { NSLeftArrowFunctionKey = 63234 };

enum { NSLeftMouseDown = 1 };

enum { NSLeftMouseDownMask = 2 };

enum { NSLeftMouseDragged = 6 };

enum { NSLeftMouseDraggedMask = 64 };

enum { NSLeftMouseUp = 2 };

enum { NSLeftMouseUpMask = 4 };

enum { NSLeftTabStopType = 0 };

enum { NSLeftTabsBezelBorder = 1 };

enum { NSLeftTextAlignment = 0 };

enum { NSLeftTextMovement = 19 };

enum { NSLighterFontAction = 6 };

enum { NSLineBorder = 1 };

enum { NSLineBreakByCharWrapping = 1 };

enum { NSLineBreakByClipping = 2 };

enum { NSLineBreakByTruncatingHead = 3 };

enum { NSLineBreakByTruncatingMiddle = 5 };

enum { NSLineBreakByTruncatingTail = 4 };

enum { NSLineBreakByWordWrapping = 0 };

enum { NSLineDoesntMove = 0 };

enum { NSLineMovesDown = 3 };

enum { NSLineMovesLeft = 1 };

enum { NSLineMovesRight = 2 };

enum { NSLineMovesUp = 4 };

enum { NSLineSeparatorCharacter = 8232 };

enum { NSLineSweepDown = 2 };

enum { NSLineSweepLeft = 0 };

enum { NSLineSweepRight = 1 };

enum { NSLineSweepUp = 3 };

enum { NSLineToBezierPathElement = 1 };

enum { NSLinearSlider = 0 };

enum { NSListModeMatrix = 2 };

enum { NSMacintoshInterfaceStyle = 3 };

enum { NSMainMenuWindowLevel = 24 };

enum { NSMenuFunctionKey = 63285 };

enum { NSMiniControlSize = 2 };

enum { NSMiniaturizableWindowMask = 4 };

enum { NSMiterLineJoinStyle = 0 };

enum { NSMixedState = -1 };

enum { NSModalPanelWindowLevel = 8 };

enum { NSModeSwitchFunctionKey = 63303 };

enum { NSMomentaryChangeButton = 5 };

enum { NSMomentaryLight = 7 };

enum { NSMomentaryLightButton = 0 };

enum { NSMomentaryPushButton = 0 };

enum { NSMomentaryPushInButton = 7 };

enum { NSMouseEntered = 8 };

enum { NSMouseEnteredMask = 256 };

enum { NSMouseEventSubtype = 0 };

enum { NSMouseExited = 9 };

enum { NSMouseExitedMask = 512 };

enum { NSMouseMoved = 5 };

enum { NSMouseMovedMask = 32 };

enum { NSMoveToBezierPathElement = 0 };

enum { NSNarrowFontMask = 16 };

enum { NSNativeShortGlyphPacking = 5 };

enum { NSNaturalTextAlignment = 4 };

enum { NSNewlineCharacter = 10 };

enum { NSNextFunctionKey = 63296 };

enum { NSNextStepInterfaceStyle = 1 };

enum { NSNoBorder = 0 };

enum { NSNoCellMask = 0 };

enum { NSNoFontChangeAction = 0 };

enum { NSNoImage = 0 };

enum { NSNoInterfaceStyle = 0 };

enum { NSNoScrollerParts = 0 };

enum { NSNoTabsBezelBorder = 4 };

enum { NSNoTabsLineBorder = 5 };

enum { NSNoTabsNoBorder = 6 };

enum { NSNoTitle = 0 };

enum { NSNoUnderlineStyle = 0 };

enum { NSNonStandardCharacterSetFontMask = 8 };

enum { NSNonZeroWindingRule = 0 };

enum { NSNonactivatingPanelMask = 128 };

enum { NSNormalWindowLevel = 0 };

enum { NSNullCellType = 0 };

enum { NSNullGlyph = 0 };

enum { NSNumericPadKeyMask = 2097152 };

enum { NSOKButton = 1 };

enum { NSOPENGL_CURRENT_VERSION = 1 };

enum { NSOffState = 0 };

enum { NSOnOffButton = 6 };

enum { NSOnState = 1 };

enum { NSOnlyScrollerArrows = 1 };

enum { NSOpenGLCPRasterizationEnable = 221 };

enum { NSOpenGLCPStateValidation = 301 };

enum { NSOpenGLCPSurfaceOpacity = 236 };

enum { NSOpenGLCPSurfaceOrder = 235 };

enum { NSOpenGLCPSwapInterval = 222 };

enum { NSOpenGLCPSwapRectangle = 200 };

enum { NSOpenGLCPSwapRectangleEnable = 201 };

enum { NSOpenGLGOClearFormatCache = 502 };

enum { NSOpenGLGOFormatCacheSize = 501 };

enum { NSOpenGLGOResetLibrary = 504 };

enum { NSOpenGLGORetainRenderers = 503 };

enum { NSOpenGLPFAAccelerated = 73 };

enum { NSOpenGLPFAAccumSize = 14 };

enum { NSOpenGLPFAAllRenderers = 1 };

enum { NSOpenGLPFAAlphaSize = 11 };

enum { NSOpenGLPFAAuxBuffers = 7 };

enum { NSOpenGLPFAAuxDepthStencil = 57 };

enum { NSOpenGLPFABackingStore = 76 };

enum { NSOpenGLPFAClosestPolicy = 74 };

enum { NSOpenGLPFAColorFloat = 58 };

enum { NSOpenGLPFAColorSize = 8 };

enum { NSOpenGLPFACompliant = 83 };

enum { NSOpenGLPFADepthSize = 12 };

enum { NSOpenGLPFADoubleBuffer = 5 };

enum { NSOpenGLPFAFullScreen = 54 };

enum { NSOpenGLPFAMPSafe = 78 };

enum { NSOpenGLPFAMaximumPolicy = 52 };

enum { NSOpenGLPFAMinimumPolicy = 51 };

enum { NSOpenGLPFAMultiScreen = 81 };

enum { NSOpenGLPFAMultisample = 59 };

enum { NSOpenGLPFANoRecovery = 72 };

enum { NSOpenGLPFAOffScreen = 53 };

enum { NSOpenGLPFAPixelBuffer = 90 };

enum { NSOpenGLPFARendererID = 70 };

enum { NSOpenGLPFARobust = 75 };

enum { NSOpenGLPFASampleAlpha = 61 };

enum { NSOpenGLPFASampleBuffers = 55 };

enum { NSOpenGLPFASamples = 56 };

enum { NSOpenGLPFAScreenMask = 84 };

enum { NSOpenGLPFASingleRenderer = 71 };

enum { NSOpenGLPFAStencilSize = 13 };

enum { NSOpenGLPFAStereo = 6 };

enum { NSOpenGLPFASupersample = 60 };

enum { NSOpenGLPFAVirtualScreenCount = 128 };

enum { NSOpenGLPFAWindow = 80 };

enum { NSOtherMouseDown = 25 };

enum { NSOtherMouseDownMask = 33554432 };

enum { NSOtherMouseDragged = 27 };

enum { NSOtherMouseDraggedMask = 134217728 };

enum { NSOtherMouseUp = 26 };

enum { NSOtherMouseUpMask = 67108864 };

enum { NSOtherTextMovement = 0 };

enum { NSOutlineViewDropOnItemIndex = -1 };

enum { NSPLCancelButton = 0 };

enum { NSPLHeightForm = 56 };

enum { NSPLImageButton = 50 };

enum { NSPLOKButton = 1 };

enum { NSPLOrientationMatrix = 57 };

enum { NSPLPaperNameButton = 52 };

enum { NSPLTitleField = 51 };

enum { NSPLUnitsButton = 54 };

enum { NSPLWidthForm = 55 };

enum { NSPNGFileType = 4 };

enum { NSPPCopiesField = 49 };

enum { NSPPImageButton = 41 };

enum { NSPPLayoutButton = 56 };

enum { NSPPNameField = 43 };

enum { NSPPNameTitle = 42 };

enum { NSPPNoteField = 45 };

enum { NSPPNoteTitle = 44 };

enum { NSPPOptionsButton = 54 };

enum { NSPPPageChoiceMatrix = 50 };

enum { NSPPPageRangeFrom = 51 };

enum { NSPPPageRangeTo = 52 };

enum { NSPPPaperFeedButton = 55 };

enum { NSPPPreviewButton = 4 };

enum { NSPPSaveButton = 3 };

enum { NSPPScaleField = 53 };

enum { NSPPStatusField = 47 };

enum { NSPPStatusTitle = 46 };

enum { NSPPTitleField = 40 };

enum { NSPageDownFunctionKey = 63277 };

enum { NSPageUpFunctionKey = 63276 };

enum { NSParagraphSeparatorCharacter = 8233 };

enum { NSPauseFunctionKey = 63280 };

enum { NSPenLowerSideMask = 2 };

enum { NSPenPointingDevice = 1 };

enum { NSPenTipMask = 1 };

enum { NSPenUpperSideMask = 4 };

enum { NSPeriodic = 16 };

enum { NSPeriodicMask = 65536 };

enum { NSPlainTextTokenStyle = 1 };

enum { NSPopUpArrowAtBottom = 2 };

enum { NSPopUpArrowAtCenter = 1 };

enum { NSPopUpMenuWindowLevel = 101 };

enum { NSPopUpNoArrow = 0 };

enum { NSPortraitOrientation = 0 };

enum { NSPositiveDoubleType = 7 };

enum { NSPositiveFloatType = 4 };

enum { NSPositiveIntType = 2 };

enum { NSPosterFontMask = 256 };

enum { NSPowerOffEventType = 1 };

enum { NSPressedTab = 2 };

enum { NSPrevFunctionKey = 63295 };

enum { NSPrintFunctionKey = 63288 };

enum { NSPrintScreenFunctionKey = 63278 };

enum { NSPrinterTableError = 2 };

enum { NSPrinterTableNotFound = 1 };

enum { NSPrinterTableOK = 0 };

enum { NSPrintingCancelled = 0 };

enum { NSPrintingFailure = 3 };

enum { NSPrintingReplyLater = 2 };

enum { NSPrintingSuccess = 1 };

enum { NSProgressIndicatorBarStyle = 0 };

enum { NSProgressIndicatorPreferredAquaThickness = 12 };

enum { NSProgressIndicatorPreferredLargeThickness = 18 };

enum { NSProgressIndicatorPreferredSmallThickness = 10 };

enum { NSProgressIndicatorPreferredThickness = 14 };

enum { NSProgressIndicatorSpinningStyle = 1 };

enum { NSPushInCell = 2 };

enum { NSPushInCellMask = 2 };

enum { NSPushOnPushOffButton = 1 };

enum { NSQTMovieLoopingBackAndForthPlayback = 2 };

enum { NSQTMovieLoopingPlayback = 1 };

enum { NSQTMovieNormalPlayback = 0 };

enum { NSRGBColorSpaceModel = 1 };

enum { NSRGBModeColorPanel = 1 };

enum { NSRadioButton = 4 };

enum { NSRadioModeMatrix = 0 };

enum { NSRangeDateMode = 1 };

enum { NSRatingLevelIndicatorStyle = 3 };

enum { NSRecessedBezelStyle = 13 };

enum { NSRedoFunctionKey = 63300 };

enum { NSRegularControlSize = 0 };

enum { NSRegularSquareBezelStyle = 2 };

enum { NSRelevancyLevelIndicatorStyle = 0 };

enum { NSRemoveTraitFontAction = 7 };

enum { NSResetCursorRectsRunLoopOrdering = 700000 };

enum { NSResetFunctionKey = 63283 };

enum { NSResizableWindowMask = 8 };

enum { NSReturnTextMovement = 16 };

enum { NSRightArrowFunctionKey = 63235 };

enum { NSRightMouseDown = 3 };

enum { NSRightMouseDownMask = 8 };

enum { NSRightMouseDragged = 7 };

enum { NSRightMouseDraggedMask = 128 };

enum { NSRightMouseUp = 4 };

enum { NSRightMouseUpMask = 16 };

enum { NSRightTabStopType = 1 };

enum { NSRightTabsBezelBorder = 3 };

enum { NSRightTextAlignment = 1 };

enum { NSRightTextMovement = 20 };

enum { NSRoundLineCapStyle = 1 };

enum { NSRoundLineJoinStyle = 1 };

enum { NSRoundRectBezelStyle = 12 };

enum { NSRoundedBezelStyle = 1 };

enum { NSRoundedDisclosureBezelStyle = 14 };

enum { NSRoundedTokenStyle = 2 };

enum { NSRunAbortedResponse = -1001 };

enum { NSRunContinuesResponse = -1002 };

enum { NSRunStoppedResponse = -1000 };

enum { NSSaveAsOperation = 1 };

enum { NSSaveOperation = 0 };

enum { NSSaveToOperation = 2 };

enum { NSScaleNone = 2 };

enum { NSScaleProportionally = 0 };

enum { NSScaleToFit = 1 };

enum { NSScreenChangedEventType = 8 };

enum { NSScreenSaverWindowLevel = 1000 };

enum { NSScrollLockFunctionKey = 63279 };

enum { NSScrollWheel = 22 };

enum { NSScrollWheelMask = 4194304 };

enum { NSScrollerArrowsDefaultSetting = 0 };

enum { NSScrollerArrowsMaxEnd = 0 };

enum { NSScrollerArrowsMinEnd = 1 };

enum { NSScrollerArrowsNone = 2 };

enum { NSScrollerDecrementArrow = 1 };

enum { NSScrollerDecrementLine = 4 };

enum { NSScrollerDecrementPage = 1 };

enum { NSScrollerIncrementArrow = 0 };

enum { NSScrollerIncrementLine = 5 };

enum { NSScrollerIncrementPage = 3 };

enum { NSScrollerKnob = 2 };

enum { NSScrollerKnobSlot = 6 };

enum { NSScrollerNoPart = 0 };

enum { NSSearchFieldClearRecentsMenuItemTag = 1002 };

enum { NSSearchFieldNoRecentsMenuItemTag = 1003 };

enum { NSSearchFieldRecentsMenuItemTag = 1001 };

enum { NSSearchFieldRecentsTitleMenuItemTag = 1000 };

enum { NSSegmentSwitchTrackingMomentary = 2 };

enum { NSSegmentSwitchTrackingSelectAny = 1 };

enum { NSSegmentSwitchTrackingSelectOne = 0 };

enum { NSSelectByCharacter = 0 };

enum { NSSelectByParagraph = 2 };

enum { NSSelectByWord = 1 };

enum { NSSelectFunctionKey = 63297 };

enum { NSSelectedTab = 0 };

enum { NSSelectingNext = 1 };

enum { NSSelectingPrevious = 2 };

enum { NSSelectionAffinityDownstream = 1 };

enum { NSSelectionAffinityUpstream = 0 };

enum { NSShadowlessSquareBezelStyle = 6 };

enum { NSShiftKeyMask = 131072 };

enum { NSShowControlGlyphs = 1 };

enum { NSShowInvisibleGlyphs = 2 };

enum { NSSingleDateMode = 0 };

enum { NSSingleUnderlineStyle = 1 };

enum { NSSizeDownFontAction = 4 };

enum { NSSizeUpFontAction = 3 };

enum { NSSmallCapsFontMask = 128 };

enum { NSSmallControlSize = 1 };

enum { NSSmallIconButtonBezelStyle = 2 };

enum { NSSmallSquareBezelStyle = 10 };

enum { NSSpecialPageOrder = 0 };

enum { NSSquareLineCapStyle = 2 };

enum { NSSquareStatusItemLength = -2 };

enum { NSStatusWindowLevel = 25 };

enum { NSStopFunctionKey = 63284 };

enum { NSStringDrawingDisableScreenFontSubstitution = 4 };

enum { NSStringDrawingOneShot = 16 };

enum { NSStringDrawingUsesDeviceMetrics = 8 };

enum { NSStringDrawingUsesFontLeading = 2 };

enum { NSStringDrawingUsesLineFragmentOrigin = 1 };

enum { NSSubmenuWindowLevel = 3 };

enum { NSSwitchButton = 3 };

enum { NSSysReqFunctionKey = 63281 };

enum { NSSystemDefined = 14 };

enum { NSSystemDefinedMask = 16384 };

enum { NSSystemFunctionKey = 63287 };

enum { NSTIFFCompressionCCITTFAX3 = 3 };

enum { NSTIFFCompressionCCITTFAX4 = 4 };

enum { NSTIFFCompressionJPEG = 6 };

enum { NSTIFFCompressionLZW = 5 };

enum { NSTIFFCompressionNEXT = 32766 };

enum { NSTIFFCompressionNone = 1 };

enum { NSTIFFCompressionOldJPEG = 32865 };

enum { NSTIFFCompressionPackBits = 32773 };

enum { NSTIFFFileType = 0 };

enum { NSTabCharacter = 9 };

enum { NSTabTextMovement = 17 };

enum { NSTableColumnAutoresizingMask = 1 };

enum { NSTableColumnNoResizing = 0 };

enum { NSTableColumnUserResizingMask = 2 };

enum { NSTableViewDropAbove = 1 };

enum { NSTableViewDropOn = 0 };

enum { NSTableViewFirstColumnOnlyAutoresizingStyle = 5 };

enum { NSTableViewGridNone = 0 };

enum { NSTableViewLastColumnOnlyAutoresizingStyle = 4 };

enum { NSTableViewNoColumnAutoresizing = 0 };

enum { NSTableViewReverseSequentialColumnAutoresizingStyle = 3 };

enum { NSTableViewSequentialColumnAutoresizingStyle = 2 };

enum { NSTableViewSolidHorizontalGridLineMask = 2 };

enum { NSTableViewSolidVerticalGridLineMask = 1 };

enum { NSTableViewUniformColumnAutoresizingStyle = 1 };

enum { NSTabletPoint = 23 };

enum { NSTabletPointEventSubtype = 1 };

enum { NSTabletPointMask = 8388608 };

enum { NSTabletProximity = 24 };

enum { NSTabletProximityEventSubtype = 2 };

enum { NSTabletProximityMask = 16777216 };

enum { NSTerminateCancel = 0 };

enum { NSTerminateLater = 2 };

enum { NSTerminateNow = 1 };

enum { NSTextBlockAbsoluteValueType = 0 };

enum { NSTextBlockBaselineAlignment = 3 };

enum { NSTextBlockBorder = 0 };

enum { NSTextBlockBottomAlignment = 2 };

enum { NSTextBlockHeight = 4 };

enum { NSTextBlockMargin = 1 };

enum { NSTextBlockMaximumHeight = 6 };

enum { NSTextBlockMaximumWidth = 2 };

enum { NSTextBlockMiddleAlignment = 1 };

enum { NSTextBlockMinimumHeight = 5 };

enum { NSTextBlockMinimumWidth = 1 };

enum { NSTextBlockPadding = -1 };

enum { NSTextBlockPercentageValueType = 1 };

enum { NSTextBlockTopAlignment = 0 };

enum { NSTextBlockWidth = 0 };

enum { NSTextCellType = 1 };

enum { NSTextFieldAndStepperDatePickerStyle = 0 };

enum { NSTextFieldRoundedBezel = 1 };

enum { NSTextFieldSquareBezel = 0 };

enum { NSTextListPrependEnclosingMarker = 1 };

enum { NSTextReadInapplicableDocumentTypeError = 65806 };

enum { NSTextReadWriteErrorMaximum = 66303 };

enum { NSTextReadWriteErrorMinimum = 65792 };

enum { NSTextStorageEditedAttributes = 1 };

enum { NSTextStorageEditedCharacters = 2 };

enum { NSTextTableAutomaticLayoutAlgorithm = 0 };

enum { NSTextTableFixedLayoutAlgorithm = 1 };

enum { NSTextWriteInapplicableDocumentTypeError = 66062 };

enum { NSTexturedBackgroundWindowMask = 256 };

enum { NSTexturedRoundedBezelStyle = 11 };

enum { NSTexturedSquareBezelStyle = 8 };

enum { NSThickSquareBezelStyle = 3 };

enum { NSThickerSquareBezelStyle = 4 };

enum { NSTickMarkAbove = 1 };

enum { NSTickMarkBelow = 0 };

enum { NSTickMarkLeft = 1 };

enum { NSTickMarkRight = 0 };

enum { NSTimeZoneDatePickerElementFlag = 16 };

enum { NSTitledWindowMask = 1 };

enum { NSToggleButton = 2 };

enum { NSToolbarDisplayModeDefault = 0 };

enum { NSToolbarDisplayModeIconAndLabel = 1 };

enum { NSToolbarDisplayModeIconOnly = 2 };

enum { NSToolbarDisplayModeLabelOnly = 3 };

enum { NSToolbarItemVisibilityPriorityHigh = 1000 };

enum { NSToolbarItemVisibilityPriorityLow = -1000 };

enum { NSToolbarItemVisibilityPriorityStandard = 0 };

enum { NSToolbarItemVisibilityPriorityUser = 2000 };

enum { NSToolbarSizeModeDefault = 0 };

enum { NSToolbarSizeModeRegular = 1 };

enum { NSToolbarSizeModeSmall = 2 };

enum { NSTopTabsBezelBorder = 0 };

enum { NSTornOffMenuWindowLevel = 3 };

enum { NSTrackModeMatrix = 3 };

enum { NSTypesetterBehavior_10_2 = 2 };

enum { NSTypesetterBehavior_10_2_WithCompatibility = 1 };

enum { NSTypesetterBehavior_10_3 = 3 };

enum { NSTypesetterBehavior_10_4 = 4 };

enum { NSTypesetterContainerBreakAction = 32 };

enum { NSTypesetterHorizontalTabAction = 4 };

enum { NSTypesetterLatestBehavior = -1 };

enum { NSTypesetterLineBreakAction = 8 };

enum { NSTypesetterOriginalBehavior = 0 };

enum { NSTypesetterParagraphBreakAction = 16 };

enum { NSTypesetterWhitespaceAction = 2 };

enum { NSTypesetterZeroAdvancementAction = 1 };

enum { NSUnboldFontMask = 4 };

enum { NSUnderlinePatternDash = 512 };

enum { NSUnderlinePatternDashDot = 768 };

enum { NSUnderlinePatternDashDotDot = 1024 };

enum { NSUnderlinePatternDot = 256 };

enum { NSUnderlinePatternSolid = 0 };

enum { NSUnderlineStyleDouble = 9 };

enum { NSUnderlineStyleNone = 0 };

enum { NSUnderlineStyleSingle = 1 };

enum { NSUnderlineStyleThick = 2 };

enum { NSUndoFunctionKey = 63299 };

enum { NSUnifiedTitleAndToolbarWindowMask = 4096 };

enum { NSUnitalicFontMask = 16777216 };

enum { NSUnknownColorSpaceModel = -1 };

enum { NSUnknownPageOrder = 2 };

enum { NSUnknownPointingDevice = 0 };

enum { NSUnscaledWindowMask = 2048 };

enum { NSUpArrowFunctionKey = 63232 };

enum { NSUpTextMovement = 21 };

enum { NSUpdateWindowsRunLoopOrdering = 500000 };

enum { NSUserFunctionKey = 63286 };

enum { NSUtilityWindowMask = 16 };

enum { NSVariableStatusItemLength = -1 };

enum { NSVerticalRuler = 1 };

enum { NSViaPanelFontAction = 1 };

enum { NSViewHeightSizable = 16 };

enum { NSViewMaxXMargin = 4 };

enum { NSViewMaxYMargin = 32 };

enum { NSViewMinXMargin = 1 };

enum { NSViewMinYMargin = 8 };

enum { NSViewNotSizable = 0 };

enum { NSViewWidthSizable = 2 };

enum { NSWantsBidiLevels = 4 };

enum { NSWarningAlertStyle = 0 };

enum { NSWheelModeColorPanel = 6 };

enum { NSWindowAbove = 1 };

enum { NSWindowBelow = -1 };

enum { NSWindowCloseButton = 0 };

enum { NSWindowDocumentIconButton = 4 };

enum { NSWindowExposedEventType = 0 };

enum { NSWindowMiniaturizeButton = 1 };

enum { NSWindowMovedEventType = 4 };

enum { NSWindowOut = 0 };

enum { NSWindowToolbarButton = 3 };

enum { NSWindowZoomButton = 2 };

enum { NSWindows95InterfaceStyle = 2 };

enum { NSWorkspaceLaunchAllowingClassicStartup = 131072 };

enum { NSWorkspaceLaunchAndHide = 1048576 };

enum { NSWorkspaceLaunchAndHideOthers = 2097152 };

enum { NSWorkspaceLaunchAndPrint = 2 };

enum { NSWorkspaceLaunchAsync = 65536 };

enum { NSWorkspaceLaunchDefault = 196608 };

enum { NSWorkspaceLaunchInhibitingBackgroundOnly = 128 };

enum { NSWorkspaceLaunchNewInstance = 524288 };

enum { NSWorkspaceLaunchPreferringClassic = 262144 };

enum { NSWorkspaceLaunchWithoutActivation = 512 };

enum { NSWorkspaceLaunchWithoutAddingToRecents = 256 };

enum { NSWritingDirectionLeftToRight = 0 };

enum { NSWritingDirectionNatural = -1 };

enum { NSWritingDirectionRightToLeft = 1 };

enum { NSYearMonthDatePickerElementFlag = 192 };

enum { NSYearMonthDayDatePickerElementFlag = 224 };

// function 'NSAccessibilityActionDescription'
NSString* NSAccessibilityActionDescription(NSString* action);

// function 'NSAccessibilityPostNotification'
void NSAccessibilityPostNotification(id element, NSString* notification);

// function 'NSAccessibilityRaiseBadArgumentException'
void NSAccessibilityRaiseBadArgumentException(id element, NSString* attribute, id value);

// function 'NSAccessibilityRoleDescription'
NSString* NSAccessibilityRoleDescription(NSString* role, NSString* subrole);

// function 'NSAccessibilityRoleDescriptionForUIElement'
NSString* NSAccessibilityRoleDescriptionForUIElement(id element);

// function 'NSAccessibilityUnignoredAncestor'
id NSAccessibilityUnignoredAncestor(id element);

// function 'NSAccessibilityUnignoredChildren'
id NSAccessibilityUnignoredChildren(id originalChildren);

// function 'NSAccessibilityUnignoredChildrenForOnlyChild'
id NSAccessibilityUnignoredChildrenForOnlyChild(id originalChild);

// function 'NSAccessibilityUnignoredDescendant'
id NSAccessibilityUnignoredDescendant(id element);

// function 'NSApplicationLoad'
BOOL NSApplicationLoad(void);

// function 'NSApplicationMain'
int NSApplicationMain(int argc, const char** argv);

// function 'NSAvailableWindowDepths'
const int* NSAvailableWindowDepths(void);

// function 'NSBeep'
void NSBeep(void);

// function 'NSBestDepth'
int NSBestDepth(NSString* colorSpace, int bps, int bpp, BOOL planar, BOOL* exactMatch);

// function 'NSBitsPerPixelFromDepth'
int NSBitsPerPixelFromDepth(int depth);

// function 'NSBitsPerSampleFromDepth'
int NSBitsPerSampleFromDepth(int depth);

// function 'NSColorSpaceFromDepth'
NSString* NSColorSpaceFromDepth(int depth);

// function 'NSConvertGlyphsToPackedGlyphs'
int NSConvertGlyphsToPackedGlyphs(unsigned int *glBuf, int count, int packing, char* packedGlyphs);

// function 'NSCopyBits'
void NSCopyBits(int srcGState, struct _NSRect srcRect, struct _NSPoint destPoint);

// function 'NSCountWindows'
void NSCountWindows(int *count);

// function 'NSCountWindowsForContext'
void NSCountWindowsForContext(int context, int *count);

// function 'NSCreateFileContentsPboardType'
NSString* NSCreateFileContentsPboardType(NSString* fileType);

// function 'NSCreateFilenamePboardType'
NSString* NSCreateFilenamePboardType(NSString* fileType);

// function 'NSDisableScreenUpdates'
void NSDisableScreenUpdates(void);

// function 'NSDottedFrameRect'
void NSDottedFrameRect(struct _NSRect aRect);

// function 'NSDrawBitmap'
void NSDrawBitmap(struct _NSRect rect, int width, int height, int bps, int spp, int bpp, int bpr, BOOL isPlanar, BOOL hasAlpha, NSString* colorSpaceName, const unsigned char ** data);

// function 'NSDrawButton'
void NSDrawButton(struct _NSRect aRect, struct _NSRect clipRect);

// function 'NSDrawColorTiledRects'
struct _NSRect NSDrawColorTiledRects(struct _NSRect boundsRect, struct _NSRect clipRect, const int* sides, id *colors, int count);

// function 'NSDrawDarkBezel'
void NSDrawDarkBezel(struct _NSRect aRect, struct _NSRect clipRect);

// function 'NSDrawGrayBezel'
void NSDrawGrayBezel(struct _NSRect aRect, struct _NSRect clipRect);

// function 'NSDrawGroove'
void NSDrawGroove(struct _NSRect aRect, struct _NSRect clipRect);

// function 'NSDrawLightBezel'
void NSDrawLightBezel(struct _NSRect aRect, struct _NSRect clipRect);

// function 'NSDrawTiledRects'
struct _NSRect NSDrawTiledRects(struct _NSRect boundsRect, struct _NSRect clipRect, const int* sides, const float* grays, int count);

// function 'NSDrawWhiteBezel'
void NSDrawWhiteBezel(struct _NSRect aRect, struct _NSRect clipRect);

// function 'NSDrawWindowBackground'
void NSDrawWindowBackground(struct _NSRect aRect);

// function 'NSEnableScreenUpdates'
void NSEnableScreenUpdates(void);

// function 'NSEraseRect'
void NSEraseRect(struct _NSRect aRect);

// function 'NSEventMaskFromType'
unsigned int NSEventMaskFromType(int type);

// function 'NSFrameRect'
void NSFrameRect(struct _NSRect aRect);

// function 'NSFrameRectWithWidth'
void NSFrameRectWithWidth(struct _NSRect aRect, float frameWidth);

// function 'NSFrameRectWithWidthUsingOperation'
void NSFrameRectWithWidthUsingOperation(struct _NSRect aRect, float frameWidth, int op);

// function 'NSGetFileType'
NSString* NSGetFileType(NSString* pboardType);

// function 'NSGetFileTypes'
id NSGetFileTypes(id pboardTypes);

// function 'NSGetWindowServerMemory'
int NSGetWindowServerMemory(int context, int *virtualMemory, int *windowBackingMemory, id *windowDumpString);

// function 'NSHighlightRect'
void NSHighlightRect(struct _NSRect aRect);

// function 'NSInterfaceStyleForKey'
int NSInterfaceStyleForKey(NSString* key, NSResponder* responder);

// function 'NSIsControllerMarker'
BOOL NSIsControllerMarker(id object);

// function 'NSNumberOfColorComponents'
int NSNumberOfColorComponents(NSString* colorSpaceName);

// function 'NSOpenGLGetOption'
void NSOpenGLGetOption(int pname, long *param);

// function 'NSOpenGLGetVersion'
void NSOpenGLGetVersion(long *major, long *minor);

// function 'NSOpenGLSetOption'
void NSOpenGLSetOption(int pname, long param);

// function 'NSPerformService'
BOOL NSPerformService(NSString* itemName, NSPasteboard* pboard);

// function 'NSPlanarFromDepth'
BOOL NSPlanarFromDepth(int depth);

// function 'NSReadPixel'
NSColor* NSReadPixel(struct _NSPoint passedPoint);

// function 'NSRectClip'
void NSRectClip(struct _NSRect aRect);

// function 'NSRectClipList'
void NSRectClipList(const struct _NSRect* rects, int count);

// function 'NSRectFill'
void NSRectFill(struct _NSRect aRect);

// function 'NSRectFillList'
void NSRectFillList(const struct _NSRect* rects, int count);

// function 'NSRectFillListUsingOperation'
void NSRectFillListUsingOperation(const struct _NSRect* rects, int count, int op);

// function 'NSRectFillListWithColors'
void NSRectFillListWithColors(const struct _NSRect* rects, id *colors, int num);

// function 'NSRectFillListWithColorsUsingOperation'
void NSRectFillListWithColorsUsingOperation(const struct _NSRect* rects, id *colors, int num, int op);

// function 'NSRectFillListWithGrays'
void NSRectFillListWithGrays(const struct _NSRect* rects, const float* grays, int num);

// function 'NSRectFillUsingOperation'
void NSRectFillUsingOperation(struct _NSRect aRect, int op);

// function 'NSRegisterServicesProvider'
void NSRegisterServicesProvider(id provider, NSString* name);

// function 'NSReleaseAlertPanel'
void NSReleaseAlertPanel(id panel);

// function 'NSSetFocusRingStyle'
void NSSetFocusRingStyle(int placement);

// function 'NSSetShowsServicesMenuItem'
int NSSetShowsServicesMenuItem(NSString* itemName, BOOL enabled);

// function 'NSShowAnimationEffect'
void NSShowAnimationEffect(int animationEffect, struct _NSPoint centerLocation, struct _NSSize size, id animationDelegate, SEL didEndSelector, void *contextInfo);

// function 'NSShowsServicesMenuItem'
BOOL NSShowsServicesMenuItem(NSString* itemName);

// function 'NSUnregisterServicesProvider'
void NSUnregisterServicesProvider(NSString* name);

// function 'NSUpdateDynamicServices'
void NSUpdateDynamicServices(void);

// function 'NSWindowList'
void NSWindowList(int size, int *list);

// function 'NSWindowListForContext'
void NSWindowListForContext(int context, int size, int *list);

// method '-[CIColor initWithColor:]'
CIColor *_IM_CIColor_initWithColor_C(CIColor *_self, NSColor* color);

// method '-[CIImage drawAtPoint:fromRect:operation:fraction:]'
void _IM_CIImage_drawAtPoint_CfromRect_Coperation_Cfraction_C(CIImage *_self, struct _NSPoint point, struct _NSRect fromRect, int op, float delta);

// method '-[CIImage drawInRect:fromRect:operation:fraction:]'
void _IM_CIImage_drawInRect_CfromRect_Coperation_Cfraction_C(CIImage *_self, struct _NSRect rect, struct _NSRect fromRect, int op, float delta);

// method '-[CIImage initWithBitmapImageRep:]'
CIImage *_IM_CIImage_initWithBitmapImageRep_C(CIImage *_self, NSBitmapImageRep* bitmapImageRep);

// method '+[NSATSTypesetter sharedTypesetter]'
id _CM_NSATSTypesetter_sharedTypesetter(Class _class);

// method '-[NSActionCell action]'
SEL _IM_NSActionCell_action(NSActionCell *_self);

// method '-[NSActionCell controlView]'
NSView* _IM_NSActionCell_controlView(NSActionCell *_self);

// method '-[NSActionCell doubleValue]'
double _IM_NSActionCell_doubleValue(NSActionCell *_self);

// method '-[NSActionCell floatValue]'
float _IM_NSActionCell_floatValue(NSActionCell *_self);

// method '-[NSActionCell intValue]'
int _IM_NSActionCell_intValue(NSActionCell *_self);

// method '-[NSActionCell setAction:]'
void _IM_NSActionCell_setAction_C(NSActionCell *_self, SEL aSelector);

// method '-[NSActionCell setAlignment:]'
void _IM_NSActionCell_setAlignment_C(NSActionCell *_self, int mode);

// method '-[NSActionCell setBezeled:]'
void _IM_NSActionCell_setBezeled_C(NSActionCell *_self, BOOL flag);

// method '-[NSActionCell setBordered:]'
void _IM_NSActionCell_setBordered_C(NSActionCell *_self, BOOL flag);

// method '-[NSActionCell setControlView:]'
void _IM_NSActionCell_setControlView_C(NSActionCell *_self, NSView* view);

// method '-[NSActionCell setEnabled:]'
void _IM_NSActionCell_setEnabled_C(NSActionCell *_self, BOOL flag);

// method '-[NSActionCell setFloatingPointFormat:left:right:]'
void _IM_NSActionCell_setFloatingPointFormat_Cleft_Cright_C(NSActionCell *_self, BOOL autoRange, unsigned int leftDigits, unsigned int rightDigits);

// method '-[NSActionCell setFont:]'
void _IM_NSActionCell_setFont_C(NSActionCell *_self, NSFont* fontObj);

// method '-[NSActionCell setImage:]'
void _IM_NSActionCell_setImage_C(NSActionCell *_self, NSImage* image);

// method '-[NSActionCell setObjectValue:]'
void _IM_NSActionCell_setObjectValue_C(NSActionCell *_self, id obj);

// method '-[NSActionCell setTag:]'
void _IM_NSActionCell_setTag_C(NSActionCell *_self, int anInt);

// method '-[NSActionCell setTarget:]'
void _IM_NSActionCell_setTarget_C(NSActionCell *_self, id anObject);

// method '-[NSActionCell stringValue]'
NSString* _IM_NSActionCell_stringValue(NSActionCell *_self);

// method '-[NSActionCell tag]'
int _IM_NSActionCell_tag(NSActionCell *_self);

// method '-[NSActionCell target]'
id _IM_NSActionCell_target(NSActionCell *_self);

// method '-[NSAffineTransform concat]'
void _IM_NSAffineTransform_concat(NSAffineTransform *_self);

// method '-[NSAffineTransform set]'
void _IM_NSAffineTransform_set(NSAffineTransform *_self);

// method '-[NSAffineTransform transformBezierPath:]'
NSBezierPath* _IM_NSAffineTransform_transformBezierPath_C(NSAffineTransform *_self, NSBezierPath* aPath);

// method '-[NSAlert addButtonWithTitle:]'
NSButton* _IM_NSAlert_addButtonWithTitle_C(NSAlert *_self, NSString* title);

// method '-[NSAlert alertStyle]'
int _IM_NSAlert_alertStyle(NSAlert *_self);

// method '+[NSAlert alertWithError:]'
NSAlert* _CM_NSAlert_alertWithError_C(Class _class, id error);

// method '-[NSAlert beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void _IM_NSAlert_beginSheetModalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(NSAlert *_self, NSWindow* window, id delegate, SEL didEndSelector, void *contextInfo);

// method '-[NSAlert buttons]'
id _IM_NSAlert_buttons(NSAlert *_self);

// method '-[NSAlert delegate]'
id _IM_NSAlert_delegate(NSAlert *_self);

// method '-[NSAlert helpAnchor]'
NSString* _IM_NSAlert_helpAnchor(NSAlert *_self);

// method '-[NSAlert icon]'
NSImage* _IM_NSAlert_icon(NSAlert *_self);

// method '-[NSAlert informativeText]'
NSString* _IM_NSAlert_informativeText(NSAlert *_self);

// method '-[NSAlert messageText]'
NSString* _IM_NSAlert_messageText(NSAlert *_self);

// method '-[NSAlert runModal]'
int _IM_NSAlert_runModal(NSAlert *_self);

// method '-[NSAlert setAlertStyle:]'
void _IM_NSAlert_setAlertStyle_C(NSAlert *_self, int style);

// method '-[NSAlert setDelegate:]'
void _IM_NSAlert_setDelegate_C(NSAlert *_self, id delegate);

// method '-[NSAlert setHelpAnchor:]'
void _IM_NSAlert_setHelpAnchor_C(NSAlert *_self, NSString* anchor);

// method '-[NSAlert setIcon:]'
void _IM_NSAlert_setIcon_C(NSAlert *_self, NSImage* icon);

// method '-[NSAlert setInformativeText:]'
void _IM_NSAlert_setInformativeText_C(NSAlert *_self, NSString* informativeText);

// method '-[NSAlert setMessageText:]'
void _IM_NSAlert_setMessageText_C(NSAlert *_self, NSString* messageText);

// method '-[NSAlert setShowsHelp:]'
void _IM_NSAlert_setShowsHelp_C(NSAlert *_self, BOOL showsHelp);

// method '-[NSAlert showsHelp]'
BOOL _IM_NSAlert_showsHelp(NSAlert *_self);

// method '-[NSAlert window]'
id _IM_NSAlert_window(NSAlert *_self);

// method '-[NSAnimation addProgressMark:]'
void _IM_NSAnimation_addProgressMark_C(NSAnimation *_self, float progressMark);

// method '-[NSAnimation animationBlockingMode]'
int _IM_NSAnimation_animationBlockingMode(NSAnimation *_self);

// method '-[NSAnimation animationCurve]'
int _IM_NSAnimation_animationCurve(NSAnimation *_self);

// method '-[NSAnimation clearStartAnimation]'
void _IM_NSAnimation_clearStartAnimation(NSAnimation *_self);

// method '-[NSAnimation clearStopAnimation]'
void _IM_NSAnimation_clearStopAnimation(NSAnimation *_self);

// method '-[NSAnimation currentProgress]'
float _IM_NSAnimation_currentProgress(NSAnimation *_self);

// method '-[NSAnimation currentValue]'
float _IM_NSAnimation_currentValue(NSAnimation *_self);

// method '-[NSAnimation delegate]'
id _IM_NSAnimation_delegate(NSAnimation *_self);

// method '-[NSAnimation duration]'
double _IM_NSAnimation_duration(NSAnimation *_self);

// method '-[NSAnimation frameRate]'
float _IM_NSAnimation_frameRate(NSAnimation *_self);

// method '-[NSAnimation initWithDuration:animationCurve:]'
NSAnimation *_IM_NSAnimation_initWithDuration_CanimationCurve_C(NSAnimation *_self, double duration, int animationCurve);

// method '-[NSAnimation isAnimating]'
BOOL _IM_NSAnimation_isAnimating(NSAnimation *_self);

// method '-[NSAnimation progressMarks]'
id _IM_NSAnimation_progressMarks(NSAnimation *_self);

// method '-[NSAnimation removeProgressMark:]'
void _IM_NSAnimation_removeProgressMark_C(NSAnimation *_self, float progressMark);

// method '-[NSAnimation runLoopModesForAnimating]'
id _IM_NSAnimation_runLoopModesForAnimating(NSAnimation *_self);

// method '-[NSAnimation setAnimationBlockingMode:]'
void _IM_NSAnimation_setAnimationBlockingMode_C(NSAnimation *_self, int animationBlockingMode);

// method '-[NSAnimation setAnimationCurve:]'
void _IM_NSAnimation_setAnimationCurve_C(NSAnimation *_self, int curve);

// method '-[NSAnimation setCurrentProgress:]'
void _IM_NSAnimation_setCurrentProgress_C(NSAnimation *_self, float progress);

// method '-[NSAnimation setDelegate:]'
void _IM_NSAnimation_setDelegate_C(NSAnimation *_self, id delegate);

// method '-[NSAnimation setDuration:]'
void _IM_NSAnimation_setDuration_C(NSAnimation *_self, double duration);

// method '-[NSAnimation setFrameRate:]'
void _IM_NSAnimation_setFrameRate_C(NSAnimation *_self, float framesPerSecond);

// method '-[NSAnimation setProgressMarks:]'
void _IM_NSAnimation_setProgressMarks_C(NSAnimation *_self, id progressMarks);

// method '-[NSAnimation startAnimation]'
void _IM_NSAnimation_startAnimation(NSAnimation *_self);

// method '-[NSAnimation startWhenAnimation:reachesProgress:]'
void _IM_NSAnimation_startWhenAnimation_CreachesProgress_C(NSAnimation *_self, NSAnimation* animation, float startProgress);

// method '-[NSAnimation stopAnimation]'
void _IM_NSAnimation_stopAnimation(NSAnimation *_self);

// method '-[NSAnimation stopWhenAnimation:reachesProgress:]'
void _IM_NSAnimation_stopWhenAnimation_CreachesProgress_C(NSAnimation *_self, NSAnimation* animation, float stopProgress);

// method '-[NSAppleScript richTextSource]'
NSAttributedString* _IM_NSAppleScript_richTextSource(NSAppleScript *_self);

// method '-[NSApplication abortModal]'
void _IM_NSApplication_abortModal(NSApplication *_self);

// method '-[NSApplication activateContextHelpMode:]'
void _IM_NSApplication_activateContextHelpMode_C(NSApplication *_self, id sender);

// method '-[NSApplication activateIgnoringOtherApps:]'
void _IM_NSApplication_activateIgnoringOtherApps_C(NSApplication *_self, BOOL flag);

// method '-[NSApplication addWindowsItem:title:filename:]'
void _IM_NSApplication_addWindowsItem_Ctitle_Cfilename_C(NSApplication *_self, NSWindow* win, NSString* aString, BOOL isFilename);

// method '-[NSApplication applicationIconImage]'
NSImage* _IM_NSApplication_applicationIconImage(NSApplication *_self);

// method '-[NSApplication arrangeInFront:]'
void _IM_NSApplication_arrangeInFront_C(NSApplication *_self, id sender);

// method '-[NSApplication beginModalSessionForWindow:]'
struct _NSModalSession *_IM_NSApplication_beginModalSessionForWindow_C(NSApplication *_self, NSWindow* theWindow);

// method '-[NSApplication beginModalSessionForWindow:relativeToWindow:]'
struct _NSModalSession *_IM_NSApplication_beginModalSessionForWindow_CrelativeToWindow_C(NSApplication *_self, NSWindow* theWindow, NSWindow* docWindow);

// method '-[NSApplication beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void _IM_NSApplication_beginSheet_CmodalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(NSApplication *_self, NSWindow* sheet, NSWindow* docWindow, id modalDelegate, SEL didEndSelector, void *contextInfo);

// method '-[NSApplication cancelUserAttentionRequest:]'
void _IM_NSApplication_cancelUserAttentionRequest_C(NSApplication *_self, int request);

// method '-[NSApplication changeWindowsItem:title:filename:]'
void _IM_NSApplication_changeWindowsItem_Ctitle_Cfilename_C(NSApplication *_self, NSWindow* win, NSString* aString, BOOL isFilename);

// method '-[NSApplication context]'
NSGraphicsContext* _IM_NSApplication_context(NSApplication *_self);

// method '-[NSApplication currentEvent]'
NSEvent* _IM_NSApplication_currentEvent(NSApplication *_self);

// method '-[NSApplication deactivate]'
void _IM_NSApplication_deactivate(NSApplication *_self);

// method '-[NSApplication delegate]'
id _IM_NSApplication_delegate(NSApplication *_self);

// method '+[NSApplication detachDrawingThread:toTarget:withObject:]'
void _CM_NSApplication_detachDrawingThread_CtoTarget_CwithObject_C(Class _class, SEL selector, id target, id argument);

// method '-[NSApplication discardEventsMatchingMask:beforeEvent:]'
void _IM_NSApplication_discardEventsMatchingMask_CbeforeEvent_C(NSApplication *_self, unsigned int mask, NSEvent* lastEvent);

// method '-[NSApplication endModalSession:]'
void _IM_NSApplication_endModalSession_C(NSApplication *_self, struct _NSModalSession *session);

// method '-[NSApplication endSheet:]'
void _IM_NSApplication_endSheet_C(NSApplication *_self, NSWindow* sheet);

// method '-[NSApplication endSheet:returnCode:]'
void _IM_NSApplication_endSheet_CreturnCode_C(NSApplication *_self, NSWindow* sheet, int returnCode);

// method '-[NSApplication finishLaunching]'
void _IM_NSApplication_finishLaunching(NSApplication *_self);

// method '-[NSApplication hide:]'
void _IM_NSApplication_hide_C(NSApplication *_self, id sender);

// method '-[NSApplication hideOtherApplications:]'
void _IM_NSApplication_hideOtherApplications_C(NSApplication *_self, id sender);

// method '-[NSApplication isActive]'
BOOL _IM_NSApplication_isActive(NSApplication *_self);

// method '-[NSApplication isHidden]'
BOOL _IM_NSApplication_isHidden(NSApplication *_self);

// method '-[NSApplication isRunning]'
BOOL _IM_NSApplication_isRunning(NSApplication *_self);

// method '-[NSApplication keyWindow]'
NSWindow* _IM_NSApplication_keyWindow(NSApplication *_self);

// method '-[NSApplication mainMenu]'
NSMenu* _IM_NSApplication_mainMenu(NSApplication *_self);

// method '-[NSApplication mainWindow]'
NSWindow* _IM_NSApplication_mainWindow(NSApplication *_self);

// method '-[NSApplication makeWindowsPerform:inOrder:]'
NSWindow* _IM_NSApplication_makeWindowsPerform_CinOrder_C(NSApplication *_self, SEL aSelector, BOOL flag);

// method '-[NSApplication miniaturizeAll:]'
void _IM_NSApplication_miniaturizeAll_C(NSApplication *_self, id sender);

// method '-[NSApplication modalWindow]'
NSWindow* _IM_NSApplication_modalWindow(NSApplication *_self);

// method '-[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:]'
NSEvent* _IM_NSApplication_nextEventMatchingMask_CuntilDate_CinMode_Cdequeue_C(NSApplication *_self, unsigned int mask, id expiration, NSString* mode, BOOL deqFlag);

// method '-[NSApplication orderFrontCharacterPalette:]'
void _IM_NSApplication_orderFrontCharacterPalette_C(NSApplication *_self, id sender);

// method '-[NSApplication orderFrontColorPanel:]'
void _IM_NSApplication_orderFrontColorPanel_C(NSApplication *_self, id sender);

// method '-[NSApplication orderFrontStandardAboutPanel:]'
void _IM_NSApplication_orderFrontStandardAboutPanel_C(NSApplication *_self, id sender);

// method '-[NSApplication orderFrontStandardAboutPanelWithOptions:]'
void _IM_NSApplication_orderFrontStandardAboutPanelWithOptions_C(NSApplication *_self, id optionsDictionary);

// method '-[NSApplication orderedDocuments]'
id _IM_NSApplication_orderedDocuments(NSApplication *_self);

// method '-[NSApplication orderedWindows]'
id _IM_NSApplication_orderedWindows(NSApplication *_self);

// method '-[NSApplication postEvent:atStart:]'
void _IM_NSApplication_postEvent_CatStart_C(NSApplication *_self, NSEvent* event, BOOL flag);

// method '-[NSApplication preventWindowOrdering]'
void _IM_NSApplication_preventWindowOrdering(NSApplication *_self);

// method '-[NSApplication registerServicesMenuSendTypes:returnTypes:]'
void _IM_NSApplication_registerServicesMenuSendTypes_CreturnTypes_C(NSApplication *_self, id sendTypes, id returnTypes);

// method '-[NSApplication removeWindowsItem:]'
void _IM_NSApplication_removeWindowsItem_C(NSApplication *_self, NSWindow* win);

// method '-[NSApplication replyToApplicationShouldTerminate:]'
void _IM_NSApplication_replyToApplicationShouldTerminate_C(NSApplication *_self, BOOL shouldTerminate);

// method '-[NSApplication replyToOpenOrPrint:]'
void _IM_NSApplication_replyToOpenOrPrint_C(NSApplication *_self, int reply);

// method '-[NSApplication reportException:]'
void _IM_NSApplication_reportException_C(NSApplication *_self, id theException);

// method '-[NSApplication requestUserAttention:]'
int _IM_NSApplication_requestUserAttention_C(NSApplication *_self, int requestType);

// method '-[NSApplication run]'
void _IM_NSApplication_run(NSApplication *_self);

// method '-[NSApplication runModalForWindow:]'
int _IM_NSApplication_runModalForWindow_C(NSApplication *_self, NSWindow* theWindow);

// method '-[NSApplication runModalForWindow:relativeToWindow:]'
int _IM_NSApplication_runModalForWindow_CrelativeToWindow_C(NSApplication *_self, NSWindow* theWindow, NSWindow* docWindow);

// method '-[NSApplication runModalSession:]'
int _IM_NSApplication_runModalSession_C(NSApplication *_self, struct _NSModalSession *session);

// method '-[NSApplication runPageLayout:]'
void _IM_NSApplication_runPageLayout_C(NSApplication *_self, id sender);

// method '-[NSApplication sendAction:to:from:]'
BOOL _IM_NSApplication_sendAction_Cto_Cfrom_C(NSApplication *_self, SEL theAction, id theTarget, id sender);

// method '-[NSApplication sendEvent:]'
void _IM_NSApplication_sendEvent_C(NSApplication *_self, NSEvent* theEvent);

// method '-[NSApplication servicesMenu]'
NSMenu* _IM_NSApplication_servicesMenu(NSApplication *_self);

// method '-[NSApplication servicesProvider]'
id _IM_NSApplication_servicesProvider(NSApplication *_self);

// method '-[NSApplication setApplicationIconImage:]'
void _IM_NSApplication_setApplicationIconImage_C(NSApplication *_self, NSImage* image);

// method '-[NSApplication setDelegate:]'
void _IM_NSApplication_setDelegate_C(NSApplication *_self, id anObject);

// method '-[NSApplication setMainMenu:]'
void _IM_NSApplication_setMainMenu_C(NSApplication *_self, NSMenu* aMenu);

// method '-[NSApplication setServicesMenu:]'
void _IM_NSApplication_setServicesMenu_C(NSApplication *_self, NSMenu* aMenu);

// method '-[NSApplication setServicesProvider:]'
void _IM_NSApplication_setServicesProvider_C(NSApplication *_self, id provider);

// method '-[NSApplication setWindowsMenu:]'
void _IM_NSApplication_setWindowsMenu_C(NSApplication *_self, NSMenu* aMenu);

// method '-[NSApplication setWindowsNeedUpdate:]'
void _IM_NSApplication_setWindowsNeedUpdate_C(NSApplication *_self, BOOL needUpdate);

// method '+[NSApplication sharedApplication]'
NSApplication* _CM_NSApplication_sharedApplication(Class _class);

// method '-[NSApplication showHelp:]'
void _IM_NSApplication_showHelp_C(NSApplication *_self, id sender);

// method '-[NSApplication stop:]'
void _IM_NSApplication_stop_C(NSApplication *_self, id sender);

// method '-[NSApplication stopModal]'
void _IM_NSApplication_stopModal(NSApplication *_self);

// method '-[NSApplication stopModalWithCode:]'
void _IM_NSApplication_stopModalWithCode_C(NSApplication *_self, int returnCode);

// method '-[NSApplication targetForAction:]'
id _IM_NSApplication_targetForAction_C(NSApplication *_self, SEL theAction);

// method '-[NSApplication targetForAction:to:from:]'
id _IM_NSApplication_targetForAction_Cto_Cfrom_C(NSApplication *_self, SEL theAction, id theTarget, id sender);

// method '-[NSApplication terminate:]'
void _IM_NSApplication_terminate_C(NSApplication *_self, id sender);

// method '-[NSApplication tryToPerform:with:]'
BOOL _IM_NSApplication_tryToPerform_Cwith_C(NSApplication *_self, SEL anAction, id anObject);

// method '-[NSApplication unhide:]'
void _IM_NSApplication_unhide_C(NSApplication *_self, id sender);

// method '-[NSApplication unhideAllApplications:]'
void _IM_NSApplication_unhideAllApplications_C(NSApplication *_self, id sender);

// method '-[NSApplication unhideWithoutActivation]'
void _IM_NSApplication_unhideWithoutActivation(NSApplication *_self);

// method '-[NSApplication updateWindows]'
void _IM_NSApplication_updateWindows(NSApplication *_self);

// method '-[NSApplication updateWindowsItem:]'
void _IM_NSApplication_updateWindowsItem_C(NSApplication *_self, NSWindow* win);

// method '-[NSApplication validRequestorForSendType:returnType:]'
id _IM_NSApplication_validRequestorForSendType_CreturnType_C(NSApplication *_self, NSString* sendType, NSString* returnType);

// method '-[NSApplication windowWithWindowNumber:]'
NSWindow* _IM_NSApplication_windowWithWindowNumber_C(NSApplication *_self, int windowNum);

// method '-[NSApplication windows]'
id _IM_NSApplication_windows(NSApplication *_self);

// method '-[NSApplication windowsMenu]'
NSMenu* _IM_NSApplication_windowsMenu(NSApplication *_self);

// method '-[NSArrayController add:]'
void _IM_NSArrayController_add_C(NSArrayController *_self, id sender);

// method '-[NSArrayController addObject:]'
void _IM_NSArrayController_addObject_C(NSArrayController *_self, id object);

// method '-[NSArrayController addObjects:]'
void _IM_NSArrayController_addObjects_C(NSArrayController *_self, id objects);

// method '-[NSArrayController addSelectedObjects:]'
BOOL _IM_NSArrayController_addSelectedObjects_C(NSArrayController *_self, id objects);

// method '-[NSArrayController addSelectionIndexes:]'
BOOL _IM_NSArrayController_addSelectionIndexes_C(NSArrayController *_self, id indexes);

// method '-[NSArrayController alwaysUsesMultipleValuesMarker]'
BOOL _IM_NSArrayController_alwaysUsesMultipleValuesMarker(NSArrayController *_self);

// method '-[NSArrayController arrangeObjects:]'
id _IM_NSArrayController_arrangeObjects_C(NSArrayController *_self, id objects);

// method '-[NSArrayController arrangedObjects]'
id _IM_NSArrayController_arrangedObjects(NSArrayController *_self);

// method '-[NSArrayController avoidsEmptySelection]'
BOOL _IM_NSArrayController_avoidsEmptySelection(NSArrayController *_self);

// method '-[NSArrayController canInsert]'
BOOL _IM_NSArrayController_canInsert(NSArrayController *_self);

// method '-[NSArrayController canSelectNext]'
BOOL _IM_NSArrayController_canSelectNext(NSArrayController *_self);

// method '-[NSArrayController canSelectPrevious]'
BOOL _IM_NSArrayController_canSelectPrevious(NSArrayController *_self);

// method '-[NSArrayController clearsFilterPredicateOnInsertion]'
BOOL _IM_NSArrayController_clearsFilterPredicateOnInsertion(NSArrayController *_self);

// method '-[NSArrayController filterPredicate]'
id _IM_NSArrayController_filterPredicate(NSArrayController *_self);

// method '-[NSArrayController insert:]'
void _IM_NSArrayController_insert_C(NSArrayController *_self, id sender);

// method '-[NSArrayController insertObject:atArrangedObjectIndex:]'
void _IM_NSArrayController_insertObject_CatArrangedObjectIndex_C(NSArrayController *_self, id object, unsigned int index);

// method '-[NSArrayController insertObjects:atArrangedObjectIndexes:]'
void _IM_NSArrayController_insertObjects_CatArrangedObjectIndexes_C(NSArrayController *_self, id objects, id indexes);

// method '-[NSArrayController preservesSelection]'
BOOL _IM_NSArrayController_preservesSelection(NSArrayController *_self);

// method '-[NSArrayController rearrangeObjects]'
void _IM_NSArrayController_rearrangeObjects(NSArrayController *_self);

// method '-[NSArrayController remove:]'
void _IM_NSArrayController_remove_C(NSArrayController *_self, id sender);

// method '-[NSArrayController removeObject:]'
void _IM_NSArrayController_removeObject_C(NSArrayController *_self, id object);

// method '-[NSArrayController removeObjectAtArrangedObjectIndex:]'
void _IM_NSArrayController_removeObjectAtArrangedObjectIndex_C(NSArrayController *_self, unsigned int index);

// method '-[NSArrayController removeObjects:]'
void _IM_NSArrayController_removeObjects_C(NSArrayController *_self, id objects);

// method '-[NSArrayController removeObjectsAtArrangedObjectIndexes:]'
void _IM_NSArrayController_removeObjectsAtArrangedObjectIndexes_C(NSArrayController *_self, id indexes);

// method '-[NSArrayController removeSelectedObjects:]'
BOOL _IM_NSArrayController_removeSelectedObjects_C(NSArrayController *_self, id objects);

// method '-[NSArrayController removeSelectionIndexes:]'
BOOL _IM_NSArrayController_removeSelectionIndexes_C(NSArrayController *_self, id indexes);

// method '-[NSArrayController selectNext:]'
void _IM_NSArrayController_selectNext_C(NSArrayController *_self, id sender);

// method '-[NSArrayController selectPrevious:]'
void _IM_NSArrayController_selectPrevious_C(NSArrayController *_self, id sender);

// method '-[NSArrayController selectedObjects]'
id _IM_NSArrayController_selectedObjects(NSArrayController *_self);

// method '-[NSArrayController selectionIndex]'
unsigned int _IM_NSArrayController_selectionIndex(NSArrayController *_self);

// method '-[NSArrayController selectionIndexes]'
id _IM_NSArrayController_selectionIndexes(NSArrayController *_self);

// method '-[NSArrayController selectsInsertedObjects]'
BOOL _IM_NSArrayController_selectsInsertedObjects(NSArrayController *_self);

// method '-[NSArrayController setAlwaysUsesMultipleValuesMarker:]'
void _IM_NSArrayController_setAlwaysUsesMultipleValuesMarker_C(NSArrayController *_self, BOOL flag);

// method '-[NSArrayController setAvoidsEmptySelection:]'
void _IM_NSArrayController_setAvoidsEmptySelection_C(NSArrayController *_self, BOOL flag);

// method '-[NSArrayController setClearsFilterPredicateOnInsertion:]'
void _IM_NSArrayController_setClearsFilterPredicateOnInsertion_C(NSArrayController *_self, BOOL flag);

// method '-[NSArrayController setFilterPredicate:]'
void _IM_NSArrayController_setFilterPredicate_C(NSArrayController *_self, id filterPredicate);

// method '-[NSArrayController setPreservesSelection:]'
void _IM_NSArrayController_setPreservesSelection_C(NSArrayController *_self, BOOL flag);

// method '-[NSArrayController setSelectedObjects:]'
BOOL _IM_NSArrayController_setSelectedObjects_C(NSArrayController *_self, id objects);

// method '-[NSArrayController setSelectionIndex:]'
BOOL _IM_NSArrayController_setSelectionIndex_C(NSArrayController *_self, unsigned int index);

// method '-[NSArrayController setSelectionIndexes:]'
BOOL _IM_NSArrayController_setSelectionIndexes_C(NSArrayController *_self, id indexes);

// method '-[NSArrayController setSelectsInsertedObjects:]'
void _IM_NSArrayController_setSelectsInsertedObjects_C(NSArrayController *_self, BOOL flag);

// method '-[NSArrayController setSortDescriptors:]'
void _IM_NSArrayController_setSortDescriptors_C(NSArrayController *_self, id sortDescriptors);

// method '-[NSArrayController sortDescriptors]'
id _IM_NSArrayController_sortDescriptors(NSArrayController *_self);

// method '-[NSAttributedString RTFDFileWrapperFromRange:documentAttributes:]'
NSFileWrapper* _IM_NSAttributedString_RTFDFileWrapperFromRange_CdocumentAttributes_C(NSAttributedString *_self, struct _NSRange range, id dict);

// method '-[NSAttributedString RTFDFromRange:documentAttributes:]'
id _IM_NSAttributedString_RTFDFromRange_CdocumentAttributes_C(NSAttributedString *_self, struct _NSRange range, id dict);

// method '-[NSAttributedString RTFFromRange:documentAttributes:]'
id _IM_NSAttributedString_RTFFromRange_CdocumentAttributes_C(NSAttributedString *_self, struct _NSRange range, id dict);

// method '+[NSAttributedString attributedStringWithAttachment:]'
NSAttributedString* _CM_NSAttributedString_attributedStringWithAttachment_C(Class _class, NSTextAttachment* attachment);

// method '-[NSAttributedString boundingRectWithSize:options:]'
struct _NSRect _IM_NSAttributedString_boundingRectWithSize_Coptions_C(NSAttributedString *_self, struct _NSSize size, int options);

// method '-[NSAttributedString containsAttachments]'
BOOL _IM_NSAttributedString_containsAttachments(NSAttributedString *_self);

// method '-[NSAttributedString dataFromRange:documentAttributes:error:]'
id _IM_NSAttributedString_dataFromRange_CdocumentAttributes_Cerror_C(NSAttributedString *_self, struct _NSRange range, id dict, id *error);

// method '-[NSAttributedString docFormatFromRange:documentAttributes:]'
id _IM_NSAttributedString_docFormatFromRange_CdocumentAttributes_C(NSAttributedString *_self, struct _NSRange range, id dict);

// method '-[NSAttributedString doubleClickAtIndex:]'
struct _NSRange _IM_NSAttributedString_doubleClickAtIndex_C(NSAttributedString *_self, unsigned int location);

// method '-[NSAttributedString drawAtPoint:]'
void _IM_NSAttributedString_drawAtPoint_C(NSAttributedString *_self, struct _NSPoint point);

// method '-[NSAttributedString drawInRect:]'
void _IM_NSAttributedString_drawInRect_C(NSAttributedString *_self, struct _NSRect rect);

// method '-[NSAttributedString drawWithRect:options:]'
void _IM_NSAttributedString_drawWithRect_Coptions_C(NSAttributedString *_self, struct _NSRect rect, int options);

// method '-[NSAttributedString fileWrapperFromRange:documentAttributes:error:]'
NSFileWrapper* _IM_NSAttributedString_fileWrapperFromRange_CdocumentAttributes_Cerror_C(NSAttributedString *_self, struct _NSRange range, id dict, id *error);

// method '-[NSAttributedString fontAttributesInRange:]'
id _IM_NSAttributedString_fontAttributesInRange_C(NSAttributedString *_self, struct _NSRange range);

// method '-[NSAttributedString initWithData:options:documentAttributes:error:]'
NSAttributedString *_IM_NSAttributedString_initWithData_Coptions_CdocumentAttributes_Cerror_C(NSAttributedString *_self, id data, id options, id *dict, id *error);

// method '-[NSAttributedString initWithDocFormat:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithDocFormat_CdocumentAttributes_C(NSAttributedString *_self, id data, id *dict);

// method '-[NSAttributedString initWithHTML:baseURL:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithHTML_CbaseURL_CdocumentAttributes_C(NSAttributedString *_self, id data, NSURL* base, id *dict);

// method '-[NSAttributedString initWithHTML:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithHTML_CdocumentAttributes_C(NSAttributedString *_self, id data, id *dict);

// method '-[NSAttributedString initWithHTML:options:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithHTML_Coptions_CdocumentAttributes_C(NSAttributedString *_self, id data, id options, id *dict);

// method '-[NSAttributedString initWithPath:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithPath_CdocumentAttributes_C(NSAttributedString *_self, NSString* path, id *dict);

// method '-[NSAttributedString initWithRTF:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithRTF_CdocumentAttributes_C(NSAttributedString *_self, id data, id *dict);

// method '-[NSAttributedString initWithRTFD:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithRTFD_CdocumentAttributes_C(NSAttributedString *_self, id data, id *dict);

// method '-[NSAttributedString initWithRTFDFileWrapper:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithRTFDFileWrapper_CdocumentAttributes_C(NSAttributedString *_self, NSFileWrapper* wrapper, id *dict);

// method '-[NSAttributedString initWithURL:documentAttributes:]'
NSAttributedString *_IM_NSAttributedString_initWithURL_CdocumentAttributes_C(NSAttributedString *_self, NSURL* url, id *dict);

// method '-[NSAttributedString initWithURL:options:documentAttributes:error:]'
NSAttributedString *_IM_NSAttributedString_initWithURL_Coptions_CdocumentAttributes_Cerror_C(NSAttributedString *_self, NSURL* url, id options, id *dict, id *error);

// method '-[NSAttributedString itemNumberInTextList:atIndex:]'
int _IM_NSAttributedString_itemNumberInTextList_CatIndex_C(NSAttributedString *_self, NSTextList* list, unsigned int location);

// method '-[NSAttributedString lineBreakBeforeIndex:withinRange:]'
unsigned int _IM_NSAttributedString_lineBreakBeforeIndex_CwithinRange_C(NSAttributedString *_self, unsigned int location, struct _NSRange aRange);

// method '-[NSAttributedString lineBreakByHyphenatingBeforeIndex:withinRange:]'
unsigned int _IM_NSAttributedString_lineBreakByHyphenatingBeforeIndex_CwithinRange_C(NSAttributedString *_self, unsigned int location, struct _NSRange aRange);

// method '-[NSAttributedString nextWordFromIndex:forward:]'
unsigned int _IM_NSAttributedString_nextWordFromIndex_Cforward_C(NSAttributedString *_self, unsigned int location, BOOL isForward);

// method '-[NSAttributedString rangeOfTextBlock:atIndex:]'
struct _NSRange _IM_NSAttributedString_rangeOfTextBlock_CatIndex_C(NSAttributedString *_self, NSTextBlock* block, unsigned int location);

// method '-[NSAttributedString rangeOfTextList:atIndex:]'
struct _NSRange _IM_NSAttributedString_rangeOfTextList_CatIndex_C(NSAttributedString *_self, NSTextList* list, unsigned int location);

// method '-[NSAttributedString rangeOfTextTable:atIndex:]'
struct _NSRange _IM_NSAttributedString_rangeOfTextTable_CatIndex_C(NSAttributedString *_self, NSTextTable* table, unsigned int location);

// method '-[NSAttributedString rulerAttributesInRange:]'
id _IM_NSAttributedString_rulerAttributesInRange_C(NSAttributedString *_self, struct _NSRange range);

// method '-[NSAttributedString size]'
struct _NSSize _IM_NSAttributedString_size(NSAttributedString *_self);

// method '+[NSAttributedString textFileTypes]'
id _CM_NSAttributedString_textFileTypes(Class _class);

// method '+[NSAttributedString textPasteboardTypes]'
id _CM_NSAttributedString_textPasteboardTypes(Class _class);

// method '+[NSAttributedString textUnfilteredFileTypes]'
id _CM_NSAttributedString_textUnfilteredFileTypes(Class _class);

// method '+[NSAttributedString textUnfilteredPasteboardTypes]'
id _CM_NSAttributedString_textUnfilteredPasteboardTypes(Class _class);

// method '-[NSBezierPath addClip]'
void _IM_NSBezierPath_addClip(NSBezierPath *_self);

// method '-[NSBezierPath appendBezierPath:]'
void _IM_NSBezierPath_appendBezierPath_C(NSBezierPath *_self, NSBezierPath* path);

// method '-[NSBezierPath appendBezierPathWithArcFromPoint:toPoint:radius:]'
void _IM_NSBezierPath_appendBezierPathWithArcFromPoint_CtoPoint_Cradius_C(NSBezierPath *_self, struct _NSPoint point1, struct _NSPoint point2, float radius);

// method '-[NSBezierPath appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:]'
void _IM_NSBezierPath_appendBezierPathWithArcWithCenter_Cradius_CstartAngle_CendAngle_C(NSBezierPath *_self, struct _NSPoint center, float radius, float startAngle, float endAngle);

// method '-[NSBezierPath appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:]'
void _IM_NSBezierPath_appendBezierPathWithArcWithCenter_Cradius_CstartAngle_CendAngle_Cclockwise_C(NSBezierPath *_self, struct _NSPoint center, float radius, float startAngle, float endAngle, BOOL clockwise);

// method '-[NSBezierPath appendBezierPathWithGlyph:inFont:]'
void _IM_NSBezierPath_appendBezierPathWithGlyph_CinFont_C(NSBezierPath *_self, unsigned int glyph, NSFont* font);

// method '-[NSBezierPath appendBezierPathWithGlyphs:count:inFont:]'
void _IM_NSBezierPath_appendBezierPathWithGlyphs_Ccount_CinFont_C(NSBezierPath *_self, unsigned int *glyphs, int count, NSFont* font);

// method '-[NSBezierPath appendBezierPathWithOvalInRect:]'
void _IM_NSBezierPath_appendBezierPathWithOvalInRect_C(NSBezierPath *_self, struct _NSRect rect);

// method '-[NSBezierPath appendBezierPathWithPackedGlyphs:]'
void _IM_NSBezierPath_appendBezierPathWithPackedGlyphs_C(NSBezierPath *_self, const char* packedGlyphs);

// method '-[NSBezierPath appendBezierPathWithPoints:count:]'
void _IM_NSBezierPath_appendBezierPathWithPoints_Ccount_C(NSBezierPath *_self, struct _NSPoint *points, int count);

// method '-[NSBezierPath appendBezierPathWithRect:]'
void _IM_NSBezierPath_appendBezierPathWithRect_C(NSBezierPath *_self, struct _NSRect rect);

// method '+[NSBezierPath bezierPath]'
NSBezierPath* _CM_NSBezierPath_bezierPath(Class _class);

// method '-[NSBezierPath bezierPathByFlatteningPath]'
NSBezierPath* _IM_NSBezierPath_bezierPathByFlatteningPath(NSBezierPath *_self);

// method '-[NSBezierPath bezierPathByReversingPath]'
NSBezierPath* _IM_NSBezierPath_bezierPathByReversingPath(NSBezierPath *_self);

// method '+[NSBezierPath bezierPathWithOvalInRect:]'
NSBezierPath* _CM_NSBezierPath_bezierPathWithOvalInRect_C(Class _class, struct _NSRect rect);

// method '+[NSBezierPath bezierPathWithRect:]'
NSBezierPath* _CM_NSBezierPath_bezierPathWithRect_C(Class _class, struct _NSRect rect);

// method '-[NSBezierPath bounds]'
struct _NSRect _IM_NSBezierPath_bounds(NSBezierPath *_self);

// method '-[NSBezierPath cachesBezierPath]'
BOOL _IM_NSBezierPath_cachesBezierPath(NSBezierPath *_self);

// method '+[NSBezierPath clipRect:]'
void _CM_NSBezierPath_clipRect_C(Class _class, struct _NSRect rect);

// method '-[NSBezierPath closePath]'
void _IM_NSBezierPath_closePath(NSBezierPath *_self);

// method '-[NSBezierPath containsPoint:]'
BOOL _IM_NSBezierPath_containsPoint_C(NSBezierPath *_self, struct _NSPoint point);

// method '-[NSBezierPath controlPointBounds]'
struct _NSRect _IM_NSBezierPath_controlPointBounds(NSBezierPath *_self);

// method '-[NSBezierPath currentPoint]'
struct _NSPoint _IM_NSBezierPath_currentPoint(NSBezierPath *_self);

// method '-[NSBezierPath curveToPoint:controlPoint1:controlPoint2:]'
void _IM_NSBezierPath_curveToPoint_CcontrolPoint1_CcontrolPoint2_C(NSBezierPath *_self, struct _NSPoint endPoint, struct _NSPoint controlPoint1, struct _NSPoint controlPoint2);

// method '+[NSBezierPath defaultFlatness]'
float _CM_NSBezierPath_defaultFlatness(Class _class);

// method '+[NSBezierPath defaultLineCapStyle]'
int _CM_NSBezierPath_defaultLineCapStyle(Class _class);

// method '+[NSBezierPath defaultLineJoinStyle]'
int _CM_NSBezierPath_defaultLineJoinStyle(Class _class);

// method '+[NSBezierPath defaultLineWidth]'
float _CM_NSBezierPath_defaultLineWidth(Class _class);

// method '+[NSBezierPath defaultMiterLimit]'
float _CM_NSBezierPath_defaultMiterLimit(Class _class);

// method '+[NSBezierPath defaultWindingRule]'
int _CM_NSBezierPath_defaultWindingRule(Class _class);

// method '+[NSBezierPath drawPackedGlyphs:atPoint:]'
void _CM_NSBezierPath_drawPackedGlyphs_CatPoint_C(Class _class, const char* packedGlyphs, struct _NSPoint point);

// method '-[NSBezierPath elementAtIndex:]'
int _IM_NSBezierPath_elementAtIndex_C(NSBezierPath *_self, int index);

// method '-[NSBezierPath elementAtIndex:associatedPoints:]'
int _IM_NSBezierPath_elementAtIndex_CassociatedPoints_C(NSBezierPath *_self, int index, struct _NSPoint *points);

// method '-[NSBezierPath elementCount]'
int _IM_NSBezierPath_elementCount(NSBezierPath *_self);

// method '-[NSBezierPath fill]'
void _IM_NSBezierPath_fill(NSBezierPath *_self);

// method '+[NSBezierPath fillRect:]'
void _CM_NSBezierPath_fillRect_C(Class _class, struct _NSRect rect);

// method '-[NSBezierPath flatness]'
float _IM_NSBezierPath_flatness(NSBezierPath *_self);

// method '-[NSBezierPath getLineDash:count:phase:]'
void _IM_NSBezierPath_getLineDash_Ccount_Cphase_C(NSBezierPath *_self, float *pattern, int *count, float *phase);

// method '-[NSBezierPath isEmpty]'
BOOL _IM_NSBezierPath_isEmpty(NSBezierPath *_self);

// method '-[NSBezierPath lineCapStyle]'
int _IM_NSBezierPath_lineCapStyle(NSBezierPath *_self);

// method '-[NSBezierPath lineJoinStyle]'
int _IM_NSBezierPath_lineJoinStyle(NSBezierPath *_self);

// method '-[NSBezierPath lineToPoint:]'
void _IM_NSBezierPath_lineToPoint_C(NSBezierPath *_self, struct _NSPoint point);

// method '-[NSBezierPath lineWidth]'
float _IM_NSBezierPath_lineWidth(NSBezierPath *_self);

// method '-[NSBezierPath miterLimit]'
float _IM_NSBezierPath_miterLimit(NSBezierPath *_self);

// method '-[NSBezierPath moveToPoint:]'
void _IM_NSBezierPath_moveToPoint_C(NSBezierPath *_self, struct _NSPoint point);

// method '-[NSBezierPath relativeCurveToPoint:controlPoint1:controlPoint2:]'
void _IM_NSBezierPath_relativeCurveToPoint_CcontrolPoint1_CcontrolPoint2_C(NSBezierPath *_self, struct _NSPoint endPoint, struct _NSPoint controlPoint1, struct _NSPoint controlPoint2);

// method '-[NSBezierPath relativeLineToPoint:]'
void _IM_NSBezierPath_relativeLineToPoint_C(NSBezierPath *_self, struct _NSPoint point);

// method '-[NSBezierPath relativeMoveToPoint:]'
void _IM_NSBezierPath_relativeMoveToPoint_C(NSBezierPath *_self, struct _NSPoint point);

// method '-[NSBezierPath removeAllPoints]'
void _IM_NSBezierPath_removeAllPoints(NSBezierPath *_self);

// method '-[NSBezierPath setCachesBezierPath:]'
void _IM_NSBezierPath_setCachesBezierPath_C(NSBezierPath *_self, BOOL flag);

// method '-[NSBezierPath setClip]'
void _IM_NSBezierPath_setClip(NSBezierPath *_self);

// method '+[NSBezierPath setDefaultFlatness:]'
void _CM_NSBezierPath_setDefaultFlatness_C(Class _class, float flatness);

// method '+[NSBezierPath setDefaultLineCapStyle:]'
void _CM_NSBezierPath_setDefaultLineCapStyle_C(Class _class, int lineCapStyle);

// method '+[NSBezierPath setDefaultLineJoinStyle:]'
void _CM_NSBezierPath_setDefaultLineJoinStyle_C(Class _class, int lineJoinStyle);

// method '+[NSBezierPath setDefaultLineWidth:]'
void _CM_NSBezierPath_setDefaultLineWidth_C(Class _class, float lineWidth);

// method '+[NSBezierPath setDefaultMiterLimit:]'
void _CM_NSBezierPath_setDefaultMiterLimit_C(Class _class, float limit);

// method '+[NSBezierPath setDefaultWindingRule:]'
void _CM_NSBezierPath_setDefaultWindingRule_C(Class _class, int windingRule);

// method '-[NSBezierPath setFlatness:]'
void _IM_NSBezierPath_setFlatness_C(NSBezierPath *_self, float flatness);

// method '-[NSBezierPath setLineCapStyle:]'
void _IM_NSBezierPath_setLineCapStyle_C(NSBezierPath *_self, int lineCapStyle);

// method '-[NSBezierPath setLineDash:count:phase:]'
void _IM_NSBezierPath_setLineDash_Ccount_Cphase_C(NSBezierPath *_self, const float* pattern, int count, float phase);

// method '-[NSBezierPath setLineJoinStyle:]'
void _IM_NSBezierPath_setLineJoinStyle_C(NSBezierPath *_self, int lineJoinStyle);

// method '-[NSBezierPath setLineWidth:]'
void _IM_NSBezierPath_setLineWidth_C(NSBezierPath *_self, float lineWidth);

// method '-[NSBezierPath setMiterLimit:]'
void _IM_NSBezierPath_setMiterLimit_C(NSBezierPath *_self, float miterLimit);

// method '-[NSBezierPath setWindingRule:]'
void _IM_NSBezierPath_setWindingRule_C(NSBezierPath *_self, int windingRule);

// method '-[NSBezierPath stroke]'
void _IM_NSBezierPath_stroke(NSBezierPath *_self);

// method '+[NSBezierPath strokeLineFromPoint:toPoint:]'
void _CM_NSBezierPath_strokeLineFromPoint_CtoPoint_C(Class _class, struct _NSPoint point1, struct _NSPoint point2);

// method '+[NSBezierPath strokeRect:]'
void _CM_NSBezierPath_strokeRect_C(Class _class, struct _NSRect rect);

// method '-[NSBezierPath transformUsingAffineTransform:]'
void _IM_NSBezierPath_transformUsingAffineTransform_C(NSBezierPath *_self, NSAffineTransform* transform);

// method '-[NSBezierPath windingRule]'
int _IM_NSBezierPath_windingRule(NSBezierPath *_self);

// method '-[NSBitmapImageRep TIFFRepresentation]'
id _IM_NSBitmapImageRep_TIFFRepresentation(NSBitmapImageRep *_self);

// method '+[NSBitmapImageRep TIFFRepresentationOfImageRepsInArray:]'
id _CM_NSBitmapImageRep_TIFFRepresentationOfImageRepsInArray_C(Class _class, id array);

// method '+[NSBitmapImageRep TIFFRepresentationOfImageRepsInArray:usingCompression:factor:]'
id _CM_NSBitmapImageRep_TIFFRepresentationOfImageRepsInArray_CusingCompression_Cfactor_C(Class _class, id array, int comp, float factor);

// method '-[NSBitmapImageRep TIFFRepresentationUsingCompression:factor:]'
id _IM_NSBitmapImageRep_TIFFRepresentationUsingCompression_Cfactor_C(NSBitmapImageRep *_self, int comp, float factor);

// method '-[NSBitmapImageRep bitmapData]'
unsigned char* _IM_NSBitmapImageRep_bitmapData(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep bitmapFormat]'
int _IM_NSBitmapImageRep_bitmapFormat(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep bitsPerPixel]'
int _IM_NSBitmapImageRep_bitsPerPixel(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep bytesPerPlane]'
int _IM_NSBitmapImageRep_bytesPerPlane(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep bytesPerRow]'
int _IM_NSBitmapImageRep_bytesPerRow(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep canBeCompressedUsing:]'
BOOL _IM_NSBitmapImageRep_canBeCompressedUsing_C(NSBitmapImageRep *_self, int compression);

// method '-[NSBitmapImageRep colorAtX:y:]'
NSColor* _IM_NSBitmapImageRep_colorAtX_Cy_C(NSBitmapImageRep *_self, int x, int y);

// method '-[NSBitmapImageRep colorizeByMappingGray:toColor:blackMapping:whiteMapping:]'
void _IM_NSBitmapImageRep_colorizeByMappingGray_CtoColor_CblackMapping_CwhiteMapping_C(NSBitmapImageRep *_self, float midPoint, NSColor* midPointColor, NSColor* shadowColor, NSColor* lightColor);

// method '-[NSBitmapImageRep getBitmapDataPlanes:]'
void _IM_NSBitmapImageRep_getBitmapDataPlanes_C(NSBitmapImageRep *_self, unsigned char** data);

// method '-[NSBitmapImageRep getCompression:factor:]'
void _IM_NSBitmapImageRep_getCompression_Cfactor_C(NSBitmapImageRep *_self, int *compression, float *factor);

// method '-[NSBitmapImageRep getPixel:atX:y:]'
void _IM_NSBitmapImageRep_getPixel_CatX_Cy_C(NSBitmapImageRep *_self, unsigned int *p, int x, int y);

// method '+[NSBitmapImageRep getTIFFCompressionTypes:count:]'
void _CM_NSBitmapImageRep_getTIFFCompressionTypes_Ccount_C(Class _class, const int** list, int *numTypes);

// method '+[NSBitmapImageRep imageRepWithData:]'
id _CM_NSBitmapImageRep_imageRepWithData_C(Class _class, id tiffData);

// method '+[NSBitmapImageRep imageRepsWithData:]'
id _CM_NSBitmapImageRep_imageRepsWithData_C(Class _class, id tiffData);

// method '-[NSBitmapImageRep incrementalLoadFromData:complete:]'
int _IM_NSBitmapImageRep_incrementalLoadFromData_Ccomplete_C(NSBitmapImageRep *_self, id data, BOOL complete);

// method '-[NSBitmapImageRep initForIncrementalLoad]'
NSBitmapImageRep *_IM_NSBitmapImageRep_initForIncrementalLoad(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:]'
NSBitmapImageRep *_IM_NSBitmapImageRep_initWithBitmapDataPlanes_CpixelsWide_CpixelsHigh_CbitsPerSample_CsamplesPerPixel_ChasAlpha_CisPlanar_CcolorSpaceName_CbitmapFormat_CbytesPerRow_CbitsPerPixel_C(NSBitmapImageRep *_self, unsigned char** planes, int width, int height, int bps, int spp, BOOL alpha, BOOL isPlanar, NSString* colorSpaceName, int bitmapFormat, int rBytes, int pBits);

// method '-[NSBitmapImageRep initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:]'
NSBitmapImageRep *_IM_NSBitmapImageRep_initWithBitmapDataPlanes_CpixelsWide_CpixelsHigh_CbitsPerSample_CsamplesPerPixel_ChasAlpha_CisPlanar_CcolorSpaceName_CbytesPerRow_CbitsPerPixel_C(NSBitmapImageRep *_self, unsigned char** planes, int width, int height, int bps, int spp, BOOL alpha, BOOL isPlanar, NSString* colorSpaceName, int rBytes, int pBits);

// method '-[NSBitmapImageRep initWithData:]'
NSBitmapImageRep *_IM_NSBitmapImageRep_initWithData_C(NSBitmapImageRep *_self, id tiffData);

// method '-[NSBitmapImageRep initWithFocusedViewRect:]'
NSBitmapImageRep *_IM_NSBitmapImageRep_initWithFocusedViewRect_C(NSBitmapImageRep *_self, struct _NSRect rect);

// method '-[NSBitmapImageRep isPlanar]'
BOOL _IM_NSBitmapImageRep_isPlanar(NSBitmapImageRep *_self);

// method '+[NSBitmapImageRep localizedNameForTIFFCompressionType:]'
NSString* _CM_NSBitmapImageRep_localizedNameForTIFFCompressionType_C(Class _class, int compression);

// method '-[NSBitmapImageRep numberOfPlanes]'
int _IM_NSBitmapImageRep_numberOfPlanes(NSBitmapImageRep *_self);

// method '+[NSBitmapImageRep representationOfImageRepsInArray:usingType:properties:]'
id _CM_NSBitmapImageRep_representationOfImageRepsInArray_CusingType_Cproperties_C(Class _class, id imageReps, int storageType, id properties);

// method '-[NSBitmapImageRep representationUsingType:properties:]'
id _IM_NSBitmapImageRep_representationUsingType_Cproperties_C(NSBitmapImageRep *_self, int storageType, id properties);

// method '-[NSBitmapImageRep samplesPerPixel]'
int _IM_NSBitmapImageRep_samplesPerPixel(NSBitmapImageRep *_self);

// method '-[NSBitmapImageRep setColor:atX:y:]'
void _IM_NSBitmapImageRep_setColor_CatX_Cy_C(NSBitmapImageRep *_self, NSColor* color, int x, int y);

// method '-[NSBitmapImageRep setCompression:factor:]'
void _IM_NSBitmapImageRep_setCompression_Cfactor_C(NSBitmapImageRep *_self, int compression, float factor);

// method '-[NSBitmapImageRep setPixel:atX:y:]'
void _IM_NSBitmapImageRep_setPixel_CatX_Cy_C(NSBitmapImageRep *_self, unsigned int *p, int x, int y);

// method '-[NSBitmapImageRep setProperty:withValue:]'
void _IM_NSBitmapImageRep_setProperty_CwithValue_C(NSBitmapImageRep *_self, NSString* property, id value);

// method '-[NSBitmapImageRep valueForProperty:]'
id _IM_NSBitmapImageRep_valueForProperty_C(NSBitmapImageRep *_self, NSString* property);

// method '-[NSBox borderRect]'
struct _NSRect _IM_NSBox_borderRect(NSBox *_self);

// method '-[NSBox borderType]'
int _IM_NSBox_borderType(NSBox *_self);

// method '-[NSBox boxType]'
int _IM_NSBox_boxType(NSBox *_self);

// method '-[NSBox contentView]'
id _IM_NSBox_contentView(NSBox *_self);

// method '-[NSBox contentViewMargins]'
struct _NSSize _IM_NSBox_contentViewMargins(NSBox *_self);

// method '-[NSBox setBorderType:]'
void _IM_NSBox_setBorderType_C(NSBox *_self, int aType);

// method '-[NSBox setBoxType:]'
void _IM_NSBox_setBoxType_C(NSBox *_self, int boxType);

// method '-[NSBox setContentView:]'
void _IM_NSBox_setContentView_C(NSBox *_self, NSView* aView);

// method '-[NSBox setContentViewMargins:]'
void _IM_NSBox_setContentViewMargins_C(NSBox *_self, struct _NSSize offsetSize);

// method '-[NSBox setFrameFromContentFrame:]'
void _IM_NSBox_setFrameFromContentFrame_C(NSBox *_self, struct _NSRect contentFrame);

// method '-[NSBox setTitle:]'
void _IM_NSBox_setTitle_C(NSBox *_self, NSString* aString);

// method '-[NSBox setTitleFont:]'
void _IM_NSBox_setTitleFont_C(NSBox *_self, NSFont* fontObj);

// method '-[NSBox setTitlePosition:]'
void _IM_NSBox_setTitlePosition_C(NSBox *_self, int aPosition);

// method '-[NSBox setTitleWithMnemonic:]'
void _IM_NSBox_setTitleWithMnemonic_C(NSBox *_self, NSString* stringWithAmpersand);

// method '-[NSBox sizeToFit]'
void _IM_NSBox_sizeToFit(NSBox *_self);

// method '-[NSBox title]'
NSString* _IM_NSBox_title(NSBox *_self);

// method '-[NSBox titleCell]'
id _IM_NSBox_titleCell(NSBox *_self);

// method '-[NSBox titleFont]'
NSFont* _IM_NSBox_titleFont(NSBox *_self);

// method '-[NSBox titlePosition]'
int _IM_NSBox_titlePosition(NSBox *_self);

// method '-[NSBox titleRect]'
struct _NSRect _IM_NSBox_titleRect(NSBox *_self);

// method '-[NSBrowser acceptsArrowKeys]'
BOOL _IM_NSBrowser_acceptsArrowKeys(NSBrowser *_self);

// method '-[NSBrowser addColumn]'
void _IM_NSBrowser_addColumn(NSBrowser *_self);

// method '-[NSBrowser allowsBranchSelection]'
BOOL _IM_NSBrowser_allowsBranchSelection(NSBrowser *_self);

// method '-[NSBrowser allowsEmptySelection]'
BOOL _IM_NSBrowser_allowsEmptySelection(NSBrowser *_self);

// method '-[NSBrowser allowsMultipleSelection]'
BOOL _IM_NSBrowser_allowsMultipleSelection(NSBrowser *_self);

// method '+[NSBrowser cellClass]'
Class _CM_NSBrowser_cellClass(Class _class);

// method '-[NSBrowser cellPrototype]'
id _IM_NSBrowser_cellPrototype(NSBrowser *_self);

// method '-[NSBrowser columnContentWidthForColumnWidth:]'
float _IM_NSBrowser_columnContentWidthForColumnWidth_C(NSBrowser *_self, float columnWidth);

// method '-[NSBrowser columnOfMatrix:]'
int _IM_NSBrowser_columnOfMatrix_C(NSBrowser *_self, NSMatrix* matrix);

// method '-[NSBrowser columnResizingType]'
int _IM_NSBrowser_columnResizingType(NSBrowser *_self);

// method '-[NSBrowser columnWidthForColumnContentWidth:]'
float _IM_NSBrowser_columnWidthForColumnContentWidth_C(NSBrowser *_self, float columnContentWidth);

// method '-[NSBrowser columnsAutosaveName]'
NSString* _IM_NSBrowser_columnsAutosaveName(NSBrowser *_self);

// method '-[NSBrowser delegate]'
id _IM_NSBrowser_delegate(NSBrowser *_self);

// method '-[NSBrowser displayAllColumns]'
void _IM_NSBrowser_displayAllColumns(NSBrowser *_self);

// method '-[NSBrowser displayColumn:]'
void _IM_NSBrowser_displayColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser doClick:]'
void _IM_NSBrowser_doClick_C(NSBrowser *_self, id sender);

// method '-[NSBrowser doDoubleClick:]'
void _IM_NSBrowser_doDoubleClick_C(NSBrowser *_self, id sender);

// method '-[NSBrowser doubleAction]'
SEL _IM_NSBrowser_doubleAction(NSBrowser *_self);

// method '-[NSBrowser drawTitleOfColumn:inRect:]'
void _IM_NSBrowser_drawTitleOfColumn_CinRect_C(NSBrowser *_self, int column, struct _NSRect aRect);

// method '-[NSBrowser firstVisibleColumn]'
int _IM_NSBrowser_firstVisibleColumn(NSBrowser *_self);

// method '-[NSBrowser frameOfColumn:]'
struct _NSRect _IM_NSBrowser_frameOfColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser frameOfInsideOfColumn:]'
struct _NSRect _IM_NSBrowser_frameOfInsideOfColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser hasHorizontalScroller]'
BOOL _IM_NSBrowser_hasHorizontalScroller(NSBrowser *_self);

// method '-[NSBrowser isLoaded]'
BOOL _IM_NSBrowser_isLoaded(NSBrowser *_self);

// method '-[NSBrowser isTitled]'
BOOL _IM_NSBrowser_isTitled(NSBrowser *_self);

// method '-[NSBrowser lastColumn]'
int _IM_NSBrowser_lastColumn(NSBrowser *_self);

// method '-[NSBrowser lastVisibleColumn]'
int _IM_NSBrowser_lastVisibleColumn(NSBrowser *_self);

// method '-[NSBrowser loadColumnZero]'
void _IM_NSBrowser_loadColumnZero(NSBrowser *_self);

// method '-[NSBrowser loadedCellAtRow:column:]'
id _IM_NSBrowser_loadedCellAtRow_Ccolumn_C(NSBrowser *_self, int row, int col);

// method '-[NSBrowser matrixClass]'
Class _IM_NSBrowser_matrixClass(NSBrowser *_self);

// method '-[NSBrowser matrixInColumn:]'
NSMatrix* _IM_NSBrowser_matrixInColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser maxVisibleColumns]'
int _IM_NSBrowser_maxVisibleColumns(NSBrowser *_self);

// method '-[NSBrowser minColumnWidth]'
float _IM_NSBrowser_minColumnWidth(NSBrowser *_self);

// method '-[NSBrowser numberOfVisibleColumns]'
int _IM_NSBrowser_numberOfVisibleColumns(NSBrowser *_self);

// method '-[NSBrowser path]'
NSString* _IM_NSBrowser_path(NSBrowser *_self);

// method '-[NSBrowser pathSeparator]'
NSString* _IM_NSBrowser_pathSeparator(NSBrowser *_self);

// method '-[NSBrowser pathToColumn:]'
NSString* _IM_NSBrowser_pathToColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser prefersAllColumnUserResizing]'
BOOL _IM_NSBrowser_prefersAllColumnUserResizing(NSBrowser *_self);

// method '-[NSBrowser reloadColumn:]'
void _IM_NSBrowser_reloadColumn_C(NSBrowser *_self, int column);

// method '+[NSBrowser removeSavedColumnsWithAutosaveName:]'
void _CM_NSBrowser_removeSavedColumnsWithAutosaveName_C(Class _class, NSString* name);

// method '-[NSBrowser reusesColumns]'
BOOL _IM_NSBrowser_reusesColumns(NSBrowser *_self);

// method '-[NSBrowser scrollColumnToVisible:]'
void _IM_NSBrowser_scrollColumnToVisible_C(NSBrowser *_self, int column);

// method '-[NSBrowser scrollColumnsLeftBy:]'
void _IM_NSBrowser_scrollColumnsLeftBy_C(NSBrowser *_self, int shiftAmount);

// method '-[NSBrowser scrollColumnsRightBy:]'
void _IM_NSBrowser_scrollColumnsRightBy_C(NSBrowser *_self, int shiftAmount);

// method '-[NSBrowser scrollViaScroller:]'
void _IM_NSBrowser_scrollViaScroller_C(NSBrowser *_self, NSScroller* sender);

// method '-[NSBrowser selectAll:]'
void _IM_NSBrowser_selectAll_C(NSBrowser *_self, id sender);

// method '-[NSBrowser selectRow:inColumn:]'
void _IM_NSBrowser_selectRow_CinColumn_C(NSBrowser *_self, int row, int column);

// method '-[NSBrowser selectedCell]'
id _IM_NSBrowser_selectedCell(NSBrowser *_self);

// method '-[NSBrowser selectedCellInColumn:]'
id _IM_NSBrowser_selectedCellInColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser selectedCells]'
id _IM_NSBrowser_selectedCells(NSBrowser *_self);

// method '-[NSBrowser selectedColumn]'
int _IM_NSBrowser_selectedColumn(NSBrowser *_self);

// method '-[NSBrowser selectedRowInColumn:]'
int _IM_NSBrowser_selectedRowInColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser sendAction]'
BOOL _IM_NSBrowser_sendAction(NSBrowser *_self);

// method '-[NSBrowser sendsActionOnArrowKeys]'
BOOL _IM_NSBrowser_sendsActionOnArrowKeys(NSBrowser *_self);

// method '-[NSBrowser separatesColumns]'
BOOL _IM_NSBrowser_separatesColumns(NSBrowser *_self);

// method '-[NSBrowser setAcceptsArrowKeys:]'
void _IM_NSBrowser_setAcceptsArrowKeys_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setAllowsBranchSelection:]'
void _IM_NSBrowser_setAllowsBranchSelection_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setAllowsEmptySelection:]'
void _IM_NSBrowser_setAllowsEmptySelection_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setAllowsMultipleSelection:]'
void _IM_NSBrowser_setAllowsMultipleSelection_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setCellClass:]'
void _IM_NSBrowser_setCellClass_C(NSBrowser *_self, Class factoryId);

// method '-[NSBrowser setCellPrototype:]'
void _IM_NSBrowser_setCellPrototype_C(NSBrowser *_self, NSCell* aCell);

// method '-[NSBrowser setColumnResizingType:]'
void _IM_NSBrowser_setColumnResizingType_C(NSBrowser *_self, int columnResizingType);

// method '-[NSBrowser setColumnsAutosaveName:]'
void _IM_NSBrowser_setColumnsAutosaveName_C(NSBrowser *_self, NSString* name);

// method '-[NSBrowser setDelegate:]'
void _IM_NSBrowser_setDelegate_C(NSBrowser *_self, id anObject);

// method '-[NSBrowser setDoubleAction:]'
void _IM_NSBrowser_setDoubleAction_C(NSBrowser *_self, SEL aSelector);

// method '-[NSBrowser setHasHorizontalScroller:]'
void _IM_NSBrowser_setHasHorizontalScroller_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setLastColumn:]'
void _IM_NSBrowser_setLastColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser setMatrixClass:]'
void _IM_NSBrowser_setMatrixClass_C(NSBrowser *_self, Class factoryId);

// method '-[NSBrowser setMaxVisibleColumns:]'
void _IM_NSBrowser_setMaxVisibleColumns_C(NSBrowser *_self, int columnCount);

// method '-[NSBrowser setMinColumnWidth:]'
void _IM_NSBrowser_setMinColumnWidth_C(NSBrowser *_self, float columnWidth);

// method '-[NSBrowser setPath:]'
BOOL _IM_NSBrowser_setPath_C(NSBrowser *_self, NSString* path);

// method '-[NSBrowser setPathSeparator:]'
void _IM_NSBrowser_setPathSeparator_C(NSBrowser *_self, NSString* newString);

// method '-[NSBrowser setPrefersAllColumnUserResizing:]'
void _IM_NSBrowser_setPrefersAllColumnUserResizing_C(NSBrowser *_self, BOOL prefersAllColumnResizing);

// method '-[NSBrowser setReusesColumns:]'
void _IM_NSBrowser_setReusesColumns_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setSendsActionOnArrowKeys:]'
void _IM_NSBrowser_setSendsActionOnArrowKeys_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setSeparatesColumns:]'
void _IM_NSBrowser_setSeparatesColumns_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setTakesTitleFromPreviousColumn:]'
void _IM_NSBrowser_setTakesTitleFromPreviousColumn_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setTitle:ofColumn:]'
void _IM_NSBrowser_setTitle_CofColumn_C(NSBrowser *_self, NSString* aString, int column);

// method '-[NSBrowser setTitled:]'
void _IM_NSBrowser_setTitled_C(NSBrowser *_self, BOOL flag);

// method '-[NSBrowser setWidth:ofColumn:]'
void _IM_NSBrowser_setWidth_CofColumn_C(NSBrowser *_self, float columnWidth, int columnIndex);

// method '-[NSBrowser takesTitleFromPreviousColumn]'
BOOL _IM_NSBrowser_takesTitleFromPreviousColumn(NSBrowser *_self);

// method '-[NSBrowser tile]'
void _IM_NSBrowser_tile(NSBrowser *_self);

// method '-[NSBrowser titleFrameOfColumn:]'
struct _NSRect _IM_NSBrowser_titleFrameOfColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser titleHeight]'
float _IM_NSBrowser_titleHeight(NSBrowser *_self);

// method '-[NSBrowser titleOfColumn:]'
NSString* _IM_NSBrowser_titleOfColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowser updateScroller]'
void _IM_NSBrowser_updateScroller(NSBrowser *_self);

// method '-[NSBrowser validateVisibleColumns]'
void _IM_NSBrowser_validateVisibleColumns(NSBrowser *_self);

// method '-[NSBrowser widthOfColumn:]'
float _IM_NSBrowser_widthOfColumn_C(NSBrowser *_self, int column);

// method '-[NSBrowserCell alternateImage]'
NSImage* _IM_NSBrowserCell_alternateImage(NSBrowserCell *_self);

// method '+[NSBrowserCell branchImage]'
NSImage* _CM_NSBrowserCell_branchImage(Class _class);

// method '-[NSBrowserCell highlightColorInView:]'
NSColor* _IM_NSBrowserCell_highlightColorInView_C(NSBrowserCell *_self, NSView* controlView);

// method '+[NSBrowserCell highlightedBranchImage]'
NSImage* _CM_NSBrowserCell_highlightedBranchImage(Class _class);

// method '-[NSBrowserCell image]'
NSImage* _IM_NSBrowserCell_image(NSBrowserCell *_self);

// method '-[NSBrowserCell isLeaf]'
BOOL _IM_NSBrowserCell_isLeaf(NSBrowserCell *_self);

// method '-[NSBrowserCell isLoaded]'
BOOL _IM_NSBrowserCell_isLoaded(NSBrowserCell *_self);

// method '-[NSBrowserCell reset]'
void _IM_NSBrowserCell_reset(NSBrowserCell *_self);

// method '-[NSBrowserCell set]'
void _IM_NSBrowserCell_set(NSBrowserCell *_self);

// method '-[NSBrowserCell setAlternateImage:]'
void _IM_NSBrowserCell_setAlternateImage_C(NSBrowserCell *_self, NSImage* newAltImage);

// method '-[NSBrowserCell setImage:]'
void _IM_NSBrowserCell_setImage_C(NSBrowserCell *_self, NSImage* image);

// method '-[NSBrowserCell setLeaf:]'
void _IM_NSBrowserCell_setLeaf_C(NSBrowserCell *_self, BOOL flag);

// method '-[NSBrowserCell setLoaded:]'
void _IM_NSBrowserCell_setLoaded_C(NSBrowserCell *_self, BOOL flag);

// method '-[NSBundle contextHelpForKey:]'
NSAttributedString* _IM_NSBundle_contextHelpForKey_C(NSBundle *_self, NSString* key);

// method '+[NSBundle loadNibFile:externalNameTable:withZone:]'
BOOL _CM_NSBundle_loadNibFile_CexternalNameTable_CwithZone_C(Class _class, NSString* fileName, id context, struct _NSZone *zone);

// method '+[NSBundle loadNibNamed:owner:]'
BOOL _CM_NSBundle_loadNibNamed_Cowner_C(Class _class, NSString* nibName, id owner);

// method '-[NSBundle pathForImageResource:]'
NSString* _IM_NSBundle_pathForImageResource_C(NSBundle *_self, NSString* name);

// method '-[NSBundle pathForSoundResource:]'
NSString* _IM_NSBundle_pathForSoundResource_C(NSBundle *_self, NSString* name);

// method '-[NSButton allowsMixedState]'
BOOL _IM_NSButton_allowsMixedState(NSButton *_self);

// method '-[NSButton alternateImage]'
NSImage* _IM_NSButton_alternateImage(NSButton *_self);

// method '-[NSButton alternateTitle]'
NSString* _IM_NSButton_alternateTitle(NSButton *_self);

// method '-[NSButton attributedAlternateTitle]'
NSAttributedString* _IM_NSButton_attributedAlternateTitle(NSButton *_self);

// method '-[NSButton attributedTitle]'
NSAttributedString* _IM_NSButton_attributedTitle(NSButton *_self);

// method '-[NSButton bezelStyle]'
int _IM_NSButton_bezelStyle(NSButton *_self);

// method '-[NSButton getPeriodicDelay:interval:]'
void _IM_NSButton_getPeriodicDelay_Cinterval_C(NSButton *_self, float *delay, float *interval);

// method '-[NSButton highlight:]'
void _IM_NSButton_highlight_C(NSButton *_self, BOOL flag);

// method '-[NSButton image]'
NSImage* _IM_NSButton_image(NSButton *_self);

// method '-[NSButton imagePosition]'
int _IM_NSButton_imagePosition(NSButton *_self);

// method '-[NSButton isBordered]'
BOOL _IM_NSButton_isBordered(NSButton *_self);

// method '-[NSButton isTransparent]'
BOOL _IM_NSButton_isTransparent(NSButton *_self);

// method '-[NSButton keyEquivalent]'
NSString* _IM_NSButton_keyEquivalent(NSButton *_self);

// method '-[NSButton keyEquivalentModifierMask]'
unsigned int _IM_NSButton_keyEquivalentModifierMask(NSButton *_self);

// method '-[NSButton performKeyEquivalent:]'
BOOL _IM_NSButton_performKeyEquivalent_C(NSButton *_self, NSEvent* key);

// method '-[NSButton setAllowsMixedState:]'
void _IM_NSButton_setAllowsMixedState_C(NSButton *_self, BOOL flag);

// method '-[NSButton setAlternateImage:]'
void _IM_NSButton_setAlternateImage_C(NSButton *_self, NSImage* image);

// method '-[NSButton setAlternateTitle:]'
void _IM_NSButton_setAlternateTitle_C(NSButton *_self, NSString* aString);

// method '-[NSButton setAttributedAlternateTitle:]'
void _IM_NSButton_setAttributedAlternateTitle_C(NSButton *_self, NSAttributedString* obj);

// method '-[NSButton setAttributedTitle:]'
void _IM_NSButton_setAttributedTitle_C(NSButton *_self, NSAttributedString* aString);

// method '-[NSButton setBezelStyle:]'
void _IM_NSButton_setBezelStyle_C(NSButton *_self, int bezelStyle);

// method '-[NSButton setBordered:]'
void _IM_NSButton_setBordered_C(NSButton *_self, BOOL flag);

// method '-[NSButton setButtonType:]'
void _IM_NSButton_setButtonType_C(NSButton *_self, int aType);

// method '-[NSButton setImage:]'
void _IM_NSButton_setImage_C(NSButton *_self, NSImage* image);

// method '-[NSButton setImagePosition:]'
void _IM_NSButton_setImagePosition_C(NSButton *_self, int aPosition);

// method '-[NSButton setKeyEquivalent:]'
void _IM_NSButton_setKeyEquivalent_C(NSButton *_self, NSString* charCode);

// method '-[NSButton setKeyEquivalentModifierMask:]'
void _IM_NSButton_setKeyEquivalentModifierMask_C(NSButton *_self, unsigned int mask);

// method '-[NSButton setNextState]'
void _IM_NSButton_setNextState(NSButton *_self);

// method '-[NSButton setPeriodicDelay:interval:]'
void _IM_NSButton_setPeriodicDelay_Cinterval_C(NSButton *_self, float delay, float interval);

// method '-[NSButton setShowsBorderOnlyWhileMouseInside:]'
void _IM_NSButton_setShowsBorderOnlyWhileMouseInside_C(NSButton *_self, BOOL show);

// method '-[NSButton setSound:]'
void _IM_NSButton_setSound_C(NSButton *_self, NSSound* aSound);

// method '-[NSButton setState:]'
void _IM_NSButton_setState_C(NSButton *_self, int value);

// method '-[NSButton setTitle:]'
void _IM_NSButton_setTitle_C(NSButton *_self, NSString* aString);

// method '-[NSButton setTitleWithMnemonic:]'
void _IM_NSButton_setTitleWithMnemonic_C(NSButton *_self, NSString* stringWithAmpersand);

// method '-[NSButton setTransparent:]'
void _IM_NSButton_setTransparent_C(NSButton *_self, BOOL flag);

// method '-[NSButton showsBorderOnlyWhileMouseInside]'
BOOL _IM_NSButton_showsBorderOnlyWhileMouseInside(NSButton *_self);

// method '-[NSButton sound]'
NSSound* _IM_NSButton_sound(NSButton *_self);

// method '-[NSButton state]'
int _IM_NSButton_state(NSButton *_self);

// method '-[NSButton title]'
NSString* _IM_NSButton_title(NSButton *_self);

// method '-[NSButtonCell alternateImage]'
NSImage* _IM_NSButtonCell_alternateImage(NSButtonCell *_self);

// method '-[NSButtonCell alternateMnemonic]'
NSString* _IM_NSButtonCell_alternateMnemonic(NSButtonCell *_self);

// method '-[NSButtonCell alternateMnemonicLocation]'
unsigned int _IM_NSButtonCell_alternateMnemonicLocation(NSButtonCell *_self);

// method '-[NSButtonCell alternateTitle]'
NSString* _IM_NSButtonCell_alternateTitle(NSButtonCell *_self);

// method '-[NSButtonCell attributedAlternateTitle]'
NSAttributedString* _IM_NSButtonCell_attributedAlternateTitle(NSButtonCell *_self);

// method '-[NSButtonCell attributedTitle]'
NSAttributedString* _IM_NSButtonCell_attributedTitle(NSButtonCell *_self);

// method '-[NSButtonCell backgroundColor]'
NSColor* _IM_NSButtonCell_backgroundColor(NSButtonCell *_self);

// method '-[NSButtonCell bezelStyle]'
int _IM_NSButtonCell_bezelStyle(NSButtonCell *_self);

// method '-[NSButtonCell drawBezelWithFrame:inView:]'
void _IM_NSButtonCell_drawBezelWithFrame_CinView_C(NSButtonCell *_self, struct _NSRect frame, NSView* controlView);

// method '-[NSButtonCell drawImage:withFrame:inView:]'
void _IM_NSButtonCell_drawImage_CwithFrame_CinView_C(NSButtonCell *_self, NSImage* image, struct _NSRect frame, NSView* controlView);

// method '-[NSButtonCell drawTitle:withFrame:inView:]'
struct _NSRect _IM_NSButtonCell_drawTitle_CwithFrame_CinView_C(NSButtonCell *_self, NSAttributedString* title, struct _NSRect frame, NSView* controlView);

// method '-[NSButtonCell getPeriodicDelay:interval:]'
void _IM_NSButtonCell_getPeriodicDelay_Cinterval_C(NSButtonCell *_self, float *delay, float *interval);

// method '-[NSButtonCell gradientType]'
int _IM_NSButtonCell_gradientType(NSButtonCell *_self);

// method '-[NSButtonCell highlightsBy]'
int _IM_NSButtonCell_highlightsBy(NSButtonCell *_self);

// method '-[NSButtonCell imageDimsWhenDisabled]'
BOOL _IM_NSButtonCell_imageDimsWhenDisabled(NSButtonCell *_self);

// method '-[NSButtonCell imagePosition]'
int _IM_NSButtonCell_imagePosition(NSButtonCell *_self);

// method '-[NSButtonCell isOpaque]'
BOOL _IM_NSButtonCell_isOpaque(NSButtonCell *_self);

// method '-[NSButtonCell isTransparent]'
BOOL _IM_NSButtonCell_isTransparent(NSButtonCell *_self);

// method '-[NSButtonCell keyEquivalent]'
NSString* _IM_NSButtonCell_keyEquivalent(NSButtonCell *_self);

// method '-[NSButtonCell keyEquivalentFont]'
NSFont* _IM_NSButtonCell_keyEquivalentFont(NSButtonCell *_self);

// method '-[NSButtonCell keyEquivalentModifierMask]'
unsigned int _IM_NSButtonCell_keyEquivalentModifierMask(NSButtonCell *_self);

// method '-[NSButtonCell mouseEntered:]'
void _IM_NSButtonCell_mouseEntered_C(NSButtonCell *_self, NSEvent* event);

// method '-[NSButtonCell mouseExited:]'
void _IM_NSButtonCell_mouseExited_C(NSButtonCell *_self, NSEvent* event);

// method '-[NSButtonCell performClick:]'
void _IM_NSButtonCell_performClick_C(NSButtonCell *_self, id sender);

// method '-[NSButtonCell setAlternateImage:]'
void _IM_NSButtonCell_setAlternateImage_C(NSButtonCell *_self, NSImage* image);

// method '-[NSButtonCell setAlternateMnemonicLocation:]'
void _IM_NSButtonCell_setAlternateMnemonicLocation_C(NSButtonCell *_self, unsigned int location);

// method '-[NSButtonCell setAlternateTitle:]'
void _IM_NSButtonCell_setAlternateTitle_C(NSButtonCell *_self, NSString* aString);

// method '-[NSButtonCell setAlternateTitleWithMnemonic:]'
void _IM_NSButtonCell_setAlternateTitleWithMnemonic_C(NSButtonCell *_self, NSString* stringWithAmpersand);

// method '-[NSButtonCell setAttributedAlternateTitle:]'
void _IM_NSButtonCell_setAttributedAlternateTitle_C(NSButtonCell *_self, NSAttributedString* obj);

// method '-[NSButtonCell setAttributedTitle:]'
void _IM_NSButtonCell_setAttributedTitle_C(NSButtonCell *_self, NSAttributedString* obj);

// method '-[NSButtonCell setBackgroundColor:]'
void _IM_NSButtonCell_setBackgroundColor_C(NSButtonCell *_self, NSColor* color);

// method '-[NSButtonCell setBezelStyle:]'
void _IM_NSButtonCell_setBezelStyle_C(NSButtonCell *_self, int bezelStyle);

// method '-[NSButtonCell setButtonType:]'
void _IM_NSButtonCell_setButtonType_C(NSButtonCell *_self, int aType);

// method '-[NSButtonCell setFont:]'
void _IM_NSButtonCell_setFont_C(NSButtonCell *_self, NSFont* fontObj);

// method '-[NSButtonCell setGradientType:]'
void _IM_NSButtonCell_setGradientType_C(NSButtonCell *_self, int type);

// method '-[NSButtonCell setHighlightsBy:]'
void _IM_NSButtonCell_setHighlightsBy_C(NSButtonCell *_self, int aType);

// method '-[NSButtonCell setImageDimsWhenDisabled:]'
void _IM_NSButtonCell_setImageDimsWhenDisabled_C(NSButtonCell *_self, BOOL flag);

// method '-[NSButtonCell setImagePosition:]'
void _IM_NSButtonCell_setImagePosition_C(NSButtonCell *_self, int aPosition);

// method '-[NSButtonCell setKeyEquivalent:]'
void _IM_NSButtonCell_setKeyEquivalent_C(NSButtonCell *_self, NSString* aKeyEquivalent);

// method '-[NSButtonCell setKeyEquivalentFont:]'
void _IM_NSButtonCell_setKeyEquivalentFont_C(NSButtonCell *_self, NSFont* fontObj);

// method '-[NSButtonCell setKeyEquivalentFont:size:]'
void _IM_NSButtonCell_setKeyEquivalentFont_Csize_C(NSButtonCell *_self, NSString* fontName, float fontSize);

// method '-[NSButtonCell setKeyEquivalentModifierMask:]'
void _IM_NSButtonCell_setKeyEquivalentModifierMask_C(NSButtonCell *_self, unsigned int mask);

// method '-[NSButtonCell setPeriodicDelay:interval:]'
void _IM_NSButtonCell_setPeriodicDelay_Cinterval_C(NSButtonCell *_self, float delay, float interval);

// method '-[NSButtonCell setShowsBorderOnlyWhileMouseInside:]'
void _IM_NSButtonCell_setShowsBorderOnlyWhileMouseInside_C(NSButtonCell *_self, BOOL show);

// method '-[NSButtonCell setShowsStateBy:]'
void _IM_NSButtonCell_setShowsStateBy_C(NSButtonCell *_self, int aType);

// method '-[NSButtonCell setSound:]'
void _IM_NSButtonCell_setSound_C(NSButtonCell *_self, NSSound* aSound);

// method '-[NSButtonCell setTitle:]'
void _IM_NSButtonCell_setTitle_C(NSButtonCell *_self, NSString* aString);

// method '-[NSButtonCell setTitleWithMnemonic:]'
void _IM_NSButtonCell_setTitleWithMnemonic_C(NSButtonCell *_self, NSString* stringWithAmpersand);

// method '-[NSButtonCell setTransparent:]'
void _IM_NSButtonCell_setTransparent_C(NSButtonCell *_self, BOOL flag);

// method '-[NSButtonCell showsBorderOnlyWhileMouseInside]'
BOOL _IM_NSButtonCell_showsBorderOnlyWhileMouseInside(NSButtonCell *_self);

// method '-[NSButtonCell showsStateBy]'
int _IM_NSButtonCell_showsStateBy(NSButtonCell *_self);

// method '-[NSButtonCell sound]'
NSSound* _IM_NSButtonCell_sound(NSButtonCell *_self);

// method '-[NSButtonCell title]'
NSString* _IM_NSButtonCell_title(NSButtonCell *_self);

// method '-[NSCIImageRep CIImage]'
CIImage* _IM_NSCIImageRep_CIImage(NSCIImageRep *_self);

// method '+[NSCIImageRep imageRepWithCIImage:]'
id _CM_NSCIImageRep_imageRepWithCIImage_C(Class _class, CIImage* image);

// method '-[NSCIImageRep initWithCIImage:]'
NSCIImageRep *_IM_NSCIImageRep_initWithCIImage_C(NSCIImageRep *_self, CIImage* image);

// method '-[NSCachedImageRep initWithSize:depth:separate:alpha:]'
NSCachedImageRep *_IM_NSCachedImageRep_initWithSize_Cdepth_Cseparate_Calpha_C(NSCachedImageRep *_self, struct _NSSize size, int depth, BOOL flag, BOOL alpha);

// method '-[NSCachedImageRep initWithWindow:rect:]'
NSCachedImageRep *_IM_NSCachedImageRep_initWithWindow_Crect_C(NSCachedImageRep *_self, NSWindow* win, struct _NSRect rect);

// method '-[NSCachedImageRep rect]'
struct _NSRect _IM_NSCachedImageRep_rect(NSCachedImageRep *_self);

// method '-[NSCachedImageRep window]'
NSWindow* _IM_NSCachedImageRep_window(NSCachedImageRep *_self);

// method '-[NSCell acceptsFirstResponder]'
BOOL _IM_NSCell_acceptsFirstResponder(NSCell *_self);

// method '-[NSCell action]'
SEL _IM_NSCell_action(NSCell *_self);

// method '-[NSCell alignment]'
int _IM_NSCell_alignment(NSCell *_self);

// method '-[NSCell allowsEditingTextAttributes]'
BOOL _IM_NSCell_allowsEditingTextAttributes(NSCell *_self);

// method '-[NSCell allowsMixedState]'
BOOL _IM_NSCell_allowsMixedState(NSCell *_self);

// method '-[NSCell allowsUndo]'
BOOL _IM_NSCell_allowsUndo(NSCell *_self);

// method '-[NSCell attributedStringValue]'
NSAttributedString* _IM_NSCell_attributedStringValue(NSCell *_self);

// method '-[NSCell baseWritingDirection]'
int _IM_NSCell_baseWritingDirection(NSCell *_self);

// method '-[NSCell calcDrawInfo:]'
void _IM_NSCell_calcDrawInfo_C(NSCell *_self, struct _NSRect aRect);

// method '-[NSCell cellAttribute:]'
int _IM_NSCell_cellAttribute_C(NSCell *_self, int aParameter);

// method '-[NSCell cellSize]'
struct _NSSize _IM_NSCell_cellSize(NSCell *_self);

// method '-[NSCell cellSizeForBounds:]'
struct _NSSize _IM_NSCell_cellSizeForBounds_C(NSCell *_self, struct _NSRect aRect);

// method '-[NSCell compare:]'
int _IM_NSCell_compare_C(NSCell *_self, id otherCell);

// method '-[NSCell continueTracking:at:inView:]'
BOOL _IM_NSCell_continueTracking_Cat_CinView_C(NSCell *_self, struct _NSPoint lastPoint, struct _NSPoint currentPoint, NSView* controlView);

// method '-[NSCell controlSize]'
int _IM_NSCell_controlSize(NSCell *_self);

// method '-[NSCell controlTint]'
int _IM_NSCell_controlTint(NSCell *_self);

// method '-[NSCell controlView]'
NSView* _IM_NSCell_controlView(NSCell *_self);

// method '+[NSCell defaultFocusRingType]'
int _CM_NSCell_defaultFocusRingType(Class _class);

// method '+[NSCell defaultMenu]'
NSMenu* _CM_NSCell_defaultMenu(Class _class);

// method '-[NSCell doubleValue]'
double _IM_NSCell_doubleValue(NSCell *_self);

// method '-[NSCell drawInteriorWithFrame:inView:]'
void _IM_NSCell_drawInteriorWithFrame_CinView_C(NSCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSCell drawWithFrame:inView:]'
void _IM_NSCell_drawWithFrame_CinView_C(NSCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSCell drawingRectForBounds:]'
struct _NSRect _IM_NSCell_drawingRectForBounds_C(NSCell *_self, struct _NSRect theRect);

// method '-[NSCell editWithFrame:inView:editor:delegate:event:]'
void _IM_NSCell_editWithFrame_CinView_Ceditor_Cdelegate_Cevent_C(NSCell *_self, struct _NSRect aRect, NSView* controlView, NSText* textObj, id anObject, NSEvent* theEvent);

// method '-[NSCell endEditing:]'
void _IM_NSCell_endEditing_C(NSCell *_self, NSText* textObj);

// method '-[NSCell entryType]'
int _IM_NSCell_entryType(NSCell *_self);

// method '-[NSCell floatValue]'
float _IM_NSCell_floatValue(NSCell *_self);

// method '-[NSCell focusRingType]'
int _IM_NSCell_focusRingType(NSCell *_self);

// method '-[NSCell font]'
NSFont* _IM_NSCell_font(NSCell *_self);

// method '-[NSCell formatter]'
id _IM_NSCell_formatter(NSCell *_self);

// method '-[NSCell getPeriodicDelay:interval:]'
void _IM_NSCell_getPeriodicDelay_Cinterval_C(NSCell *_self, float *delay, float *interval);

// method '-[NSCell hasValidObjectValue]'
BOOL _IM_NSCell_hasValidObjectValue(NSCell *_self);

// method '-[NSCell highlight:withFrame:inView:]'
void _IM_NSCell_highlight_CwithFrame_CinView_C(NSCell *_self, BOOL flag, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSCell highlightColorWithFrame:inView:]'
NSColor* _IM_NSCell_highlightColorWithFrame_CinView_C(NSCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSCell image]'
NSImage* _IM_NSCell_image(NSCell *_self);

// method '-[NSCell imageRectForBounds:]'
struct _NSRect _IM_NSCell_imageRectForBounds_C(NSCell *_self, struct _NSRect theRect);

// method '-[NSCell importsGraphics]'
BOOL _IM_NSCell_importsGraphics(NSCell *_self);

// method '-[NSCell initImageCell:]'
NSCell *_IM_NSCell_initImageCell_C(NSCell *_self, NSImage* image);

// method '-[NSCell initTextCell:]'
NSCell *_IM_NSCell_initTextCell_C(NSCell *_self, NSString* aString);

// method '-[NSCell intValue]'
int _IM_NSCell_intValue(NSCell *_self);

// method '-[NSCell isBezeled]'
BOOL _IM_NSCell_isBezeled(NSCell *_self);

// method '-[NSCell isBordered]'
BOOL _IM_NSCell_isBordered(NSCell *_self);

// method '-[NSCell isContinuous]'
BOOL _IM_NSCell_isContinuous(NSCell *_self);

// method '-[NSCell isEditable]'
BOOL _IM_NSCell_isEditable(NSCell *_self);

// method '-[NSCell isEnabled]'
BOOL _IM_NSCell_isEnabled(NSCell *_self);

// method '-[NSCell isEntryAcceptable:]'
BOOL _IM_NSCell_isEntryAcceptable_C(NSCell *_self, NSString* aString);

// method '-[NSCell isHighlighted]'
BOOL _IM_NSCell_isHighlighted(NSCell *_self);

// method '-[NSCell isOpaque]'
BOOL _IM_NSCell_isOpaque(NSCell *_self);

// method '-[NSCell isScrollable]'
BOOL _IM_NSCell_isScrollable(NSCell *_self);

// method '-[NSCell isSelectable]'
BOOL _IM_NSCell_isSelectable(NSCell *_self);

// method '-[NSCell keyEquivalent]'
NSString* _IM_NSCell_keyEquivalent(NSCell *_self);

// method '-[NSCell lineBreakMode]'
int _IM_NSCell_lineBreakMode(NSCell *_self);

// method '-[NSCell menu]'
NSMenu* _IM_NSCell_menu(NSCell *_self);

// method '-[NSCell menuForEvent:inRect:ofView:]'
NSMenu* _IM_NSCell_menuForEvent_CinRect_CofView_C(NSCell *_self, NSEvent* event, struct _NSRect cellFrame, NSView* view);

// method '-[NSCell mnemonic]'
NSString* _IM_NSCell_mnemonic(NSCell *_self);

// method '-[NSCell mnemonicLocation]'
unsigned int _IM_NSCell_mnemonicLocation(NSCell *_self);

// method '-[NSCell mouseDownFlags]'
int _IM_NSCell_mouseDownFlags(NSCell *_self);

// method '-[NSCell nextState]'
int _IM_NSCell_nextState(NSCell *_self);

// method '-[NSCell objectValue]'
id _IM_NSCell_objectValue(NSCell *_self);

// method '-[NSCell performClick:]'
void _IM_NSCell_performClick_C(NSCell *_self, id sender);

// method '+[NSCell prefersTrackingUntilMouseUp]'
BOOL _CM_NSCell_prefersTrackingUntilMouseUp(Class _class);

// method '-[NSCell refusesFirstResponder]'
BOOL _IM_NSCell_refusesFirstResponder(NSCell *_self);

// method '-[NSCell representedObject]'
id _IM_NSCell_representedObject(NSCell *_self);

// method '-[NSCell resetCursorRect:inView:]'
void _IM_NSCell_resetCursorRect_CinView_C(NSCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSCell selectWithFrame:inView:editor:delegate:start:length:]'
void _IM_NSCell_selectWithFrame_CinView_Ceditor_Cdelegate_Cstart_Clength_C(NSCell *_self, struct _NSRect aRect, NSView* controlView, NSText* textObj, id anObject, int selStart, int selLength);

// method '-[NSCell sendActionOn:]'
int _IM_NSCell_sendActionOn_C(NSCell *_self, int mask);

// method '-[NSCell sendsActionOnEndEditing]'
BOOL _IM_NSCell_sendsActionOnEndEditing(NSCell *_self);

// method '-[NSCell setAction:]'
void _IM_NSCell_setAction_C(NSCell *_self, SEL aSelector);

// method '-[NSCell setAlignment:]'
void _IM_NSCell_setAlignment_C(NSCell *_self, int mode);

// method '-[NSCell setAllowsEditingTextAttributes:]'
void _IM_NSCell_setAllowsEditingTextAttributes_C(NSCell *_self, BOOL flag);

// method '-[NSCell setAllowsMixedState:]'
void _IM_NSCell_setAllowsMixedState_C(NSCell *_self, BOOL flag);

// method '-[NSCell setAllowsUndo:]'
void _IM_NSCell_setAllowsUndo_C(NSCell *_self, BOOL allowsUndo);

// method '-[NSCell setAttributedStringValue:]'
void _IM_NSCell_setAttributedStringValue_C(NSCell *_self, NSAttributedString* obj);

// method '-[NSCell setBaseWritingDirection:]'
void _IM_NSCell_setBaseWritingDirection_C(NSCell *_self, int writingDirection);

// method '-[NSCell setBezeled:]'
void _IM_NSCell_setBezeled_C(NSCell *_self, BOOL flag);

// method '-[NSCell setBordered:]'
void _IM_NSCell_setBordered_C(NSCell *_self, BOOL flag);

// method '-[NSCell setCellAttribute:to:]'
void _IM_NSCell_setCellAttribute_Cto_C(NSCell *_self, int aParameter, int value);

// method '-[NSCell setContinuous:]'
void _IM_NSCell_setContinuous_C(NSCell *_self, BOOL flag);

// method '-[NSCell setControlSize:]'
void _IM_NSCell_setControlSize_C(NSCell *_self, int size);

// method '-[NSCell setControlTint:]'
void _IM_NSCell_setControlTint_C(NSCell *_self, int controlTint);

// method '-[NSCell setControlView:]'
void _IM_NSCell_setControlView_C(NSCell *_self, NSView* view);

// method '-[NSCell setDoubleValue:]'
void _IM_NSCell_setDoubleValue_C(NSCell *_self, double aDouble);

// method '-[NSCell setEditable:]'
void _IM_NSCell_setEditable_C(NSCell *_self, BOOL flag);

// method '-[NSCell setEnabled:]'
void _IM_NSCell_setEnabled_C(NSCell *_self, BOOL flag);

// method '-[NSCell setEntryType:]'
void _IM_NSCell_setEntryType_C(NSCell *_self, int aType);

// method '-[NSCell setFloatValue:]'
void _IM_NSCell_setFloatValue_C(NSCell *_self, float aFloat);

// method '-[NSCell setFloatingPointFormat:left:right:]'
void _IM_NSCell_setFloatingPointFormat_Cleft_Cright_C(NSCell *_self, BOOL autoRange, unsigned int leftDigits, unsigned int rightDigits);

// method '-[NSCell setFocusRingType:]'
void _IM_NSCell_setFocusRingType_C(NSCell *_self, int focusRingType);

// method '-[NSCell setFont:]'
void _IM_NSCell_setFont_C(NSCell *_self, NSFont* fontObj);

// method '-[NSCell setFormatter:]'
void _IM_NSCell_setFormatter_C(NSCell *_self, id newFormatter);

// method '-[NSCell setHighlighted:]'
void _IM_NSCell_setHighlighted_C(NSCell *_self, BOOL flag);

// method '-[NSCell setImage:]'
void _IM_NSCell_setImage_C(NSCell *_self, NSImage* image);

// method '-[NSCell setImportsGraphics:]'
void _IM_NSCell_setImportsGraphics_C(NSCell *_self, BOOL flag);

// method '-[NSCell setIntValue:]'
void _IM_NSCell_setIntValue_C(NSCell *_self, int anInt);

// method '-[NSCell setLineBreakMode:]'
void _IM_NSCell_setLineBreakMode_C(NSCell *_self, int mode);

// method '-[NSCell setMenu:]'
void _IM_NSCell_setMenu_C(NSCell *_self, NSMenu* aMenu);

// method '-[NSCell setMnemonicLocation:]'
void _IM_NSCell_setMnemonicLocation_C(NSCell *_self, unsigned int location);

// method '-[NSCell setNextState]'
void _IM_NSCell_setNextState(NSCell *_self);

// method '-[NSCell setObjectValue:]'
void _IM_NSCell_setObjectValue_C(NSCell *_self, id obj);

// method '-[NSCell setRefusesFirstResponder:]'
void _IM_NSCell_setRefusesFirstResponder_C(NSCell *_self, BOOL flag);

// method '-[NSCell setRepresentedObject:]'
void _IM_NSCell_setRepresentedObject_C(NSCell *_self, id anObject);

// method '-[NSCell setScrollable:]'
void _IM_NSCell_setScrollable_C(NSCell *_self, BOOL flag);

// method '-[NSCell setSelectable:]'
void _IM_NSCell_setSelectable_C(NSCell *_self, BOOL flag);

// method '-[NSCell setSendsActionOnEndEditing:]'
void _IM_NSCell_setSendsActionOnEndEditing_C(NSCell *_self, BOOL flag);

// method '-[NSCell setShowsFirstResponder:]'
void _IM_NSCell_setShowsFirstResponder_C(NSCell *_self, BOOL showFR);

// method '-[NSCell setState:]'
void _IM_NSCell_setState_C(NSCell *_self, int value);

// method '-[NSCell setStringValue:]'
void _IM_NSCell_setStringValue_C(NSCell *_self, NSString* aString);

// method '-[NSCell setTag:]'
void _IM_NSCell_setTag_C(NSCell *_self, int anInt);

// method '-[NSCell setTarget:]'
void _IM_NSCell_setTarget_C(NSCell *_self, id anObject);

// method '-[NSCell setTitle:]'
void _IM_NSCell_setTitle_C(NSCell *_self, NSString* aString);

// method '-[NSCell setTitleWithMnemonic:]'
void _IM_NSCell_setTitleWithMnemonic_C(NSCell *_self, NSString* stringWithAmpersand);

// method '-[NSCell setType:]'
void _IM_NSCell_setType_C(NSCell *_self, int aType);

// method '-[NSCell setUpFieldEditorAttributes:]'
NSText* _IM_NSCell_setUpFieldEditorAttributes_C(NSCell *_self, NSText* textObj);

// method '-[NSCell setWraps:]'
void _IM_NSCell_setWraps_C(NSCell *_self, BOOL flag);

// method '-[NSCell showsFirstResponder]'
BOOL _IM_NSCell_showsFirstResponder(NSCell *_self);

// method '-[NSCell startTrackingAt:inView:]'
BOOL _IM_NSCell_startTrackingAt_CinView_C(NSCell *_self, struct _NSPoint startPoint, NSView* controlView);

// method '-[NSCell state]'
int _IM_NSCell_state(NSCell *_self);

// method '-[NSCell stopTracking:at:inView:mouseIsUp:]'
void _IM_NSCell_stopTracking_Cat_CinView_CmouseIsUp_C(NSCell *_self, struct _NSPoint lastPoint, struct _NSPoint stopPoint, NSView* controlView, BOOL flag);

// method '-[NSCell stringValue]'
NSString* _IM_NSCell_stringValue(NSCell *_self);

// method '-[NSCell tag]'
int _IM_NSCell_tag(NSCell *_self);

// method '-[NSCell takeDoubleValueFrom:]'
void _IM_NSCell_takeDoubleValueFrom_C(NSCell *_self, id sender);

// method '-[NSCell takeFloatValueFrom:]'
void _IM_NSCell_takeFloatValueFrom_C(NSCell *_self, id sender);

// method '-[NSCell takeIntValueFrom:]'
void _IM_NSCell_takeIntValueFrom_C(NSCell *_self, id sender);

// method '-[NSCell takeObjectValueFrom:]'
void _IM_NSCell_takeObjectValueFrom_C(NSCell *_self, id sender);

// method '-[NSCell takeStringValueFrom:]'
void _IM_NSCell_takeStringValueFrom_C(NSCell *_self, id sender);

// method '-[NSCell target]'
id _IM_NSCell_target(NSCell *_self);

// method '-[NSCell title]'
NSString* _IM_NSCell_title(NSCell *_self);

// method '-[NSCell titleRectForBounds:]'
struct _NSRect _IM_NSCell_titleRectForBounds_C(NSCell *_self, struct _NSRect theRect);

// method '-[NSCell trackMouse:inRect:ofView:untilMouseUp:]'
BOOL _IM_NSCell_trackMouse_CinRect_CofView_CuntilMouseUp_C(NSCell *_self, NSEvent* theEvent, struct _NSRect cellFrame, NSView* controlView, BOOL flag);

// method '-[NSCell type]'
int _IM_NSCell_type(NSCell *_self);

// method '-[NSCell wraps]'
BOOL _IM_NSCell_wraps(NSCell *_self);

// method '-[NSClipView autoscroll:]'
BOOL _IM_NSClipView_autoscroll_C(NSClipView *_self, NSEvent* theEvent);

// method '-[NSClipView backgroundColor]'
NSColor* _IM_NSClipView_backgroundColor(NSClipView *_self);

// method '-[NSClipView constrainScrollPoint:]'
struct _NSPoint _IM_NSClipView_constrainScrollPoint_C(NSClipView *_self, struct _NSPoint newOrigin);

// method '-[NSClipView copiesOnScroll]'
BOOL _IM_NSClipView_copiesOnScroll(NSClipView *_self);

// method '-[NSClipView documentCursor]'
NSCursor* _IM_NSClipView_documentCursor(NSClipView *_self);

// method '-[NSClipView documentRect]'
struct _NSRect _IM_NSClipView_documentRect(NSClipView *_self);

// method '-[NSClipView documentView]'
id _IM_NSClipView_documentView(NSClipView *_self);

// method '-[NSClipView documentVisibleRect]'
struct _NSRect _IM_NSClipView_documentVisibleRect(NSClipView *_self);

// method '-[NSClipView drawsBackground]'
BOOL _IM_NSClipView_drawsBackground(NSClipView *_self);

// method '-[NSClipView scrollToPoint:]'
void _IM_NSClipView_scrollToPoint_C(NSClipView *_self, struct _NSPoint newOrigin);

// method '-[NSClipView setBackgroundColor:]'
void _IM_NSClipView_setBackgroundColor_C(NSClipView *_self, NSColor* color);

// method '-[NSClipView setCopiesOnScroll:]'
void _IM_NSClipView_setCopiesOnScroll_C(NSClipView *_self, BOOL flag);

// method '-[NSClipView setDocumentCursor:]'
void _IM_NSClipView_setDocumentCursor_C(NSClipView *_self, NSCursor* anObj);

// method '-[NSClipView setDocumentView:]'
void _IM_NSClipView_setDocumentView_C(NSClipView *_self, NSView* aView);

// method '-[NSClipView setDrawsBackground:]'
void _IM_NSClipView_setDrawsBackground_C(NSClipView *_self, BOOL flag);

// method '-[NSClipView viewBoundsChanged:]'
void _IM_NSClipView_viewBoundsChanged_C(NSClipView *_self, id notification);

// method '-[NSClipView viewFrameChanged:]'
void _IM_NSClipView_viewFrameChanged_C(NSClipView *_self, id notification);

// method '-[NSCoder decodeNXColor]'
NSColor* _IM_NSCoder_decodeNXColor(NSCoder *_self);

// method '-[NSColor alphaComponent]'
float _IM_NSColor_alphaComponent(NSColor *_self);

// method '+[NSColor alternateSelectedControlColor]'
NSColor* _CM_NSColor_alternateSelectedControlColor(Class _class);

// method '+[NSColor alternateSelectedControlTextColor]'
NSColor* _CM_NSColor_alternateSelectedControlTextColor(Class _class);

// method '+[NSColor blackColor]'
NSColor* _CM_NSColor_blackColor(Class _class);

// method '-[NSColor blackComponent]'
float _IM_NSColor_blackComponent(NSColor *_self);

// method '-[NSColor blendedColorWithFraction:ofColor:]'
NSColor* _IM_NSColor_blendedColorWithFraction_CofColor_C(NSColor *_self, float fraction, NSColor* color);

// method '+[NSColor blueColor]'
NSColor* _CM_NSColor_blueColor(Class _class);

// method '-[NSColor blueComponent]'
float _IM_NSColor_blueComponent(NSColor *_self);

// method '-[NSColor brightnessComponent]'
float _IM_NSColor_brightnessComponent(NSColor *_self);

// method '+[NSColor brownColor]'
NSColor* _CM_NSColor_brownColor(Class _class);

// method '-[NSColor catalogNameComponent]'
NSString* _IM_NSColor_catalogNameComponent(NSColor *_self);

// method '+[NSColor clearColor]'
NSColor* _CM_NSColor_clearColor(Class _class);

// method '+[NSColor colorForControlTint:]'
NSColor* _CM_NSColor_colorForControlTint_C(Class _class, int controlTint);

// method '+[NSColor colorFromPasteboard:]'
NSColor* _CM_NSColor_colorFromPasteboard_C(Class _class, NSPasteboard* pasteBoard);

// method '-[NSColor colorNameComponent]'
NSString* _IM_NSColor_colorNameComponent(NSColor *_self);

// method '-[NSColor colorSpace]'
NSColorSpace* _IM_NSColor_colorSpace(NSColor *_self);

// method '-[NSColor colorSpaceName]'
NSString* _IM_NSColor_colorSpaceName(NSColor *_self);

// method '-[NSColor colorUsingColorSpace:]'
NSColor* _IM_NSColor_colorUsingColorSpace_C(NSColor *_self, NSColorSpace* space);

// method '-[NSColor colorUsingColorSpaceName:]'
NSColor* _IM_NSColor_colorUsingColorSpaceName_C(NSColor *_self, NSString* colorSpace);

// method '-[NSColor colorUsingColorSpaceName:device:]'
NSColor* _IM_NSColor_colorUsingColorSpaceName_Cdevice_C(NSColor *_self, NSString* colorSpace, id deviceDescription);

// method '-[NSColor colorWithAlphaComponent:]'
NSColor* _IM_NSColor_colorWithAlphaComponent_C(NSColor *_self, float alpha);

// method '+[NSColor colorWithCIColor:]'
NSColor* _CM_NSColor_colorWithCIColor_C(Class _class, CIColor* color);

// method '+[NSColor colorWithCalibratedHue:saturation:brightness:alpha:]'
NSColor* _CM_NSColor_colorWithCalibratedHue_Csaturation_Cbrightness_Calpha_C(Class _class, float hue, float saturation, float brightness, float alpha);

// method '+[NSColor colorWithCalibratedRed:green:blue:alpha:]'
NSColor* _CM_NSColor_colorWithCalibratedRed_Cgreen_Cblue_Calpha_C(Class _class, float red, float green, float blue, float alpha);

// method '+[NSColor colorWithCalibratedWhite:alpha:]'
NSColor* _CM_NSColor_colorWithCalibratedWhite_Calpha_C(Class _class, float white, float alpha);

// method '+[NSColor colorWithCatalogName:colorName:]'
NSColor* _CM_NSColor_colorWithCatalogName_CcolorName_C(Class _class, NSString* listName, NSString* colorName);

// method '+[NSColor colorWithColorSpace:components:count:]'
NSColor* _CM_NSColor_colorWithColorSpace_Ccomponents_Ccount_C(Class _class, NSColorSpace* space, const float* components, int numberOfComponents);

// method '+[NSColor colorWithDeviceCyan:magenta:yellow:black:alpha:]'
NSColor* _CM_NSColor_colorWithDeviceCyan_Cmagenta_Cyellow_Cblack_Calpha_C(Class _class, float cyan, float magenta, float yellow, float black, float alpha);

// method '+[NSColor colorWithDeviceHue:saturation:brightness:alpha:]'
NSColor* _CM_NSColor_colorWithDeviceHue_Csaturation_Cbrightness_Calpha_C(Class _class, float hue, float saturation, float brightness, float alpha);

// method '+[NSColor colorWithDeviceRed:green:blue:alpha:]'
NSColor* _CM_NSColor_colorWithDeviceRed_Cgreen_Cblue_Calpha_C(Class _class, float red, float green, float blue, float alpha);

// method '+[NSColor colorWithDeviceWhite:alpha:]'
NSColor* _CM_NSColor_colorWithDeviceWhite_Calpha_C(Class _class, float white, float alpha);

// method '+[NSColor colorWithPatternImage:]'
NSColor* _CM_NSColor_colorWithPatternImage_C(Class _class, NSImage* image);

// method '+[NSColor controlAlternatingRowBackgroundColors]'
id _CM_NSColor_controlAlternatingRowBackgroundColors(Class _class);

// method '+[NSColor controlBackgroundColor]'
NSColor* _CM_NSColor_controlBackgroundColor(Class _class);

// method '+[NSColor controlColor]'
NSColor* _CM_NSColor_controlColor(Class _class);

// method '+[NSColor controlDarkShadowColor]'
NSColor* _CM_NSColor_controlDarkShadowColor(Class _class);

// method '+[NSColor controlHighlightColor]'
NSColor* _CM_NSColor_controlHighlightColor(Class _class);

// method '+[NSColor controlLightHighlightColor]'
NSColor* _CM_NSColor_controlLightHighlightColor(Class _class);

// method '+[NSColor controlShadowColor]'
NSColor* _CM_NSColor_controlShadowColor(Class _class);

// method '+[NSColor controlTextColor]'
NSColor* _CM_NSColor_controlTextColor(Class _class);

// method '+[NSColor currentControlTint]'
int _CM_NSColor_currentControlTint(Class _class);

// method '+[NSColor cyanColor]'
NSColor* _CM_NSColor_cyanColor(Class _class);

// method '-[NSColor cyanComponent]'
float _IM_NSColor_cyanComponent(NSColor *_self);

// method '+[NSColor darkGrayColor]'
NSColor* _CM_NSColor_darkGrayColor(Class _class);

// method '+[NSColor disabledControlTextColor]'
NSColor* _CM_NSColor_disabledControlTextColor(Class _class);

// method '-[NSColor drawSwatchInRect:]'
void _IM_NSColor_drawSwatchInRect_C(NSColor *_self, struct _NSRect rect);

// method '-[NSColor getCyan:magenta:yellow:black:alpha:]'
void _IM_NSColor_getCyan_Cmagenta_Cyellow_Cblack_Calpha_C(NSColor *_self, float *cyan, float *magenta, float *yellow, float *black, float *alpha);

// method '-[NSColor getHue:saturation:brightness:alpha:]'
void _IM_NSColor_getHue_Csaturation_Cbrightness_Calpha_C(NSColor *_self, float *hue, float *saturation, float *brightness, float *alpha);

// method '-[NSColor getRed:green:blue:alpha:]'
void _IM_NSColor_getRed_Cgreen_Cblue_Calpha_C(NSColor *_self, float *red, float *green, float *blue, float *alpha);

// method '-[NSColor getWhite:alpha:]'
void _IM_NSColor_getWhite_Calpha_C(NSColor *_self, float *white, float *alpha);

// method '+[NSColor grayColor]'
NSColor* _CM_NSColor_grayColor(Class _class);

// method '+[NSColor greenColor]'
NSColor* _CM_NSColor_greenColor(Class _class);

// method '-[NSColor greenComponent]'
float _IM_NSColor_greenComponent(NSColor *_self);

// method '+[NSColor gridColor]'
NSColor* _CM_NSColor_gridColor(Class _class);

// method '+[NSColor headerColor]'
NSColor* _CM_NSColor_headerColor(Class _class);

// method '+[NSColor headerTextColor]'
NSColor* _CM_NSColor_headerTextColor(Class _class);

// method '+[NSColor highlightColor]'
NSColor* _CM_NSColor_highlightColor(Class _class);

// method '-[NSColor highlightWithLevel:]'
NSColor* _IM_NSColor_highlightWithLevel_C(NSColor *_self, float val);

// method '-[NSColor hueComponent]'
float _IM_NSColor_hueComponent(NSColor *_self);

// method '+[NSColor ignoresAlpha]'
BOOL _CM_NSColor_ignoresAlpha(Class _class);

// method '+[NSColor keyboardFocusIndicatorColor]'
NSColor* _CM_NSColor_keyboardFocusIndicatorColor(Class _class);

// method '+[NSColor knobColor]'
NSColor* _CM_NSColor_knobColor(Class _class);

// method '+[NSColor lightGrayColor]'
NSColor* _CM_NSColor_lightGrayColor(Class _class);

// method '-[NSColor localizedCatalogNameComponent]'
NSString* _IM_NSColor_localizedCatalogNameComponent(NSColor *_self);

// method '-[NSColor localizedColorNameComponent]'
NSString* _IM_NSColor_localizedColorNameComponent(NSColor *_self);

// method '+[NSColor magentaColor]'
NSColor* _CM_NSColor_magentaColor(Class _class);

// method '-[NSColor magentaComponent]'
float _IM_NSColor_magentaComponent(NSColor *_self);

// method '-[NSColor numberOfComponents]'
int _IM_NSColor_numberOfComponents(NSColor *_self);

// method '+[NSColor orangeColor]'
NSColor* _CM_NSColor_orangeColor(Class _class);

// method '-[NSColor patternImage]'
NSImage* _IM_NSColor_patternImage(NSColor *_self);

// method '+[NSColor purpleColor]'
NSColor* _CM_NSColor_purpleColor(Class _class);

// method '+[NSColor redColor]'
NSColor* _CM_NSColor_redColor(Class _class);

// method '-[NSColor redComponent]'
float _IM_NSColor_redComponent(NSColor *_self);

// method '-[NSColor saturationComponent]'
float _IM_NSColor_saturationComponent(NSColor *_self);

// method '+[NSColor scrollBarColor]'
NSColor* _CM_NSColor_scrollBarColor(Class _class);

// method '+[NSColor secondarySelectedControlColor]'
NSColor* _CM_NSColor_secondarySelectedControlColor(Class _class);

// method '+[NSColor selectedControlColor]'
NSColor* _CM_NSColor_selectedControlColor(Class _class);

// method '+[NSColor selectedControlTextColor]'
NSColor* _CM_NSColor_selectedControlTextColor(Class _class);

// method '+[NSColor selectedKnobColor]'
NSColor* _CM_NSColor_selectedKnobColor(Class _class);

// method '+[NSColor selectedMenuItemColor]'
NSColor* _CM_NSColor_selectedMenuItemColor(Class _class);

// method '+[NSColor selectedMenuItemTextColor]'
NSColor* _CM_NSColor_selectedMenuItemTextColor(Class _class);

// method '+[NSColor selectedTextBackgroundColor]'
NSColor* _CM_NSColor_selectedTextBackgroundColor(Class _class);

// method '+[NSColor selectedTextColor]'
NSColor* _CM_NSColor_selectedTextColor(Class _class);

// method '-[NSColor set]'
void _IM_NSColor_set(NSColor *_self);

// method '-[NSColor setFill]'
void _IM_NSColor_setFill(NSColor *_self);

// method '+[NSColor setIgnoresAlpha:]'
void _CM_NSColor_setIgnoresAlpha_C(Class _class, BOOL flag);

// method '-[NSColor setStroke]'
void _IM_NSColor_setStroke(NSColor *_self);

// method '+[NSColor shadowColor]'
NSColor* _CM_NSColor_shadowColor(Class _class);

// method '-[NSColor shadowWithLevel:]'
NSColor* _IM_NSColor_shadowWithLevel_C(NSColor *_self, float val);

// method '+[NSColor textBackgroundColor]'
NSColor* _CM_NSColor_textBackgroundColor(Class _class);

// method '+[NSColor textColor]'
NSColor* _CM_NSColor_textColor(Class _class);

// method '+[NSColor whiteColor]'
NSColor* _CM_NSColor_whiteColor(Class _class);

// method '-[NSColor whiteComponent]'
float _IM_NSColor_whiteComponent(NSColor *_self);

// method '+[NSColor windowBackgroundColor]'
NSColor* _CM_NSColor_windowBackgroundColor(Class _class);

// method '+[NSColor windowFrameColor]'
NSColor* _CM_NSColor_windowFrameColor(Class _class);

// method '+[NSColor windowFrameTextColor]'
NSColor* _CM_NSColor_windowFrameTextColor(Class _class);

// method '-[NSColor writeToPasteboard:]'
void _IM_NSColor_writeToPasteboard_C(NSColor *_self, NSPasteboard* pasteBoard);

// method '+[NSColor yellowColor]'
NSColor* _CM_NSColor_yellowColor(Class _class);

// method '-[NSColor yellowComponent]'
float _IM_NSColor_yellowComponent(NSColor *_self);

// method '-[NSColorList allKeys]'
id _IM_NSColorList_allKeys(NSColorList *_self);

// method '+[NSColorList availableColorLists]'
id _CM_NSColorList_availableColorLists(Class _class);

// method '+[NSColorList colorListNamed:]'
NSColorList* _CM_NSColorList_colorListNamed_C(Class _class, NSString* name);

// method '-[NSColorList colorWithKey:]'
NSColor* _IM_NSColorList_colorWithKey_C(NSColorList *_self, NSString* key);

// method '-[NSColorList initWithName:]'
NSColorList *_IM_NSColorList_initWithName_C(NSColorList *_self, NSString* name);

// method '-[NSColorList initWithName:fromFile:]'
NSColorList *_IM_NSColorList_initWithName_CfromFile_C(NSColorList *_self, NSString* name, NSString* path);

// method '-[NSColorList insertColor:key:atIndex:]'
void _IM_NSColorList_insertColor_Ckey_CatIndex_C(NSColorList *_self, NSColor* color, NSString* key, unsigned int loc);

// method '-[NSColorList isEditable]'
BOOL _IM_NSColorList_isEditable(NSColorList *_self);

// method '-[NSColorList name]'
NSString* _IM_NSColorList_name(NSColorList *_self);

// method '-[NSColorList removeColorWithKey:]'
void _IM_NSColorList_removeColorWithKey_C(NSColorList *_self, NSString* key);

// method '-[NSColorList removeFile]'
void _IM_NSColorList_removeFile(NSColorList *_self);

// method '-[NSColorList setColor:forKey:]'
void _IM_NSColorList_setColor_CforKey_C(NSColorList *_self, NSColor* color, NSString* key);

// method '-[NSColorList writeToFile:]'
BOOL _IM_NSColorList_writeToFile_C(NSColorList *_self, NSString* path);

// method '-[NSColorPanel accessoryView]'
NSView* _IM_NSColorPanel_accessoryView(NSColorPanel *_self);

// method '-[NSColorPanel alpha]'
float _IM_NSColorPanel_alpha(NSColorPanel *_self);

// method '-[NSColorPanel attachColorList:]'
void _IM_NSColorPanel_attachColorList_C(NSColorPanel *_self, NSColorList* colorList);

// method '-[NSColorPanel color]'
NSColor* _IM_NSColorPanel_color(NSColorPanel *_self);

// method '-[NSColorPanel detachColorList:]'
void _IM_NSColorPanel_detachColorList_C(NSColorPanel *_self, NSColorList* colorList);

// method '+[NSColorPanel dragColor:withEvent:fromView:]'
BOOL _CM_NSColorPanel_dragColor_CwithEvent_CfromView_C(Class _class, NSColor* color, NSEvent* theEvent, NSView* sourceView);

// method '-[NSColorPanel isContinuous]'
BOOL _IM_NSColorPanel_isContinuous(NSColorPanel *_self);

// method '-[NSColorPanel mode]'
int _IM_NSColorPanel_mode(NSColorPanel *_self);

// method '-[NSColorPanel setAccessoryView:]'
void _IM_NSColorPanel_setAccessoryView_C(NSColorPanel *_self, NSView* aView);

// method '-[NSColorPanel setAction:]'
void _IM_NSColorPanel_setAction_C(NSColorPanel *_self, SEL aSelector);

// method '-[NSColorPanel setColor:]'
void _IM_NSColorPanel_setColor_C(NSColorPanel *_self, NSColor* color);

// method '-[NSColorPanel setContinuous:]'
void _IM_NSColorPanel_setContinuous_C(NSColorPanel *_self, BOOL flag);

// method '-[NSColorPanel setMode:]'
void _IM_NSColorPanel_setMode_C(NSColorPanel *_self, int mode);

// method '+[NSColorPanel setPickerMask:]'
void _CM_NSColorPanel_setPickerMask_C(Class _class, int mask);

// method '+[NSColorPanel setPickerMode:]'
void _CM_NSColorPanel_setPickerMode_C(Class _class, int mode);

// method '-[NSColorPanel setShowsAlpha:]'
void _IM_NSColorPanel_setShowsAlpha_C(NSColorPanel *_self, BOOL flag);

// method '-[NSColorPanel setTarget:]'
void _IM_NSColorPanel_setTarget_C(NSColorPanel *_self, id anObject);

// method '+[NSColorPanel sharedColorPanel]'
NSColorPanel* _CM_NSColorPanel_sharedColorPanel(Class _class);

// method '+[NSColorPanel sharedColorPanelExists]'
BOOL _CM_NSColorPanel_sharedColorPanelExists(Class _class);

// method '-[NSColorPanel showsAlpha]'
BOOL _IM_NSColorPanel_showsAlpha(NSColorPanel *_self);

// method '-[NSColorPicker attachColorList:]'
void _IM_NSColorPicker_attachColorList_C(NSColorPicker *_self, NSColorList* colorList);

// method '-[NSColorPicker colorPanel]'
NSColorPanel* _IM_NSColorPicker_colorPanel(NSColorPicker *_self);

// method '-[NSColorPicker detachColorList:]'
void _IM_NSColorPicker_detachColorList_C(NSColorPicker *_self, NSColorList* colorList);

// method '-[NSColorPicker initWithPickerMask:colorPanel:]'
NSColorPicker *_IM_NSColorPicker_initWithPickerMask_CcolorPanel_C(NSColorPicker *_self, int mask, NSColorPanel* owningColorPanel);

// method '-[NSColorPicker insertNewButtonImage:in:]'
void _IM_NSColorPicker_insertNewButtonImage_Cin_C(NSColorPicker *_self, NSImage* newButtonImage, NSButtonCell* buttonCell);

// method '-[NSColorPicker provideNewButtonImage]'
NSImage* _IM_NSColorPicker_provideNewButtonImage(NSColorPicker *_self);

// method '-[NSColorPicker setMode:]'
void _IM_NSColorPicker_setMode_C(NSColorPicker *_self, int mode);

// method '-[NSColorPicker viewSizeChanged:]'
void _IM_NSColorPicker_viewSizeChanged_C(NSColorPicker *_self, id sender);

// method '-[NSColorSpace ICCProfileData]'
id _IM_NSColorSpace_ICCProfileData(NSColorSpace *_self);

// method '-[NSColorSpace colorSpaceModel]'
int _IM_NSColorSpace_colorSpaceModel(NSColorSpace *_self);

// method '-[NSColorSpace colorSyncProfile]'
struct OpaqueCMProfileRef *_IM_NSColorSpace_colorSyncProfile(NSColorSpace *_self);

// method '+[NSColorSpace deviceCMYKColorSpace]'
NSColorSpace* _CM_NSColorSpace_deviceCMYKColorSpace(Class _class);

// method '+[NSColorSpace deviceGrayColorSpace]'
NSColorSpace* _CM_NSColorSpace_deviceGrayColorSpace(Class _class);

// method '+[NSColorSpace deviceRGBColorSpace]'
NSColorSpace* _CM_NSColorSpace_deviceRGBColorSpace(Class _class);

// method '+[NSColorSpace genericCMYKColorSpace]'
NSColorSpace* _CM_NSColorSpace_genericCMYKColorSpace(Class _class);

// method '+[NSColorSpace genericGrayColorSpace]'
NSColorSpace* _CM_NSColorSpace_genericGrayColorSpace(Class _class);

// method '+[NSColorSpace genericRGBColorSpace]'
NSColorSpace* _CM_NSColorSpace_genericRGBColorSpace(Class _class);

// method '-[NSColorSpace initWithColorSyncProfile:]'
NSColorSpace *_IM_NSColorSpace_initWithColorSyncProfile_C(NSColorSpace *_self, struct OpaqueCMProfileRef *prof);

// method '-[NSColorSpace initWithICCProfileData:]'
NSColorSpace *_IM_NSColorSpace_initWithICCProfileData_C(NSColorSpace *_self, id iccData);

// method '-[NSColorSpace localizedName]'
NSString* _IM_NSColorSpace_localizedName(NSColorSpace *_self);

// method '-[NSColorSpace numberOfColorComponents]'
int _IM_NSColorSpace_numberOfColorComponents(NSColorSpace *_self);

// method '-[NSColorWell activate:]'
void _IM_NSColorWell_activate_C(NSColorWell *_self, BOOL exclusive);

// method '-[NSColorWell color]'
NSColor* _IM_NSColorWell_color(NSColorWell *_self);

// method '-[NSColorWell deactivate]'
void _IM_NSColorWell_deactivate(NSColorWell *_self);

// method '-[NSColorWell drawWellInside:]'
void _IM_NSColorWell_drawWellInside_C(NSColorWell *_self, struct _NSRect insideRect);

// method '-[NSColorWell isActive]'
BOOL _IM_NSColorWell_isActive(NSColorWell *_self);

// method '-[NSColorWell isBordered]'
BOOL _IM_NSColorWell_isBordered(NSColorWell *_self);

// method '-[NSColorWell setBordered:]'
void _IM_NSColorWell_setBordered_C(NSColorWell *_self, BOOL flag);

// method '-[NSColorWell setColor:]'
void _IM_NSColorWell_setColor_C(NSColorWell *_self, NSColor* color);

// method '-[NSColorWell takeColorFrom:]'
void _IM_NSColorWell_takeColorFrom_C(NSColorWell *_self, id sender);

// method '-[NSComboBox addItemWithObjectValue:]'
void _IM_NSComboBox_addItemWithObjectValue_C(NSComboBox *_self, id object);

// method '-[NSComboBox addItemsWithObjectValues:]'
void _IM_NSComboBox_addItemsWithObjectValues_C(NSComboBox *_self, id objects);

// method '-[NSComboBox completes]'
BOOL _IM_NSComboBox_completes(NSComboBox *_self);

// method '-[NSComboBox dataSource]'
id _IM_NSComboBox_dataSource(NSComboBox *_self);

// method '-[NSComboBox deselectItemAtIndex:]'
void _IM_NSComboBox_deselectItemAtIndex_C(NSComboBox *_self, int index);

// method '-[NSComboBox hasVerticalScroller]'
BOOL _IM_NSComboBox_hasVerticalScroller(NSComboBox *_self);

// method '-[NSComboBox indexOfItemWithObjectValue:]'
int _IM_NSComboBox_indexOfItemWithObjectValue_C(NSComboBox *_self, id object);

// method '-[NSComboBox indexOfSelectedItem]'
int _IM_NSComboBox_indexOfSelectedItem(NSComboBox *_self);

// method '-[NSComboBox insertItemWithObjectValue:atIndex:]'
void _IM_NSComboBox_insertItemWithObjectValue_CatIndex_C(NSComboBox *_self, id object, int index);

// method '-[NSComboBox intercellSpacing]'
struct _NSSize _IM_NSComboBox_intercellSpacing(NSComboBox *_self);

// method '-[NSComboBox isButtonBordered]'
BOOL _IM_NSComboBox_isButtonBordered(NSComboBox *_self);

// method '-[NSComboBox itemHeight]'
float _IM_NSComboBox_itemHeight(NSComboBox *_self);

// method '-[NSComboBox itemObjectValueAtIndex:]'
id _IM_NSComboBox_itemObjectValueAtIndex_C(NSComboBox *_self, int index);

// method '-[NSComboBox noteNumberOfItemsChanged]'
void _IM_NSComboBox_noteNumberOfItemsChanged(NSComboBox *_self);

// method '-[NSComboBox numberOfItems]'
int _IM_NSComboBox_numberOfItems(NSComboBox *_self);

// method '-[NSComboBox numberOfVisibleItems]'
int _IM_NSComboBox_numberOfVisibleItems(NSComboBox *_self);

// method '-[NSComboBox objectValueOfSelectedItem]'
id _IM_NSComboBox_objectValueOfSelectedItem(NSComboBox *_self);

// method '-[NSComboBox objectValues]'
id _IM_NSComboBox_objectValues(NSComboBox *_self);

// method '-[NSComboBox reloadData]'
void _IM_NSComboBox_reloadData(NSComboBox *_self);

// method '-[NSComboBox removeAllItems]'
void _IM_NSComboBox_removeAllItems(NSComboBox *_self);

// method '-[NSComboBox removeItemAtIndex:]'
void _IM_NSComboBox_removeItemAtIndex_C(NSComboBox *_self, int index);

// method '-[NSComboBox removeItemWithObjectValue:]'
void _IM_NSComboBox_removeItemWithObjectValue_C(NSComboBox *_self, id object);

// method '-[NSComboBox scrollItemAtIndexToTop:]'
void _IM_NSComboBox_scrollItemAtIndexToTop_C(NSComboBox *_self, int index);

// method '-[NSComboBox scrollItemAtIndexToVisible:]'
void _IM_NSComboBox_scrollItemAtIndexToVisible_C(NSComboBox *_self, int index);

// method '-[NSComboBox selectItemAtIndex:]'
void _IM_NSComboBox_selectItemAtIndex_C(NSComboBox *_self, int index);

// method '-[NSComboBox selectItemWithObjectValue:]'
void _IM_NSComboBox_selectItemWithObjectValue_C(NSComboBox *_self, id object);

// method '-[NSComboBox setButtonBordered:]'
void _IM_NSComboBox_setButtonBordered_C(NSComboBox *_self, BOOL flag);

// method '-[NSComboBox setCompletes:]'
void _IM_NSComboBox_setCompletes_C(NSComboBox *_self, BOOL completes);

// method '-[NSComboBox setDataSource:]'
void _IM_NSComboBox_setDataSource_C(NSComboBox *_self, id aSource);

// method '-[NSComboBox setHasVerticalScroller:]'
void _IM_NSComboBox_setHasVerticalScroller_C(NSComboBox *_self, BOOL flag);

// method '-[NSComboBox setIntercellSpacing:]'
void _IM_NSComboBox_setIntercellSpacing_C(NSComboBox *_self, struct _NSSize aSize);

// method '-[NSComboBox setItemHeight:]'
void _IM_NSComboBox_setItemHeight_C(NSComboBox *_self, float itemHeight);

// method '-[NSComboBox setNumberOfVisibleItems:]'
void _IM_NSComboBox_setNumberOfVisibleItems_C(NSComboBox *_self, int visibleItems);

// method '-[NSComboBox setUsesDataSource:]'
void _IM_NSComboBox_setUsesDataSource_C(NSComboBox *_self, BOOL flag);

// method '-[NSComboBox usesDataSource]'
BOOL _IM_NSComboBox_usesDataSource(NSComboBox *_self);

// method '-[NSComboBoxCell addItemWithObjectValue:]'
void _IM_NSComboBoxCell_addItemWithObjectValue_C(NSComboBoxCell *_self, id object);

// method '-[NSComboBoxCell addItemsWithObjectValues:]'
void _IM_NSComboBoxCell_addItemsWithObjectValues_C(NSComboBoxCell *_self, id objects);

// method '-[NSComboBoxCell completedString:]'
NSString* _IM_NSComboBoxCell_completedString_C(NSComboBoxCell *_self, NSString* string);

// method '-[NSComboBoxCell completes]'
BOOL _IM_NSComboBoxCell_completes(NSComboBoxCell *_self);

// method '-[NSComboBoxCell dataSource]'
id _IM_NSComboBoxCell_dataSource(NSComboBoxCell *_self);

// method '-[NSComboBoxCell deselectItemAtIndex:]'
void _IM_NSComboBoxCell_deselectItemAtIndex_C(NSComboBoxCell *_self, int index);

// method '-[NSComboBoxCell hasVerticalScroller]'
BOOL _IM_NSComboBoxCell_hasVerticalScroller(NSComboBoxCell *_self);

// method '-[NSComboBoxCell indexOfItemWithObjectValue:]'
int _IM_NSComboBoxCell_indexOfItemWithObjectValue_C(NSComboBoxCell *_self, id object);

// method '-[NSComboBoxCell indexOfSelectedItem]'
int _IM_NSComboBoxCell_indexOfSelectedItem(NSComboBoxCell *_self);

// method '-[NSComboBoxCell insertItemWithObjectValue:atIndex:]'
void _IM_NSComboBoxCell_insertItemWithObjectValue_CatIndex_C(NSComboBoxCell *_self, id object, int index);

// method '-[NSComboBoxCell intercellSpacing]'
struct _NSSize _IM_NSComboBoxCell_intercellSpacing(NSComboBoxCell *_self);

// method '-[NSComboBoxCell isButtonBordered]'
BOOL _IM_NSComboBoxCell_isButtonBordered(NSComboBoxCell *_self);

// method '-[NSComboBoxCell itemHeight]'
float _IM_NSComboBoxCell_itemHeight(NSComboBoxCell *_self);

// method '-[NSComboBoxCell itemObjectValueAtIndex:]'
id _IM_NSComboBoxCell_itemObjectValueAtIndex_C(NSComboBoxCell *_self, int index);

// method '-[NSComboBoxCell noteNumberOfItemsChanged]'
void _IM_NSComboBoxCell_noteNumberOfItemsChanged(NSComboBoxCell *_self);

// method '-[NSComboBoxCell numberOfItems]'
int _IM_NSComboBoxCell_numberOfItems(NSComboBoxCell *_self);

// method '-[NSComboBoxCell numberOfVisibleItems]'
int _IM_NSComboBoxCell_numberOfVisibleItems(NSComboBoxCell *_self);

// method '-[NSComboBoxCell objectValueOfSelectedItem]'
id _IM_NSComboBoxCell_objectValueOfSelectedItem(NSComboBoxCell *_self);

// method '-[NSComboBoxCell objectValues]'
id _IM_NSComboBoxCell_objectValues(NSComboBoxCell *_self);

// method '-[NSComboBoxCell reloadData]'
void _IM_NSComboBoxCell_reloadData(NSComboBoxCell *_self);

// method '-[NSComboBoxCell removeAllItems]'
void _IM_NSComboBoxCell_removeAllItems(NSComboBoxCell *_self);

// method '-[NSComboBoxCell removeItemAtIndex:]'
void _IM_NSComboBoxCell_removeItemAtIndex_C(NSComboBoxCell *_self, int index);

// method '-[NSComboBoxCell removeItemWithObjectValue:]'
void _IM_NSComboBoxCell_removeItemWithObjectValue_C(NSComboBoxCell *_self, id object);

// method '-[NSComboBoxCell scrollItemAtIndexToTop:]'
void _IM_NSComboBoxCell_scrollItemAtIndexToTop_C(NSComboBoxCell *_self, int index);

// method '-[NSComboBoxCell scrollItemAtIndexToVisible:]'
void _IM_NSComboBoxCell_scrollItemAtIndexToVisible_C(NSComboBoxCell *_self, int index);

// method '-[NSComboBoxCell selectItemAtIndex:]'
void _IM_NSComboBoxCell_selectItemAtIndex_C(NSComboBoxCell *_self, int index);

// method '-[NSComboBoxCell selectItemWithObjectValue:]'
void _IM_NSComboBoxCell_selectItemWithObjectValue_C(NSComboBoxCell *_self, id object);

// method '-[NSComboBoxCell setButtonBordered:]'
void _IM_NSComboBoxCell_setButtonBordered_C(NSComboBoxCell *_self, BOOL flag);

// method '-[NSComboBoxCell setCompletes:]'
void _IM_NSComboBoxCell_setCompletes_C(NSComboBoxCell *_self, BOOL completes);

// method '-[NSComboBoxCell setDataSource:]'
void _IM_NSComboBoxCell_setDataSource_C(NSComboBoxCell *_self, id aSource);

// method '-[NSComboBoxCell setHasVerticalScroller:]'
void _IM_NSComboBoxCell_setHasVerticalScroller_C(NSComboBoxCell *_self, BOOL flag);

// method '-[NSComboBoxCell setIntercellSpacing:]'
void _IM_NSComboBoxCell_setIntercellSpacing_C(NSComboBoxCell *_self, struct _NSSize aSize);

// method '-[NSComboBoxCell setItemHeight:]'
void _IM_NSComboBoxCell_setItemHeight_C(NSComboBoxCell *_self, float itemHeight);

// method '-[NSComboBoxCell setNumberOfVisibleItems:]'
void _IM_NSComboBoxCell_setNumberOfVisibleItems_C(NSComboBoxCell *_self, int visibleItems);

// method '-[NSComboBoxCell setUsesDataSource:]'
void _IM_NSComboBoxCell_setUsesDataSource_C(NSComboBoxCell *_self, BOOL flag);

// method '-[NSComboBoxCell usesDataSource]'
BOOL _IM_NSComboBoxCell_usesDataSource(NSComboBoxCell *_self);

// method '-[NSControl abortEditing]'
BOOL _IM_NSControl_abortEditing(NSControl *_self);

// method '-[NSControl action]'
SEL _IM_NSControl_action(NSControl *_self);

// method '-[NSControl alignment]'
int _IM_NSControl_alignment(NSControl *_self);

// method '-[NSControl attributedStringValue]'
NSAttributedString* _IM_NSControl_attributedStringValue(NSControl *_self);

// method '-[NSControl baseWritingDirection]'
int _IM_NSControl_baseWritingDirection(NSControl *_self);

// method '-[NSControl calcSize]'
void _IM_NSControl_calcSize(NSControl *_self);

// method '-[NSControl cell]'
id _IM_NSControl_cell(NSControl *_self);

// method '+[NSControl cellClass]'
Class _CM_NSControl_cellClass(Class _class);

// method '-[NSControl currentEditor]'
NSText* _IM_NSControl_currentEditor(NSControl *_self);

// method '-[NSControl doubleValue]'
double _IM_NSControl_doubleValue(NSControl *_self);

// method '-[NSControl drawCell:]'
void _IM_NSControl_drawCell_C(NSControl *_self, NSCell* aCell);

// method '-[NSControl drawCellInside:]'
void _IM_NSControl_drawCellInside_C(NSControl *_self, NSCell* aCell);

// method '-[NSControl floatValue]'
float _IM_NSControl_floatValue(NSControl *_self);

// method '-[NSControl font]'
NSFont* _IM_NSControl_font(NSControl *_self);

// method '-[NSControl formatter]'
id _IM_NSControl_formatter(NSControl *_self);

// method '-[NSControl ignoresMultiClick]'
BOOL _IM_NSControl_ignoresMultiClick(NSControl *_self);

// method '-[NSControl initWithFrame:]'
NSControl *_IM_NSControl_initWithFrame_C(NSControl *_self, struct _NSRect frameRect);

// method '-[NSControl intValue]'
int _IM_NSControl_intValue(NSControl *_self);

// method '-[NSControl isContinuous]'
BOOL _IM_NSControl_isContinuous(NSControl *_self);

// method '-[NSControl isEnabled]'
BOOL _IM_NSControl_isEnabled(NSControl *_self);

// method '-[NSControl mouseDown:]'
void _IM_NSControl_mouseDown_C(NSControl *_self, NSEvent* theEvent);

// method '-[NSControl objectValue]'
id _IM_NSControl_objectValue(NSControl *_self);

// method '-[NSControl performClick:]'
void _IM_NSControl_performClick_C(NSControl *_self, id sender);

// method '-[NSControl refusesFirstResponder]'
BOOL _IM_NSControl_refusesFirstResponder(NSControl *_self);

// method '-[NSControl selectCell:]'
void _IM_NSControl_selectCell_C(NSControl *_self, NSCell* aCell);

// method '-[NSControl selectedCell]'
id _IM_NSControl_selectedCell(NSControl *_self);

// method '-[NSControl selectedTag]'
int _IM_NSControl_selectedTag(NSControl *_self);

// method '-[NSControl sendAction:to:]'
BOOL _IM_NSControl_sendAction_Cto_C(NSControl *_self, SEL theAction, id theTarget);

// method '-[NSControl sendActionOn:]'
int _IM_NSControl_sendActionOn_C(NSControl *_self, int mask);

// method '-[NSControl setAction:]'
void _IM_NSControl_setAction_C(NSControl *_self, SEL aSelector);

// method '-[NSControl setAlignment:]'
void _IM_NSControl_setAlignment_C(NSControl *_self, int mode);

// method '-[NSControl setAttributedStringValue:]'
void _IM_NSControl_setAttributedStringValue_C(NSControl *_self, NSAttributedString* obj);

// method '-[NSControl setBaseWritingDirection:]'
void _IM_NSControl_setBaseWritingDirection_C(NSControl *_self, int writingDirection);

// method '-[NSControl setCell:]'
void _IM_NSControl_setCell_C(NSControl *_self, NSCell* aCell);

// method '+[NSControl setCellClass:]'
void _CM_NSControl_setCellClass_C(Class _class, Class factoryId);

// method '-[NSControl setContinuous:]'
void _IM_NSControl_setContinuous_C(NSControl *_self, BOOL flag);

// method '-[NSControl setDoubleValue:]'
void _IM_NSControl_setDoubleValue_C(NSControl *_self, double aDouble);

// method '-[NSControl setEnabled:]'
void _IM_NSControl_setEnabled_C(NSControl *_self, BOOL flag);

// method '-[NSControl setFloatValue:]'
void _IM_NSControl_setFloatValue_C(NSControl *_self, float aFloat);

// method '-[NSControl setFloatingPointFormat:left:right:]'
void _IM_NSControl_setFloatingPointFormat_Cleft_Cright_C(NSControl *_self, BOOL autoRange, unsigned int leftDigits, unsigned int rightDigits);

// method '-[NSControl setFont:]'
void _IM_NSControl_setFont_C(NSControl *_self, NSFont* fontObj);

// method '-[NSControl setFormatter:]'
void _IM_NSControl_setFormatter_C(NSControl *_self, id newFormatter);

// method '-[NSControl setIgnoresMultiClick:]'
void _IM_NSControl_setIgnoresMultiClick_C(NSControl *_self, BOOL flag);

// method '-[NSControl setIntValue:]'
void _IM_NSControl_setIntValue_C(NSControl *_self, int anInt);

// method '-[NSControl setNeedsDisplay]'
void _IM_NSControl_setNeedsDisplay(NSControl *_self);

// method '-[NSControl setObjectValue:]'
void _IM_NSControl_setObjectValue_C(NSControl *_self, id obj);

// method '-[NSControl setRefusesFirstResponder:]'
void _IM_NSControl_setRefusesFirstResponder_C(NSControl *_self, BOOL flag);

// method '-[NSControl setStringValue:]'
void _IM_NSControl_setStringValue_C(NSControl *_self, NSString* aString);

// method '-[NSControl setTag:]'
void _IM_NSControl_setTag_C(NSControl *_self, int anInt);

// method '-[NSControl setTarget:]'
void _IM_NSControl_setTarget_C(NSControl *_self, id anObject);

// method '-[NSControl sizeToFit]'
void _IM_NSControl_sizeToFit(NSControl *_self);

// method '-[NSControl stringValue]'
NSString* _IM_NSControl_stringValue(NSControl *_self);

// method '-[NSControl tag]'
int _IM_NSControl_tag(NSControl *_self);

// method '-[NSControl takeDoubleValueFrom:]'
void _IM_NSControl_takeDoubleValueFrom_C(NSControl *_self, id sender);

// method '-[NSControl takeFloatValueFrom:]'
void _IM_NSControl_takeFloatValueFrom_C(NSControl *_self, id sender);

// method '-[NSControl takeIntValueFrom:]'
void _IM_NSControl_takeIntValueFrom_C(NSControl *_self, id sender);

// method '-[NSControl takeObjectValueFrom:]'
void _IM_NSControl_takeObjectValueFrom_C(NSControl *_self, id sender);

// method '-[NSControl takeStringValueFrom:]'
void _IM_NSControl_takeStringValueFrom_C(NSControl *_self, id sender);

// method '-[NSControl target]'
id _IM_NSControl_target(NSControl *_self);

// method '-[NSControl updateCell:]'
void _IM_NSControl_updateCell_C(NSControl *_self, NSCell* aCell);

// method '-[NSControl updateCellInside:]'
void _IM_NSControl_updateCellInside_C(NSControl *_self, NSCell* aCell);

// method '-[NSControl validateEditing]'
void _IM_NSControl_validateEditing(NSControl *_self);

// method '-[NSController commitEditing]'
BOOL _IM_NSController_commitEditing(NSController *_self);

// method '-[NSController commitEditingWithDelegate:didCommitSelector:contextInfo:]'
void _IM_NSController_commitEditingWithDelegate_CdidCommitSelector_CcontextInfo_C(NSController *_self, id delegate, SEL didCommitSelector, void *contextInfo);

// method '-[NSController discardEditing]'
void _IM_NSController_discardEditing(NSController *_self);

// method '-[NSController isEditing]'
BOOL _IM_NSController_isEditing(NSController *_self);

// method '-[NSController objectDidBeginEditing:]'
void _IM_NSController_objectDidBeginEditing_C(NSController *_self, id editor);

// method '-[NSController objectDidEndEditing:]'
void _IM_NSController_objectDidEndEditing_C(NSController *_self, id editor);

// method '+[NSCursor IBeamCursor]'
NSCursor* _CM_NSCursor_IBeamCursor(Class _class);

// method '+[NSCursor arrowCursor]'
NSCursor* _CM_NSCursor_arrowCursor(Class _class);

// method '+[NSCursor closedHandCursor]'
NSCursor* _CM_NSCursor_closedHandCursor(Class _class);

// method '+[NSCursor crosshairCursor]'
NSCursor* _CM_NSCursor_crosshairCursor(Class _class);

// method '+[NSCursor currentCursor]'
NSCursor* _CM_NSCursor_currentCursor(Class _class);

// method '+[NSCursor disappearingItemCursor]'
NSCursor* _CM_NSCursor_disappearingItemCursor(Class _class);

// method '+[NSCursor hide]'
void _CM_NSCursor_hide(Class _class);

// method '-[NSCursor hotSpot]'
struct _NSPoint _IM_NSCursor_hotSpot(NSCursor *_self);

// method '-[NSCursor image]'
NSImage* _IM_NSCursor_image(NSCursor *_self);

// method '-[NSCursor initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:]'
NSCursor *_IM_NSCursor_initWithImage_CforegroundColorHint_CbackgroundColorHint_ChotSpot_C(NSCursor *_self, NSImage* newImage, NSColor* fg, NSColor* bg, struct _NSPoint hotSpot);

// method '-[NSCursor initWithImage:hotSpot:]'
NSCursor *_IM_NSCursor_initWithImage_ChotSpot_C(NSCursor *_self, NSImage* newImage, struct _NSPoint aPoint);

// method '-[NSCursor isSetOnMouseEntered]'
BOOL _IM_NSCursor_isSetOnMouseEntered(NSCursor *_self);

// method '-[NSCursor isSetOnMouseExited]'
BOOL _IM_NSCursor_isSetOnMouseExited(NSCursor *_self);

// method '-[NSCursor mouseEntered:]'
void _IM_NSCursor_mouseEntered_C(NSCursor *_self, NSEvent* theEvent);

// method '-[NSCursor mouseExited:]'
void _IM_NSCursor_mouseExited_C(NSCursor *_self, NSEvent* theEvent);

// method '+[NSCursor openHandCursor]'
NSCursor* _CM_NSCursor_openHandCursor(Class _class);

// method '+[NSCursor pointingHandCursor]'
NSCursor* _CM_NSCursor_pointingHandCursor(Class _class);

// method '+[NSCursor pop]'
void _CM_NSCursor_pop(Class _class);

// method '-[NSCursor pop]'
void _IM_NSCursor_pop(NSCursor *_self);

// method '-[NSCursor push]'
void _IM_NSCursor_push(NSCursor *_self);

// method '+[NSCursor resizeDownCursor]'
NSCursor* _CM_NSCursor_resizeDownCursor(Class _class);

// method '+[NSCursor resizeLeftCursor]'
NSCursor* _CM_NSCursor_resizeLeftCursor(Class _class);

// method '+[NSCursor resizeLeftRightCursor]'
NSCursor* _CM_NSCursor_resizeLeftRightCursor(Class _class);

// method '+[NSCursor resizeRightCursor]'
NSCursor* _CM_NSCursor_resizeRightCursor(Class _class);

// method '+[NSCursor resizeUpCursor]'
NSCursor* _CM_NSCursor_resizeUpCursor(Class _class);

// method '+[NSCursor resizeUpDownCursor]'
NSCursor* _CM_NSCursor_resizeUpDownCursor(Class _class);

// method '-[NSCursor set]'
void _IM_NSCursor_set(NSCursor *_self);

// method '+[NSCursor setHiddenUntilMouseMoves:]'
void _CM_NSCursor_setHiddenUntilMouseMoves_C(Class _class, BOOL flag);

// method '-[NSCursor setOnMouseEntered:]'
void _IM_NSCursor_setOnMouseEntered_C(NSCursor *_self, BOOL flag);

// method '-[NSCursor setOnMouseExited:]'
void _IM_NSCursor_setOnMouseExited_C(NSCursor *_self, BOOL flag);

// method '+[NSCursor unhide]'
void _CM_NSCursor_unhide(Class _class);

// method '-[NSCustomImageRep delegate]'
id _IM_NSCustomImageRep_delegate(NSCustomImageRep *_self);

// method '-[NSCustomImageRep drawSelector]'
SEL _IM_NSCustomImageRep_drawSelector(NSCustomImageRep *_self);

// method '-[NSCustomImageRep initWithDrawSelector:delegate:]'
NSCustomImageRep *_IM_NSCustomImageRep_initWithDrawSelector_Cdelegate_C(NSCustomImageRep *_self, SEL aMethod, id anObject);

// method '-[NSDatePicker backgroundColor]'
NSColor* _IM_NSDatePicker_backgroundColor(NSDatePicker *_self);

// method '-[NSDatePicker calendar]'
id _IM_NSDatePicker_calendar(NSDatePicker *_self);

// method '-[NSDatePicker datePickerElements]'
unsigned int _IM_NSDatePicker_datePickerElements(NSDatePicker *_self);

// method '-[NSDatePicker datePickerMode]'
int _IM_NSDatePicker_datePickerMode(NSDatePicker *_self);

// method '-[NSDatePicker datePickerStyle]'
int _IM_NSDatePicker_datePickerStyle(NSDatePicker *_self);

// method '-[NSDatePicker dateValue]'
id _IM_NSDatePicker_dateValue(NSDatePicker *_self);

// method '-[NSDatePicker delegate]'
id _IM_NSDatePicker_delegate(NSDatePicker *_self);

// method '-[NSDatePicker drawsBackground]'
BOOL _IM_NSDatePicker_drawsBackground(NSDatePicker *_self);

// method '-[NSDatePicker isBezeled]'
BOOL _IM_NSDatePicker_isBezeled(NSDatePicker *_self);

// method '-[NSDatePicker isBordered]'
BOOL _IM_NSDatePicker_isBordered(NSDatePicker *_self);

// method '-[NSDatePicker locale]'
id _IM_NSDatePicker_locale(NSDatePicker *_self);

// method '-[NSDatePicker maxDate]'
id _IM_NSDatePicker_maxDate(NSDatePicker *_self);

// method '-[NSDatePicker minDate]'
id _IM_NSDatePicker_minDate(NSDatePicker *_self);

// method '-[NSDatePicker setBackgroundColor:]'
void _IM_NSDatePicker_setBackgroundColor_C(NSDatePicker *_self, NSColor* color);

// method '-[NSDatePicker setBezeled:]'
void _IM_NSDatePicker_setBezeled_C(NSDatePicker *_self, BOOL flag);

// method '-[NSDatePicker setBordered:]'
void _IM_NSDatePicker_setBordered_C(NSDatePicker *_self, BOOL flag);

// method '-[NSDatePicker setCalendar:]'
void _IM_NSDatePicker_setCalendar_C(NSDatePicker *_self, id newCalendar);

// method '-[NSDatePicker setDatePickerElements:]'
void _IM_NSDatePicker_setDatePickerElements_C(NSDatePicker *_self, unsigned int elementFlags);

// method '-[NSDatePicker setDatePickerMode:]'
void _IM_NSDatePicker_setDatePickerMode_C(NSDatePicker *_self, int newMode);

// method '-[NSDatePicker setDatePickerStyle:]'
void _IM_NSDatePicker_setDatePickerStyle_C(NSDatePicker *_self, int newStyle);

// method '-[NSDatePicker setDateValue:]'
void _IM_NSDatePicker_setDateValue_C(NSDatePicker *_self, id newStartDate);

// method '-[NSDatePicker setDelegate:]'
void _IM_NSDatePicker_setDelegate_C(NSDatePicker *_self, id anObject);

// method '-[NSDatePicker setDrawsBackground:]'
void _IM_NSDatePicker_setDrawsBackground_C(NSDatePicker *_self, BOOL flag);

// method '-[NSDatePicker setLocale:]'
void _IM_NSDatePicker_setLocale_C(NSDatePicker *_self, id newLocale);

// method '-[NSDatePicker setMaxDate:]'
void _IM_NSDatePicker_setMaxDate_C(NSDatePicker *_self, id date);

// method '-[NSDatePicker setMinDate:]'
void _IM_NSDatePicker_setMinDate_C(NSDatePicker *_self, id date);

// method '-[NSDatePicker setTextColor:]'
void _IM_NSDatePicker_setTextColor_C(NSDatePicker *_self, NSColor* color);

// method '-[NSDatePicker setTimeInterval:]'
void _IM_NSDatePicker_setTimeInterval_C(NSDatePicker *_self, double newTimeInterval);

// method '-[NSDatePicker setTimeZone:]'
void _IM_NSDatePicker_setTimeZone_C(NSDatePicker *_self, id newTimeZone);

// method '-[NSDatePicker textColor]'
NSColor* _IM_NSDatePicker_textColor(NSDatePicker *_self);

// method '-[NSDatePicker timeInterval]'
double _IM_NSDatePicker_timeInterval(NSDatePicker *_self);

// method '-[NSDatePicker timeZone]'
id _IM_NSDatePicker_timeZone(NSDatePicker *_self);

// method '-[NSDatePickerCell backgroundColor]'
NSColor* _IM_NSDatePickerCell_backgroundColor(NSDatePickerCell *_self);

// method '-[NSDatePickerCell calendar]'
id _IM_NSDatePickerCell_calendar(NSDatePickerCell *_self);

// method '-[NSDatePickerCell datePickerElements]'
unsigned int _IM_NSDatePickerCell_datePickerElements(NSDatePickerCell *_self);

// method '-[NSDatePickerCell datePickerMode]'
int _IM_NSDatePickerCell_datePickerMode(NSDatePickerCell *_self);

// method '-[NSDatePickerCell datePickerStyle]'
int _IM_NSDatePickerCell_datePickerStyle(NSDatePickerCell *_self);

// method '-[NSDatePickerCell dateValue]'
id _IM_NSDatePickerCell_dateValue(NSDatePickerCell *_self);

// method '-[NSDatePickerCell delegate]'
id _IM_NSDatePickerCell_delegate(NSDatePickerCell *_self);

// method '-[NSDatePickerCell drawsBackground]'
BOOL _IM_NSDatePickerCell_drawsBackground(NSDatePickerCell *_self);

// method '-[NSDatePickerCell locale]'
id _IM_NSDatePickerCell_locale(NSDatePickerCell *_self);

// method '-[NSDatePickerCell maxDate]'
id _IM_NSDatePickerCell_maxDate(NSDatePickerCell *_self);

// method '-[NSDatePickerCell minDate]'
id _IM_NSDatePickerCell_minDate(NSDatePickerCell *_self);

// method '-[NSDatePickerCell setBackgroundColor:]'
void _IM_NSDatePickerCell_setBackgroundColor_C(NSDatePickerCell *_self, NSColor* color);

// method '-[NSDatePickerCell setCalendar:]'
void _IM_NSDatePickerCell_setCalendar_C(NSDatePickerCell *_self, id newCalendar);

// method '-[NSDatePickerCell setDatePickerElements:]'
void _IM_NSDatePickerCell_setDatePickerElements_C(NSDatePickerCell *_self, unsigned int elementFlags);

// method '-[NSDatePickerCell setDatePickerMode:]'
void _IM_NSDatePickerCell_setDatePickerMode_C(NSDatePickerCell *_self, int newMode);

// method '-[NSDatePickerCell setDatePickerStyle:]'
void _IM_NSDatePickerCell_setDatePickerStyle_C(NSDatePickerCell *_self, int newStyle);

// method '-[NSDatePickerCell setDateValue:]'
void _IM_NSDatePickerCell_setDateValue_C(NSDatePickerCell *_self, id newStartDate);

// method '-[NSDatePickerCell setDelegate:]'
void _IM_NSDatePickerCell_setDelegate_C(NSDatePickerCell *_self, id anObject);

// method '-[NSDatePickerCell setDrawsBackground:]'
void _IM_NSDatePickerCell_setDrawsBackground_C(NSDatePickerCell *_self, BOOL flag);

// method '-[NSDatePickerCell setLocale:]'
void _IM_NSDatePickerCell_setLocale_C(NSDatePickerCell *_self, id newLocale);

// method '-[NSDatePickerCell setMaxDate:]'
void _IM_NSDatePickerCell_setMaxDate_C(NSDatePickerCell *_self, id date);

// method '-[NSDatePickerCell setMinDate:]'
void _IM_NSDatePickerCell_setMinDate_C(NSDatePickerCell *_self, id date);

// method '-[NSDatePickerCell setTextColor:]'
void _IM_NSDatePickerCell_setTextColor_C(NSDatePickerCell *_self, NSColor* color);

// method '-[NSDatePickerCell setTimeInterval:]'
void _IM_NSDatePickerCell_setTimeInterval_C(NSDatePickerCell *_self, double newTimeInterval);

// method '-[NSDatePickerCell setTimeZone:]'
void _IM_NSDatePickerCell_setTimeZone_C(NSDatePickerCell *_self, id newTimeZone);

// method '-[NSDatePickerCell textColor]'
NSColor* _IM_NSDatePickerCell_textColor(NSDatePickerCell *_self);

// method '-[NSDatePickerCell timeInterval]'
double _IM_NSDatePickerCell_timeInterval(NSDatePickerCell *_self);

// method '-[NSDatePickerCell timeZone]'
id _IM_NSDatePickerCell_timeZone(NSDatePickerCell *_self);

// method '-[NSDocument addWindowController:]'
void _IM_NSDocument_addWindowController_C(NSDocument *_self, NSWindowController* windowController);

// method '-[NSDocument autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:]'
void _IM_NSDocument_autosaveDocumentWithDelegate_CdidAutosaveSelector_CcontextInfo_C(NSDocument *_self, id delegate, SEL didAutosaveSelector, void *contextInfo);

// method '-[NSDocument autosavedContentsFileURL]'
NSURL* _IM_NSDocument_autosavedContentsFileURL(NSDocument *_self);

// method '-[NSDocument autosavingFileType]'
NSString* _IM_NSDocument_autosavingFileType(NSDocument *_self);

// method '-[NSDocument canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:]'
void _IM_NSDocument_canCloseDocumentWithDelegate_CshouldCloseSelector_CcontextInfo_C(NSDocument *_self, id delegate, SEL shouldCloseSelector, void *contextInfo);

// method '-[NSDocument close]'
void _IM_NSDocument_close(NSDocument *_self);

// method '-[NSDocument dataOfType:error:]'
id _IM_NSDocument_dataOfType_Cerror_C(NSDocument *_self, NSString* typeName, id *outError);

// method '-[NSDocument dataRepresentationOfType:]'
id _IM_NSDocument_dataRepresentationOfType_C(NSDocument *_self, NSString* type);

// method '-[NSDocument displayName]'
NSString* _IM_NSDocument_displayName(NSDocument *_self);

// method '-[NSDocument fileAttributesToWriteToFile:ofType:saveOperation:]'
id _IM_NSDocument_fileAttributesToWriteToFile_CofType_CsaveOperation_C(NSDocument *_self, NSString* fullDocumentPath, NSString* documentTypeName, int saveOperationType);

// method '-[NSDocument fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:]'
id _IM_NSDocument_fileAttributesToWriteToURL_CofType_CforSaveOperation_CoriginalContentsURL_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, int saveOperation, NSURL* absoluteOriginalContentsURL, id *outError);

// method '-[NSDocument fileModificationDate]'
id _IM_NSDocument_fileModificationDate(NSDocument *_self);

// method '-[NSDocument fileName]'
NSString* _IM_NSDocument_fileName(NSDocument *_self);

// method '-[NSDocument fileNameExtensionWasHiddenInLastRunSavePanel]'
BOOL _IM_NSDocument_fileNameExtensionWasHiddenInLastRunSavePanel(NSDocument *_self);

// method '-[NSDocument fileType]'
NSString* _IM_NSDocument_fileType(NSDocument *_self);

// method '-[NSDocument fileTypeFromLastRunSavePanel]'
NSString* _IM_NSDocument_fileTypeFromLastRunSavePanel(NSDocument *_self);

// method '-[NSDocument fileURL]'
NSURL* _IM_NSDocument_fileURL(NSDocument *_self);

// method '-[NSDocument fileWrapperOfType:error:]'
NSFileWrapper* _IM_NSDocument_fileWrapperOfType_Cerror_C(NSDocument *_self, NSString* typeName, id *outError);

// method '-[NSDocument fileWrapperRepresentationOfType:]'
NSFileWrapper* _IM_NSDocument_fileWrapperRepresentationOfType_C(NSDocument *_self, NSString* type);

// method '-[NSDocument handleCloseScriptCommand:]'
id _IM_NSDocument_handleCloseScriptCommand_C(NSDocument *_self, id command);

// method '-[NSDocument handlePrintScriptCommand:]'
id _IM_NSDocument_handlePrintScriptCommand_C(NSDocument *_self, id command);

// method '-[NSDocument handleSaveScriptCommand:]'
id _IM_NSDocument_handleSaveScriptCommand_C(NSDocument *_self, id command);

// method '-[NSDocument hasUnautosavedChanges]'
BOOL _IM_NSDocument_hasUnautosavedChanges(NSDocument *_self);

// method '-[NSDocument hasUndoManager]'
BOOL _IM_NSDocument_hasUndoManager(NSDocument *_self);

// method '-[NSDocument init]'
NSDocument *_IM_NSDocument_init(NSDocument *_self);

// method '-[NSDocument initForURL:withContentsOfURL:ofType:error:]'
NSDocument *_IM_NSDocument_initForURL_CwithContentsOfURL_CofType_Cerror_C(NSDocument *_self, NSURL* absoluteDocumentURL, NSURL* absoluteDocumentContentsURL, NSString* typeName, id *outError);

// method '-[NSDocument initWithContentsOfFile:ofType:]'
NSDocument *_IM_NSDocument_initWithContentsOfFile_CofType_C(NSDocument *_self, NSString* absolutePath, NSString* typeName);

// method '-[NSDocument initWithContentsOfURL:ofType:]'
NSDocument *_IM_NSDocument_initWithContentsOfURL_CofType_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName);

// method '-[NSDocument initWithContentsOfURL:ofType:error:]'
NSDocument *_IM_NSDocument_initWithContentsOfURL_CofType_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, id *outError);

// method '-[NSDocument initWithType:error:]'
NSDocument *_IM_NSDocument_initWithType_Cerror_C(NSDocument *_self, NSString* typeName, id *outError);

// method '-[NSDocument isDocumentEdited]'
BOOL _IM_NSDocument_isDocumentEdited(NSDocument *_self);

// method '+[NSDocument isNativeType:]'
BOOL _CM_NSDocument_isNativeType_C(Class _class, NSString* type);

// method '-[NSDocument keepBackupFile]'
BOOL _IM_NSDocument_keepBackupFile(NSDocument *_self);

// method '-[NSDocument lastComponentOfFileName]'
NSString* _IM_NSDocument_lastComponentOfFileName(NSDocument *_self);

// method '-[NSDocument loadDataRepresentation:ofType:]'
BOOL _IM_NSDocument_loadDataRepresentation_CofType_C(NSDocument *_self, id data, NSString* type);

// method '-[NSDocument loadFileWrapperRepresentation:ofType:]'
BOOL _IM_NSDocument_loadFileWrapperRepresentation_CofType_C(NSDocument *_self, NSFileWrapper* wrapper, NSString* type);

// method '-[NSDocument makeWindowControllers]'
void _IM_NSDocument_makeWindowControllers(NSDocument *_self);

// method '-[NSDocument objectSpecifier]'
id _IM_NSDocument_objectSpecifier(NSDocument *_self);

// method '-[NSDocument preparePageLayout:]'
BOOL _IM_NSDocument_preparePageLayout_C(NSDocument *_self, NSPageLayout* pageLayout);

// method '-[NSDocument prepareSavePanel:]'
BOOL _IM_NSDocument_prepareSavePanel_C(NSDocument *_self, NSSavePanel* savePanel);

// method '-[NSDocument presentError:]'
BOOL _IM_NSDocument_presentError_C(NSDocument *_self, id error);

// method '-[NSDocument presentError:modalForWindow:delegate:didPresentSelector:contextInfo:]'
void _IM_NSDocument_presentError_CmodalForWindow_Cdelegate_CdidPresentSelector_CcontextInfo_C(NSDocument *_self, id error, NSWindow* window, id delegate, SEL didPresentSelector, void *contextInfo);

// method '-[NSDocument printDocument:]'
void _IM_NSDocument_printDocument_C(NSDocument *_self, id sender);

// method '-[NSDocument printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:]'
void _IM_NSDocument_printDocumentWithSettings_CshowPrintPanel_Cdelegate_CdidPrintSelector_CcontextInfo_C(NSDocument *_self, id printSettings, BOOL showPrintPanel, id delegate, SEL didPrintSelector, void *contextInfo);

// method '-[NSDocument printInfo]'
NSPrintInfo* _IM_NSDocument_printInfo(NSDocument *_self);

// method '-[NSDocument printOperationWithSettings:error:]'
NSPrintOperation* _IM_NSDocument_printOperationWithSettings_Cerror_C(NSDocument *_self, id printSettings, id *outError);

// method '-[NSDocument printShowingPrintPanel:]'
void _IM_NSDocument_printShowingPrintPanel_C(NSDocument *_self, BOOL flag);

// method '-[NSDocument readFromData:ofType:error:]'
BOOL _IM_NSDocument_readFromData_CofType_Cerror_C(NSDocument *_self, id data, NSString* typeName, id *outError);

// method '-[NSDocument readFromFile:ofType:]'
BOOL _IM_NSDocument_readFromFile_CofType_C(NSDocument *_self, NSString* fileName, NSString* type);

// method '-[NSDocument readFromFileWrapper:ofType:error:]'
BOOL _IM_NSDocument_readFromFileWrapper_CofType_Cerror_C(NSDocument *_self, NSFileWrapper* fileWrapper, NSString* typeName, id *outError);

// method '-[NSDocument readFromURL:ofType:]'
BOOL _IM_NSDocument_readFromURL_CofType_C(NSDocument *_self, NSURL* url, NSString* type);

// method '-[NSDocument readFromURL:ofType:error:]'
BOOL _IM_NSDocument_readFromURL_CofType_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, id *outError);

// method '+[NSDocument readableTypes]'
id _CM_NSDocument_readableTypes(Class _class);

// method '-[NSDocument removeWindowController:]'
void _IM_NSDocument_removeWindowController_C(NSDocument *_self, NSWindowController* windowController);

// method '-[NSDocument revertDocumentToSaved:]'
void _IM_NSDocument_revertDocumentToSaved_C(NSDocument *_self, id sender);

// method '-[NSDocument revertToContentsOfURL:ofType:error:]'
BOOL _IM_NSDocument_revertToContentsOfURL_CofType_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, id *outError);

// method '-[NSDocument revertToSavedFromFile:ofType:]'
BOOL _IM_NSDocument_revertToSavedFromFile_CofType_C(NSDocument *_self, NSString* fileName, NSString* type);

// method '-[NSDocument revertToSavedFromURL:ofType:]'
BOOL _IM_NSDocument_revertToSavedFromURL_CofType_C(NSDocument *_self, NSURL* url, NSString* type);

// method '-[NSDocument runModalPageLayoutWithPrintInfo:]'
int _IM_NSDocument_runModalPageLayoutWithPrintInfo_C(NSDocument *_self, NSPrintInfo* printInfo);

// method '-[NSDocument runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:]'
void _IM_NSDocument_runModalPageLayoutWithPrintInfo_Cdelegate_CdidRunSelector_CcontextInfo_C(NSDocument *_self, NSPrintInfo* printInfo, id delegate, SEL didRunSelector, void *contextInfo);

// method '-[NSDocument runModalPrintOperation:delegate:didRunSelector:contextInfo:]'
void _IM_NSDocument_runModalPrintOperation_Cdelegate_CdidRunSelector_CcontextInfo_C(NSDocument *_self, NSPrintOperation* printOperation, id delegate, SEL didRunSelector, void *contextInfo);

// method '-[NSDocument runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:]'
void _IM_NSDocument_runModalSavePanelForSaveOperation_Cdelegate_CdidSaveSelector_CcontextInfo_C(NSDocument *_self, int saveOperation, id delegate, SEL didSaveSelector, void *contextInfo);

// method '-[NSDocument runPageLayout:]'
void _IM_NSDocument_runPageLayout_C(NSDocument *_self, id sender);

// method '-[NSDocument saveDocument:]'
void _IM_NSDocument_saveDocument_C(NSDocument *_self, id sender);

// method '-[NSDocument saveDocumentAs:]'
void _IM_NSDocument_saveDocumentAs_C(NSDocument *_self, id sender);

// method '-[NSDocument saveDocumentTo:]'
void _IM_NSDocument_saveDocumentTo_C(NSDocument *_self, id sender);

// method '-[NSDocument saveDocumentWithDelegate:didSaveSelector:contextInfo:]'
void _IM_NSDocument_saveDocumentWithDelegate_CdidSaveSelector_CcontextInfo_C(NSDocument *_self, id delegate, SEL didSaveSelector, void *contextInfo);

// method '-[NSDocument saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:]'
void _IM_NSDocument_saveToFile_CsaveOperation_Cdelegate_CdidSaveSelector_CcontextInfo_C(NSDocument *_self, NSString* fileName, int saveOperation, id delegate, SEL didSaveSelector, void *contextInfo);

// method '-[NSDocument saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:]'
void _IM_NSDocument_saveToURL_CofType_CforSaveOperation_Cdelegate_CdidSaveSelector_CcontextInfo_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, int saveOperation, id delegate, SEL didSaveSelector, void *contextInfo);

// method '-[NSDocument saveToURL:ofType:forSaveOperation:error:]'
BOOL _IM_NSDocument_saveToURL_CofType_CforSaveOperation_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, int saveOperation, id *outError);

// method '-[NSDocument setAutosavedContentsFileURL:]'
void _IM_NSDocument_setAutosavedContentsFileURL_C(NSDocument *_self, NSURL* absoluteURL);

// method '-[NSDocument setFileModificationDate:]'
void _IM_NSDocument_setFileModificationDate_C(NSDocument *_self, id modificationDate);

// method '-[NSDocument setFileName:]'
void _IM_NSDocument_setFileName_C(NSDocument *_self, NSString* fileName);

// method '-[NSDocument setFileType:]'
void _IM_NSDocument_setFileType_C(NSDocument *_self, NSString* typeName);

// method '-[NSDocument setFileURL:]'
void _IM_NSDocument_setFileURL_C(NSDocument *_self, NSURL* absoluteURL);

// method '-[NSDocument setHasUndoManager:]'
void _IM_NSDocument_setHasUndoManager_C(NSDocument *_self, BOOL flag);

// method '-[NSDocument setLastComponentOfFileName:]'
void _IM_NSDocument_setLastComponentOfFileName_C(NSDocument *_self, NSString* str);

// method '-[NSDocument setPrintInfo:]'
void _IM_NSDocument_setPrintInfo_C(NSDocument *_self, NSPrintInfo* printInfo);

// method '-[NSDocument setUndoManager:]'
void _IM_NSDocument_setUndoManager_C(NSDocument *_self, id undoManager);

// method '-[NSDocument setWindow:]'
void _IM_NSDocument_setWindow_C(NSDocument *_self, NSWindow* window);

// method '-[NSDocument shouldChangePrintInfo:]'
BOOL _IM_NSDocument_shouldChangePrintInfo_C(NSDocument *_self, NSPrintInfo* newPrintInfo);

// method '-[NSDocument shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:]'
void _IM_NSDocument_shouldCloseWindowController_Cdelegate_CshouldCloseSelector_CcontextInfo_C(NSDocument *_self, NSWindowController* windowController, id delegate, SEL callback, void *contextInfo);

// method '-[NSDocument shouldRunSavePanelWithAccessoryView]'
BOOL _IM_NSDocument_shouldRunSavePanelWithAccessoryView(NSDocument *_self);

// method '-[NSDocument showWindows]'
void _IM_NSDocument_showWindows(NSDocument *_self);

// method '-[NSDocument undoManager]'
id _IM_NSDocument_undoManager(NSDocument *_self);

// method '-[NSDocument updateChangeCount:]'
void _IM_NSDocument_updateChangeCount_C(NSDocument *_self, int change);

// method '-[NSDocument validateUserInterfaceItem:]'
BOOL _IM_NSDocument_validateUserInterfaceItem_C(NSDocument *_self, id anItem);

// method '-[NSDocument willPresentError:]'
id _IM_NSDocument_willPresentError_C(NSDocument *_self, id error);

// method '-[NSDocument windowControllerDidLoadNib:]'
void _IM_NSDocument_windowControllerDidLoadNib_C(NSDocument *_self, NSWindowController* windowController);

// method '-[NSDocument windowControllerWillLoadNib:]'
void _IM_NSDocument_windowControllerWillLoadNib_C(NSDocument *_self, NSWindowController* windowController);

// method '-[NSDocument windowControllers]'
id _IM_NSDocument_windowControllers(NSDocument *_self);

// method '-[NSDocument windowForSheet]'
NSWindow* _IM_NSDocument_windowForSheet(NSDocument *_self);

// method '-[NSDocument windowNibName]'
NSString* _IM_NSDocument_windowNibName(NSDocument *_self);

// method '+[NSDocument writableTypes]'
id _CM_NSDocument_writableTypes(Class _class);

// method '-[NSDocument writableTypesForSaveOperation:]'
id _IM_NSDocument_writableTypesForSaveOperation_C(NSDocument *_self, int saveOperation);

// method '-[NSDocument writeSafelyToURL:ofType:forSaveOperation:error:]'
BOOL _IM_NSDocument_writeSafelyToURL_CofType_CforSaveOperation_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, int saveOperation, id *outError);

// method '-[NSDocument writeToFile:ofType:]'
BOOL _IM_NSDocument_writeToFile_CofType_C(NSDocument *_self, NSString* fileName, NSString* type);

// method '-[NSDocument writeToFile:ofType:originalFile:saveOperation:]'
BOOL _IM_NSDocument_writeToFile_CofType_CoriginalFile_CsaveOperation_C(NSDocument *_self, NSString* fullDocumentPath, NSString* documentTypeName, NSString* fullOriginalDocumentPath, int saveOperationType);

// method '-[NSDocument writeToURL:ofType:]'
BOOL _IM_NSDocument_writeToURL_CofType_C(NSDocument *_self, NSURL* url, NSString* type);

// method '-[NSDocument writeToURL:ofType:error:]'
BOOL _IM_NSDocument_writeToURL_CofType_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, id *outError);

// method '-[NSDocument writeToURL:ofType:forSaveOperation:originalContentsURL:error:]'
BOOL _IM_NSDocument_writeToURL_CofType_CforSaveOperation_CoriginalContentsURL_Cerror_C(NSDocument *_self, NSURL* absoluteURL, NSString* typeName, int saveOperation, NSURL* absoluteOriginalContentsURL, id *outError);

// method '-[NSDocument writeWithBackupToFile:ofType:saveOperation:]'
BOOL _IM_NSDocument_writeWithBackupToFile_CofType_CsaveOperation_C(NSDocument *_self, NSString* fullDocumentPath, NSString* documentTypeName, int saveOperationType);

// method '-[NSDocumentController URLsFromRunningOpenPanel]'
id _IM_NSDocumentController_URLsFromRunningOpenPanel(NSDocumentController *_self);

// method '-[NSDocumentController addDocument:]'
void _IM_NSDocumentController_addDocument_C(NSDocumentController *_self, NSDocument* document);

// method '-[NSDocumentController autosavingDelay]'
double _IM_NSDocumentController_autosavingDelay(NSDocumentController *_self);

// method '-[NSDocumentController clearRecentDocuments:]'
void _IM_NSDocumentController_clearRecentDocuments_C(NSDocumentController *_self, id sender);

// method '-[NSDocumentController closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:]'
void _IM_NSDocumentController_closeAllDocumentsWithDelegate_CdidCloseAllSelector_CcontextInfo_C(NSDocumentController *_self, id delegate, SEL didCloseAllSelector, void *contextInfo);

// method '-[NSDocumentController currentDirectory]'
NSString* _IM_NSDocumentController_currentDirectory(NSDocumentController *_self);

// method '-[NSDocumentController currentDocument]'
id _IM_NSDocumentController_currentDocument(NSDocumentController *_self);

// method '-[NSDocumentController defaultType]'
NSString* _IM_NSDocumentController_defaultType(NSDocumentController *_self);

// method '-[NSDocumentController displayNameForType:]'
NSString* _IM_NSDocumentController_displayNameForType_C(NSDocumentController *_self, NSString* typeName);

// method '-[NSDocumentController documentClassForType:]'
Class _IM_NSDocumentController_documentClassForType_C(NSDocumentController *_self, NSString* typeName);

// method '-[NSDocumentController documentClassNames]'
id _IM_NSDocumentController_documentClassNames(NSDocumentController *_self);

// method '-[NSDocumentController documentForFileName:]'
id _IM_NSDocumentController_documentForFileName_C(NSDocumentController *_self, NSString* fileName);

// method '-[NSDocumentController documentForURL:]'
id _IM_NSDocumentController_documentForURL_C(NSDocumentController *_self, NSURL* absoluteURL);

// method '-[NSDocumentController documentForWindow:]'
id _IM_NSDocumentController_documentForWindow_C(NSDocumentController *_self, NSWindow* window);

// method '-[NSDocumentController documents]'
id _IM_NSDocumentController_documents(NSDocumentController *_self);

// method '-[NSDocumentController fileExtensionsFromType:]'
id _IM_NSDocumentController_fileExtensionsFromType_C(NSDocumentController *_self, NSString* typeName);

// method '-[NSDocumentController fileNamesFromRunningOpenPanel]'
id _IM_NSDocumentController_fileNamesFromRunningOpenPanel(NSDocumentController *_self);

// method '-[NSDocumentController hasEditedDocuments]'
BOOL _IM_NSDocumentController_hasEditedDocuments(NSDocumentController *_self);

// method '-[NSDocumentController init]'
NSDocumentController *_IM_NSDocumentController_init(NSDocumentController *_self);

// method '-[NSDocumentController makeDocumentForURL:withContentsOfURL:ofType:error:]'
id _IM_NSDocumentController_makeDocumentForURL_CwithContentsOfURL_CofType_Cerror_C(NSDocumentController *_self, NSURL* absoluteDocumentURL, NSURL* absoluteDocumentContentsURL, NSString* typeName, id *outError);

// method '-[NSDocumentController makeDocumentWithContentsOfFile:ofType:]'
id _IM_NSDocumentController_makeDocumentWithContentsOfFile_CofType_C(NSDocumentController *_self, NSString* fileName, NSString* type);

// method '-[NSDocumentController makeDocumentWithContentsOfURL:ofType:]'
id _IM_NSDocumentController_makeDocumentWithContentsOfURL_CofType_C(NSDocumentController *_self, NSURL* url, NSString* type);

// method '-[NSDocumentController makeDocumentWithContentsOfURL:ofType:error:]'
id _IM_NSDocumentController_makeDocumentWithContentsOfURL_CofType_Cerror_C(NSDocumentController *_self, NSURL* absoluteURL, NSString* typeName, id *outError);

// method '-[NSDocumentController makeUntitledDocumentOfType:]'
id _IM_NSDocumentController_makeUntitledDocumentOfType_C(NSDocumentController *_self, NSString* type);

// method '-[NSDocumentController makeUntitledDocumentOfType:error:]'
id _IM_NSDocumentController_makeUntitledDocumentOfType_Cerror_C(NSDocumentController *_self, NSString* typeName, id *outError);

// method '-[NSDocumentController maximumRecentDocumentCount]'
unsigned int _IM_NSDocumentController_maximumRecentDocumentCount(NSDocumentController *_self);

// method '-[NSDocumentController newDocument:]'
void _IM_NSDocumentController_newDocument_C(NSDocumentController *_self, id sender);

// method '-[NSDocumentController noteNewRecentDocument:]'
void _IM_NSDocumentController_noteNewRecentDocument_C(NSDocumentController *_self, NSDocument* document);

// method '-[NSDocumentController noteNewRecentDocumentURL:]'
void _IM_NSDocumentController_noteNewRecentDocumentURL_C(NSDocumentController *_self, NSURL* absoluteURL);

// method '-[NSDocumentController openDocument:]'
void _IM_NSDocumentController_openDocument_C(NSDocumentController *_self, id sender);

// method '-[NSDocumentController openDocumentWithContentsOfFile:display:]'
id _IM_NSDocumentController_openDocumentWithContentsOfFile_Cdisplay_C(NSDocumentController *_self, NSString* fileName, BOOL display);

// method '-[NSDocumentController openDocumentWithContentsOfURL:display:]'
id _IM_NSDocumentController_openDocumentWithContentsOfURL_Cdisplay_C(NSDocumentController *_self, NSURL* url, BOOL display);

// method '-[NSDocumentController openDocumentWithContentsOfURL:display:error:]'
id _IM_NSDocumentController_openDocumentWithContentsOfURL_Cdisplay_Cerror_C(NSDocumentController *_self, NSURL* absoluteURL, BOOL displayDocument, id *outError);

// method '-[NSDocumentController openUntitledDocumentAndDisplay:error:]'
id _IM_NSDocumentController_openUntitledDocumentAndDisplay_Cerror_C(NSDocumentController *_self, BOOL displayDocument, id *outError);

// method '-[NSDocumentController openUntitledDocumentOfType:display:]'
id _IM_NSDocumentController_openUntitledDocumentOfType_Cdisplay_C(NSDocumentController *_self, NSString* type, BOOL display);

// method '-[NSDocumentController presentError:]'
BOOL _IM_NSDocumentController_presentError_C(NSDocumentController *_self, id error);

// method '-[NSDocumentController presentError:modalForWindow:delegate:didPresentSelector:contextInfo:]'
void _IM_NSDocumentController_presentError_CmodalForWindow_Cdelegate_CdidPresentSelector_CcontextInfo_C(NSDocumentController *_self, id error, NSWindow* window, id delegate, SEL didPresentSelector, void *contextInfo);

// method '-[NSDocumentController recentDocumentURLs]'
id _IM_NSDocumentController_recentDocumentURLs(NSDocumentController *_self);

// method '-[NSDocumentController removeDocument:]'
void _IM_NSDocumentController_removeDocument_C(NSDocumentController *_self, NSDocument* document);

// method '-[NSDocumentController reopenDocumentForURL:withContentsOfURL:error:]'
BOOL _IM_NSDocumentController_reopenDocumentForURL_CwithContentsOfURL_Cerror_C(NSDocumentController *_self, NSURL* absoluteDocumentURL, NSURL* absoluteDocumentContentsURL, id *outError);

// method '-[NSDocumentController reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:]'
void _IM_NSDocumentController_reviewUnsavedDocumentsWithAlertTitle_Ccancellable_Cdelegate_CdidReviewAllSelector_CcontextInfo_C(NSDocumentController *_self, NSString* title, BOOL cancellable, id delegate, SEL didReviewAllSelector, void *contextInfo);

// method '-[NSDocumentController runModalOpenPanel:forTypes:]'
int _IM_NSDocumentController_runModalOpenPanel_CforTypes_C(NSDocumentController *_self, NSOpenPanel* openPanel, id fileNameExtensionsAndHFSFileTypes);

// method '-[NSDocumentController saveAllDocuments:]'
void _IM_NSDocumentController_saveAllDocuments_C(NSDocumentController *_self, id sender);

// method '-[NSDocumentController setAutosavingDelay:]'
void _IM_NSDocumentController_setAutosavingDelay_C(NSDocumentController *_self, double autosavingDelay);

// method '-[NSDocumentController setShouldCreateUI:]'
void _IM_NSDocumentController_setShouldCreateUI_C(NSDocumentController *_self, BOOL flag);

// method '+[NSDocumentController sharedDocumentController]'
id _CM_NSDocumentController_sharedDocumentController(Class _class);

// method '-[NSDocumentController shouldCreateUI]'
BOOL _IM_NSDocumentController_shouldCreateUI(NSDocumentController *_self);

// method '-[NSDocumentController typeForContentsOfURL:error:]'
NSString* _IM_NSDocumentController_typeForContentsOfURL_Cerror_C(NSDocumentController *_self, NSURL* inAbsoluteURL, id *outError);

// method '-[NSDocumentController typeFromFileExtension:]'
NSString* _IM_NSDocumentController_typeFromFileExtension_C(NSDocumentController *_self, NSString* fileNameExtensionOrHFSFileType);

// method '-[NSDocumentController validateUserInterfaceItem:]'
BOOL _IM_NSDocumentController_validateUserInterfaceItem_C(NSDocumentController *_self, id anItem);

// method '-[NSDocumentController willPresentError:]'
id _IM_NSDocumentController_willPresentError_C(NSDocumentController *_self, id error);

// method '-[NSDrawer close]'
void _IM_NSDrawer_close(NSDrawer *_self);

// method '-[NSDrawer close:]'
void _IM_NSDrawer_close_C(NSDrawer *_self, id sender);

// method '-[NSDrawer contentSize]'
struct _NSSize _IM_NSDrawer_contentSize(NSDrawer *_self);

// method '-[NSDrawer contentView]'
NSView* _IM_NSDrawer_contentView(NSDrawer *_self);

// method '-[NSDrawer delegate]'
id _IM_NSDrawer_delegate(NSDrawer *_self);

// method '-[NSDrawer edge]'
int _IM_NSDrawer_edge(NSDrawer *_self);

// method '-[NSDrawer initWithContentSize:preferredEdge:]'
NSDrawer *_IM_NSDrawer_initWithContentSize_CpreferredEdge_C(NSDrawer *_self, struct _NSSize contentSize, int edge);

// method '-[NSDrawer leadingOffset]'
float _IM_NSDrawer_leadingOffset(NSDrawer *_self);

// method '-[NSDrawer maxContentSize]'
struct _NSSize _IM_NSDrawer_maxContentSize(NSDrawer *_self);

// method '-[NSDrawer minContentSize]'
struct _NSSize _IM_NSDrawer_minContentSize(NSDrawer *_self);

// method '-[NSDrawer open]'
void _IM_NSDrawer_open(NSDrawer *_self);

// method '-[NSDrawer open:]'
void _IM_NSDrawer_open_C(NSDrawer *_self, id sender);

// method '-[NSDrawer openOnEdge:]'
void _IM_NSDrawer_openOnEdge_C(NSDrawer *_self, int edge);

// method '-[NSDrawer parentWindow]'
NSWindow* _IM_NSDrawer_parentWindow(NSDrawer *_self);

// method '-[NSDrawer preferredEdge]'
int _IM_NSDrawer_preferredEdge(NSDrawer *_self);

// method '-[NSDrawer setContentSize:]'
void _IM_NSDrawer_setContentSize_C(NSDrawer *_self, struct _NSSize size);

// method '-[NSDrawer setContentView:]'
void _IM_NSDrawer_setContentView_C(NSDrawer *_self, NSView* aView);

// method '-[NSDrawer setDelegate:]'
void _IM_NSDrawer_setDelegate_C(NSDrawer *_self, id anObject);

// method '-[NSDrawer setLeadingOffset:]'
void _IM_NSDrawer_setLeadingOffset_C(NSDrawer *_self, float offset);

// method '-[NSDrawer setMaxContentSize:]'
void _IM_NSDrawer_setMaxContentSize_C(NSDrawer *_self, struct _NSSize size);

// method '-[NSDrawer setMinContentSize:]'
void _IM_NSDrawer_setMinContentSize_C(NSDrawer *_self, struct _NSSize size);

// method '-[NSDrawer setParentWindow:]'
void _IM_NSDrawer_setParentWindow_C(NSDrawer *_self, NSWindow* parent);

// method '-[NSDrawer setPreferredEdge:]'
void _IM_NSDrawer_setPreferredEdge_C(NSDrawer *_self, int edge);

// method '-[NSDrawer setTrailingOffset:]'
void _IM_NSDrawer_setTrailingOffset_C(NSDrawer *_self, float offset);

// method '-[NSDrawer state]'
int _IM_NSDrawer_state(NSDrawer *_self);

// method '-[NSDrawer toggle:]'
void _IM_NSDrawer_toggle_C(NSDrawer *_self, id sender);

// method '-[NSDrawer trailingOffset]'
float _IM_NSDrawer_trailingOffset(NSDrawer *_self);

// method '-[NSEPSImageRep EPSRepresentation]'
id _IM_NSEPSImageRep_EPSRepresentation(NSEPSImageRep *_self);

// method '-[NSEPSImageRep boundingBox]'
struct _NSRect _IM_NSEPSImageRep_boundingBox(NSEPSImageRep *_self);

// method '+[NSEPSImageRep imageRepWithData:]'
id _CM_NSEPSImageRep_imageRepWithData_C(Class _class, id epsData);

// method '-[NSEPSImageRep initWithData:]'
NSEPSImageRep *_IM_NSEPSImageRep_initWithData_C(NSEPSImageRep *_self, id epsData);

// method '-[NSEPSImageRep prepareGState]'
void _IM_NSEPSImageRep_prepareGState(NSEPSImageRep *_self);

// method '-[NSEvent absoluteX]'
int _IM_NSEvent_absoluteX(NSEvent *_self);

// method '-[NSEvent absoluteY]'
int _IM_NSEvent_absoluteY(NSEvent *_self);

// method '-[NSEvent absoluteZ]'
int _IM_NSEvent_absoluteZ(NSEvent *_self);

// method '-[NSEvent buttonMask]'
unsigned int _IM_NSEvent_buttonMask(NSEvent *_self);

// method '-[NSEvent buttonNumber]'
int _IM_NSEvent_buttonNumber(NSEvent *_self);

// method '-[NSEvent capabilityMask]'
unsigned int _IM_NSEvent_capabilityMask(NSEvent *_self);

// method '-[NSEvent characters]'
NSString* _IM_NSEvent_characters(NSEvent *_self);

// method '-[NSEvent charactersIgnoringModifiers]'
NSString* _IM_NSEvent_charactersIgnoringModifiers(NSEvent *_self);

// method '-[NSEvent clickCount]'
int _IM_NSEvent_clickCount(NSEvent *_self);

// method '-[NSEvent context]'
NSGraphicsContext* _IM_NSEvent_context(NSEvent *_self);

// method '-[NSEvent data1]'
int _IM_NSEvent_data1(NSEvent *_self);

// method '-[NSEvent data2]'
int _IM_NSEvent_data2(NSEvent *_self);

// method '-[NSEvent deltaX]'
float _IM_NSEvent_deltaX(NSEvent *_self);

// method '-[NSEvent deltaY]'
float _IM_NSEvent_deltaY(NSEvent *_self);

// method '-[NSEvent deltaZ]'
float _IM_NSEvent_deltaZ(NSEvent *_self);

// method '-[NSEvent deviceID]'
unsigned int _IM_NSEvent_deviceID(NSEvent *_self);

// method '+[NSEvent enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:]'
NSEvent* _CM_NSEvent_enterExitEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_CeventNumber_CtrackingNumber_CuserData_C(Class _class, int type, struct _NSPoint location, unsigned int flags, double time, int wNum, NSGraphicsContext* context, int eNum, int tNum, void *data);

// method '-[NSEvent eventNumber]'
int _IM_NSEvent_eventNumber(NSEvent *_self);

// method '-[NSEvent isARepeat]'
BOOL _IM_NSEvent_isARepeat(NSEvent *_self);

// method '-[NSEvent isEnteringProximity]'
BOOL _IM_NSEvent_isEnteringProximity(NSEvent *_self);

// method '-[NSEvent keyCode]'
unsigned short _IM_NSEvent_keyCode(NSEvent *_self);

// method '+[NSEvent keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:]'
NSEvent* _CM_NSEvent_keyEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_Ccharacters_CcharactersIgnoringModifiers_CisARepeat_CkeyCode_C(Class _class, int type, struct _NSPoint location, unsigned int flags, double time, int wNum, NSGraphicsContext* context, NSString* keys, NSString* ukeys, BOOL flag, unsigned short code);

// method '-[NSEvent locationInWindow]'
struct _NSPoint _IM_NSEvent_locationInWindow(NSEvent *_self);

// method '-[NSEvent modifierFlags]'
unsigned int _IM_NSEvent_modifierFlags(NSEvent *_self);

// method '+[NSEvent mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:]'
NSEvent* _CM_NSEvent_mouseEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_CeventNumber_CclickCount_Cpressure_C(Class _class, int type, struct _NSPoint location, unsigned int flags, double time, int wNum, NSGraphicsContext* context, int eNum, int cNum, float pressure);

// method '+[NSEvent mouseLocation]'
struct _NSPoint _CM_NSEvent_mouseLocation(Class _class);

// method '+[NSEvent otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:]'
NSEvent* _CM_NSEvent_otherEventWithType_Clocation_CmodifierFlags_Ctimestamp_CwindowNumber_Ccontext_Csubtype_Cdata1_Cdata2_C(Class _class, int type, struct _NSPoint location, unsigned int flags, double time, int wNum, NSGraphicsContext* context, short subtype, int d1, int d2);

// method '-[NSEvent pointingDeviceID]'
unsigned int _IM_NSEvent_pointingDeviceID(NSEvent *_self);

// method '-[NSEvent pointingDeviceSerialNumber]'
unsigned int _IM_NSEvent_pointingDeviceSerialNumber(NSEvent *_self);

// method '-[NSEvent pointingDeviceType]'
int _IM_NSEvent_pointingDeviceType(NSEvent *_self);

// method '-[NSEvent pressure]'
float _IM_NSEvent_pressure(NSEvent *_self);

// method '-[NSEvent rotation]'
float _IM_NSEvent_rotation(NSEvent *_self);

// method '+[NSEvent startPeriodicEventsAfterDelay:withPeriod:]'
void _CM_NSEvent_startPeriodicEventsAfterDelay_CwithPeriod_C(Class _class, double delay, double period);

// method '+[NSEvent stopPeriodicEvents]'
void _CM_NSEvent_stopPeriodicEvents(Class _class);

// method '-[NSEvent subtype]'
short _IM_NSEvent_subtype(NSEvent *_self);

// method '-[NSEvent systemTabletID]'
unsigned int _IM_NSEvent_systemTabletID(NSEvent *_self);

// method '-[NSEvent tabletID]'
unsigned int _IM_NSEvent_tabletID(NSEvent *_self);

// method '-[NSEvent tangentialPressure]'
float _IM_NSEvent_tangentialPressure(NSEvent *_self);

// method '-[NSEvent tilt]'
struct _NSPoint _IM_NSEvent_tilt(NSEvent *_self);

// method '-[NSEvent timestamp]'
double _IM_NSEvent_timestamp(NSEvent *_self);

// method '-[NSEvent trackingNumber]'
int _IM_NSEvent_trackingNumber(NSEvent *_self);

// method '-[NSEvent type]'
int _IM_NSEvent_type(NSEvent *_self);

// method '-[NSEvent uniqueID]'
unsigned long long _IM_NSEvent_uniqueID(NSEvent *_self);

// method '-[NSEvent userData]'
void *_IM_NSEvent_userData(NSEvent *_self);

// method '-[NSEvent vendorDefined]'
id _IM_NSEvent_vendorDefined(NSEvent *_self);

// method '-[NSEvent vendorID]'
unsigned int _IM_NSEvent_vendorID(NSEvent *_self);

// method '-[NSEvent vendorPointingDeviceType]'
unsigned int _IM_NSEvent_vendorPointingDeviceType(NSEvent *_self);

// method '-[NSEvent window]'
NSWindow* _IM_NSEvent_window(NSEvent *_self);

// method '-[NSEvent windowNumber]'
int _IM_NSEvent_windowNumber(NSEvent *_self);

// method '-[NSFileWrapper addFileWithPath:]'
NSString* _IM_NSFileWrapper_addFileWithPath_C(NSFileWrapper *_self, NSString* path);

// method '-[NSFileWrapper addFileWrapper:]'
NSString* _IM_NSFileWrapper_addFileWrapper_C(NSFileWrapper *_self, NSFileWrapper* doc);

// method '-[NSFileWrapper addRegularFileWithContents:preferredFilename:]'
NSString* _IM_NSFileWrapper_addRegularFileWithContents_CpreferredFilename_C(NSFileWrapper *_self, id data, NSString* filename);

// method '-[NSFileWrapper addSymbolicLinkWithDestination:preferredFilename:]'
NSString* _IM_NSFileWrapper_addSymbolicLinkWithDestination_CpreferredFilename_C(NSFileWrapper *_self, NSString* path, NSString* filename);

// method '-[NSFileWrapper fileAttributes]'
id _IM_NSFileWrapper_fileAttributes(NSFileWrapper *_self);

// method '-[NSFileWrapper fileWrappers]'
id _IM_NSFileWrapper_fileWrappers(NSFileWrapper *_self);

// method '-[NSFileWrapper filename]'
NSString* _IM_NSFileWrapper_filename(NSFileWrapper *_self);

// method '-[NSFileWrapper icon]'
NSImage* _IM_NSFileWrapper_icon(NSFileWrapper *_self);

// method '-[NSFileWrapper initDirectoryWithFileWrappers:]'
NSFileWrapper *_IM_NSFileWrapper_initDirectoryWithFileWrappers_C(NSFileWrapper *_self, id docs);

// method '-[NSFileWrapper initRegularFileWithContents:]'
NSFileWrapper *_IM_NSFileWrapper_initRegularFileWithContents_C(NSFileWrapper *_self, id data);

// method '-[NSFileWrapper initSymbolicLinkWithDestination:]'
NSFileWrapper *_IM_NSFileWrapper_initSymbolicLinkWithDestination_C(NSFileWrapper *_self, NSString* path);

// method '-[NSFileWrapper initWithPath:]'
NSFileWrapper *_IM_NSFileWrapper_initWithPath_C(NSFileWrapper *_self, NSString* path);

// method '-[NSFileWrapper initWithSerializedRepresentation:]'
NSFileWrapper *_IM_NSFileWrapper_initWithSerializedRepresentation_C(NSFileWrapper *_self, id data);

// method '-[NSFileWrapper isDirectory]'
BOOL _IM_NSFileWrapper_isDirectory(NSFileWrapper *_self);

// method '-[NSFileWrapper isRegularFile]'
BOOL _IM_NSFileWrapper_isRegularFile(NSFileWrapper *_self);

// method '-[NSFileWrapper isSymbolicLink]'
BOOL _IM_NSFileWrapper_isSymbolicLink(NSFileWrapper *_self);

// method '-[NSFileWrapper keyForFileWrapper:]'
NSString* _IM_NSFileWrapper_keyForFileWrapper_C(NSFileWrapper *_self, NSFileWrapper* doc);

// method '-[NSFileWrapper needsToBeUpdatedFromPath:]'
BOOL _IM_NSFileWrapper_needsToBeUpdatedFromPath_C(NSFileWrapper *_self, NSString* path);

// method '-[NSFileWrapper preferredFilename]'
NSString* _IM_NSFileWrapper_preferredFilename(NSFileWrapper *_self);

// method '-[NSFileWrapper regularFileContents]'
id _IM_NSFileWrapper_regularFileContents(NSFileWrapper *_self);

// method '-[NSFileWrapper removeFileWrapper:]'
void _IM_NSFileWrapper_removeFileWrapper_C(NSFileWrapper *_self, NSFileWrapper* doc);

// method '-[NSFileWrapper serializedRepresentation]'
id _IM_NSFileWrapper_serializedRepresentation(NSFileWrapper *_self);

// method '-[NSFileWrapper setFileAttributes:]'
void _IM_NSFileWrapper_setFileAttributes_C(NSFileWrapper *_self, id attributes);

// method '-[NSFileWrapper setFilename:]'
void _IM_NSFileWrapper_setFilename_C(NSFileWrapper *_self, NSString* filename);

// method '-[NSFileWrapper setIcon:]'
void _IM_NSFileWrapper_setIcon_C(NSFileWrapper *_self, NSImage* icon);

// method '-[NSFileWrapper setPreferredFilename:]'
void _IM_NSFileWrapper_setPreferredFilename_C(NSFileWrapper *_self, NSString* filename);

// method '-[NSFileWrapper symbolicLinkDestination]'
NSString* _IM_NSFileWrapper_symbolicLinkDestination(NSFileWrapper *_self);

// method '-[NSFileWrapper updateFromPath:]'
BOOL _IM_NSFileWrapper_updateFromPath_C(NSFileWrapper *_self, NSString* path);

// method '-[NSFileWrapper writeToFile:atomically:updateFilenames:]'
BOOL _IM_NSFileWrapper_writeToFile_Catomically_CupdateFilenames_C(NSFileWrapper *_self, NSString* path, BOOL atomicFlag, BOOL updateFilenamesFlag);

// method '-[NSFont advancementForGlyph:]'
struct _NSSize _IM_NSFont_advancementForGlyph_C(NSFont *_self, unsigned int ag);

// method '-[NSFont ascender]'
float _IM_NSFont_ascender(NSFont *_self);

// method '+[NSFont boldSystemFontOfSize:]'
NSFont* _CM_NSFont_boldSystemFontOfSize_C(Class _class, float fontSize);

// method '-[NSFont boundingRectForFont]'
struct _NSRect _IM_NSFont_boundingRectForFont(NSFont *_self);

// method '-[NSFont boundingRectForGlyph:]'
struct _NSRect _IM_NSFont_boundingRectForGlyph_C(NSFont *_self, unsigned int aGlyph);

// method '-[NSFont capHeight]'
float _IM_NSFont_capHeight(NSFont *_self);

// method '+[NSFont controlContentFontOfSize:]'
NSFont* _CM_NSFont_controlContentFontOfSize_C(Class _class, float fontSize);

// method '-[NSFont coveredCharacterSet]'
id _IM_NSFont_coveredCharacterSet(NSFont *_self);

// method '-[NSFont descender]'
float _IM_NSFont_descender(NSFont *_self);

// method '-[NSFont displayName]'
NSString* _IM_NSFont_displayName(NSFont *_self);

// method '-[NSFont familyName]'
NSString* _IM_NSFont_familyName(NSFont *_self);

// method '-[NSFont fontDescriptor]'
NSFontDescriptor* _IM_NSFont_fontDescriptor(NSFont *_self);

// method '-[NSFont fontName]'
NSString* _IM_NSFont_fontName(NSFont *_self);

// method '+[NSFont fontWithDescriptor:size:]'
NSFont* _CM_NSFont_fontWithDescriptor_Csize_C(Class _class, NSFontDescriptor* fontDescriptor, float fontSize);

// method '+[NSFont fontWithDescriptor:textTransform:]'
NSFont* _CM_NSFont_fontWithDescriptor_CtextTransform_C(Class _class, NSFontDescriptor* fontDescriptor, NSAffineTransform* textTransform);

// method '+[NSFont fontWithName:matrix:]'
NSFont* _CM_NSFont_fontWithName_Cmatrix_C(Class _class, NSString* fontName, const float* fontMatrix);

// method '+[NSFont fontWithName:size:]'
NSFont* _CM_NSFont_fontWithName_Csize_C(Class _class, NSString* fontName, float fontSize);

// method '-[NSFont getAdvancements:forGlyphs:count:]'
void _IM_NSFont_getAdvancements_CforGlyphs_Ccount_C(NSFont *_self, struct _NSSize *advancements, const unsigned int* glyphs, unsigned int glyphCount);

// method '-[NSFont getBoundingRects:forGlyphs:count:]'
void _IM_NSFont_getBoundingRects_CforGlyphs_Ccount_C(NSFont *_self, struct _NSRect *bounds, const unsigned int* glyphs, unsigned int glyphCount);

// method '-[NSFont glyphWithName:]'
unsigned int _IM_NSFont_glyphWithName_C(NSFont *_self, NSString* aName);

// method '-[NSFont isFixedPitch]'
BOOL _IM_NSFont_isFixedPitch(NSFont *_self);

// method '-[NSFont italicAngle]'
float _IM_NSFont_italicAngle(NSFont *_self);

// method '+[NSFont labelFontOfSize:]'
NSFont* _CM_NSFont_labelFontOfSize_C(Class _class, float fontSize);

// method '+[NSFont labelFontSize]'
float _CM_NSFont_labelFontSize(Class _class);

// method '-[NSFont leading]'
float _IM_NSFont_leading(NSFont *_self);

// method '-[NSFont matrix]'
const float* _IM_NSFont_matrix(NSFont *_self);

// method '-[NSFont maximumAdvancement]'
struct _NSSize _IM_NSFont_maximumAdvancement(NSFont *_self);

// method '+[NSFont menuBarFontOfSize:]'
NSFont* _CM_NSFont_menuBarFontOfSize_C(Class _class, float fontSize);

// method '+[NSFont menuFontOfSize:]'
NSFont* _CM_NSFont_menuFontOfSize_C(Class _class, float fontSize);

// method '+[NSFont messageFontOfSize:]'
NSFont* _CM_NSFont_messageFontOfSize_C(Class _class, float fontSize);

// method '-[NSFont mostCompatibleStringEncoding]'
unsigned int _IM_NSFont_mostCompatibleStringEncoding(NSFont *_self);

// method '-[NSFont numberOfGlyphs]'
unsigned int _IM_NSFont_numberOfGlyphs(NSFont *_self);

// method '+[NSFont paletteFontOfSize:]'
NSFont* _CM_NSFont_paletteFontOfSize_C(Class _class, float fontSize);

// method '-[NSFont pointSize]'
float _IM_NSFont_pointSize(NSFont *_self);

// method '-[NSFont printerFont]'
NSFont* _IM_NSFont_printerFont(NSFont *_self);

// method '-[NSFont renderingMode]'
int _IM_NSFont_renderingMode(NSFont *_self);

// method '-[NSFont screenFont]'
NSFont* _IM_NSFont_screenFont(NSFont *_self);

// method '-[NSFont screenFontWithRenderingMode:]'
NSFont* _IM_NSFont_screenFontWithRenderingMode_C(NSFont *_self, int renderingMode);

// method '-[NSFont set]'
void _IM_NSFont_set(NSFont *_self);

// method '-[NSFont setInContext:]'
void _IM_NSFont_setInContext_C(NSFont *_self, NSGraphicsContext* graphicsContext);

// method '+[NSFont setUserFixedPitchFont:]'
void _CM_NSFont_setUserFixedPitchFont_C(Class _class, NSFont* aFont);

// method '+[NSFont setUserFont:]'
void _CM_NSFont_setUserFont_C(Class _class, NSFont* aFont);

// method '+[NSFont smallSystemFontSize]'
float _CM_NSFont_smallSystemFontSize(Class _class);

// method '+[NSFont systemFontOfSize:]'
NSFont* _CM_NSFont_systemFontOfSize_C(Class _class, float fontSize);

// method '+[NSFont systemFontSize]'
float _CM_NSFont_systemFontSize(Class _class);

// method '+[NSFont systemFontSizeForControlSize:]'
float _CM_NSFont_systemFontSizeForControlSize_C(Class _class, int controlSize);

// method '-[NSFont textTransform]'
NSAffineTransform* _IM_NSFont_textTransform(NSFont *_self);

// method '+[NSFont titleBarFontOfSize:]'
NSFont* _CM_NSFont_titleBarFontOfSize_C(Class _class, float fontSize);

// method '+[NSFont toolTipsFontOfSize:]'
NSFont* _CM_NSFont_toolTipsFontOfSize_C(Class _class, float fontSize);

// method '-[NSFont underlinePosition]'
float _IM_NSFont_underlinePosition(NSFont *_self);

// method '-[NSFont underlineThickness]'
float _IM_NSFont_underlineThickness(NSFont *_self);

// method '+[NSFont userFixedPitchFontOfSize:]'
NSFont* _CM_NSFont_userFixedPitchFontOfSize_C(Class _class, float fontSize);

// method '+[NSFont userFontOfSize:]'
NSFont* _CM_NSFont_userFontOfSize_C(Class _class, float fontSize);

// method '-[NSFont xHeight]'
float _IM_NSFont_xHeight(NSFont *_self);

// method '-[NSFontDescriptor fontAttributes]'
id _IM_NSFontDescriptor_fontAttributes(NSFontDescriptor *_self);

// method '-[NSFontDescriptor fontDescriptorByAddingAttributes:]'
NSFontDescriptor* _IM_NSFontDescriptor_fontDescriptorByAddingAttributes_C(NSFontDescriptor *_self, id attributes);

// method '-[NSFontDescriptor fontDescriptorWithFace:]'
NSFontDescriptor* _IM_NSFontDescriptor_fontDescriptorWithFace_C(NSFontDescriptor *_self, NSString* newFace);

// method '-[NSFontDescriptor fontDescriptorWithFamily:]'
NSFontDescriptor* _IM_NSFontDescriptor_fontDescriptorWithFamily_C(NSFontDescriptor *_self, NSString* newFamily);

// method '+[NSFontDescriptor fontDescriptorWithFontAttributes:]'
NSFontDescriptor* _CM_NSFontDescriptor_fontDescriptorWithFontAttributes_C(Class _class, id attributes);

// method '-[NSFontDescriptor fontDescriptorWithMatrix:]'
NSFontDescriptor* _IM_NSFontDescriptor_fontDescriptorWithMatrix_C(NSFontDescriptor *_self, NSAffineTransform* matrix);

// method '+[NSFontDescriptor fontDescriptorWithName:matrix:]'
NSFontDescriptor* _CM_NSFontDescriptor_fontDescriptorWithName_Cmatrix_C(Class _class, NSString* fontName, NSAffineTransform* matrix);

// method '+[NSFontDescriptor fontDescriptorWithName:size:]'
NSFontDescriptor* _CM_NSFontDescriptor_fontDescriptorWithName_Csize_C(Class _class, NSString* fontName, float size);

// method '-[NSFontDescriptor fontDescriptorWithSize:]'
NSFontDescriptor* _IM_NSFontDescriptor_fontDescriptorWithSize_C(NSFontDescriptor *_self, float newPointSize);

// method '-[NSFontDescriptor fontDescriptorWithSymbolicTraits:]'
NSFontDescriptor* _IM_NSFontDescriptor_fontDescriptorWithSymbolicTraits_C(NSFontDescriptor *_self, unsigned int symbolicTraits);

// method '-[NSFontDescriptor initWithFontAttributes:]'
NSFontDescriptor *_IM_NSFontDescriptor_initWithFontAttributes_C(NSFontDescriptor *_self, id attributes);

// method '-[NSFontDescriptor matchingFontDescriptorsWithMandatoryKeys:]'
id _IM_NSFontDescriptor_matchingFontDescriptorsWithMandatoryKeys_C(NSFontDescriptor *_self, id mandatoryKeys);

// method '-[NSFontDescriptor matrix]'
NSAffineTransform* _IM_NSFontDescriptor_matrix(NSFontDescriptor *_self);

// method '-[NSFontDescriptor objectForKey:]'
id _IM_NSFontDescriptor_objectForKey_C(NSFontDescriptor *_self, NSString* anAttribute);

// method '-[NSFontDescriptor pointSize]'
float _IM_NSFontDescriptor_pointSize(NSFontDescriptor *_self);

// method '-[NSFontDescriptor postscriptName]'
NSString* _IM_NSFontDescriptor_postscriptName(NSFontDescriptor *_self);

// method '-[NSFontDescriptor symbolicTraits]'
unsigned int _IM_NSFontDescriptor_symbolicTraits(NSFontDescriptor *_self);

// method '-[NSFontManager action]'
SEL _IM_NSFontManager_action(NSFontManager *_self);

// method '-[NSFontManager addCollection:options:]'
BOOL _IM_NSFontManager_addCollection_Coptions_C(NSFontManager *_self, NSString* collectionName, int collectionOptions);

// method '-[NSFontManager addFontDescriptors:toCollection:]'
void _IM_NSFontManager_addFontDescriptors_CtoCollection_C(NSFontManager *_self, id descriptors, NSString* collectionName);

// method '-[NSFontManager addFontTrait:]'
void _IM_NSFontManager_addFontTrait_C(NSFontManager *_self, id sender);

// method '-[NSFontManager availableFontFamilies]'
id _IM_NSFontManager_availableFontFamilies(NSFontManager *_self);

// method '-[NSFontManager availableFontNamesMatchingFontDescriptor:]'
id _IM_NSFontManager_availableFontNamesMatchingFontDescriptor_C(NSFontManager *_self, NSFontDescriptor* descriptor);

// method '-[NSFontManager availableFontNamesWithTraits:]'
id _IM_NSFontManager_availableFontNamesWithTraits_C(NSFontManager *_self, unsigned int someTraits);

// method '-[NSFontManager availableFonts]'
id _IM_NSFontManager_availableFonts(NSFontManager *_self);

// method '-[NSFontManager availableMembersOfFontFamily:]'
id _IM_NSFontManager_availableMembersOfFontFamily_C(NSFontManager *_self, NSString* fam);

// method '-[NSFontManager collectionNames]'
id _IM_NSFontManager_collectionNames(NSFontManager *_self);

// method '-[NSFontManager convertAttributes:]'
id _IM_NSFontManager_convertAttributes_C(NSFontManager *_self, id attributes);

// method '-[NSFontManager convertFont:]'
NSFont* _IM_NSFontManager_convertFont_C(NSFontManager *_self, NSFont* fontObj);

// method '-[NSFontManager convertFont:toFace:]'
NSFont* _IM_NSFontManager_convertFont_CtoFace_C(NSFontManager *_self, NSFont* fontObj, NSString* typeface);

// method '-[NSFontManager convertFont:toFamily:]'
NSFont* _IM_NSFontManager_convertFont_CtoFamily_C(NSFontManager *_self, NSFont* fontObj, NSString* family);

// method '-[NSFontManager convertFont:toHaveTrait:]'
NSFont* _IM_NSFontManager_convertFont_CtoHaveTrait_C(NSFontManager *_self, NSFont* fontObj, unsigned int trait);

// method '-[NSFontManager convertFont:toNotHaveTrait:]'
NSFont* _IM_NSFontManager_convertFont_CtoNotHaveTrait_C(NSFontManager *_self, NSFont* fontObj, unsigned int trait);

// method '-[NSFontManager convertFont:toSize:]'
NSFont* _IM_NSFontManager_convertFont_CtoSize_C(NSFontManager *_self, NSFont* fontObj, float size);

// method '-[NSFontManager convertWeight:ofFont:]'
NSFont* _IM_NSFontManager_convertWeight_CofFont_C(NSFontManager *_self, BOOL upFlag, NSFont* fontObj);

// method '-[NSFontManager delegate]'
id _IM_NSFontManager_delegate(NSFontManager *_self);

// method '-[NSFontManager fontDescriptorsInCollection:]'
id _IM_NSFontManager_fontDescriptorsInCollection_C(NSFontManager *_self, NSString* collectionNames);

// method '-[NSFontManager fontMenu:]'
NSMenu* _IM_NSFontManager_fontMenu_C(NSFontManager *_self, BOOL create);

// method '-[NSFontManager fontNamed:hasTraits:]'
BOOL _IM_NSFontManager_fontNamed_ChasTraits_C(NSFontManager *_self, NSString* fName, unsigned int someTraits);

// method '-[NSFontManager fontPanel:]'
NSFontPanel* _IM_NSFontManager_fontPanel_C(NSFontManager *_self, BOOL create);

// method '-[NSFontManager fontWithFamily:traits:weight:size:]'
NSFont* _IM_NSFontManager_fontWithFamily_Ctraits_Cweight_Csize_C(NSFontManager *_self, NSString* family, unsigned int traits, int weight, float size);

// method '-[NSFontManager isEnabled]'
BOOL _IM_NSFontManager_isEnabled(NSFontManager *_self);

// method '-[NSFontManager isMultiple]'
BOOL _IM_NSFontManager_isMultiple(NSFontManager *_self);

// method '-[NSFontManager localizedNameForFamily:face:]'
NSString* _IM_NSFontManager_localizedNameForFamily_Cface_C(NSFontManager *_self, NSString* family, NSString* faceKey);

// method '-[NSFontManager modifyFont:]'
void _IM_NSFontManager_modifyFont_C(NSFontManager *_self, id sender);

// method '-[NSFontManager modifyFontViaPanel:]'
void _IM_NSFontManager_modifyFontViaPanel_C(NSFontManager *_self, id sender);

// method '-[NSFontManager orderFrontFontPanel:]'
void _IM_NSFontManager_orderFrontFontPanel_C(NSFontManager *_self, id sender);

// method '-[NSFontManager orderFrontStylesPanel:]'
void _IM_NSFontManager_orderFrontStylesPanel_C(NSFontManager *_self, id sender);

// method '-[NSFontManager removeCollection:]'
BOOL _IM_NSFontManager_removeCollection_C(NSFontManager *_self, NSString* collectionName);

// method '-[NSFontManager removeFontDescriptor:fromCollection:]'
void _IM_NSFontManager_removeFontDescriptor_CfromCollection_C(NSFontManager *_self, NSFontDescriptor* descriptor, NSString* collection);

// method '-[NSFontManager removeFontTrait:]'
void _IM_NSFontManager_removeFontTrait_C(NSFontManager *_self, id sender);

// method '-[NSFontManager selectedFont]'
NSFont* _IM_NSFontManager_selectedFont(NSFontManager *_self);

// method '-[NSFontManager sendAction]'
BOOL _IM_NSFontManager_sendAction(NSFontManager *_self);

// method '-[NSFontManager setAction:]'
void _IM_NSFontManager_setAction_C(NSFontManager *_self, SEL aSelector);

// method '-[NSFontManager setDelegate:]'
void _IM_NSFontManager_setDelegate_C(NSFontManager *_self, id anObject);

// method '-[NSFontManager setEnabled:]'
void _IM_NSFontManager_setEnabled_C(NSFontManager *_self, BOOL flag);

// method '+[NSFontManager setFontManagerFactory:]'
void _CM_NSFontManager_setFontManagerFactory_C(Class _class, Class factoryId);

// method '-[NSFontManager setFontMenu:]'
void _IM_NSFontManager_setFontMenu_C(NSFontManager *_self, NSMenu* newMenu);

// method '+[NSFontManager setFontPanelFactory:]'
void _CM_NSFontManager_setFontPanelFactory_C(Class _class, Class factoryId);

// method '-[NSFontManager setSelectedAttributes:isMultiple:]'
void _IM_NSFontManager_setSelectedAttributes_CisMultiple_C(NSFontManager *_self, id attributes, BOOL flag);

// method '-[NSFontManager setSelectedFont:isMultiple:]'
void _IM_NSFontManager_setSelectedFont_CisMultiple_C(NSFontManager *_self, NSFont* fontObj, BOOL flag);

// method '+[NSFontManager sharedFontManager]'
NSFontManager* _CM_NSFontManager_sharedFontManager(Class _class);

// method '-[NSFontManager traitsOfFont:]'
unsigned int _IM_NSFontManager_traitsOfFont_C(NSFontManager *_self, NSFont* fontObj);

// method '-[NSFontManager weightOfFont:]'
int _IM_NSFontManager_weightOfFont_C(NSFontManager *_self, NSFont* fontObj);

// method '-[NSFontPanel accessoryView]'
NSView* _IM_NSFontPanel_accessoryView(NSFontPanel *_self);

// method '-[NSFontPanel isEnabled]'
BOOL _IM_NSFontPanel_isEnabled(NSFontPanel *_self);

// method '-[NSFontPanel panelConvertFont:]'
NSFont* _IM_NSFontPanel_panelConvertFont_C(NSFontPanel *_self, NSFont* fontObj);

// method '-[NSFontPanel reloadDefaultFontFamilies]'
void _IM_NSFontPanel_reloadDefaultFontFamilies(NSFontPanel *_self);

// method '-[NSFontPanel setAccessoryView:]'
void _IM_NSFontPanel_setAccessoryView_C(NSFontPanel *_self, NSView* aView);

// method '-[NSFontPanel setEnabled:]'
void _IM_NSFontPanel_setEnabled_C(NSFontPanel *_self, BOOL flag);

// method '-[NSFontPanel setPanelFont:isMultiple:]'
void _IM_NSFontPanel_setPanelFont_CisMultiple_C(NSFontPanel *_self, NSFont* fontObj, BOOL flag);

// method '+[NSFontPanel sharedFontPanel]'
NSFontPanel* _CM_NSFontPanel_sharedFontPanel(Class _class);

// method '+[NSFontPanel sharedFontPanelExists]'
BOOL _CM_NSFontPanel_sharedFontPanelExists(Class _class);

// method '-[NSFontPanel worksWhenModal]'
BOOL _IM_NSFontPanel_worksWhenModal(NSFontPanel *_self);

// method '-[NSForm addEntry:]'
NSFormCell* _IM_NSForm_addEntry_C(NSForm *_self, NSString* title);

// method '-[NSForm cellAtIndex:]'
id _IM_NSForm_cellAtIndex_C(NSForm *_self, int index);

// method '-[NSForm drawCellAtIndex:]'
void _IM_NSForm_drawCellAtIndex_C(NSForm *_self, int index);

// method '-[NSForm indexOfCellWithTag:]'
int _IM_NSForm_indexOfCellWithTag_C(NSForm *_self, int aTag);

// method '-[NSForm indexOfSelectedItem]'
int _IM_NSForm_indexOfSelectedItem(NSForm *_self);

// method '-[NSForm insertEntry:atIndex:]'
NSFormCell* _IM_NSForm_insertEntry_CatIndex_C(NSForm *_self, NSString* title, int index);

// method '-[NSForm removeEntryAtIndex:]'
void _IM_NSForm_removeEntryAtIndex_C(NSForm *_self, int index);

// method '-[NSForm selectTextAtIndex:]'
void _IM_NSForm_selectTextAtIndex_C(NSForm *_self, int index);

// method '-[NSForm setBezeled:]'
void _IM_NSForm_setBezeled_C(NSForm *_self, BOOL flag);

// method '-[NSForm setBordered:]'
void _IM_NSForm_setBordered_C(NSForm *_self, BOOL flag);

// method '-[NSForm setEntryWidth:]'
void _IM_NSForm_setEntryWidth_C(NSForm *_self, float width);

// method '-[NSForm setFrameSize:]'
void _IM_NSForm_setFrameSize_C(NSForm *_self, struct _NSSize newSize);

// method '-[NSForm setInterlineSpacing:]'
void _IM_NSForm_setInterlineSpacing_C(NSForm *_self, float spacing);

// method '-[NSForm setTextAlignment:]'
void _IM_NSForm_setTextAlignment_C(NSForm *_self, int mode);

// method '-[NSForm setTextBaseWritingDirection:]'
void _IM_NSForm_setTextBaseWritingDirection_C(NSForm *_self, int writingDirection);

// method '-[NSForm setTextFont:]'
void _IM_NSForm_setTextFont_C(NSForm *_self, NSFont* fontObj);

// method '-[NSForm setTitleAlignment:]'
void _IM_NSForm_setTitleAlignment_C(NSForm *_self, int mode);

// method '-[NSForm setTitleBaseWritingDirection:]'
void _IM_NSForm_setTitleBaseWritingDirection_C(NSForm *_self, int writingDirection);

// method '-[NSForm setTitleFont:]'
void _IM_NSForm_setTitleFont_C(NSForm *_self, NSFont* fontObj);

// method '-[NSFormCell attributedTitle]'
NSAttributedString* _IM_NSFormCell_attributedTitle(NSFormCell *_self);

// method '-[NSFormCell initTextCell:]'
NSFormCell *_IM_NSFormCell_initTextCell_C(NSFormCell *_self, NSString* aString);

// method '-[NSFormCell isOpaque]'
BOOL _IM_NSFormCell_isOpaque(NSFormCell *_self);

// method '-[NSFormCell placeholderAttributedString]'
NSAttributedString* _IM_NSFormCell_placeholderAttributedString(NSFormCell *_self);

// method '-[NSFormCell placeholderString]'
NSString* _IM_NSFormCell_placeholderString(NSFormCell *_self);

// method '-[NSFormCell setAttributedTitle:]'
void _IM_NSFormCell_setAttributedTitle_C(NSFormCell *_self, NSAttributedString* obj);

// method '-[NSFormCell setPlaceholderAttributedString:]'
void _IM_NSFormCell_setPlaceholderAttributedString_C(NSFormCell *_self, NSAttributedString* string);

// method '-[NSFormCell setPlaceholderString:]'
void _IM_NSFormCell_setPlaceholderString_C(NSFormCell *_self, NSString* string);

// method '-[NSFormCell setTitle:]'
void _IM_NSFormCell_setTitle_C(NSFormCell *_self, NSString* aString);

// method '-[NSFormCell setTitleAlignment:]'
void _IM_NSFormCell_setTitleAlignment_C(NSFormCell *_self, int mode);

// method '-[NSFormCell setTitleBaseWritingDirection:]'
void _IM_NSFormCell_setTitleBaseWritingDirection_C(NSFormCell *_self, int writingDirection);

// method '-[NSFormCell setTitleFont:]'
void _IM_NSFormCell_setTitleFont_C(NSFormCell *_self, NSFont* fontObj);

// method '-[NSFormCell setTitleWidth:]'
void _IM_NSFormCell_setTitleWidth_C(NSFormCell *_self, float width);

// method '-[NSFormCell setTitleWithMnemonic:]'
void _IM_NSFormCell_setTitleWithMnemonic_C(NSFormCell *_self, NSString* stringWithAmpersand);

// method '-[NSFormCell title]'
NSString* _IM_NSFormCell_title(NSFormCell *_self);

// method '-[NSFormCell titleAlignment]'
int _IM_NSFormCell_titleAlignment(NSFormCell *_self);

// method '-[NSFormCell titleBaseWritingDirection]'
int _IM_NSFormCell_titleBaseWritingDirection(NSFormCell *_self);

// method '-[NSFormCell titleFont]'
NSFont* _IM_NSFormCell_titleFont(NSFormCell *_self);

// method '-[NSFormCell titleWidth]'
float _IM_NSFormCell_titleWidth(NSFormCell *_self);

// method '-[NSFormCell titleWidth:]'
float _IM_NSFormCell_titleWidth_C(NSFormCell *_self, struct _NSSize aSize);

// method '-[NSGlyphGenerator generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:]'
void _IM_NSGlyphGenerator_generateGlyphsForGlyphStorage_CdesiredNumberOfCharacters_CglyphIndex_CcharacterIndex_C(NSGlyphGenerator *_self, id glyphStorage, unsigned int nChars, unsigned int *glyphIndex, unsigned int *charIndex);

// method '+[NSGlyphGenerator sharedGlyphGenerator]'
id _CM_NSGlyphGenerator_sharedGlyphGenerator(Class _class);

// method '-[NSGlyphInfo characterCollection]'
int _IM_NSGlyphInfo_characterCollection(NSGlyphInfo *_self);

// method '-[NSGlyphInfo characterIdentifier]'
unsigned int _IM_NSGlyphInfo_characterIdentifier(NSGlyphInfo *_self);

// method '+[NSGlyphInfo glyphInfoWithCharacterIdentifier:collection:baseString:]'
NSGlyphInfo* _CM_NSGlyphInfo_glyphInfoWithCharacterIdentifier_Ccollection_CbaseString_C(Class _class, unsigned int cid, int characterCollection, NSString* theString);

// method '+[NSGlyphInfo glyphInfoWithGlyph:forFont:baseString:]'
NSGlyphInfo* _CM_NSGlyphInfo_glyphInfoWithGlyph_CforFont_CbaseString_C(Class _class, unsigned int glyph, NSFont* font, NSString* theString);

// method '+[NSGlyphInfo glyphInfoWithGlyphName:forFont:baseString:]'
NSGlyphInfo* _CM_NSGlyphInfo_glyphInfoWithGlyphName_CforFont_CbaseString_C(Class _class, NSString* glyphName, NSFont* font, NSString* theString);

// method '-[NSGlyphInfo glyphName]'
NSString* _IM_NSGlyphInfo_glyphName(NSGlyphInfo *_self);

// method '-[NSGraphicsContext CIContext]'
id _IM_NSGraphicsContext_CIContext(NSGraphicsContext *_self);

// method '-[NSGraphicsContext attributes]'
id _IM_NSGraphicsContext_attributes(NSGraphicsContext *_self);

// method '-[NSGraphicsContext compositingOperation]'
int _IM_NSGraphicsContext_compositingOperation(NSGraphicsContext *_self);

// method '+[NSGraphicsContext currentContext]'
NSGraphicsContext* _CM_NSGraphicsContext_currentContext(Class _class);

// method '+[NSGraphicsContext currentContextDrawingToScreen]'
BOOL _CM_NSGraphicsContext_currentContextDrawingToScreen(Class _class);

// method '-[NSGraphicsContext flushGraphics]'
void _IM_NSGraphicsContext_flushGraphics(NSGraphicsContext *_self);

// method '-[NSGraphicsContext focusStack]'
void *_IM_NSGraphicsContext_focusStack(NSGraphicsContext *_self);

// method '+[NSGraphicsContext graphicsContextWithAttributes:]'
NSGraphicsContext* _CM_NSGraphicsContext_graphicsContextWithAttributes_C(Class _class, id attributes);

// method '+[NSGraphicsContext graphicsContextWithBitmapImageRep:]'
NSGraphicsContext* _CM_NSGraphicsContext_graphicsContextWithBitmapImageRep_C(Class _class, NSBitmapImageRep* bitmapRep);

// method '+[NSGraphicsContext graphicsContextWithGraphicsPort:flipped:]'
NSGraphicsContext* _CM_NSGraphicsContext_graphicsContextWithGraphicsPort_Cflipped_C(Class _class, struct CGContext *graphicsPort, BOOL initialFlippedState);

// method '+[NSGraphicsContext graphicsContextWithWindow:]'
NSGraphicsContext* _CM_NSGraphicsContext_graphicsContextWithWindow_C(Class _class, NSWindow* window);

// method '-[NSGraphicsContext graphicsPort]'
struct CGContext *_IM_NSGraphicsContext_graphicsPort(NSGraphicsContext *_self);

// method '-[NSGraphicsContext imageInterpolation]'
int _IM_NSGraphicsContext_imageInterpolation(NSGraphicsContext *_self);

// method '-[NSGraphicsContext isDrawingToScreen]'
BOOL _IM_NSGraphicsContext_isDrawingToScreen(NSGraphicsContext *_self);

// method '-[NSGraphicsContext isFlipped]'
BOOL _IM_NSGraphicsContext_isFlipped(NSGraphicsContext *_self);

// method '-[NSGraphicsContext patternPhase]'
struct _NSPoint _IM_NSGraphicsContext_patternPhase(NSGraphicsContext *_self);

// method '+[NSGraphicsContext restoreGraphicsState]'
void _CM_NSGraphicsContext_restoreGraphicsState(Class _class);

// method '-[NSGraphicsContext restoreGraphicsState]'
void _IM_NSGraphicsContext_restoreGraphicsState(NSGraphicsContext *_self);

// method '+[NSGraphicsContext saveGraphicsState]'
void _CM_NSGraphicsContext_saveGraphicsState(Class _class);

// method '-[NSGraphicsContext saveGraphicsState]'
void _IM_NSGraphicsContext_saveGraphicsState(NSGraphicsContext *_self);

// method '-[NSGraphicsContext setCompositingOperation:]'
void _IM_NSGraphicsContext_setCompositingOperation_C(NSGraphicsContext *_self, int operation);

// method '+[NSGraphicsContext setCurrentContext:]'
void _CM_NSGraphicsContext_setCurrentContext_C(Class _class, NSGraphicsContext* context);

// method '+[NSGraphicsContext setGraphicsState:]'
void _CM_NSGraphicsContext_setGraphicsState_C(Class _class, int gState);

// method '-[NSGraphicsContext setImageInterpolation:]'
void _IM_NSGraphicsContext_setImageInterpolation_C(NSGraphicsContext *_self, int interpolation);

// method '-[NSGraphicsContext setPatternPhase:]'
void _IM_NSGraphicsContext_setPatternPhase_C(NSGraphicsContext *_self, struct _NSPoint phase);

// method '-[NSGraphicsContext setShouldAntialias:]'
void _IM_NSGraphicsContext_setShouldAntialias_C(NSGraphicsContext *_self, BOOL antialias);

// method '-[NSGraphicsContext shouldAntialias]'
BOOL _IM_NSGraphicsContext_shouldAntialias(NSGraphicsContext *_self);

// method '-[NSHelpManager contextHelpForObject:]'
NSAttributedString* _IM_NSHelpManager_contextHelpForObject_C(NSHelpManager *_self, id object);

// method '-[NSHelpManager findString:inBook:]'
void _IM_NSHelpManager_findString_CinBook_C(NSHelpManager *_self, NSString* query, NSString* book);

// method '+[NSHelpManager isContextHelpModeActive]'
BOOL _CM_NSHelpManager_isContextHelpModeActive(Class _class);

// method '-[NSHelpManager openHelpAnchor:inBook:]'
void _IM_NSHelpManager_openHelpAnchor_CinBook_C(NSHelpManager *_self, NSString* anchor, NSString* book);

// method '-[NSHelpManager removeContextHelpForObject:]'
void _IM_NSHelpManager_removeContextHelpForObject_C(NSHelpManager *_self, id object);

// method '-[NSHelpManager setContextHelp:forObject:]'
void _IM_NSHelpManager_setContextHelp_CforObject_C(NSHelpManager *_self, NSAttributedString* attrString, id object);

// method '+[NSHelpManager setContextHelpModeActive:]'
void _CM_NSHelpManager_setContextHelpModeActive_C(Class _class, BOOL active);

// method '+[NSHelpManager sharedHelpManager]'
NSHelpManager* _CM_NSHelpManager_sharedHelpManager(Class _class);

// method '-[NSHelpManager showContextHelpForObject:locationHint:]'
BOOL _IM_NSHelpManager_showContextHelpForObject_ClocationHint_C(NSHelpManager *_self, id object, struct _NSPoint pt);

// method '-[NSImage TIFFRepresentation]'
id _IM_NSImage_TIFFRepresentation(NSImage *_self);

// method '-[NSImage TIFFRepresentationUsingCompression:factor:]'
id _IM_NSImage_TIFFRepresentationUsingCompression_Cfactor_C(NSImage *_self, int comp, float aFloat);

// method '-[NSImage addRepresentation:]'
void _IM_NSImage_addRepresentation_C(NSImage *_self, NSImageRep* imageRep);

// method '-[NSImage addRepresentations:]'
void _IM_NSImage_addRepresentations_C(NSImage *_self, id imageReps);

// method '-[NSImage backgroundColor]'
NSColor* _IM_NSImage_backgroundColor(NSImage *_self);

// method '-[NSImage bestRepresentationForDevice:]'
NSImageRep* _IM_NSImage_bestRepresentationForDevice_C(NSImage *_self, id deviceDescription);

// method '-[NSImage cacheDepthMatchesImageDepth]'
BOOL _IM_NSImage_cacheDepthMatchesImageDepth(NSImage *_self);

// method '-[NSImage cacheMode]'
int _IM_NSImage_cacheMode(NSImage *_self);

// method '+[NSImage canInitWithPasteboard:]'
BOOL _CM_NSImage_canInitWithPasteboard_C(Class _class, NSPasteboard* pasteboard);

// method '-[NSImage cancelIncrementalLoad]'
void _IM_NSImage_cancelIncrementalLoad(NSImage *_self);

// method '-[NSImage compositeToPoint:fromRect:operation:]'
void _IM_NSImage_compositeToPoint_CfromRect_Coperation_C(NSImage *_self, struct _NSPoint point, struct _NSRect rect, int op);

// method '-[NSImage compositeToPoint:fromRect:operation:fraction:]'
void _IM_NSImage_compositeToPoint_CfromRect_Coperation_Cfraction_C(NSImage *_self, struct _NSPoint point, struct _NSRect rect, int op, float delta);

// method '-[NSImage compositeToPoint:operation:]'
void _IM_NSImage_compositeToPoint_Coperation_C(NSImage *_self, struct _NSPoint point, int op);

// method '-[NSImage compositeToPoint:operation:fraction:]'
void _IM_NSImage_compositeToPoint_Coperation_Cfraction_C(NSImage *_self, struct _NSPoint point, int op, float delta);

// method '-[NSImage delegate]'
id _IM_NSImage_delegate(NSImage *_self);

// method '-[NSImage dissolveToPoint:fraction:]'
void _IM_NSImage_dissolveToPoint_Cfraction_C(NSImage *_self, struct _NSPoint point, float aFloat);

// method '-[NSImage dissolveToPoint:fromRect:fraction:]'
void _IM_NSImage_dissolveToPoint_CfromRect_Cfraction_C(NSImage *_self, struct _NSPoint point, struct _NSRect rect, float aFloat);

// method '-[NSImage drawAtPoint:fromRect:operation:fraction:]'
void _IM_NSImage_drawAtPoint_CfromRect_Coperation_Cfraction_C(NSImage *_self, struct _NSPoint point, struct _NSRect fromRect, int op, float delta);

// method '-[NSImage drawInRect:fromRect:operation:fraction:]'
void _IM_NSImage_drawInRect_CfromRect_Coperation_Cfraction_C(NSImage *_self, struct _NSRect rect, struct _NSRect fromRect, int op, float delta);

// method '-[NSImage drawRepresentation:inRect:]'
BOOL _IM_NSImage_drawRepresentation_CinRect_C(NSImage *_self, NSImageRep* imageRep, struct _NSRect rect);

// method '+[NSImage imageFileTypes]'
id _CM_NSImage_imageFileTypes(Class _class);

// method '+[NSImage imageNamed:]'
id _CM_NSImage_imageNamed_C(Class _class, NSString* name);

// method '+[NSImage imagePasteboardTypes]'
id _CM_NSImage_imagePasteboardTypes(Class _class);

// method '+[NSImage imageUnfilteredFileTypes]'
id _CM_NSImage_imageUnfilteredFileTypes(Class _class);

// method '+[NSImage imageUnfilteredPasteboardTypes]'
id _CM_NSImage_imageUnfilteredPasteboardTypes(Class _class);

// method '-[NSImage initByReferencingFile:]'
NSImage *_IM_NSImage_initByReferencingFile_C(NSImage *_self, NSString* fileName);

// method '-[NSImage initByReferencingURL:]'
NSImage *_IM_NSImage_initByReferencingURL_C(NSImage *_self, NSURL* url);

// method '-[NSImage initWithContentsOfFile:]'
NSImage *_IM_NSImage_initWithContentsOfFile_C(NSImage *_self, NSString* fileName);

// method '-[NSImage initWithContentsOfURL:]'
NSImage *_IM_NSImage_initWithContentsOfURL_C(NSImage *_self, NSURL* url);

// method '-[NSImage initWithData:]'
NSImage *_IM_NSImage_initWithData_C(NSImage *_self, id data);

// method '-[NSImage initWithPasteboard:]'
NSImage *_IM_NSImage_initWithPasteboard_C(NSImage *_self, NSPasteboard* pasteboard);

// method '-[NSImage initWithSize:]'
NSImage *_IM_NSImage_initWithSize_C(NSImage *_self, struct _NSSize aSize);

// method '-[NSImage isCachedSeparately]'
BOOL _IM_NSImage_isCachedSeparately(NSImage *_self);

// method '-[NSImage isDataRetained]'
BOOL _IM_NSImage_isDataRetained(NSImage *_self);

// method '-[NSImage isFlipped]'
BOOL _IM_NSImage_isFlipped(NSImage *_self);

// method '-[NSImage isValid]'
BOOL _IM_NSImage_isValid(NSImage *_self);

// method '-[NSImage lockFocus]'
void _IM_NSImage_lockFocus(NSImage *_self);

// method '-[NSImage lockFocusOnRepresentation:]'
void _IM_NSImage_lockFocusOnRepresentation_C(NSImage *_self, NSImageRep* imageRepresentation);

// method '-[NSImage matchesOnMultipleResolution]'
BOOL _IM_NSImage_matchesOnMultipleResolution(NSImage *_self);

// method '-[NSImage name]'
NSString* _IM_NSImage_name(NSImage *_self);

// method '-[NSImage prefersColorMatch]'
BOOL _IM_NSImage_prefersColorMatch(NSImage *_self);

// method '-[NSImage recache]'
void _IM_NSImage_recache(NSImage *_self);

// method '-[NSImage removeRepresentation:]'
void _IM_NSImage_removeRepresentation_C(NSImage *_self, NSImageRep* imageRep);

// method '-[NSImage representations]'
id _IM_NSImage_representations(NSImage *_self);

// method '-[NSImage scalesWhenResized]'
BOOL _IM_NSImage_scalesWhenResized(NSImage *_self);

// method '-[NSImage setBackgroundColor:]'
void _IM_NSImage_setBackgroundColor_C(NSImage *_self, NSColor* aColor);

// method '-[NSImage setCacheDepthMatchesImageDepth:]'
void _IM_NSImage_setCacheDepthMatchesImageDepth_C(NSImage *_self, BOOL flag);

// method '-[NSImage setCacheMode:]'
void _IM_NSImage_setCacheMode_C(NSImage *_self, int mode);

// method '-[NSImage setCachedSeparately:]'
void _IM_NSImage_setCachedSeparately_C(NSImage *_self, BOOL flag);

// method '-[NSImage setDataRetained:]'
void _IM_NSImage_setDataRetained_C(NSImage *_self, BOOL flag);

// method '-[NSImage setDelegate:]'
void _IM_NSImage_setDelegate_C(NSImage *_self, id anObject);

// method '-[NSImage setFlipped:]'
void _IM_NSImage_setFlipped_C(NSImage *_self, BOOL flag);

// method '-[NSImage setMatchesOnMultipleResolution:]'
void _IM_NSImage_setMatchesOnMultipleResolution_C(NSImage *_self, BOOL flag);

// method '-[NSImage setName:]'
BOOL _IM_NSImage_setName_C(NSImage *_self, NSString* string);

// method '-[NSImage setPrefersColorMatch:]'
void _IM_NSImage_setPrefersColorMatch_C(NSImage *_self, BOOL flag);

// method '-[NSImage setScalesWhenResized:]'
void _IM_NSImage_setScalesWhenResized_C(NSImage *_self, BOOL flag);

// method '-[NSImage setSize:]'
void _IM_NSImage_setSize_C(NSImage *_self, struct _NSSize aSize);

// method '-[NSImage setUsesEPSOnResolutionMismatch:]'
void _IM_NSImage_setUsesEPSOnResolutionMismatch_C(NSImage *_self, BOOL flag);

// method '-[NSImage size]'
struct _NSSize _IM_NSImage_size(NSImage *_self);

// method '-[NSImage unlockFocus]'
void _IM_NSImage_unlockFocus(NSImage *_self);

// method '-[NSImage usesEPSOnResolutionMismatch]'
BOOL _IM_NSImage_usesEPSOnResolutionMismatch(NSImage *_self);

// method '-[NSImageCell imageAlignment]'
int _IM_NSImageCell_imageAlignment(NSImageCell *_self);

// method '-[NSImageCell imageFrameStyle]'
int _IM_NSImageCell_imageFrameStyle(NSImageCell *_self);

// method '-[NSImageCell imageScaling]'
int _IM_NSImageCell_imageScaling(NSImageCell *_self);

// method '-[NSImageCell setImageAlignment:]'
void _IM_NSImageCell_setImageAlignment_C(NSImageCell *_self, int newAlign);

// method '-[NSImageCell setImageFrameStyle:]'
void _IM_NSImageCell_setImageFrameStyle_C(NSImageCell *_self, int newStyle);

// method '-[NSImageCell setImageScaling:]'
void _IM_NSImageCell_setImageScaling_C(NSImageCell *_self, int newScaling);

// method '-[NSImageRep bitsPerSample]'
int _IM_NSImageRep_bitsPerSample(NSImageRep *_self);

// method '+[NSImageRep canInitWithData:]'
BOOL _CM_NSImageRep_canInitWithData_C(Class _class, id data);

// method '+[NSImageRep canInitWithPasteboard:]'
BOOL _CM_NSImageRep_canInitWithPasteboard_C(Class _class, NSPasteboard* pasteboard);

// method '-[NSImageRep colorSpaceName]'
NSString* _IM_NSImageRep_colorSpaceName(NSImageRep *_self);

// method '-[NSImageRep draw]'
BOOL _IM_NSImageRep_draw(NSImageRep *_self);

// method '-[NSImageRep drawAtPoint:]'
BOOL _IM_NSImageRep_drawAtPoint_C(NSImageRep *_self, struct _NSPoint point);

// method '-[NSImageRep drawInRect:]'
BOOL _IM_NSImageRep_drawInRect_C(NSImageRep *_self, struct _NSRect rect);

// method '-[NSImageRep hasAlpha]'
BOOL _IM_NSImageRep_hasAlpha(NSImageRep *_self);

// method '+[NSImageRep imageFileTypes]'
id _CM_NSImageRep_imageFileTypes(Class _class);

// method '+[NSImageRep imagePasteboardTypes]'
id _CM_NSImageRep_imagePasteboardTypes(Class _class);

// method '+[NSImageRep imageRepClassForData:]'
Class _CM_NSImageRep_imageRepClassForData_C(Class _class, id data);

// method '+[NSImageRep imageRepClassForFileType:]'
Class _CM_NSImageRep_imageRepClassForFileType_C(Class _class, NSString* type);

// method '+[NSImageRep imageRepClassForPasteboardType:]'
Class _CM_NSImageRep_imageRepClassForPasteboardType_C(Class _class, NSString* type);

// method '+[NSImageRep imageRepWithContentsOfFile:]'
id _CM_NSImageRep_imageRepWithContentsOfFile_C(Class _class, NSString* filename);

// method '+[NSImageRep imageRepWithContentsOfURL:]'
id _CM_NSImageRep_imageRepWithContentsOfURL_C(Class _class, NSURL* url);

// method '+[NSImageRep imageRepWithPasteboard:]'
id _CM_NSImageRep_imageRepWithPasteboard_C(Class _class, NSPasteboard* pasteboard);

// method '+[NSImageRep imageRepsWithContentsOfFile:]'
id _CM_NSImageRep_imageRepsWithContentsOfFile_C(Class _class, NSString* filename);

// method '+[NSImageRep imageRepsWithContentsOfURL:]'
id _CM_NSImageRep_imageRepsWithContentsOfURL_C(Class _class, NSURL* url);

// method '+[NSImageRep imageRepsWithPasteboard:]'
id _CM_NSImageRep_imageRepsWithPasteboard_C(Class _class, NSPasteboard* pasteboard);

// method '+[NSImageRep imageUnfilteredFileTypes]'
id _CM_NSImageRep_imageUnfilteredFileTypes(Class _class);

// method '+[NSImageRep imageUnfilteredPasteboardTypes]'
id _CM_NSImageRep_imageUnfilteredPasteboardTypes(Class _class);

// method '-[NSImageRep isOpaque]'
BOOL _IM_NSImageRep_isOpaque(NSImageRep *_self);

// method '-[NSImageRep pixelsHigh]'
int _IM_NSImageRep_pixelsHigh(NSImageRep *_self);

// method '-[NSImageRep pixelsWide]'
int _IM_NSImageRep_pixelsWide(NSImageRep *_self);

// method '+[NSImageRep registerImageRepClass:]'
void _CM_NSImageRep_registerImageRepClass_C(Class _class, Class imageRepClass);

// method '+[NSImageRep registeredImageRepClasses]'
id _CM_NSImageRep_registeredImageRepClasses(Class _class);

// method '-[NSImageRep setAlpha:]'
void _IM_NSImageRep_setAlpha_C(NSImageRep *_self, BOOL flag);

// method '-[NSImageRep setBitsPerSample:]'
void _IM_NSImageRep_setBitsPerSample_C(NSImageRep *_self, int anInt);

// method '-[NSImageRep setColorSpaceName:]'
void _IM_NSImageRep_setColorSpaceName_C(NSImageRep *_self, NSString* string);

// method '-[NSImageRep setOpaque:]'
void _IM_NSImageRep_setOpaque_C(NSImageRep *_self, BOOL flag);

// method '-[NSImageRep setPixelsHigh:]'
void _IM_NSImageRep_setPixelsHigh_C(NSImageRep *_self, int anInt);

// method '-[NSImageRep setPixelsWide:]'
void _IM_NSImageRep_setPixelsWide_C(NSImageRep *_self, int anInt);

// method '-[NSImageRep setSize:]'
void _IM_NSImageRep_setSize_C(NSImageRep *_self, struct _NSSize aSize);

// method '-[NSImageRep size]'
struct _NSSize _IM_NSImageRep_size(NSImageRep *_self);

// method '+[NSImageRep unregisterImageRepClass:]'
void _CM_NSImageRep_unregisterImageRepClass_C(Class _class, Class imageRepClass);

// method '-[NSImageView allowsCutCopyPaste]'
BOOL _IM_NSImageView_allowsCutCopyPaste(NSImageView *_self);

// method '-[NSImageView animates]'
BOOL _IM_NSImageView_animates(NSImageView *_self);

// method '-[NSImageView image]'
NSImage* _IM_NSImageView_image(NSImageView *_self);

// method '-[NSImageView imageAlignment]'
int _IM_NSImageView_imageAlignment(NSImageView *_self);

// method '-[NSImageView imageFrameStyle]'
int _IM_NSImageView_imageFrameStyle(NSImageView *_self);

// method '-[NSImageView imageScaling]'
int _IM_NSImageView_imageScaling(NSImageView *_self);

// method '-[NSImageView isEditable]'
BOOL _IM_NSImageView_isEditable(NSImageView *_self);

// method '-[NSImageView setAllowsCutCopyPaste:]'
void _IM_NSImageView_setAllowsCutCopyPaste_C(NSImageView *_self, BOOL allow);

// method '-[NSImageView setAnimates:]'
void _IM_NSImageView_setAnimates_C(NSImageView *_self, BOOL flag);

// method '-[NSImageView setEditable:]'
void _IM_NSImageView_setEditable_C(NSImageView *_self, BOOL yn);

// method '-[NSImageView setImage:]'
void _IM_NSImageView_setImage_C(NSImageView *_self, NSImage* newImage);

// method '-[NSImageView setImageAlignment:]'
void _IM_NSImageView_setImageAlignment_C(NSImageView *_self, int newAlign);

// method '-[NSImageView setImageFrameStyle:]'
void _IM_NSImageView_setImageFrameStyle_C(NSImageView *_self, int newStyle);

// method '-[NSImageView setImageScaling:]'
void _IM_NSImageView_setImageScaling_C(NSImageView *_self, int newScaling);

// method '+[NSInputManager currentInputManager]'
NSInputManager* _CM_NSInputManager_currentInputManager(Class _class);

// method '+[NSInputManager cycleToNextInputLanguage:]'
void _CM_NSInputManager_cycleToNextInputLanguage_C(Class _class, id sender);

// method '+[NSInputManager cycleToNextInputServerInLanguage:]'
void _CM_NSInputManager_cycleToNextInputServerInLanguage_C(Class _class, id sender);

// method '-[NSInputManager handleMouseEvent:]'
BOOL _IM_NSInputManager_handleMouseEvent_C(NSInputManager *_self, NSEvent* theMouseEvent);

// method '-[NSInputManager image]'
NSImage* _IM_NSInputManager_image(NSInputManager *_self);

// method '-[NSInputManager initWithName:host:]'
NSInputManager *_IM_NSInputManager_initWithName_Chost_C(NSInputManager *_self, NSString* inputServerName, NSString* hostName);

// method '-[NSInputManager language]'
NSString* _IM_NSInputManager_language(NSInputManager *_self);

// method '-[NSInputManager localizedInputManagerName]'
NSString* _IM_NSInputManager_localizedInputManagerName(NSInputManager *_self);

// method '-[NSInputManager markedTextAbandoned:]'
void _IM_NSInputManager_markedTextAbandoned_C(NSInputManager *_self, id cli);

// method '-[NSInputManager markedTextSelectionChanged:client:]'
void _IM_NSInputManager_markedTextSelectionChanged_Cclient_C(NSInputManager *_self, struct _NSRange newSel, id cli);

// method '-[NSInputManager server]'
NSInputServer* _IM_NSInputManager_server(NSInputManager *_self);

// method '-[NSInputManager wantsToDelayTextChangeNotifications]'
BOOL _IM_NSInputManager_wantsToDelayTextChangeNotifications(NSInputManager *_self);

// method '-[NSInputManager wantsToHandleMouseEvents]'
BOOL _IM_NSInputManager_wantsToHandleMouseEvents(NSInputManager *_self);

// method '-[NSInputManager wantsToInterpretAllKeystrokes]'
BOOL _IM_NSInputManager_wantsToInterpretAllKeystrokes(NSInputManager *_self);

// method '-[NSInputServer initWithDelegate:name:]'
NSInputServer *_IM_NSInputServer_initWithDelegate_Cname_C(NSInputServer *_self, id aDelegate, NSString* name);

// method '-[NSLayoutManager addTemporaryAttributes:forCharacterRange:]'
void _IM_NSLayoutManager_addTemporaryAttributes_CforCharacterRange_C(NSLayoutManager *_self, id attrs, struct _NSRange charRange);

// method '-[NSLayoutManager addTextContainer:]'
void _IM_NSLayoutManager_addTextContainer_C(NSLayoutManager *_self, NSTextContainer* container);

// method '-[NSLayoutManager attachmentSizeForGlyphAtIndex:]'
struct _NSSize _IM_NSLayoutManager_attachmentSizeForGlyphAtIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager backgroundLayoutEnabled]'
BOOL _IM_NSLayoutManager_backgroundLayoutEnabled(NSLayoutManager *_self);

// method '-[NSLayoutManager boundingRectForGlyphRange:inTextContainer:]'
struct _NSRect _IM_NSLayoutManager_boundingRectForGlyphRange_CinTextContainer_C(NSLayoutManager *_self, struct _NSRange glyphRange, NSTextContainer* container);

// method '-[NSLayoutManager boundsRectForTextBlock:atIndex:effectiveRange:]'
struct _NSRect _IM_NSLayoutManager_boundsRectForTextBlock_CatIndex_CeffectiveRange_C(NSLayoutManager *_self, NSTextBlock* block, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange);

// method '-[NSLayoutManager boundsRectForTextBlock:glyphRange:]'
struct _NSRect _IM_NSLayoutManager_boundsRectForTextBlock_CglyphRange_C(NSLayoutManager *_self, NSTextBlock* block, struct _NSRange glyphRange);

// method '-[NSLayoutManager characterIndexForGlyphAtIndex:]'
unsigned int _IM_NSLayoutManager_characterIndexForGlyphAtIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager characterRangeForGlyphRange:actualGlyphRange:]'
struct _NSRange _IM_NSLayoutManager_characterRangeForGlyphRange_CactualGlyphRange_C(NSLayoutManager *_self, struct _NSRange glyphRange, struct _NSRange *actualGlyphRange);

// method '-[NSLayoutManager defaultAttachmentScaling]'
int _IM_NSLayoutManager_defaultAttachmentScaling(NSLayoutManager *_self);

// method '-[NSLayoutManager defaultLineHeightForFont:]'
float _IM_NSLayoutManager_defaultLineHeightForFont_C(NSLayoutManager *_self, NSFont* theFont);

// method '-[NSLayoutManager delegate]'
id _IM_NSLayoutManager_delegate(NSLayoutManager *_self);

// method '-[NSLayoutManager deleteGlyphsInRange:]'
void _IM_NSLayoutManager_deleteGlyphsInRange_C(NSLayoutManager *_self, struct _NSRange glyphRange);

// method '-[NSLayoutManager drawBackgroundForGlyphRange:atPoint:]'
void _IM_NSLayoutManager_drawBackgroundForGlyphRange_CatPoint_C(NSLayoutManager *_self, struct _NSRange glyphsToShow, struct _NSPoint origin);

// method '-[NSLayoutManager drawGlyphsForGlyphRange:atPoint:]'
void _IM_NSLayoutManager_drawGlyphsForGlyphRange_CatPoint_C(NSLayoutManager *_self, struct _NSRange glyphsToShow, struct _NSPoint origin);

// method '-[NSLayoutManager drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void _IM_NSLayoutManager_drawStrikethroughForGlyphRange_CstrikethroughType_CbaselineOffset_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(NSLayoutManager *_self, struct _NSRange glyphRange, int strikethroughVal, float baselineOffset, struct _NSRect lineRect, struct _NSRange lineGlyphRange, struct _NSPoint containerOrigin);

// method '-[NSLayoutManager drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void _IM_NSLayoutManager_drawUnderlineForGlyphRange_CunderlineType_CbaselineOffset_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(NSLayoutManager *_self, struct _NSRange glyphRange, int underlineVal, float baselineOffset, struct _NSRect lineRect, struct _NSRange lineGlyphRange, struct _NSPoint containerOrigin);

// method '-[NSLayoutManager drawsOutsideLineFragmentForGlyphAtIndex:]'
BOOL _IM_NSLayoutManager_drawsOutsideLineFragmentForGlyphAtIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager extraLineFragmentRect]'
struct _NSRect _IM_NSLayoutManager_extraLineFragmentRect(NSLayoutManager *_self);

// method '-[NSLayoutManager extraLineFragmentTextContainer]'
NSTextContainer* _IM_NSLayoutManager_extraLineFragmentTextContainer(NSLayoutManager *_self);

// method '-[NSLayoutManager extraLineFragmentUsedRect]'
struct _NSRect _IM_NSLayoutManager_extraLineFragmentUsedRect(NSLayoutManager *_self);

// method '-[NSLayoutManager firstTextView]'
NSTextView* _IM_NSLayoutManager_firstTextView(NSLayoutManager *_self);

// method '-[NSLayoutManager firstUnlaidCharacterIndex]'
unsigned int _IM_NSLayoutManager_firstUnlaidCharacterIndex(NSLayoutManager *_self);

// method '-[NSLayoutManager firstUnlaidGlyphIndex]'
unsigned int _IM_NSLayoutManager_firstUnlaidGlyphIndex(NSLayoutManager *_self);

// method '-[NSLayoutManager fractionOfDistanceThroughGlyphForPoint:inTextContainer:]'
float _IM_NSLayoutManager_fractionOfDistanceThroughGlyphForPoint_CinTextContainer_C(NSLayoutManager *_self, struct _NSPoint point, NSTextContainer* container);

// method '-[NSLayoutManager getFirstUnlaidCharacterIndex:glyphIndex:]'
void _IM_NSLayoutManager_getFirstUnlaidCharacterIndex_CglyphIndex_C(NSLayoutManager *_self, unsigned int *charIndex, unsigned int *glyphIndex);

// method '-[NSLayoutManager glyphAtIndex:]'
unsigned int _IM_NSLayoutManager_glyphAtIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager glyphAtIndex:isValidIndex:]'
unsigned int _IM_NSLayoutManager_glyphAtIndex_CisValidIndex_C(NSLayoutManager *_self, unsigned int glyphIndex, BOOL* isValidIndex);

// method '-[NSLayoutManager glyphGenerator]'
NSGlyphGenerator* _IM_NSLayoutManager_glyphGenerator(NSLayoutManager *_self);

// method '-[NSLayoutManager glyphIndexForPoint:inTextContainer:]'
unsigned int _IM_NSLayoutManager_glyphIndexForPoint_CinTextContainer_C(NSLayoutManager *_self, struct _NSPoint point, NSTextContainer* container);

// method '-[NSLayoutManager glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:]'
unsigned int _IM_NSLayoutManager_glyphIndexForPoint_CinTextContainer_CfractionOfDistanceThroughGlyph_C(NSLayoutManager *_self, struct _NSPoint point, NSTextContainer* container, float *partialFraction);

// method '-[NSLayoutManager glyphRangeForBoundingRect:inTextContainer:]'
struct _NSRange _IM_NSLayoutManager_glyphRangeForBoundingRect_CinTextContainer_C(NSLayoutManager *_self, struct _NSRect bounds, NSTextContainer* container);

// method '-[NSLayoutManager glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:]'
struct _NSRange _IM_NSLayoutManager_glyphRangeForBoundingRectWithoutAdditionalLayout_CinTextContainer_C(NSLayoutManager *_self, struct _NSRect bounds, NSTextContainer* container);

// method '-[NSLayoutManager glyphRangeForCharacterRange:actualCharacterRange:]'
struct _NSRange _IM_NSLayoutManager_glyphRangeForCharacterRange_CactualCharacterRange_C(NSLayoutManager *_self, struct _NSRange charRange, struct _NSRange *actualCharRange);

// method '-[NSLayoutManager glyphRangeForTextContainer:]'
struct _NSRange _IM_NSLayoutManager_glyphRangeForTextContainer_C(NSLayoutManager *_self, NSTextContainer* container);

// method '-[NSLayoutManager hyphenationFactor]'
float _IM_NSLayoutManager_hyphenationFactor(NSLayoutManager *_self);

// method '-[NSLayoutManager init]'
NSLayoutManager *_IM_NSLayoutManager_init(NSLayoutManager *_self);

// method '-[NSLayoutManager insertGlyph:atGlyphIndex:characterIndex:]'
void _IM_NSLayoutManager_insertGlyph_CatGlyphIndex_CcharacterIndex_C(NSLayoutManager *_self, unsigned int glyph, unsigned int glyphIndex, unsigned int charIndex);

// method '-[NSLayoutManager insertTextContainer:atIndex:]'
void _IM_NSLayoutManager_insertTextContainer_CatIndex_C(NSLayoutManager *_self, NSTextContainer* container, unsigned int index);

// method '-[NSLayoutManager intAttribute:forGlyphAtIndex:]'
int _IM_NSLayoutManager_intAttribute_CforGlyphAtIndex_C(NSLayoutManager *_self, int attributeTag, unsigned int glyphIndex);

// method '-[NSLayoutManager invalidateDisplayForCharacterRange:]'
void _IM_NSLayoutManager_invalidateDisplayForCharacterRange_C(NSLayoutManager *_self, struct _NSRange charRange);

// method '-[NSLayoutManager invalidateDisplayForGlyphRange:]'
void _IM_NSLayoutManager_invalidateDisplayForGlyphRange_C(NSLayoutManager *_self, struct _NSRange glyphRange);

// method '-[NSLayoutManager invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:]'
void _IM_NSLayoutManager_invalidateGlyphsForCharacterRange_CchangeInLength_CactualCharacterRange_C(NSLayoutManager *_self, struct _NSRange charRange, int delta, struct _NSRange *actualCharRange);

// method '-[NSLayoutManager invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:]'
void _IM_NSLayoutManager_invalidateLayoutForCharacterRange_CisSoft_CactualCharacterRange_C(NSLayoutManager *_self, struct _NSRange charRange, BOOL flag, struct _NSRange *actualCharRange);

// method '-[NSLayoutManager isValidGlyphIndex:]'
BOOL _IM_NSLayoutManager_isValidGlyphIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager layoutManagerOwnsFirstResponderInWindow:]'
BOOL _IM_NSLayoutManager_layoutManagerOwnsFirstResponderInWindow_C(NSLayoutManager *_self, NSWindow* window);

// method '-[NSLayoutManager layoutRectForTextBlock:atIndex:effectiveRange:]'
struct _NSRect _IM_NSLayoutManager_layoutRectForTextBlock_CatIndex_CeffectiveRange_C(NSLayoutManager *_self, NSTextBlock* block, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange);

// method '-[NSLayoutManager layoutRectForTextBlock:glyphRange:]'
struct _NSRect _IM_NSLayoutManager_layoutRectForTextBlock_CglyphRange_C(NSLayoutManager *_self, NSTextBlock* block, struct _NSRange glyphRange);

// method '-[NSLayoutManager lineFragmentRectForGlyphAtIndex:effectiveRange:]'
struct _NSRect _IM_NSLayoutManager_lineFragmentRectForGlyphAtIndex_CeffectiveRange_C(NSLayoutManager *_self, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange);

// method '-[NSLayoutManager lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:]'
struct _NSRect _IM_NSLayoutManager_lineFragmentRectForGlyphAtIndex_CeffectiveRange_CwithoutAdditionalLayout_C(NSLayoutManager *_self, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange, BOOL flag);

// method '-[NSLayoutManager lineFragmentUsedRectForGlyphAtIndex:effectiveRange:]'
struct _NSRect _IM_NSLayoutManager_lineFragmentUsedRectForGlyphAtIndex_CeffectiveRange_C(NSLayoutManager *_self, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange);

// method '-[NSLayoutManager lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:]'
struct _NSRect _IM_NSLayoutManager_lineFragmentUsedRectForGlyphAtIndex_CeffectiveRange_CwithoutAdditionalLayout_C(NSLayoutManager *_self, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange, BOOL flag);

// method '-[NSLayoutManager locationForGlyphAtIndex:]'
struct _NSPoint _IM_NSLayoutManager_locationForGlyphAtIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager notShownAttributeForGlyphAtIndex:]'
BOOL _IM_NSLayoutManager_notShownAttributeForGlyphAtIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager numberOfGlyphs]'
unsigned int _IM_NSLayoutManager_numberOfGlyphs(NSLayoutManager *_self);

// method '-[NSLayoutManager rangeOfNominallySpacedGlyphsContainingIndex:]'
struct _NSRange _IM_NSLayoutManager_rangeOfNominallySpacedGlyphsContainingIndex_C(NSLayoutManager *_self, unsigned int glyphIndex);

// method '-[NSLayoutManager rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:]'
struct _NSRect *_IM_NSLayoutManager_rectArrayForCharacterRange_CwithinSelectedCharacterRange_CinTextContainer_CrectCount_C(NSLayoutManager *_self, struct _NSRange charRange, struct _NSRange selCharRange, NSTextContainer* container, unsigned int *rectCount);

// method '-[NSLayoutManager rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:]'
struct _NSRect *_IM_NSLayoutManager_rectArrayForGlyphRange_CwithinSelectedGlyphRange_CinTextContainer_CrectCount_C(NSLayoutManager *_self, struct _NSRange glyphRange, struct _NSRange selGlyphRange, NSTextContainer* container, unsigned int *rectCount);

// method '-[NSLayoutManager removeTemporaryAttribute:forCharacterRange:]'
void _IM_NSLayoutManager_removeTemporaryAttribute_CforCharacterRange_C(NSLayoutManager *_self, NSString* name, struct _NSRange charRange);

// method '-[NSLayoutManager removeTextContainerAtIndex:]'
void _IM_NSLayoutManager_removeTextContainerAtIndex_C(NSLayoutManager *_self, unsigned int index);

// method '-[NSLayoutManager replaceGlyphAtIndex:withGlyph:]'
void _IM_NSLayoutManager_replaceGlyphAtIndex_CwithGlyph_C(NSLayoutManager *_self, unsigned int glyphIndex, unsigned int newGlyph);

// method '-[NSLayoutManager replaceTextStorage:]'
void _IM_NSLayoutManager_replaceTextStorage_C(NSLayoutManager *_self, NSTextStorage* newTextStorage);

// method '-[NSLayoutManager rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:]'
NSView* _IM_NSLayoutManager_rulerAccessoryViewForTextView_CparagraphStyle_Cruler_Cenabled_C(NSLayoutManager *_self, NSTextView* view, NSParagraphStyle* style, NSRulerView* ruler, BOOL isEnabled);

// method '-[NSLayoutManager rulerMarkersForTextView:paragraphStyle:ruler:]'
id _IM_NSLayoutManager_rulerMarkersForTextView_CparagraphStyle_Cruler_C(NSLayoutManager *_self, NSTextView* view, NSParagraphStyle* style, NSRulerView* ruler);

// method '-[NSLayoutManager setAttachmentSize:forGlyphRange:]'
void _IM_NSLayoutManager_setAttachmentSize_CforGlyphRange_C(NSLayoutManager *_self, struct _NSSize attachmentSize, struct _NSRange glyphRange);

// method '-[NSLayoutManager setBackgroundLayoutEnabled:]'
void _IM_NSLayoutManager_setBackgroundLayoutEnabled_C(NSLayoutManager *_self, BOOL flag);

// method '-[NSLayoutManager setBoundsRect:forTextBlock:glyphRange:]'
void _IM_NSLayoutManager_setBoundsRect_CforTextBlock_CglyphRange_C(NSLayoutManager *_self, struct _NSRect rect, NSTextBlock* block, struct _NSRange glyphRange);

// method '-[NSLayoutManager setCharacterIndex:forGlyphAtIndex:]'
void _IM_NSLayoutManager_setCharacterIndex_CforGlyphAtIndex_C(NSLayoutManager *_self, unsigned int charIndex, unsigned int glyphIndex);

// method '-[NSLayoutManager setDefaultAttachmentScaling:]'
void _IM_NSLayoutManager_setDefaultAttachmentScaling_C(NSLayoutManager *_self, int scaling);

// method '-[NSLayoutManager setDelegate:]'
void _IM_NSLayoutManager_setDelegate_C(NSLayoutManager *_self, id delegate);

// method '-[NSLayoutManager setDrawsOutsideLineFragment:forGlyphAtIndex:]'
void _IM_NSLayoutManager_setDrawsOutsideLineFragment_CforGlyphAtIndex_C(NSLayoutManager *_self, BOOL flag, unsigned int glyphIndex);

// method '-[NSLayoutManager setExtraLineFragmentRect:usedRect:textContainer:]'
void _IM_NSLayoutManager_setExtraLineFragmentRect_CusedRect_CtextContainer_C(NSLayoutManager *_self, struct _NSRect fragmentRect, struct _NSRect usedRect, NSTextContainer* container);

// method '-[NSLayoutManager setGlyphGenerator:]'
void _IM_NSLayoutManager_setGlyphGenerator_C(NSLayoutManager *_self, NSGlyphGenerator* glyphGenerator);

// method '-[NSLayoutManager setHyphenationFactor:]'
void _IM_NSLayoutManager_setHyphenationFactor_C(NSLayoutManager *_self, float factor);

// method '-[NSLayoutManager setIntAttribute:value:forGlyphAtIndex:]'
void _IM_NSLayoutManager_setIntAttribute_Cvalue_CforGlyphAtIndex_C(NSLayoutManager *_self, int attributeTag, int val, unsigned int glyphIndex);

// method '-[NSLayoutManager setLayoutRect:forTextBlock:glyphRange:]'
void _IM_NSLayoutManager_setLayoutRect_CforTextBlock_CglyphRange_C(NSLayoutManager *_self, struct _NSRect rect, NSTextBlock* block, struct _NSRange glyphRange);

// method '-[NSLayoutManager setLineFragmentRect:forGlyphRange:usedRect:]'
void _IM_NSLayoutManager_setLineFragmentRect_CforGlyphRange_CusedRect_C(NSLayoutManager *_self, struct _NSRect fragmentRect, struct _NSRange glyphRange, struct _NSRect usedRect);

// method '-[NSLayoutManager setLocation:forStartOfGlyphRange:]'
void _IM_NSLayoutManager_setLocation_CforStartOfGlyphRange_C(NSLayoutManager *_self, struct _NSPoint location, struct _NSRange glyphRange);

// method '-[NSLayoutManager setNotShownAttribute:forGlyphAtIndex:]'
void _IM_NSLayoutManager_setNotShownAttribute_CforGlyphAtIndex_C(NSLayoutManager *_self, BOOL flag, unsigned int glyphIndex);

// method '-[NSLayoutManager setShowsControlCharacters:]'
void _IM_NSLayoutManager_setShowsControlCharacters_C(NSLayoutManager *_self, BOOL flag);

// method '-[NSLayoutManager setShowsInvisibleCharacters:]'
void _IM_NSLayoutManager_setShowsInvisibleCharacters_C(NSLayoutManager *_self, BOOL flag);

// method '-[NSLayoutManager setTemporaryAttributes:forCharacterRange:]'
void _IM_NSLayoutManager_setTemporaryAttributes_CforCharacterRange_C(NSLayoutManager *_self, id attrs, struct _NSRange charRange);

// method '-[NSLayoutManager setTextContainer:forGlyphRange:]'
void _IM_NSLayoutManager_setTextContainer_CforGlyphRange_C(NSLayoutManager *_self, NSTextContainer* container, struct _NSRange glyphRange);

// method '-[NSLayoutManager setTextStorage:]'
void _IM_NSLayoutManager_setTextStorage_C(NSLayoutManager *_self, NSTextStorage* textStorage);

// method '-[NSLayoutManager setTypesetter:]'
void _IM_NSLayoutManager_setTypesetter_C(NSLayoutManager *_self, NSTypesetter* typesetter);

// method '-[NSLayoutManager setTypesetterBehavior:]'
void _IM_NSLayoutManager_setTypesetterBehavior_C(NSLayoutManager *_self, int theBehavior);

// method '-[NSLayoutManager setUsesScreenFonts:]'
void _IM_NSLayoutManager_setUsesScreenFonts_C(NSLayoutManager *_self, BOOL flag);

// method '-[NSLayoutManager showAttachmentCell:inRect:characterIndex:]'
void _IM_NSLayoutManager_showAttachmentCell_CinRect_CcharacterIndex_C(NSLayoutManager *_self, NSCell* cell, struct _NSRect rect, unsigned int attachmentIndex);

// method '-[NSLayoutManager showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:]'
void _IM_NSLayoutManager_showPackedGlyphs_Clength_CglyphRange_CatPoint_Cfont_Ccolor_CprintingAdjustment_C(NSLayoutManager *_self, char* glyphs, unsigned int glyphLen, struct _NSRange glyphRange, struct _NSPoint point, NSFont* font, NSColor* color, struct _NSSize printingAdjustment);

// method '-[NSLayoutManager showsControlCharacters]'
BOOL _IM_NSLayoutManager_showsControlCharacters(NSLayoutManager *_self);

// method '-[NSLayoutManager showsInvisibleCharacters]'
BOOL _IM_NSLayoutManager_showsInvisibleCharacters(NSLayoutManager *_self);

// method '-[NSLayoutManager strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void _IM_NSLayoutManager_strikethroughGlyphRange_CstrikethroughType_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(NSLayoutManager *_self, struct _NSRange glyphRange, int strikethroughVal, struct _NSRect lineRect, struct _NSRange lineGlyphRange, struct _NSPoint containerOrigin);

// method '-[NSLayoutManager substituteFontForFont:]'
NSFont* _IM_NSLayoutManager_substituteFontForFont_C(NSLayoutManager *_self, NSFont* originalFont);

// method '-[NSLayoutManager temporaryAttributesAtCharacterIndex:effectiveRange:]'
id _IM_NSLayoutManager_temporaryAttributesAtCharacterIndex_CeffectiveRange_C(NSLayoutManager *_self, unsigned int charIndex, struct _NSRange *effectiveCharRange);

// method '-[NSLayoutManager textContainerChangedGeometry:]'
void _IM_NSLayoutManager_textContainerChangedGeometry_C(NSLayoutManager *_self, NSTextContainer* container);

// method '-[NSLayoutManager textContainerChangedTextView:]'
void _IM_NSLayoutManager_textContainerChangedTextView_C(NSLayoutManager *_self, NSTextContainer* container);

// method '-[NSLayoutManager textContainerForGlyphAtIndex:effectiveRange:]'
NSTextContainer* _IM_NSLayoutManager_textContainerForGlyphAtIndex_CeffectiveRange_C(NSLayoutManager *_self, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange);

// method '-[NSLayoutManager textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:]'
NSTextContainer* _IM_NSLayoutManager_textContainerForGlyphAtIndex_CeffectiveRange_CwithoutAdditionalLayout_C(NSLayoutManager *_self, unsigned int glyphIndex, struct _NSRange *effectiveGlyphRange, BOOL flag);

// method '-[NSLayoutManager textContainers]'
id _IM_NSLayoutManager_textContainers(NSLayoutManager *_self);

// method '-[NSLayoutManager textStorage]'
NSTextStorage* _IM_NSLayoutManager_textStorage(NSLayoutManager *_self);

// method '-[NSLayoutManager textStorage:edited:range:changeInLength:invalidatedRange:]'
void _IM_NSLayoutManager_textStorage_Cedited_Crange_CchangeInLength_CinvalidatedRange_C(NSLayoutManager *_self, NSTextStorage* str, unsigned int editedMask, struct _NSRange newCharRange, int delta, struct _NSRange invalidatedCharRange);

// method '-[NSLayoutManager textViewForBeginningOfSelection]'
NSTextView* _IM_NSLayoutManager_textViewForBeginningOfSelection(NSLayoutManager *_self);

// method '-[NSLayoutManager typesetter]'
NSTypesetter* _IM_NSLayoutManager_typesetter(NSLayoutManager *_self);

// method '-[NSLayoutManager typesetterBehavior]'
int _IM_NSLayoutManager_typesetterBehavior(NSLayoutManager *_self);

// method '-[NSLayoutManager underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:]'
void _IM_NSLayoutManager_underlineGlyphRange_CunderlineType_ClineFragmentRect_ClineFragmentGlyphRange_CcontainerOrigin_C(NSLayoutManager *_self, struct _NSRange glyphRange, int underlineVal, struct _NSRect lineRect, struct _NSRange lineGlyphRange, struct _NSPoint containerOrigin);

// method '-[NSLayoutManager usedRectForTextContainer:]'
struct _NSRect _IM_NSLayoutManager_usedRectForTextContainer_C(NSLayoutManager *_self, NSTextContainer* container);

// method '-[NSLayoutManager usesScreenFonts]'
BOOL _IM_NSLayoutManager_usesScreenFonts(NSLayoutManager *_self);

// method '-[NSLevelIndicator criticalValue]'
double _IM_NSLevelIndicator_criticalValue(NSLevelIndicator *_self);

// method '-[NSLevelIndicator maxValue]'
double _IM_NSLevelIndicator_maxValue(NSLevelIndicator *_self);

// method '-[NSLevelIndicator minValue]'
double _IM_NSLevelIndicator_minValue(NSLevelIndicator *_self);

// method '-[NSLevelIndicator numberOfMajorTickMarks]'
int _IM_NSLevelIndicator_numberOfMajorTickMarks(NSLevelIndicator *_self);

// method '-[NSLevelIndicator numberOfTickMarks]'
int _IM_NSLevelIndicator_numberOfTickMarks(NSLevelIndicator *_self);

// method '-[NSLevelIndicator rectOfTickMarkAtIndex:]'
struct _NSRect _IM_NSLevelIndicator_rectOfTickMarkAtIndex_C(NSLevelIndicator *_self, int index);

// method '-[NSLevelIndicator setCriticalValue:]'
void _IM_NSLevelIndicator_setCriticalValue_C(NSLevelIndicator *_self, double criticalValue);

// method '-[NSLevelIndicator setMaxValue:]'
void _IM_NSLevelIndicator_setMaxValue_C(NSLevelIndicator *_self, double maxValue);

// method '-[NSLevelIndicator setMinValue:]'
void _IM_NSLevelIndicator_setMinValue_C(NSLevelIndicator *_self, double minValue);

// method '-[NSLevelIndicator setNumberOfMajorTickMarks:]'
void _IM_NSLevelIndicator_setNumberOfMajorTickMarks_C(NSLevelIndicator *_self, int count);

// method '-[NSLevelIndicator setNumberOfTickMarks:]'
void _IM_NSLevelIndicator_setNumberOfTickMarks_C(NSLevelIndicator *_self, int count);

// method '-[NSLevelIndicator setTickMarkPosition:]'
void _IM_NSLevelIndicator_setTickMarkPosition_C(NSLevelIndicator *_self, int position);

// method '-[NSLevelIndicator setWarningValue:]'
void _IM_NSLevelIndicator_setWarningValue_C(NSLevelIndicator *_self, double warningValue);

// method '-[NSLevelIndicator tickMarkPosition]'
int _IM_NSLevelIndicator_tickMarkPosition(NSLevelIndicator *_self);

// method '-[NSLevelIndicator tickMarkValueAtIndex:]'
double _IM_NSLevelIndicator_tickMarkValueAtIndex_C(NSLevelIndicator *_self, int index);

// method '-[NSLevelIndicator warningValue]'
double _IM_NSLevelIndicator_warningValue(NSLevelIndicator *_self);

// method '-[NSLevelIndicatorCell criticalValue]'
double _IM_NSLevelIndicatorCell_criticalValue(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell initWithLevelIndicatorStyle:]'
NSLevelIndicatorCell *_IM_NSLevelIndicatorCell_initWithLevelIndicatorStyle_C(NSLevelIndicatorCell *_self, int levelIndicatorStyle);

// method '-[NSLevelIndicatorCell levelIndicatorStyle]'
int _IM_NSLevelIndicatorCell_levelIndicatorStyle(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell maxValue]'
double _IM_NSLevelIndicatorCell_maxValue(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell minValue]'
double _IM_NSLevelIndicatorCell_minValue(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell numberOfMajorTickMarks]'
int _IM_NSLevelIndicatorCell_numberOfMajorTickMarks(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell numberOfTickMarks]'
int _IM_NSLevelIndicatorCell_numberOfTickMarks(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell rectOfTickMarkAtIndex:]'
struct _NSRect _IM_NSLevelIndicatorCell_rectOfTickMarkAtIndex_C(NSLevelIndicatorCell *_self, int index);

// method '-[NSLevelIndicatorCell setCriticalValue:]'
void _IM_NSLevelIndicatorCell_setCriticalValue_C(NSLevelIndicatorCell *_self, double criticalValue);

// method '-[NSLevelIndicatorCell setImage:]'
void _IM_NSLevelIndicatorCell_setImage_C(NSLevelIndicatorCell *_self, NSImage* image);

// method '-[NSLevelIndicatorCell setLevelIndicatorStyle:]'
void _IM_NSLevelIndicatorCell_setLevelIndicatorStyle_C(NSLevelIndicatorCell *_self, int levelIndicatorStyle);

// method '-[NSLevelIndicatorCell setMaxValue:]'
void _IM_NSLevelIndicatorCell_setMaxValue_C(NSLevelIndicatorCell *_self, double maxValue);

// method '-[NSLevelIndicatorCell setMinValue:]'
void _IM_NSLevelIndicatorCell_setMinValue_C(NSLevelIndicatorCell *_self, double minValue);

// method '-[NSLevelIndicatorCell setNumberOfMajorTickMarks:]'
void _IM_NSLevelIndicatorCell_setNumberOfMajorTickMarks_C(NSLevelIndicatorCell *_self, int count);

// method '-[NSLevelIndicatorCell setNumberOfTickMarks:]'
void _IM_NSLevelIndicatorCell_setNumberOfTickMarks_C(NSLevelIndicatorCell *_self, int count);

// method '-[NSLevelIndicatorCell setTickMarkPosition:]'
void _IM_NSLevelIndicatorCell_setTickMarkPosition_C(NSLevelIndicatorCell *_self, int position);

// method '-[NSLevelIndicatorCell setWarningValue:]'
void _IM_NSLevelIndicatorCell_setWarningValue_C(NSLevelIndicatorCell *_self, double warningValue);

// method '-[NSLevelIndicatorCell tickMarkPosition]'
int _IM_NSLevelIndicatorCell_tickMarkPosition(NSLevelIndicatorCell *_self);

// method '-[NSLevelIndicatorCell tickMarkValueAtIndex:]'
double _IM_NSLevelIndicatorCell_tickMarkValueAtIndex_C(NSLevelIndicatorCell *_self, int index);

// method '-[NSLevelIndicatorCell warningValue]'
double _IM_NSLevelIndicatorCell_warningValue(NSLevelIndicatorCell *_self);

// method '-[NSMatrix acceptsFirstMouse:]'
BOOL _IM_NSMatrix_acceptsFirstMouse_C(NSMatrix *_self, NSEvent* theEvent);

// method '-[NSMatrix addColumn]'
void _IM_NSMatrix_addColumn(NSMatrix *_self);

// method '-[NSMatrix addColumnWithCells:]'
void _IM_NSMatrix_addColumnWithCells_C(NSMatrix *_self, id newCells);

// method '-[NSMatrix addRow]'
void _IM_NSMatrix_addRow(NSMatrix *_self);

// method '-[NSMatrix addRowWithCells:]'
void _IM_NSMatrix_addRowWithCells_C(NSMatrix *_self, id newCells);

// method '-[NSMatrix allowsEmptySelection]'
BOOL _IM_NSMatrix_allowsEmptySelection(NSMatrix *_self);

// method '-[NSMatrix autosizesCells]'
BOOL _IM_NSMatrix_autosizesCells(NSMatrix *_self);

// method '-[NSMatrix backgroundColor]'
NSColor* _IM_NSMatrix_backgroundColor(NSMatrix *_self);

// method '-[NSMatrix cellAtRow:column:]'
id _IM_NSMatrix_cellAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix cellBackgroundColor]'
NSColor* _IM_NSMatrix_cellBackgroundColor(NSMatrix *_self);

// method '-[NSMatrix cellClass]'
Class _IM_NSMatrix_cellClass(NSMatrix *_self);

// method '-[NSMatrix cellFrameAtRow:column:]'
struct _NSRect _IM_NSMatrix_cellFrameAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix cellSize]'
struct _NSSize _IM_NSMatrix_cellSize(NSMatrix *_self);

// method '-[NSMatrix cellWithTag:]'
id _IM_NSMatrix_cellWithTag_C(NSMatrix *_self, int anInt);

// method '-[NSMatrix cells]'
id _IM_NSMatrix_cells(NSMatrix *_self);

// method '-[NSMatrix delegate]'
id _IM_NSMatrix_delegate(NSMatrix *_self);

// method '-[NSMatrix deselectAllCells]'
void _IM_NSMatrix_deselectAllCells(NSMatrix *_self);

// method '-[NSMatrix deselectSelectedCell]'
void _IM_NSMatrix_deselectSelectedCell(NSMatrix *_self);

// method '-[NSMatrix doubleAction]'
SEL _IM_NSMatrix_doubleAction(NSMatrix *_self);

// method '-[NSMatrix drawCellAtRow:column:]'
void _IM_NSMatrix_drawCellAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix drawsBackground]'
BOOL _IM_NSMatrix_drawsBackground(NSMatrix *_self);

// method '-[NSMatrix drawsCellBackground]'
BOOL _IM_NSMatrix_drawsCellBackground(NSMatrix *_self);

// method '-[NSMatrix getNumberOfRows:columns:]'
void _IM_NSMatrix_getNumberOfRows_Ccolumns_C(NSMatrix *_self, int *rowCount, int *colCount);

// method '-[NSMatrix getRow:column:forPoint:]'
BOOL _IM_NSMatrix_getRow_Ccolumn_CforPoint_C(NSMatrix *_self, int *row, int *col, struct _NSPoint aPoint);

// method '-[NSMatrix getRow:column:ofCell:]'
BOOL _IM_NSMatrix_getRow_Ccolumn_CofCell_C(NSMatrix *_self, int *row, int *col, NSCell* aCell);

// method '-[NSMatrix highlightCell:atRow:column:]'
void _IM_NSMatrix_highlightCell_CatRow_Ccolumn_C(NSMatrix *_self, BOOL flag, int row, int col);

// method '-[NSMatrix initWithFrame:]'
NSMatrix *_IM_NSMatrix_initWithFrame_C(NSMatrix *_self, struct _NSRect frameRect);

// method '-[NSMatrix initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:]'
NSMatrix *_IM_NSMatrix_initWithFrame_Cmode_CcellClass_CnumberOfRows_CnumberOfColumns_C(NSMatrix *_self, struct _NSRect frameRect, int aMode, Class factoryId, int rowsHigh, int colsWide);

// method '-[NSMatrix initWithFrame:mode:prototype:numberOfRows:numberOfColumns:]'
NSMatrix *_IM_NSMatrix_initWithFrame_Cmode_Cprototype_CnumberOfRows_CnumberOfColumns_C(NSMatrix *_self, struct _NSRect frameRect, int aMode, NSCell* aCell, int rowsHigh, int colsWide);

// method '-[NSMatrix insertColumn:]'
void _IM_NSMatrix_insertColumn_C(NSMatrix *_self, int column);

// method '-[NSMatrix insertColumn:withCells:]'
void _IM_NSMatrix_insertColumn_CwithCells_C(NSMatrix *_self, int column, id newCells);

// method '-[NSMatrix insertRow:]'
void _IM_NSMatrix_insertRow_C(NSMatrix *_self, int row);

// method '-[NSMatrix insertRow:withCells:]'
void _IM_NSMatrix_insertRow_CwithCells_C(NSMatrix *_self, int row, id newCells);

// method '-[NSMatrix intercellSpacing]'
struct _NSSize _IM_NSMatrix_intercellSpacing(NSMatrix *_self);

// method '-[NSMatrix isAutoscroll]'
BOOL _IM_NSMatrix_isAutoscroll(NSMatrix *_self);

// method '-[NSMatrix isSelectionByRect]'
BOOL _IM_NSMatrix_isSelectionByRect(NSMatrix *_self);

// method '-[NSMatrix keyCell]'
id _IM_NSMatrix_keyCell(NSMatrix *_self);

// method '-[NSMatrix makeCellAtRow:column:]'
NSCell* _IM_NSMatrix_makeCellAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix mode]'
int _IM_NSMatrix_mode(NSMatrix *_self);

// method '-[NSMatrix mouseDown:]'
void _IM_NSMatrix_mouseDown_C(NSMatrix *_self, NSEvent* theEvent);

// method '-[NSMatrix mouseDownFlags]'
int _IM_NSMatrix_mouseDownFlags(NSMatrix *_self);

// method '-[NSMatrix numberOfColumns]'
int _IM_NSMatrix_numberOfColumns(NSMatrix *_self);

// method '-[NSMatrix numberOfRows]'
int _IM_NSMatrix_numberOfRows(NSMatrix *_self);

// method '-[NSMatrix performKeyEquivalent:]'
BOOL _IM_NSMatrix_performKeyEquivalent_C(NSMatrix *_self, NSEvent* theEvent);

// method '-[NSMatrix prototype]'
id _IM_NSMatrix_prototype(NSMatrix *_self);

// method '-[NSMatrix putCell:atRow:column:]'
void _IM_NSMatrix_putCell_CatRow_Ccolumn_C(NSMatrix *_self, NSCell* newCell, int row, int col);

// method '-[NSMatrix removeColumn:]'
void _IM_NSMatrix_removeColumn_C(NSMatrix *_self, int col);

// method '-[NSMatrix removeRow:]'
void _IM_NSMatrix_removeRow_C(NSMatrix *_self, int row);

// method '-[NSMatrix renewRows:columns:]'
void _IM_NSMatrix_renewRows_Ccolumns_C(NSMatrix *_self, int newRows, int newCols);

// method '-[NSMatrix resetCursorRects]'
void _IM_NSMatrix_resetCursorRects(NSMatrix *_self);

// method '-[NSMatrix scrollCellToVisibleAtRow:column:]'
void _IM_NSMatrix_scrollCellToVisibleAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix selectAll:]'
void _IM_NSMatrix_selectAll_C(NSMatrix *_self, id sender);

// method '-[NSMatrix selectCellAtRow:column:]'
void _IM_NSMatrix_selectCellAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix selectCellWithTag:]'
BOOL _IM_NSMatrix_selectCellWithTag_C(NSMatrix *_self, int anInt);

// method '-[NSMatrix selectText:]'
void _IM_NSMatrix_selectText_C(NSMatrix *_self, id sender);

// method '-[NSMatrix selectTextAtRow:column:]'
id _IM_NSMatrix_selectTextAtRow_Ccolumn_C(NSMatrix *_self, int row, int col);

// method '-[NSMatrix selectedCell]'
id _IM_NSMatrix_selectedCell(NSMatrix *_self);

// method '-[NSMatrix selectedCells]'
id _IM_NSMatrix_selectedCells(NSMatrix *_self);

// method '-[NSMatrix selectedColumn]'
int _IM_NSMatrix_selectedColumn(NSMatrix *_self);

// method '-[NSMatrix selectedRow]'
int _IM_NSMatrix_selectedRow(NSMatrix *_self);

// method '-[NSMatrix sendAction]'
BOOL _IM_NSMatrix_sendAction(NSMatrix *_self);

// method '-[NSMatrix sendAction:to:forAllCells:]'
void _IM_NSMatrix_sendAction_Cto_CforAllCells_C(NSMatrix *_self, SEL aSelector, id anObject, BOOL flag);

// method '-[NSMatrix sendDoubleAction]'
void _IM_NSMatrix_sendDoubleAction(NSMatrix *_self);

// method '-[NSMatrix setAllowsEmptySelection:]'
void _IM_NSMatrix_setAllowsEmptySelection_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setAutoscroll:]'
void _IM_NSMatrix_setAutoscroll_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setAutosizesCells:]'
void _IM_NSMatrix_setAutosizesCells_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setBackgroundColor:]'
void _IM_NSMatrix_setBackgroundColor_C(NSMatrix *_self, NSColor* color);

// method '-[NSMatrix setCellBackgroundColor:]'
void _IM_NSMatrix_setCellBackgroundColor_C(NSMatrix *_self, NSColor* color);

// method '-[NSMatrix setCellClass:]'
void _IM_NSMatrix_setCellClass_C(NSMatrix *_self, Class factoryId);

// method '-[NSMatrix setCellSize:]'
void _IM_NSMatrix_setCellSize_C(NSMatrix *_self, struct _NSSize aSize);

// method '-[NSMatrix setDelegate:]'
void _IM_NSMatrix_setDelegate_C(NSMatrix *_self, id anObject);

// method '-[NSMatrix setDoubleAction:]'
void _IM_NSMatrix_setDoubleAction_C(NSMatrix *_self, SEL aSelector);

// method '-[NSMatrix setDrawsBackground:]'
void _IM_NSMatrix_setDrawsBackground_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setDrawsCellBackground:]'
void _IM_NSMatrix_setDrawsCellBackground_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setIntercellSpacing:]'
void _IM_NSMatrix_setIntercellSpacing_C(NSMatrix *_self, struct _NSSize aSize);

// method '-[NSMatrix setKeyCell:]'
void _IM_NSMatrix_setKeyCell_C(NSMatrix *_self, NSCell* keyCell);

// method '-[NSMatrix setMode:]'
void _IM_NSMatrix_setMode_C(NSMatrix *_self, int aMode);

// method '-[NSMatrix setPrototype:]'
void _IM_NSMatrix_setPrototype_C(NSMatrix *_self, NSCell* aCell);

// method '-[NSMatrix setScrollable:]'
void _IM_NSMatrix_setScrollable_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setSelectionByRect:]'
void _IM_NSMatrix_setSelectionByRect_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setSelectionFrom:to:anchor:highlight:]'
void _IM_NSMatrix_setSelectionFrom_Cto_Canchor_Chighlight_C(NSMatrix *_self, int startPos, int endPos, int anchorPos, BOOL lit);

// method '-[NSMatrix setState:atRow:column:]'
void _IM_NSMatrix_setState_CatRow_Ccolumn_C(NSMatrix *_self, int value, int row, int col);

// method '-[NSMatrix setTabKeyTraversesCells:]'
void _IM_NSMatrix_setTabKeyTraversesCells_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix setToolTip:forCell:]'
void _IM_NSMatrix_setToolTip_CforCell_C(NSMatrix *_self, NSString* toolTipString, NSCell* cell);

// method '-[NSMatrix setValidateSize:]'
void _IM_NSMatrix_setValidateSize_C(NSMatrix *_self, BOOL flag);

// method '-[NSMatrix sizeToCells]'
void _IM_NSMatrix_sizeToCells(NSMatrix *_self);

// method '-[NSMatrix sortUsingSelector:]'
void _IM_NSMatrix_sortUsingSelector_C(NSMatrix *_self, SEL comparator);

// method '-[NSMatrix tabKeyTraversesCells]'
BOOL _IM_NSMatrix_tabKeyTraversesCells(NSMatrix *_self);

// method '-[NSMatrix textDidBeginEditing:]'
void _IM_NSMatrix_textDidBeginEditing_C(NSMatrix *_self, id notification);

// method '-[NSMatrix textDidChange:]'
void _IM_NSMatrix_textDidChange_C(NSMatrix *_self, id notification);

// method '-[NSMatrix textDidEndEditing:]'
void _IM_NSMatrix_textDidEndEditing_C(NSMatrix *_self, id notification);

// method '-[NSMatrix textShouldBeginEditing:]'
BOOL _IM_NSMatrix_textShouldBeginEditing_C(NSMatrix *_self, NSText* textObject);

// method '-[NSMatrix textShouldEndEditing:]'
BOOL _IM_NSMatrix_textShouldEndEditing_C(NSMatrix *_self, NSText* textObject);

// method '-[NSMatrix toolTipForCell:]'
NSString* _IM_NSMatrix_toolTipForCell_C(NSMatrix *_self, NSCell* cell);

// method '-[NSMenu addItem:]'
void _IM_NSMenu_addItem_C(NSMenu *_self, id newItem);

// method '-[NSMenu addItemWithTitle:action:keyEquivalent:]'
id _IM_NSMenu_addItemWithTitle_Caction_CkeyEquivalent_C(NSMenu *_self, NSString* aString, SEL aSelector, NSString* charCode);

// method '-[NSMenu attachedMenu]'
NSMenu* _IM_NSMenu_attachedMenu(NSMenu *_self);

// method '-[NSMenu autoenablesItems]'
BOOL _IM_NSMenu_autoenablesItems(NSMenu *_self);

// method '-[NSMenu contextMenuRepresentation]'
id _IM_NSMenu_contextMenuRepresentation(NSMenu *_self);

// method '-[NSMenu delegate]'
id _IM_NSMenu_delegate(NSMenu *_self);

// method '-[NSMenu helpRequested:]'
void _IM_NSMenu_helpRequested_C(NSMenu *_self, NSEvent* eventPtr);

// method '-[NSMenu indexOfItem:]'
int _IM_NSMenu_indexOfItem_C(NSMenu *_self, id index);

// method '-[NSMenu indexOfItemWithRepresentedObject:]'
int _IM_NSMenu_indexOfItemWithRepresentedObject_C(NSMenu *_self, id object);

// method '-[NSMenu indexOfItemWithSubmenu:]'
int _IM_NSMenu_indexOfItemWithSubmenu_C(NSMenu *_self, NSMenu* submenu);

// method '-[NSMenu indexOfItemWithTag:]'
int _IM_NSMenu_indexOfItemWithTag_C(NSMenu *_self, int aTag);

// method '-[NSMenu indexOfItemWithTarget:andAction:]'
int _IM_NSMenu_indexOfItemWithTarget_CandAction_C(NSMenu *_self, id target, SEL actionSelector);

// method '-[NSMenu indexOfItemWithTitle:]'
int _IM_NSMenu_indexOfItemWithTitle_C(NSMenu *_self, NSString* aTitle);

// method '-[NSMenu initWithTitle:]'
NSMenu *_IM_NSMenu_initWithTitle_C(NSMenu *_self, NSString* aTitle);

// method '-[NSMenu insertItem:atIndex:]'
void _IM_NSMenu_insertItem_CatIndex_C(NSMenu *_self, id newItem, int index);

// method '-[NSMenu insertItemWithTitle:action:keyEquivalent:atIndex:]'
id _IM_NSMenu_insertItemWithTitle_Caction_CkeyEquivalent_CatIndex_C(NSMenu *_self, NSString* aString, SEL aSelector, NSString* charCode, int index);

// method '-[NSMenu isAttached]'
BOOL _IM_NSMenu_isAttached(NSMenu *_self);

// method '-[NSMenu isTornOff]'
BOOL _IM_NSMenu_isTornOff(NSMenu *_self);

// method '-[NSMenu itemArray]'
id _IM_NSMenu_itemArray(NSMenu *_self);

// method '-[NSMenu itemAtIndex:]'
id _IM_NSMenu_itemAtIndex_C(NSMenu *_self, int index);

// method '-[NSMenu itemChanged:]'
void _IM_NSMenu_itemChanged_C(NSMenu *_self, id item);

// method '-[NSMenu itemWithTag:]'
id _IM_NSMenu_itemWithTag_C(NSMenu *_self, int tag);

// method '-[NSMenu itemWithTitle:]'
id _IM_NSMenu_itemWithTitle_C(NSMenu *_self, NSString* aTitle);

// method '-[NSMenu locationForSubmenu:]'
struct _NSPoint _IM_NSMenu_locationForSubmenu_C(NSMenu *_self, NSMenu* aSubmenu);

// method '-[NSMenu menuBarHeight]'
float _IM_NSMenu_menuBarHeight(NSMenu *_self);

// method '+[NSMenu menuBarVisible]'
BOOL _CM_NSMenu_menuBarVisible(Class _class);

// method '-[NSMenu menuChangedMessagesEnabled]'
BOOL _IM_NSMenu_menuChangedMessagesEnabled(NSMenu *_self);

// method '-[NSMenu menuRepresentation]'
id _IM_NSMenu_menuRepresentation(NSMenu *_self);

// method '+[NSMenu menuZone]'
struct _NSZone *_CM_NSMenu_menuZone(Class _class);

// method '-[NSMenu numberOfItems]'
int _IM_NSMenu_numberOfItems(NSMenu *_self);

// method '-[NSMenu performActionForItemAtIndex:]'
void _IM_NSMenu_performActionForItemAtIndex_C(NSMenu *_self, int index);

// method '-[NSMenu performKeyEquivalent:]'
BOOL _IM_NSMenu_performKeyEquivalent_C(NSMenu *_self, NSEvent* theEvent);

// method '+[NSMenu popUpContextMenu:withEvent:forView:]'
void _CM_NSMenu_popUpContextMenu_CwithEvent_CforView_C(Class _class, NSMenu* menu, NSEvent* event, NSView* view);

// method '+[NSMenu popUpContextMenu:withEvent:forView:withFont:]'
void _CM_NSMenu_popUpContextMenu_CwithEvent_CforView_CwithFont_C(Class _class, NSMenu* menu, NSEvent* event, NSView* view, NSFont* font);

// method '-[NSMenu removeItem:]'
void _IM_NSMenu_removeItem_C(NSMenu *_self, id item);

// method '-[NSMenu removeItemAtIndex:]'
void _IM_NSMenu_removeItemAtIndex_C(NSMenu *_self, int index);

// method '-[NSMenu setAutoenablesItems:]'
void _IM_NSMenu_setAutoenablesItems_C(NSMenu *_self, BOOL flag);

// method '-[NSMenu setContextMenuRepresentation:]'
void _IM_NSMenu_setContextMenuRepresentation_C(NSMenu *_self, id menuRep);

// method '-[NSMenu setDelegate:]'
void _IM_NSMenu_setDelegate_C(NSMenu *_self, id anObject);

// method '+[NSMenu setMenuBarVisible:]'
void _CM_NSMenu_setMenuBarVisible_C(Class _class, BOOL visible);

// method '-[NSMenu setMenuChangedMessagesEnabled:]'
void _IM_NSMenu_setMenuChangedMessagesEnabled_C(NSMenu *_self, BOOL flag);

// method '-[NSMenu setMenuRepresentation:]'
void _IM_NSMenu_setMenuRepresentation_C(NSMenu *_self, id menuRep);

// method '+[NSMenu setMenuZone:]'
void _CM_NSMenu_setMenuZone_C(Class _class, struct _NSZone *aZone);

// method '-[NSMenu setSubmenu:forItem:]'
void _IM_NSMenu_setSubmenu_CforItem_C(NSMenu *_self, NSMenu* aMenu, id anItem);

// method '-[NSMenu setSupermenu:]'
void _IM_NSMenu_setSupermenu_C(NSMenu *_self, NSMenu* supermenu);

// method '-[NSMenu setTearOffMenuRepresentation:]'
void _IM_NSMenu_setTearOffMenuRepresentation_C(NSMenu *_self, id menuRep);

// method '-[NSMenu setTitle:]'
void _IM_NSMenu_setTitle_C(NSMenu *_self, NSString* aString);

// method '-[NSMenu sizeToFit]'
void _IM_NSMenu_sizeToFit(NSMenu *_self);

// method '-[NSMenu submenuAction:]'
void _IM_NSMenu_submenuAction_C(NSMenu *_self, id sender);

// method '-[NSMenu supermenu]'
NSMenu* _IM_NSMenu_supermenu(NSMenu *_self);

// method '-[NSMenu tearOffMenuRepresentation]'
id _IM_NSMenu_tearOffMenuRepresentation(NSMenu *_self);

// method '-[NSMenu title]'
NSString* _IM_NSMenu_title(NSMenu *_self);

// method '-[NSMenu update]'
void _IM_NSMenu_update(NSMenu *_self);

// method '-[NSMenuItem action]'
SEL _IM_NSMenuItem_action(NSMenuItem *_self);

// method '-[NSMenuItem attributedTitle]'
NSAttributedString* _IM_NSMenuItem_attributedTitle(NSMenuItem *_self);

// method '-[NSMenuItem hasSubmenu]'
BOOL _IM_NSMenuItem_hasSubmenu(NSMenuItem *_self);

// method '-[NSMenuItem image]'
NSImage* _IM_NSMenuItem_image(NSMenuItem *_self);

// method '-[NSMenuItem indentationLevel]'
int _IM_NSMenuItem_indentationLevel(NSMenuItem *_self);

// method '-[NSMenuItem initWithTitle:action:keyEquivalent:]'
NSMenuItem *_IM_NSMenuItem_initWithTitle_Caction_CkeyEquivalent_C(NSMenuItem *_self, NSString* aString, SEL aSelector, NSString* charCode);

// method '-[NSMenuItem isAlternate]'
BOOL _IM_NSMenuItem_isAlternate(NSMenuItem *_self);

// method '-[NSMenuItem isEnabled]'
BOOL _IM_NSMenuItem_isEnabled(NSMenuItem *_self);

// method '-[NSMenuItem isSeparatorItem]'
BOOL _IM_NSMenuItem_isSeparatorItem(NSMenuItem *_self);

// method '-[NSMenuItem keyEquivalent]'
NSString* _IM_NSMenuItem_keyEquivalent(NSMenuItem *_self);

// method '-[NSMenuItem keyEquivalentModifierMask]'
unsigned int _IM_NSMenuItem_keyEquivalentModifierMask(NSMenuItem *_self);

// method '-[NSMenuItem menu]'
NSMenu* _IM_NSMenuItem_menu(NSMenuItem *_self);

// method '-[NSMenuItem mixedStateImage]'
NSImage* _IM_NSMenuItem_mixedStateImage(NSMenuItem *_self);

// method '-[NSMenuItem mnemonic]'
NSString* _IM_NSMenuItem_mnemonic(NSMenuItem *_self);

// method '-[NSMenuItem mnemonicLocation]'
unsigned int _IM_NSMenuItem_mnemonicLocation(NSMenuItem *_self);

// method '-[NSMenuItem offStateImage]'
NSImage* _IM_NSMenuItem_offStateImage(NSMenuItem *_self);

// method '-[NSMenuItem onStateImage]'
NSImage* _IM_NSMenuItem_onStateImage(NSMenuItem *_self);

// method '-[NSMenuItem representedObject]'
id _IM_NSMenuItem_representedObject(NSMenuItem *_self);

// method '+[NSMenuItem separatorItem]'
id _CM_NSMenuItem_separatorItem(Class _class);

// method '-[NSMenuItem setAction:]'
void _IM_NSMenuItem_setAction_C(NSMenuItem *_self, SEL aSelector);

// method '-[NSMenuItem setAlternate:]'
void _IM_NSMenuItem_setAlternate_C(NSMenuItem *_self, BOOL isAlternate);

// method '-[NSMenuItem setAttributedTitle:]'
void _IM_NSMenuItem_setAttributedTitle_C(NSMenuItem *_self, NSAttributedString* string);

// method '-[NSMenuItem setEnabled:]'
void _IM_NSMenuItem_setEnabled_C(NSMenuItem *_self, BOOL flag);

// method '-[NSMenuItem setImage:]'
void _IM_NSMenuItem_setImage_C(NSMenuItem *_self, NSImage* menuImage);

// method '-[NSMenuItem setIndentationLevel:]'
void _IM_NSMenuItem_setIndentationLevel_C(NSMenuItem *_self, int indentationLevel);

// method '-[NSMenuItem setKeyEquivalent:]'
void _IM_NSMenuItem_setKeyEquivalent_C(NSMenuItem *_self, NSString* aKeyEquivalent);

// method '-[NSMenuItem setKeyEquivalentModifierMask:]'
void _IM_NSMenuItem_setKeyEquivalentModifierMask_C(NSMenuItem *_self, unsigned int mask);

// method '-[NSMenuItem setMenu:]'
void _IM_NSMenuItem_setMenu_C(NSMenuItem *_self, NSMenu* menu);

// method '-[NSMenuItem setMixedStateImage:]'
void _IM_NSMenuItem_setMixedStateImage_C(NSMenuItem *_self, NSImage* image);

// method '-[NSMenuItem setMnemonicLocation:]'
void _IM_NSMenuItem_setMnemonicLocation_C(NSMenuItem *_self, unsigned int location);

// method '-[NSMenuItem setOffStateImage:]'
void _IM_NSMenuItem_setOffStateImage_C(NSMenuItem *_self, NSImage* image);

// method '-[NSMenuItem setOnStateImage:]'
void _IM_NSMenuItem_setOnStateImage_C(NSMenuItem *_self, NSImage* image);

// method '-[NSMenuItem setRepresentedObject:]'
void _IM_NSMenuItem_setRepresentedObject_C(NSMenuItem *_self, id anObject);

// method '-[NSMenuItem setState:]'
void _IM_NSMenuItem_setState_C(NSMenuItem *_self, int state);

// method '-[NSMenuItem setSubmenu:]'
void _IM_NSMenuItem_setSubmenu_C(NSMenuItem *_self, NSMenu* submenu);

// method '-[NSMenuItem setTag:]'
void _IM_NSMenuItem_setTag_C(NSMenuItem *_self, int anInt);

// method '-[NSMenuItem setTarget:]'
void _IM_NSMenuItem_setTarget_C(NSMenuItem *_self, id anObject);

// method '-[NSMenuItem setTitle:]'
void _IM_NSMenuItem_setTitle_C(NSMenuItem *_self, NSString* aString);

// method '-[NSMenuItem setTitleWithMnemonic:]'
void _IM_NSMenuItem_setTitleWithMnemonic_C(NSMenuItem *_self, NSString* stringWithAmpersand);

// method '-[NSMenuItem setToolTip:]'
void _IM_NSMenuItem_setToolTip_C(NSMenuItem *_self, NSString* toolTip);

// method '+[NSMenuItem setUsesUserKeyEquivalents:]'
void _CM_NSMenuItem_setUsesUserKeyEquivalents_C(Class _class, BOOL flag);

// method '-[NSMenuItem state]'
int _IM_NSMenuItem_state(NSMenuItem *_self);

// method '-[NSMenuItem submenu]'
NSMenu* _IM_NSMenuItem_submenu(NSMenuItem *_self);

// method '-[NSMenuItem tag]'
int _IM_NSMenuItem_tag(NSMenuItem *_self);

// method '-[NSMenuItem target]'
id _IM_NSMenuItem_target(NSMenuItem *_self);

// method '-[NSMenuItem title]'
NSString* _IM_NSMenuItem_title(NSMenuItem *_self);

// method '-[NSMenuItem toolTip]'
NSString* _IM_NSMenuItem_toolTip(NSMenuItem *_self);

// method '-[NSMenuItem userKeyEquivalent]'
NSString* _IM_NSMenuItem_userKeyEquivalent(NSMenuItem *_self);

// method '+[NSMenuItem usesUserKeyEquivalents]'
BOOL _CM_NSMenuItem_usesUserKeyEquivalents(Class _class);

// method '-[NSMenuItemCell calcSize]'
void _IM_NSMenuItemCell_calcSize(NSMenuItemCell *_self);

// method '-[NSMenuItemCell drawBorderAndBackgroundWithFrame:inView:]'
void _IM_NSMenuItemCell_drawBorderAndBackgroundWithFrame_CinView_C(NSMenuItemCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSMenuItemCell drawImageWithFrame:inView:]'
void _IM_NSMenuItemCell_drawImageWithFrame_CinView_C(NSMenuItemCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSMenuItemCell drawKeyEquivalentWithFrame:inView:]'
void _IM_NSMenuItemCell_drawKeyEquivalentWithFrame_CinView_C(NSMenuItemCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSMenuItemCell drawSeparatorItemWithFrame:inView:]'
void _IM_NSMenuItemCell_drawSeparatorItemWithFrame_CinView_C(NSMenuItemCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSMenuItemCell drawStateImageWithFrame:inView:]'
void _IM_NSMenuItemCell_drawStateImageWithFrame_CinView_C(NSMenuItemCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSMenuItemCell drawTitleWithFrame:inView:]'
void _IM_NSMenuItemCell_drawTitleWithFrame_CinView_C(NSMenuItemCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSMenuItemCell imageRectForBounds:]'
struct _NSRect _IM_NSMenuItemCell_imageRectForBounds_C(NSMenuItemCell *_self, struct _NSRect cellFrame);

// method '-[NSMenuItemCell imageWidth]'
float _IM_NSMenuItemCell_imageWidth(NSMenuItemCell *_self);

// method '-[NSMenuItemCell isHighlighted]'
BOOL _IM_NSMenuItemCell_isHighlighted(NSMenuItemCell *_self);

// method '-[NSMenuItemCell keyEquivalentRectForBounds:]'
struct _NSRect _IM_NSMenuItemCell_keyEquivalentRectForBounds_C(NSMenuItemCell *_self, struct _NSRect cellFrame);

// method '-[NSMenuItemCell keyEquivalentWidth]'
float _IM_NSMenuItemCell_keyEquivalentWidth(NSMenuItemCell *_self);

// method '-[NSMenuItemCell menuItem]'
NSMenuItem* _IM_NSMenuItemCell_menuItem(NSMenuItemCell *_self);

// method '-[NSMenuItemCell menuView]'
id _IM_NSMenuItemCell_menuView(NSMenuItemCell *_self);

// method '-[NSMenuItemCell needsDisplay]'
BOOL _IM_NSMenuItemCell_needsDisplay(NSMenuItemCell *_self);

// method '-[NSMenuItemCell needsSizing]'
BOOL _IM_NSMenuItemCell_needsSizing(NSMenuItemCell *_self);

// method '-[NSMenuItemCell setHighlighted:]'
void _IM_NSMenuItemCell_setHighlighted_C(NSMenuItemCell *_self, BOOL flag);

// method '-[NSMenuItemCell setMenuItem:]'
void _IM_NSMenuItemCell_setMenuItem_C(NSMenuItemCell *_self, NSMenuItem* item);

// method '-[NSMenuItemCell setMenuView:]'
void _IM_NSMenuItemCell_setMenuView_C(NSMenuItemCell *_self, id menuView);

// method '-[NSMenuItemCell setNeedsDisplay:]'
void _IM_NSMenuItemCell_setNeedsDisplay_C(NSMenuItemCell *_self, BOOL flag);

// method '-[NSMenuItemCell setNeedsSizing:]'
void _IM_NSMenuItemCell_setNeedsSizing_C(NSMenuItemCell *_self, BOOL flag);

// method '-[NSMenuItemCell stateImageRectForBounds:]'
struct _NSRect _IM_NSMenuItemCell_stateImageRectForBounds_C(NSMenuItemCell *_self, struct _NSRect cellFrame);

// method '-[NSMenuItemCell stateImageWidth]'
float _IM_NSMenuItemCell_stateImageWidth(NSMenuItemCell *_self);

// method '-[NSMenuItemCell tag]'
int _IM_NSMenuItemCell_tag(NSMenuItemCell *_self);

// method '-[NSMenuItemCell titleRectForBounds:]'
struct _NSRect _IM_NSMenuItemCell_titleRectForBounds_C(NSMenuItemCell *_self, struct _NSRect cellFrame);

// method '-[NSMenuItemCell titleWidth]'
float _IM_NSMenuItemCell_titleWidth(NSMenuItemCell *_self);

// method '-[NSMovieView clear:]'
void _IM_NSMovieView_clear_C(NSMovieView *_self, id sender);

// method '-[NSMovieView copy:]'
void _IM_NSMovieView_copy_C(NSMovieView *_self, id sender);

// method '-[NSMovieView cut:]'
void _IM_NSMovieView_cut_C(NSMovieView *_self, id sender);

// method '-[NSMovieView delete:]'
void _IM_NSMovieView_delete_C(NSMovieView *_self, id sender);

// method '-[NSMovieView gotoBeginning:]'
void _IM_NSMovieView_gotoBeginning_C(NSMovieView *_self, id sender);

// method '-[NSMovieView gotoEnd:]'
void _IM_NSMovieView_gotoEnd_C(NSMovieView *_self, id sender);

// method '-[NSMovieView gotoPosterFrame:]'
void _IM_NSMovieView_gotoPosterFrame_C(NSMovieView *_self, id sender);

// method '-[NSMovieView isControllerVisible]'
BOOL _IM_NSMovieView_isControllerVisible(NSMovieView *_self);

// method '-[NSMovieView isEditable]'
BOOL _IM_NSMovieView_isEditable(NSMovieView *_self);

// method '-[NSMovieView isMuted]'
BOOL _IM_NSMovieView_isMuted(NSMovieView *_self);

// method '-[NSMovieView isPlaying]'
BOOL _IM_NSMovieView_isPlaying(NSMovieView *_self);

// method '-[NSMovieView loopMode]'
int _IM_NSMovieView_loopMode(NSMovieView *_self);

// method '-[NSMovieView movie]'
id _IM_NSMovieView_movie(NSMovieView *_self);

// method '-[NSMovieView movieController]'
void *_IM_NSMovieView_movieController(NSMovieView *_self);

// method '-[NSMovieView movieRect]'
struct _NSRect _IM_NSMovieView_movieRect(NSMovieView *_self);

// method '-[NSMovieView paste:]'
void _IM_NSMovieView_paste_C(NSMovieView *_self, id sender);

// method '-[NSMovieView playsEveryFrame]'
BOOL _IM_NSMovieView_playsEveryFrame(NSMovieView *_self);

// method '-[NSMovieView playsSelectionOnly]'
BOOL _IM_NSMovieView_playsSelectionOnly(NSMovieView *_self);

// method '-[NSMovieView rate]'
float _IM_NSMovieView_rate(NSMovieView *_self);

// method '-[NSMovieView resizeWithMagnification:]'
void _IM_NSMovieView_resizeWithMagnification_C(NSMovieView *_self, float magnification);

// method '-[NSMovieView selectAll:]'
void _IM_NSMovieView_selectAll_C(NSMovieView *_self, id sender);

// method '-[NSMovieView setEditable:]'
void _IM_NSMovieView_setEditable_C(NSMovieView *_self, BOOL editable);

// method '-[NSMovieView setLoopMode:]'
void _IM_NSMovieView_setLoopMode_C(NSMovieView *_self, int mode);

// method '-[NSMovieView setMovie:]'
void _IM_NSMovieView_setMovie_C(NSMovieView *_self, id movie);

// method '-[NSMovieView setMuted:]'
void _IM_NSMovieView_setMuted_C(NSMovieView *_self, BOOL mute);

// method '-[NSMovieView setPlaysEveryFrame:]'
void _IM_NSMovieView_setPlaysEveryFrame_C(NSMovieView *_self, BOOL flag);

// method '-[NSMovieView setPlaysSelectionOnly:]'
void _IM_NSMovieView_setPlaysSelectionOnly_C(NSMovieView *_self, BOOL flag);

// method '-[NSMovieView setRate:]'
void _IM_NSMovieView_setRate_C(NSMovieView *_self, float rate);

// method '-[NSMovieView setVolume:]'
void _IM_NSMovieView_setVolume_C(NSMovieView *_self, float volume);

// method '-[NSMovieView showController:adjustingSize:]'
void _IM_NSMovieView_showController_CadjustingSize_C(NSMovieView *_self, BOOL show, BOOL adjustSize);

// method '-[NSMovieView sizeForMagnification:]'
struct _NSSize _IM_NSMovieView_sizeForMagnification_C(NSMovieView *_self, float magnification);

// method '-[NSMovieView start:]'
void _IM_NSMovieView_start_C(NSMovieView *_self, id sender);

// method '-[NSMovieView stepBack:]'
void _IM_NSMovieView_stepBack_C(NSMovieView *_self, id sender);

// method '-[NSMovieView stepForward:]'
void _IM_NSMovieView_stepForward_C(NSMovieView *_self, id sender);

// method '-[NSMovieView stop:]'
void _IM_NSMovieView_stop_C(NSMovieView *_self, id sender);

// method '-[NSMovieView volume]'
float _IM_NSMovieView_volume(NSMovieView *_self);

// method '-[NSMutableAttributedString applyFontTraits:range:]'
void _IM_NSMutableAttributedString_applyFontTraits_Crange_C(NSMutableAttributedString *_self, unsigned int traitMask, struct _NSRange range);

// method '-[NSMutableAttributedString fixAttachmentAttributeInRange:]'
void _IM_NSMutableAttributedString_fixAttachmentAttributeInRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString fixAttributesInRange:]'
void _IM_NSMutableAttributedString_fixAttributesInRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString fixFontAttributeInRange:]'
void _IM_NSMutableAttributedString_fixFontAttributeInRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString fixParagraphStyleAttributeInRange:]'
void _IM_NSMutableAttributedString_fixParagraphStyleAttributeInRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString readFromData:options:documentAttributes:]'
BOOL _IM_NSMutableAttributedString_readFromData_Coptions_CdocumentAttributes_C(NSMutableAttributedString *_self, id data, id options, id *dict);

// method '-[NSMutableAttributedString readFromData:options:documentAttributes:error:]'
BOOL _IM_NSMutableAttributedString_readFromData_Coptions_CdocumentAttributes_Cerror_C(NSMutableAttributedString *_self, id data, id opts, id *dict, id *error);

// method '-[NSMutableAttributedString readFromURL:options:documentAttributes:]'
BOOL _IM_NSMutableAttributedString_readFromURL_Coptions_CdocumentAttributes_C(NSMutableAttributedString *_self, NSURL* url, id options, id *dict);

// method '-[NSMutableAttributedString readFromURL:options:documentAttributes:error:]'
BOOL _IM_NSMutableAttributedString_readFromURL_Coptions_CdocumentAttributes_Cerror_C(NSMutableAttributedString *_self, NSURL* url, id opts, id *dict, id *error);

// method '-[NSMutableAttributedString setAlignment:range:]'
void _IM_NSMutableAttributedString_setAlignment_Crange_C(NSMutableAttributedString *_self, int alignment, struct _NSRange range);

// method '-[NSMutableAttributedString setBaseWritingDirection:range:]'
void _IM_NSMutableAttributedString_setBaseWritingDirection_Crange_C(NSMutableAttributedString *_self, int writingDirection, struct _NSRange range);

// method '-[NSMutableAttributedString subscriptRange:]'
void _IM_NSMutableAttributedString_subscriptRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString superscriptRange:]'
void _IM_NSMutableAttributedString_superscriptRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString unscriptRange:]'
void _IM_NSMutableAttributedString_unscriptRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString updateAttachmentsFromPath:]'
void _IM_NSMutableAttributedString_updateAttachmentsFromPath_C(NSMutableAttributedString *_self, NSString* path);

// method '-[NSMutableParagraphStyle addTabStop:]'
void _IM_NSMutableParagraphStyle_addTabStop_C(NSMutableParagraphStyle *_self, NSTextTab* anObject);

// method '-[NSMutableParagraphStyle removeTabStop:]'
void _IM_NSMutableParagraphStyle_removeTabStop_C(NSMutableParagraphStyle *_self, NSTextTab* anObject);

// method '-[NSMutableParagraphStyle setAlignment:]'
void _IM_NSMutableParagraphStyle_setAlignment_C(NSMutableParagraphStyle *_self, int alignment);

// method '-[NSMutableParagraphStyle setBaseWritingDirection:]'
void _IM_NSMutableParagraphStyle_setBaseWritingDirection_C(NSMutableParagraphStyle *_self, int writingDirection);

// method '-[NSMutableParagraphStyle setDefaultTabInterval:]'
void _IM_NSMutableParagraphStyle_setDefaultTabInterval_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setFirstLineHeadIndent:]'
void _IM_NSMutableParagraphStyle_setFirstLineHeadIndent_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setHeadIndent:]'
void _IM_NSMutableParagraphStyle_setHeadIndent_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setHeaderLevel:]'
void _IM_NSMutableParagraphStyle_setHeaderLevel_C(NSMutableParagraphStyle *_self, int level);

// method '-[NSMutableParagraphStyle setHyphenationFactor:]'
void _IM_NSMutableParagraphStyle_setHyphenationFactor_C(NSMutableParagraphStyle *_self, float aFactor);

// method '-[NSMutableParagraphStyle setLineBreakMode:]'
void _IM_NSMutableParagraphStyle_setLineBreakMode_C(NSMutableParagraphStyle *_self, int mode);

// method '-[NSMutableParagraphStyle setLineHeightMultiple:]'
void _IM_NSMutableParagraphStyle_setLineHeightMultiple_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setLineSpacing:]'
void _IM_NSMutableParagraphStyle_setLineSpacing_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setMaximumLineHeight:]'
void _IM_NSMutableParagraphStyle_setMaximumLineHeight_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setMinimumLineHeight:]'
void _IM_NSMutableParagraphStyle_setMinimumLineHeight_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setParagraphSpacing:]'
void _IM_NSMutableParagraphStyle_setParagraphSpacing_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setParagraphSpacingBefore:]'
void _IM_NSMutableParagraphStyle_setParagraphSpacingBefore_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setParagraphStyle:]'
void _IM_NSMutableParagraphStyle_setParagraphStyle_C(NSMutableParagraphStyle *_self, NSParagraphStyle* obj);

// method '-[NSMutableParagraphStyle setTabStops:]'
void _IM_NSMutableParagraphStyle_setTabStops_C(NSMutableParagraphStyle *_self, id array);

// method '-[NSMutableParagraphStyle setTailIndent:]'
void _IM_NSMutableParagraphStyle_setTailIndent_C(NSMutableParagraphStyle *_self, float aFloat);

// method '-[NSMutableParagraphStyle setTextBlocks:]'
void _IM_NSMutableParagraphStyle_setTextBlocks_C(NSMutableParagraphStyle *_self, id array);

// method '-[NSMutableParagraphStyle setTextLists:]'
void _IM_NSMutableParagraphStyle_setTextLists_C(NSMutableParagraphStyle *_self, id array);

// method '-[NSMutableParagraphStyle setTighteningFactorForTruncation:]'
void _IM_NSMutableParagraphStyle_setTighteningFactorForTruncation_C(NSMutableParagraphStyle *_self, float aFactor);

// method '-[NSNib initWithContentsOfURL:]'
NSNib *_IM_NSNib_initWithContentsOfURL_C(NSNib *_self, NSURL* nibFileURL);

// method '-[NSNib initWithNibNamed:bundle:]'
NSNib *_IM_NSNib_initWithNibNamed_Cbundle_C(NSNib *_self, NSString* nibName, NSBundle* bundle);

// method '-[NSNib instantiateNibWithExternalNameTable:]'
BOOL _IM_NSNib_instantiateNibWithExternalNameTable_C(NSNib *_self, id externalNameTable);

// method '-[NSNib instantiateNibWithOwner:topLevelObjects:]'
BOOL _IM_NSNib_instantiateNibWithOwner_CtopLevelObjects_C(NSNib *_self, id owner, id *topLevelObjects);

// method '-[NSNibConnector destination]'
id _IM_NSNibConnector_destination(NSNibConnector *_self);

// method '-[NSNibConnector establishConnection]'
void _IM_NSNibConnector_establishConnection(NSNibConnector *_self);

// method '-[NSNibConnector label]'
NSString* _IM_NSNibConnector_label(NSNibConnector *_self);

// method '-[NSNibConnector replaceObject:withObject:]'
void _IM_NSNibConnector_replaceObject_CwithObject_C(NSNibConnector *_self, id oldObject, id newObject);

// method '-[NSNibConnector setDestination:]'
void _IM_NSNibConnector_setDestination_C(NSNibConnector *_self, id destination);

// method '-[NSNibConnector setLabel:]'
void _IM_NSNibConnector_setLabel_C(NSNibConnector *_self, NSString* label);

// method '-[NSNibConnector setSource:]'
void _IM_NSNibConnector_setSource_C(NSNibConnector *_self, id source);

// method '-[NSNibConnector source]'
id _IM_NSNibConnector_source(NSNibConnector *_self);

// method '-[NSNibControlConnector establishConnection]'
void _IM_NSNibControlConnector_establishConnection(NSNibControlConnector *_self);

// method '-[NSNibOutletConnector establishConnection]'
void _IM_NSNibOutletConnector_establishConnection(NSNibOutletConnector *_self);

// method '-[NSObject accessibilityActionDescription:]'
NSString* _IM_NSObject_accessibilityActionDescription_C(NSObject *_self, NSString* action);

// method '-[NSObject accessibilityActionNames]'
id _IM_NSObject_accessibilityActionNames(NSObject *_self);

// method '-[NSObject accessibilityAttributeNames]'
id _IM_NSObject_accessibilityAttributeNames(NSObject *_self);

// method '-[NSObject accessibilityAttributeValue:]'
id _IM_NSObject_accessibilityAttributeValue_C(NSObject *_self, NSString* attribute);

// method '-[NSObject accessibilityAttributeValue:forParameter:]'
id _IM_NSObject_accessibilityAttributeValue_CforParameter_C(NSObject *_self, NSString* attribute, id parameter);

// method '-[NSObject accessibilityFocusedUIElement]'
id _IM_NSObject_accessibilityFocusedUIElement(NSObject *_self);

// method '-[NSObject accessibilityHitTest:]'
id _IM_NSObject_accessibilityHitTest_C(NSObject *_self, struct _NSPoint point);

// method '-[NSObject accessibilityIsAttributeSettable:]'
BOOL _IM_NSObject_accessibilityIsAttributeSettable_C(NSObject *_self, NSString* attribute);

// method '-[NSObject accessibilityIsIgnored]'
BOOL _IM_NSObject_accessibilityIsIgnored(NSObject *_self);

// method '-[NSObject accessibilityParameterizedAttributeNames]'
id _IM_NSObject_accessibilityParameterizedAttributeNames(NSObject *_self);

// method '-[NSObject accessibilityPerformAction:]'
void _IM_NSObject_accessibilityPerformAction_C(NSObject *_self, NSString* action);

// method '-[NSObject accessibilitySetOverrideValue:forAttribute:]'
BOOL _IM_NSObject_accessibilitySetOverrideValue_CforAttribute_C(NSObject *_self, id value, NSString* attribute);

// method '-[NSObject accessibilitySetValue:forAttribute:]'
void _IM_NSObject_accessibilitySetValue_CforAttribute_C(NSObject *_self, id value, NSString* attribute);

// method '-[NSObject action]'
SEL _IM_NSObject_action(NSObject *_self);

// method '-[NSObject activeConversationChanged:toNewConversation:]'
void _IM_NSObject_activeConversationChanged_CtoNewConversation_C(NSObject *_self, id sender, long newConversation);

// method '-[NSObject activeConversationWillChange:fromOldConversation:]'
void _IM_NSObject_activeConversationWillChange_CfromOldConversation_C(NSObject *_self, id sender, long oldConversation);

// method '-[NSObject alertShowHelp:]'
BOOL _IM_NSObject_alertShowHelp_C(NSObject *_self, NSAlert* alert);

// method '-[NSObject alphaControlAddedOrRemoved:]'
void _IM_NSObject_alphaControlAddedOrRemoved_C(NSObject *_self, id sender);

// method '-[NSObject animation:didReachProgressMark:]'
void _IM_NSObject_animation_CdidReachProgressMark_C(NSObject *_self, NSAnimation* animation, float progress);

// method '-[NSObject animation:valueForProgress:]'
float _IM_NSObject_animation_CvalueForProgress_C(NSObject *_self, NSAnimation* animation, float progress);

// method '-[NSObject animationDidEnd:]'
void _IM_NSObject_animationDidEnd_C(NSObject *_self, NSAnimation* animation);

// method '-[NSObject animationDidStop:]'
void _IM_NSObject_animationDidStop_C(NSObject *_self, NSAnimation* animation);

// method '-[NSObject animationShouldStart:]'
BOOL _IM_NSObject_animationShouldStart_C(NSObject *_self, NSAnimation* animation);

// method '-[NSObject application:delegateHandlesKey:]'
BOOL _IM_NSObject_application_CdelegateHandlesKey_C(NSObject *_self, NSApplication* sender, NSString* key);

// method '-[NSObject application:openFile:]'
BOOL _IM_NSObject_application_CopenFile_C(NSObject *_self, NSApplication* sender, NSString* filename);

// method '-[NSObject application:openFileWithoutUI:]'
BOOL _IM_NSObject_application_CopenFileWithoutUI_C(NSObject *_self, id sender, NSString* filename);

// method '-[NSObject application:openFiles:]'
void _IM_NSObject_application_CopenFiles_C(NSObject *_self, NSApplication* sender, id filenames);

// method '-[NSObject application:openTempFile:]'
BOOL _IM_NSObject_application_CopenTempFile_C(NSObject *_self, NSApplication* sender, NSString* filename);

// method '-[NSObject application:printFile:]'
BOOL _IM_NSObject_application_CprintFile_C(NSObject *_self, NSApplication* sender, NSString* filename);

// method '-[NSObject application:printFiles:]'
void _IM_NSObject_application_CprintFiles_C(NSObject *_self, NSApplication* sender, id filenames);

// method '-[NSObject application:printFiles:withSettings:showPrintPanels:]'
int _IM_NSObject_application_CprintFiles_CwithSettings_CshowPrintPanels_C(NSObject *_self, NSApplication* application, id fileNames, id printSettings, BOOL showPrintPanels);

// method '-[NSObject application:willPresentError:]'
id _IM_NSObject_application_CwillPresentError_C(NSObject *_self, NSApplication* application, id error);

// method '-[NSObject applicationDidBecomeActive:]'
void _IM_NSObject_applicationDidBecomeActive_C(NSObject *_self, id notification);

// method '-[NSObject applicationDidChangeScreenParameters:]'
void _IM_NSObject_applicationDidChangeScreenParameters_C(NSObject *_self, id notification);

// method '-[NSObject applicationDidFinishLaunching:]'
void _IM_NSObject_applicationDidFinishLaunching_C(NSObject *_self, id notification);

// method '-[NSObject applicationDidHide:]'
void _IM_NSObject_applicationDidHide_C(NSObject *_self, id notification);

// method '-[NSObject applicationDidResignActive:]'
void _IM_NSObject_applicationDidResignActive_C(NSObject *_self, id notification);

// method '-[NSObject applicationDidUnhide:]'
void _IM_NSObject_applicationDidUnhide_C(NSObject *_self, id notification);

// method '-[NSObject applicationDidUpdate:]'
void _IM_NSObject_applicationDidUpdate_C(NSObject *_self, id notification);

// method '-[NSObject applicationDockMenu:]'
NSMenu* _IM_NSObject_applicationDockMenu_C(NSObject *_self, NSApplication* sender);

// method '-[NSObject applicationOpenUntitledFile:]'
BOOL _IM_NSObject_applicationOpenUntitledFile_C(NSObject *_self, NSApplication* sender);

// method '-[NSObject applicationShouldHandleReopen:hasVisibleWindows:]'
BOOL _IM_NSObject_applicationShouldHandleReopen_ChasVisibleWindows_C(NSObject *_self, NSApplication* sender, BOOL flag);

// method '-[NSObject applicationShouldOpenUntitledFile:]'
BOOL _IM_NSObject_applicationShouldOpenUntitledFile_C(NSObject *_self, NSApplication* sender);

// method '-[NSObject applicationShouldTerminate:]'
int _IM_NSObject_applicationShouldTerminate_C(NSObject *_self, NSApplication* sender);

// method '-[NSObject applicationShouldTerminateAfterLastWindowClosed:]'
BOOL _IM_NSObject_applicationShouldTerminateAfterLastWindowClosed_C(NSObject *_self, NSApplication* sender);

// method '-[NSObject applicationWillBecomeActive:]'
void _IM_NSObject_applicationWillBecomeActive_C(NSObject *_self, id notification);

// method '-[NSObject applicationWillFinishLaunching:]'
void _IM_NSObject_applicationWillFinishLaunching_C(NSObject *_self, id notification);

// method '-[NSObject applicationWillHide:]'
void _IM_NSObject_applicationWillHide_C(NSObject *_self, id notification);

// method '-[NSObject applicationWillResignActive:]'
void _IM_NSObject_applicationWillResignActive_C(NSObject *_self, id notification);

// method '-[NSObject applicationWillTerminate:]'
void _IM_NSObject_applicationWillTerminate_C(NSObject *_self, id notification);

// method '-[NSObject applicationWillUnhide:]'
void _IM_NSObject_applicationWillUnhide_C(NSObject *_self, id notification);

// method '-[NSObject applicationWillUpdate:]'
void _IM_NSObject_applicationWillUpdate_C(NSObject *_self, id notification);

// method '-[NSObject attachColorList:]'
void _IM_NSObject_attachColorList_C(NSObject *_self, NSColorList* colorList);

// method '-[NSObject attachment]'
NSTextAttachment* _IM_NSObject_attachment(NSObject *_self);

// method '-[NSObject attributedString]'
NSAttributedString* _IM_NSObject_attributedString(NSObject *_self);

// method '-[NSObject attributedSubstringFromRange:]'
NSAttributedString* _IM_NSObject_attributedSubstringFromRange_C(NSObject *_self, struct _NSRange theRange);

// method '-[NSObject attributedTitle]'
NSAttributedString* _IM_NSObject_attributedTitle(NSObject *_self);

// method '-[NSObject awakeFromNib]'
void _IM_NSObject_awakeFromNib(NSObject *_self);

// method '-[NSObject bind:toObject:withKeyPath:options:]'
void _IM_NSObject_bind_CtoObject_CwithKeyPath_Coptions_C(NSObject *_self, NSString* binding, id observable, NSString* keyPath, id options);

// method '-[NSObject browser:createRowsForColumn:inMatrix:]'
void _IM_NSObject_browser_CcreateRowsForColumn_CinMatrix_C(NSObject *_self, NSBrowser* sender, int column, NSMatrix* matrix);

// method '-[NSObject browser:isColumnValid:]'
BOOL _IM_NSObject_browser_CisColumnValid_C(NSObject *_self, NSBrowser* sender, int column);

// method '-[NSObject browser:numberOfRowsInColumn:]'
int _IM_NSObject_browser_CnumberOfRowsInColumn_C(NSObject *_self, NSBrowser* sender, int column);

// method '-[NSObject browser:selectCellWithString:inColumn:]'
BOOL _IM_NSObject_browser_CselectCellWithString_CinColumn_C(NSObject *_self, NSBrowser* sender, NSString* title, int column);

// method '-[NSObject browser:selectRow:inColumn:]'
BOOL _IM_NSObject_browser_CselectRow_CinColumn_C(NSObject *_self, NSBrowser* sender, int row, int column);

// method '-[NSObject browser:shouldSizeColumn:forUserResize:toWidth:]'
float _IM_NSObject_browser_CshouldSizeColumn_CforUserResize_CtoWidth_C(NSObject *_self, NSBrowser* browser, int columnIndex, BOOL forUserResize, float suggestedWidth);

// method '-[NSObject browser:sizeToFitWidthOfColumn:]'
float _IM_NSObject_browser_CsizeToFitWidthOfColumn_C(NSObject *_self, NSBrowser* browser, int columnIndex);

// method '-[NSObject browser:titleOfColumn:]'
NSString* _IM_NSObject_browser_CtitleOfColumn_C(NSObject *_self, NSBrowser* sender, int column);

// method '-[NSObject browser:willDisplayCell:atRow:column:]'
void _IM_NSObject_browser_CwillDisplayCell_CatRow_Ccolumn_C(NSObject *_self, NSBrowser* sender, id cell, int row, int column);

// method '-[NSObject browserColumnConfigurationDidChange:]'
void _IM_NSObject_browserColumnConfigurationDidChange_C(NSObject *_self, id notification);

// method '-[NSObject browserDidScroll:]'
void _IM_NSObject_browserDidScroll_C(NSObject *_self, NSBrowser* sender);

// method '-[NSObject browserWillScroll:]'
void _IM_NSObject_browserWillScroll_C(NSObject *_self, NSBrowser* sender);

// method '-[NSObject canBeDisabled]'
BOOL _IM_NSObject_canBeDisabled(NSObject *_self);

// method '-[NSObject cellBaselineOffset]'
struct _NSPoint _IM_NSObject_cellBaselineOffset(NSObject *_self);

// method '-[NSObject cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:]'
struct _NSRect _IM_NSObject_cellFrameForTextContainer_CproposedLineFragment_CglyphPosition_CcharacterIndex_C(NSObject *_self, NSTextContainer* textContainer, struct _NSRect lineFrag, struct _NSPoint position, unsigned int charIndex);

// method '-[NSObject cellSize]'
struct _NSSize _IM_NSObject_cellSize(NSObject *_self);

// method '-[NSObject changeColor:]'
void _IM_NSObject_changeColor_C(NSObject *_self, id sender);

// method '-[NSObject changeFont:]'
void _IM_NSObject_changeFont_C(NSObject *_self, id sender);

// method '-[NSObject changeSpelling:]'
void _IM_NSObject_changeSpelling_C(NSObject *_self, id sender);

// method '-[NSObject characterIndexForPoint:]'
unsigned int _IM_NSObject_characterIndexForPoint_C(NSObject *_self, struct _NSPoint thePoint);

// method '-[NSObject comboBox:completedString:]'
NSString* _IM_NSObject_comboBox_CcompletedString_C(NSObject *_self, NSComboBox* aComboBox, NSString* string);

// method '-[NSObject comboBox:indexOfItemWithStringValue:]'
unsigned int _IM_NSObject_comboBox_CindexOfItemWithStringValue_C(NSObject *_self, NSComboBox* aComboBox, NSString* string);

// method '-[NSObject comboBox:objectValueForItemAtIndex:]'
id _IM_NSObject_comboBox_CobjectValueForItemAtIndex_C(NSObject *_self, NSComboBox* aComboBox, int index);

// method '-[NSObject comboBoxCell:completedString:]'
NSString* _IM_NSObject_comboBoxCell_CcompletedString_C(NSObject *_self, NSComboBoxCell* aComboBoxCell, NSString* uncompletedString);

// method '-[NSObject comboBoxCell:indexOfItemWithStringValue:]'
unsigned int _IM_NSObject_comboBoxCell_CindexOfItemWithStringValue_C(NSObject *_self, NSComboBoxCell* aComboBoxCell, NSString* string);

// method '-[NSObject comboBoxCell:objectValueForItemAtIndex:]'
id _IM_NSObject_comboBoxCell_CobjectValueForItemAtIndex_C(NSObject *_self, NSComboBoxCell* aComboBoxCell, int index);

// method '-[NSObject comboBoxSelectionDidChange:]'
void _IM_NSObject_comboBoxSelectionDidChange_C(NSObject *_self, id notification);

// method '-[NSObject comboBoxSelectionIsChanging:]'
void _IM_NSObject_comboBoxSelectionIsChanging_C(NSObject *_self, id notification);

// method '-[NSObject comboBoxWillDismiss:]'
void _IM_NSObject_comboBoxWillDismiss_C(NSObject *_self, id notification);

// method '-[NSObject comboBoxWillPopUp:]'
void _IM_NSObject_comboBoxWillPopUp_C(NSObject *_self, id notification);

// method '-[NSObject commitEditing]'
BOOL _IM_NSObject_commitEditing(NSObject *_self);

// method '-[NSObject commitEditingWithDelegate:didCommitSelector:contextInfo:]'
void _IM_NSObject_commitEditingWithDelegate_CdidCommitSelector_CcontextInfo_C(NSObject *_self, id delegate, SEL didCommitSelector, void *contextInfo);

// method '-[NSObject concludeDragOperation:]'
void _IM_NSObject_concludeDragOperation_C(NSObject *_self, id sender);

// method '-[NSObject control:didFailToFormatString:errorDescription:]'
BOOL _IM_NSObject_control_CdidFailToFormatString_CerrorDescription_C(NSObject *_self, NSControl* control, NSString* string, NSString* error);

// method '-[NSObject control:didFailToValidatePartialString:errorDescription:]'
void _IM_NSObject_control_CdidFailToValidatePartialString_CerrorDescription_C(NSObject *_self, NSControl* control, NSString* string, NSString* error);

// method '-[NSObject control:isValidObject:]'
BOOL _IM_NSObject_control_CisValidObject_C(NSObject *_self, NSControl* control, id obj);

// method '-[NSObject control:textShouldBeginEditing:]'
BOOL _IM_NSObject_control_CtextShouldBeginEditing_C(NSObject *_self, NSControl* control, NSText* fieldEditor);

// method '-[NSObject control:textShouldEndEditing:]'
BOOL _IM_NSObject_control_CtextShouldEndEditing_C(NSObject *_self, NSControl* control, NSText* fieldEditor);

// method '-[NSObject control:textView:completions:forPartialWordRange:indexOfSelectedItem:]'
id _IM_NSObject_control_CtextView_Ccompletions_CforPartialWordRange_CindexOfSelectedItem_C(NSObject *_self, NSControl* control, NSTextView* textView, id words, struct _NSRange charRange, int *index);

// method '-[NSObject control:textView:doCommandBySelector:]'
BOOL _IM_NSObject_control_CtextView_CdoCommandBySelector_C(NSObject *_self, NSControl* control, NSTextView* textView, SEL commandSelector);

// method '-[NSObject controlTextDidBeginEditing:]'
void _IM_NSObject_controlTextDidBeginEditing_C(NSObject *_self, id obj);

// method '-[NSObject controlTextDidChange:]'
void _IM_NSObject_controlTextDidChange_C(NSObject *_self, id obj);

// method '-[NSObject controlTextDidEndEditing:]'
void _IM_NSObject_controlTextDidEndEditing_C(NSObject *_self, id obj);

// method '-[NSObject conversationIdentifier]'
long _IM_NSObject_conversationIdentifier(NSObject *_self);

// method '-[NSObject currentMode]'
int _IM_NSObject_currentMode(NSObject *_self);

// method '-[NSObject datePickerCell:validateProposedDateValue:timeInterval:]'
void _IM_NSObject_datePickerCell_CvalidateProposedDateValue_CtimeInterval_C(NSObject *_self, NSDatePickerCell* aDatePickerCell, id *proposedDateValue, double *proposedTimeInterval);

// method '+[NSObject defaultPlaceholderForMarker:withBinding:]'
id _CM_NSObject_defaultPlaceholderForMarker_CwithBinding_C(Class _class, id marker, NSString* binding);

// method '-[NSObject detachColorList:]'
void _IM_NSObject_detachColorList_C(NSObject *_self, NSColorList* colorList);

// method '-[NSObject discardEditing]'
void _IM_NSObject_discardEditing(NSObject *_self);

// method '-[NSObject doCommandBySelector:]'
void _IM_NSObject_doCommandBySelector_C(NSObject *_self, SEL aSelector);

// method '-[NSObject doCommandBySelector:client:]'
void _IM_NSObject_doCommandBySelector_Cclient_C(NSObject *_self, SEL aSelector, id sender);

// method '-[NSObject draggedImage]'
NSImage* _IM_NSObject_draggedImage(NSObject *_self);

// method '-[NSObject draggedImage:beganAt:]'
void _IM_NSObject_draggedImage_CbeganAt_C(NSObject *_self, NSImage* image, struct _NSPoint screenPoint);

// method '-[NSObject draggedImage:endedAt:deposited:]'
void _IM_NSObject_draggedImage_CendedAt_Cdeposited_C(NSObject *_self, NSImage* image, struct _NSPoint screenPoint, BOOL flag);

// method '-[NSObject draggedImage:endedAt:operation:]'
void _IM_NSObject_draggedImage_CendedAt_Coperation_C(NSObject *_self, NSImage* image, struct _NSPoint screenPoint, unsigned int operation);

// method '-[NSObject draggedImage:movedTo:]'
void _IM_NSObject_draggedImage_CmovedTo_C(NSObject *_self, NSImage* image, struct _NSPoint screenPoint);

// method '-[NSObject draggedImageLocation]'
struct _NSPoint _IM_NSObject_draggedImageLocation(NSObject *_self);

// method '-[NSObject draggingDestinationWindow]'
NSWindow* _IM_NSObject_draggingDestinationWindow(NSObject *_self);

// method '-[NSObject draggingEnded:]'
void _IM_NSObject_draggingEnded_C(NSObject *_self, id sender);

// method '-[NSObject draggingEntered:]'
unsigned int _IM_NSObject_draggingEntered_C(NSObject *_self, id sender);

// method '-[NSObject draggingExited:]'
void _IM_NSObject_draggingExited_C(NSObject *_self, id sender);

// method '-[NSObject draggingLocation]'
struct _NSPoint _IM_NSObject_draggingLocation(NSObject *_self);

// method '-[NSObject draggingPasteboard]'
NSPasteboard* _IM_NSObject_draggingPasteboard(NSObject *_self);

// method '-[NSObject draggingSequenceNumber]'
int _IM_NSObject_draggingSequenceNumber(NSObject *_self);

// method '-[NSObject draggingSource]'
id _IM_NSObject_draggingSource(NSObject *_self);

// method '-[NSObject draggingSourceOperationMask]'
unsigned int _IM_NSObject_draggingSourceOperationMask(NSObject *_self);

// method '-[NSObject draggingSourceOperationMaskForLocal:]'
unsigned int _IM_NSObject_draggingSourceOperationMaskForLocal_C(NSObject *_self, BOOL flag);

// method '-[NSObject draggingUpdated:]'
unsigned int _IM_NSObject_draggingUpdated_C(NSObject *_self, id sender);

// method '-[NSObject drawWithFrame:inView:]'
void _IM_NSObject_drawWithFrame_CinView_C(NSObject *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSObject drawWithFrame:inView:characterIndex:]'
void _IM_NSObject_drawWithFrame_CinView_CcharacterIndex_C(NSObject *_self, struct _NSRect cellFrame, NSView* controlView, unsigned int charIndex);

// method '-[NSObject drawWithFrame:inView:characterIndex:layoutManager:]'
void _IM_NSObject_drawWithFrame_CinView_CcharacterIndex_ClayoutManager_C(NSObject *_self, struct _NSRect cellFrame, NSView* controlView, unsigned int charIndex, NSLayoutManager* layoutManager);

// method '-[NSObject drawerDidClose:]'
void _IM_NSObject_drawerDidClose_C(NSObject *_self, id notification);

// method '-[NSObject drawerDidOpen:]'
void _IM_NSObject_drawerDidOpen_C(NSObject *_self, id notification);

// method '-[NSObject drawerShouldClose:]'
BOOL _IM_NSObject_drawerShouldClose_C(NSObject *_self, NSDrawer* sender);

// method '-[NSObject drawerShouldOpen:]'
BOOL _IM_NSObject_drawerShouldOpen_C(NSObject *_self, NSDrawer* sender);

// method '-[NSObject drawerWillClose:]'
void _IM_NSObject_drawerWillClose_C(NSObject *_self, id notification);

// method '-[NSObject drawerWillOpen:]'
void _IM_NSObject_drawerWillOpen_C(NSObject *_self, id notification);

// method '-[NSObject drawerWillResizeContents:toSize:]'
struct _NSSize _IM_NSObject_drawerWillResizeContents_CtoSize_C(NSObject *_self, NSDrawer* sender, struct _NSSize contentSize);

// method '+[NSObject exposeBinding:]'
void _CM_NSObject_exposeBinding_C(Class _class, NSString* binding);

// method '-[NSObject exposedBindings]'
id _IM_NSObject_exposedBindings(NSObject *_self);

// method '-[NSObject firstRectForCharacterRange:]'
struct _NSRect _IM_NSObject_firstRectForCharacterRange_C(NSObject *_self, struct _NSRange theRange);

// method '-[NSObject fontManager:willIncludeFont:]'
BOOL _IM_NSObject_fontManager_CwillIncludeFont_C(NSObject *_self, id sender, NSString* fontName);

// method '-[NSObject hasMarkedText]'
BOOL _IM_NSObject_hasMarkedText(NSObject *_self);

// method '-[NSObject hasSubmenu]'
BOOL _IM_NSObject_hasSubmenu(NSObject *_self);

// method '-[NSObject highlight:withFrame:inView:]'
void _IM_NSObject_highlight_CwithFrame_CinView_C(NSObject *_self, BOOL flag, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSObject ignoreModifierKeysWhileDragging]'
BOOL _IM_NSObject_ignoreModifierKeysWhileDragging(NSObject *_self);

// method '-[NSObject ignoreSpelling:]'
void _IM_NSObject_ignoreSpelling_C(NSObject *_self, id sender);

// method '-[NSObject image]'
NSImage* _IM_NSObject_image(NSObject *_self);

// method '-[NSObject image:didLoadPartOfRepresentation:withValidRows:]'
void _IM_NSObject_image_CdidLoadPartOfRepresentation_CwithValidRows_C(NSObject *_self, NSImage* image, NSImageRep* rep, int rows);

// method '-[NSObject image:didLoadRepresentation:withStatus:]'
void _IM_NSObject_image_CdidLoadRepresentation_CwithStatus_C(NSObject *_self, NSImage* image, NSImageRep* rep, int status);

// method '-[NSObject image:didLoadRepresentationHeader:]'
void _IM_NSObject_image_CdidLoadRepresentationHeader_C(NSObject *_self, NSImage* image, NSImageRep* rep);

// method '-[NSObject image:willLoadRepresentation:]'
void _IM_NSObject_image_CwillLoadRepresentation_C(NSObject *_self, NSImage* image, NSImageRep* rep);

// method '-[NSObject imageDidNotDraw:inRect:]'
NSImage* _IM_NSObject_imageDidNotDraw_CinRect_C(NSObject *_self, id sender, struct _NSRect aRect);

// method '-[NSObject indentationLevel]'
int _IM_NSObject_indentationLevel(NSObject *_self);

// method '-[NSObject infoForBinding:]'
id _IM_NSObject_infoForBinding_C(NSObject *_self, NSString* binding);

// method '-[NSObject initWithPickerMask:colorPanel:]'
NSObject *_IM_NSObject_initWithPickerMask_CcolorPanel_C(NSObject *_self, int mask, NSColorPanel* owningColorPanel);

// method '-[NSObject initWithTitle:action:keyEquivalent:]'
NSObject *_IM_NSObject_initWithTitle_Caction_CkeyEquivalent_C(NSObject *_self, NSString* aString, SEL aSelector, NSString* charCode);

// method '-[NSObject inputClientBecomeActive:]'
void _IM_NSObject_inputClientBecomeActive_C(NSObject *_self, id sender);

// method '-[NSObject inputClientDisabled:]'
void _IM_NSObject_inputClientDisabled_C(NSObject *_self, id sender);

// method '-[NSObject inputClientEnabled:]'
void _IM_NSObject_inputClientEnabled_C(NSObject *_self, id sender);

// method '-[NSObject inputClientResignActive:]'
void _IM_NSObject_inputClientResignActive_C(NSObject *_self, id sender);

// method '-[NSObject insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:]'
void _IM_NSObject_insertGlyphs_Clength_CforStartingGlyphAtIndex_CcharacterIndex_C(NSObject *_self, const unsigned int* glyphs, unsigned int length, unsigned int glyphIndex, unsigned int charIndex);

// method '-[NSObject insertNewButtonImage:in:]'
void _IM_NSObject_insertNewButtonImage_Cin_C(NSObject *_self, NSImage* newButtonImage, NSButtonCell* buttonCell);

// method '-[NSObject insertText:]'
void _IM_NSObject_insertText_C(NSObject *_self, id aString);

// method '-[NSObject insertText:client:]'
void _IM_NSObject_insertText_Cclient_C(NSObject *_self, id aString, id sender);

// method '-[NSObject isAlternate]'
BOOL _IM_NSObject_isAlternate(NSObject *_self);

// method '-[NSObject isEnabled]'
BOOL _IM_NSObject_isEnabled(NSObject *_self);

// method '-[NSObject isSeparatorItem]'
BOOL _IM_NSObject_isSeparatorItem(NSObject *_self);

// method '-[NSObject keyEquivalent]'
NSString* _IM_NSObject_keyEquivalent(NSObject *_self);

// method '-[NSObject keyEquivalentModifierMask]'
unsigned int _IM_NSObject_keyEquivalentModifierMask(NSObject *_self);

// method '-[NSObject layoutManager:didCompleteLayoutForTextContainer:atEnd:]'
void _IM_NSObject_layoutManager_CdidCompleteLayoutForTextContainer_CatEnd_C(NSObject *_self, NSLayoutManager* layoutManager, NSTextContainer* textContainer, BOOL layoutFinishedFlag);

// method '-[NSObject layoutManagerDidInvalidateLayout:]'
void _IM_NSObject_layoutManagerDidInvalidateLayout_C(NSObject *_self, NSLayoutManager* sender);

// method '-[NSObject layoutOptions]'
unsigned int _IM_NSObject_layoutOptions(NSObject *_self);

// method '-[NSObject markedRange]'
struct _NSRange _IM_NSObject_markedRange(NSObject *_self);

// method '-[NSObject markedTextAbandoned:]'
void _IM_NSObject_markedTextAbandoned_C(NSObject *_self, id sender);

// method '-[NSObject markedTextSelectionChanged:client:]'
void _IM_NSObject_markedTextSelectionChanged_Cclient_C(NSObject *_self, struct _NSRange newSel, id sender);

// method '-[NSObject menu]'
NSMenu* _IM_NSObject_menu(NSObject *_self);

// method '-[NSObject menu:updateItem:atIndex:shouldCancel:]'
BOOL _IM_NSObject_menu_CupdateItem_CatIndex_CshouldCancel_C(NSObject *_self, NSMenu* menu, NSMenuItem* item, int index, BOOL shouldCancel);

// method '-[NSObject menuHasKeyEquivalent:forEvent:target:action:]'
BOOL _IM_NSObject_menuHasKeyEquivalent_CforEvent_Ctarget_Caction_C(NSObject *_self, NSMenu* menu, NSEvent* event, id *target, SEL *action);

// method '-[NSObject menuNeedsUpdate:]'
void _IM_NSObject_menuNeedsUpdate_C(NSObject *_self, NSMenu* menu);

// method '-[NSObject mixedStateImage]'
NSImage* _IM_NSObject_mixedStateImage(NSObject *_self);

// method '-[NSObject mnemonic]'
NSString* _IM_NSObject_mnemonic(NSObject *_self);

// method '-[NSObject mnemonicLocation]'
unsigned int _IM_NSObject_mnemonicLocation(NSObject *_self);

// method '-[NSObject mouseDownOnCharacterIndex:atCoordinate:withModifier:client:]'
BOOL _IM_NSObject_mouseDownOnCharacterIndex_CatCoordinate_CwithModifier_Cclient_C(NSObject *_self, unsigned int theIndex, struct _NSPoint thePoint, unsigned int theFlags, id sender);

// method '-[NSObject mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:]'
BOOL _IM_NSObject_mouseDraggedOnCharacterIndex_CatCoordinate_CwithModifier_Cclient_C(NSObject *_self, unsigned int theIndex, struct _NSPoint thePoint, unsigned int theFlags, id sender);

// method '-[NSObject mouseUpOnCharacterIndex:atCoordinate:withModifier:client:]'
void _IM_NSObject_mouseUpOnCharacterIndex_CatCoordinate_CwithModifier_Cclient_C(NSObject *_self, unsigned int theIndex, struct _NSPoint thePoint, unsigned int theFlags, id sender);

// method '-[NSObject namesOfPromisedFilesDroppedAtDestination:]'
id _IM_NSObject_namesOfPromisedFilesDroppedAtDestination_C(NSObject *_self, NSURL* dropDestination);

// method '-[NSObject numberOfItemsInComboBox:]'
int _IM_NSObject_numberOfItemsInComboBox_C(NSObject *_self, NSComboBox* aComboBox);

// method '-[NSObject numberOfItemsInComboBoxCell:]'
int _IM_NSObject_numberOfItemsInComboBoxCell_C(NSObject *_self, NSComboBoxCell* comboBoxCell);

// method '-[NSObject numberOfItemsInMenu:]'
int _IM_NSObject_numberOfItemsInMenu_C(NSObject *_self, NSMenu* menu);

// method '-[NSObject numberOfRowsInTableView:]'
int _IM_NSObject_numberOfRowsInTableView_C(NSObject *_self, NSTableView* tableView);

// method '-[NSObject objectDidBeginEditing:]'
void _IM_NSObject_objectDidBeginEditing_C(NSObject *_self, id editor);

// method '-[NSObject objectDidEndEditing:]'
void _IM_NSObject_objectDidEndEditing_C(NSObject *_self, id editor);

// method '-[NSObject offStateImage]'
NSImage* _IM_NSObject_offStateImage(NSObject *_self);

// method '-[NSObject onStateImage]'
NSImage* _IM_NSObject_onStateImage(NSObject *_self);

// method '-[NSObject outlineView:acceptDrop:item:childIndex:]'
BOOL _IM_NSObject_outlineView_CacceptDrop_Citem_CchildIndex_C(NSObject *_self, NSOutlineView* olv, id info, id item, int index);

// method '-[NSObject outlineView:child:ofItem:]'
id _IM_NSObject_outlineView_Cchild_CofItem_C(NSObject *_self, NSOutlineView* outlineView, int index, id item);

// method '-[NSObject outlineView:didClickTableColumn:]'
void _IM_NSObject_outlineView_CdidClickTableColumn_C(NSObject *_self, NSOutlineView* outlineView, NSTableColumn* tableColumn);

// method '-[NSObject outlineView:didDragTableColumn:]'
void _IM_NSObject_outlineView_CdidDragTableColumn_C(NSObject *_self, NSOutlineView* outlineView, NSTableColumn* tableColumn);

// method '-[NSObject outlineView:heightOfRowByItem:]'
float _IM_NSObject_outlineView_CheightOfRowByItem_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:isItemExpandable:]'
BOOL _IM_NSObject_outlineView_CisItemExpandable_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:itemForPersistentObject:]'
id _IM_NSObject_outlineView_CitemForPersistentObject_C(NSObject *_self, NSOutlineView* outlineView, id object);

// method '-[NSObject outlineView:mouseDownInHeaderOfTableColumn:]'
void _IM_NSObject_outlineView_CmouseDownInHeaderOfTableColumn_C(NSObject *_self, NSOutlineView* outlineView, NSTableColumn* tableColumn);

// method '-[NSObject outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:]'
id _IM_NSObject_outlineView_CnamesOfPromisedFilesDroppedAtDestination_CforDraggedItems_C(NSObject *_self, NSOutlineView* olv, NSURL* dropDestination, id items);

// method '-[NSObject outlineView:numberOfChildrenOfItem:]'
int _IM_NSObject_outlineView_CnumberOfChildrenOfItem_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:objectValueForTableColumn:byItem:]'
id _IM_NSObject_outlineView_CobjectValueForTableColumn_CbyItem_C(NSObject *_self, NSOutlineView* outlineView, NSTableColumn* tableColumn, id item);

// method '-[NSObject outlineView:persistentObjectForItem:]'
id _IM_NSObject_outlineView_CpersistentObjectForItem_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:setObjectValue:forTableColumn:byItem:]'
void _IM_NSObject_outlineView_CsetObjectValue_CforTableColumn_CbyItem_C(NSObject *_self, NSOutlineView* outlineView, id object, NSTableColumn* tableColumn, id item);

// method '-[NSObject outlineView:shouldCollapseItem:]'
BOOL _IM_NSObject_outlineView_CshouldCollapseItem_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:shouldEditTableColumn:item:]'
BOOL _IM_NSObject_outlineView_CshouldEditTableColumn_Citem_C(NSObject *_self, NSOutlineView* outlineView, NSTableColumn* tableColumn, id item);

// method '-[NSObject outlineView:shouldExpandItem:]'
BOOL _IM_NSObject_outlineView_CshouldExpandItem_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:shouldSelectItem:]'
BOOL _IM_NSObject_outlineView_CshouldSelectItem_C(NSObject *_self, NSOutlineView* outlineView, id item);

// method '-[NSObject outlineView:shouldSelectTableColumn:]'
BOOL _IM_NSObject_outlineView_CshouldSelectTableColumn_C(NSObject *_self, NSOutlineView* outlineView, NSTableColumn* tableColumn);

// method '-[NSObject outlineView:sortDescriptorsDidChange:]'
void _IM_NSObject_outlineView_CsortDescriptorsDidChange_C(NSObject *_self, NSOutlineView* outlineView, id oldDescriptors);

// method '-[NSObject outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:]'
NSString* _IM_NSObject_outlineView_CtoolTipForCell_Crect_CtableColumn_Citem_CmouseLocation_C(NSObject *_self, NSOutlineView* ov, NSCell* cell, struct _NSRect *rect, NSTableColumn* tc, id item, struct _NSPoint mouseLocation);

// method '-[NSObject outlineView:validateDrop:proposedItem:proposedChildIndex:]'
unsigned int _IM_NSObject_outlineView_CvalidateDrop_CproposedItem_CproposedChildIndex_C(NSObject *_self, NSOutlineView* olv, id info, id item, int index);

// method '-[NSObject outlineView:willDisplayCell:forTableColumn:item:]'
void _IM_NSObject_outlineView_CwillDisplayCell_CforTableColumn_Citem_C(NSObject *_self, NSOutlineView* outlineView, id cell, NSTableColumn* tableColumn, id item);

// method '-[NSObject outlineView:willDisplayOutlineCell:forTableColumn:item:]'
void _IM_NSObject_outlineView_CwillDisplayOutlineCell_CforTableColumn_Citem_C(NSObject *_self, NSOutlineView* outlineView, id cell, NSTableColumn* tableColumn, id item);

// method '-[NSObject outlineView:writeItems:toPasteboard:]'
BOOL _IM_NSObject_outlineView_CwriteItems_CtoPasteboard_C(NSObject *_self, NSOutlineView* olv, id items, NSPasteboard* pboard);

// method '-[NSObject outlineViewColumnDidMove:]'
void _IM_NSObject_outlineViewColumnDidMove_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewColumnDidResize:]'
void _IM_NSObject_outlineViewColumnDidResize_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewItemDidCollapse:]'
void _IM_NSObject_outlineViewItemDidCollapse_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewItemDidExpand:]'
void _IM_NSObject_outlineViewItemDidExpand_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewItemWillCollapse:]'
void _IM_NSObject_outlineViewItemWillCollapse_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewItemWillExpand:]'
void _IM_NSObject_outlineViewItemWillExpand_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewSelectionDidChange:]'
void _IM_NSObject_outlineViewSelectionDidChange_C(NSObject *_self, id notification);

// method '-[NSObject outlineViewSelectionIsChanging:]'
void _IM_NSObject_outlineViewSelectionIsChanging_C(NSObject *_self, id notification);

// method '-[NSObject panel:compareFilename:with:caseSensitive:]'
int _IM_NSObject_panel_CcompareFilename_Cwith_CcaseSensitive_C(NSObject *_self, id sender, NSString* name1, NSString* name2, BOOL caseSensitive);

// method '-[NSObject panel:directoryDidChange:]'
void _IM_NSObject_panel_CdirectoryDidChange_C(NSObject *_self, id sender, NSString* path);

// method '-[NSObject panel:isValidFilename:]'
BOOL _IM_NSObject_panel_CisValidFilename_C(NSObject *_self, id sender, NSString* filename);

// method '-[NSObject panel:shouldShowFilename:]'
BOOL _IM_NSObject_panel_CshouldShowFilename_C(NSObject *_self, id sender, NSString* filename);

// method '-[NSObject panel:userEnteredFilename:confirmed:]'
NSString* _IM_NSObject_panel_CuserEnteredFilename_Cconfirmed_C(NSObject *_self, id sender, NSString* filename, BOOL okFlag);

// method '-[NSObject panel:willExpand:]'
void _IM_NSObject_panel_CwillExpand_C(NSObject *_self, id sender, BOOL expanding);

// method '-[NSObject panelSelectionDidChange:]'
void _IM_NSObject_panelSelectionDidChange_C(NSObject *_self, id sender);

// method '-[NSObject pasteboard:provideDataForType:]'
void _IM_NSObject_pasteboard_CprovideDataForType_C(NSObject *_self, NSPasteboard* sender, NSString* type);

// method '-[NSObject pasteboardChangedOwner:]'
void _IM_NSObject_pasteboardChangedOwner_C(NSObject *_self, NSPasteboard* sender);

// method '-[NSObject performDragOperation:]'
BOOL _IM_NSObject_performDragOperation_C(NSObject *_self, id sender);

// method '-[NSObject prepareForDragOperation:]'
BOOL _IM_NSObject_prepareForDragOperation_C(NSObject *_self, id sender);

// method '-[NSObject provideNewButtonImage]'
NSImage* _IM_NSObject_provideNewButtonImage(NSObject *_self);

// method '-[NSObject provideNewView:]'
NSView* _IM_NSObject_provideNewView_C(NSObject *_self, BOOL initialRequest);

// method '-[NSObject readSelectionFromPasteboard:]'
BOOL _IM_NSObject_readSelectionFromPasteboard_C(NSObject *_self, NSPasteboard* pboard);

// method '-[NSObject representedObject]'
id _IM_NSObject_representedObject(NSObject *_self);

// method '-[NSObject selectedRange]'
struct _NSRange _IM_NSObject_selectedRange(NSObject *_self);

// method '-[NSObject selectionShouldChangeInOutlineView:]'
BOOL _IM_NSObject_selectionShouldChangeInOutlineView_C(NSObject *_self, NSOutlineView* outlineView);

// method '-[NSObject selectionShouldChangeInTableView:]'
BOOL _IM_NSObject_selectionShouldChangeInTableView_C(NSObject *_self, NSTableView* aTableView);

// method '+[NSObject separatorItem]'
id _CM_NSObject_separatorItem(Class _class);

// method '-[NSObject setAction:]'
void _IM_NSObject_setAction_C(NSObject *_self, SEL aSelector);

// method '-[NSObject setAlternate:]'
void _IM_NSObject_setAlternate_C(NSObject *_self, BOOL isAlternate);

// method '-[NSObject setAttachment:]'
void _IM_NSObject_setAttachment_C(NSObject *_self, NSTextAttachment* anObject);

// method '-[NSObject setAttributedTitle:]'
void _IM_NSObject_setAttributedTitle_C(NSObject *_self, NSAttributedString* string);

// method '-[NSObject setColor:]'
void _IM_NSObject_setColor_C(NSObject *_self, NSColor* newColor);

// method '+[NSObject setDefaultPlaceholder:forMarker:withBinding:]'
void _CM_NSObject_setDefaultPlaceholder_CforMarker_CwithBinding_C(Class _class, id placeholder, id marker, NSString* binding);

// method '-[NSObject setEnabled:]'
void _IM_NSObject_setEnabled_C(NSObject *_self, BOOL flag);

// method '-[NSObject setImage:]'
void _IM_NSObject_setImage_C(NSObject *_self, NSImage* menuImage);

// method '-[NSObject setIndentationLevel:]'
void _IM_NSObject_setIndentationLevel_C(NSObject *_self, int indentationLevel);

// method '-[NSObject setIntAttribute:value:forGlyphAtIndex:]'
void _IM_NSObject_setIntAttribute_Cvalue_CforGlyphAtIndex_C(NSObject *_self, int attributeTag, int val, unsigned int glyphIndex);

// method '-[NSObject setKeyEquivalent:]'
void _IM_NSObject_setKeyEquivalent_C(NSObject *_self, NSString* aKeyEquivalent);

// method '-[NSObject setKeyEquivalentModifierMask:]'
void _IM_NSObject_setKeyEquivalentModifierMask_C(NSObject *_self, unsigned int mask);

// method '-[NSObject setMarkedText:selectedRange:]'
void _IM_NSObject_setMarkedText_CselectedRange_C(NSObject *_self, id aString, struct _NSRange selRange);

// method '-[NSObject setMenu:]'
void _IM_NSObject_setMenu_C(NSObject *_self, NSMenu* menu);

// method '-[NSObject setMixedStateImage:]'
void _IM_NSObject_setMixedStateImage_C(NSObject *_self, NSImage* image);

// method '-[NSObject setMnemonicLocation:]'
void _IM_NSObject_setMnemonicLocation_C(NSObject *_self, unsigned int location);

// method '-[NSObject setMode:]'
void _IM_NSObject_setMode_C(NSObject *_self, int mode);

// method '-[NSObject setOffStateImage:]'
void _IM_NSObject_setOffStateImage_C(NSObject *_self, NSImage* image);

// method '-[NSObject setOnStateImage:]'
void _IM_NSObject_setOnStateImage_C(NSObject *_self, NSImage* image);

// method '-[NSObject setRepresentedObject:]'
void _IM_NSObject_setRepresentedObject_C(NSObject *_self, id anObject);

// method '-[NSObject setState:]'
void _IM_NSObject_setState_C(NSObject *_self, int state);

// method '-[NSObject setSubmenu:]'
void _IM_NSObject_setSubmenu_C(NSObject *_self, NSMenu* submenu);

// method '-[NSObject setTag:]'
void _IM_NSObject_setTag_C(NSObject *_self, int anInt);

// method '-[NSObject setTarget:]'
void _IM_NSObject_setTarget_C(NSObject *_self, id anObject);

// method '-[NSObject setTitle:]'
void _IM_NSObject_setTitle_C(NSObject *_self, NSString* aString);

// method '-[NSObject setTitleWithMnemonic:]'
void _IM_NSObject_setTitleWithMnemonic_C(NSObject *_self, NSString* stringWithAmpersand);

// method '-[NSObject setToolTip:]'
void _IM_NSObject_setToolTip_C(NSObject *_self, NSString* toolTip);

// method '+[NSObject setUsesUserKeyEquivalents:]'
void _CM_NSObject_setUsesUserKeyEquivalents_C(Class _class, BOOL flag);

// method '-[NSObject slideDraggedImageTo:]'
void _IM_NSObject_slideDraggedImageTo_C(NSObject *_self, struct _NSPoint screenPoint);

// method '-[NSObject sound:didFinishPlaying:]'
void _IM_NSObject_sound_CdidFinishPlaying_C(NSObject *_self, NSSound* sound, BOOL aBool);

// method '-[NSObject speechRecognizer:didRecognizeCommand:]'
void _IM_NSObject_speechRecognizer_CdidRecognizeCommand_C(NSObject *_self, NSSpeechRecognizer* sender, id command);

// method '-[NSObject speechSynthesizer:didFinishSpeaking:]'
void _IM_NSObject_speechSynthesizer_CdidFinishSpeaking_C(NSObject *_self, NSSpeechSynthesizer* sender, BOOL finishedSpeaking);

// method '-[NSObject speechSynthesizer:willSpeakPhoneme:]'
void _IM_NSObject_speechSynthesizer_CwillSpeakPhoneme_C(NSObject *_self, NSSpeechSynthesizer* sender, short phonemeOpcode);

// method '-[NSObject speechSynthesizer:willSpeakWord:ofString:]'
void _IM_NSObject_speechSynthesizer_CwillSpeakWord_CofString_C(NSObject *_self, NSSpeechSynthesizer* sender, struct _NSRange characterRange, NSString* string);

// method '-[NSObject splitView:canCollapseSubview:]'
BOOL _IM_NSObject_splitView_CcanCollapseSubview_C(NSObject *_self, NSSplitView* sender, NSView* subview);

// method '-[NSObject splitView:constrainMaxCoordinate:ofSubviewAt:]'
float _IM_NSObject_splitView_CconstrainMaxCoordinate_CofSubviewAt_C(NSObject *_self, NSSplitView* sender, float proposedCoord, int offset);

// method '-[NSObject splitView:constrainMinCoordinate:ofSubviewAt:]'
float _IM_NSObject_splitView_CconstrainMinCoordinate_CofSubviewAt_C(NSObject *_self, NSSplitView* sender, float proposedCoord, int offset);

// method '-[NSObject splitView:constrainSplitPosition:ofSubviewAt:]'
float _IM_NSObject_splitView_CconstrainSplitPosition_CofSubviewAt_C(NSObject *_self, NSSplitView* splitView, float proposedPosition, int index);

// method '-[NSObject splitView:resizeSubviewsWithOldSize:]'
void _IM_NSObject_splitView_CresizeSubviewsWithOldSize_C(NSObject *_self, NSSplitView* sender, struct _NSSize oldSize);

// method '-[NSObject splitViewDidResizeSubviews:]'
void _IM_NSObject_splitViewDidResizeSubviews_C(NSObject *_self, id notification);

// method '-[NSObject splitViewWillResizeSubviews:]'
void _IM_NSObject_splitViewWillResizeSubviews_C(NSObject *_self, id notification);

// method '-[NSObject state]'
int _IM_NSObject_state(NSObject *_self);

// method '-[NSObject submenu]'
NSMenu* _IM_NSObject_submenu(NSObject *_self);

// method '-[NSObject supportsMode:]'
BOOL _IM_NSObject_supportsMode_C(NSObject *_self, int mode);

// method '-[NSObject tabView:didSelectTabViewItem:]'
void _IM_NSObject_tabView_CdidSelectTabViewItem_C(NSObject *_self, NSTabView* tabView, NSTabViewItem* tabViewItem);

// method '-[NSObject tabView:shouldSelectTabViewItem:]'
BOOL _IM_NSObject_tabView_CshouldSelectTabViewItem_C(NSObject *_self, NSTabView* tabView, NSTabViewItem* tabViewItem);

// method '-[NSObject tabView:willSelectTabViewItem:]'
void _IM_NSObject_tabView_CwillSelectTabViewItem_C(NSObject *_self, NSTabView* tabView, NSTabViewItem* tabViewItem);

// method '-[NSObject tabViewDidChangeNumberOfTabViewItems:]'
void _IM_NSObject_tabViewDidChangeNumberOfTabViewItems_C(NSObject *_self, NSTabView* TabView);

// method '-[NSObject tableView:acceptDrop:row:dropOperation:]'
BOOL _IM_NSObject_tableView_CacceptDrop_Crow_CdropOperation_C(NSObject *_self, NSTableView* tv, id info, int row, int op);

// method '-[NSObject tableView:didClickTableColumn:]'
void _IM_NSObject_tableView_CdidClickTableColumn_C(NSObject *_self, NSTableView* tableView, NSTableColumn* tableColumn);

// method '-[NSObject tableView:didDragTableColumn:]'
void _IM_NSObject_tableView_CdidDragTableColumn_C(NSObject *_self, NSTableView* tableView, NSTableColumn* tableColumn);

// method '-[NSObject tableView:heightOfRow:]'
float _IM_NSObject_tableView_CheightOfRow_C(NSObject *_self, NSTableView* tableView, int row);

// method '-[NSObject tableView:mouseDownInHeaderOfTableColumn:]'
void _IM_NSObject_tableView_CmouseDownInHeaderOfTableColumn_C(NSObject *_self, NSTableView* tableView, NSTableColumn* tableColumn);

// method '-[NSObject tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:]'
id _IM_NSObject_tableView_CnamesOfPromisedFilesDroppedAtDestination_CforDraggedRowsWithIndexes_C(NSObject *_self, NSTableView* tv, NSURL* dropDestination, id indexSet);

// method '-[NSObject tableView:objectValueForTableColumn:row:]'
id _IM_NSObject_tableView_CobjectValueForTableColumn_Crow_C(NSObject *_self, NSTableView* tableView, NSTableColumn* tableColumn, int row);

// method '-[NSObject tableView:setObjectValue:forTableColumn:row:]'
void _IM_NSObject_tableView_CsetObjectValue_CforTableColumn_Crow_C(NSObject *_self, NSTableView* tableView, id object, NSTableColumn* tableColumn, int row);

// method '-[NSObject tableView:shouldEditTableColumn:row:]'
BOOL _IM_NSObject_tableView_CshouldEditTableColumn_Crow_C(NSObject *_self, NSTableView* tableView, NSTableColumn* tableColumn, int row);

// method '-[NSObject tableView:shouldSelectRow:]'
BOOL _IM_NSObject_tableView_CshouldSelectRow_C(NSObject *_self, NSTableView* tableView, int row);

// method '-[NSObject tableView:shouldSelectTableColumn:]'
BOOL _IM_NSObject_tableView_CshouldSelectTableColumn_C(NSObject *_self, NSTableView* tableView, NSTableColumn* tableColumn);

// method '-[NSObject tableView:sortDescriptorsDidChange:]'
void _IM_NSObject_tableView_CsortDescriptorsDidChange_C(NSObject *_self, NSTableView* tableView, id oldDescriptors);

// method '-[NSObject tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:]'
NSString* _IM_NSObject_tableView_CtoolTipForCell_Crect_CtableColumn_Crow_CmouseLocation_C(NSObject *_self, NSTableView* tv, NSCell* cell, struct _NSRect *rect, NSTableColumn* tc, int row, struct _NSPoint mouseLocation);

// method '-[NSObject tableView:validateDrop:proposedRow:proposedDropOperation:]'
unsigned int _IM_NSObject_tableView_CvalidateDrop_CproposedRow_CproposedDropOperation_C(NSObject *_self, NSTableView* tv, id info, int row, int op);

// method '-[NSObject tableView:willDisplayCell:forTableColumn:row:]'
void _IM_NSObject_tableView_CwillDisplayCell_CforTableColumn_Crow_C(NSObject *_self, NSTableView* tableView, id cell, NSTableColumn* tableColumn, int row);

// method '-[NSObject tableView:writeRows:toPasteboard:]'
BOOL _IM_NSObject_tableView_CwriteRows_CtoPasteboard_C(NSObject *_self, NSTableView* tv, id rows, NSPasteboard* pboard);

// method '-[NSObject tableView:writeRowsWithIndexes:toPasteboard:]'
BOOL _IM_NSObject_tableView_CwriteRowsWithIndexes_CtoPasteboard_C(NSObject *_self, NSTableView* tv, id rowIndexes, NSPasteboard* pboard);

// method '-[NSObject tableViewColumnDidMove:]'
void _IM_NSObject_tableViewColumnDidMove_C(NSObject *_self, id notification);

// method '-[NSObject tableViewColumnDidResize:]'
void _IM_NSObject_tableViewColumnDidResize_C(NSObject *_self, id notification);

// method '-[NSObject tableViewSelectionDidChange:]'
void _IM_NSObject_tableViewSelectionDidChange_C(NSObject *_self, id notification);

// method '-[NSObject tableViewSelectionIsChanging:]'
void _IM_NSObject_tableViewSelectionIsChanging_C(NSObject *_self, id notification);

// method '-[NSObject tag]'
int _IM_NSObject_tag(NSObject *_self);

// method '-[NSObject target]'
id _IM_NSObject_target(NSObject *_self);

// method '-[NSObject terminate:]'
void _IM_NSObject_terminate_C(NSObject *_self, id sender);

// method '-[NSObject textDidBeginEditing:]'
void _IM_NSObject_textDidBeginEditing_C(NSObject *_self, id notification);

// method '-[NSObject textDidChange:]'
void _IM_NSObject_textDidChange_C(NSObject *_self, id notification);

// method '-[NSObject textDidEndEditing:]'
void _IM_NSObject_textDidEndEditing_C(NSObject *_self, id notification);

// method '-[NSObject textShouldBeginEditing:]'
BOOL _IM_NSObject_textShouldBeginEditing_C(NSObject *_self, NSText* textObject);

// method '-[NSObject textShouldEndEditing:]'
BOOL _IM_NSObject_textShouldEndEditing_C(NSObject *_self, NSText* textObject);

// method '-[NSObject textStorageDidProcessEditing:]'
void _IM_NSObject_textStorageDidProcessEditing_C(NSObject *_self, id notification);

// method '-[NSObject textStorageWillProcessEditing:]'
void _IM_NSObject_textStorageWillProcessEditing_C(NSObject *_self, id notification);

// method '-[NSObject textView:clickedOnCell:inRect:]'
void _IM_NSObject_textView_CclickedOnCell_CinRect_C(NSObject *_self, NSTextView* textView, id cell, struct _NSRect cellFrame);

// method '-[NSObject textView:clickedOnCell:inRect:atIndex:]'
void _IM_NSObject_textView_CclickedOnCell_CinRect_CatIndex_C(NSObject *_self, NSTextView* textView, id cell, struct _NSRect cellFrame, unsigned int charIndex);

// method '-[NSObject textView:clickedOnLink:]'
BOOL _IM_NSObject_textView_CclickedOnLink_C(NSObject *_self, NSTextView* textView, id link);

// method '-[NSObject textView:clickedOnLink:atIndex:]'
BOOL _IM_NSObject_textView_CclickedOnLink_CatIndex_C(NSObject *_self, NSTextView* textView, id link, unsigned int charIndex);

// method '-[NSObject textView:completions:forPartialWordRange:indexOfSelectedItem:]'
id _IM_NSObject_textView_Ccompletions_CforPartialWordRange_CindexOfSelectedItem_C(NSObject *_self, NSTextView* textView, id words, struct _NSRange charRange, int *index);

// method '-[NSObject textView:doCommandBySelector:]'
BOOL _IM_NSObject_textView_CdoCommandBySelector_C(NSObject *_self, NSTextView* textView, SEL commandSelector);

// method '-[NSObject textView:doubleClickedOnCell:inRect:]'
void _IM_NSObject_textView_CdoubleClickedOnCell_CinRect_C(NSObject *_self, NSTextView* textView, id cell, struct _NSRect cellFrame);

// method '-[NSObject textView:doubleClickedOnCell:inRect:atIndex:]'
void _IM_NSObject_textView_CdoubleClickedOnCell_CinRect_CatIndex_C(NSObject *_self, NSTextView* textView, id cell, struct _NSRect cellFrame, unsigned int charIndex);

// method '-[NSObject textView:draggedCell:inRect:event:]'
void _IM_NSObject_textView_CdraggedCell_CinRect_Cevent_C(NSObject *_self, NSTextView* view, id cell, struct _NSRect rect, NSEvent* event);

// method '-[NSObject textView:draggedCell:inRect:event:atIndex:]'
void _IM_NSObject_textView_CdraggedCell_CinRect_Cevent_CatIndex_C(NSObject *_self, NSTextView* view, id cell, struct _NSRect rect, NSEvent* event, unsigned int charIndex);

// method '-[NSObject textView:shouldChangeTextInRange:replacementString:]'
BOOL _IM_NSObject_textView_CshouldChangeTextInRange_CreplacementString_C(NSObject *_self, NSTextView* textView, struct _NSRange affectedCharRange, NSString* replacementString);

// method '-[NSObject textView:shouldChangeTextInRanges:replacementStrings:]'
BOOL _IM_NSObject_textView_CshouldChangeTextInRanges_CreplacementStrings_C(NSObject *_self, NSTextView* textView, id affectedRanges, id replacementStrings);

// method '-[NSObject textView:shouldChangeTypingAttributes:toAttributes:]'
id _IM_NSObject_textView_CshouldChangeTypingAttributes_CtoAttributes_C(NSObject *_self, NSTextView* textView, id oldTypingAttributes, id newTypingAttributes);

// method '-[NSObject textView:willChangeSelectionFromCharacterRange:toCharacterRange:]'
struct _NSRange _IM_NSObject_textView_CwillChangeSelectionFromCharacterRange_CtoCharacterRange_C(NSObject *_self, NSTextView* textView, struct _NSRange oldSelectedCharRange, struct _NSRange newSelectedCharRange);

// method '-[NSObject textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:]'
id _IM_NSObject_textView_CwillChangeSelectionFromCharacterRanges_CtoCharacterRanges_C(NSObject *_self, NSTextView* textView, id oldSelectedCharRanges, id newSelectedCharRanges);

// method '-[NSObject textView:willDisplayToolTip:forCharacterAtIndex:]'
NSString* _IM_NSObject_textView_CwillDisplayToolTip_CforCharacterAtIndex_C(NSObject *_self, NSTextView* textView, NSString* tooltip, unsigned int characterIndex);

// method '-[NSObject textView:writablePasteboardTypesForCell:atIndex:]'
id _IM_NSObject_textView_CwritablePasteboardTypesForCell_CatIndex_C(NSObject *_self, NSTextView* view, id cell, unsigned int charIndex);

// method '-[NSObject textView:writeCell:atIndex:toPasteboard:type:]'
BOOL _IM_NSObject_textView_CwriteCell_CatIndex_CtoPasteboard_Ctype_C(NSObject *_self, NSTextView* view, id cell, unsigned int charIndex, NSPasteboard* pboard, NSString* type);

// method '-[NSObject textViewDidChangeSelection:]'
void _IM_NSObject_textViewDidChangeSelection_C(NSObject *_self, id notification);

// method '-[NSObject textViewDidChangeTypingAttributes:]'
void _IM_NSObject_textViewDidChangeTypingAttributes_C(NSObject *_self, id notification);

// method '-[NSObject title]'
NSString* _IM_NSObject_title(NSObject *_self);

// method '-[NSObject tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:]'
id _IM_NSObject_tokenField_CcompletionsForSubstring_CindexOfToken_CindexOfSelectedItem_C(NSObject *_self, NSTokenField* tokenField, NSString* substring, int tokenIndex, int *selectedIndex);

// method '-[NSObject tokenField:displayStringForRepresentedObject:]'
NSString* _IM_NSObject_tokenField_CdisplayStringForRepresentedObject_C(NSObject *_self, NSTokenField* tokenField, id representedObject);

// method '-[NSObject tokenField:editingStringForRepresentedObject:]'
NSString* _IM_NSObject_tokenField_CeditingStringForRepresentedObject_C(NSObject *_self, NSTokenField* tokenField, id representedObject);

// method '-[NSObject tokenField:hasMenuForRepresentedObject:]'
BOOL _IM_NSObject_tokenField_ChasMenuForRepresentedObject_C(NSObject *_self, NSTokenField* tokenField, id representedObject);

// method '-[NSObject tokenField:menuForRepresentedObject:]'
NSMenu* _IM_NSObject_tokenField_CmenuForRepresentedObject_C(NSObject *_self, NSTokenField* tokenField, id representedObject);

// method '-[NSObject tokenField:readFromPasteboard:]'
id _IM_NSObject_tokenField_CreadFromPasteboard_C(NSObject *_self, NSTokenField* tokenField, NSPasteboard* pboard);

// method '-[NSObject tokenField:representedObjectForEditingString:]'
id _IM_NSObject_tokenField_CrepresentedObjectForEditingString_C(NSObject *_self, NSTokenField* tokenField, NSString* editingString);

// method '-[NSObject tokenField:shouldAddObjects:atIndex:]'
id _IM_NSObject_tokenField_CshouldAddObjects_CatIndex_C(NSObject *_self, NSTokenField* tokenField, id tokens, unsigned int index);

// method '-[NSObject tokenField:styleForRepresentedObject:]'
int _IM_NSObject_tokenField_CstyleForRepresentedObject_C(NSObject *_self, NSTokenField* tokenField, id representedObject);

// method '-[NSObject tokenField:writeRepresentedObjects:toPasteboard:]'
BOOL _IM_NSObject_tokenField_CwriteRepresentedObjects_CtoPasteboard_C(NSObject *_self, NSTokenField* tokenField, id objects, NSPasteboard* pboard);

// method '-[NSObject tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:]'
id _IM_NSObject_tokenFieldCell_CcompletionsForSubstring_CindexOfToken_CindexOfSelectedItem_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, NSString* substring, int tokenIndex, int *selectedIndex);

// method '-[NSObject tokenFieldCell:displayStringForRepresentedObject:]'
NSString* _IM_NSObject_tokenFieldCell_CdisplayStringForRepresentedObject_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id representedObject);

// method '-[NSObject tokenFieldCell:editingStringForRepresentedObject:]'
NSString* _IM_NSObject_tokenFieldCell_CeditingStringForRepresentedObject_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id representedObject);

// method '-[NSObject tokenFieldCell:hasMenuForRepresentedObject:]'
BOOL _IM_NSObject_tokenFieldCell_ChasMenuForRepresentedObject_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id representedObject);

// method '-[NSObject tokenFieldCell:menuForRepresentedObject:]'
NSMenu* _IM_NSObject_tokenFieldCell_CmenuForRepresentedObject_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id representedObject);

// method '-[NSObject tokenFieldCell:readFromPasteboard:]'
id _IM_NSObject_tokenFieldCell_CreadFromPasteboard_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, NSPasteboard* pboard);

// method '-[NSObject tokenFieldCell:representedObjectForEditingString:]'
id _IM_NSObject_tokenFieldCell_CrepresentedObjectForEditingString_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, NSString* editingString);

// method '-[NSObject tokenFieldCell:shouldAddObjects:atIndex:]'
id _IM_NSObject_tokenFieldCell_CshouldAddObjects_CatIndex_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id tokens, unsigned int index);

// method '-[NSObject tokenFieldCell:styleForRepresentedObject:]'
int _IM_NSObject_tokenFieldCell_CstyleForRepresentedObject_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id representedObject);

// method '-[NSObject tokenFieldCell:writeRepresentedObjects:toPasteboard:]'
BOOL _IM_NSObject_tokenFieldCell_CwriteRepresentedObjects_CtoPasteboard_C(NSObject *_self, NSTokenFieldCell* tokenFieldCell, id objects, NSPasteboard* pboard);

// method '-[NSObject toolTip]'
NSString* _IM_NSObject_toolTip(NSObject *_self);

// method '-[NSObject toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:]'
NSToolbarItem* _IM_NSObject_toolbar_CitemForItemIdentifier_CwillBeInsertedIntoToolbar_C(NSObject *_self, NSToolbar* toolbar, NSString* itemIdentifier, BOOL flag);

// method '-[NSObject toolbarAllowedItemIdentifiers:]'
id _IM_NSObject_toolbarAllowedItemIdentifiers_C(NSObject *_self, NSToolbar* toolbar);

// method '-[NSObject toolbarDefaultItemIdentifiers:]'
id _IM_NSObject_toolbarDefaultItemIdentifiers_C(NSObject *_self, NSToolbar* toolbar);

// method '-[NSObject toolbarDidRemoveItem:]'
void _IM_NSObject_toolbarDidRemoveItem_C(NSObject *_self, id notification);

// method '-[NSObject toolbarSelectableItemIdentifiers:]'
id _IM_NSObject_toolbarSelectableItemIdentifiers_C(NSObject *_self, NSToolbar* toolbar);

// method '-[NSObject toolbarWillAddItem:]'
void _IM_NSObject_toolbarWillAddItem_C(NSObject *_self, id notification);

// method '-[NSObject trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:]'
BOOL _IM_NSObject_trackMouse_CinRect_CofView_CatCharacterIndex_CuntilMouseUp_C(NSObject *_self, NSEvent* theEvent, struct _NSRect cellFrame, NSView* controlView, unsigned int charIndex, BOOL flag);

// method '-[NSObject trackMouse:inRect:ofView:untilMouseUp:]'
BOOL _IM_NSObject_trackMouse_CinRect_CofView_CuntilMouseUp_C(NSObject *_self, NSEvent* theEvent, struct _NSRect cellFrame, NSView* controlView, BOOL flag);

// method '-[NSObject unbind:]'
void _IM_NSObject_unbind_C(NSObject *_self, NSString* binding);

// method '-[NSObject undoManagerForTextView:]'
id _IM_NSObject_undoManagerForTextView_C(NSObject *_self, NSTextView* view);

// method '-[NSObject unmarkText]'
void _IM_NSObject_unmarkText(NSObject *_self);

// method '-[NSObject userKeyEquivalent]'
NSString* _IM_NSObject_userKeyEquivalent(NSObject *_self);

// method '-[NSObject userKeyEquivalentModifierMask]'
unsigned int _IM_NSObject_userKeyEquivalentModifierMask(NSObject *_self);

// method '+[NSObject usesUserKeyEquivalents]'
BOOL _CM_NSObject_usesUserKeyEquivalents(Class _class);

// method '-[NSObject validAttributesForMarkedText]'
id _IM_NSObject_validAttributesForMarkedText(NSObject *_self);

// method '-[NSObject validModesForFontPanel:]'
unsigned int _IM_NSObject_validModesForFontPanel_C(NSObject *_self, NSFontPanel* fontPanel);

// method '-[NSObject validateMenuItem:]'
BOOL _IM_NSObject_validateMenuItem_C(NSObject *_self, id menuItem);

// method '-[NSObject validateToolbarItem:]'
BOOL _IM_NSObject_validateToolbarItem_C(NSObject *_self, NSToolbarItem* theItem);

// method '-[NSObject validateUserInterfaceItem:]'
BOOL _IM_NSObject_validateUserInterfaceItem_C(NSObject *_self, id anItem);

// method '-[NSObject valueClassForBinding:]'
Class _IM_NSObject_valueClassForBinding_C(NSObject *_self, NSString* binding);

// method '-[NSObject view:stringForToolTip:point:userData:]'
NSString* _IM_NSObject_view_CstringForToolTip_Cpoint_CuserData_C(NSObject *_self, NSView* view, int tag, struct _NSPoint point, void *data);

// method '-[NSObject viewSizeChanged:]'
void _IM_NSObject_viewSizeChanged_C(NSObject *_self, id sender);

// method '-[NSObject wantsPeriodicDraggingUpdates]'
BOOL _IM_NSObject_wantsPeriodicDraggingUpdates(NSObject *_self);

// method '-[NSObject wantsToDelayTextChangeNotifications]'
BOOL _IM_NSObject_wantsToDelayTextChangeNotifications(NSObject *_self);

// method '-[NSObject wantsToHandleMouseEvents]'
BOOL _IM_NSObject_wantsToHandleMouseEvents(NSObject *_self);

// method '-[NSObject wantsToInterpretAllKeystrokes]'
BOOL _IM_NSObject_wantsToInterpretAllKeystrokes(NSObject *_self);

// method '-[NSObject wantsToTrackMouse]'
BOOL _IM_NSObject_wantsToTrackMouse(NSObject *_self);

// method '-[NSObject wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:]'
BOOL _IM_NSObject_wantsToTrackMouseForEvent_CinRect_CofView_CatCharacterIndex_C(NSObject *_self, NSEvent* theEvent, struct _NSRect cellFrame, NSView* controlView, unsigned int charIndex);

// method '-[NSObject window:willPositionSheet:usingRect:]'
struct _NSRect _IM_NSObject_window_CwillPositionSheet_CusingRect_C(NSObject *_self, NSWindow* window, NSWindow* sheet, struct _NSRect rect);

// method '-[NSObject windowDidBecomeKey:]'
void _IM_NSObject_windowDidBecomeKey_C(NSObject *_self, id notification);

// method '-[NSObject windowDidBecomeMain:]'
void _IM_NSObject_windowDidBecomeMain_C(NSObject *_self, id notification);

// method '-[NSObject windowDidChangeScreen:]'
void _IM_NSObject_windowDidChangeScreen_C(NSObject *_self, id notification);

// method '-[NSObject windowDidChangeScreenProfile:]'
void _IM_NSObject_windowDidChangeScreenProfile_C(NSObject *_self, id notification);

// method '-[NSObject windowDidDeminiaturize:]'
void _IM_NSObject_windowDidDeminiaturize_C(NSObject *_self, id notification);

// method '-[NSObject windowDidEndSheet:]'
void _IM_NSObject_windowDidEndSheet_C(NSObject *_self, id notification);

// method '-[NSObject windowDidExpose:]'
void _IM_NSObject_windowDidExpose_C(NSObject *_self, id notification);

// method '-[NSObject windowDidMiniaturize:]'
void _IM_NSObject_windowDidMiniaturize_C(NSObject *_self, id notification);

// method '-[NSObject windowDidMove:]'
void _IM_NSObject_windowDidMove_C(NSObject *_self, id notification);

// method '-[NSObject windowDidResignKey:]'
void _IM_NSObject_windowDidResignKey_C(NSObject *_self, id notification);

// method '-[NSObject windowDidResignMain:]'
void _IM_NSObject_windowDidResignMain_C(NSObject *_self, id notification);

// method '-[NSObject windowDidResize:]'
void _IM_NSObject_windowDidResize_C(NSObject *_self, id notification);

// method '-[NSObject windowDidUpdate:]'
void _IM_NSObject_windowDidUpdate_C(NSObject *_self, id notification);

// method '-[NSObject windowShouldClose:]'
BOOL _IM_NSObject_windowShouldClose_C(NSObject *_self, id sender);

// method '-[NSObject windowShouldZoom:toFrame:]'
BOOL _IM_NSObject_windowShouldZoom_CtoFrame_C(NSObject *_self, NSWindow* window, struct _NSRect newFrame);

// method '-[NSObject windowWillBeginSheet:]'
void _IM_NSObject_windowWillBeginSheet_C(NSObject *_self, id notification);

// method '-[NSObject windowWillClose:]'
void _IM_NSObject_windowWillClose_C(NSObject *_self, id notification);

// method '-[NSObject windowWillMiniaturize:]'
void _IM_NSObject_windowWillMiniaturize_C(NSObject *_self, id notification);

// method '-[NSObject windowWillMove:]'
void _IM_NSObject_windowWillMove_C(NSObject *_self, id notification);

// method '-[NSObject windowWillResize:toSize:]'
struct _NSSize _IM_NSObject_windowWillResize_CtoSize_C(NSObject *_self, NSWindow* sender, struct _NSSize frameSize);

// method '-[NSObject windowWillReturnFieldEditor:toObject:]'
id _IM_NSObject_windowWillReturnFieldEditor_CtoObject_C(NSObject *_self, NSWindow* sender, id client);

// method '-[NSObject windowWillReturnUndoManager:]'
id _IM_NSObject_windowWillReturnUndoManager_C(NSObject *_self, NSWindow* window);

// method '-[NSObject windowWillUseStandardFrame:defaultFrame:]'
struct _NSRect _IM_NSObject_windowWillUseStandardFrame_CdefaultFrame_C(NSObject *_self, NSWindow* window, struct _NSRect newFrame);

// method '-[NSObject writeSelectionToPasteboard:types:]'
BOOL _IM_NSObject_writeSelectionToPasteboard_Ctypes_C(NSObject *_self, NSPasteboard* pboard, id types);

// method '-[NSObjectController add:]'
void _IM_NSObjectController_add_C(NSObjectController *_self, id sender);

// method '-[NSObjectController addObject:]'
void _IM_NSObjectController_addObject_C(NSObjectController *_self, id object);

// method '-[NSObjectController automaticallyPreparesContent]'
BOOL _IM_NSObjectController_automaticallyPreparesContent(NSObjectController *_self);

// method '-[NSObjectController canAdd]'
BOOL _IM_NSObjectController_canAdd(NSObjectController *_self);

// method '-[NSObjectController canRemove]'
BOOL _IM_NSObjectController_canRemove(NSObjectController *_self);

// method '-[NSObjectController content]'
id _IM_NSObjectController_content(NSObjectController *_self);

// method '-[NSObjectController entityName]'
NSString* _IM_NSObjectController_entityName(NSObjectController *_self);

// method '-[NSObjectController fetch:]'
void _IM_NSObjectController_fetch_C(NSObjectController *_self, id sender);

// method '-[NSObjectController fetchPredicate]'
id _IM_NSObjectController_fetchPredicate(NSObjectController *_self);

// method '-[NSObjectController fetchWithRequest:merge:error:]'
BOOL _IM_NSObjectController_fetchWithRequest_Cmerge_Cerror_C(NSObjectController *_self, id fetchRequest, BOOL merge, id *error);

// method '-[NSObjectController initWithContent:]'
NSObjectController *_IM_NSObjectController_initWithContent_C(NSObjectController *_self, id content);

// method '-[NSObjectController isEditable]'
BOOL _IM_NSObjectController_isEditable(NSObjectController *_self);

// method '-[NSObjectController managedObjectContext]'
id _IM_NSObjectController_managedObjectContext(NSObjectController *_self);

// method '-[NSObjectController newObject]'
NSObjectController *_IM_NSObjectController_newObject(NSObjectController *_self);

// method '-[NSObjectController objectClass]'
Class _IM_NSObjectController_objectClass(NSObjectController *_self);

// method '-[NSObjectController prepareContent]'
void _IM_NSObjectController_prepareContent(NSObjectController *_self);

// method '-[NSObjectController remove:]'
void _IM_NSObjectController_remove_C(NSObjectController *_self, id sender);

// method '-[NSObjectController removeObject:]'
void _IM_NSObjectController_removeObject_C(NSObjectController *_self, id object);

// method '-[NSObjectController selectedObjects]'
id _IM_NSObjectController_selectedObjects(NSObjectController *_self);

// method '-[NSObjectController selection]'
id _IM_NSObjectController_selection(NSObjectController *_self);

// method '-[NSObjectController setAutomaticallyPreparesContent:]'
void _IM_NSObjectController_setAutomaticallyPreparesContent_C(NSObjectController *_self, BOOL flag);

// method '-[NSObjectController setContent:]'
void _IM_NSObjectController_setContent_C(NSObjectController *_self, id content);

// method '-[NSObjectController setEditable:]'
void _IM_NSObjectController_setEditable_C(NSObjectController *_self, BOOL flag);

// method '-[NSObjectController setEntityName:]'
void _IM_NSObjectController_setEntityName_C(NSObjectController *_self, NSString* entityName);

// method '-[NSObjectController setFetchPredicate:]'
void _IM_NSObjectController_setFetchPredicate_C(NSObjectController *_self, id predicate);

// method '-[NSObjectController setManagedObjectContext:]'
void _IM_NSObjectController_setManagedObjectContext_C(NSObjectController *_self, id managedObjectContext);

// method '-[NSObjectController setObjectClass:]'
void _IM_NSObjectController_setObjectClass_C(NSObjectController *_self, Class objectClass);

// method '-[NSObjectController validateMenuItem:]'
BOOL _IM_NSObjectController_validateMenuItem_C(NSObjectController *_self, id menuItem);

// method '-[NSOpenGLContext CGLContextObj]'
void *_IM_NSOpenGLContext_CGLContextObj(NSOpenGLContext *_self);

// method '+[NSOpenGLContext clearCurrentContext]'
void _CM_NSOpenGLContext_clearCurrentContext(Class _class);

// method '-[NSOpenGLContext clearDrawable]'
void _IM_NSOpenGLContext_clearDrawable(NSOpenGLContext *_self);

// method '-[NSOpenGLContext copyAttributesFromContext:withMask:]'
void _IM_NSOpenGLContext_copyAttributesFromContext_CwithMask_C(NSOpenGLContext *_self, NSOpenGLContext* context, unsigned long mask);

// method '-[NSOpenGLContext createTexture:fromView:internalFormat:]'
void _IM_NSOpenGLContext_createTexture_CfromView_CinternalFormat_C(NSOpenGLContext *_self, unsigned long target, NSView* view, unsigned long format);

// method '+[NSOpenGLContext currentContext]'
NSOpenGLContext* _CM_NSOpenGLContext_currentContext(Class _class);

// method '-[NSOpenGLContext currentVirtualScreen]'
int _IM_NSOpenGLContext_currentVirtualScreen(NSOpenGLContext *_self);

// method '-[NSOpenGLContext flushBuffer]'
void _IM_NSOpenGLContext_flushBuffer(NSOpenGLContext *_self);

// method '-[NSOpenGLContext getValues:forParameter:]'
void _IM_NSOpenGLContext_getValues_CforParameter_C(NSOpenGLContext *_self, long *vals, int param);

// method '-[NSOpenGLContext initWithFormat:shareContext:]'
NSOpenGLContext *_IM_NSOpenGLContext_initWithFormat_CshareContext_C(NSOpenGLContext *_self, NSOpenGLPixelFormat* format, NSOpenGLContext* share);

// method '-[NSOpenGLContext makeCurrentContext]'
void _IM_NSOpenGLContext_makeCurrentContext(NSOpenGLContext *_self);

// method '-[NSOpenGLContext pixelBuffer]'
NSOpenGLPixelBuffer* _IM_NSOpenGLContext_pixelBuffer(NSOpenGLContext *_self);

// method '-[NSOpenGLContext pixelBufferCubeMapFace]'
unsigned long _IM_NSOpenGLContext_pixelBufferCubeMapFace(NSOpenGLContext *_self);

// method '-[NSOpenGLContext pixelBufferMipMapLevel]'
long _IM_NSOpenGLContext_pixelBufferMipMapLevel(NSOpenGLContext *_self);

// method '-[NSOpenGLContext setCurrentVirtualScreen:]'
void _IM_NSOpenGLContext_setCurrentVirtualScreen_C(NSOpenGLContext *_self, int screen);

// method '-[NSOpenGLContext setFullScreen]'
void _IM_NSOpenGLContext_setFullScreen(NSOpenGLContext *_self);

// method '-[NSOpenGLContext setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:]'
void _IM_NSOpenGLContext_setPixelBuffer_CcubeMapFace_CmipMapLevel_CcurrentVirtualScreen_C(NSOpenGLContext *_self, NSOpenGLPixelBuffer* pixelBuffer, unsigned long face, long level, int screen);

// method '-[NSOpenGLContext setTextureImageToPixelBuffer:colorBuffer:]'
void _IM_NSOpenGLContext_setTextureImageToPixelBuffer_CcolorBuffer_C(NSOpenGLContext *_self, NSOpenGLPixelBuffer* pixelBuffer, unsigned long source);

// method '-[NSOpenGLContext setValues:forParameter:]'
void _IM_NSOpenGLContext_setValues_CforParameter_C(NSOpenGLContext *_self, const long* vals, int param);

// method '-[NSOpenGLContext setView:]'
void _IM_NSOpenGLContext_setView_C(NSOpenGLContext *_self, NSView* view);

// method '-[NSOpenGLContext update]'
void _IM_NSOpenGLContext_update(NSOpenGLContext *_self);

// method '-[NSOpenGLContext view]'
NSView* _IM_NSOpenGLContext_view(NSOpenGLContext *_self);

// method '-[NSOpenGLPixelBuffer initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:]'
NSOpenGLPixelBuffer *_IM_NSOpenGLPixelBuffer_initWithTextureTarget_CtextureInternalFormat_CtextureMaxMipMapLevel_CpixelsWide_CpixelsHigh_C(NSOpenGLPixelBuffer *_self, unsigned long target, unsigned long format, long maxLevel, int pixelsWide, int pixelsHigh);

// method '-[NSOpenGLPixelBuffer pixelsHigh]'
int _IM_NSOpenGLPixelBuffer_pixelsHigh(NSOpenGLPixelBuffer *_self);

// method '-[NSOpenGLPixelBuffer pixelsWide]'
int _IM_NSOpenGLPixelBuffer_pixelsWide(NSOpenGLPixelBuffer *_self);

// method '-[NSOpenGLPixelBuffer textureInternalFormat]'
unsigned long _IM_NSOpenGLPixelBuffer_textureInternalFormat(NSOpenGLPixelBuffer *_self);

// method '-[NSOpenGLPixelBuffer textureMaxMipMapLevel]'
long _IM_NSOpenGLPixelBuffer_textureMaxMipMapLevel(NSOpenGLPixelBuffer *_self);

// method '-[NSOpenGLPixelBuffer textureTarget]'
unsigned long _IM_NSOpenGLPixelBuffer_textureTarget(NSOpenGLPixelBuffer *_self);

// method '-[NSOpenGLPixelFormat CGLPixelFormatObj]'
void *_IM_NSOpenGLPixelFormat_CGLPixelFormatObj(NSOpenGLPixelFormat *_self);

// method '-[NSOpenGLPixelFormat attributes]'
id _IM_NSOpenGLPixelFormat_attributes(NSOpenGLPixelFormat *_self);

// method '-[NSOpenGLPixelFormat getValues:forAttribute:forVirtualScreen:]'
void _IM_NSOpenGLPixelFormat_getValues_CforAttribute_CforVirtualScreen_C(NSOpenGLPixelFormat *_self, long *vals, int attrib, int screen);

// method '-[NSOpenGLPixelFormat initWithAttributes:]'
NSOpenGLPixelFormat *_IM_NSOpenGLPixelFormat_initWithAttributes_C(NSOpenGLPixelFormat *_self, int *attribs);

// method '-[NSOpenGLPixelFormat initWithData:]'
NSOpenGLPixelFormat *_IM_NSOpenGLPixelFormat_initWithData_C(NSOpenGLPixelFormat *_self, id attribs);

// method '-[NSOpenGLPixelFormat numberOfVirtualScreens]'
int _IM_NSOpenGLPixelFormat_numberOfVirtualScreens(NSOpenGLPixelFormat *_self);

// method '-[NSOpenGLPixelFormat setAttributes:]'
void _IM_NSOpenGLPixelFormat_setAttributes_C(NSOpenGLPixelFormat *_self, id attribs);

// method '-[NSOpenGLView clearGLContext]'
void _IM_NSOpenGLView_clearGLContext(NSOpenGLView *_self);

// method '+[NSOpenGLView defaultPixelFormat]'
NSOpenGLPixelFormat* _CM_NSOpenGLView_defaultPixelFormat(Class _class);

// method '-[NSOpenGLView initWithFrame:pixelFormat:]'
NSOpenGLView *_IM_NSOpenGLView_initWithFrame_CpixelFormat_C(NSOpenGLView *_self, struct _NSRect frameRect, NSOpenGLPixelFormat* format);

// method '-[NSOpenGLView openGLContext]'
NSOpenGLContext* _IM_NSOpenGLView_openGLContext(NSOpenGLView *_self);

// method '-[NSOpenGLView pixelFormat]'
NSOpenGLPixelFormat* _IM_NSOpenGLView_pixelFormat(NSOpenGLView *_self);

// method '-[NSOpenGLView prepareOpenGL]'
void _IM_NSOpenGLView_prepareOpenGL(NSOpenGLView *_self);

// method '-[NSOpenGLView reshape]'
void _IM_NSOpenGLView_reshape(NSOpenGLView *_self);

// method '-[NSOpenGLView setOpenGLContext:]'
void _IM_NSOpenGLView_setOpenGLContext_C(NSOpenGLView *_self, NSOpenGLContext* context);

// method '-[NSOpenGLView setPixelFormat:]'
void _IM_NSOpenGLView_setPixelFormat_C(NSOpenGLView *_self, NSOpenGLPixelFormat* pixelFormat);

// method '-[NSOpenGLView update]'
void _IM_NSOpenGLView_update(NSOpenGLView *_self);

// method '-[NSOpenPanel URLs]'
id _IM_NSOpenPanel_URLs(NSOpenPanel *_self);

// method '-[NSOpenPanel allowsMultipleSelection]'
BOOL _IM_NSOpenPanel_allowsMultipleSelection(NSOpenPanel *_self);

// method '-[NSOpenPanel beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:]'
void _IM_NSOpenPanel_beginForDirectory_Cfile_Ctypes_CmodelessDelegate_CdidEndSelector_CcontextInfo_C(NSOpenPanel *_self, NSString* path, NSString* name, id fileTypes, id delegate, SEL didEndSelector, void *contextInfo);

// method '-[NSOpenPanel beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void _IM_NSOpenPanel_beginSheetForDirectory_Cfile_Ctypes_CmodalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(NSOpenPanel *_self, NSString* path, NSString* name, id fileTypes, NSWindow* docWindow, id delegate, SEL didEndSelector, void *contextInfo);

// method '-[NSOpenPanel canChooseDirectories]'
BOOL _IM_NSOpenPanel_canChooseDirectories(NSOpenPanel *_self);

// method '-[NSOpenPanel canChooseFiles]'
BOOL _IM_NSOpenPanel_canChooseFiles(NSOpenPanel *_self);

// method '-[NSOpenPanel filenames]'
id _IM_NSOpenPanel_filenames(NSOpenPanel *_self);

// method '+[NSOpenPanel openPanel]'
NSOpenPanel* _CM_NSOpenPanel_openPanel(Class _class);

// method '-[NSOpenPanel resolvesAliases]'
BOOL _IM_NSOpenPanel_resolvesAliases(NSOpenPanel *_self);

// method '-[NSOpenPanel runModalForDirectory:file:types:]'
int _IM_NSOpenPanel_runModalForDirectory_Cfile_Ctypes_C(NSOpenPanel *_self, NSString* path, NSString* name, id fileTypes);

// method '-[NSOpenPanel runModalForTypes:]'
int _IM_NSOpenPanel_runModalForTypes_C(NSOpenPanel *_self, id fileTypes);

// method '-[NSOpenPanel setAllowsMultipleSelection:]'
void _IM_NSOpenPanel_setAllowsMultipleSelection_C(NSOpenPanel *_self, BOOL flag);

// method '-[NSOpenPanel setCanChooseDirectories:]'
void _IM_NSOpenPanel_setCanChooseDirectories_C(NSOpenPanel *_self, BOOL flag);

// method '-[NSOpenPanel setCanChooseFiles:]'
void _IM_NSOpenPanel_setCanChooseFiles_C(NSOpenPanel *_self, BOOL flag);

// method '-[NSOpenPanel setResolvesAliases:]'
void _IM_NSOpenPanel_setResolvesAliases_C(NSOpenPanel *_self, BOOL flag);

// method '-[NSOutlineView autoresizesOutlineColumn]'
BOOL _IM_NSOutlineView_autoresizesOutlineColumn(NSOutlineView *_self);

// method '-[NSOutlineView autosaveExpandedItems]'
BOOL _IM_NSOutlineView_autosaveExpandedItems(NSOutlineView *_self);

// method '-[NSOutlineView collapseItem:]'
void _IM_NSOutlineView_collapseItem_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView collapseItem:collapseChildren:]'
void _IM_NSOutlineView_collapseItem_CcollapseChildren_C(NSOutlineView *_self, id item, BOOL collapseChildren);

// method '-[NSOutlineView expandItem:]'
void _IM_NSOutlineView_expandItem_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView expandItem:expandChildren:]'
void _IM_NSOutlineView_expandItem_CexpandChildren_C(NSOutlineView *_self, id item, BOOL expandChildren);

// method '-[NSOutlineView indentationMarkerFollowsCell]'
BOOL _IM_NSOutlineView_indentationMarkerFollowsCell(NSOutlineView *_self);

// method '-[NSOutlineView indentationPerLevel]'
float _IM_NSOutlineView_indentationPerLevel(NSOutlineView *_self);

// method '-[NSOutlineView isExpandable:]'
BOOL _IM_NSOutlineView_isExpandable_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView isItemExpanded:]'
BOOL _IM_NSOutlineView_isItemExpanded_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView itemAtRow:]'
id _IM_NSOutlineView_itemAtRow_C(NSOutlineView *_self, int row);

// method '-[NSOutlineView levelForItem:]'
int _IM_NSOutlineView_levelForItem_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView levelForRow:]'
int _IM_NSOutlineView_levelForRow_C(NSOutlineView *_self, int row);

// method '-[NSOutlineView outlineTableColumn]'
NSTableColumn* _IM_NSOutlineView_outlineTableColumn(NSOutlineView *_self);

// method '-[NSOutlineView reloadItem:]'
void _IM_NSOutlineView_reloadItem_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView reloadItem:reloadChildren:]'
void _IM_NSOutlineView_reloadItem_CreloadChildren_C(NSOutlineView *_self, id item, BOOL reloadChildren);

// method '-[NSOutlineView rowForItem:]'
int _IM_NSOutlineView_rowForItem_C(NSOutlineView *_self, id item);

// method '-[NSOutlineView setAutoresizesOutlineColumn:]'
void _IM_NSOutlineView_setAutoresizesOutlineColumn_C(NSOutlineView *_self, BOOL resize);

// method '-[NSOutlineView setAutosaveExpandedItems:]'
void _IM_NSOutlineView_setAutosaveExpandedItems_C(NSOutlineView *_self, BOOL save);

// method '-[NSOutlineView setDropItem:dropChildIndex:]'
void _IM_NSOutlineView_setDropItem_CdropChildIndex_C(NSOutlineView *_self, id item, int index);

// method '-[NSOutlineView setIndentationMarkerFollowsCell:]'
void _IM_NSOutlineView_setIndentationMarkerFollowsCell_C(NSOutlineView *_self, BOOL drawInCell);

// method '-[NSOutlineView setIndentationPerLevel:]'
void _IM_NSOutlineView_setIndentationPerLevel_C(NSOutlineView *_self, float indentationPerLevel);

// method '-[NSOutlineView setOutlineTableColumn:]'
void _IM_NSOutlineView_setOutlineTableColumn_C(NSOutlineView *_self, NSTableColumn* outlineTableColumn);

// method '-[NSOutlineView shouldCollapseAutoExpandedItemsForDeposited:]'
BOOL _IM_NSOutlineView_shouldCollapseAutoExpandedItemsForDeposited_C(NSOutlineView *_self, BOOL deposited);

// method '-[NSPDFImageRep PDFRepresentation]'
id _IM_NSPDFImageRep_PDFRepresentation(NSPDFImageRep *_self);

// method '-[NSPDFImageRep bounds]'
struct _NSRect _IM_NSPDFImageRep_bounds(NSPDFImageRep *_self);

// method '-[NSPDFImageRep currentPage]'
int _IM_NSPDFImageRep_currentPage(NSPDFImageRep *_self);

// method '+[NSPDFImageRep imageRepWithData:]'
id _CM_NSPDFImageRep_imageRepWithData_C(Class _class, id pdfData);

// method '-[NSPDFImageRep initWithData:]'
NSPDFImageRep *_IM_NSPDFImageRep_initWithData_C(NSPDFImageRep *_self, id pdfData);

// method '-[NSPDFImageRep pageCount]'
int _IM_NSPDFImageRep_pageCount(NSPDFImageRep *_self);

// method '-[NSPDFImageRep setCurrentPage:]'
void _IM_NSPDFImageRep_setCurrentPage_C(NSPDFImageRep *_self, int page);

// method '-[NSPICTImageRep PICTRepresentation]'
id _IM_NSPICTImageRep_PICTRepresentation(NSPICTImageRep *_self);

// method '-[NSPICTImageRep boundingBox]'
struct _NSRect _IM_NSPICTImageRep_boundingBox(NSPICTImageRep *_self);

// method '+[NSPICTImageRep imageRepWithData:]'
id _CM_NSPICTImageRep_imageRepWithData_C(Class _class, id pictData);

// method '-[NSPICTImageRep initWithData:]'
NSPICTImageRep *_IM_NSPICTImageRep_initWithData_C(NSPICTImageRep *_self, id pictData);

// method '-[NSPageLayout accessoryView]'
NSView* _IM_NSPageLayout_accessoryView(NSPageLayout *_self);

// method '-[NSPageLayout beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:]'
void _IM_NSPageLayout_beginSheetWithPrintInfo_CmodalForWindow_Cdelegate_CdidEndSelector_CcontextInfo_C(NSPageLayout *_self, NSPrintInfo* printInfo, NSWindow* docWindow, id delegate, SEL didEndSelector, void *contextInfo);

// method '-[NSPageLayout convertOldFactor:newFactor:]'
void _IM_NSPageLayout_convertOldFactor_CnewFactor_C(NSPageLayout *_self, float *oldFactor, float *newFactor);

// method '+[NSPageLayout pageLayout]'
NSPageLayout* _CM_NSPageLayout_pageLayout(Class _class);

// method '-[NSPageLayout pickedButton:]'
void _IM_NSPageLayout_pickedButton_C(NSPageLayout *_self, id sender);

// method '-[NSPageLayout pickedOrientation:]'
void _IM_NSPageLayout_pickedOrientation_C(NSPageLayout *_self, id sender);

// method '-[NSPageLayout pickedPaperSize:]'
void _IM_NSPageLayout_pickedPaperSize_C(NSPageLayout *_self, id sender);

// method '-[NSPageLayout pickedUnits:]'
void _IM_NSPageLayout_pickedUnits_C(NSPageLayout *_self, id sender);

// method '-[NSPageLayout printInfo]'
NSPrintInfo* _IM_NSPageLayout_printInfo(NSPageLayout *_self);

// method '-[NSPageLayout readPrintInfo]'
void _IM_NSPageLayout_readPrintInfo(NSPageLayout *_self);

// method '-[NSPageLayout runModal]'
int _IM_NSPageLayout_runModal(NSPageLayout *_self);

// method '-[NSPageLayout runModalWithPrintInfo:]'
int _IM_NSPageLayout_runModalWithPrintInfo_C(NSPageLayout *_self, NSPrintInfo* pInfo);

// method '-[NSPageLayout setAccessoryView:]'
void _IM_NSPageLayout_setAccessoryView_C(NSPageLayout *_self, NSView* aView);

// method '-[NSPageLayout writePrintInfo]'
void _IM_NSPageLayout_writePrintInfo(NSPageLayout *_self);

// method '-[NSPanel becomesKeyOnlyIfNeeded]'
BOOL _IM_NSPanel_becomesKeyOnlyIfNeeded(NSPanel *_self);

// method '-[NSPanel isFloatingPanel]'
BOOL _IM_NSPanel_isFloatingPanel(NSPanel *_self);

// method '-[NSPanel setBecomesKeyOnlyIfNeeded:]'
void _IM_NSPanel_setBecomesKeyOnlyIfNeeded_C(NSPanel *_self, BOOL flag);

// method '-[NSPanel setFloatingPanel:]'
void _IM_NSPanel_setFloatingPanel_C(NSPanel *_self, BOOL flag);

// method '-[NSPanel setWorksWhenModal:]'
void _IM_NSPanel_setWorksWhenModal_C(NSPanel *_self, BOOL flag);

// method '-[NSPanel worksWhenModal]'
BOOL _IM_NSPanel_worksWhenModal(NSPanel *_self);

// method '-[NSParagraphStyle alignment]'
int _IM_NSParagraphStyle_alignment(NSParagraphStyle *_self);

// method '-[NSParagraphStyle baseWritingDirection]'
int _IM_NSParagraphStyle_baseWritingDirection(NSParagraphStyle *_self);

// method '+[NSParagraphStyle defaultParagraphStyle]'
NSParagraphStyle* _CM_NSParagraphStyle_defaultParagraphStyle(Class _class);

// method '-[NSParagraphStyle defaultTabInterval]'
float _IM_NSParagraphStyle_defaultTabInterval(NSParagraphStyle *_self);

// method '+[NSParagraphStyle defaultWritingDirectionForLanguage:]'
int _CM_NSParagraphStyle_defaultWritingDirectionForLanguage_C(Class _class, NSString* languageName);

// method '-[NSParagraphStyle firstLineHeadIndent]'
float _IM_NSParagraphStyle_firstLineHeadIndent(NSParagraphStyle *_self);

// method '-[NSParagraphStyle headIndent]'
float _IM_NSParagraphStyle_headIndent(NSParagraphStyle *_self);

// method '-[NSParagraphStyle headerLevel]'
int _IM_NSParagraphStyle_headerLevel(NSParagraphStyle *_self);

// method '-[NSParagraphStyle hyphenationFactor]'
float _IM_NSParagraphStyle_hyphenationFactor(NSParagraphStyle *_self);

// method '-[NSParagraphStyle lineBreakMode]'
int _IM_NSParagraphStyle_lineBreakMode(NSParagraphStyle *_self);

// method '-[NSParagraphStyle lineHeightMultiple]'
float _IM_NSParagraphStyle_lineHeightMultiple(NSParagraphStyle *_self);

// method '-[NSParagraphStyle lineSpacing]'
float _IM_NSParagraphStyle_lineSpacing(NSParagraphStyle *_self);

// method '-[NSParagraphStyle maximumLineHeight]'
float _IM_NSParagraphStyle_maximumLineHeight(NSParagraphStyle *_self);

// method '-[NSParagraphStyle minimumLineHeight]'
float _IM_NSParagraphStyle_minimumLineHeight(NSParagraphStyle *_self);

// method '-[NSParagraphStyle paragraphSpacing]'
float _IM_NSParagraphStyle_paragraphSpacing(NSParagraphStyle *_self);

// method '-[NSParagraphStyle paragraphSpacingBefore]'
float _IM_NSParagraphStyle_paragraphSpacingBefore(NSParagraphStyle *_self);

// method '-[NSParagraphStyle tabStops]'
id _IM_NSParagraphStyle_tabStops(NSParagraphStyle *_self);

// method '-[NSParagraphStyle tailIndent]'
float _IM_NSParagraphStyle_tailIndent(NSParagraphStyle *_self);

// method '-[NSParagraphStyle textBlocks]'
id _IM_NSParagraphStyle_textBlocks(NSParagraphStyle *_self);

// method '-[NSParagraphStyle textLists]'
id _IM_NSParagraphStyle_textLists(NSParagraphStyle *_self);

// method '-[NSParagraphStyle tighteningFactorForTruncation]'
float _IM_NSParagraphStyle_tighteningFactorForTruncation(NSParagraphStyle *_self);

// method '-[NSPasteboard addTypes:owner:]'
int _IM_NSPasteboard_addTypes_Cowner_C(NSPasteboard *_self, id newTypes, id newOwner);

// method '-[NSPasteboard availableTypeFromArray:]'
NSString* _IM_NSPasteboard_availableTypeFromArray_C(NSPasteboard *_self, id types);

// method '-[NSPasteboard changeCount]'
int _IM_NSPasteboard_changeCount(NSPasteboard *_self);

// method '-[NSPasteboard dataForType:]'
id _IM_NSPasteboard_dataForType_C(NSPasteboard *_self, NSString* dataType);

// method '-[NSPasteboard declareTypes:owner:]'
int _IM_NSPasteboard_declareTypes_Cowner_C(NSPasteboard *_self, id newTypes, id newOwner);

// method '+[NSPasteboard generalPasteboard]'
NSPasteboard* _CM_NSPasteboard_generalPasteboard(Class _class);

// method '-[NSPasteboard name]'
NSString* _IM_NSPasteboard_name(NSPasteboard *_self);

// method '+[NSPasteboard pasteboardByFilteringData:ofType:]'
NSPasteboard* _CM_NSPasteboard_pasteboardByFilteringData_CofType_C(Class _class, id data, NSString* type);

// method '+[NSPasteboard pasteboardByFilteringFile:]'
NSPasteboard* _CM_NSPasteboard_pasteboardByFilteringFile_C(Class _class, NSString* filename);

// method '+[NSPasteboard pasteboardByFilteringTypesInPasteboard:]'
NSPasteboard* _CM_NSPasteboard_pasteboardByFilteringTypesInPasteboard_C(Class _class, NSPasteboard* pboard);

// method '+[NSPasteboard pasteboardWithName:]'
NSPasteboard* _CM_NSPasteboard_pasteboardWithName_C(Class _class, NSString* name);

// method '+[NSPasteboard pasteboardWithUniqueName]'
NSPasteboard* _CM_NSPasteboard_pasteboardWithUniqueName(Class _class);

// method '-[NSPasteboard propertyListForType:]'
id _IM_NSPasteboard_propertyListForType_C(NSPasteboard *_self, NSString* dataType);

// method '-[NSPasteboard readFileContentsType:toFile:]'
NSString* _IM_NSPasteboard_readFileContentsType_CtoFile_C(NSPasteboard *_self, NSString* type, NSString* filename);

// method '-[NSPasteboard readFileWrapper]'
NSFileWrapper* _IM_NSPasteboard_readFileWrapper(NSPasteboard *_self);

// method '-[NSPasteboard releaseGlobally]'
void _IM_NSPasteboard_releaseGlobally(NSPasteboard *_self);

// method '-[NSPasteboard setData:forType:]'
BOOL _IM_NSPasteboard_setData_CforType_C(NSPasteboard *_self, id data, NSString* dataType);

// method '-[NSPasteboard setPropertyList:forType:]'
BOOL _IM_NSPasteboard_setPropertyList_CforType_C(NSPasteboard *_self, id plist, NSString* dataType);

// method '-[NSPasteboard setString:forType:]'
BOOL _IM_NSPasteboard_setString_CforType_C(NSPasteboard *_self, NSString* string, NSString* dataType);

// method '-[NSPasteboard stringForType:]'
NSString* _IM_NSPasteboard_stringForType_C(NSPasteboard *_self, NSString* dataType);

// method '-[NSPasteboard types]'
id _IM_NSPasteboard_types(NSPasteboard *_self);

// method '+[NSPasteboard typesFilterableTo:]'
id _CM_NSPasteboard_typesFilterableTo_C(Class _class, NSString* type);

// method '-[NSPasteboard writeFileContents:]'
BOOL _IM_NSPasteboard_writeFileContents_C(NSPasteboard *_self, NSString* filename);

// method '-[NSPasteboard writeFileWrapper:]'
BOOL _IM_NSPasteboard_writeFileWrapper_C(NSPasteboard *_self, NSFileWrapper* wrapper);

// method '-[NSPersistentDocument configurePersistentStoreCoordinatorForURL:ofType:error:]'
BOOL _IM_NSPersistentDocument_configurePersistentStoreCoordinatorForURL_CofType_Cerror_C(NSPersistentDocument *_self, NSURL* url, NSString* fileType, id *error);

// method '-[NSPersistentDocument managedObjectContext]'
id _IM_NSPersistentDocument_managedObjectContext(NSPersistentDocument *_self);

// method '-[NSPersistentDocument managedObjectModel]'
id _IM_NSPersistentDocument_managedObjectModel(NSPersistentDocument *_self);

// method '-[NSPersistentDocument persistentStoreTypeForFileType:]'
NSString* _IM_NSPersistentDocument_persistentStoreTypeForFileType_C(NSPersistentDocument *_self, NSString* fileType);

// method '-[NSPersistentDocument readFromURL:ofType:error:]'
BOOL _IM_NSPersistentDocument_readFromURL_CofType_Cerror_C(NSPersistentDocument *_self, NSURL* absoluteURL, NSString* typeName, id *error);

// method '-[NSPersistentDocument revertToContentsOfURL:ofType:error:]'
BOOL _IM_NSPersistentDocument_revertToContentsOfURL_CofType_Cerror_C(NSPersistentDocument *_self, NSURL* inAbsoluteURL, NSString* inTypeName, id *outError);

// method '-[NSPersistentDocument setManagedObjectContext:]'
void _IM_NSPersistentDocument_setManagedObjectContext_C(NSPersistentDocument *_self, id managedObjectContext);

// method '-[NSPersistentDocument writeToURL:ofType:forSaveOperation:originalContentsURL:error:]'
BOOL _IM_NSPersistentDocument_writeToURL_CofType_CforSaveOperation_CoriginalContentsURL_Cerror_C(NSPersistentDocument *_self, NSURL* absoluteURL, NSString* typeName, int saveOperation, NSURL* absoluteOriginalContentsURL, id *error);

// method '-[NSPopUpButton addItemWithTitle:]'
void _IM_NSPopUpButton_addItemWithTitle_C(NSPopUpButton *_self, NSString* title);

// method '-[NSPopUpButton addItemsWithTitles:]'
void _IM_NSPopUpButton_addItemsWithTitles_C(NSPopUpButton *_self, id itemTitles);

// method '-[NSPopUpButton autoenablesItems]'
BOOL _IM_NSPopUpButton_autoenablesItems(NSPopUpButton *_self);

// method '-[NSPopUpButton indexOfItem:]'
int _IM_NSPopUpButton_indexOfItem_C(NSPopUpButton *_self, id item);

// method '-[NSPopUpButton indexOfItemWithRepresentedObject:]'
int _IM_NSPopUpButton_indexOfItemWithRepresentedObject_C(NSPopUpButton *_self, id obj);

// method '-[NSPopUpButton indexOfItemWithTag:]'
int _IM_NSPopUpButton_indexOfItemWithTag_C(NSPopUpButton *_self, int tag);

// method '-[NSPopUpButton indexOfItemWithTarget:andAction:]'
int _IM_NSPopUpButton_indexOfItemWithTarget_CandAction_C(NSPopUpButton *_self, id target, SEL actionSelector);

// method '-[NSPopUpButton indexOfItemWithTitle:]'
int _IM_NSPopUpButton_indexOfItemWithTitle_C(NSPopUpButton *_self, NSString* title);

// method '-[NSPopUpButton indexOfSelectedItem]'
int _IM_NSPopUpButton_indexOfSelectedItem(NSPopUpButton *_self);

// method '-[NSPopUpButton initWithFrame:pullsDown:]'
NSPopUpButton *_IM_NSPopUpButton_initWithFrame_CpullsDown_C(NSPopUpButton *_self, struct _NSRect buttonFrame, BOOL flag);

// method '-[NSPopUpButton insertItemWithTitle:atIndex:]'
void _IM_NSPopUpButton_insertItemWithTitle_CatIndex_C(NSPopUpButton *_self, NSString* title, int index);

// method '-[NSPopUpButton itemArray]'
id _IM_NSPopUpButton_itemArray(NSPopUpButton *_self);

// method '-[NSPopUpButton itemAtIndex:]'
id _IM_NSPopUpButton_itemAtIndex_C(NSPopUpButton *_self, int index);

// method '-[NSPopUpButton itemTitleAtIndex:]'
NSString* _IM_NSPopUpButton_itemTitleAtIndex_C(NSPopUpButton *_self, int index);

// method '-[NSPopUpButton itemTitles]'
id _IM_NSPopUpButton_itemTitles(NSPopUpButton *_self);

// method '-[NSPopUpButton itemWithTitle:]'
id _IM_NSPopUpButton_itemWithTitle_C(NSPopUpButton *_self, NSString* title);

// method '-[NSPopUpButton lastItem]'
id _IM_NSPopUpButton_lastItem(NSPopUpButton *_self);

// method '-[NSPopUpButton menu]'
NSMenu* _IM_NSPopUpButton_menu(NSPopUpButton *_self);

// method '-[NSPopUpButton numberOfItems]'
int _IM_NSPopUpButton_numberOfItems(NSPopUpButton *_self);

// method '-[NSPopUpButton preferredEdge]'
int _IM_NSPopUpButton_preferredEdge(NSPopUpButton *_self);

// method '-[NSPopUpButton pullsDown]'
BOOL _IM_NSPopUpButton_pullsDown(NSPopUpButton *_self);

// method '-[NSPopUpButton removeAllItems]'
void _IM_NSPopUpButton_removeAllItems(NSPopUpButton *_self);

// method '-[NSPopUpButton removeItemAtIndex:]'
void _IM_NSPopUpButton_removeItemAtIndex_C(NSPopUpButton *_self, int index);

// method '-[NSPopUpButton removeItemWithTitle:]'
void _IM_NSPopUpButton_removeItemWithTitle_C(NSPopUpButton *_self, NSString* title);

// method '-[NSPopUpButton selectItem:]'
void _IM_NSPopUpButton_selectItem_C(NSPopUpButton *_self, id item);

// method '-[NSPopUpButton selectItemAtIndex:]'
void _IM_NSPopUpButton_selectItemAtIndex_C(NSPopUpButton *_self, int index);

// method '-[NSPopUpButton selectItemWithTag:]'
BOOL _IM_NSPopUpButton_selectItemWithTag_C(NSPopUpButton *_self, int tag);

// method '-[NSPopUpButton selectItemWithTitle:]'
void _IM_NSPopUpButton_selectItemWithTitle_C(NSPopUpButton *_self, NSString* title);

// method '-[NSPopUpButton selectedItem]'
id _IM_NSPopUpButton_selectedItem(NSPopUpButton *_self);

// method '-[NSPopUpButton setAutoenablesItems:]'
void _IM_NSPopUpButton_setAutoenablesItems_C(NSPopUpButton *_self, BOOL flag);

// method '-[NSPopUpButton setMenu:]'
void _IM_NSPopUpButton_setMenu_C(NSPopUpButton *_self, NSMenu* menu);

// method '-[NSPopUpButton setPreferredEdge:]'
void _IM_NSPopUpButton_setPreferredEdge_C(NSPopUpButton *_self, int edge);

// method '-[NSPopUpButton setPullsDown:]'
void _IM_NSPopUpButton_setPullsDown_C(NSPopUpButton *_self, BOOL flag);

// method '-[NSPopUpButton setTitle:]'
void _IM_NSPopUpButton_setTitle_C(NSPopUpButton *_self, NSString* aString);

// method '-[NSPopUpButton synchronizeTitleAndSelectedItem]'
void _IM_NSPopUpButton_synchronizeTitleAndSelectedItem(NSPopUpButton *_self);

// method '-[NSPopUpButton titleOfSelectedItem]'
NSString* _IM_NSPopUpButton_titleOfSelectedItem(NSPopUpButton *_self);

// method '-[NSPopUpButtonCell addItemWithTitle:]'
void _IM_NSPopUpButtonCell_addItemWithTitle_C(NSPopUpButtonCell *_self, NSString* title);

// method '-[NSPopUpButtonCell addItemsWithTitles:]'
void _IM_NSPopUpButtonCell_addItemsWithTitles_C(NSPopUpButtonCell *_self, id itemTitles);

// method '-[NSPopUpButtonCell altersStateOfSelectedItem]'
BOOL _IM_NSPopUpButtonCell_altersStateOfSelectedItem(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell arrowPosition]'
int _IM_NSPopUpButtonCell_arrowPosition(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell attachPopUpWithFrame:inView:]'
void _IM_NSPopUpButtonCell_attachPopUpWithFrame_CinView_C(NSPopUpButtonCell *_self, struct _NSRect cellFrame, NSView* controlView);

// method '-[NSPopUpButtonCell autoenablesItems]'
BOOL _IM_NSPopUpButtonCell_autoenablesItems(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell dismissPopUp]'
void _IM_NSPopUpButtonCell_dismissPopUp(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell indexOfItem:]'
int _IM_NSPopUpButtonCell_indexOfItem_C(NSPopUpButtonCell *_self, id item);

// method '-[NSPopUpButtonCell indexOfItemWithRepresentedObject:]'
int _IM_NSPopUpButtonCell_indexOfItemWithRepresentedObject_C(NSPopUpButtonCell *_self, id obj);

// method '-[NSPopUpButtonCell indexOfItemWithTag:]'
int _IM_NSPopUpButtonCell_indexOfItemWithTag_C(NSPopUpButtonCell *_self, int tag);

// method '-[NSPopUpButtonCell indexOfItemWithTarget:andAction:]'
int _IM_NSPopUpButtonCell_indexOfItemWithTarget_CandAction_C(NSPopUpButtonCell *_self, id target, SEL actionSelector);

// method '-[NSPopUpButtonCell indexOfItemWithTitle:]'
int _IM_NSPopUpButtonCell_indexOfItemWithTitle_C(NSPopUpButtonCell *_self, NSString* title);

// method '-[NSPopUpButtonCell indexOfSelectedItem]'
int _IM_NSPopUpButtonCell_indexOfSelectedItem(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell initTextCell:pullsDown:]'
NSPopUpButtonCell *_IM_NSPopUpButtonCell_initTextCell_CpullsDown_C(NSPopUpButtonCell *_self, NSString* stringValue, BOOL pullDown);

// method '-[NSPopUpButtonCell insertItemWithTitle:atIndex:]'
void _IM_NSPopUpButtonCell_insertItemWithTitle_CatIndex_C(NSPopUpButtonCell *_self, NSString* title, int index);

// method '-[NSPopUpButtonCell itemArray]'
id _IM_NSPopUpButtonCell_itemArray(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell itemAtIndex:]'
id _IM_NSPopUpButtonCell_itemAtIndex_C(NSPopUpButtonCell *_self, int index);

// method '-[NSPopUpButtonCell itemTitleAtIndex:]'
NSString* _IM_NSPopUpButtonCell_itemTitleAtIndex_C(NSPopUpButtonCell *_self, int index);

// method '-[NSPopUpButtonCell itemTitles]'
id _IM_NSPopUpButtonCell_itemTitles(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell itemWithTitle:]'
id _IM_NSPopUpButtonCell_itemWithTitle_C(NSPopUpButtonCell *_self, NSString* title);

// method '-[NSPopUpButtonCell lastItem]'
id _IM_NSPopUpButtonCell_lastItem(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell menu]'
NSMenu* _IM_NSPopUpButtonCell_menu(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell numberOfItems]'
int _IM_NSPopUpButtonCell_numberOfItems(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell objectValue]'
id _IM_NSPopUpButtonCell_objectValue(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell performClickWithFrame:inView:]'
void _IM_NSPopUpButtonCell_performClickWithFrame_CinView_C(NSPopUpButtonCell *_self, struct _NSRect frame, NSView* controlView);

// method '-[NSPopUpButtonCell preferredEdge]'
int _IM_NSPopUpButtonCell_preferredEdge(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell pullsDown]'
BOOL _IM_NSPopUpButtonCell_pullsDown(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell removeAllItems]'
void _IM_NSPopUpButtonCell_removeAllItems(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell removeItemAtIndex:]'
void _IM_NSPopUpButtonCell_removeItemAtIndex_C(NSPopUpButtonCell *_self, int index);

// method '-[NSPopUpButtonCell removeItemWithTitle:]'
void _IM_NSPopUpButtonCell_removeItemWithTitle_C(NSPopUpButtonCell *_self, NSString* title);

// method '-[NSPopUpButtonCell selectItem:]'
void _IM_NSPopUpButtonCell_selectItem_C(NSPopUpButtonCell *_self, id item);

// method '-[NSPopUpButtonCell selectItemAtIndex:]'
void _IM_NSPopUpButtonCell_selectItemAtIndex_C(NSPopUpButtonCell *_self, int index);

// method '-[NSPopUpButtonCell selectItemWithTag:]'
BOOL _IM_NSPopUpButtonCell_selectItemWithTag_C(NSPopUpButtonCell *_self, int tag);

// method '-[NSPopUpButtonCell selectItemWithTitle:]'
void _IM_NSPopUpButtonCell_selectItemWithTitle_C(NSPopUpButtonCell *_self, NSString* title);

// method '-[NSPopUpButtonCell selectedItem]'
id _IM_NSPopUpButtonCell_selectedItem(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell setAltersStateOfSelectedItem:]'
void _IM_NSPopUpButtonCell_setAltersStateOfSelectedItem_C(NSPopUpButtonCell *_self, BOOL flag);

// method '-[NSPopUpButtonCell setArrowPosition:]'
void _IM_NSPopUpButtonCell_setArrowPosition_C(NSPopUpButtonCell *_self, int position);

// method '-[NSPopUpButtonCell setAutoenablesItems:]'
void _IM_NSPopUpButtonCell_setAutoenablesItems_C(NSPopUpButtonCell *_self, BOOL flag);

// method '-[NSPopUpButtonCell setMenu:]'
void _IM_NSPopUpButtonCell_setMenu_C(NSPopUpButtonCell *_self, NSMenu* menu);

// method '-[NSPopUpButtonCell setObjectValue:]'
void _IM_NSPopUpButtonCell_setObjectValue_C(NSPopUpButtonCell *_self, id obj);

// method '-[NSPopUpButtonCell setPreferredEdge:]'
void _IM_NSPopUpButtonCell_setPreferredEdge_C(NSPopUpButtonCell *_self, int edge);

// method '-[NSPopUpButtonCell setPullsDown:]'
void _IM_NSPopUpButtonCell_setPullsDown_C(NSPopUpButtonCell *_self, BOOL flag);

// method '-[NSPopUpButtonCell setTitle:]'
void _IM_NSPopUpButtonCell_setTitle_C(NSPopUpButtonCell *_self, NSString* aString);

// method '-[NSPopUpButtonCell setUsesItemFromMenu:]'
void _IM_NSPopUpButtonCell_setUsesItemFromMenu_C(NSPopUpButtonCell *_self, BOOL flag);

// method '-[NSPopUpButtonCell synchronizeTitleAndSelectedItem]'
void _IM_NSPopUpButtonCell_synchronizeTitleAndSelectedItem(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell titleOfSelectedItem]'
NSString* _IM_NSPopUpButtonCell_titleOfSelectedItem(NSPopUpButtonCell *_self);

// method '-[NSPopUpButtonCell usesItemFromMenu]'
BOOL _IM_NSPopUpButtonCell_usesItemFromMenu(NSPopUpButtonCell *_self);

// method '-[NSPrintInfo bottomMargin]'
float _IM_NSPrintInfo_bottomMargin(NSPrintInfo *_self);

// method '+[NSPrintInfo defaultPrinter]'
NSPrinter* _CM_NSPrintInfo_defaultPrinter(Class _class);

// method '-[NSPrintInfo dictionary]'
id _IM_NSPrintInfo_dictionary(NSPrintInfo *_self);

// method '-[NSPrintInfo horizontalPagination]'
int _IM_NSPrintInfo_horizontalPagination(NSPrintInfo *_self);

// method '-[NSPrintInfo imageablePageBounds]'
struct _NSRect _IM_NSPrintInfo_imageablePageBounds(NSPrintInfo *_self);

// method '-[NSPrintInfo initWithDictionary:]'
NSPrintInfo *_IM_NSPrintInfo_initWithDictionary_C(NSPrintInfo *_self, id attributes);

// method '-[NSPrintInfo isHorizontallyCentered]'
BOOL _IM_NSPrintInfo_isHorizontallyCentered(NSPrintInfo *_self);

// method '-[NSPrintInfo isVerticallyCentered]'
BOOL _IM_NSPrintInfo_isVerticallyCentered(NSPrintInfo *_self);

// method '-[NSPrintInfo jobDisposition]'
NSString* _IM_NSPrintInfo_jobDisposition(NSPrintInfo *_self);

// method '-[NSPrintInfo leftMargin]'
float _IM_NSPrintInfo_leftMargin(NSPrintInfo *_self);

// method '-[NSPrintInfo localizedPaperName]'
NSString* _IM_NSPrintInfo_localizedPaperName(NSPrintInfo *_self);

// method '-[NSPrintInfo orientation]'
int _IM_NSPrintInfo_orientation(NSPrintInfo *_self);

// method '-[NSPrintInfo paperName]'
NSString* _IM_NSPrintInfo_paperName(NSPrintInfo *_self);

// method '-[NSPrintInfo paperSize]'
struct _NSSize _IM_NSPrintInfo_paperSize(NSPrintInfo *_self);

// method '-[NSPrintInfo printer]'
NSPrinter* _IM_NSPrintInfo_printer(NSPrintInfo *_self);

// method '-[NSPrintInfo rightMargin]'
float _IM_NSPrintInfo_rightMargin(NSPrintInfo *_self);

// method '-[NSPrintInfo setBottomMargin:]'
void _IM_NSPrintInfo_setBottomMargin_C(NSPrintInfo *_self, float margin);

// method '+[NSPrintInfo setDefaultPrinter:]'
void _CM_NSPrintInfo_setDefaultPrinter_C(Class _class, NSPrinter* printer);

// method '-[NSPrintInfo setHorizontalPagination:]'
void _IM_NSPrintInfo_setHorizontalPagination_C(NSPrintInfo *_self, int mode);

// method '-[NSPrintInfo setHorizontallyCentered:]'
void _IM_NSPrintInfo_setHorizontallyCentered_C(NSPrintInfo *_self, BOOL flag);

// method '-[NSPrintInfo setJobDisposition:]'
void _IM_NSPrintInfo_setJobDisposition_C(NSPrintInfo *_self, NSString* disposition);

// method '-[NSPrintInfo setLeftMargin:]'
void _IM_NSPrintInfo_setLeftMargin_C(NSPrintInfo *_self, float margin);

// method '-[NSPrintInfo setOrientation:]'
void _IM_NSPrintInfo_setOrientation_C(NSPrintInfo *_self, int orientation);

// method '-[NSPrintInfo setPaperName:]'
void _IM_NSPrintInfo_setPaperName_C(NSPrintInfo *_self, NSString* name);

// method '-[NSPrintInfo setPaperSize:]'
void _IM_NSPrintInfo_setPaperSize_C(NSPrintInfo *_self, struct _NSSize size);

// method '-[NSPrintInfo setPrinter:]'
void _IM_NSPrintInfo_setPrinter_C(NSPrintInfo *_self, NSPrinter* printer);

// method '-[NSPrintInfo setRightMargin:]'
void _IM_NSPrintInfo_setRightMargin_C(NSPrintInfo *_self, float margin);

// method '+[NSPrintInfo setSharedPrintInfo:]'
void _CM_NSPrintInfo_setSharedPrintInfo_C(Class _class, NSPrintInfo* printInfo);

// method '-[NSPrintInfo setTopMargin:]'
void _IM_NSPrintInfo_setTopMargin_C(NSPrintInfo *_self, float margin);

// method '-[NSPrintInfo setUpPrintOperationDefaultValues]'
void _IM_NSPrintInfo_setUpPrintOperationDefaultValues(NSPrintInfo *_self);

// method '-[NSPrintInfo setVerticalPagination:]'
void _IM_NSPrintInfo_setVerticalPagination_C(NSPrintInfo *_self, int mode);

// method '-[NSPrintInfo setVerticallyCentered:]'
void _IM_NSPrintInfo_setVerticallyCentered_C(NSPrintInfo *_self, BOOL flag);

// method '+[NSPrintInfo sharedPrintInfo]'
NSPrintInfo* _CM_NSPrintInfo_sharedPrintInfo(Class _class);

// method '+[NSPrintInfo sizeForPaperName:]'
struct _NSSize _CM_NSPrintInfo_sizeForPaperName_C(Class _class, NSString* name);

// method '-[NSPrintInfo topMargin]'
float _IM_NSPrintInfo_topMargin(NSPrintInfo *_self);

// method '-[NSPrintInfo verticalPagination]'
int _IM_NSPrintInfo_verticalPagination(NSPrintInfo *_self);

// method '+[NSPrintOperation EPSOperationWithView:insideRect:toData:]'
NSPrintOperation* _CM_NSPrintOperation_EPSOperationWithView_CinsideRect_CtoData_C(Class _class, NSView* aView, struct _NSRect rect, id data);

// method '+[NSPrintOperation EPSOperationWithView:insideRect:toData:printInfo:]'
NSPrintOperation* _CM_NSPrintOperation_EPSOperationWithView_CinsideRect_CtoData_CprintInfo_C(Class _class, NSView* aView, struct _NSRect rect, id data, NSPrintInfo* aPrintInfo);

// method '+[NSPrintOperation EPSOperationWithView:insideRect:toPath:printInfo:]'
NSPrintOperation* _CM_NSPrintOperation_EPSOperationWithView_CinsideRect_CtoPath_CprintInfo_C(Class _class, NSView* aView, struct _NSRect rect, NSString* path, NSPrintInfo* aPrintInfo);

// method '+[NSPrintOperation PDFOperationWithView:insideRect:toData:]'
NSPrintOperation* _CM_NSPrintOperation_PDFOperationWithView_CinsideRect_CtoData_C(Class _class, NSView* aView, struct _NSRect rect, id data);

// method '+[NSPrintOperation PDFOperationWithView:insideRect:toData:printInfo:]'
NSPrintOperation* _CM_NSPrintOperation_PDFOperationWithView_CinsideRect_CtoData_CprintInfo_C(Class _class, NSView* aView, struct _NSRect rect, id data, NSPrintInfo* aPrintInfo);

// method '+[NSPrintOperation PDFOperationWithView:insideRect:toPath:printInfo:]'
NSPrintOperation* _CM_NSPrintOperation_PDFOperationWithView_CinsideRect_CtoPath_CprintInfo_C(Class _class, NSView* aView, struct _NSRect rect, NSString* path, NSPrintInfo* aPrintInfo);

// method '-[NSPrintOperation accessoryView]'
NSView* _IM_NSPrintOperation_accessoryView(NSPrintOperation *_self);

// method '-[NSPrintOperation canSpawnSeparateThread]'
BOOL _IM_NSPrintOperation_canSpawnSeparateThread(NSPrintOperation *_self);

// method '-[NSPrintOperation cleanUpOperation]'
void _IM_NSPrintOperation_cleanUpOperation(NSPrintOperation *_self);

// method '-[NSPrintOperation context]'
NSGraphicsContext* _IM_NSPrintOperation_context(NSPrintOperation *_self);

// method '-[NSPrintOperation createContext]'
NSGraphicsContext* _IM_NSPrintOperation_createContext(NSPrintOperation *_self);

// method '+[NSPrintOperation currentOperation]'
NSPrintOperation* _CM_NSPrintOperation_currentOperation(Class _class);

// method '-[NSPrintOperation currentPage]'
int _IM_NSPrintOperation_currentPage(NSPrintOperation *_self);

// method '-[NSPrintOperation deliverResult]'
BOOL _IM_NSPrintOperation_deliverResult(NSPrintOperation *_self);

// method '-[NSPrintOperation destroyContext]'
void _IM_NSPrintOperation_destroyContext(NSPrintOperation *_self);

// method '-[NSPrintOperation isCopyingOperation]'
BOOL _IM_NSPrintOperation_isCopyingOperation(NSPrintOperation *_self);

// method '-[NSPrintOperation jobStyleHint]'
NSString* _IM_NSPrintOperation_jobStyleHint(NSPrintOperation *_self);

// method '-[NSPrintOperation pageOrder]'
int _IM_NSPrintOperation_pageOrder(NSPrintOperation *_self);

// method '-[NSPrintOperation printInfo]'
NSPrintInfo* _IM_NSPrintOperation_printInfo(NSPrintOperation *_self);

// method '+[NSPrintOperation printOperationWithView:]'
NSPrintOperation* _CM_NSPrintOperation_printOperationWithView_C(Class _class, NSView* aView);

// method '+[NSPrintOperation printOperationWithView:printInfo:]'
NSPrintOperation* _CM_NSPrintOperation_printOperationWithView_CprintInfo_C(Class _class, NSView* aView, NSPrintInfo* aPrintInfo);

// method '-[NSPrintOperation printPanel]'
NSPrintPanel* _IM_NSPrintOperation_printPanel(NSPrintOperation *_self);

// method '-[NSPrintOperation runOperation]'
BOOL _IM_NSPrintOperation_runOperation(NSPrintOperation *_self);

// method '-[NSPrintOperation runOperationModalForWindow:delegate:didRunSelector:contextInfo:]'
void _IM_NSPrintOperation_runOperationModalForWindow_Cdelegate_CdidRunSelector_CcontextInfo_C(NSPrintOperation *_self, NSWindow* docWindow, id delegate, SEL didRunSelector, void *contextInfo);

// method '-[NSPrintOperation setAccessoryView:]'
void _IM_NSPrintOperation_setAccessoryView_C(NSPrintOperation *_self, NSView* aView);

// method '-[NSPrintOperation setCanSpawnSeparateThread:]'
void _IM_NSPrintOperation_setCanSpawnSeparateThread_C(NSPrintOperation *_self, BOOL canSpawnSeparateThread);

// method '+[NSPrintOperation setCurrentOperation:]'
void _CM_NSPrintOperation_setCurrentOperation_C(Class _class, NSPrintOperation* operation);

// method '-[NSPrintOperation setJobStyleHint:]'
void _IM_NSPrintOperation_setJobStyleHint_C(NSPrintOperation *_self, NSString* hint);

// method '-[NSPrintOperation setPageOrder:]'
void _IM_NSPrintOperation_setPageOrder_C(NSPrintOperation *_self, int order);

// method '-[NSPrintOperation setPrintInfo:]'
void _IM_NSPrintOperation_setPrintInfo_C(NSPrintOperation *_self, NSPrintInfo* aPrintInfo);

// method '-[NSPrintOperation setPrintPanel:]'
void _IM_NSPrintOperation_setPrintPanel_C(NSPrintOperation *_self, NSPrintPanel* panel);

// method '-[NSPrintOperation setShowPanels:]'
void _IM_NSPrintOperation_setShowPanels_C(NSPrintOperation *_self, BOOL flag);

// method '-[NSPrintOperation setShowsPrintPanel:]'
void _IM_NSPrintOperation_setShowsPrintPanel_C(NSPrintOperation *_self, BOOL flag);

// method '-[NSPrintOperation setShowsProgressPanel:]'
void _IM_NSPrintOperation_setShowsProgressPanel_C(NSPrintOperation *_self, BOOL flag);

// method '-[NSPrintOperation showPanels]'
BOOL _IM_NSPrintOperation_showPanels(NSPrintOperation *_self);

// method '-[NSPrintOperation showsPrintPanel]'
BOOL _IM_NSPrintOperation_showsPrintPanel(NSPrintOperation *_self);

// method '-[NSPrintOperation showsProgressPanel]'
BOOL _IM_NSPrintOperation_showsProgressPanel(NSPrintOperation *_self);

// method '-[NSPrintOperation view]'
NSView* _IM_NSPrintOperation_view(NSPrintOperation *_self);

// method '-[NSPrintPanel accessoryView]'
NSView* _IM_NSPrintPanel_accessoryView(NSPrintPanel *_self);

// method '-[NSPrintPanel beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:]'
void _IM_NSPrintPanel_beginSheetWithPrintInfo_CmodalForWindow_Cdelegate_CdidEndSelector_CcontextInfo_C(NSPrintPanel *_self, NSPrintInfo* printInfo, NSWindow* docWindow, id delegate, SEL didEndSelector, void *contextInfo);

// method '-[NSPrintPanel finalWritePrintInfo]'
void _IM_NSPrintPanel_finalWritePrintInfo(NSPrintPanel *_self);

// method '-[NSPrintPanel jobStyleHint]'
NSString* _IM_NSPrintPanel_jobStyleHint(NSPrintPanel *_self);

// method '-[NSPrintPanel pickedAllPages:]'
void _IM_NSPrintPanel_pickedAllPages_C(NSPrintPanel *_self, id sender);

// method '-[NSPrintPanel pickedButton:]'
void _IM_NSPrintPanel_pickedButton_C(NSPrintPanel *_self, id sender);

// method '-[NSPrintPanel pickedLayoutList:]'
void _IM_NSPrintPanel_pickedLayoutList_C(NSPrintPanel *_self, id sender);

// method '+[NSPrintPanel printPanel]'
NSPrintPanel* _CM_NSPrintPanel_printPanel(Class _class);

// method '-[NSPrintPanel runModal]'
int _IM_NSPrintPanel_runModal(NSPrintPanel *_self);

// method '-[NSPrintPanel setAccessoryView:]'
void _IM_NSPrintPanel_setAccessoryView_C(NSPrintPanel *_self, NSView* aView);

// method '-[NSPrintPanel setJobStyleHint:]'
void _IM_NSPrintPanel_setJobStyleHint_C(NSPrintPanel *_self, NSString* hint);

// method '-[NSPrintPanel updateFromPrintInfo]'
void _IM_NSPrintPanel_updateFromPrintInfo(NSPrintPanel *_self);

// method '-[NSPrinter acceptsBinary]'
BOOL _IM_NSPrinter_acceptsBinary(NSPrinter *_self);

// method '-[NSPrinter booleanForKey:inTable:]'
BOOL _IM_NSPrinter_booleanForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter deviceDescription]'
id _IM_NSPrinter_deviceDescription(NSPrinter *_self);

// method '-[NSPrinter domain]'
NSString* _IM_NSPrinter_domain(NSPrinter *_self);

// method '-[NSPrinter floatForKey:inTable:]'
float _IM_NSPrinter_floatForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter host]'
NSString* _IM_NSPrinter_host(NSPrinter *_self);

// method '-[NSPrinter imageRectForPaper:]'
struct _NSRect _IM_NSPrinter_imageRectForPaper_C(NSPrinter *_self, NSString* paperName);

// method '-[NSPrinter intForKey:inTable:]'
int _IM_NSPrinter_intForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter isColor]'
BOOL _IM_NSPrinter_isColor(NSPrinter *_self);

// method '-[NSPrinter isFontAvailable:]'
BOOL _IM_NSPrinter_isFontAvailable_C(NSPrinter *_self, NSString* faceName);

// method '-[NSPrinter isKey:inTable:]'
BOOL _IM_NSPrinter_isKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter isOutputStackInReverseOrder]'
BOOL _IM_NSPrinter_isOutputStackInReverseOrder(NSPrinter *_self);

// method '-[NSPrinter languageLevel]'
int _IM_NSPrinter_languageLevel(NSPrinter *_self);

// method '-[NSPrinter name]'
NSString* _IM_NSPrinter_name(NSPrinter *_self);

// method '-[NSPrinter note]'
NSString* _IM_NSPrinter_note(NSPrinter *_self);

// method '-[NSPrinter pageSizeForPaper:]'
struct _NSSize _IM_NSPrinter_pageSizeForPaper_C(NSPrinter *_self, NSString* paperName);

// method '+[NSPrinter printerNames]'
id _CM_NSPrinter_printerNames(Class _class);

// method '+[NSPrinter printerTypes]'
id _CM_NSPrinter_printerTypes(Class _class);

// method '+[NSPrinter printerWithName:]'
NSPrinter* _CM_NSPrinter_printerWithName_C(Class _class, NSString* name);

// method '+[NSPrinter printerWithName:domain:includeUnavailable:]'
NSPrinter* _CM_NSPrinter_printerWithName_Cdomain_CincludeUnavailable_C(Class _class, NSString* name, NSString* domain, BOOL flag);

// method '+[NSPrinter printerWithType:]'
NSPrinter* _CM_NSPrinter_printerWithType_C(Class _class, NSString* type);

// method '-[NSPrinter rectForKey:inTable:]'
struct _NSRect _IM_NSPrinter_rectForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter sizeForKey:inTable:]'
struct _NSSize _IM_NSPrinter_sizeForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter statusForTable:]'
int _IM_NSPrinter_statusForTable_C(NSPrinter *_self, NSString* tableName);

// method '-[NSPrinter stringForKey:inTable:]'
NSString* _IM_NSPrinter_stringForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter stringListForKey:inTable:]'
id _IM_NSPrinter_stringListForKey_CinTable_C(NSPrinter *_self, NSString* key, NSString* table);

// method '-[NSPrinter type]'
NSString* _IM_NSPrinter_type(NSPrinter *_self);

// method '-[NSProgressIndicator animate:]'
void _IM_NSProgressIndicator_animate_C(NSProgressIndicator *_self, id sender);

// method '-[NSProgressIndicator animationDelay]'
double _IM_NSProgressIndicator_animationDelay(NSProgressIndicator *_self);

// method '-[NSProgressIndicator controlSize]'
int _IM_NSProgressIndicator_controlSize(NSProgressIndicator *_self);

// method '-[NSProgressIndicator controlTint]'
int _IM_NSProgressIndicator_controlTint(NSProgressIndicator *_self);

// method '-[NSProgressIndicator doubleValue]'
double _IM_NSProgressIndicator_doubleValue(NSProgressIndicator *_self);

// method '-[NSProgressIndicator incrementBy:]'
void _IM_NSProgressIndicator_incrementBy_C(NSProgressIndicator *_self, double delta);

// method '-[NSProgressIndicator isBezeled]'
BOOL _IM_NSProgressIndicator_isBezeled(NSProgressIndicator *_self);

// method '-[NSProgressIndicator isDisplayedWhenStopped]'
BOOL _IM_NSProgressIndicator_isDisplayedWhenStopped(NSProgressIndicator *_self);

// method '-[NSProgressIndicator isIndeterminate]'
BOOL _IM_NSProgressIndicator_isIndeterminate(NSProgressIndicator *_self);

// method '-[NSProgressIndicator maxValue]'
double _IM_NSProgressIndicator_maxValue(NSProgressIndicator *_self);

// method '-[NSProgressIndicator minValue]'
double _IM_NSProgressIndicator_minValue(NSProgressIndicator *_self);

// method '-[NSProgressIndicator setAnimationDelay:]'
void _IM_NSProgressIndicator_setAnimationDelay_C(NSProgressIndicator *_self, double delay);

// method '-[NSProgressIndicator setBezeled:]'
void _IM_NSProgressIndicator_setBezeled_C(NSProgressIndicator *_self, BOOL flag);

// method '-[NSProgressIndicator setControlSize:]'
void _IM_NSProgressIndicator_setControlSize_C(NSProgressIndicator *_self, int size);

// method '-[NSProgressIndicator setControlTint:]'
void _IM_NSProgressIndicator_setControlTint_C(NSProgressIndicator *_self, int tint);

// method '-[NSProgressIndicator setDisplayedWhenStopped:]'
void _IM_NSProgressIndicator_setDisplayedWhenStopped_C(NSProgressIndicator *_self, BOOL isDisplayed);

// method '-[NSProgressIndicator setDoubleValue:]'
void _IM_NSProgressIndicator_setDoubleValue_C(NSProgressIndicator *_self, double doubleValue);

// method '-[NSProgressIndicator setIndeterminate:]'
void _IM_NSProgressIndicator_setIndeterminate_C(NSProgressIndicator *_self, BOOL flag);

// method '-[NSProgressIndicator setMaxValue:]'
void _IM_NSProgressIndicator_setMaxValue_C(NSProgressIndicator *_self, double newMaximum);

// method '-[NSProgressIndicator setMinValue:]'
void _IM_NSProgressIndicator_setMinValue_C(NSProgressIndicator *_self, double newMinimum);

// method '-[NSProgressIndicator setStyle:]'
void _IM_NSProgressIndicator_setStyle_C(NSProgressIndicator *_self, int style);

// method '-[NSProgressIndicator setUsesThreadedAnimation:]'
void _IM_NSProgressIndicator_setUsesThreadedAnimation_C(NSProgressIndicator *_self, BOOL threadedAnimation);

// method '-[NSProgressIndicator sizeToFit]'
void _IM_NSProgressIndicator_sizeToFit(NSProgressIndicator *_self);

// method '-[NSProgressIndicator startAnimation:]'
void _IM_NSProgressIndicator_startAnimation_C(NSProgressIndicator *_self, id sender);

// method '-[NSProgressIndicator stopAnimation:]'
void _IM_NSProgressIndicator_stopAnimation_C(NSProgressIndicator *_self, id sender);

// method '-[NSProgressIndicator style]'
int _IM_NSProgressIndicator_style(NSProgressIndicator *_self);

// method '-[NSProgressIndicator usesThreadedAnimation]'
BOOL _IM_NSProgressIndicator_usesThreadedAnimation(NSProgressIndicator *_self);

// method '-[NSQuickDrawView qdPort]'
void *_IM_NSQuickDrawView_qdPort(NSQuickDrawView *_self);

// method '-[NSResponder acceptsFirstResponder]'
BOOL _IM_NSResponder_acceptsFirstResponder(NSResponder *_self);

// method '-[NSResponder becomeFirstResponder]'
BOOL _IM_NSResponder_becomeFirstResponder(NSResponder *_self);

// method '-[NSResponder cancelOperation:]'
void _IM_NSResponder_cancelOperation_C(NSResponder *_self, id sender);

// method '-[NSResponder capitalizeWord:]'
void _IM_NSResponder_capitalizeWord_C(NSResponder *_self, id sender);

// method '-[NSResponder centerSelectionInVisibleArea:]'
void _IM_NSResponder_centerSelectionInVisibleArea_C(NSResponder *_self, id sender);

// method '-[NSResponder changeCaseOfLetter:]'
void _IM_NSResponder_changeCaseOfLetter_C(NSResponder *_self, id sender);

// method '-[NSResponder complete:]'
void _IM_NSResponder_complete_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteBackward:]'
void _IM_NSResponder_deleteBackward_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteBackwardByDecomposingPreviousCharacter:]'
void _IM_NSResponder_deleteBackwardByDecomposingPreviousCharacter_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteForward:]'
void _IM_NSResponder_deleteForward_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteToBeginningOfLine:]'
void _IM_NSResponder_deleteToBeginningOfLine_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteToBeginningOfParagraph:]'
void _IM_NSResponder_deleteToBeginningOfParagraph_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteToEndOfLine:]'
void _IM_NSResponder_deleteToEndOfLine_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteToEndOfParagraph:]'
void _IM_NSResponder_deleteToEndOfParagraph_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteToMark:]'
void _IM_NSResponder_deleteToMark_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteWordBackward:]'
void _IM_NSResponder_deleteWordBackward_C(NSResponder *_self, id sender);

// method '-[NSResponder deleteWordForward:]'
void _IM_NSResponder_deleteWordForward_C(NSResponder *_self, id sender);

// method '-[NSResponder doCommandBySelector:]'
void _IM_NSResponder_doCommandBySelector_C(NSResponder *_self, SEL aSelector);

// method '-[NSResponder flagsChanged:]'
void _IM_NSResponder_flagsChanged_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder flushBufferedKeyEvents]'
void _IM_NSResponder_flushBufferedKeyEvents(NSResponder *_self);

// method '-[NSResponder helpRequested:]'
void _IM_NSResponder_helpRequested_C(NSResponder *_self, NSEvent* eventPtr);

// method '-[NSResponder indent:]'
void _IM_NSResponder_indent_C(NSResponder *_self, id sender);

// method '-[NSResponder insertBacktab:]'
void _IM_NSResponder_insertBacktab_C(NSResponder *_self, id sender);

// method '-[NSResponder insertContainerBreak:]'
void _IM_NSResponder_insertContainerBreak_C(NSResponder *_self, id sender);

// method '-[NSResponder insertLineBreak:]'
void _IM_NSResponder_insertLineBreak_C(NSResponder *_self, id sender);

// method '-[NSResponder insertNewline:]'
void _IM_NSResponder_insertNewline_C(NSResponder *_self, id sender);

// method '-[NSResponder insertNewlineIgnoringFieldEditor:]'
void _IM_NSResponder_insertNewlineIgnoringFieldEditor_C(NSResponder *_self, id sender);

// method '-[NSResponder insertParagraphSeparator:]'
void _IM_NSResponder_insertParagraphSeparator_C(NSResponder *_self, id sender);

// method '-[NSResponder insertTab:]'
void _IM_NSResponder_insertTab_C(NSResponder *_self, id sender);

// method '-[NSResponder insertTabIgnoringFieldEditor:]'
void _IM_NSResponder_insertTabIgnoringFieldEditor_C(NSResponder *_self, id sender);

// method '-[NSResponder insertText:]'
void _IM_NSResponder_insertText_C(NSResponder *_self, id insertString);

// method '-[NSResponder interfaceStyle]'
int _IM_NSResponder_interfaceStyle(NSResponder *_self);

// method '-[NSResponder interpretKeyEvents:]'
void _IM_NSResponder_interpretKeyEvents_C(NSResponder *_self, id eventArray);

// method '-[NSResponder keyDown:]'
void _IM_NSResponder_keyDown_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder keyUp:]'
void _IM_NSResponder_keyUp_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder lowercaseWord:]'
void _IM_NSResponder_lowercaseWord_C(NSResponder *_self, id sender);

// method '-[NSResponder menu]'
NSMenu* _IM_NSResponder_menu(NSResponder *_self);

// method '-[NSResponder mouseDown:]'
void _IM_NSResponder_mouseDown_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder mouseDragged:]'
void _IM_NSResponder_mouseDragged_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder mouseEntered:]'
void _IM_NSResponder_mouseEntered_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder mouseExited:]'
void _IM_NSResponder_mouseExited_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder mouseMoved:]'
void _IM_NSResponder_mouseMoved_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder mouseUp:]'
void _IM_NSResponder_mouseUp_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder moveBackward:]'
void _IM_NSResponder_moveBackward_C(NSResponder *_self, id sender);

// method '-[NSResponder moveBackwardAndModifySelection:]'
void _IM_NSResponder_moveBackwardAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveDown:]'
void _IM_NSResponder_moveDown_C(NSResponder *_self, id sender);

// method '-[NSResponder moveDownAndModifySelection:]'
void _IM_NSResponder_moveDownAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveForward:]'
void _IM_NSResponder_moveForward_C(NSResponder *_self, id sender);

// method '-[NSResponder moveForwardAndModifySelection:]'
void _IM_NSResponder_moveForwardAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveLeft:]'
void _IM_NSResponder_moveLeft_C(NSResponder *_self, id sender);

// method '-[NSResponder moveLeftAndModifySelection:]'
void _IM_NSResponder_moveLeftAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveRight:]'
void _IM_NSResponder_moveRight_C(NSResponder *_self, id sender);

// method '-[NSResponder moveRightAndModifySelection:]'
void _IM_NSResponder_moveRightAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveToBeginningOfDocument:]'
void _IM_NSResponder_moveToBeginningOfDocument_C(NSResponder *_self, id sender);

// method '-[NSResponder moveToBeginningOfLine:]'
void _IM_NSResponder_moveToBeginningOfLine_C(NSResponder *_self, id sender);

// method '-[NSResponder moveToBeginningOfParagraph:]'
void _IM_NSResponder_moveToBeginningOfParagraph_C(NSResponder *_self, id sender);

// method '-[NSResponder moveToEndOfDocument:]'
void _IM_NSResponder_moveToEndOfDocument_C(NSResponder *_self, id sender);

// method '-[NSResponder moveToEndOfLine:]'
void _IM_NSResponder_moveToEndOfLine_C(NSResponder *_self, id sender);

// method '-[NSResponder moveToEndOfParagraph:]'
void _IM_NSResponder_moveToEndOfParagraph_C(NSResponder *_self, id sender);

// method '-[NSResponder moveUp:]'
void _IM_NSResponder_moveUp_C(NSResponder *_self, id sender);

// method '-[NSResponder moveUpAndModifySelection:]'
void _IM_NSResponder_moveUpAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordBackward:]'
void _IM_NSResponder_moveWordBackward_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordBackwardAndModifySelection:]'
void _IM_NSResponder_moveWordBackwardAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordForward:]'
void _IM_NSResponder_moveWordForward_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordForwardAndModifySelection:]'
void _IM_NSResponder_moveWordForwardAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordLeft:]'
void _IM_NSResponder_moveWordLeft_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordLeftAndModifySelection:]'
void _IM_NSResponder_moveWordLeftAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordRight:]'
void _IM_NSResponder_moveWordRight_C(NSResponder *_self, id sender);

// method '-[NSResponder moveWordRightAndModifySelection:]'
void _IM_NSResponder_moveWordRightAndModifySelection_C(NSResponder *_self, id sender);

// method '-[NSResponder nextResponder]'
NSResponder* _IM_NSResponder_nextResponder(NSResponder *_self);

// method '-[NSResponder noResponderFor:]'
void _IM_NSResponder_noResponderFor_C(NSResponder *_self, SEL eventSelector);

// method '-[NSResponder otherMouseDown:]'
void _IM_NSResponder_otherMouseDown_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder otherMouseDragged:]'
void _IM_NSResponder_otherMouseDragged_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder otherMouseUp:]'
void _IM_NSResponder_otherMouseUp_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder pageDown:]'
void _IM_NSResponder_pageDown_C(NSResponder *_self, id sender);

// method '-[NSResponder pageUp:]'
void _IM_NSResponder_pageUp_C(NSResponder *_self, id sender);

// method '-[NSResponder performKeyEquivalent:]'
BOOL _IM_NSResponder_performKeyEquivalent_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder performMnemonic:]'
BOOL _IM_NSResponder_performMnemonic_C(NSResponder *_self, NSString* theString);

// method '-[NSResponder presentError:]'
BOOL _IM_NSResponder_presentError_C(NSResponder *_self, id error);

// method '-[NSResponder presentError:modalForWindow:delegate:didPresentSelector:contextInfo:]'
void _IM_NSResponder_presentError_CmodalForWindow_Cdelegate_CdidPresentSelector_CcontextInfo_C(NSResponder *_self, id error, NSWindow* window, id delegate, SEL didPresentSelector, void *contextInfo);

// method '-[NSResponder resignFirstResponder]'
BOOL _IM_NSResponder_resignFirstResponder(NSResponder *_self);

// method '-[NSResponder rightMouseDown:]'
void _IM_NSResponder_rightMouseDown_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder rightMouseDragged:]'
void _IM_NSResponder_rightMouseDragged_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder rightMouseUp:]'
void _IM_NSResponder_rightMouseUp_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder scrollLineDown:]'
void _IM_NSResponder_scrollLineDown_C(NSResponder *_self, id sender);

// method '-[NSResponder scrollLineUp:]'
void _IM_NSResponder_scrollLineUp_C(NSResponder *_self, id sender);

// method '-[NSResponder scrollPageDown:]'
void _IM_NSResponder_scrollPageDown_C(NSResponder *_self, id sender);

// method '-[NSResponder scrollPageUp:]'
void _IM_NSResponder_scrollPageUp_C(NSResponder *_self, id sender);

// method '-[NSResponder scrollWheel:]'
void _IM_NSResponder_scrollWheel_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder selectAll:]'
void _IM_NSResponder_selectAll_C(NSResponder *_self, id sender);

// method '-[NSResponder selectLine:]'
void _IM_NSResponder_selectLine_C(NSResponder *_self, id sender);

// method '-[NSResponder selectParagraph:]'
void _IM_NSResponder_selectParagraph_C(NSResponder *_self, id sender);

// method '-[NSResponder selectToMark:]'
void _IM_NSResponder_selectToMark_C(NSResponder *_self, id sender);

// method '-[NSResponder selectWord:]'
void _IM_NSResponder_selectWord_C(NSResponder *_self, id sender);

// method '-[NSResponder setInterfaceStyle:]'
void _IM_NSResponder_setInterfaceStyle_C(NSResponder *_self, int interfaceStyle);

// method '-[NSResponder setMark:]'
void _IM_NSResponder_setMark_C(NSResponder *_self, id sender);

// method '-[NSResponder setMenu:]'
void _IM_NSResponder_setMenu_C(NSResponder *_self, NSMenu* menu);

// method '-[NSResponder setNextResponder:]'
void _IM_NSResponder_setNextResponder_C(NSResponder *_self, NSResponder* aResponder);

// method '-[NSResponder shouldBeTreatedAsInkEvent:]'
BOOL _IM_NSResponder_shouldBeTreatedAsInkEvent_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder showContextHelp:]'
void _IM_NSResponder_showContextHelp_C(NSResponder *_self, id sender);

// method '-[NSResponder swapWithMark:]'
void _IM_NSResponder_swapWithMark_C(NSResponder *_self, id sender);

// method '-[NSResponder tabletPoint:]'
void _IM_NSResponder_tabletPoint_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder tabletProximity:]'
void _IM_NSResponder_tabletProximity_C(NSResponder *_self, NSEvent* theEvent);

// method '-[NSResponder transpose:]'
void _IM_NSResponder_transpose_C(NSResponder *_self, id sender);

// method '-[NSResponder transposeWords:]'
void _IM_NSResponder_transposeWords_C(NSResponder *_self, id sender);

// method '-[NSResponder tryToPerform:with:]'
BOOL _IM_NSResponder_tryToPerform_Cwith_C(NSResponder *_self, SEL anAction, id anObject);

// method '-[NSResponder undoManager]'
id _IM_NSResponder_undoManager(NSResponder *_self);

// method '-[NSResponder uppercaseWord:]'
void _IM_NSResponder_uppercaseWord_C(NSResponder *_self, id sender);

// method '-[NSResponder validRequestorForSendType:returnType:]'
id _IM_NSResponder_validRequestorForSendType_CreturnType_C(NSResponder *_self, NSString* sendType, NSString* returnType);

// method '-[NSResponder willPresentError:]'
id _IM_NSResponder_willPresentError_C(NSResponder *_self, id error);

// method '-[NSResponder yank:]'
void _IM_NSResponder_yank_C(NSResponder *_self, id sender);

// method '-[NSRulerMarker drawRect:]'
void _IM_NSRulerMarker_drawRect_C(NSRulerMarker *_self, struct _NSRect rect);

// method '-[NSRulerMarker image]'
NSImage* _IM_NSRulerMarker_image(NSRulerMarker *_self);

// method '-[NSRulerMarker imageOrigin]'
struct _NSPoint _IM_NSRulerMarker_imageOrigin(NSRulerMarker *_self);

// method '-[NSRulerMarker imageRectInRuler]'
struct _NSRect _IM_NSRulerMarker_imageRectInRuler(NSRulerMarker *_self);

// method '-[NSRulerMarker initWithRulerView:markerLocation:image:imageOrigin:]'
NSRulerMarker *_IM_NSRulerMarker_initWithRulerView_CmarkerLocation_Cimage_CimageOrigin_C(NSRulerMarker *_self, NSRulerView* ruler, float location, NSImage* image, struct _NSPoint imageOrigin);

// method '-[NSRulerMarker isDragging]'
BOOL _IM_NSRulerMarker_isDragging(NSRulerMarker *_self);

// method '-[NSRulerMarker isMovable]'
BOOL _IM_NSRulerMarker_isMovable(NSRulerMarker *_self);

// method '-[NSRulerMarker isRemovable]'
BOOL _IM_NSRulerMarker_isRemovable(NSRulerMarker *_self);

// method '-[NSRulerMarker markerLocation]'
float _IM_NSRulerMarker_markerLocation(NSRulerMarker *_self);

// method '-[NSRulerMarker representedObject]'
id _IM_NSRulerMarker_representedObject(NSRulerMarker *_self);

// method '-[NSRulerMarker ruler]'
NSRulerView* _IM_NSRulerMarker_ruler(NSRulerMarker *_self);

// method '-[NSRulerMarker setImage:]'
void _IM_NSRulerMarker_setImage_C(NSRulerMarker *_self, NSImage* image);

// method '-[NSRulerMarker setImageOrigin:]'
void _IM_NSRulerMarker_setImageOrigin_C(NSRulerMarker *_self, struct _NSPoint imageOrigin);

// method '-[NSRulerMarker setMarkerLocation:]'
void _IM_NSRulerMarker_setMarkerLocation_C(NSRulerMarker *_self, float location);

// method '-[NSRulerMarker setMovable:]'
void _IM_NSRulerMarker_setMovable_C(NSRulerMarker *_self, BOOL flag);

// method '-[NSRulerMarker setRemovable:]'
void _IM_NSRulerMarker_setRemovable_C(NSRulerMarker *_self, BOOL flag);

// method '-[NSRulerMarker setRepresentedObject:]'
void _IM_NSRulerMarker_setRepresentedObject_C(NSRulerMarker *_self, id representedObject);

// method '-[NSRulerMarker thicknessRequiredInRuler]'
float _IM_NSRulerMarker_thicknessRequiredInRuler(NSRulerMarker *_self);

// method '-[NSRulerMarker trackMouse:adding:]'
BOOL _IM_NSRulerMarker_trackMouse_Cadding_C(NSRulerMarker *_self, NSEvent* mouseDownEvent, BOOL isAdding);

// method '-[NSRulerView accessoryView]'
NSView* _IM_NSRulerView_accessoryView(NSRulerView *_self);

// method '-[NSRulerView addMarker:]'
void _IM_NSRulerView_addMarker_C(NSRulerView *_self, NSRulerMarker* marker);

// method '-[NSRulerView baselineLocation]'
float _IM_NSRulerView_baselineLocation(NSRulerView *_self);

// method '-[NSRulerView clientView]'
NSView* _IM_NSRulerView_clientView(NSRulerView *_self);

// method '-[NSRulerView drawHashMarksAndLabelsInRect:]'
void _IM_NSRulerView_drawHashMarksAndLabelsInRect_C(NSRulerView *_self, struct _NSRect rect);

// method '-[NSRulerView drawMarkersInRect:]'
void _IM_NSRulerView_drawMarkersInRect_C(NSRulerView *_self, struct _NSRect rect);

// method '-[NSRulerView initWithScrollView:orientation:]'
NSRulerView *_IM_NSRulerView_initWithScrollView_Corientation_C(NSRulerView *_self, NSScrollView* scrollView, int orientation);

// method '-[NSRulerView invalidateHashMarks]'
void _IM_NSRulerView_invalidateHashMarks(NSRulerView *_self);

// method '-[NSRulerView isFlipped]'
BOOL _IM_NSRulerView_isFlipped(NSRulerView *_self);

// method '-[NSRulerView markers]'
id _IM_NSRulerView_markers(NSRulerView *_self);

// method '-[NSRulerView measurementUnits]'
NSString* _IM_NSRulerView_measurementUnits(NSRulerView *_self);

// method '-[NSRulerView moveRulerlineFromLocation:toLocation:]'
void _IM_NSRulerView_moveRulerlineFromLocation_CtoLocation_C(NSRulerView *_self, float oldLocation, float newLocation);

// method '-[NSRulerView orientation]'
int _IM_NSRulerView_orientation(NSRulerView *_self);

// method '-[NSRulerView originOffset]'
float _IM_NSRulerView_originOffset(NSRulerView *_self);

// method '+[NSRulerView registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:]'
void _CM_NSRulerView_registerUnitWithName_Cabbreviation_CunitToPointsConversionFactor_CstepUpCycle_CstepDownCycle_C(Class _class, NSString* unitName, NSString* abbreviation, float conversionFactor, id stepUpCycle, id stepDownCycle);

// method '-[NSRulerView removeMarker:]'
void _IM_NSRulerView_removeMarker_C(NSRulerView *_self, NSRulerMarker* marker);

// method '-[NSRulerView requiredThickness]'
float _IM_NSRulerView_requiredThickness(NSRulerView *_self);

// method '-[NSRulerView reservedThicknessForAccessoryView]'
float _IM_NSRulerView_reservedThicknessForAccessoryView(NSRulerView *_self);

// method '-[NSRulerView reservedThicknessForMarkers]'
float _IM_NSRulerView_reservedThicknessForMarkers(NSRulerView *_self);

// method '-[NSRulerView ruleThickness]'
float _IM_NSRulerView_ruleThickness(NSRulerView *_self);

// method '-[NSRulerView scrollView]'
NSScrollView* _IM_NSRulerView_scrollView(NSRulerView *_self);

// method '-[NSRulerView setAccessoryView:]'
void _IM_NSRulerView_setAccessoryView_C(NSRulerView *_self, NSView* accessory);

// method '-[NSRulerView setClientView:]'
void _IM_NSRulerView_setClientView_C(NSRulerView *_self, NSView* client);

// method '-[NSRulerView setMarkers:]'
void _IM_NSRulerView_setMarkers_C(NSRulerView *_self, id markers);

// method '-[NSRulerView setMeasurementUnits:]'
void _IM_NSRulerView_setMeasurementUnits_C(NSRulerView *_self, NSString* unitName);

// method '-[NSRulerView setOrientation:]'
void _IM_NSRulerView_setOrientation_C(NSRulerView *_self, int orientation);

// method '-[NSRulerView setOriginOffset:]'
void _IM_NSRulerView_setOriginOffset_C(NSRulerView *_self, float offset);

// method '-[NSRulerView setReservedThicknessForAccessoryView:]'
void _IM_NSRulerView_setReservedThicknessForAccessoryView_C(NSRulerView *_self, float thickness);

// method '-[NSRulerView setReservedThicknessForMarkers:]'
void _IM_NSRulerView_setReservedThicknessForMarkers_C(NSRulerView *_self, float thickness);

// method '-[NSRulerView setRuleThickness:]'
void _IM_NSRulerView_setRuleThickness_C(NSRulerView *_self, float thickness);

// method '-[NSRulerView setScrollView:]'
void _IM_NSRulerView_setScrollView_C(NSRulerView *_self, NSScrollView* scrollView);

// method '-[NSRulerView trackMarker:withMouseEvent:]'
BOOL _IM_NSRulerView_trackMarker_CwithMouseEvent_C(NSRulerView *_self, NSRulerMarker* marker, NSEvent* event);

// method '-[NSSavePanel URL]'
NSURL* _IM_NSSavePanel_URL(NSSavePanel *_self);

// method '-[NSSavePanel accessoryView]'
NSView* _IM_NSSavePanel_accessoryView(NSSavePanel *_self);

// method '-[NSSavePanel allowedFileTypes]'
id _IM_NSSavePanel_allowedFileTypes(NSSavePanel *_self);

// method '-[NSSavePanel allowsOtherFileTypes]'
BOOL _IM_NSSavePanel_allowsOtherFileTypes(NSSavePanel *_self);

// method '-[NSSavePanel beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:]'
void _IM_NSSavePanel_beginSheetForDirectory_Cfile_CmodalForWindow_CmodalDelegate_CdidEndSelector_CcontextInfo_C(NSSavePanel *_self, NSString* path, NSString* name, NSWindow* docWindow, id delegate, SEL didEndSelector, void *contextInfo);

// method '-[NSSavePanel canCreateDirectories]'
BOOL _IM_NSSavePanel_canCreateDirectories(NSSavePanel *_self);

// method '-[NSSavePanel canSelectHiddenExtension]'
BOOL _IM_NSSavePanel_canSelectHiddenExtension(NSSavePanel *_self);

// method '-[NSSavePanel cancel:]'
void _IM_NSSavePanel_cancel_C(NSSavePanel *_self, id sender);

// method '-[NSSavePanel delegate]'
id _IM_NSSavePanel_delegate(NSSavePanel *_self);

// method '-[NSSavePanel directory]'
NSString* _IM_NSSavePanel_directory(NSSavePanel *_self);

// method '-[NSSavePanel filename]'
NSString* _IM_NSSavePanel_filename(NSSavePanel *_self);

// method '-[NSSavePanel isExpanded]'
BOOL _IM_NSSavePanel_isExpanded(NSSavePanel *_self);

// method '-[NSSavePanel isExtensionHidden]'
BOOL _IM_NSSavePanel_isExtensionHidden(NSSavePanel *_self);

// method '-[NSSavePanel message]'
NSString* _IM_NSSavePanel_message(NSSavePanel *_self);

// method '-[NSSavePanel nameFieldLabel]'
NSString* _IM_NSSavePanel_nameFieldLabel(NSSavePanel *_self);

// method '-[NSSavePanel ok:]'
void _IM_NSSavePanel_ok_C(NSSavePanel *_self, id sender);

// method '-[NSSavePanel prompt]'
NSString* _IM_NSSavePanel_prompt(NSSavePanel *_self);

// method '-[NSSavePanel requiredFileType]'
NSString* _IM_NSSavePanel_requiredFileType(NSSavePanel *_self);

// method '-[NSSavePanel runModal]'
int _IM_NSSavePanel_runModal(NSSavePanel *_self);

// method '-[NSSavePanel runModalForDirectory:file:]'
int _IM_NSSavePanel_runModalForDirectory_Cfile_C(NSSavePanel *_self, NSString* path, NSString* name);

// method '+[NSSavePanel savePanel]'
NSSavePanel* _CM_NSSavePanel_savePanel(Class _class);

// method '-[NSSavePanel selectText:]'
void _IM_NSSavePanel_selectText_C(NSSavePanel *_self, id sender);

// method '-[NSSavePanel setAccessoryView:]'
void _IM_NSSavePanel_setAccessoryView_C(NSSavePanel *_self, NSView* view);

// method '-[NSSavePanel setAllowedFileTypes:]'
void _IM_NSSavePanel_setAllowedFileTypes_C(NSSavePanel *_self, id types);

// method '-[NSSavePanel setAllowsOtherFileTypes:]'
void _IM_NSSavePanel_setAllowsOtherFileTypes_C(NSSavePanel *_self, BOOL flag);

// method '-[NSSavePanel setCanCreateDirectories:]'
void _IM_NSSavePanel_setCanCreateDirectories_C(NSSavePanel *_self, BOOL flag);

// method '-[NSSavePanel setCanSelectHiddenExtension:]'
void _IM_NSSavePanel_setCanSelectHiddenExtension_C(NSSavePanel *_self, BOOL flag);

// method '-[NSSavePanel setDelegate:]'
void _IM_NSSavePanel_setDelegate_C(NSSavePanel *_self, id delegate);

// method '-[NSSavePanel setDirectory:]'
void _IM_NSSavePanel_setDirectory_C(NSSavePanel *_self, NSString* path);

// method '-[NSSavePanel setExtensionHidden:]'
void _IM_NSSavePanel_setExtensionHidden_C(NSSavePanel *_self, BOOL flag);

// method '-[NSSavePanel setMessage:]'
void _IM_NSSavePanel_setMessage_C(NSSavePanel *_self, NSString* message);

// method '-[NSSavePanel setNameFieldLabel:]'
void _IM_NSSavePanel_setNameFieldLabel_C(NSSavePanel *_self, NSString* label);

// method '-[NSSavePanel setPrompt:]'
void _IM_NSSavePanel_setPrompt_C(NSSavePanel *_self, NSString* prompt);

// method '-[NSSavePanel setRequiredFileType:]'
void _IM_NSSavePanel_setRequiredFileType_C(NSSavePanel *_self, NSString* type);

// method '-[NSSavePanel setTitle:]'
void _IM_NSSavePanel_setTitle_C(NSSavePanel *_self, NSString* title);

// method '-[NSSavePanel setTreatsFilePackagesAsDirectories:]'
void _IM_NSSavePanel_setTreatsFilePackagesAsDirectories_C(NSSavePanel *_self, BOOL flag);

// method '-[NSSavePanel title]'
NSString* _IM_NSSavePanel_title(NSSavePanel *_self);

// method '-[NSSavePanel treatsFilePackagesAsDirectories]'
BOOL _IM_NSSavePanel_treatsFilePackagesAsDirectories(NSSavePanel *_self);

// method '-[NSSavePanel validateVisibleColumns]'
void _IM_NSSavePanel_validateVisibleColumns(NSSavePanel *_self);

// method '+[NSScreen deepestScreen]'
NSScreen* _CM_NSScreen_deepestScreen(Class _class);

// method '-[NSScreen depth]'
int _IM_NSScreen_depth(NSScreen *_self);

// method '-[NSScreen deviceDescription]'
id _IM_NSScreen_deviceDescription(NSScreen *_self);

// method '-[NSScreen frame]'
struct _NSRect _IM_NSScreen_frame(NSScreen *_self);

// method '+[NSScreen mainScreen]'
NSScreen* _CM_NSScreen_mainScreen(Class _class);

// method '+[NSScreen screens]'
id _CM_NSScreen_screens(Class _class);

// method '-[NSScreen supportedWindowDepths]'
const int* _IM_NSScreen_supportedWindowDepths(NSScreen *_self);

// method '-[NSScreen userSpaceScaleFactor]'
float _IM_NSScreen_userSpaceScaleFactor(NSScreen *_self);

// method '-[NSScreen visibleFrame]'
struct _NSRect _IM_NSScreen_visibleFrame(NSScreen *_self);

// method '-[NSScrollView autohidesScrollers]'
BOOL _IM_NSScrollView_autohidesScrollers(NSScrollView *_self);

// method '-[NSScrollView backgroundColor]'
NSColor* _IM_NSScrollView_backgroundColor(NSScrollView *_self);

// method '-[NSScrollView borderType]'
int _IM_NSScrollView_borderType(NSScrollView *_self);

// method '-[NSScrollView contentSize]'
struct _NSSize _IM_NSScrollView_contentSize(NSScrollView *_self);

// method '+[NSScrollView contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:]'
struct _NSSize _CM_NSScrollView_contentSizeForFrameSize_ChasHorizontalScroller_ChasVerticalScroller_CborderType_C(Class _class, struct _NSSize fSize, BOOL hFlag, BOOL vFlag, int aType);

// method '-[NSScrollView contentView]'
NSClipView* _IM_NSScrollView_contentView(NSScrollView *_self);

// method '-[NSScrollView documentCursor]'
NSCursor* _IM_NSScrollView_documentCursor(NSScrollView *_self);

// method '-[NSScrollView documentView]'
id _IM_NSScrollView_documentView(NSScrollView *_self);

// method '-[NSScrollView documentVisibleRect]'
struct _NSRect _IM_NSScrollView_documentVisibleRect(NSScrollView *_self);

// method '-[NSScrollView drawsBackground]'
BOOL _IM_NSScrollView_drawsBackground(NSScrollView *_self);

// method '+[NSScrollView frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:]'
struct _NSSize _CM_NSScrollView_frameSizeForContentSize_ChasHorizontalScroller_ChasVerticalScroller_CborderType_C(Class _class, struct _NSSize cSize, BOOL hFlag, BOOL vFlag, int aType);

// method '-[NSScrollView hasHorizontalRuler]'
BOOL _IM_NSScrollView_hasHorizontalRuler(NSScrollView *_self);

// method '-[NSScrollView hasHorizontalScroller]'
BOOL _IM_NSScrollView_hasHorizontalScroller(NSScrollView *_self);

// method '-[NSScrollView hasVerticalRuler]'
BOOL _IM_NSScrollView_hasVerticalRuler(NSScrollView *_self);

// method '-[NSScrollView hasVerticalScroller]'
BOOL _IM_NSScrollView_hasVerticalScroller(NSScrollView *_self);

// method '-[NSScrollView horizontalLineScroll]'
float _IM_NSScrollView_horizontalLineScroll(NSScrollView *_self);

// method '-[NSScrollView horizontalPageScroll]'
float _IM_NSScrollView_horizontalPageScroll(NSScrollView *_self);

// method '-[NSScrollView horizontalRulerView]'
NSRulerView* _IM_NSScrollView_horizontalRulerView(NSScrollView *_self);

// method '-[NSScrollView horizontalScroller]'
NSScroller* _IM_NSScrollView_horizontalScroller(NSScrollView *_self);

// method '-[NSScrollView lineScroll]'
float _IM_NSScrollView_lineScroll(NSScrollView *_self);

// method '-[NSScrollView pageScroll]'
float _IM_NSScrollView_pageScroll(NSScrollView *_self);

// method '-[NSScrollView reflectScrolledClipView:]'
void _IM_NSScrollView_reflectScrolledClipView_C(NSScrollView *_self, NSClipView* cView);

// method '+[NSScrollView rulerViewClass]'
Class _CM_NSScrollView_rulerViewClass(Class _class);

// method '-[NSScrollView rulersVisible]'
BOOL _IM_NSScrollView_rulersVisible(NSScrollView *_self);

// method '-[NSScrollView scrollWheel:]'
void _IM_NSScrollView_scrollWheel_C(NSScrollView *_self, NSEvent* theEvent);

// method '-[NSScrollView scrollsDynamically]'
BOOL _IM_NSScrollView_scrollsDynamically(NSScrollView *_self);

// method '-[NSScrollView setAutohidesScrollers:]'
void _IM_NSScrollView_setAutohidesScrollers_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setBackgroundColor:]'
void _IM_NSScrollView_setBackgroundColor_C(NSScrollView *_self, NSColor* color);

// method '-[NSScrollView setBorderType:]'
void _IM_NSScrollView_setBorderType_C(NSScrollView *_self, int aType);

// method '-[NSScrollView setContentView:]'
void _IM_NSScrollView_setContentView_C(NSScrollView *_self, NSClipView* contentView);

// method '-[NSScrollView setDocumentCursor:]'
void _IM_NSScrollView_setDocumentCursor_C(NSScrollView *_self, NSCursor* anObj);

// method '-[NSScrollView setDocumentView:]'
void _IM_NSScrollView_setDocumentView_C(NSScrollView *_self, NSView* aView);

// method '-[NSScrollView setDrawsBackground:]'
void _IM_NSScrollView_setDrawsBackground_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setHasHorizontalRuler:]'
void _IM_NSScrollView_setHasHorizontalRuler_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setHasHorizontalScroller:]'
void _IM_NSScrollView_setHasHorizontalScroller_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setHasVerticalRuler:]'
void _IM_NSScrollView_setHasVerticalRuler_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setHasVerticalScroller:]'
void _IM_NSScrollView_setHasVerticalScroller_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setHorizontalLineScroll:]'
void _IM_NSScrollView_setHorizontalLineScroll_C(NSScrollView *_self, float value);

// method '-[NSScrollView setHorizontalPageScroll:]'
void _IM_NSScrollView_setHorizontalPageScroll_C(NSScrollView *_self, float value);

// method '-[NSScrollView setHorizontalRulerView:]'
void _IM_NSScrollView_setHorizontalRulerView_C(NSScrollView *_self, NSRulerView* ruler);

// method '-[NSScrollView setHorizontalScroller:]'
void _IM_NSScrollView_setHorizontalScroller_C(NSScrollView *_self, NSScroller* anObject);

// method '-[NSScrollView setLineScroll:]'
void _IM_NSScrollView_setLineScroll_C(NSScrollView *_self, float value);

// method '-[NSScrollView setPageScroll:]'
void _IM_NSScrollView_setPageScroll_C(NSScrollView *_self, float value);

// method '+[NSScrollView setRulerViewClass:]'
void _CM_NSScrollView_setRulerViewClass_C(Class _class, Class rulerViewClass);

// method '-[NSScrollView setRulersVisible:]'
void _IM_NSScrollView_setRulersVisible_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setScrollsDynamically:]'
void _IM_NSScrollView_setScrollsDynamically_C(NSScrollView *_self, BOOL flag);

// method '-[NSScrollView setVerticalLineScroll:]'
void _IM_NSScrollView_setVerticalLineScroll_C(NSScrollView *_self, float value);

// method '-[NSScrollView setVerticalPageScroll:]'
void _IM_NSScrollView_setVerticalPageScroll_C(NSScrollView *_self, float value);

// method '-[NSScrollView setVerticalRulerView:]'
void _IM_NSScrollView_setVerticalRulerView_C(NSScrollView *_self, NSRulerView* ruler);

// method '-[NSScrollView setVerticalScroller:]'
void _IM_NSScrollView_setVerticalScroller_C(NSScrollView *_self, NSScroller* anObject);

// method '-[NSScrollView tile]'
void _IM_NSScrollView_tile(NSScrollView *_self);

// method '-[NSScrollView verticalLineScroll]'
float _IM_NSScrollView_verticalLineScroll(NSScrollView *_self);

// method '-[NSScrollView verticalPageScroll]'
float _IM_NSScrollView_verticalPageScroll(NSScrollView *_self);

// method '-[NSScrollView verticalRulerView]'
NSRulerView* _IM_NSScrollView_verticalRulerView(NSScrollView *_self);

// method '-[NSScrollView verticalScroller]'
NSScroller* _IM_NSScrollView_verticalScroller(NSScrollView *_self);

// method '-[NSScroller arrowsPosition]'
int _IM_NSScroller_arrowsPosition(NSScroller *_self);

// method '-[NSScroller checkSpaceForParts]'
void _IM_NSScroller_checkSpaceForParts(NSScroller *_self);

// method '-[NSScroller controlSize]'
int _IM_NSScroller_controlSize(NSScroller *_self);

// method '-[NSScroller controlTint]'
int _IM_NSScroller_controlTint(NSScroller *_self);

// method '-[NSScroller drawArrow:highlight:]'
void _IM_NSScroller_drawArrow_Chighlight_C(NSScroller *_self, int whichArrow, BOOL flag);

// method '-[NSScroller drawKnob]'
void _IM_NSScroller_drawKnob(NSScroller *_self);

// method '-[NSScroller drawParts]'
void _IM_NSScroller_drawParts(NSScroller *_self);

// method '-[NSScroller highlight:]'
void _IM_NSScroller_highlight_C(NSScroller *_self, BOOL flag);

// method '-[NSScroller hitPart]'
int _IM_NSScroller_hitPart(NSScroller *_self);

// method '-[NSScroller knobProportion]'
float _IM_NSScroller_knobProportion(NSScroller *_self);

// method '-[NSScroller rectForPart:]'
struct _NSRect _IM_NSScroller_rectForPart_C(NSScroller *_self, int partCode);

// method '+[NSScroller scrollerWidth]'
float _CM_NSScroller_scrollerWidth(Class _class);

// method '+[NSScroller scrollerWidthForControlSize:]'
float _CM_NSScroller_scrollerWidthForControlSize_C(Class _class, int controlSize);

// method '-[NSScroller setArrowsPosition:]'
void _IM_NSScroller_setArrowsPosition_C(NSScroller *_self, int where);

// method '-[NSScroller setControlSize:]'
void _IM_NSScroller_setControlSize_C(NSScroller *_self, int controlSize);

// method '-[NSScroller setControlTint:]'
void _IM_NSScroller_setControlTint_C(NSScroller *_self, int controlTint);

// method '-[NSScroller setFloatValue:knobProportion:]'
void _IM_NSScroller_setFloatValue_CknobProportion_C(NSScroller *_self, float aFloat, float percent);

// method '-[NSScroller testPart:]'
int _IM_NSScroller_testPart_C(NSScroller *_self, struct _NSPoint thePoint);

// method '-[NSScroller trackKnob:]'
void _IM_NSScroller_trackKnob_C(NSScroller *_self, NSEvent* theEvent);

// method '-[NSScroller trackScrollButtons:]'
void _IM_NSScroller_trackScrollButtons_C(NSScroller *_self, NSEvent* theEvent);

// method '-[NSScroller usableParts]'
int _IM_NSScroller_usableParts(NSScroller *_self);

// method '-[NSSearchField recentSearches]'
id _IM_NSSearchField_recentSearches(NSSearchField *_self);

// method '-[NSSearchField recentsAutosaveName]'
NSString* _IM_NSSearchField_recentsAutosaveName(NSSearchField *_self);

// method '-[NSSearchField setRecentSearches:]'
void _IM_NSSearchField_setRecentSearches_C(NSSearchField *_self, id searches);

// method '-[NSSearchField setRecentsAutosaveName:]'
void _IM_NSSearchField_setRecentsAutosaveName_C(NSSearchField *_self, NSString* string);

// method '-[NSSearchFieldCell cancelButtonCell]'
NSButtonCell* _IM_NSSearchFieldCell_cancelButtonCell(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell cancelButtonRectForBounds:]'
struct _NSRect _IM_NSSearchFieldCell_cancelButtonRectForBounds_C(NSSearchFieldCell *_self, struct _NSRect rect);

// method '-[NSSearchFieldCell maximumRecents]'
int _IM_NSSearchFieldCell_maximumRecents(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell recentSearches]'
id _IM_NSSearchFieldCell_recentSearches(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell recentsAutosaveName]'
NSString* _IM_NSSearchFieldCell_recentsAutosaveName(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell resetCancelButtonCell]'
void _IM_NSSearchFieldCell_resetCancelButtonCell(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell resetSearchButtonCell]'
void _IM_NSSearchFieldCell_resetSearchButtonCell(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell searchButtonCell]'
NSButtonCell* _IM_NSSearchFieldCell_searchButtonCell(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell searchButtonRectForBounds:]'
struct _NSRect _IM_NSSearchFieldCell_searchButtonRectForBounds_C(NSSearchFieldCell *_self, struct _NSRect rect);

// method '-[NSSearchFieldCell searchMenuTemplate]'
NSMenu* _IM_NSSearchFieldCell_searchMenuTemplate(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell searchTextRectForBounds:]'
struct _NSRect _IM_NSSearchFieldCell_searchTextRectForBounds_C(NSSearchFieldCell *_self, struct _NSRect rect);

// method '-[NSSearchFieldCell sendsSearchStringImmediately]'
BOOL _IM_NSSearchFieldCell_sendsSearchStringImmediately(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell sendsWholeSearchString]'
BOOL _IM_NSSearchFieldCell_sendsWholeSearchString(NSSearchFieldCell *_self);

// method '-[NSSearchFieldCell setCancelButtonCell:]'
void _IM_NSSearchFieldCell_setCancelButtonCell_C(NSSearchFieldCell *_self, NSButtonCell* cell);

// method '-[NSSearchFieldCell setMaximumRecents:]'
void _IM_NSSearchFieldCell_setMaximumRecents_C(NSSearchFieldCell *_self, int maxRecents);

// method '-[NSSearchFieldCell setRecentSearches:]'
void _IM_NSSearchFieldCell_setRecentSearches_C(NSSearchFieldCell *_self, id searches);

// method '-[NSSearchFieldCell setRecentsAutosaveName:]'
void _IM_NSSearchFieldCell_setRecentsAutosaveName_C(NSSearchFieldCell *_self, NSString* string);

// method '-[NSSearchFieldCell setSearchButtonCell:]'
void _IM_NSSearchFieldCell_setSearchButtonCell_C(NSSearchFieldCell *_self, NSButtonCell* cell);

// method '-[NSSearchFieldCell setSearchMenuTemplate:]'
void _IM_NSSearchFieldCell_setSearchMenuTemplate_C(NSSearchFieldCell *_self, NSMenu* menu);

// method '-[NSSearchFieldCell setSendsSearchStringImmediately:]'
void _IM_NSSearchFieldCell_setSendsSearchStringImmediately_C(NSSearchFieldCell *_self, BOOL flag);

// method '-[NSSearchFieldCell setSendsWholeSearchString:]'
void _IM_NSSearchFieldCell_setSendsWholeSearchString_C(NSSearchFieldCell *_self, BOOL flag);

// method '-[NSSecureTextFieldCell echosBullets]'
BOOL _IM_NSSecureTextFieldCell_echosBullets(NSSecureTextFieldCell *_self);

// method '-[NSSecureTextFieldCell setEchosBullets:]'
void _IM_NSSecureTextFieldCell_setEchosBullets_C(NSSecureTextFieldCell *_self, BOOL flag);

// method '-[NSSegmentedCell drawSegment:inFrame:withView:]'
void _IM_NSSegmentedCell_drawSegment_CinFrame_CwithView_C(NSSegmentedCell *_self, int segment, struct _NSRect frame, NSView* controlView);

// method '-[NSSegmentedCell imageForSegment:]'
NSImage* _IM_NSSegmentedCell_imageForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell isEnabledForSegment:]'
BOOL _IM_NSSegmentedCell_isEnabledForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell isSelectedForSegment:]'
BOOL _IM_NSSegmentedCell_isSelectedForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell labelForSegment:]'
NSString* _IM_NSSegmentedCell_labelForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell makeNextSegmentKey]'
void _IM_NSSegmentedCell_makeNextSegmentKey(NSSegmentedCell *_self);

// method '-[NSSegmentedCell makePreviousSegmentKey]'
void _IM_NSSegmentedCell_makePreviousSegmentKey(NSSegmentedCell *_self);

// method '-[NSSegmentedCell menuForSegment:]'
NSMenu* _IM_NSSegmentedCell_menuForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell segmentCount]'
int _IM_NSSegmentedCell_segmentCount(NSSegmentedCell *_self);

// method '-[NSSegmentedCell selectSegmentWithTag:]'
BOOL _IM_NSSegmentedCell_selectSegmentWithTag_C(NSSegmentedCell *_self, int tag);

// method '-[NSSegmentedCell selectedSegment]'
int _IM_NSSegmentedCell_selectedSegment(NSSegmentedCell *_self);

// method '-[NSSegmentedCell setEnabled:forSegment:]'
void _IM_NSSegmentedCell_setEnabled_CforSegment_C(NSSegmentedCell *_self, BOOL enabled, int segment);

// method '-[NSSegmentedCell setImage:forSegment:]'
void _IM_NSSegmentedCell_setImage_CforSegment_C(NSSegmentedCell *_self, NSImage* image, int segment);

// method '-[NSSegmentedCell setLabel:forSegment:]'
void _IM_NSSegmentedCell_setLabel_CforSegment_C(NSSegmentedCell *_self, NSString* label, int segment);

// method '-[NSSegmentedCell setMenu:forSegment:]'
void _IM_NSSegmentedCell_setMenu_CforSegment_C(NSSegmentedCell *_self, NSMenu* menu, int segment);

// method '-[NSSegmentedCell setSegmentCount:]'
void _IM_NSSegmentedCell_setSegmentCount_C(NSSegmentedCell *_self, int count);

// method '-[NSSegmentedCell setSelected:forSegment:]'
void _IM_NSSegmentedCell_setSelected_CforSegment_C(NSSegmentedCell *_self, BOOL selected, int segment);

// method '-[NSSegmentedCell setSelectedSegment:]'
void _IM_NSSegmentedCell_setSelectedSegment_C(NSSegmentedCell *_self, int selectedSegment);

// method '-[NSSegmentedCell setTag:forSegment:]'
void _IM_NSSegmentedCell_setTag_CforSegment_C(NSSegmentedCell *_self, int tag, int segment);

// method '-[NSSegmentedCell setToolTip:forSegment:]'
void _IM_NSSegmentedCell_setToolTip_CforSegment_C(NSSegmentedCell *_self, NSString* toolTip, int segment);

// method '-[NSSegmentedCell setTrackingMode:]'
void _IM_NSSegmentedCell_setTrackingMode_C(NSSegmentedCell *_self, int trackingMode);

// method '-[NSSegmentedCell setWidth:forSegment:]'
void _IM_NSSegmentedCell_setWidth_CforSegment_C(NSSegmentedCell *_self, float width, int segment);

// method '-[NSSegmentedCell tagForSegment:]'
int _IM_NSSegmentedCell_tagForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell toolTipForSegment:]'
NSString* _IM_NSSegmentedCell_toolTipForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedCell trackingMode]'
int _IM_NSSegmentedCell_trackingMode(NSSegmentedCell *_self);

// method '-[NSSegmentedCell widthForSegment:]'
float _IM_NSSegmentedCell_widthForSegment_C(NSSegmentedCell *_self, int segment);

// method '-[NSSegmentedControl imageForSegment:]'
NSImage* _IM_NSSegmentedControl_imageForSegment_C(NSSegmentedControl *_self, int segment);

// method '-[NSSegmentedControl isEnabledForSegment:]'
BOOL _IM_NSSegmentedControl_isEnabledForSegment_C(NSSegmentedControl *_self, int segment);

// method '-[NSSegmentedControl isSelectedForSegment:]'
BOOL _IM_NSSegmentedControl_isSelectedForSegment_C(NSSegmentedControl *_self, int segment);

// method '-[NSSegmentedControl labelForSegment:]'
NSString* _IM_NSSegmentedControl_labelForSegment_C(NSSegmentedControl *_self, int segment);

// method '-[NSSegmentedControl menuForSegment:]'
NSMenu* _IM_NSSegmentedControl_menuForSegment_C(NSSegmentedControl *_self, int segment);

// method '-[NSSegmentedControl segmentCount]'
int _IM_NSSegmentedControl_segmentCount(NSSegmentedControl *_self);

// method '-[NSSegmentedControl selectSegmentWithTag:]'
BOOL _IM_NSSegmentedControl_selectSegmentWithTag_C(NSSegmentedControl *_self, int tag);

// method '-[NSSegmentedControl selectedSegment]'
int _IM_NSSegmentedControl_selectedSegment(NSSegmentedControl *_self);

// method '-[NSSegmentedControl setEnabled:forSegment:]'
void _IM_NSSegmentedControl_setEnabled_CforSegment_C(NSSegmentedControl *_self, BOOL enabled, int segment);

// method '-[NSSegmentedControl setImage:forSegment:]'
void _IM_NSSegmentedControl_setImage_CforSegment_C(NSSegmentedControl *_self, NSImage* image, int segment);

// method '-[NSSegmentedControl setLabel:forSegment:]'
void _IM_NSSegmentedControl_setLabel_CforSegment_C(NSSegmentedControl *_self, NSString* label, int segment);

// method '-[NSSegmentedControl setMenu:forSegment:]'
void _IM_NSSegmentedControl_setMenu_CforSegment_C(NSSegmentedControl *_self, NSMenu* menu, int segment);

// method '-[NSSegmentedControl setSegmentCount:]'
void _IM_NSSegmentedControl_setSegmentCount_C(NSSegmentedControl *_self, int count);

// method '-[NSSegmentedControl setSelected:forSegment:]'
void _IM_NSSegmentedControl_setSelected_CforSegment_C(NSSegmentedControl *_self, BOOL selected, int segment);

// method '-[NSSegmentedControl setSelectedSegment:]'
void _IM_NSSegmentedControl_setSelectedSegment_C(NSSegmentedControl *_self, int selectedSegment);

// method '-[NSSegmentedControl setWidth:forSegment:]'
void _IM_NSSegmentedControl_setWidth_CforSegment_C(NSSegmentedControl *_self, float width, int segment);

// method '-[NSSegmentedControl widthForSegment:]'
float _IM_NSSegmentedControl_widthForSegment_C(NSSegmentedControl *_self, int segment);

// method '-[NSShadow init]'
NSShadow *_IM_NSShadow_init(NSShadow *_self);

// method '-[NSShadow set]'
void _IM_NSShadow_set(NSShadow *_self);

// method '-[NSShadow setShadowBlurRadius:]'
void _IM_NSShadow_setShadowBlurRadius_C(NSShadow *_self, float val);

// method '-[NSShadow setShadowColor:]'
void _IM_NSShadow_setShadowColor_C(NSShadow *_self, NSColor* color);

// method '-[NSShadow setShadowOffset:]'
void _IM_NSShadow_setShadowOffset_C(NSShadow *_self, struct _NSSize offset);

// method '-[NSShadow shadowBlurRadius]'
float _IM_NSShadow_shadowBlurRadius(NSShadow *_self);

// method '-[NSShadow shadowColor]'
NSColor* _IM_NSShadow_shadowColor(NSShadow *_self);

// method '-[NSShadow shadowOffset]'
struct _NSSize _IM_NSShadow_shadowOffset(NSShadow *_self);

// method '-[NSSlider acceptsFirstMouse:]'
BOOL _IM_NSSlider_acceptsFirstMouse_C(NSSlider *_self, NSEvent* theEvent);

// method '-[NSSlider allowsTickMarkValuesOnly]'
BOOL _IM_NSSlider_allowsTickMarkValuesOnly(NSSlider *_self);

// method '-[NSSlider altIncrementValue]'
double _IM_NSSlider_altIncrementValue(NSSlider *_self);

// method '-[NSSlider closestTickMarkValueToValue:]'
double _IM_NSSlider_closestTickMarkValueToValue_C(NSSlider *_self, double value);

// method '-[NSSlider image]'
NSImage* _IM_NSSlider_image(NSSlider *_self);

// method '-[NSSlider indexOfTickMarkAtPoint:]'
int _IM_NSSlider_indexOfTickMarkAtPoint_C(NSSlider *_self, struct _NSPoint point);

// method '-[NSSlider isVertical]'
int _IM_NSSlider_isVertical(NSSlider *_self);

// method '-[NSSlider knobThickness]'
float _IM_NSSlider_knobThickness(NSSlider *_self);

// method '-[NSSlider maxValue]'
double _IM_NSSlider_maxValue(NSSlider *_self);

// method '-[NSSlider minValue]'
double _IM_NSSlider_minValue(NSSlider *_self);

// method '-[NSSlider numberOfTickMarks]'
int _IM_NSSlider_numberOfTickMarks(NSSlider *_self);

// method '-[NSSlider rectOfTickMarkAtIndex:]'
struct _NSRect _IM_NSSlider_rectOfTickMarkAtIndex_C(NSSlider *_self, int index);

// method '-[NSSlider setAllowsTickMarkValuesOnly:]'
void _IM_NSSlider_setAllowsTickMarkValuesOnly_C(NSSlider *_self, BOOL yorn);

// method '-[NSSlider setAltIncrementValue:]'
void _IM_NSSlider_setAltIncrementValue_C(NSSlider *_self, double incValue);

// method '-[NSSlider setImage:]'
void _IM_NSSlider_setImage_C(NSSlider *_self, NSImage* backgroundImage);

// method '-[NSSlider setKnobThickness:]'
void _IM_NSSlider_setKnobThickness_C(NSSlider *_self, float aFloat);

// method '-[NSSlider setMaxValue:]'
void _IM_NSSlider_setMaxValue_C(NSSlider *_self, double aDouble);

// method '-[NSSlider setMinValue:]'
void _IM_NSSlider_setMinValue_C(NSSlider *_self, double aDouble);

// method '-[NSSlider setNumberOfTickMarks:]'
void _IM_NSSlider_setNumberOfTickMarks_C(NSSlider *_self, int count);

// method '-[NSSlider setTickMarkPosition:]'
void _IM_NSSlider_setTickMarkPosition_C(NSSlider *_self, int position);

// method '-[NSSlider setTitle:]'
void _IM_NSSlider_setTitle_C(NSSlider *_self, NSString* aString);

// method '-[NSSlider setTitleCell:]'
void _IM_NSSlider_setTitleCell_C(NSSlider *_self, NSCell* aCell);

// method '-[NSSlider setTitleColor:]'
void _IM_NSSlider_setTitleColor_C(NSSlider *_self, NSColor* newColor);

// method '-[NSSlider setTitleFont:]'
void _IM_NSSlider_setTitleFont_C(NSSlider *_self, NSFont* fontObj);

// method '-[NSSlider tickMarkPosition]'
int _IM_NSSlider_tickMarkPosition(NSSlider *_self);

// method '-[NSSlider tickMarkValueAtIndex:]'
double _IM_NSSlider_tickMarkValueAtIndex_C(NSSlider *_self, int index);

// method '-[NSSlider title]'
NSString* _IM_NSSlider_title(NSSlider *_self);

// method '-[NSSlider titleCell]'
id _IM_NSSlider_titleCell(NSSlider *_self);

// method '-[NSSlider titleColor]'
NSColor* _IM_NSSlider_titleColor(NSSlider *_self);

// method '-[NSSlider titleFont]'
NSFont* _IM_NSSlider_titleFont(NSSlider *_self);

// method '-[NSSliderCell allowsTickMarkValuesOnly]'
BOOL _IM_NSSliderCell_allowsTickMarkValuesOnly(NSSliderCell *_self);

// method '-[NSSliderCell altIncrementValue]'
double _IM_NSSliderCell_altIncrementValue(NSSliderCell *_self);

// method '-[NSSliderCell closestTickMarkValueToValue:]'
double _IM_NSSliderCell_closestTickMarkValueToValue_C(NSSliderCell *_self, double value);

// method '-[NSSliderCell drawBarInside:flipped:]'
void _IM_NSSliderCell_drawBarInside_Cflipped_C(NSSliderCell *_self, struct _NSRect aRect, BOOL flipped);

// method '-[NSSliderCell drawKnob]'
void _IM_NSSliderCell_drawKnob(NSSliderCell *_self);

// method '-[NSSliderCell drawKnob:]'
void _IM_NSSliderCell_drawKnob_C(NSSliderCell *_self, struct _NSRect knobRect);

// method '-[NSSliderCell indexOfTickMarkAtPoint:]'
int _IM_NSSliderCell_indexOfTickMarkAtPoint_C(NSSliderCell *_self, struct _NSPoint point);

// method '-[NSSliderCell isVertical]'
int _IM_NSSliderCell_isVertical(NSSliderCell *_self);

// method '-[NSSliderCell knobRectFlipped:]'
struct _NSRect _IM_NSSliderCell_knobRectFlipped_C(NSSliderCell *_self, BOOL flipped);

// method '-[NSSliderCell knobThickness]'
float _IM_NSSliderCell_knobThickness(NSSliderCell *_self);

// method '-[NSSliderCell maxValue]'
double _IM_NSSliderCell_maxValue(NSSliderCell *_self);

// method '-[NSSliderCell minValue]'
double _IM_NSSliderCell_minValue(NSSliderCell *_self);

// method '-[NSSliderCell numberOfTickMarks]'
int _IM_NSSliderCell_numberOfTickMarks(NSSliderCell *_self);

// method '+[NSSliderCell prefersTrackingUntilMouseUp]'
BOOL _CM_NSSliderCell_prefersTrackingUntilMouseUp(Class _class);

// method '-[NSSliderCell rectOfTickMarkAtIndex:]'
struct _NSRect _IM_NSSliderCell_rectOfTickMarkAtIndex_C(NSSliderCell *_self, int index);

// method '-[NSSliderCell setAllowsTickMarkValuesOnly:]'
void _IM_NSSliderCell_setAllowsTickMarkValuesOnly_C(NSSliderCell *_self, BOOL yorn);

// method '-[NSSliderCell setAltIncrementValue:]'
void _IM_NSSliderCell_setAltIncrementValue_C(NSSliderCell *_self, double incValue);

// method '-[NSSliderCell setKnobThickness:]'
void _IM_NSSliderCell_setKnobThickness_C(NSSliderCell *_self, float aFloat);

// method '-[NSSliderCell setMaxValue:]'
void _IM_NSSliderCell_setMaxValue_C(NSSliderCell *_self, double aDouble);

// method '-[NSSliderCell setMinValue:]'
void _IM_NSSliderCell_setMinValue_C(NSSliderCell *_self, double aDouble);

// method '-[NSSliderCell setNumberOfTickMarks:]'
void _IM_NSSliderCell_setNumberOfTickMarks_C(NSSliderCell *_self, int count);

// method '-[NSSliderCell setSliderType:]'
void _IM_NSSliderCell_setSliderType_C(NSSliderCell *_self, int sliderType);

// method '-[NSSliderCell setTickMarkPosition:]'
void _IM_NSSliderCell_setTickMarkPosition_C(NSSliderCell *_self, int position);

// method '-[NSSliderCell setTitle:]'
void _IM_NSSliderCell_setTitle_C(NSSliderCell *_self, NSString* aString);

// method '-[NSSliderCell setTitleCell:]'
void _IM_NSSliderCell_setTitleCell_C(NSSliderCell *_self, NSCell* aCell);

// method '-[NSSliderCell setTitleColor:]'
void _IM_NSSliderCell_setTitleColor_C(NSSliderCell *_self, NSColor* newColor);

// method '-[NSSliderCell setTitleFont:]'
void _IM_NSSliderCell_setTitleFont_C(NSSliderCell *_self, NSFont* fontObj);

// method '-[NSSliderCell sliderType]'
int _IM_NSSliderCell_sliderType(NSSliderCell *_self);

// method '-[NSSliderCell tickMarkPosition]'
int _IM_NSSliderCell_tickMarkPosition(NSSliderCell *_self);

// method '-[NSSliderCell tickMarkValueAtIndex:]'
double _IM_NSSliderCell_tickMarkValueAtIndex_C(NSSliderCell *_self, int index);

// method '-[NSSliderCell title]'
NSString* _IM_NSSliderCell_title(NSSliderCell *_self);

// method '-[NSSliderCell titleCell]'
id _IM_NSSliderCell_titleCell(NSSliderCell *_self);

// method '-[NSSliderCell titleColor]'
NSColor* _IM_NSSliderCell_titleColor(NSSliderCell *_self);

// method '-[NSSliderCell titleFont]'
NSFont* _IM_NSSliderCell_titleFont(NSSliderCell *_self);

// method '-[NSSliderCell trackRect]'
struct _NSRect _IM_NSSliderCell_trackRect(NSSliderCell *_self);

// method '+[NSSound canInitWithPasteboard:]'
BOOL _CM_NSSound_canInitWithPasteboard_C(Class _class, NSPasteboard* pasteboard);

// method '-[NSSound delegate]'
id _IM_NSSound_delegate(NSSound *_self);

// method '-[NSSound initWithContentsOfFile:byReference:]'
NSSound *_IM_NSSound_initWithContentsOfFile_CbyReference_C(NSSound *_self, NSString* path, BOOL byRef);

// method '-[NSSound initWithContentsOfURL:byReference:]'
NSSound *_IM_NSSound_initWithContentsOfURL_CbyReference_C(NSSound *_self, NSURL* url, BOOL byRef);

// method '-[NSSound initWithData:]'
NSSound *_IM_NSSound_initWithData_C(NSSound *_self, id data);

// method '-[NSSound initWithPasteboard:]'
NSSound *_IM_NSSound_initWithPasteboard_C(NSSound *_self, NSPasteboard* pasteboard);

// method '-[NSSound isPlaying]'
BOOL _IM_NSSound_isPlaying(NSSound *_self);

// method '-[NSSound name]'
NSString* _IM_NSSound_name(NSSound *_self);

// method '-[NSSound pause]'
BOOL _IM_NSSound_pause(NSSound *_self);

// method '-[NSSound play]'
BOOL _IM_NSSound_play(NSSound *_self);

// method '-[NSSound resume]'
BOOL _IM_NSSound_resume(NSSound *_self);

// method '-[NSSound setDelegate:]'
void _IM_NSSound_setDelegate_C(NSSound *_self, id aDelegate);

// method '-[NSSound setName:]'
BOOL _IM_NSSound_setName_C(NSSound *_self, NSString* string);

// method '+[NSSound soundNamed:]'
id _CM_NSSound_soundNamed_C(Class _class, NSString* name);

// method '+[NSSound soundUnfilteredFileTypes]'
id _CM_NSSound_soundUnfilteredFileTypes(Class _class);

// method '+[NSSound soundUnfilteredPasteboardTypes]'
id _CM_NSSound_soundUnfilteredPasteboardTypes(Class _class);

// method '-[NSSound stop]'
BOOL _IM_NSSound_stop(NSSound *_self);

// method '-[NSSound writeToPasteboard:]'
void _IM_NSSound_writeToPasteboard_C(NSSound *_self, NSPasteboard* pasteboard);

// method '-[NSSpeechRecognizer blocksOtherRecognizers]'
BOOL _IM_NSSpeechRecognizer_blocksOtherRecognizers(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer commands]'
id _IM_NSSpeechRecognizer_commands(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer delegate]'
id _IM_NSSpeechRecognizer_delegate(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer displayedCommandsTitle]'
NSString* _IM_NSSpeechRecognizer_displayedCommandsTitle(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer init]'
NSSpeechRecognizer *_IM_NSSpeechRecognizer_init(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer listensInForegroundOnly]'
BOOL _IM_NSSpeechRecognizer_listensInForegroundOnly(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer setBlocksOtherRecognizers:]'
void _IM_NSSpeechRecognizer_setBlocksOtherRecognizers_C(NSSpeechRecognizer *_self, BOOL flag);

// method '-[NSSpeechRecognizer setCommands:]'
void _IM_NSSpeechRecognizer_setCommands_C(NSSpeechRecognizer *_self, id commands);

// method '-[NSSpeechRecognizer setDelegate:]'
void _IM_NSSpeechRecognizer_setDelegate_C(NSSpeechRecognizer *_self, id anObject);

// method '-[NSSpeechRecognizer setDisplayedCommandsTitle:]'
void _IM_NSSpeechRecognizer_setDisplayedCommandsTitle_C(NSSpeechRecognizer *_self, NSString* title);

// method '-[NSSpeechRecognizer setListensInForegroundOnly:]'
void _IM_NSSpeechRecognizer_setListensInForegroundOnly_C(NSSpeechRecognizer *_self, BOOL flag);

// method '-[NSSpeechRecognizer startListening]'
void _IM_NSSpeechRecognizer_startListening(NSSpeechRecognizer *_self);

// method '-[NSSpeechRecognizer stopListening]'
void _IM_NSSpeechRecognizer_stopListening(NSSpeechRecognizer *_self);

// method '+[NSSpeechSynthesizer attributesForVoice:]'
id _CM_NSSpeechSynthesizer_attributesForVoice_C(Class _class, NSString* voice);

// method '+[NSSpeechSynthesizer availableVoices]'
id _CM_NSSpeechSynthesizer_availableVoices(Class _class);

// method '+[NSSpeechSynthesizer defaultVoice]'
NSString* _CM_NSSpeechSynthesizer_defaultVoice(Class _class);

// method '-[NSSpeechSynthesizer delegate]'
id _IM_NSSpeechSynthesizer_delegate(NSSpeechSynthesizer *_self);

// method '-[NSSpeechSynthesizer initWithVoice:]'
NSSpeechSynthesizer *_IM_NSSpeechSynthesizer_initWithVoice_C(NSSpeechSynthesizer *_self, NSString* voice);

// method '+[NSSpeechSynthesizer isAnyApplicationSpeaking]'
BOOL _CM_NSSpeechSynthesizer_isAnyApplicationSpeaking(Class _class);

// method '-[NSSpeechSynthesizer isSpeaking]'
BOOL _IM_NSSpeechSynthesizer_isSpeaking(NSSpeechSynthesizer *_self);

// method '-[NSSpeechSynthesizer setDelegate:]'
void _IM_NSSpeechSynthesizer_setDelegate_C(NSSpeechSynthesizer *_self, id anObject);

// method '-[NSSpeechSynthesizer setUsesFeedbackWindow:]'
void _IM_NSSpeechSynthesizer_setUsesFeedbackWindow_C(NSSpeechSynthesizer *_self, BOOL flag);

// method '-[NSSpeechSynthesizer setVoice:]'
BOOL _IM_NSSpeechSynthesizer_setVoice_C(NSSpeechSynthesizer *_self, NSString* voice);

// method '-[NSSpeechSynthesizer startSpeakingString:]'
BOOL _IM_NSSpeechSynthesizer_startSpeakingString_C(NSSpeechSynthesizer *_self, NSString* string);

// method '-[NSSpeechSynthesizer startSpeakingString:toURL:]'
BOOL _IM_NSSpeechSynthesizer_startSpeakingString_CtoURL_C(NSSpeechSynthesizer *_self, NSString* string, NSURL* url);

// method '-[NSSpeechSynthesizer stopSpeaking]'
void _IM_NSSpeechSynthesizer_stopSpeaking(NSSpeechSynthesizer *_self);

// method '-[NSSpeechSynthesizer usesFeedbackWindow]'
BOOL _IM_NSSpeechSynthesizer_usesFeedbackWindow(NSSpeechSynthesizer *_self);

// method '-[NSSpeechSynthesizer voice]'
NSString* _IM_NSSpeechSynthesizer_voice(NSSpeechSynthesizer *_self);

// method '-[NSSpellChecker accessoryView]'
NSView* _IM_NSSpellChecker_accessoryView(NSSpellChecker *_self);

// method '-[NSSpellChecker checkSpellingOfString:startingAt:]'
struct _NSRange _IM_NSSpellChecker_checkSpellingOfString_CstartingAt_C(NSSpellChecker *_self, NSString* stringToCheck, int startingOffset);

// method '-[NSSpellChecker checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:]'
struct _NSRange _IM_NSSpellChecker_checkSpellingOfString_CstartingAt_Clanguage_Cwrap_CinSpellDocumentWithTag_CwordCount_C(NSSpellChecker *_self, NSString* stringToCheck, int startingOffset, NSString* language, BOOL wrapFlag, int tag, int *wordCount);

// method '-[NSSpellChecker closeSpellDocumentWithTag:]'
void _IM_NSSpellChecker_closeSpellDocumentWithTag_C(NSSpellChecker *_self, int tag);

// method '-[NSSpellChecker completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:]'
id _IM_NSSpellChecker_completionsForPartialWordRange_CinString_Clanguage_CinSpellDocumentWithTag_C(NSSpellChecker *_self, struct _NSRange range, NSString* string, NSString* language, int tag);

// method '-[NSSpellChecker countWordsInString:language:]'
int _IM_NSSpellChecker_countWordsInString_Clanguage_C(NSSpellChecker *_self, NSString* stringToCount, NSString* language);

// method '-[NSSpellChecker guessesForWord:]'
id _IM_NSSpellChecker_guessesForWord_C(NSSpellChecker *_self, NSString* word);

// method '-[NSSpellChecker ignoreWord:inSpellDocumentWithTag:]'
void _IM_NSSpellChecker_ignoreWord_CinSpellDocumentWithTag_C(NSSpellChecker *_self, NSString* wordToIgnore, int tag);

// method '-[NSSpellChecker ignoredWordsInSpellDocumentWithTag:]'
id _IM_NSSpellChecker_ignoredWordsInSpellDocumentWithTag_C(NSSpellChecker *_self, int tag);

// method '-[NSSpellChecker language]'
NSString* _IM_NSSpellChecker_language(NSSpellChecker *_self);

// method '-[NSSpellChecker setAccessoryView:]'
void _IM_NSSpellChecker_setAccessoryView_C(NSSpellChecker *_self, NSView* aView);

// method '-[NSSpellChecker setIgnoredWords:inSpellDocumentWithTag:]'
void _IM_NSSpellChecker_setIgnoredWords_CinSpellDocumentWithTag_C(NSSpellChecker *_self, id words, int tag);

// method '-[NSSpellChecker setLanguage:]'
BOOL _IM_NSSpellChecker_setLanguage_C(NSSpellChecker *_self, NSString* language);

// method '-[NSSpellChecker setWordFieldStringValue:]'
void _IM_NSSpellChecker_setWordFieldStringValue_C(NSSpellChecker *_self, NSString* aString);

// method '+[NSSpellChecker sharedSpellChecker]'
NSSpellChecker* _CM_NSSpellChecker_sharedSpellChecker(Class _class);

// method '+[NSSpellChecker sharedSpellCheckerExists]'
BOOL _CM_NSSpellChecker_sharedSpellCheckerExists(Class _class);

// method '-[NSSpellChecker spellingPanel]'
NSPanel* _IM_NSSpellChecker_spellingPanel(NSSpellChecker *_self);

// method '+[NSSpellChecker uniqueSpellDocumentTag]'
int _CM_NSSpellChecker_uniqueSpellDocumentTag(Class _class);

// method '-[NSSpellChecker updateSpellingPanelWithMisspelledWord:]'
void _IM_NSSpellChecker_updateSpellingPanelWithMisspelledWord_C(NSSpellChecker *_self, NSString* word);

// method '-[NSSplitView adjustSubviews]'
void _IM_NSSplitView_adjustSubviews(NSSplitView *_self);

// method '-[NSSplitView delegate]'
id _IM_NSSplitView_delegate(NSSplitView *_self);

// method '-[NSSplitView dividerThickness]'
float _IM_NSSplitView_dividerThickness(NSSplitView *_self);

// method '-[NSSplitView drawDividerInRect:]'
void _IM_NSSplitView_drawDividerInRect_C(NSSplitView *_self, struct _NSRect aRect);

// method '-[NSSplitView isPaneSplitter]'
BOOL _IM_NSSplitView_isPaneSplitter(NSSplitView *_self);

// method '-[NSSplitView isSubviewCollapsed:]'
BOOL _IM_NSSplitView_isSubviewCollapsed_C(NSSplitView *_self, NSView* subview);

// method '-[NSSplitView isVertical]'
BOOL _IM_NSSplitView_isVertical(NSSplitView *_self);

// method '-[NSSplitView setDelegate:]'
void _IM_NSSplitView_setDelegate_C(NSSplitView *_self, id anObject);

// method '-[NSSplitView setIsPaneSplitter:]'
void _IM_NSSplitView_setIsPaneSplitter_C(NSSplitView *_self, BOOL flag);

// method '-[NSSplitView setVertical:]'
void _IM_NSSplitView_setVertical_C(NSSplitView *_self, BOOL flag);

// method '-[NSStatusBar isVertical]'
BOOL _IM_NSStatusBar_isVertical(NSStatusBar *_self);

// method '-[NSStatusBar removeStatusItem:]'
void _IM_NSStatusBar_removeStatusItem_C(NSStatusBar *_self, NSStatusItem* item);

// method '-[NSStatusBar statusItemWithLength:]'
NSStatusItem* _IM_NSStatusBar_statusItemWithLength_C(NSStatusBar *_self, float length);

// method '+[NSStatusBar systemStatusBar]'
NSStatusBar* _CM_NSStatusBar_systemStatusBar(Class _class);

// method '-[NSStatusBar thickness]'
float _IM_NSStatusBar_thickness(NSStatusBar *_self);

// method '-[NSStatusItem action]'
SEL _IM_NSStatusItem_action(NSStatusItem *_self);

// method '-[NSStatusItem alternateImage]'
NSImage* _IM_NSStatusItem_alternateImage(NSStatusItem *_self);

// method '-[NSStatusItem attributedTitle]'
NSAttributedString* _IM_NSStatusItem_attributedTitle(NSStatusItem *_self);

// method '-[NSStatusItem doubleAction]'
SEL _IM_NSStatusItem_doubleAction(NSStatusItem *_self);

// method '-[NSStatusItem drawStatusBarBackgroundInRect:withHighlight:]'
void _IM_NSStatusItem_drawStatusBarBackgroundInRect_CwithHighlight_C(NSStatusItem *_self, struct _NSRect rect, BOOL highlight);

// method '-[NSStatusItem highlightMode]'
BOOL _IM_NSStatusItem_highlightMode(NSStatusItem *_self);

// method '-[NSStatusItem image]'
NSImage* _IM_NSStatusItem_image(NSStatusItem *_self);

// method '-[NSStatusItem isEnabled]'
BOOL _IM_NSStatusItem_isEnabled(NSStatusItem *_self);

// method '-[NSStatusItem length]'
float _IM_NSStatusItem_length(NSStatusItem *_self);

// method '-[NSStatusItem menu]'
NSMenu* _IM_NSStatusItem_menu(NSStatusItem *_self);

// method '-[NSStatusItem popUpStatusItemMenu:]'
void _IM_NSStatusItem_popUpStatusItemMenu_C(NSStatusItem *_self, NSMenu* menu);

// method '-[NSStatusItem sendActionOn:]'
void _IM_NSStatusItem_sendActionOn_C(NSStatusItem *_self, int mask);

// method '-[NSStatusItem setAction:]'
void _IM_NSStatusItem_setAction_C(NSStatusItem *_self, SEL action);

// method '-[NSStatusItem setAlternateImage:]'
void _IM_NSStatusItem_setAlternateImage_C(NSStatusItem *_self, NSImage* image);

// method '-[NSStatusItem setAttributedTitle:]'
void _IM_NSStatusItem_setAttributedTitle_C(NSStatusItem *_self, NSAttributedString* title);

// method '-[NSStatusItem setDoubleAction:]'
void _IM_NSStatusItem_setDoubleAction_C(NSStatusItem *_self, SEL action);

// method '-[NSStatusItem setEnabled:]'
void _IM_NSStatusItem_setEnabled_C(NSStatusItem *_self, BOOL enabled);

// method '-[NSStatusItem setHighlightMode:]'
void _IM_NSStatusItem_setHighlightMode_C(NSStatusItem *_self, BOOL highlightMode);

// method '-[NSStatusItem setImage:]'
void _IM_NSStatusItem_setImage_C(NSStatusItem *_self, NSImage* image);

// method '-[NSStatusItem setLength:]'
void _IM_NSStatusItem_setLength_C(NSStatusItem *_self, float length);

// method '-[NSStatusItem setMenu:]'
void _IM_NSStatusItem_setMenu_C(NSStatusItem *_self, NSMenu* menu);

// method '-[NSStatusItem setTarget:]'
void _IM_NSStatusItem_setTarget_C(NSStatusItem *_self, id target);

// method '-[NSStatusItem setTitle:]'
void _IM_NSStatusItem_setTitle_C(NSStatusItem *_self, NSString* title);

// method '-[NSStatusItem setToolTip:]'
void _IM_NSStatusItem_setToolTip_C(NSStatusItem *_self, NSString* toolTip);

// method '-[NSStatusItem setView:]'
void _IM_NSStatusItem_setView_C(NSStatusItem *_self, NSView* view);

// method '-[NSStatusItem statusBar]'
NSStatusBar* _IM_NSStatusItem_statusBar(NSStatusItem *_self);

// method '-[NSStatusItem target]'
id _IM_NSStatusItem_target(NSStatusItem *_self);

// method '-[NSStatusItem title]'
NSString* _IM_NSStatusItem_title(NSStatusItem *_self);

// method '-[NSStatusItem toolTip]'
NSString* _IM_NSStatusItem_toolTip(NSStatusItem *_self);

// method '-[NSStatusItem view]'
NSView* _IM_NSStatusItem_view(NSStatusItem *_self);

// method '-[NSStepper autorepeat]'
BOOL _IM_NSStepper_autorepeat(NSStepper *_self);

// method '-[NSStepper increment]'
double _IM_NSStepper_increment(NSStepper *_self);

// method '-[NSStepper maxValue]'
double _IM_NSStepper_maxValue(NSStepper *_self);

// method '-[NSStepper minValue]'
double _IM_NSStepper_minValue(NSStepper *_self);

// method '-[NSStepper setAutorepeat:]'
void _IM_NSStepper_setAutorepeat_C(NSStepper *_self, BOOL autorepeat);

// method '-[NSStepper setIncrement:]'
void _IM_NSStepper_setIncrement_C(NSStepper *_self, double increment);

// method '-[NSStepper setMaxValue:]'
void _IM_NSStepper_setMaxValue_C(NSStepper *_self, double maxValue);

// method '-[NSStepper setMinValue:]'
void _IM_NSStepper_setMinValue_C(NSStepper *_self, double minValue);

// method '-[NSStepper setValueWraps:]'
void _IM_NSStepper_setValueWraps_C(NSStepper *_self, BOOL valueWraps);

// method '-[NSStepper valueWraps]'
BOOL _IM_NSStepper_valueWraps(NSStepper *_self);

// method '-[NSStepperCell autorepeat]'
BOOL _IM_NSStepperCell_autorepeat(NSStepperCell *_self);

// method '-[NSStepperCell increment]'
double _IM_NSStepperCell_increment(NSStepperCell *_self);

// method '-[NSStepperCell maxValue]'
double _IM_NSStepperCell_maxValue(NSStepperCell *_self);

// method '-[NSStepperCell minValue]'
double _IM_NSStepperCell_minValue(NSStepperCell *_self);

// method '-[NSStepperCell setAutorepeat:]'
void _IM_NSStepperCell_setAutorepeat_C(NSStepperCell *_self, BOOL autorepeat);

// method '-[NSStepperCell setIncrement:]'
void _IM_NSStepperCell_setIncrement_C(NSStepperCell *_self, double increment);

// method '-[NSStepperCell setMaxValue:]'
void _IM_NSStepperCell_setMaxValue_C(NSStepperCell *_self, double maxValue);

// method '-[NSStepperCell setMinValue:]'
void _IM_NSStepperCell_setMinValue_C(NSStepperCell *_self, double minValue);

// method '-[NSStepperCell setValueWraps:]'
void _IM_NSStepperCell_setValueWraps_C(NSStepperCell *_self, BOOL valueWraps);

// method '-[NSStepperCell valueWraps]'
BOOL _IM_NSStepperCell_valueWraps(NSStepperCell *_self);

// method '-[NSString boundingRectWithSize:options:attributes:]'
struct _NSRect _IM_NSString_boundingRectWithSize_Coptions_Cattributes_C(NSString *_self, struct _NSSize size, int options, id attributes);

// method '-[NSString drawAtPoint:withAttributes:]'
void _IM_NSString_drawAtPoint_CwithAttributes_C(NSString *_self, struct _NSPoint point, id attrs);

// method '-[NSString drawInRect:withAttributes:]'
void _IM_NSString_drawInRect_CwithAttributes_C(NSString *_self, struct _NSRect rect, id attrs);

// method '-[NSString drawWithRect:options:attributes:]'
void _IM_NSString_drawWithRect_Coptions_Cattributes_C(NSString *_self, struct _NSRect rect, int options, id attributes);

// method '-[NSString sizeWithAttributes:]'
struct _NSSize _IM_NSString_sizeWithAttributes_C(NSString *_self, id attrs);

// method '-[NSTabView addTabViewItem:]'
void _IM_NSTabView_addTabViewItem_C(NSTabView *_self, NSTabViewItem* tabViewItem);

// method '-[NSTabView allowsTruncatedLabels]'
BOOL _IM_NSTabView_allowsTruncatedLabels(NSTabView *_self);

// method '-[NSTabView contentRect]'
struct _NSRect _IM_NSTabView_contentRect(NSTabView *_self);

// method '-[NSTabView controlSize]'
int _IM_NSTabView_controlSize(NSTabView *_self);

// method '-[NSTabView controlTint]'
int _IM_NSTabView_controlTint(NSTabView *_self);

// method '-[NSTabView delegate]'
id _IM_NSTabView_delegate(NSTabView *_self);

// method '-[NSTabView drawsBackground]'
BOOL _IM_NSTabView_drawsBackground(NSTabView *_self);

// method '-[NSTabView font]'
NSFont* _IM_NSTabView_font(NSTabView *_self);

// method '-[NSTabView indexOfTabViewItem:]'
int _IM_NSTabView_indexOfTabViewItem_C(NSTabView *_self, NSTabViewItem* tabViewItem);

// method '-[NSTabView indexOfTabViewItemWithIdentifier:]'
int _IM_NSTabView_indexOfTabViewItemWithIdentifier_C(NSTabView *_self, id identifier);

// method '-[NSTabView insertTabViewItem:atIndex:]'
void _IM_NSTabView_insertTabViewItem_CatIndex_C(NSTabView *_self, NSTabViewItem* tabViewItem, int index);

// method '-[NSTabView minimumSize]'
struct _NSSize _IM_NSTabView_minimumSize(NSTabView *_self);

// method '-[NSTabView numberOfTabViewItems]'
int _IM_NSTabView_numberOfTabViewItems(NSTabView *_self);

// method '-[NSTabView removeTabViewItem:]'
void _IM_NSTabView_removeTabViewItem_C(NSTabView *_self, NSTabViewItem* tabViewItem);

// method '-[NSTabView selectFirstTabViewItem:]'
void _IM_NSTabView_selectFirstTabViewItem_C(NSTabView *_self, id sender);

// method '-[NSTabView selectLastTabViewItem:]'
void _IM_NSTabView_selectLastTabViewItem_C(NSTabView *_self, id sender);

// method '-[NSTabView selectNextTabViewItem:]'
void _IM_NSTabView_selectNextTabViewItem_C(NSTabView *_self, id sender);

// method '-[NSTabView selectPreviousTabViewItem:]'
void _IM_NSTabView_selectPreviousTabViewItem_C(NSTabView *_self, id sender);

// method '-[NSTabView selectTabViewItem:]'
void _IM_NSTabView_selectTabViewItem_C(NSTabView *_self, NSTabViewItem* tabViewItem);

// method '-[NSTabView selectTabViewItemAtIndex:]'
void _IM_NSTabView_selectTabViewItemAtIndex_C(NSTabView *_self, int index);

// method '-[NSTabView selectTabViewItemWithIdentifier:]'
void _IM_NSTabView_selectTabViewItemWithIdentifier_C(NSTabView *_self, id identifier);

// method '-[NSTabView selectedTabViewItem]'
NSTabViewItem* _IM_NSTabView_selectedTabViewItem(NSTabView *_self);

// method '-[NSTabView setAllowsTruncatedLabels:]'
void _IM_NSTabView_setAllowsTruncatedLabels_C(NSTabView *_self, BOOL allowTruncatedLabels);

// method '-[NSTabView setControlSize:]'
void _IM_NSTabView_setControlSize_C(NSTabView *_self, int controlSize);

// method '-[NSTabView setControlTint:]'
void _IM_NSTabView_setControlTint_C(NSTabView *_self, int controlTint);

// method '-[NSTabView setDelegate:]'
void _IM_NSTabView_setDelegate_C(NSTabView *_self, id anObject);

// method '-[NSTabView setDrawsBackground:]'
void _IM_NSTabView_setDrawsBackground_C(NSTabView *_self, BOOL flag);

// method '-[NSTabView setFont:]'
void _IM_NSTabView_setFont_C(NSTabView *_self, NSFont* font);

// method '-[NSTabView setTabViewType:]'
void _IM_NSTabView_setTabViewType_C(NSTabView *_self, int tabViewType);

// method '-[NSTabView tabViewItemAtIndex:]'
NSTabViewItem* _IM_NSTabView_tabViewItemAtIndex_C(NSTabView *_self, int index);

// method '-[NSTabView tabViewItemAtPoint:]'
NSTabViewItem* _IM_NSTabView_tabViewItemAtPoint_C(NSTabView *_self, struct _NSPoint point);

// method '-[NSTabView tabViewItems]'
id _IM_NSTabView_tabViewItems(NSTabView *_self);

// method '-[NSTabView tabViewType]'
int _IM_NSTabView_tabViewType(NSTabView *_self);

// method '-[NSTabView takeSelectedTabViewItemFromSender:]'
void _IM_NSTabView_takeSelectedTabViewItemFromSender_C(NSTabView *_self, id sender);

// method '-[NSTabViewItem color]'
NSColor* _IM_NSTabViewItem_color(NSTabViewItem *_self);

// method '-[NSTabViewItem drawLabel:inRect:]'
void _IM_NSTabViewItem_drawLabel_CinRect_C(NSTabViewItem *_self, BOOL shouldTruncateLabel, struct _NSRect labelRect);

// method '-[NSTabViewItem identifier]'
id _IM_NSTabViewItem_identifier(NSTabViewItem *_self);

// method '-[NSTabViewItem initWithIdentifier:]'
NSTabViewItem *_IM_NSTabViewItem_initWithIdentifier_C(NSTabViewItem *_self, id identifier);

// method '-[NSTabViewItem initialFirstResponder]'
id _IM_NSTabViewItem_initialFirstResponder(NSTabViewItem *_self);

// method '-[NSTabViewItem label]'
NSString* _IM_NSTabViewItem_label(NSTabViewItem *_self);

// method '-[NSTabViewItem setColor:]'
void _IM_NSTabViewItem_setColor_C(NSTabViewItem *_self, NSColor* color);

// method '-[NSTabViewItem setIdentifier:]'
void _IM_NSTabViewItem_setIdentifier_C(NSTabViewItem *_self, id identifier);

// method '-[NSTabViewItem setInitialFirstResponder:]'
void _IM_NSTabViewItem_setInitialFirstResponder_C(NSTabViewItem *_self, NSView* view);

// method '-[NSTabViewItem setLabel:]'
void _IM_NSTabViewItem_setLabel_C(NSTabViewItem *_self, NSString* label);

// method '-[NSTabViewItem setView:]'
void _IM_NSTabViewItem_setView_C(NSTabViewItem *_self, NSView* view);

// method '-[NSTabViewItem sizeOfLabel:]'
struct _NSSize _IM_NSTabViewItem_sizeOfLabel_C(NSTabViewItem *_self, BOOL computeMin);

// method '-[NSTabViewItem tabState]'
int _IM_NSTabViewItem_tabState(NSTabViewItem *_self);

// method '-[NSTabViewItem tabView]'
NSTabView* _IM_NSTabViewItem_tabView(NSTabViewItem *_self);

// method '-[NSTabViewItem view]'
id _IM_NSTabViewItem_view(NSTabViewItem *_self);

// method '-[NSTableColumn dataCell]'
id _IM_NSTableColumn_dataCell(NSTableColumn *_self);

// method '-[NSTableColumn dataCellForRow:]'
id _IM_NSTableColumn_dataCellForRow_C(NSTableColumn *_self, int row);

// method '-[NSTableColumn headerCell]'
id _IM_NSTableColumn_headerCell(NSTableColumn *_self);

// method '-[NSTableColumn identifier]'
id _IM_NSTableColumn_identifier(NSTableColumn *_self);

// method '-[NSTableColumn initWithIdentifier:]'
NSTableColumn *_IM_NSTableColumn_initWithIdentifier_C(NSTableColumn *_self, id identifier);

// method '-[NSTableColumn isEditable]'
BOOL _IM_NSTableColumn_isEditable(NSTableColumn *_self);

// method '-[NSTableColumn isResizable]'
BOOL _IM_NSTableColumn_isResizable(NSTableColumn *_self);

// method '-[NSTableColumn maxWidth]'
float _IM_NSTableColumn_maxWidth(NSTableColumn *_self);

// method '-[NSTableColumn minWidth]'
float _IM_NSTableColumn_minWidth(NSTableColumn *_self);

// method '-[NSTableColumn resizingMask]'
unsigned int _IM_NSTableColumn_resizingMask(NSTableColumn *_self);

// method '-[NSTableColumn setDataCell:]'
void _IM_NSTableColumn_setDataCell_C(NSTableColumn *_self, NSCell* cell);

// method '-[NSTableColumn setEditable:]'
void _IM_NSTableColumn_setEditable_C(NSTableColumn *_self, BOOL flag);

// method '-[NSTableColumn setHeaderCell:]'
void _IM_NSTableColumn_setHeaderCell_C(NSTableColumn *_self, NSCell* cell);

// method '-[NSTableColumn setIdentifier:]'
void _IM_NSTableColumn_setIdentifier_C(NSTableColumn *_self, id identifier);

// method '-[NSTableColumn setMaxWidth:]'
void _IM_NSTableColumn_setMaxWidth_C(NSTableColumn *_self, float maxWidth);

// method '-[NSTableColumn setMinWidth:]'
void _IM_NSTableColumn_setMinWidth_C(NSTableColumn *_self, float minWidth);

// method '-[NSTableColumn setResizable:]'
void _IM_NSTableColumn_setResizable_C(NSTableColumn *_self, BOOL flag);

// method '-[NSTableColumn setResizingMask:]'
void _IM_NSTableColumn_setResizingMask_C(NSTableColumn *_self, unsigned int resizingMask);

// method '-[NSTableColumn setSortDescriptorPrototype:]'
void _IM_NSTableColumn_setSortDescriptorPrototype_C(NSTableColumn *_self, id sortDescriptor);

// method '-[NSTableColumn setTableView:]'
void _IM_NSTableColumn_setTableView_C(NSTableColumn *_self, NSTableView* tableView);

// method '-[NSTableColumn setWidth:]'
void _IM_NSTableColumn_setWidth_C(NSTableColumn *_self, float width);

// method '-[NSTableColumn sizeToFit]'
void _IM_NSTableColumn_sizeToFit(NSTableColumn *_self);

// method '-[NSTableColumn sortDescriptorPrototype]'
id _IM_NSTableColumn_sortDescriptorPrototype(NSTableColumn *_self);

// method '-[NSTableColumn tableView]'
NSTableView* _IM_NSTableColumn_tableView(NSTableColumn *_self);

// method '-[NSTableColumn width]'
float _IM_NSTableColumn_width(NSTableColumn *_self);

// method '-[NSTableHeaderCell drawSortIndicatorWithFrame:inView:ascending:priority:]'
void _IM_NSTableHeaderCell_drawSortIndicatorWithFrame_CinView_Cascending_Cpriority_C(NSTableHeaderCell *_self, struct _NSRect cellFrame, NSView* controlView, BOOL ascending, int priority);

// method '-[NSTableHeaderCell sortIndicatorRectForBounds:]'
struct _NSRect _IM_NSTableHeaderCell_sortIndicatorRectForBounds_C(NSTableHeaderCell *_self, struct _NSRect theRect);

// method '-[NSTableHeaderView columnAtPoint:]'
int _IM_NSTableHeaderView_columnAtPoint_C(NSTableHeaderView *_self, struct _NSPoint point);

// method '-[NSTableHeaderView draggedColumn]'
int _IM_NSTableHeaderView_draggedColumn(NSTableHeaderView *_self);

// method '-[NSTableHeaderView draggedDistance]'
float _IM_NSTableHeaderView_draggedDistance(NSTableHeaderView *_self);

// method '-[NSTableHeaderView headerRectOfColumn:]'
struct _NSRect _IM_NSTableHeaderView_headerRectOfColumn_C(NSTableHeaderView *_self, int column);

// method '-[NSTableHeaderView resizedColumn]'
int _IM_NSTableHeaderView_resizedColumn(NSTableHeaderView *_self);

// method '-[NSTableHeaderView setTableView:]'
void _IM_NSTableHeaderView_setTableView_C(NSTableHeaderView *_self, NSTableView* tableView);

// method '-[NSTableHeaderView tableView]'
NSTableView* _IM_NSTableHeaderView_tableView(NSTableHeaderView *_self);

// method '-[NSTableView addTableColumn:]'
void _IM_NSTableView_addTableColumn_C(NSTableView *_self, NSTableColumn* column);

// method '-[NSTableView allowsColumnReordering]'
BOOL _IM_NSTableView_allowsColumnReordering(NSTableView *_self);

// method '-[NSTableView allowsColumnResizing]'
BOOL _IM_NSTableView_allowsColumnResizing(NSTableView *_self);

// method '-[NSTableView allowsColumnSelection]'
BOOL _IM_NSTableView_allowsColumnSelection(NSTableView *_self);

// method '-[NSTableView allowsEmptySelection]'
BOOL _IM_NSTableView_allowsEmptySelection(NSTableView *_self);

// method '-[NSTableView allowsMultipleSelection]'
BOOL _IM_NSTableView_allowsMultipleSelection(NSTableView *_self);

// method '-[NSTableView autoresizesAllColumnsToFit]'
BOOL _IM_NSTableView_autoresizesAllColumnsToFit(NSTableView *_self);

// method '-[NSTableView autosaveName]'
NSString* _IM_NSTableView_autosaveName(NSTableView *_self);

// method '-[NSTableView autosaveTableColumns]'
BOOL _IM_NSTableView_autosaveTableColumns(NSTableView *_self);

// method '-[NSTableView backgroundColor]'
NSColor* _IM_NSTableView_backgroundColor(NSTableView *_self);

// method '-[NSTableView canDragRowsWithIndexes:atPoint:]'
BOOL _IM_NSTableView_canDragRowsWithIndexes_CatPoint_C(NSTableView *_self, id rowIndexes, struct _NSPoint mouseDownPoint);

// method '-[NSTableView clickedColumn]'
int _IM_NSTableView_clickedColumn(NSTableView *_self);

// method '-[NSTableView clickedRow]'
int _IM_NSTableView_clickedRow(NSTableView *_self);

// method '-[NSTableView columnAtPoint:]'
int _IM_NSTableView_columnAtPoint_C(NSTableView *_self, struct _NSPoint point);

// method '-[NSTableView columnAutoresizingStyle]'
int _IM_NSTableView_columnAutoresizingStyle(NSTableView *_self);

// method '-[NSTableView columnWithIdentifier:]'
int _IM_NSTableView_columnWithIdentifier_C(NSTableView *_self, id identifier);

// method '-[NSTableView columnsInRect:]'
struct _NSRange _IM_NSTableView_columnsInRect_C(NSTableView *_self, struct _NSRect rect);

// method '-[NSTableView cornerView]'
NSView* _IM_NSTableView_cornerView(NSTableView *_self);

// method '-[NSTableView dataSource]'
id _IM_NSTableView_dataSource(NSTableView *_self);

// method '-[NSTableView delegate]'
id _IM_NSTableView_delegate(NSTableView *_self);

// method '-[NSTableView deselectAll:]'
void _IM_NSTableView_deselectAll_C(NSTableView *_self, id sender);

// method '-[NSTableView deselectColumn:]'
void _IM_NSTableView_deselectColumn_C(NSTableView *_self, int column);

// method '-[NSTableView deselectRow:]'
void _IM_NSTableView_deselectRow_C(NSTableView *_self, int row);

// method '-[NSTableView doubleAction]'
SEL _IM_NSTableView_doubleAction(NSTableView *_self);

// method '-[NSTableView dragImageForRows:event:dragImageOffset:]'
NSImage* _IM_NSTableView_dragImageForRows_Cevent_CdragImageOffset_C(NSTableView *_self, id dragRows, NSEvent* dragEvent, struct _NSPoint *dragImageOffset);

// method '-[NSTableView dragImageForRowsWithIndexes:tableColumns:event:offset:]'
NSImage* _IM_NSTableView_dragImageForRowsWithIndexes_CtableColumns_Cevent_Coffset_C(NSTableView *_self, id dragRows, id tableColumns, NSEvent* dragEvent, struct _NSPoint *dragImageOffset);

// method '-[NSTableView drawBackgroundInClipRect:]'
void _IM_NSTableView_drawBackgroundInClipRect_C(NSTableView *_self, struct _NSRect clipRect);

// method '-[NSTableView drawGridInClipRect:]'
void _IM_NSTableView_drawGridInClipRect_C(NSTableView *_self, struct _NSRect rect);

// method '-[NSTableView drawRow:clipRect:]'
void _IM_NSTableView_drawRow_CclipRect_C(NSTableView *_self, int row, struct _NSRect rect);

// method '-[NSTableView drawsGrid]'
BOOL _IM_NSTableView_drawsGrid(NSTableView *_self);

// method '-[NSTableView editColumn:row:withEvent:select:]'
void _IM_NSTableView_editColumn_Crow_CwithEvent_Cselect_C(NSTableView *_self, int column, int row, NSEvent* theEvent, BOOL select);

// method '-[NSTableView editedColumn]'
int _IM_NSTableView_editedColumn(NSTableView *_self);

// method '-[NSTableView editedRow]'
int _IM_NSTableView_editedRow(NSTableView *_self);

// method '-[NSTableView frameOfCellAtColumn:row:]'
struct _NSRect _IM_NSTableView_frameOfCellAtColumn_Crow_C(NSTableView *_self, int column, int row);

// method '-[NSTableView gridColor]'
NSColor* _IM_NSTableView_gridColor(NSTableView *_self);

// method '-[NSTableView gridStyleMask]'
unsigned int _IM_NSTableView_gridStyleMask(NSTableView *_self);

// method '-[NSTableView headerView]'
NSTableHeaderView* _IM_NSTableView_headerView(NSTableView *_self);

// method '-[NSTableView highlightSelectionInClipRect:]'
void _IM_NSTableView_highlightSelectionInClipRect_C(NSTableView *_self, struct _NSRect rect);

// method '-[NSTableView highlightedTableColumn]'
NSTableColumn* _IM_NSTableView_highlightedTableColumn(NSTableView *_self);

// method '-[NSTableView indicatorImageInTableColumn:]'
NSImage* _IM_NSTableView_indicatorImageInTableColumn_C(NSTableView *_self, NSTableColumn* tc);

// method '-[NSTableView intercellSpacing]'
struct _NSSize _IM_NSTableView_intercellSpacing(NSTableView *_self);

// method '-[NSTableView isColumnSelected:]'
BOOL _IM_NSTableView_isColumnSelected_C(NSTableView *_self, int row);

// method '-[NSTableView isRowSelected:]'
BOOL _IM_NSTableView_isRowSelected_C(NSTableView *_self, int row);

// method '-[NSTableView moveColumn:toColumn:]'
void _IM_NSTableView_moveColumn_CtoColumn_C(NSTableView *_self, int column, int newIndex);

// method '-[NSTableView noteHeightOfRowsWithIndexesChanged:]'
void _IM_NSTableView_noteHeightOfRowsWithIndexesChanged_C(NSTableView *_self, id indexSet);

// method '-[NSTableView noteNumberOfRowsChanged]'
void _IM_NSTableView_noteNumberOfRowsChanged(NSTableView *_self);

// method '-[NSTableView numberOfColumns]'
int _IM_NSTableView_numberOfColumns(NSTableView *_self);

// method '-[NSTableView numberOfRows]'
int _IM_NSTableView_numberOfRows(NSTableView *_self);

// method '-[NSTableView numberOfSelectedColumns]'
int _IM_NSTableView_numberOfSelectedColumns(NSTableView *_self);

// method '-[NSTableView numberOfSelectedRows]'
int _IM_NSTableView_numberOfSelectedRows(NSTableView *_self);

// method '-[NSTableView rectOfColumn:]'
struct _NSRect _IM_NSTableView_rectOfColumn_C(NSTableView *_self, int column);

// method '-[NSTableView rectOfRow:]'
struct _NSRect _IM_NSTableView_rectOfRow_C(NSTableView *_self, int row);

// method '-[NSTableView reloadData]'
void _IM_NSTableView_reloadData(NSTableView *_self);

// method '-[NSTableView removeTableColumn:]'
void _IM_NSTableView_removeTableColumn_C(NSTableView *_self, NSTableColumn* column);

// method '-[NSTableView rowAtPoint:]'
int _IM_NSTableView_rowAtPoint_C(NSTableView *_self, struct _NSPoint point);

// method '-[NSTableView rowHeight]'
float _IM_NSTableView_rowHeight(NSTableView *_self);

// method '-[NSTableView rowsInRect:]'
struct _NSRange _IM_NSTableView_rowsInRect_C(NSTableView *_self, struct _NSRect rect);

// method '-[NSTableView scrollColumnToVisible:]'
void _IM_NSTableView_scrollColumnToVisible_C(NSTableView *_self, int column);

// method '-[NSTableView scrollRowToVisible:]'
void _IM_NSTableView_scrollRowToVisible_C(NSTableView *_self, int row);

// method '-[NSTableView selectAll:]'
void _IM_NSTableView_selectAll_C(NSTableView *_self, id sender);

// method '-[NSTableView selectColumn:byExtendingSelection:]'
void _IM_NSTableView_selectColumn_CbyExtendingSelection_C(NSTableView *_self, int column, BOOL extend);

// method '-[NSTableView selectColumnIndexes:byExtendingSelection:]'
void _IM_NSTableView_selectColumnIndexes_CbyExtendingSelection_C(NSTableView *_self, id indexes, BOOL extend);

// method '-[NSTableView selectRow:byExtendingSelection:]'
void _IM_NSTableView_selectRow_CbyExtendingSelection_C(NSTableView *_self, int row, BOOL extend);

// method '-[NSTableView selectRowIndexes:byExtendingSelection:]'
void _IM_NSTableView_selectRowIndexes_CbyExtendingSelection_C(NSTableView *_self, id indexes, BOOL extend);

// method '-[NSTableView selectedColumn]'
int _IM_NSTableView_selectedColumn(NSTableView *_self);

// method '-[NSTableView selectedColumnEnumerator]'
id _IM_NSTableView_selectedColumnEnumerator(NSTableView *_self);

// method '-[NSTableView selectedColumnIndexes]'
id _IM_NSTableView_selectedColumnIndexes(NSTableView *_self);

// method '-[NSTableView selectedRow]'
int _IM_NSTableView_selectedRow(NSTableView *_self);

// method '-[NSTableView selectedRowEnumerator]'
id _IM_NSTableView_selectedRowEnumerator(NSTableView *_self);

// method '-[NSTableView selectedRowIndexes]'
id _IM_NSTableView_selectedRowIndexes(NSTableView *_self);

// method '-[NSTableView setAllowsColumnReordering:]'
void _IM_NSTableView_setAllowsColumnReordering_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setAllowsColumnResizing:]'
void _IM_NSTableView_setAllowsColumnResizing_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setAllowsColumnSelection:]'
void _IM_NSTableView_setAllowsColumnSelection_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setAllowsEmptySelection:]'
void _IM_NSTableView_setAllowsEmptySelection_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setAllowsMultipleSelection:]'
void _IM_NSTableView_setAllowsMultipleSelection_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setAutoresizesAllColumnsToFit:]'
void _IM_NSTableView_setAutoresizesAllColumnsToFit_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setAutosaveName:]'
void _IM_NSTableView_setAutosaveName_C(NSTableView *_self, NSString* name);

// method '-[NSTableView setAutosaveTableColumns:]'
void _IM_NSTableView_setAutosaveTableColumns_C(NSTableView *_self, BOOL save);

// method '-[NSTableView setBackgroundColor:]'
void _IM_NSTableView_setBackgroundColor_C(NSTableView *_self, NSColor* color);

// method '-[NSTableView setColumnAutoresizingStyle:]'
void _IM_NSTableView_setColumnAutoresizingStyle_C(NSTableView *_self, int style);

// method '-[NSTableView setCornerView:]'
void _IM_NSTableView_setCornerView_C(NSTableView *_self, NSView* cornerView);

// method '-[NSTableView setDataSource:]'
void _IM_NSTableView_setDataSource_C(NSTableView *_self, id aSource);

// method '-[NSTableView setDelegate:]'
void _IM_NSTableView_setDelegate_C(NSTableView *_self, id delegate);

// method '-[NSTableView setDoubleAction:]'
void _IM_NSTableView_setDoubleAction_C(NSTableView *_self, SEL aSelector);

// method '-[NSTableView setDraggingSourceOperationMask:forLocal:]'
void _IM_NSTableView_setDraggingSourceOperationMask_CforLocal_C(NSTableView *_self, unsigned int mask, BOOL isLocal);

// method '-[NSTableView setDrawsGrid:]'
void _IM_NSTableView_setDrawsGrid_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView setDropRow:dropOperation:]'
void _IM_NSTableView_setDropRow_CdropOperation_C(NSTableView *_self, int row, int op);

// method '-[NSTableView setGridColor:]'
void _IM_NSTableView_setGridColor_C(NSTableView *_self, NSColor* color);

// method '-[NSTableView setGridStyleMask:]'
void _IM_NSTableView_setGridStyleMask_C(NSTableView *_self, unsigned int gridType);

// method '-[NSTableView setHeaderView:]'
void _IM_NSTableView_setHeaderView_C(NSTableView *_self, NSTableHeaderView* headerView);

// method '-[NSTableView setHighlightedTableColumn:]'
void _IM_NSTableView_setHighlightedTableColumn_C(NSTableView *_self, NSTableColumn* tc);

// method '-[NSTableView setIndicatorImage:inTableColumn:]'
void _IM_NSTableView_setIndicatorImage_CinTableColumn_C(NSTableView *_self, NSImage* anImage, NSTableColumn* tc);

// method '-[NSTableView setIntercellSpacing:]'
void _IM_NSTableView_setIntercellSpacing_C(NSTableView *_self, struct _NSSize aSize);

// method '-[NSTableView setRowHeight:]'
void _IM_NSTableView_setRowHeight_C(NSTableView *_self, float rowHeight);

// method '-[NSTableView setSortDescriptors:]'
void _IM_NSTableView_setSortDescriptors_C(NSTableView *_self, id array);

// method '-[NSTableView setUsesAlternatingRowBackgroundColors:]'
void _IM_NSTableView_setUsesAlternatingRowBackgroundColors_C(NSTableView *_self, BOOL useAlternatingRowColors);

// method '-[NSTableView setVerticalMotionCanBeginDrag:]'
void _IM_NSTableView_setVerticalMotionCanBeginDrag_C(NSTableView *_self, BOOL flag);

// method '-[NSTableView sizeLastColumnToFit]'
void _IM_NSTableView_sizeLastColumnToFit(NSTableView *_self);

// method '-[NSTableView sizeToFit]'
void _IM_NSTableView_sizeToFit(NSTableView *_self);

// method '-[NSTableView sortDescriptors]'
id _IM_NSTableView_sortDescriptors(NSTableView *_self);

// method '-[NSTableView tableColumnWithIdentifier:]'
NSTableColumn* _IM_NSTableView_tableColumnWithIdentifier_C(NSTableView *_self, id identifier);

// method '-[NSTableView tableColumns]'
id _IM_NSTableView_tableColumns(NSTableView *_self);

// method '-[NSTableView textDidBeginEditing:]'
void _IM_NSTableView_textDidBeginEditing_C(NSTableView *_self, id notification);

// method '-[NSTableView textDidChange:]'
void _IM_NSTableView_textDidChange_C(NSTableView *_self, id notification);

// method '-[NSTableView textDidEndEditing:]'
void _IM_NSTableView_textDidEndEditing_C(NSTableView *_self, id notification);

// method '-[NSTableView textShouldBeginEditing:]'
BOOL _IM_NSTableView_textShouldBeginEditing_C(NSTableView *_self, NSText* textObject);

// method '-[NSTableView textShouldEndEditing:]'
BOOL _IM_NSTableView_textShouldEndEditing_C(NSTableView *_self, NSText* textObject);

// method '-[NSTableView tile]'
void _IM_NSTableView_tile(NSTableView *_self);

// method '-[NSTableView usesAlternatingRowBackgroundColors]'
BOOL _IM_NSTableView_usesAlternatingRowBackgroundColors(NSTableView *_self);

// method '-[NSTableView verticalMotionCanBeginDrag]'
BOOL _IM_NSTableView_verticalMotionCanBeginDrag(NSTableView *_self);

// method '-[NSText RTFDFromRange:]'
id _IM_NSText_RTFDFromRange_C(NSText *_self, struct _NSRange range);

// method '-[NSText RTFFromRange:]'
id _IM_NSText_RTFFromRange_C(NSText *_self, struct _NSRange range);

// method '-[NSText alignCenter:]'
void _IM_NSText_alignCenter_C(NSText *_self, id sender);

// method '-[NSText alignLeft:]'
void _IM_NSText_alignLeft_C(NSText *_self, id sender);

// method '-[NSText alignRight:]'
void _IM_NSText_alignRight_C(NSText *_self, id sender);

// method '-[NSText alignment]'
int _IM_NSText_alignment(NSText *_self);

// method '-[NSText backgroundColor]'
NSColor* _IM_NSText_backgroundColor(NSText *_self);

// method '-[NSText baseWritingDirection]'
int _IM_NSText_baseWritingDirection(NSText *_self);

// method '-[NSText changeFont:]'
void _IM_NSText_changeFont_C(NSText *_self, id sender);

// method '-[NSText checkSpelling:]'
void _IM_NSText_checkSpelling_C(NSText *_self, id sender);

// method '-[NSText copy:]'
void _IM_NSText_copy_C(NSText *_self, id sender);

// method '-[NSText copyFont:]'
void _IM_NSText_copyFont_C(NSText *_self, id sender);

// method '-[NSText copyRuler:]'
void _IM_NSText_copyRuler_C(NSText *_self, id sender);

// method '-[NSText cut:]'
void _IM_NSText_cut_C(NSText *_self, id sender);

// method '-[NSText delegate]'
id _IM_NSText_delegate(NSText *_self);

// method '-[NSText delete:]'
void _IM_NSText_delete_C(NSText *_self, id sender);

// method '-[NSText drawsBackground]'
BOOL _IM_NSText_drawsBackground(NSText *_self);

// method '-[NSText font]'
NSFont* _IM_NSText_font(NSText *_self);

// method '-[NSText importsGraphics]'
BOOL _IM_NSText_importsGraphics(NSText *_self);

// method '-[NSText isEditable]'
BOOL _IM_NSText_isEditable(NSText *_self);

// method '-[NSText isFieldEditor]'
BOOL _IM_NSText_isFieldEditor(NSText *_self);

// method '-[NSText isHorizontallyResizable]'
BOOL _IM_NSText_isHorizontallyResizable(NSText *_self);

// method '-[NSText isRichText]'
BOOL _IM_NSText_isRichText(NSText *_self);

// method '-[NSText isRulerVisible]'
BOOL _IM_NSText_isRulerVisible(NSText *_self);

// method '-[NSText isSelectable]'
BOOL _IM_NSText_isSelectable(NSText *_self);

// method '-[NSText isVerticallyResizable]'
BOOL _IM_NSText_isVerticallyResizable(NSText *_self);

// method '-[NSText maxSize]'
struct _NSSize _IM_NSText_maxSize(NSText *_self);

// method '-[NSText minSize]'
struct _NSSize _IM_NSText_minSize(NSText *_self);

// method '-[NSText paste:]'
void _IM_NSText_paste_C(NSText *_self, id sender);

// method '-[NSText pasteFont:]'
void _IM_NSText_pasteFont_C(NSText *_self, id sender);

// method '-[NSText pasteRuler:]'
void _IM_NSText_pasteRuler_C(NSText *_self, id sender);

// method '-[NSText readRTFDFromFile:]'
BOOL _IM_NSText_readRTFDFromFile_C(NSText *_self, NSString* path);

// method '-[NSText replaceCharactersInRange:withRTF:]'
void _IM_NSText_replaceCharactersInRange_CwithRTF_C(NSText *_self, struct _NSRange range, id rtfData);

// method '-[NSText replaceCharactersInRange:withRTFD:]'
void _IM_NSText_replaceCharactersInRange_CwithRTFD_C(NSText *_self, struct _NSRange range, id rtfdData);

// method '-[NSText replaceCharactersInRange:withString:]'
void _IM_NSText_replaceCharactersInRange_CwithString_C(NSText *_self, struct _NSRange range, NSString* aString);

// method '-[NSText scrollRangeToVisible:]'
void _IM_NSText_scrollRangeToVisible_C(NSText *_self, struct _NSRange range);

// method '-[NSText selectAll:]'
void _IM_NSText_selectAll_C(NSText *_self, id sender);

// method '-[NSText selectedRange]'
struct _NSRange _IM_NSText_selectedRange(NSText *_self);

// method '-[NSText setAlignment:]'
void _IM_NSText_setAlignment_C(NSText *_self, int mode);

// method '-[NSText setBackgroundColor:]'
void _IM_NSText_setBackgroundColor_C(NSText *_self, NSColor* color);

// method '-[NSText setBaseWritingDirection:]'
void _IM_NSText_setBaseWritingDirection_C(NSText *_self, int writingDirection);

// method '-[NSText setDelegate:]'
void _IM_NSText_setDelegate_C(NSText *_self, id anObject);

// method '-[NSText setDrawsBackground:]'
void _IM_NSText_setDrawsBackground_C(NSText *_self, BOOL flag);

// method '-[NSText setEditable:]'
void _IM_NSText_setEditable_C(NSText *_self, BOOL flag);

// method '-[NSText setFieldEditor:]'
void _IM_NSText_setFieldEditor_C(NSText *_self, BOOL flag);

// method '-[NSText setFont:]'
void _IM_NSText_setFont_C(NSText *_self, NSFont* obj);

// method '-[NSText setFont:range:]'
void _IM_NSText_setFont_Crange_C(NSText *_self, NSFont* font, struct _NSRange range);

// method '-[NSText setHorizontallyResizable:]'
void _IM_NSText_setHorizontallyResizable_C(NSText *_self, BOOL flag);

// method '-[NSText setImportsGraphics:]'
void _IM_NSText_setImportsGraphics_C(NSText *_self, BOOL flag);

// method '-[NSText setMaxSize:]'
void _IM_NSText_setMaxSize_C(NSText *_self, struct _NSSize newMaxSize);

// method '-[NSText setMinSize:]'
void _IM_NSText_setMinSize_C(NSText *_self, struct _NSSize newMinSize);

// method '-[NSText setRichText:]'
void _IM_NSText_setRichText_C(NSText *_self, BOOL flag);

// method '-[NSText setSelectable:]'
void _IM_NSText_setSelectable_C(NSText *_self, BOOL flag);

// method '-[NSText setSelectedRange:]'
void _IM_NSText_setSelectedRange_C(NSText *_self, struct _NSRange range);

// method '-[NSText setString:]'
void _IM_NSText_setString_C(NSText *_self, NSString* string);

// method '-[NSText setTextColor:]'
void _IM_NSText_setTextColor_C(NSText *_self, NSColor* color);

// method '-[NSText setTextColor:range:]'
void _IM_NSText_setTextColor_Crange_C(NSText *_self, NSColor* color, struct _NSRange range);

// method '-[NSText setUsesFontPanel:]'
void _IM_NSText_setUsesFontPanel_C(NSText *_self, BOOL flag);

// method '-[NSText setVerticallyResizable:]'
void _IM_NSText_setVerticallyResizable_C(NSText *_self, BOOL flag);

// method '-[NSText showGuessPanel:]'
void _IM_NSText_showGuessPanel_C(NSText *_self, id sender);

// method '-[NSText sizeToFit]'
void _IM_NSText_sizeToFit(NSText *_self);

// method '-[NSText string]'
NSString* _IM_NSText_string(NSText *_self);

// method '-[NSText subscript:]'
void _IM_NSText_subscript_C(NSText *_self, id sender);

// method '-[NSText superscript:]'
void _IM_NSText_superscript_C(NSText *_self, id sender);

// method '-[NSText textColor]'
NSColor* _IM_NSText_textColor(NSText *_self);

// method '-[NSText toggleRuler:]'
void _IM_NSText_toggleRuler_C(NSText *_self, id sender);

// method '-[NSText underline:]'
void _IM_NSText_underline_C(NSText *_self, id sender);

// method '-[NSText unscript:]'
void _IM_NSText_unscript_C(NSText *_self, id sender);

// method '-[NSText usesFontPanel]'
BOOL _IM_NSText_usesFontPanel(NSText *_self);

// method '-[NSText writeRTFDToFile:atomically:]'
BOOL _IM_NSText_writeRTFDToFile_Catomically_C(NSText *_self, NSString* path, BOOL flag);

// method '-[NSTextAttachment attachmentCell]'
id _IM_NSTextAttachment_attachmentCell(NSTextAttachment *_self);

// method '-[NSTextAttachment fileWrapper]'
NSFileWrapper* _IM_NSTextAttachment_fileWrapper(NSTextAttachment *_self);

// method '-[NSTextAttachment initWithFileWrapper:]'
NSTextAttachment *_IM_NSTextAttachment_initWithFileWrapper_C(NSTextAttachment *_self, NSFileWrapper* fileWrapper);

// method '-[NSTextAttachment setAttachmentCell:]'
void _IM_NSTextAttachment_setAttachmentCell_C(NSTextAttachment *_self, id cell);

// method '-[NSTextAttachment setFileWrapper:]'
void _IM_NSTextAttachment_setFileWrapper_C(NSTextAttachment *_self, NSFileWrapper* fileWrapper);

// method '-[NSTextBlock backgroundColor]'
NSColor* _IM_NSTextBlock_backgroundColor(NSTextBlock *_self);

// method '-[NSTextBlock borderColorForEdge:]'
NSColor* _IM_NSTextBlock_borderColorForEdge_C(NSTextBlock *_self, int edge);

// method '-[NSTextBlock boundsRectForContentRect:inRect:textContainer:characterRange:]'
struct _NSRect _IM_NSTextBlock_boundsRectForContentRect_CinRect_CtextContainer_CcharacterRange_C(NSTextBlock *_self, struct _NSRect contentRect, struct _NSRect rect, NSTextContainer* textContainer, struct _NSRange charRange);

// method '-[NSTextBlock contentWidth]'
float _IM_NSTextBlock_contentWidth(NSTextBlock *_self);

// method '-[NSTextBlock contentWidthValueType]'
int _IM_NSTextBlock_contentWidthValueType(NSTextBlock *_self);

// method '-[NSTextBlock drawBackgroundWithFrame:inView:characterRange:layoutManager:]'
void _IM_NSTextBlock_drawBackgroundWithFrame_CinView_CcharacterRange_ClayoutManager_C(NSTextBlock *_self, struct _NSRect frameRect, NSView* controlView, struct _NSRange charRange, NSLayoutManager* layoutManager);

// method '-[NSTextBlock init]'
NSTextBlock *_IM_NSTextBlock_init(NSTextBlock *_self);

// method '-[NSTextBlock rectForLayoutAtPoint:inRect:textContainer:characterRange:]'
struct _NSRect _IM_NSTextBlock_rectForLayoutAtPoint_CinRect_CtextContainer_CcharacterRange_C(NSTextBlock *_self, struct _NSPoint startingPoint, struct _NSRect rect, NSTextContainer* textContainer, struct _NSRange charRange);

// method '-[NSTextBlock setBackgroundColor:]'
void _IM_NSTextBlock_setBackgroundColor_C(NSTextBlock *_self, NSColor* color);

// method '-[NSTextBlock setBorderColor:]'
void _IM_NSTextBlock_setBorderColor_C(NSTextBlock *_self, NSColor* color);

// method '-[NSTextBlock setBorderColor:forEdge:]'
void _IM_NSTextBlock_setBorderColor_CforEdge_C(NSTextBlock *_self, NSColor* color, int edge);

// method '-[NSTextBlock setContentWidth:type:]'
void _IM_NSTextBlock_setContentWidth_Ctype_C(NSTextBlock *_self, float val, int type);

// method '-[NSTextBlock setValue:type:forDimension:]'
void _IM_NSTextBlock_setValue_Ctype_CforDimension_C(NSTextBlock *_self, float val, int type, int dimension);

// method '-[NSTextBlock setVerticalAlignment:]'
void _IM_NSTextBlock_setVerticalAlignment_C(NSTextBlock *_self, int alignment);

// method '-[NSTextBlock setWidth:type:forLayer:]'
void _IM_NSTextBlock_setWidth_Ctype_CforLayer_C(NSTextBlock *_self, float val, int type, int layer);

// method '-[NSTextBlock setWidth:type:forLayer:edge:]'
void _IM_NSTextBlock_setWidth_Ctype_CforLayer_Cedge_C(NSTextBlock *_self, float val, int type, int layer, int edge);

// method '-[NSTextBlock valueForDimension:]'
float _IM_NSTextBlock_valueForDimension_C(NSTextBlock *_self, int dimension);

// method '-[NSTextBlock valueTypeForDimension:]'
int _IM_NSTextBlock_valueTypeForDimension_C(NSTextBlock *_self, int dimension);

// method '-[NSTextBlock verticalAlignment]'
int _IM_NSTextBlock_verticalAlignment(NSTextBlock *_self);

// method '-[NSTextBlock widthForLayer:edge:]'
float _IM_NSTextBlock_widthForLayer_Cedge_C(NSTextBlock *_self, int layer, int edge);

// method '-[NSTextBlock widthValueTypeForLayer:edge:]'
int _IM_NSTextBlock_widthValueTypeForLayer_Cedge_C(NSTextBlock *_self, int layer, int edge);

// method '-[NSTextContainer containerSize]'
struct _NSSize _IM_NSTextContainer_containerSize(NSTextContainer *_self);

// method '-[NSTextContainer containsPoint:]'
BOOL _IM_NSTextContainer_containsPoint_C(NSTextContainer *_self, struct _NSPoint point);

// method '-[NSTextContainer heightTracksTextView]'
BOOL _IM_NSTextContainer_heightTracksTextView(NSTextContainer *_self);

// method '-[NSTextContainer initWithContainerSize:]'
NSTextContainer *_IM_NSTextContainer_initWithContainerSize_C(NSTextContainer *_self, struct _NSSize size);

// method '-[NSTextContainer isSimpleRectangularTextContainer]'
BOOL _IM_NSTextContainer_isSimpleRectangularTextContainer(NSTextContainer *_self);

// method '-[NSTextContainer layoutManager]'
NSLayoutManager* _IM_NSTextContainer_layoutManager(NSTextContainer *_self);

// method '-[NSTextContainer lineFragmentPadding]'
float _IM_NSTextContainer_lineFragmentPadding(NSTextContainer *_self);

// method '-[NSTextContainer lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:]'
struct _NSRect _IM_NSTextContainer_lineFragmentRectForProposedRect_CsweepDirection_CmovementDirection_CremainingRect_C(NSTextContainer *_self, struct _NSRect proposedRect, int sweepDirection, int movementDirection, struct _NSRect *remainingRect);

// method '-[NSTextContainer replaceLayoutManager:]'
void _IM_NSTextContainer_replaceLayoutManager_C(NSTextContainer *_self, NSLayoutManager* newLayoutManager);

// method '-[NSTextContainer setContainerSize:]'
void _IM_NSTextContainer_setContainerSize_C(NSTextContainer *_self, struct _NSSize size);

// method '-[NSTextContainer setHeightTracksTextView:]'
void _IM_NSTextContainer_setHeightTracksTextView_C(NSTextContainer *_self, BOOL flag);

// method '-[NSTextContainer setLayoutManager:]'
void _IM_NSTextContainer_setLayoutManager_C(NSTextContainer *_self, NSLayoutManager* layoutManager);

// method '-[NSTextContainer setLineFragmentPadding:]'
void _IM_NSTextContainer_setLineFragmentPadding_C(NSTextContainer *_self, float pad);

// method '-[NSTextContainer setTextView:]'
void _IM_NSTextContainer_setTextView_C(NSTextContainer *_self, NSTextView* textView);

// method '-[NSTextContainer setWidthTracksTextView:]'
void _IM_NSTextContainer_setWidthTracksTextView_C(NSTextContainer *_self, BOOL flag);

// method '-[NSTextContainer textView]'
NSTextView* _IM_NSTextContainer_textView(NSTextContainer *_self);

// method '-[NSTextContainer widthTracksTextView]'
BOOL _IM_NSTextContainer_widthTracksTextView(NSTextContainer *_self);

// method '-[NSTextField acceptsFirstResponder]'
BOOL _IM_NSTextField_acceptsFirstResponder(NSTextField *_self);

// method '-[NSTextField allowsEditingTextAttributes]'
BOOL _IM_NSTextField_allowsEditingTextAttributes(NSTextField *_self);

// method '-[NSTextField backgroundColor]'
NSColor* _IM_NSTextField_backgroundColor(NSTextField *_self);

// method '-[NSTextField bezelStyle]'
int _IM_NSTextField_bezelStyle(NSTextField *_self);

// method '-[NSTextField delegate]'
id _IM_NSTextField_delegate(NSTextField *_self);

// method '-[NSTextField drawsBackground]'
BOOL _IM_NSTextField_drawsBackground(NSTextField *_self);

// method '-[NSTextField importsGraphics]'
BOOL _IM_NSTextField_importsGraphics(NSTextField *_self);

// method '-[NSTextField isBezeled]'
BOOL _IM_NSTextField_isBezeled(NSTextField *_self);

// method '-[NSTextField isBordered]'
BOOL _IM_NSTextField_isBordered(NSTextField *_self);

// method '-[NSTextField isEditable]'
BOOL _IM_NSTextField_isEditable(NSTextField *_self);

// method '-[NSTextField isSelectable]'
BOOL _IM_NSTextField_isSelectable(NSTextField *_self);

// method '-[NSTextField selectText:]'
void _IM_NSTextField_selectText_C(NSTextField *_self, id sender);

// method '-[NSTextField setAllowsEditingTextAttributes:]'
void _IM_NSTextField_setAllowsEditingTextAttributes_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setBackgroundColor:]'
void _IM_NSTextField_setBackgroundColor_C(NSTextField *_self, NSColor* color);

// method '-[NSTextField setBezelStyle:]'
void _IM_NSTextField_setBezelStyle_C(NSTextField *_self, int style);

// method '-[NSTextField setBezeled:]'
void _IM_NSTextField_setBezeled_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setBordered:]'
void _IM_NSTextField_setBordered_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setDelegate:]'
void _IM_NSTextField_setDelegate_C(NSTextField *_self, id anObject);

// method '-[NSTextField setDrawsBackground:]'
void _IM_NSTextField_setDrawsBackground_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setEditable:]'
void _IM_NSTextField_setEditable_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setImportsGraphics:]'
void _IM_NSTextField_setImportsGraphics_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setSelectable:]'
void _IM_NSTextField_setSelectable_C(NSTextField *_self, BOOL flag);

// method '-[NSTextField setTextColor:]'
void _IM_NSTextField_setTextColor_C(NSTextField *_self, NSColor* color);

// method '-[NSTextField setTitleWithMnemonic:]'
void _IM_NSTextField_setTitleWithMnemonic_C(NSTextField *_self, NSString* stringWithAmpersand);

// method '-[NSTextField textColor]'
NSColor* _IM_NSTextField_textColor(NSTextField *_self);

// method '-[NSTextField textDidBeginEditing:]'
void _IM_NSTextField_textDidBeginEditing_C(NSTextField *_self, id notification);

// method '-[NSTextField textDidChange:]'
void _IM_NSTextField_textDidChange_C(NSTextField *_self, id notification);

// method '-[NSTextField textDidEndEditing:]'
void _IM_NSTextField_textDidEndEditing_C(NSTextField *_self, id notification);

// method '-[NSTextField textShouldBeginEditing:]'
BOOL _IM_NSTextField_textShouldBeginEditing_C(NSTextField *_self, NSText* textObject);

// method '-[NSTextField textShouldEndEditing:]'
BOOL _IM_NSTextField_textShouldEndEditing_C(NSTextField *_self, NSText* textObject);

// method '-[NSTextFieldCell backgroundColor]'
NSColor* _IM_NSTextFieldCell_backgroundColor(NSTextFieldCell *_self);

// method '-[NSTextFieldCell bezelStyle]'
int _IM_NSTextFieldCell_bezelStyle(NSTextFieldCell *_self);

// method '-[NSTextFieldCell drawsBackground]'
BOOL _IM_NSTextFieldCell_drawsBackground(NSTextFieldCell *_self);

// method '-[NSTextFieldCell placeholderAttributedString]'
NSAttributedString* _IM_NSTextFieldCell_placeholderAttributedString(NSTextFieldCell *_self);

// method '-[NSTextFieldCell placeholderString]'
NSString* _IM_NSTextFieldCell_placeholderString(NSTextFieldCell *_self);

// method '-[NSTextFieldCell setBackgroundColor:]'
void _IM_NSTextFieldCell_setBackgroundColor_C(NSTextFieldCell *_self, NSColor* color);

// method '-[NSTextFieldCell setBezelStyle:]'
void _IM_NSTextFieldCell_setBezelStyle_C(NSTextFieldCell *_self, int style);

// method '-[NSTextFieldCell setDrawsBackground:]'
void _IM_NSTextFieldCell_setDrawsBackground_C(NSTextFieldCell *_self, BOOL flag);

// method '-[NSTextFieldCell setPlaceholderAttributedString:]'
void _IM_NSTextFieldCell_setPlaceholderAttributedString_C(NSTextFieldCell *_self, NSAttributedString* string);

// method '-[NSTextFieldCell setPlaceholderString:]'
void _IM_NSTextFieldCell_setPlaceholderString_C(NSTextFieldCell *_self, NSString* string);

// method '-[NSTextFieldCell setTextColor:]'
void _IM_NSTextFieldCell_setTextColor_C(NSTextFieldCell *_self, NSColor* color);

// method '-[NSTextFieldCell setUpFieldEditorAttributes:]'
NSText* _IM_NSTextFieldCell_setUpFieldEditorAttributes_C(NSTextFieldCell *_self, NSText* textObj);

// method '-[NSTextFieldCell textColor]'
NSColor* _IM_NSTextFieldCell_textColor(NSTextFieldCell *_self);

// method '-[NSTextList initWithMarkerFormat:options:]'
NSTextList *_IM_NSTextList_initWithMarkerFormat_Coptions_C(NSTextList *_self, NSString* format, unsigned int mask);

// method '-[NSTextList listOptions]'
unsigned int _IM_NSTextList_listOptions(NSTextList *_self);

// method '-[NSTextList markerForItemNumber:]'
NSString* _IM_NSTextList_markerForItemNumber_C(NSTextList *_self, int itemNum);

// method '-[NSTextList markerFormat]'
NSString* _IM_NSTextList_markerFormat(NSTextList *_self);

// method '-[NSTextStorage addLayoutManager:]'
void _IM_NSTextStorage_addLayoutManager_C(NSTextStorage *_self, NSLayoutManager* obj);

// method '-[NSTextStorage attributeRuns]'
id _IM_NSTextStorage_attributeRuns(NSTextStorage *_self);

// method '-[NSTextStorage changeInLength]'
int _IM_NSTextStorage_changeInLength(NSTextStorage *_self);

// method '-[NSTextStorage characters]'
id _IM_NSTextStorage_characters(NSTextStorage *_self);

// method '-[NSTextStorage delegate]'
id _IM_NSTextStorage_delegate(NSTextStorage *_self);

// method '-[NSTextStorage edited:range:changeInLength:]'
void _IM_NSTextStorage_edited_Crange_CchangeInLength_C(NSTextStorage *_self, unsigned int editedMask, struct _NSRange range, int delta);

// method '-[NSTextStorage editedMask]'
unsigned int _IM_NSTextStorage_editedMask(NSTextStorage *_self);

// method '-[NSTextStorage editedRange]'
struct _NSRange _IM_NSTextStorage_editedRange(NSTextStorage *_self);

// method '-[NSTextStorage ensureAttributesAreFixedInRange:]'
void _IM_NSTextStorage_ensureAttributesAreFixedInRange_C(NSTextStorage *_self, struct _NSRange range);

// method '-[NSTextStorage fixesAttributesLazily]'
BOOL _IM_NSTextStorage_fixesAttributesLazily(NSTextStorage *_self);

// method '-[NSTextStorage font]'
NSFont* _IM_NSTextStorage_font(NSTextStorage *_self);

// method '-[NSTextStorage foregroundColor]'
NSColor* _IM_NSTextStorage_foregroundColor(NSTextStorage *_self);

// method '-[NSTextStorage invalidateAttributesInRange:]'
void _IM_NSTextStorage_invalidateAttributesInRange_C(NSTextStorage *_self, struct _NSRange range);

// method '-[NSTextStorage layoutManagers]'
id _IM_NSTextStorage_layoutManagers(NSTextStorage *_self);

// method '-[NSTextStorage paragraphs]'
id _IM_NSTextStorage_paragraphs(NSTextStorage *_self);

// method '-[NSTextStorage processEditing]'
void _IM_NSTextStorage_processEditing(NSTextStorage *_self);

// method '-[NSTextStorage removeLayoutManager:]'
void _IM_NSTextStorage_removeLayoutManager_C(NSTextStorage *_self, NSLayoutManager* obj);

// method '-[NSTextStorage setAttributeRuns:]'
void _IM_NSTextStorage_setAttributeRuns_C(NSTextStorage *_self, id attributeRuns);

// method '-[NSTextStorage setCharacters:]'
void _IM_NSTextStorage_setCharacters_C(NSTextStorage *_self, id characters);

// method '-[NSTextStorage setDelegate:]'
void _IM_NSTextStorage_setDelegate_C(NSTextStorage *_self, id delegate);

// method '-[NSTextStorage setFont:]'
void _IM_NSTextStorage_setFont_C(NSTextStorage *_self, NSFont* font);

// method '-[NSTextStorage setForegroundColor:]'
void _IM_NSTextStorage_setForegroundColor_C(NSTextStorage *_self, NSColor* color);

// method '-[NSTextStorage setParagraphs:]'
void _IM_NSTextStorage_setParagraphs_C(NSTextStorage *_self, id paragraphs);

// method '-[NSTextStorage setWords:]'
void _IM_NSTextStorage_setWords_C(NSTextStorage *_self, id words);

// method '-[NSTextStorage words]'
id _IM_NSTextStorage_words(NSTextStorage *_self);

// method '-[NSTextTab alignment]'
int _IM_NSTextTab_alignment(NSTextTab *_self);

// method '-[NSTextTab initWithTextAlignment:location:options:]'
NSTextTab *_IM_NSTextTab_initWithTextAlignment_Clocation_Coptions_C(NSTextTab *_self, int alignment, float loc, id options);

// method '-[NSTextTab initWithType:location:]'
NSTextTab *_IM_NSTextTab_initWithType_Clocation_C(NSTextTab *_self, int type, float loc);

// method '-[NSTextTab location]'
float _IM_NSTextTab_location(NSTextTab *_self);

// method '-[NSTextTab options]'
id _IM_NSTextTab_options(NSTextTab *_self);

// method '-[NSTextTab tabStopType]'
int _IM_NSTextTab_tabStopType(NSTextTab *_self);

// method '-[NSTextTable boundsRectForBlock:contentRect:inRect:textContainer:characterRange:]'
struct _NSRect _IM_NSTextTable_boundsRectForBlock_CcontentRect_CinRect_CtextContainer_CcharacterRange_C(NSTextTable *_self, NSTextTableBlock* block, struct _NSRect contentRect, struct _NSRect rect, NSTextContainer* textContainer, struct _NSRange charRange);

// method '-[NSTextTable collapsesBorders]'
BOOL _IM_NSTextTable_collapsesBorders(NSTextTable *_self);

// method '-[NSTextTable drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:]'
void _IM_NSTextTable_drawBackgroundForBlock_CwithFrame_CinView_CcharacterRange_ClayoutManager_C(NSTextTable *_self, NSTextTableBlock* block, struct _NSRect frameRect, NSView* controlView, struct _NSRange charRange, NSLayoutManager* layoutManager);

// method '-[NSTextTable hidesEmptyCells]'
BOOL _IM_NSTextTable_hidesEmptyCells(NSTextTable *_self);

// method '-[NSTextTable layoutAlgorithm]'
int _IM_NSTextTable_layoutAlgorithm(NSTextTable *_self);

// method '-[NSTextTable numberOfColumns]'
unsigned int _IM_NSTextTable_numberOfColumns(NSTextTable *_self);

// method '-[NSTextTable rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:]'
struct _NSRect _IM_NSTextTable_rectForBlock_ClayoutAtPoint_CinRect_CtextContainer_CcharacterRange_C(NSTextTable *_self, NSTextTableBlock* block, struct _NSPoint startingPoint, struct _NSRect rect, NSTextContainer* textContainer, struct _NSRange charRange);

// method '-[NSTextTable setCollapsesBorders:]'
void _IM_NSTextTable_setCollapsesBorders_C(NSTextTable *_self, BOOL flag);

// method '-[NSTextTable setHidesEmptyCells:]'
void _IM_NSTextTable_setHidesEmptyCells_C(NSTextTable *_self, BOOL flag);

// method '-[NSTextTable setLayoutAlgorithm:]'
void _IM_NSTextTable_setLayoutAlgorithm_C(NSTextTable *_self, int algorithm);

// method '-[NSTextTable setNumberOfColumns:]'
void _IM_NSTextTable_setNumberOfColumns_C(NSTextTable *_self, unsigned int numCols);

// method '-[NSTextTableBlock columnSpan]'
int _IM_NSTextTableBlock_columnSpan(NSTextTableBlock *_self);

// method '-[NSTextTableBlock initWithTable:startingRow:rowSpan:startingColumn:columnSpan:]'
NSTextTableBlock *_IM_NSTextTableBlock_initWithTable_CstartingRow_CrowSpan_CstartingColumn_CcolumnSpan_C(NSTextTableBlock *_self, NSTextTable* table, int row, int rowSpan, int col, int colSpan);

// method '-[NSTextTableBlock rowSpan]'
int _IM_NSTextTableBlock_rowSpan(NSTextTableBlock *_self);

// method '-[NSTextTableBlock startingColumn]'
int _IM_NSTextTableBlock_startingColumn(NSTextTableBlock *_self);

// method '-[NSTextTableBlock startingRow]'
int _IM_NSTextTableBlock_startingRow(NSTextTableBlock *_self);

// method '-[NSTextTableBlock table]'
NSTextTable* _IM_NSTextTableBlock_table(NSTextTableBlock *_self);

// method '-[NSTextView acceptableDragTypes]'
id _IM_NSTextView_acceptableDragTypes(NSTextView *_self);

// method '-[NSTextView acceptsGlyphInfo]'
BOOL _IM_NSTextView_acceptsGlyphInfo(NSTextView *_self);

// method '-[NSTextView alignJustified:]'
void _IM_NSTextView_alignJustified_C(NSTextView *_self, id sender);

// method '-[NSTextView allowsDocumentBackgroundColorChange]'
BOOL _IM_NSTextView_allowsDocumentBackgroundColorChange(NSTextView *_self);

// method '-[NSTextView allowsUndo]'
BOOL _IM_NSTextView_allowsUndo(NSTextView *_self);

// method '-[NSTextView backgroundColor]'
NSColor* _IM_NSTextView_backgroundColor(NSTextView *_self);

// method '-[NSTextView becomeFirstResponder]'
BOOL _IM_NSTextView_becomeFirstResponder(NSTextView *_self);

// method '-[NSTextView breakUndoCoalescing]'
void _IM_NSTextView_breakUndoCoalescing(NSTextView *_self);

// method '-[NSTextView changeAttributes:]'
void _IM_NSTextView_changeAttributes_C(NSTextView *_self, id sender);

// method '-[NSTextView changeColor:]'
void _IM_NSTextView_changeColor_C(NSTextView *_self, id sender);

// method '-[NSTextView changeDocumentBackgroundColor:]'
void _IM_NSTextView_changeDocumentBackgroundColor_C(NSTextView *_self, id sender);

// method '-[NSTextView cleanUpAfterDragOperation]'
void _IM_NSTextView_cleanUpAfterDragOperation(NSTextView *_self);

// method '-[NSTextView clickedOnLink:atIndex:]'
void _IM_NSTextView_clickedOnLink_CatIndex_C(NSTextView *_self, id link, unsigned int charIndex);

// method '-[NSTextView complete:]'
void _IM_NSTextView_complete_C(NSTextView *_self, id sender);

// method '-[NSTextView completionsForPartialWordRange:indexOfSelectedItem:]'
id _IM_NSTextView_completionsForPartialWordRange_CindexOfSelectedItem_C(NSTextView *_self, struct _NSRange charRange, int *index);

// method '-[NSTextView defaultParagraphStyle]'
NSParagraphStyle* _IM_NSTextView_defaultParagraphStyle(NSTextView *_self);

// method '-[NSTextView delegate]'
id _IM_NSTextView_delegate(NSTextView *_self);

// method '-[NSTextView didChangeText]'
void _IM_NSTextView_didChangeText(NSTextView *_self);

// method '-[NSTextView dragImageForSelectionWithEvent:origin:]'
NSImage* _IM_NSTextView_dragImageForSelectionWithEvent_Corigin_C(NSTextView *_self, NSEvent* event, struct _NSPoint *origin);

// method '-[NSTextView dragOperationForDraggingInfo:type:]'
unsigned int _IM_NSTextView_dragOperationForDraggingInfo_Ctype_C(NSTextView *_self, id dragInfo, NSString* type);

// method '-[NSTextView dragSelectionWithEvent:offset:slideBack:]'
BOOL _IM_NSTextView_dragSelectionWithEvent_Coffset_CslideBack_C(NSTextView *_self, NSEvent* event, struct _NSSize mouseOffset, BOOL slideBack);

// method '-[NSTextView drawInsertionPointInRect:color:turnedOn:]'
void _IM_NSTextView_drawInsertionPointInRect_Ccolor_CturnedOn_C(NSTextView *_self, struct _NSRect rect, NSColor* color, BOOL flag);

// method '-[NSTextView drawViewBackgroundInRect:]'
void _IM_NSTextView_drawViewBackgroundInRect_C(NSTextView *_self, struct _NSRect rect);

// method '-[NSTextView drawsBackground]'
BOOL _IM_NSTextView_drawsBackground(NSTextView *_self);

// method '-[NSTextView importsGraphics]'
BOOL _IM_NSTextView_importsGraphics(NSTextView *_self);

// method '-[NSTextView initWithFrame:]'
NSTextView *_IM_NSTextView_initWithFrame_C(NSTextView *_self, struct _NSRect frameRect);

// method '-[NSTextView initWithFrame:textContainer:]'
NSTextView *_IM_NSTextView_initWithFrame_CtextContainer_C(NSTextView *_self, struct _NSRect frameRect, NSTextContainer* container);

// method '-[NSTextView insertCompletion:forPartialWordRange:movement:isFinal:]'
void _IM_NSTextView_insertCompletion_CforPartialWordRange_Cmovement_CisFinal_C(NSTextView *_self, NSString* word, struct _NSRange charRange, int movement, BOOL flag);

// method '-[NSTextView insertText:]'
void _IM_NSTextView_insertText_C(NSTextView *_self, id insertString);

// method '-[NSTextView insertionPointColor]'
NSColor* _IM_NSTextView_insertionPointColor(NSTextView *_self);

// method '-[NSTextView invalidateTextContainerOrigin]'
void _IM_NSTextView_invalidateTextContainerOrigin(NSTextView *_self);

// method '-[NSTextView isContinuousSpellCheckingEnabled]'
BOOL _IM_NSTextView_isContinuousSpellCheckingEnabled(NSTextView *_self);

// method '-[NSTextView isEditable]'
BOOL _IM_NSTextView_isEditable(NSTextView *_self);

// method '-[NSTextView isFieldEditor]'
BOOL _IM_NSTextView_isFieldEditor(NSTextView *_self);

// method '-[NSTextView isRichText]'
BOOL _IM_NSTextView_isRichText(NSTextView *_self);

// method '-[NSTextView isRulerVisible]'
BOOL _IM_NSTextView_isRulerVisible(NSTextView *_self);

// method '-[NSTextView isSelectable]'
BOOL _IM_NSTextView_isSelectable(NSTextView *_self);

// method '-[NSTextView layoutManager]'
NSLayoutManager* _IM_NSTextView_layoutManager(NSTextView *_self);

// method '-[NSTextView linkTextAttributes]'
id _IM_NSTextView_linkTextAttributes(NSTextView *_self);

// method '-[NSTextView loosenKerning:]'
void _IM_NSTextView_loosenKerning_C(NSTextView *_self, id sender);

// method '-[NSTextView lowerBaseline:]'
void _IM_NSTextView_lowerBaseline_C(NSTextView *_self, id sender);

// method '-[NSTextView markedTextAttributes]'
id _IM_NSTextView_markedTextAttributes(NSTextView *_self);

// method '-[NSTextView orderFrontLinkPanel:]'
void _IM_NSTextView_orderFrontLinkPanel_C(NSTextView *_self, id sender);

// method '-[NSTextView orderFrontListPanel:]'
void _IM_NSTextView_orderFrontListPanel_C(NSTextView *_self, id sender);

// method '-[NSTextView orderFrontSpacingPanel:]'
void _IM_NSTextView_orderFrontSpacingPanel_C(NSTextView *_self, id sender);

// method '-[NSTextView orderFrontTablePanel:]'
void _IM_NSTextView_orderFrontTablePanel_C(NSTextView *_self, id sender);

// method '-[NSTextView outline:]'
void _IM_NSTextView_outline_C(NSTextView *_self, id sender);

// method '-[NSTextView pasteAsPlainText:]'
void _IM_NSTextView_pasteAsPlainText_C(NSTextView *_self, id sender);

// method '-[NSTextView pasteAsRichText:]'
void _IM_NSTextView_pasteAsRichText_C(NSTextView *_self, id sender);

// method '-[NSTextView performFindPanelAction:]'
void _IM_NSTextView_performFindPanelAction_C(NSTextView *_self, id sender);

// method '-[NSTextView preferredPasteboardTypeFromArray:restrictedToTypesFromArray:]'
NSString* _IM_NSTextView_preferredPasteboardTypeFromArray_CrestrictedToTypesFromArray_C(NSTextView *_self, id availableTypes, id allowedTypes);

// method '-[NSTextView raiseBaseline:]'
void _IM_NSTextView_raiseBaseline_C(NSTextView *_self, id sender);

// method '-[NSTextView rangeForUserCharacterAttributeChange]'
struct _NSRange _IM_NSTextView_rangeForUserCharacterAttributeChange(NSTextView *_self);

// method '-[NSTextView rangeForUserCompletion]'
struct _NSRange _IM_NSTextView_rangeForUserCompletion(NSTextView *_self);

// method '-[NSTextView rangeForUserParagraphAttributeChange]'
struct _NSRange _IM_NSTextView_rangeForUserParagraphAttributeChange(NSTextView *_self);

// method '-[NSTextView rangeForUserTextChange]'
struct _NSRange _IM_NSTextView_rangeForUserTextChange(NSTextView *_self);

// method '-[NSTextView rangesForUserCharacterAttributeChange]'
id _IM_NSTextView_rangesForUserCharacterAttributeChange(NSTextView *_self);

// method '-[NSTextView rangesForUserParagraphAttributeChange]'
id _IM_NSTextView_rangesForUserParagraphAttributeChange(NSTextView *_self);

// method '-[NSTextView rangesForUserTextChange]'
id _IM_NSTextView_rangesForUserTextChange(NSTextView *_self);

// method '-[NSTextView readSelectionFromPasteboard:]'
BOOL _IM_NSTextView_readSelectionFromPasteboard_C(NSTextView *_self, NSPasteboard* pboard);

// method '-[NSTextView readSelectionFromPasteboard:type:]'
BOOL _IM_NSTextView_readSelectionFromPasteboard_Ctype_C(NSTextView *_self, NSPasteboard* pboard, NSString* type);

// method '-[NSTextView readablePasteboardTypes]'
id _IM_NSTextView_readablePasteboardTypes(NSTextView *_self);

// method '+[NSTextView registerForServices]'
void _CM_NSTextView_registerForServices(Class _class);

// method '-[NSTextView replaceTextContainer:]'
void _IM_NSTextView_replaceTextContainer_C(NSTextView *_self, NSTextContainer* newContainer);

// method '-[NSTextView resignFirstResponder]'
BOOL _IM_NSTextView_resignFirstResponder(NSTextView *_self);

// method '-[NSTextView rulerView:didAddMarker:]'
void _IM_NSTextView_rulerView_CdidAddMarker_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSTextView rulerView:didMoveMarker:]'
void _IM_NSTextView_rulerView_CdidMoveMarker_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSTextView rulerView:didRemoveMarker:]'
void _IM_NSTextView_rulerView_CdidRemoveMarker_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSTextView rulerView:handleMouseDown:]'
void _IM_NSTextView_rulerView_ChandleMouseDown_C(NSTextView *_self, NSRulerView* ruler, NSEvent* event);

// method '-[NSTextView rulerView:shouldAddMarker:]'
BOOL _IM_NSTextView_rulerView_CshouldAddMarker_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSTextView rulerView:shouldMoveMarker:]'
BOOL _IM_NSTextView_rulerView_CshouldMoveMarker_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSTextView rulerView:shouldRemoveMarker:]'
BOOL _IM_NSTextView_rulerView_CshouldRemoveMarker_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSTextView rulerView:willAddMarker:atLocation:]'
float _IM_NSTextView_rulerView_CwillAddMarker_CatLocation_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker, float location);

// method '-[NSTextView rulerView:willMoveMarker:toLocation:]'
float _IM_NSTextView_rulerView_CwillMoveMarker_CtoLocation_C(NSTextView *_self, NSRulerView* ruler, NSRulerMarker* marker, float location);

// method '-[NSTextView selectedRanges]'
id _IM_NSTextView_selectedRanges(NSTextView *_self);

// method '-[NSTextView selectedTextAttributes]'
id _IM_NSTextView_selectedTextAttributes(NSTextView *_self);

// method '-[NSTextView selectionAffinity]'
int _IM_NSTextView_selectionAffinity(NSTextView *_self);

// method '-[NSTextView selectionGranularity]'
int _IM_NSTextView_selectionGranularity(NSTextView *_self);

// method '-[NSTextView selectionRangeForProposedRange:granularity:]'
struct _NSRange _IM_NSTextView_selectionRangeForProposedRange_Cgranularity_C(NSTextView *_self, struct _NSRange proposedCharRange, int granularity);

// method '-[NSTextView setAcceptsGlyphInfo:]'
void _IM_NSTextView_setAcceptsGlyphInfo_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setAlignment:range:]'
void _IM_NSTextView_setAlignment_Crange_C(NSTextView *_self, int alignment, struct _NSRange range);

// method '-[NSTextView setAllowsDocumentBackgroundColorChange:]'
void _IM_NSTextView_setAllowsDocumentBackgroundColorChange_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setAllowsUndo:]'
void _IM_NSTextView_setAllowsUndo_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setBackgroundColor:]'
void _IM_NSTextView_setBackgroundColor_C(NSTextView *_self, NSColor* color);

// method '-[NSTextView setBaseWritingDirection:range:]'
void _IM_NSTextView_setBaseWritingDirection_Crange_C(NSTextView *_self, int writingDirection, struct _NSRange range);

// method '-[NSTextView setConstrainedFrameSize:]'
void _IM_NSTextView_setConstrainedFrameSize_C(NSTextView *_self, struct _NSSize desiredSize);

// method '-[NSTextView setContinuousSpellCheckingEnabled:]'
void _IM_NSTextView_setContinuousSpellCheckingEnabled_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setDefaultParagraphStyle:]'
void _IM_NSTextView_setDefaultParagraphStyle_C(NSTextView *_self, NSParagraphStyle* paragraphStyle);

// method '-[NSTextView setDelegate:]'
void _IM_NSTextView_setDelegate_C(NSTextView *_self, id anObject);

// method '-[NSTextView setDrawsBackground:]'
void _IM_NSTextView_setDrawsBackground_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setEditable:]'
void _IM_NSTextView_setEditable_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setFieldEditor:]'
void _IM_NSTextView_setFieldEditor_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setImportsGraphics:]'
void _IM_NSTextView_setImportsGraphics_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setInsertionPointColor:]'
void _IM_NSTextView_setInsertionPointColor_C(NSTextView *_self, NSColor* color);

// method '-[NSTextView setLinkTextAttributes:]'
void _IM_NSTextView_setLinkTextAttributes_C(NSTextView *_self, id attributeDictionary);

// method '-[NSTextView setMarkedTextAttributes:]'
void _IM_NSTextView_setMarkedTextAttributes_C(NSTextView *_self, id attributeDictionary);

// method '-[NSTextView setNeedsDisplayInRect:avoidAdditionalLayout:]'
void _IM_NSTextView_setNeedsDisplayInRect_CavoidAdditionalLayout_C(NSTextView *_self, struct _NSRect rect, BOOL flag);

// method '-[NSTextView setRichText:]'
void _IM_NSTextView_setRichText_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setRulerVisible:]'
void _IM_NSTextView_setRulerVisible_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setSelectable:]'
void _IM_NSTextView_setSelectable_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setSelectedRange:]'
void _IM_NSTextView_setSelectedRange_C(NSTextView *_self, struct _NSRange charRange);

// method '-[NSTextView setSelectedRange:affinity:stillSelecting:]'
void _IM_NSTextView_setSelectedRange_Caffinity_CstillSelecting_C(NSTextView *_self, struct _NSRange charRange, int affinity, BOOL stillSelectingFlag);

// method '-[NSTextView setSelectedRanges:]'
void _IM_NSTextView_setSelectedRanges_C(NSTextView *_self, id ranges);

// method '-[NSTextView setSelectedRanges:affinity:stillSelecting:]'
void _IM_NSTextView_setSelectedRanges_Caffinity_CstillSelecting_C(NSTextView *_self, id ranges, int affinity, BOOL stillSelectingFlag);

// method '-[NSTextView setSelectedTextAttributes:]'
void _IM_NSTextView_setSelectedTextAttributes_C(NSTextView *_self, id attributeDictionary);

// method '-[NSTextView setSelectionGranularity:]'
void _IM_NSTextView_setSelectionGranularity_C(NSTextView *_self, int granularity);

// method '-[NSTextView setSmartInsertDeleteEnabled:]'
void _IM_NSTextView_setSmartInsertDeleteEnabled_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setTextContainer:]'
void _IM_NSTextView_setTextContainer_C(NSTextView *_self, NSTextContainer* container);

// method '-[NSTextView setTextContainerInset:]'
void _IM_NSTextView_setTextContainerInset_C(NSTextView *_self, struct _NSSize inset);

// method '-[NSTextView setTypingAttributes:]'
void _IM_NSTextView_setTypingAttributes_C(NSTextView *_self, id attrs);

// method '-[NSTextView setUsesFindPanel:]'
void _IM_NSTextView_setUsesFindPanel_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setUsesFontPanel:]'
void _IM_NSTextView_setUsesFontPanel_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView setUsesRuler:]'
void _IM_NSTextView_setUsesRuler_C(NSTextView *_self, BOOL flag);

// method '-[NSTextView shouldChangeTextInRange:replacementString:]'
BOOL _IM_NSTextView_shouldChangeTextInRange_CreplacementString_C(NSTextView *_self, struct _NSRange affectedCharRange, NSString* replacementString);

// method '-[NSTextView shouldChangeTextInRanges:replacementStrings:]'
BOOL _IM_NSTextView_shouldChangeTextInRanges_CreplacementStrings_C(NSTextView *_self, id affectedRanges, id replacementStrings);

// method '-[NSTextView shouldDrawInsertionPoint]'
BOOL _IM_NSTextView_shouldDrawInsertionPoint(NSTextView *_self);

// method '-[NSTextView smartDeleteRangeForProposedRange:]'
struct _NSRange _IM_NSTextView_smartDeleteRangeForProposedRange_C(NSTextView *_self, struct _NSRange proposedCharRange);

// method '-[NSTextView smartInsertAfterStringForString:replacingRange:]'
NSString* _IM_NSTextView_smartInsertAfterStringForString_CreplacingRange_C(NSTextView *_self, NSString* pasteString, struct _NSRange charRangeToReplace);

// method '-[NSTextView smartInsertBeforeStringForString:replacingRange:]'
NSString* _IM_NSTextView_smartInsertBeforeStringForString_CreplacingRange_C(NSTextView *_self, NSString* pasteString, struct _NSRange charRangeToReplace);

// method '-[NSTextView smartInsertDeleteEnabled]'
BOOL _IM_NSTextView_smartInsertDeleteEnabled(NSTextView *_self);

// method '-[NSTextView smartInsertForString:replacingRange:beforeString:afterString:]'
void _IM_NSTextView_smartInsertForString_CreplacingRange_CbeforeString_CafterString_C(NSTextView *_self, NSString* pasteString, struct _NSRange charRangeToReplace, id *beforeString, id *afterString);

// method '-[NSTextView spellCheckerDocumentTag]'
int _IM_NSTextView_spellCheckerDocumentTag(NSTextView *_self);

// method '-[NSTextView startSpeaking:]'
void _IM_NSTextView_startSpeaking_C(NSTextView *_self, id sender);

// method '-[NSTextView stopSpeaking:]'
void _IM_NSTextView_stopSpeaking_C(NSTextView *_self, id sender);

// method '-[NSTextView textContainer]'
NSTextContainer* _IM_NSTextView_textContainer(NSTextView *_self);

// method '-[NSTextView textContainerInset]'
struct _NSSize _IM_NSTextView_textContainerInset(NSTextView *_self);

// method '-[NSTextView textContainerOrigin]'
struct _NSPoint _IM_NSTextView_textContainerOrigin(NSTextView *_self);

// method '-[NSTextView textStorage]'
NSTextStorage* _IM_NSTextView_textStorage(NSTextView *_self);

// method '-[NSTextView tightenKerning:]'
void _IM_NSTextView_tightenKerning_C(NSTextView *_self, id sender);

// method '-[NSTextView toggleBaseWritingDirection:]'
void _IM_NSTextView_toggleBaseWritingDirection_C(NSTextView *_self, id sender);

// method '-[NSTextView toggleContinuousSpellChecking:]'
void _IM_NSTextView_toggleContinuousSpellChecking_C(NSTextView *_self, id sender);

// method '-[NSTextView toggleTraditionalCharacterShape:]'
void _IM_NSTextView_toggleTraditionalCharacterShape_C(NSTextView *_self, id sender);

// method '-[NSTextView turnOffKerning:]'
void _IM_NSTextView_turnOffKerning_C(NSTextView *_self, id sender);

// method '-[NSTextView turnOffLigatures:]'
void _IM_NSTextView_turnOffLigatures_C(NSTextView *_self, id sender);

// method '-[NSTextView typingAttributes]'
id _IM_NSTextView_typingAttributes(NSTextView *_self);

// method '-[NSTextView updateDragTypeRegistration]'
void _IM_NSTextView_updateDragTypeRegistration(NSTextView *_self);

// method '-[NSTextView updateFontPanel]'
void _IM_NSTextView_updateFontPanel(NSTextView *_self);

// method '-[NSTextView updateInsertionPointStateAndRestartTimer:]'
void _IM_NSTextView_updateInsertionPointStateAndRestartTimer_C(NSTextView *_self, BOOL restartFlag);

// method '-[NSTextView updateRuler]'
void _IM_NSTextView_updateRuler(NSTextView *_self);

// method '-[NSTextView useAllLigatures:]'
void _IM_NSTextView_useAllLigatures_C(NSTextView *_self, id sender);

// method '-[NSTextView useStandardKerning:]'
void _IM_NSTextView_useStandardKerning_C(NSTextView *_self, id sender);

// method '-[NSTextView useStandardLigatures:]'
void _IM_NSTextView_useStandardLigatures_C(NSTextView *_self, id sender);

// method '-[NSTextView usesFindPanel]'
BOOL _IM_NSTextView_usesFindPanel(NSTextView *_self);

// method '-[NSTextView usesFontPanel]'
BOOL _IM_NSTextView_usesFontPanel(NSTextView *_self);

// method '-[NSTextView usesRuler]'
BOOL _IM_NSTextView_usesRuler(NSTextView *_self);

// method '-[NSTextView validRequestorForSendType:returnType:]'
id _IM_NSTextView_validRequestorForSendType_CreturnType_C(NSTextView *_self, NSString* sendType, NSString* returnType);

// method '-[NSTextView writablePasteboardTypes]'
id _IM_NSTextView_writablePasteboardTypes(NSTextView *_self);

// method '-[NSTextView writeSelectionToPasteboard:type:]'
BOOL _IM_NSTextView_writeSelectionToPasteboard_Ctype_C(NSTextView *_self, NSPasteboard* pboard, NSString* type);

// method '-[NSTextView writeSelectionToPasteboard:types:]'
BOOL _IM_NSTextView_writeSelectionToPasteboard_Ctypes_C(NSTextView *_self, NSPasteboard* pboard, id types);

// method '-[NSTokenField completionDelay]'
double _IM_NSTokenField_completionDelay(NSTokenField *_self);

// method '+[NSTokenField defaultCompletionDelay]'
double _CM_NSTokenField_defaultCompletionDelay(Class _class);

// method '+[NSTokenField defaultTokenizingCharacterSet]'
id _CM_NSTokenField_defaultTokenizingCharacterSet(Class _class);

// method '-[NSTokenField setCompletionDelay:]'
void _IM_NSTokenField_setCompletionDelay_C(NSTokenField *_self, double delay);

// method '-[NSTokenField setTokenStyle:]'
void _IM_NSTokenField_setTokenStyle_C(NSTokenField *_self, int style);

// method '-[NSTokenField setTokenizingCharacterSet:]'
void _IM_NSTokenField_setTokenizingCharacterSet_C(NSTokenField *_self, id characterSet);

// method '-[NSTokenField tokenStyle]'
int _IM_NSTokenField_tokenStyle(NSTokenField *_self);

// method '-[NSTokenField tokenizingCharacterSet]'
id _IM_NSTokenField_tokenizingCharacterSet(NSTokenField *_self);

// method '-[NSTokenFieldCell completionDelay]'
double _IM_NSTokenFieldCell_completionDelay(NSTokenFieldCell *_self);

// method '+[NSTokenFieldCell defaultCompletionDelay]'
double _CM_NSTokenFieldCell_defaultCompletionDelay(Class _class);

// method '+[NSTokenFieldCell defaultTokenizingCharacterSet]'
id _CM_NSTokenFieldCell_defaultTokenizingCharacterSet(Class _class);

// method '-[NSTokenFieldCell delegate]'
id _IM_NSTokenFieldCell_delegate(NSTokenFieldCell *_self);

// method '-[NSTokenFieldCell setCompletionDelay:]'
void _IM_NSTokenFieldCell_setCompletionDelay_C(NSTokenFieldCell *_self, double delay);

// method '-[NSTokenFieldCell setDelegate:]'
void _IM_NSTokenFieldCell_setDelegate_C(NSTokenFieldCell *_self, id anObject);

// method '-[NSTokenFieldCell setTokenStyle:]'
void _IM_NSTokenFieldCell_setTokenStyle_C(NSTokenFieldCell *_self, int style);

// method '-[NSTokenFieldCell setTokenizingCharacterSet:]'
void _IM_NSTokenFieldCell_setTokenizingCharacterSet_C(NSTokenFieldCell *_self, id characterSet);

// method '-[NSTokenFieldCell tokenStyle]'
int _IM_NSTokenFieldCell_tokenStyle(NSTokenFieldCell *_self);

// method '-[NSTokenFieldCell tokenizingCharacterSet]'
id _IM_NSTokenFieldCell_tokenizingCharacterSet(NSTokenFieldCell *_self);

// method '-[NSToolbar allowsUserCustomization]'
BOOL _IM_NSToolbar_allowsUserCustomization(NSToolbar *_self);

// method '-[NSToolbar autosavesConfiguration]'
BOOL _IM_NSToolbar_autosavesConfiguration(NSToolbar *_self);

// method '-[NSToolbar configurationDictionary]'
id _IM_NSToolbar_configurationDictionary(NSToolbar *_self);

// method '-[NSToolbar customizationPaletteIsRunning]'
BOOL _IM_NSToolbar_customizationPaletteIsRunning(NSToolbar *_self);

// method '-[NSToolbar delegate]'
id _IM_NSToolbar_delegate(NSToolbar *_self);

// method '-[NSToolbar displayMode]'
int _IM_NSToolbar_displayMode(NSToolbar *_self);

// method '-[NSToolbar identifier]'
NSString* _IM_NSToolbar_identifier(NSToolbar *_self);

// method '-[NSToolbar initWithIdentifier:]'
NSToolbar *_IM_NSToolbar_initWithIdentifier_C(NSToolbar *_self, NSString* identifier);

// method '-[NSToolbar insertItemWithItemIdentifier:atIndex:]'
void _IM_NSToolbar_insertItemWithItemIdentifier_CatIndex_C(NSToolbar *_self, NSString* itemIdentifier, int index);

// method '-[NSToolbar isVisible]'
BOOL _IM_NSToolbar_isVisible(NSToolbar *_self);

// method '-[NSToolbar items]'
id _IM_NSToolbar_items(NSToolbar *_self);

// method '-[NSToolbar removeItemAtIndex:]'
void _IM_NSToolbar_removeItemAtIndex_C(NSToolbar *_self, int index);

// method '-[NSToolbar runCustomizationPalette:]'
void _IM_NSToolbar_runCustomizationPalette_C(NSToolbar *_self, id sender);

// method '-[NSToolbar selectedItemIdentifier]'
NSString* _IM_NSToolbar_selectedItemIdentifier(NSToolbar *_self);

// method '-[NSToolbar setAllowsUserCustomization:]'
void _IM_NSToolbar_setAllowsUserCustomization_C(NSToolbar *_self, BOOL allowCustomization);

// method '-[NSToolbar setAutosavesConfiguration:]'
void _IM_NSToolbar_setAutosavesConfiguration_C(NSToolbar *_self, BOOL flag);

// method '-[NSToolbar setConfigurationFromDictionary:]'
void _IM_NSToolbar_setConfigurationFromDictionary_C(NSToolbar *_self, id configDict);

// method '-[NSToolbar setDelegate:]'
void _IM_NSToolbar_setDelegate_C(NSToolbar *_self, id delegate);

// method '-[NSToolbar setDisplayMode:]'
void _IM_NSToolbar_setDisplayMode_C(NSToolbar *_self, int displayMode);

// method '-[NSToolbar setSelectedItemIdentifier:]'
void _IM_NSToolbar_setSelectedItemIdentifier_C(NSToolbar *_self, NSString* itemIdentifier);

// method '-[NSToolbar setShowsBaselineSeparator:]'
void _IM_NSToolbar_setShowsBaselineSeparator_C(NSToolbar *_self, BOOL flag);

// method '-[NSToolbar setSizeMode:]'
void _IM_NSToolbar_setSizeMode_C(NSToolbar *_self, int sizeMode);

// method '-[NSToolbar setVisible:]'
void _IM_NSToolbar_setVisible_C(NSToolbar *_self, BOOL shown);

// method '-[NSToolbar showsBaselineSeparator]'
BOOL _IM_NSToolbar_showsBaselineSeparator(NSToolbar *_self);

// method '-[NSToolbar sizeMode]'
int _IM_NSToolbar_sizeMode(NSToolbar *_self);

// method '-[NSToolbar validateVisibleItems]'
void _IM_NSToolbar_validateVisibleItems(NSToolbar *_self);

// method '-[NSToolbar visibleItems]'
id _IM_NSToolbar_visibleItems(NSToolbar *_self);

// method '-[NSToolbarItem action]'
SEL _IM_NSToolbarItem_action(NSToolbarItem *_self);

// method '-[NSToolbarItem allowsDuplicatesInToolbar]'
BOOL _IM_NSToolbarItem_allowsDuplicatesInToolbar(NSToolbarItem *_self);

// method '-[NSToolbarItem autovalidates]'
BOOL _IM_NSToolbarItem_autovalidates(NSToolbarItem *_self);

// method '-[NSToolbarItem image]'
NSImage* _IM_NSToolbarItem_image(NSToolbarItem *_self);

// method '-[NSToolbarItem initWithItemIdentifier:]'
NSToolbarItem *_IM_NSToolbarItem_initWithItemIdentifier_C(NSToolbarItem *_self, NSString* itemIdentifier);

// method '-[NSToolbarItem isEnabled]'
BOOL _IM_NSToolbarItem_isEnabled(NSToolbarItem *_self);

// method '-[NSToolbarItem itemIdentifier]'
NSString* _IM_NSToolbarItem_itemIdentifier(NSToolbarItem *_self);

// method '-[NSToolbarItem label]'
NSString* _IM_NSToolbarItem_label(NSToolbarItem *_self);

// method '-[NSToolbarItem maxSize]'
struct _NSSize _IM_NSToolbarItem_maxSize(NSToolbarItem *_self);

// method '-[NSToolbarItem menuFormRepresentation]'
NSMenuItem* _IM_NSToolbarItem_menuFormRepresentation(NSToolbarItem *_self);

// method '-[NSToolbarItem minSize]'
struct _NSSize _IM_NSToolbarItem_minSize(NSToolbarItem *_self);

// method '-[NSToolbarItem paletteLabel]'
NSString* _IM_NSToolbarItem_paletteLabel(NSToolbarItem *_self);

// method '-[NSToolbarItem setAction:]'
void _IM_NSToolbarItem_setAction_C(NSToolbarItem *_self, SEL action);

// method '-[NSToolbarItem setAutovalidates:]'
void _IM_NSToolbarItem_setAutovalidates_C(NSToolbarItem *_self, BOOL resistance);

// method '-[NSToolbarItem setEnabled:]'
void _IM_NSToolbarItem_setEnabled_C(NSToolbarItem *_self, BOOL enabled);

// method '-[NSToolbarItem setImage:]'
void _IM_NSToolbarItem_setImage_C(NSToolbarItem *_self, NSImage* image);

// method '-[NSToolbarItem setLabel:]'
void _IM_NSToolbarItem_setLabel_C(NSToolbarItem *_self, NSString* label);

// method '-[NSToolbarItem setMaxSize:]'
void _IM_NSToolbarItem_setMaxSize_C(NSToolbarItem *_self, struct _NSSize size);

// method '-[NSToolbarItem setMenuFormRepresentation:]'
void _IM_NSToolbarItem_setMenuFormRepresentation_C(NSToolbarItem *_self, NSMenuItem* menuItem);

// method '-[NSToolbarItem setMinSize:]'
void _IM_NSToolbarItem_setMinSize_C(NSToolbarItem *_self, struct _NSSize size);

// method '-[NSToolbarItem setPaletteLabel:]'
void _IM_NSToolbarItem_setPaletteLabel_C(NSToolbarItem *_self, NSString* paletteLabel);

// method '-[NSToolbarItem setTag:]'
void _IM_NSToolbarItem_setTag_C(NSToolbarItem *_self, int tag);

// method '-[NSToolbarItem setTarget:]'
void _IM_NSToolbarItem_setTarget_C(NSToolbarItem *_self, id target);

// method '-[NSToolbarItem setToolTip:]'
void _IM_NSToolbarItem_setToolTip_C(NSToolbarItem *_self, NSString* toolTip);

// method '-[NSToolbarItem setView:]'
void _IM_NSToolbarItem_setView_C(NSToolbarItem *_self, NSView* view);

// method '-[NSToolbarItem setVisibilityPriority:]'
void _IM_NSToolbarItem_setVisibilityPriority_C(NSToolbarItem *_self, int visibilityPriority);

// method '-[NSToolbarItem tag]'
int _IM_NSToolbarItem_tag(NSToolbarItem *_self);

// method '-[NSToolbarItem target]'
id _IM_NSToolbarItem_target(NSToolbarItem *_self);

// method '-[NSToolbarItem toolTip]'
NSString* _IM_NSToolbarItem_toolTip(NSToolbarItem *_self);

// method '-[NSToolbarItem toolbar]'
NSToolbar* _IM_NSToolbarItem_toolbar(NSToolbarItem *_self);

// method '-[NSToolbarItem validate]'
void _IM_NSToolbarItem_validate(NSToolbarItem *_self);

// method '-[NSToolbarItem view]'
NSView* _IM_NSToolbarItem_view(NSToolbarItem *_self);

// method '-[NSToolbarItem visibilityPriority]'
int _IM_NSToolbarItem_visibilityPriority(NSToolbarItem *_self);

// method '-[NSTreeController add:]'
void _IM_NSTreeController_add_C(NSTreeController *_self, id sender);

// method '-[NSTreeController addChild:]'
void _IM_NSTreeController_addChild_C(NSTreeController *_self, id sender);

// method '-[NSTreeController addSelectionIndexPaths:]'
BOOL _IM_NSTreeController_addSelectionIndexPaths_C(NSTreeController *_self, id indexPaths);

// method '-[NSTreeController alwaysUsesMultipleValuesMarker]'
BOOL _IM_NSTreeController_alwaysUsesMultipleValuesMarker(NSTreeController *_self);

// method '-[NSTreeController arrangedObjects]'
id _IM_NSTreeController_arrangedObjects(NSTreeController *_self);

// method '-[NSTreeController avoidsEmptySelection]'
BOOL _IM_NSTreeController_avoidsEmptySelection(NSTreeController *_self);

// method '-[NSTreeController canAddChild]'
BOOL _IM_NSTreeController_canAddChild(NSTreeController *_self);

// method '-[NSTreeController canInsert]'
BOOL _IM_NSTreeController_canInsert(NSTreeController *_self);

// method '-[NSTreeController canInsertChild]'
BOOL _IM_NSTreeController_canInsertChild(NSTreeController *_self);

// method '-[NSTreeController childrenKeyPath]'
NSString* _IM_NSTreeController_childrenKeyPath(NSTreeController *_self);

// method '-[NSTreeController content]'
id _IM_NSTreeController_content(NSTreeController *_self);

// method '-[NSTreeController countKeyPath]'
NSString* _IM_NSTreeController_countKeyPath(NSTreeController *_self);

// method '-[NSTreeController insert:]'
void _IM_NSTreeController_insert_C(NSTreeController *_self, id sender);

// method '-[NSTreeController insertChild:]'
void _IM_NSTreeController_insertChild_C(NSTreeController *_self, id sender);

// method '-[NSTreeController insertObject:atArrangedObjectIndexPath:]'
void _IM_NSTreeController_insertObject_CatArrangedObjectIndexPath_C(NSTreeController *_self, id object, id indexPath);

// method '-[NSTreeController insertObjects:atArrangedObjectIndexPaths:]'
void _IM_NSTreeController_insertObjects_CatArrangedObjectIndexPaths_C(NSTreeController *_self, id objects, id indexPaths);

// method '-[NSTreeController leafKeyPath]'
NSString* _IM_NSTreeController_leafKeyPath(NSTreeController *_self);

// method '-[NSTreeController preservesSelection]'
BOOL _IM_NSTreeController_preservesSelection(NSTreeController *_self);

// method '-[NSTreeController rearrangeObjects]'
void _IM_NSTreeController_rearrangeObjects(NSTreeController *_self);

// method '-[NSTreeController remove:]'
void _IM_NSTreeController_remove_C(NSTreeController *_self, id sender);

// method '-[NSTreeController removeObjectAtArrangedObjectIndexPath:]'
void _IM_NSTreeController_removeObjectAtArrangedObjectIndexPath_C(NSTreeController *_self, id indexPath);

// method '-[NSTreeController removeObjectsAtArrangedObjectIndexPaths:]'
void _IM_NSTreeController_removeObjectsAtArrangedObjectIndexPaths_C(NSTreeController *_self, id indexPaths);

// method '-[NSTreeController removeSelectionIndexPaths:]'
BOOL _IM_NSTreeController_removeSelectionIndexPaths_C(NSTreeController *_self, id indexPaths);

// method '-[NSTreeController selectedObjects]'
id _IM_NSTreeController_selectedObjects(NSTreeController *_self);

// method '-[NSTreeController selectionIndexPath]'
id _IM_NSTreeController_selectionIndexPath(NSTreeController *_self);

// method '-[NSTreeController selectionIndexPaths]'
id _IM_NSTreeController_selectionIndexPaths(NSTreeController *_self);

// method '-[NSTreeController selectsInsertedObjects]'
BOOL _IM_NSTreeController_selectsInsertedObjects(NSTreeController *_self);

// method '-[NSTreeController setAlwaysUsesMultipleValuesMarker:]'
void _IM_NSTreeController_setAlwaysUsesMultipleValuesMarker_C(NSTreeController *_self, BOOL flag);

// method '-[NSTreeController setAvoidsEmptySelection:]'
void _IM_NSTreeController_setAvoidsEmptySelection_C(NSTreeController *_self, BOOL flag);

// method '-[NSTreeController setChildrenKeyPath:]'
void _IM_NSTreeController_setChildrenKeyPath_C(NSTreeController *_self, NSString* keyPath);

// method '-[NSTreeController setContent:]'
void _IM_NSTreeController_setContent_C(NSTreeController *_self, id content);

// method '-[NSTreeController setCountKeyPath:]'
void _IM_NSTreeController_setCountKeyPath_C(NSTreeController *_self, NSString* keyPath);

// method '-[NSTreeController setLeafKeyPath:]'
void _IM_NSTreeController_setLeafKeyPath_C(NSTreeController *_self, NSString* keyPath);

// method '-[NSTreeController setPreservesSelection:]'
void _IM_NSTreeController_setPreservesSelection_C(NSTreeController *_self, BOOL flag);

// method '-[NSTreeController setSelectionIndexPath:]'
BOOL _IM_NSTreeController_setSelectionIndexPath_C(NSTreeController *_self, id indexPath);

// method '-[NSTreeController setSelectionIndexPaths:]'
BOOL _IM_NSTreeController_setSelectionIndexPaths_C(NSTreeController *_self, id indexPaths);

// method '-[NSTreeController setSelectsInsertedObjects:]'
void _IM_NSTreeController_setSelectsInsertedObjects_C(NSTreeController *_self, BOOL flag);

// method '-[NSTreeController setSortDescriptors:]'
void _IM_NSTreeController_setSortDescriptors_C(NSTreeController *_self, id sortDescriptors);

// method '-[NSTreeController sortDescriptors]'
id _IM_NSTreeController_sortDescriptors(NSTreeController *_self);

// method '-[NSTypesetter actionForControlCharacterAtIndex:]'
int _IM_NSTypesetter_actionForControlCharacterAtIndex_C(NSTypesetter *_self, unsigned int charIndex);

// method '-[NSTypesetter attributedString]'
NSAttributedString* _IM_NSTypesetter_attributedString(NSTypesetter *_self);

// method '-[NSTypesetter attributesForExtraLineFragment]'
id _IM_NSTypesetter_attributesForExtraLineFragment(NSTypesetter *_self);

// method '-[NSTypesetter baselineOffsetInLayoutManager:glyphIndex:]'
float _IM_NSTypesetter_baselineOffsetInLayoutManager_CglyphIndex_C(NSTypesetter *_self, NSLayoutManager* layoutMgr, unsigned int glyphIndex);

// method '-[NSTypesetter beginLineWithGlyphAtIndex:]'
void _IM_NSTypesetter_beginLineWithGlyphAtIndex_C(NSTypesetter *_self, unsigned int glyphIndex);

// method '-[NSTypesetter beginParagraph]'
void _IM_NSTypesetter_beginParagraph(NSTypesetter *_self);

// method '-[NSTypesetter bidiProcessingEnabled]'
BOOL _IM_NSTypesetter_bidiProcessingEnabled(NSTypesetter *_self);

// method '-[NSTypesetter boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:]'
struct _NSRect _IM_NSTypesetter_boundingBoxForControlGlyphAtIndex_CforTextContainer_CproposedLineFragment_CglyphPosition_CcharacterIndex_C(NSTypesetter *_self, unsigned int glyphIndex, NSTextContainer* textContainer, struct _NSRect proposedRect, struct _NSPoint glyphPosition, unsigned int charIndex);

// method '-[NSTypesetter characterRangeForGlyphRange:actualGlyphRange:]'
struct _NSRange _IM_NSTypesetter_characterRangeForGlyphRange_CactualGlyphRange_C(NSTypesetter *_self, struct _NSRange glyphRange, struct _NSRange *actualGlyphRange);

// method '-[NSTypesetter currentParagraphStyle]'
NSParagraphStyle* _IM_NSTypesetter_currentParagraphStyle(NSTypesetter *_self);

// method '-[NSTypesetter currentTextContainer]'
NSTextContainer* _IM_NSTypesetter_currentTextContainer(NSTypesetter *_self);

// method '+[NSTypesetter defaultTypesetterBehavior]'
int _CM_NSTypesetter_defaultTypesetterBehavior(Class _class);

// method '-[NSTypesetter deleteGlyphsInRange:]'
void _IM_NSTypesetter_deleteGlyphsInRange_C(NSTypesetter *_self, struct _NSRange glyphRange);

// method '-[NSTypesetter endLineWithGlyphRange:]'
void _IM_NSTypesetter_endLineWithGlyphRange_C(NSTypesetter *_self, struct _NSRange lineGlyphRange);

// method '-[NSTypesetter endParagraph]'
void _IM_NSTypesetter_endParagraph(NSTypesetter *_self);

// method '-[NSTypesetter getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:]'
void _IM_NSTypesetter_getLineFragmentRect_CusedRect_CforParagraphSeparatorGlyphRange_CatProposedOrigin_C(NSTypesetter *_self, struct _NSRect *lineFragmentRect, struct _NSRect *lineFragmentUsedRect, struct _NSRange paragraphSeparatorGlyphRange, struct _NSPoint lineOrigin);

// method '-[NSTypesetter getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:]'
void _IM_NSTypesetter_getLineFragmentRect_CusedRect_CremainingRect_CforStartingGlyphAtIndex_CproposedRect_ClineSpacing_CparagraphSpacingBefore_CparagraphSpacingAfter_C(NSTypesetter *_self, struct _NSRect *lineFragmentRect, struct _NSRect *lineFragmentUsedRect, struct _NSRect *remainingRect, unsigned int startingGlyphIndex, struct _NSRect proposedRect, float lineSpacing, float paragraphSpacingBefore, float paragraphSpacingAfter);

// method '-[NSTypesetter glyphRangeForCharacterRange:actualCharacterRange:]'
struct _NSRange _IM_NSTypesetter_glyphRangeForCharacterRange_CactualCharacterRange_C(NSTypesetter *_self, struct _NSRange charRange, struct _NSRange *actualCharRange);

// method '-[NSTypesetter hyphenCharacterForGlyphAtIndex:]'
unsigned long _IM_NSTypesetter_hyphenCharacterForGlyphAtIndex_C(NSTypesetter *_self, unsigned int glyphIndex);

// method '-[NSTypesetter hyphenationFactor]'
float _IM_NSTypesetter_hyphenationFactor(NSTypesetter *_self);

// method '-[NSTypesetter hyphenationFactorForGlyphAtIndex:]'
float _IM_NSTypesetter_hyphenationFactorForGlyphAtIndex_C(NSTypesetter *_self, unsigned int glyphIndex);

// method '-[NSTypesetter insertGlyph:atGlyphIndex:characterIndex:]'
void _IM_NSTypesetter_insertGlyph_CatGlyphIndex_CcharacterIndex_C(NSTypesetter *_self, unsigned int glyph, unsigned int glyphIndex, unsigned int characterIndex);

// method '-[NSTypesetter layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:]'
void _IM_NSTypesetter_layoutGlyphsInLayoutManager_CstartingAtGlyphIndex_CmaxNumberOfLineFragments_CnextGlyphIndex_C(NSTypesetter *_self, NSLayoutManager* layoutManager, unsigned int startGlyphIndex, unsigned int maxNumLines, unsigned int *nextGlyph);

// method '-[NSTypesetter layoutManager]'
NSLayoutManager* _IM_NSTypesetter_layoutManager(NSTypesetter *_self);

// method '-[NSTypesetter layoutParagraphAtPoint:]'
unsigned int _IM_NSTypesetter_layoutParagraphAtPoint_C(NSTypesetter *_self, struct _NSPoint *lineFragmentOrigin);

// method '-[NSTypesetter lineFragmentPadding]'
float _IM_NSTypesetter_lineFragmentPadding(NSTypesetter *_self);

// method '-[NSTypesetter lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:]'
float _IM_NSTypesetter_lineSpacingAfterGlyphAtIndex_CwithProposedLineFragmentRect_C(NSTypesetter *_self, unsigned int glyphIndex, struct _NSRect rect);

// method '-[NSTypesetter paragraphCharacterRange]'
struct _NSRange _IM_NSTypesetter_paragraphCharacterRange(NSTypesetter *_self);

// method '-[NSTypesetter paragraphGlyphRange]'
struct _NSRange _IM_NSTypesetter_paragraphGlyphRange(NSTypesetter *_self);

// method '-[NSTypesetter paragraphSeparatorCharacterRange]'
struct _NSRange _IM_NSTypesetter_paragraphSeparatorCharacterRange(NSTypesetter *_self);

// method '-[NSTypesetter paragraphSeparatorGlyphRange]'
struct _NSRange _IM_NSTypesetter_paragraphSeparatorGlyphRange(NSTypesetter *_self);

// method '-[NSTypesetter paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:]'
float _IM_NSTypesetter_paragraphSpacingAfterGlyphAtIndex_CwithProposedLineFragmentRect_C(NSTypesetter *_self, unsigned int glyphIndex, struct _NSRect rect);

// method '-[NSTypesetter paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:]'
float _IM_NSTypesetter_paragraphSpacingBeforeGlyphAtIndex_CwithProposedLineFragmentRect_C(NSTypesetter *_self, unsigned int glyphIndex, struct _NSRect rect);

// method '+[NSTypesetter printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:]'
struct _NSSize _CM_NSTypesetter_printingAdjustmentInLayoutManager_CforNominallySpacedGlyphRange_CpackedGlyphs_Ccount_C(Class _class, NSLayoutManager* layoutMgr, struct _NSRange nominallySpacedGlyphsRange, const unsigned char* packedGlyphs, unsigned int packedGlyphsCount);

// method '-[NSTypesetter setAttachmentSize:forGlyphRange:]'
void _IM_NSTypesetter_setAttachmentSize_CforGlyphRange_C(NSTypesetter *_self, struct _NSSize attachmentSize, struct _NSRange glyphRange);

// method '-[NSTypesetter setAttributedString:]'
void _IM_NSTypesetter_setAttributedString_C(NSTypesetter *_self, NSAttributedString* attrString);

// method '-[NSTypesetter setBidiProcessingEnabled:]'
void _IM_NSTypesetter_setBidiProcessingEnabled_C(NSTypesetter *_self, BOOL flag);

// method '-[NSTypesetter setDrawsOutsideLineFragment:forGlyphRange:]'
void _IM_NSTypesetter_setDrawsOutsideLineFragment_CforGlyphRange_C(NSTypesetter *_self, BOOL flag, struct _NSRange glyphRange);

// method '-[NSTypesetter setHardInvalidation:forGlyphRange:]'
void _IM_NSTypesetter_setHardInvalidation_CforGlyphRange_C(NSTypesetter *_self, BOOL flag, struct _NSRange glyphRange);

// method '-[NSTypesetter setHyphenationFactor:]'
void _IM_NSTypesetter_setHyphenationFactor_C(NSTypesetter *_self, float factor);

// method '-[NSTypesetter setLineFragmentPadding:]'
void _IM_NSTypesetter_setLineFragmentPadding_C(NSTypesetter *_self, float padding);

// method '-[NSTypesetter setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:]'
void _IM_NSTypesetter_setLineFragmentRect_CforGlyphRange_CusedRect_CbaselineOffset_C(NSTypesetter *_self, struct _NSRect fragmentRect, struct _NSRange glyphRange, struct _NSRect usedRect, float baselineOffset);

// method '-[NSTypesetter setNotShownAttribute:forGlyphRange:]'
void _IM_NSTypesetter_setNotShownAttribute_CforGlyphRange_C(NSTypesetter *_self, BOOL flag, struct _NSRange glyphRange);

// method '-[NSTypesetter setParagraphGlyphRange:separatorGlyphRange:]'
void _IM_NSTypesetter_setParagraphGlyphRange_CseparatorGlyphRange_C(NSTypesetter *_self, struct _NSRange paragraphRange, struct _NSRange paragraphSeparatorRange);

// method '-[NSTypesetter setTypesetterBehavior:]'
void _IM_NSTypesetter_setTypesetterBehavior_C(NSTypesetter *_self, int behavior);

// method '-[NSTypesetter setUsesFontLeading:]'
void _IM_NSTypesetter_setUsesFontLeading_C(NSTypesetter *_self, BOOL flag);

// method '+[NSTypesetter sharedSystemTypesetter]'
id _CM_NSTypesetter_sharedSystemTypesetter(Class _class);

// method '+[NSTypesetter sharedSystemTypesetterForBehavior:]'
id _CM_NSTypesetter_sharedSystemTypesetterForBehavior_C(Class _class, int theBehavior);

// method '-[NSTypesetter shouldBreakLineByHyphenatingBeforeCharacterAtIndex:]'
BOOL _IM_NSTypesetter_shouldBreakLineByHyphenatingBeforeCharacterAtIndex_C(NSTypesetter *_self, unsigned int charIndex);

// method '-[NSTypesetter shouldBreakLineByWordBeforeCharacterAtIndex:]'
BOOL _IM_NSTypesetter_shouldBreakLineByWordBeforeCharacterAtIndex_C(NSTypesetter *_self, unsigned int charIndex);

// method '-[NSTypesetter substituteFontForFont:]'
NSFont* _IM_NSTypesetter_substituteFontForFont_C(NSTypesetter *_self, NSFont* originalFont);

// method '-[NSTypesetter textContainers]'
id _IM_NSTypesetter_textContainers(NSTypesetter *_self);

// method '-[NSTypesetter textTabForGlyphLocation:writingDirection:maxLocation:]'
NSTextTab* _IM_NSTypesetter_textTabForGlyphLocation_CwritingDirection_CmaxLocation_C(NSTypesetter *_self, float glyphLocation, int direction, float maxLocation);

// method '-[NSTypesetter typesetterBehavior]'
int _IM_NSTypesetter_typesetterBehavior(NSTypesetter *_self);

// method '-[NSTypesetter usesFontLeading]'
BOOL _IM_NSTypesetter_usesFontLeading(NSTypesetter *_self);

// method '-[NSTypesetter willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:]'
void _IM_NSTypesetter_willSetLineFragmentRect_CforGlyphRange_CusedRect_CbaselineOffset_C(NSTypesetter *_self, struct _NSRect *lineRect, struct _NSRange glyphRange, struct _NSRect *usedRect, float *baselineOffset);

// method '+[NSURL URLFromPasteboard:]'
NSURL* _CM_NSURL_URLFromPasteboard_C(Class _class, NSPasteboard* pasteBoard);

// method '-[NSURL writeToPasteboard:]'
void _IM_NSURL_writeToPasteboard_C(NSURL *_self, NSPasteboard* pasteBoard);

// method '-[NSUserDefaultsController appliesImmediately]'
BOOL _IM_NSUserDefaultsController_appliesImmediately(NSUserDefaultsController *_self);

// method '-[NSUserDefaultsController defaults]'
id _IM_NSUserDefaultsController_defaults(NSUserDefaultsController *_self);

// method '-[NSUserDefaultsController hasUnappliedChanges]'
BOOL _IM_NSUserDefaultsController_hasUnappliedChanges(NSUserDefaultsController *_self);

// method '-[NSUserDefaultsController initWithDefaults:initialValues:]'
NSUserDefaultsController *_IM_NSUserDefaultsController_initWithDefaults_CinitialValues_C(NSUserDefaultsController *_self, id defaults, id initialValues);

// method '-[NSUserDefaultsController initialValues]'
id _IM_NSUserDefaultsController_initialValues(NSUserDefaultsController *_self);

// method '-[NSUserDefaultsController revert:]'
void _IM_NSUserDefaultsController_revert_C(NSUserDefaultsController *_self, id sender);

// method '-[NSUserDefaultsController revertToInitialValues:]'
void _IM_NSUserDefaultsController_revertToInitialValues_C(NSUserDefaultsController *_self, id sender);

// method '-[NSUserDefaultsController save:]'
void _IM_NSUserDefaultsController_save_C(NSUserDefaultsController *_self, id sender);

// method '-[NSUserDefaultsController setAppliesImmediately:]'
void _IM_NSUserDefaultsController_setAppliesImmediately_C(NSUserDefaultsController *_self, BOOL flag);

// method '-[NSUserDefaultsController setInitialValues:]'
void _IM_NSUserDefaultsController_setInitialValues_C(NSUserDefaultsController *_self, id initialValues);

// method '+[NSUserDefaultsController sharedUserDefaultsController]'
id _CM_NSUserDefaultsController_sharedUserDefaultsController(Class _class);

// method '-[NSUserDefaultsController values]'
id _IM_NSUserDefaultsController_values(NSUserDefaultsController *_self);

// method '-[NSView acceptsFirstMouse:]'
BOOL _IM_NSView_acceptsFirstMouse_C(NSView *_self, NSEvent* theEvent);

// method '-[NSView addCursorRect:cursor:]'
void _IM_NSView_addCursorRect_Ccursor_C(NSView *_self, struct _NSRect aRect, NSCursor* anObj);

// method '-[NSView addSubview:]'
void _IM_NSView_addSubview_C(NSView *_self, NSView* aView);

// method '-[NSView addSubview:positioned:relativeTo:]'
void _IM_NSView_addSubview_Cpositioned_CrelativeTo_C(NSView *_self, NSView* aView, int place, NSView* otherView);

// method '-[NSView addToolTipRect:owner:userData:]'
int _IM_NSView_addToolTipRect_Cowner_CuserData_C(NSView *_self, struct _NSRect aRect, id anObject, void *data);

// method '-[NSView addTrackingRect:owner:userData:assumeInside:]'
int _IM_NSView_addTrackingRect_Cowner_CuserData_CassumeInside_C(NSView *_self, struct _NSRect aRect, id anObject, void *data, BOOL flag);

// method '-[NSView adjustPageHeightNew:top:bottom:limit:]'
void _IM_NSView_adjustPageHeightNew_Ctop_Cbottom_Climit_C(NSView *_self, float *newBottom, float oldTop, float oldBottom, float bottomLimit);

// method '-[NSView adjustPageWidthNew:left:right:limit:]'
void _IM_NSView_adjustPageWidthNew_Cleft_Cright_Climit_C(NSView *_self, float *newRight, float oldLeft, float oldRight, float rightLimit);

// method '-[NSView adjustScroll:]'
struct _NSRect _IM_NSView_adjustScroll_C(NSView *_self, struct _NSRect newVisible);

// method '-[NSView allocateGState]'
void _IM_NSView_allocateGState(NSView *_self);

// method '-[NSView ancestorSharedWithView:]'
NSView* _IM_NSView_ancestorSharedWithView_C(NSView *_self, NSView* aView);

// method '-[NSView autoresizesSubviews]'
BOOL _IM_NSView_autoresizesSubviews(NSView *_self);

// method '-[NSView autoresizingMask]'
unsigned int _IM_NSView_autoresizingMask(NSView *_self);

// method '-[NSView autoscroll:]'
BOOL _IM_NSView_autoscroll_C(NSView *_self, NSEvent* theEvent);

// method '-[NSView beginDocument]'
void _IM_NSView_beginDocument(NSView *_self);

// method '-[NSView beginPageInRect:atPlacement:]'
void _IM_NSView_beginPageInRect_CatPlacement_C(NSView *_self, struct _NSRect aRect, struct _NSPoint location);

// method '-[NSView bitmapImageRepForCachingDisplayInRect:]'
NSBitmapImageRep* _IM_NSView_bitmapImageRepForCachingDisplayInRect_C(NSView *_self, struct _NSRect rect);

// method '-[NSView bounds]'
struct _NSRect _IM_NSView_bounds(NSView *_self);

// method '-[NSView boundsRotation]'
float _IM_NSView_boundsRotation(NSView *_self);

// method '-[NSView cacheDisplayInRect:toBitmapImageRep:]'
void _IM_NSView_cacheDisplayInRect_CtoBitmapImageRep_C(NSView *_self, struct _NSRect rect, NSBitmapImageRep* bitmapImageRep);

// method '-[NSView canBecomeKeyView]'
BOOL _IM_NSView_canBecomeKeyView(NSView *_self);

// method '-[NSView canDraw]'
BOOL _IM_NSView_canDraw(NSView *_self);

// method '-[NSView centerScanRect:]'
struct _NSRect _IM_NSView_centerScanRect_C(NSView *_self, struct _NSRect aRect);

// method '-[NSView convertPoint:fromView:]'
struct _NSPoint _IM_NSView_convertPoint_CfromView_C(NSView *_self, struct _NSPoint aPoint, NSView* aView);

// method '-[NSView convertPoint:toView:]'
struct _NSPoint _IM_NSView_convertPoint_CtoView_C(NSView *_self, struct _NSPoint aPoint, NSView* aView);

// method '-[NSView convertRect:fromView:]'
struct _NSRect _IM_NSView_convertRect_CfromView_C(NSView *_self, struct _NSRect aRect, NSView* aView);

// method '-[NSView convertRect:toView:]'
struct _NSRect _IM_NSView_convertRect_CtoView_C(NSView *_self, struct _NSRect aRect, NSView* aView);

// method '-[NSView convertSize:fromView:]'
struct _NSSize _IM_NSView_convertSize_CfromView_C(NSView *_self, struct _NSSize aSize, NSView* aView);

// method '-[NSView convertSize:toView:]'
struct _NSSize _IM_NSView_convertSize_CtoView_C(NSView *_self, struct _NSSize aSize, NSView* aView);

// method '-[NSView dataWithEPSInsideRect:]'
id _IM_NSView_dataWithEPSInsideRect_C(NSView *_self, struct _NSRect rect);

// method '-[NSView dataWithPDFInsideRect:]'
id _IM_NSView_dataWithPDFInsideRect_C(NSView *_self, struct _NSRect rect);

// method '+[NSView defaultFocusRingType]'
int _CM_NSView_defaultFocusRingType(Class _class);

// method '+[NSView defaultMenu]'
NSMenu* _CM_NSView_defaultMenu(Class _class);

// method '-[NSView didAddSubview:]'
void _IM_NSView_didAddSubview_C(NSView *_self, NSView* subview);

// method '-[NSView discardCursorRects]'
void _IM_NSView_discardCursorRects(NSView *_self);

// method '-[NSView display]'
void _IM_NSView_display(NSView *_self);

// method '-[NSView displayIfNeeded]'
void _IM_NSView_displayIfNeeded(NSView *_self);

// method '-[NSView displayIfNeededIgnoringOpacity]'
void _IM_NSView_displayIfNeededIgnoringOpacity(NSView *_self);

// method '-[NSView displayIfNeededInRect:]'
void _IM_NSView_displayIfNeededInRect_C(NSView *_self, struct _NSRect rect);

// method '-[NSView displayIfNeededInRectIgnoringOpacity:]'
void _IM_NSView_displayIfNeededInRectIgnoringOpacity_C(NSView *_self, struct _NSRect rect);

// method '-[NSView displayRect:]'
void _IM_NSView_displayRect_C(NSView *_self, struct _NSRect rect);

// method '-[NSView displayRectIgnoringOpacity:]'
void _IM_NSView_displayRectIgnoringOpacity_C(NSView *_self, struct _NSRect rect);

// method '-[NSView displayRectIgnoringOpacity:inContext:]'
void _IM_NSView_displayRectIgnoringOpacity_CinContext_C(NSView *_self, struct _NSRect aRect, NSGraphicsContext* context);

// method '-[NSView dragFile:fromRect:slideBack:event:]'
BOOL _IM_NSView_dragFile_CfromRect_CslideBack_Cevent_C(NSView *_self, NSString* filename, struct _NSRect rect, BOOL aFlag, NSEvent* event);

// method '-[NSView dragImage:at:offset:event:pasteboard:source:slideBack:]'
void _IM_NSView_dragImage_Cat_Coffset_Cevent_Cpasteboard_Csource_CslideBack_C(NSView *_self, NSImage* anImage, struct _NSPoint viewLocation, struct _NSSize initialOffset, NSEvent* event, NSPasteboard* pboard, id sourceObj, BOOL slideFlag);

// method '-[NSView dragPromisedFilesOfTypes:fromRect:source:slideBack:event:]'
BOOL _IM_NSView_dragPromisedFilesOfTypes_CfromRect_Csource_CslideBack_Cevent_C(NSView *_self, id typeArray, struct _NSRect rect, id sourceObject, BOOL aFlag, NSEvent* event);

// method '-[NSView drawPageBorderWithSize:]'
void _IM_NSView_drawPageBorderWithSize_C(NSView *_self, struct _NSSize borderSize);

// method '-[NSView drawRect:]'
void _IM_NSView_drawRect_C(NSView *_self, struct _NSRect rect);

// method '-[NSView drawSheetBorderWithSize:]'
void _IM_NSView_drawSheetBorderWithSize_C(NSView *_self, struct _NSSize borderSize);

// method '-[NSView enclosingScrollView]'
NSScrollView* _IM_NSView_enclosingScrollView(NSView *_self);

// method '-[NSView endDocument]'
void _IM_NSView_endDocument(NSView *_self);

// method '-[NSView endPage]'
void _IM_NSView_endPage(NSView *_self);

// method '-[NSView focusRingType]'
int _IM_NSView_focusRingType(NSView *_self);

// method '+[NSView focusView]'
NSView* _CM_NSView_focusView(Class _class);

// method '-[NSView frame]'
struct _NSRect _IM_NSView_frame(NSView *_self);

// method '-[NSView frameRotation]'
float _IM_NSView_frameRotation(NSView *_self);

// method '-[NSView gState]'
int _IM_NSView_gState(NSView *_self);

// method '-[NSView getRectsBeingDrawn:count:]'
void _IM_NSView_getRectsBeingDrawn_Ccount_C(NSView *_self, const struct _NSRect** rects, int *count);

// method '-[NSView getRectsExposedDuringLiveResize:count:]'
void _IM_NSView_getRectsExposedDuringLiveResize_Ccount_C(NSView *_self, struct _NSRect *exposedRects, int *count);

// method '-[NSView heightAdjustLimit]'
float _IM_NSView_heightAdjustLimit(NSView *_self);

// method '-[NSView hitTest:]'
NSView* _IM_NSView_hitTest_C(NSView *_self, struct _NSPoint aPoint);

// method '-[NSView inLiveResize]'
BOOL _IM_NSView_inLiveResize(NSView *_self);

// method '-[NSView initWithFrame:]'
NSView *_IM_NSView_initWithFrame_C(NSView *_self, struct _NSRect frameRect);

// method '-[NSView isDescendantOf:]'
BOOL _IM_NSView_isDescendantOf_C(NSView *_self, NSView* aView);

// method '-[NSView isFlipped]'
BOOL _IM_NSView_isFlipped(NSView *_self);

// method '-[NSView isHidden]'
BOOL _IM_NSView_isHidden(NSView *_self);

// method '-[NSView isHiddenOrHasHiddenAncestor]'
BOOL _IM_NSView_isHiddenOrHasHiddenAncestor(NSView *_self);

// method '-[NSView isOpaque]'
BOOL _IM_NSView_isOpaque(NSView *_self);

// method '-[NSView isRotatedFromBase]'
BOOL _IM_NSView_isRotatedFromBase(NSView *_self);

// method '-[NSView isRotatedOrScaledFromBase]'
BOOL _IM_NSView_isRotatedOrScaledFromBase(NSView *_self);

// method '-[NSView knowsPageRange:]'
BOOL _IM_NSView_knowsPageRange_C(NSView *_self, struct _NSRange *range);

// method '-[NSView locationOfPrintRect:]'
struct _NSPoint _IM_NSView_locationOfPrintRect_C(NSView *_self, struct _NSRect aRect);

// method '-[NSView lockFocus]'
void _IM_NSView_lockFocus(NSView *_self);

// method '-[NSView lockFocusIfCanDraw]'
BOOL _IM_NSView_lockFocusIfCanDraw(NSView *_self);

// method '-[NSView lockFocusIfCanDrawInContext:]'
BOOL _IM_NSView_lockFocusIfCanDrawInContext_C(NSView *_self, NSGraphicsContext* context);

// method '-[NSView menuForEvent:]'
NSMenu* _IM_NSView_menuForEvent_C(NSView *_self, NSEvent* event);

// method '-[NSView mouse:inRect:]'
BOOL _IM_NSView_mouse_CinRect_C(NSView *_self, struct _NSPoint aPoint, struct _NSRect aRect);

// method '-[NSView mouseDownCanMoveWindow]'
BOOL _IM_NSView_mouseDownCanMoveWindow(NSView *_self);

// method '-[NSView needsDisplay]'
BOOL _IM_NSView_needsDisplay(NSView *_self);

// method '-[NSView needsPanelToBecomeKey]'
BOOL _IM_NSView_needsPanelToBecomeKey(NSView *_self);

// method '-[NSView needsToDrawRect:]'
BOOL _IM_NSView_needsToDrawRect_C(NSView *_self, struct _NSRect aRect);

// method '-[NSView nextKeyView]'
NSView* _IM_NSView_nextKeyView(NSView *_self);

// method '-[NSView nextValidKeyView]'
NSView* _IM_NSView_nextValidKeyView(NSView *_self);

// method '-[NSView opaqueAncestor]'
NSView* _IM_NSView_opaqueAncestor(NSView *_self);

// method '-[NSView pageFooter]'
NSAttributedString* _IM_NSView_pageFooter(NSView *_self);

// method '-[NSView pageHeader]'
NSAttributedString* _IM_NSView_pageHeader(NSView *_self);

// method '-[NSView performKeyEquivalent:]'
BOOL _IM_NSView_performKeyEquivalent_C(NSView *_self, NSEvent* theEvent);

// method '-[NSView performMnemonic:]'
BOOL _IM_NSView_performMnemonic_C(NSView *_self, NSString* theString);

// method '-[NSView postsBoundsChangedNotifications]'
BOOL _IM_NSView_postsBoundsChangedNotifications(NSView *_self);

// method '-[NSView postsFrameChangedNotifications]'
BOOL _IM_NSView_postsFrameChangedNotifications(NSView *_self);

// method '-[NSView preservesContentDuringLiveResize]'
BOOL _IM_NSView_preservesContentDuringLiveResize(NSView *_self);

// method '-[NSView previousKeyView]'
NSView* _IM_NSView_previousKeyView(NSView *_self);

// method '-[NSView previousValidKeyView]'
NSView* _IM_NSView_previousValidKeyView(NSView *_self);

// method '-[NSView print:]'
void _IM_NSView_print_C(NSView *_self, id sender);

// method '-[NSView printJobTitle]'
NSString* _IM_NSView_printJobTitle(NSView *_self);

// method '-[NSView rectForPage:]'
struct _NSRect _IM_NSView_rectForPage_C(NSView *_self, int page);

// method '-[NSView rectPreservedDuringLiveResize]'
struct _NSRect _IM_NSView_rectPreservedDuringLiveResize(NSView *_self);

// method '-[NSView reflectScrolledClipView:]'
void _IM_NSView_reflectScrolledClipView_C(NSView *_self, NSClipView* aClipView);

// method '-[NSView registerForDraggedTypes:]'
void _IM_NSView_registerForDraggedTypes_C(NSView *_self, id newTypes);

// method '-[NSView registeredDraggedTypes]'
id _IM_NSView_registeredDraggedTypes(NSView *_self);

// method '-[NSView releaseGState]'
void _IM_NSView_releaseGState(NSView *_self);

// method '-[NSView removeAllToolTips]'
void _IM_NSView_removeAllToolTips(NSView *_self);

// method '-[NSView removeCursorRect:cursor:]'
void _IM_NSView_removeCursorRect_Ccursor_C(NSView *_self, struct _NSRect aRect, NSCursor* anObj);

// method '-[NSView removeFromSuperview]'
void _IM_NSView_removeFromSuperview(NSView *_self);

// method '-[NSView removeFromSuperviewWithoutNeedingDisplay]'
void _IM_NSView_removeFromSuperviewWithoutNeedingDisplay(NSView *_self);

// method '-[NSView removeToolTip:]'
void _IM_NSView_removeToolTip_C(NSView *_self, int tag);

// method '-[NSView removeTrackingRect:]'
void _IM_NSView_removeTrackingRect_C(NSView *_self, int tag);

// method '-[NSView renewGState]'
void _IM_NSView_renewGState(NSView *_self);

// method '-[NSView replaceSubview:with:]'
void _IM_NSView_replaceSubview_Cwith_C(NSView *_self, NSView* oldView, NSView* newView);

// method '-[NSView resetCursorRects]'
void _IM_NSView_resetCursorRects(NSView *_self);

// method '-[NSView resizeSubviewsWithOldSize:]'
void _IM_NSView_resizeSubviewsWithOldSize_C(NSView *_self, struct _NSSize oldSize);

// method '-[NSView resizeWithOldSuperviewSize:]'
void _IM_NSView_resizeWithOldSuperviewSize_C(NSView *_self, struct _NSSize oldSize);

// method '-[NSView rotateByAngle:]'
void _IM_NSView_rotateByAngle_C(NSView *_self, float angle);

// method '-[NSView rulerView:didAddMarker:]'
void _IM_NSView_rulerView_CdidAddMarker_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSView rulerView:didMoveMarker:]'
void _IM_NSView_rulerView_CdidMoveMarker_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSView rulerView:didRemoveMarker:]'
void _IM_NSView_rulerView_CdidRemoveMarker_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSView rulerView:handleMouseDown:]'
void _IM_NSView_rulerView_ChandleMouseDown_C(NSView *_self, NSRulerView* ruler, NSEvent* event);

// method '-[NSView rulerView:shouldAddMarker:]'
BOOL _IM_NSView_rulerView_CshouldAddMarker_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSView rulerView:shouldMoveMarker:]'
BOOL _IM_NSView_rulerView_CshouldMoveMarker_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSView rulerView:shouldRemoveMarker:]'
BOOL _IM_NSView_rulerView_CshouldRemoveMarker_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker);

// method '-[NSView rulerView:willAddMarker:atLocation:]'
float _IM_NSView_rulerView_CwillAddMarker_CatLocation_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker, float location);

// method '-[NSView rulerView:willMoveMarker:toLocation:]'
float _IM_NSView_rulerView_CwillMoveMarker_CtoLocation_C(NSView *_self, NSRulerView* ruler, NSRulerMarker* marker, float location);

// method '-[NSView rulerView:willSetClientView:]'
void _IM_NSView_rulerView_CwillSetClientView_C(NSView *_self, NSRulerView* ruler, NSView* newClient);

// method '-[NSView scaleUnitSquareToSize:]'
void _IM_NSView_scaleUnitSquareToSize_C(NSView *_self, struct _NSSize newUnitSize);

// method '-[NSView scrollClipView:toPoint:]'
void _IM_NSView_scrollClipView_CtoPoint_C(NSView *_self, NSClipView* aClipView, struct _NSPoint aPoint);

// method '-[NSView scrollPoint:]'
void _IM_NSView_scrollPoint_C(NSView *_self, struct _NSPoint aPoint);

// method '-[NSView scrollRect:by:]'
void _IM_NSView_scrollRect_Cby_C(NSView *_self, struct _NSRect aRect, struct _NSSize delta);

// method '-[NSView scrollRectToVisible:]'
BOOL _IM_NSView_scrollRectToVisible_C(NSView *_self, struct _NSRect aRect);

// method '-[NSView setAutoresizesSubviews:]'
void _IM_NSView_setAutoresizesSubviews_C(NSView *_self, BOOL flag);

// method '-[NSView setAutoresizingMask:]'
void _IM_NSView_setAutoresizingMask_C(NSView *_self, unsigned int mask);

// method '-[NSView setBounds:]'
void _IM_NSView_setBounds_C(NSView *_self, struct _NSRect aRect);

// method '-[NSView setBoundsOrigin:]'
void _IM_NSView_setBoundsOrigin_C(NSView *_self, struct _NSPoint newOrigin);

// method '-[NSView setBoundsRotation:]'
void _IM_NSView_setBoundsRotation_C(NSView *_self, float angle);

// method '-[NSView setBoundsSize:]'
void _IM_NSView_setBoundsSize_C(NSView *_self, struct _NSSize newSize);

// method '-[NSView setFocusRingType:]'
void _IM_NSView_setFocusRingType_C(NSView *_self, int focusRingType);

// method '-[NSView setFrame:]'
void _IM_NSView_setFrame_C(NSView *_self, struct _NSRect frameRect);

// method '-[NSView setFrameOrigin:]'
void _IM_NSView_setFrameOrigin_C(NSView *_self, struct _NSPoint newOrigin);

// method '-[NSView setFrameRotation:]'
void _IM_NSView_setFrameRotation_C(NSView *_self, float angle);

// method '-[NSView setFrameSize:]'
void _IM_NSView_setFrameSize_C(NSView *_self, struct _NSSize newSize);

// method '-[NSView setHidden:]'
void _IM_NSView_setHidden_C(NSView *_self, BOOL flag);

// method '-[NSView setKeyboardFocusRingNeedsDisplayInRect:]'
void _IM_NSView_setKeyboardFocusRingNeedsDisplayInRect_C(NSView *_self, struct _NSRect rect);

// method '-[NSView setNeedsDisplay:]'
void _IM_NSView_setNeedsDisplay_C(NSView *_self, BOOL flag);

// method '-[NSView setNeedsDisplayInRect:]'
void _IM_NSView_setNeedsDisplayInRect_C(NSView *_self, struct _NSRect invalidRect);

// method '-[NSView setNextKeyView:]'
void _IM_NSView_setNextKeyView_C(NSView *_self, NSView* next);

// method '-[NSView setPostsBoundsChangedNotifications:]'
void _IM_NSView_setPostsBoundsChangedNotifications_C(NSView *_self, BOOL flag);

// method '-[NSView setPostsFrameChangedNotifications:]'
void _IM_NSView_setPostsFrameChangedNotifications_C(NSView *_self, BOOL flag);

// method '-[NSView setToolTip:]'
void _IM_NSView_setToolTip_C(NSView *_self, NSString* string);

// method '-[NSView setUpGState]'
void _IM_NSView_setUpGState(NSView *_self);

// method '-[NSView shouldDelayWindowOrderingForEvent:]'
BOOL _IM_NSView_shouldDelayWindowOrderingForEvent_C(NSView *_self, NSEvent* theEvent);

// method '-[NSView shouldDrawColor]'
BOOL _IM_NSView_shouldDrawColor(NSView *_self);

// method '-[NSView subviews]'
id _IM_NSView_subviews(NSView *_self);

// method '-[NSView superview]'
NSView* _IM_NSView_superview(NSView *_self);

// method '-[NSView tag]'
int _IM_NSView_tag(NSView *_self);

// method '-[NSView toolTip]'
NSString* _IM_NSView_toolTip(NSView *_self);

// method '-[NSView translateOriginToPoint:]'
void _IM_NSView_translateOriginToPoint_C(NSView *_self, struct _NSPoint translation);

// method '-[NSView unlockFocus]'
void _IM_NSView_unlockFocus(NSView *_self);

// method '-[NSView unregisterDraggedTypes]'
void _IM_NSView_unregisterDraggedTypes(NSView *_self);

// method '-[NSView viewDidEndLiveResize]'
void _IM_NSView_viewDidEndLiveResize(NSView *_self);

// method '-[NSView viewDidMoveToSuperview]'
void _IM_NSView_viewDidMoveToSuperview(NSView *_self);

// method '-[NSView viewDidMoveToWindow]'
void _IM_NSView_viewDidMoveToWindow(NSView *_self);

// method '-[NSView viewWillMoveToSuperview:]'
void _IM_NSView_viewWillMoveToSuperview_C(NSView *_self, NSView* newSuperview);

// method '-[NSView viewWillMoveToWindow:]'
void _IM_NSView_viewWillMoveToWindow_C(NSView *_self, NSWindow* newWindow);

// method '-[NSView viewWillStartLiveResize]'
void _IM_NSView_viewWillStartLiveResize(NSView *_self);

// method '-[NSView viewWithTag:]'
id _IM_NSView_viewWithTag_C(NSView *_self, int aTag);

// method '-[NSView visibleRect]'
struct _NSRect _IM_NSView_visibleRect(NSView *_self);

// method '-[NSView wantsDefaultClipping]'
BOOL _IM_NSView_wantsDefaultClipping(NSView *_self);

// method '-[NSView widthAdjustLimit]'
float _IM_NSView_widthAdjustLimit(NSView *_self);

// method '-[NSView willRemoveSubview:]'
void _IM_NSView_willRemoveSubview_C(NSView *_self, NSView* subview);

// method '-[NSView window]'
NSWindow* _IM_NSView_window(NSView *_self);

// method '-[NSView writeEPSInsideRect:toPasteboard:]'
void _IM_NSView_writeEPSInsideRect_CtoPasteboard_C(NSView *_self, struct _NSRect rect, NSPasteboard* pasteboard);

// method '-[NSView writePDFInsideRect:toPasteboard:]'
void _IM_NSView_writePDFInsideRect_CtoPasteboard_C(NSView *_self, struct _NSRect rect, NSPasteboard* pasteboard);

// method '-[NSViewAnimation initWithViewAnimations:]'
NSViewAnimation *_IM_NSViewAnimation_initWithViewAnimations_C(NSViewAnimation *_self, id viewAnimations);

// method '-[NSViewAnimation setViewAnimations:]'
void _IM_NSViewAnimation_setViewAnimations_C(NSViewAnimation *_self, id viewAnimations);

// method '-[NSViewAnimation viewAnimations]'
id _IM_NSViewAnimation_viewAnimations(NSViewAnimation *_self);

// method '-[NSWindow acceptsMouseMovedEvents]'
BOOL _IM_NSWindow_acceptsMouseMovedEvents(NSWindow *_self);

// method '-[NSWindow addChildWindow:ordered:]'
void _IM_NSWindow_addChildWindow_Cordered_C(NSWindow *_self, NSWindow* childWin, int place);

// method '-[NSWindow allowsToolTipsWhenApplicationIsInactive]'
BOOL _IM_NSWindow_allowsToolTipsWhenApplicationIsInactive(NSWindow *_self);

// method '-[NSWindow alphaValue]'
float _IM_NSWindow_alphaValue(NSWindow *_self);

// method '-[NSWindow animationResizeTime:]'
double _IM_NSWindow_animationResizeTime_C(NSWindow *_self, struct _NSRect newFrame);

// method '-[NSWindow areCursorRectsEnabled]'
BOOL _IM_NSWindow_areCursorRectsEnabled(NSWindow *_self);

// method '-[NSWindow aspectRatio]'
struct _NSSize _IM_NSWindow_aspectRatio(NSWindow *_self);

// method '-[NSWindow attachedSheet]'
NSWindow* _IM_NSWindow_attachedSheet(NSWindow *_self);

// method '-[NSWindow autorecalculatesKeyViewLoop]'
BOOL _IM_NSWindow_autorecalculatesKeyViewLoop(NSWindow *_self);

// method '-[NSWindow backgroundColor]'
NSColor* _IM_NSWindow_backgroundColor(NSWindow *_self);

// method '-[NSWindow backingType]'
int _IM_NSWindow_backingType(NSWindow *_self);

// method '-[NSWindow becomeKeyWindow]'
void _IM_NSWindow_becomeKeyWindow(NSWindow *_self);

// method '-[NSWindow becomeMainWindow]'
void _IM_NSWindow_becomeMainWindow(NSWindow *_self);

// method '-[NSWindow cacheImageInRect:]'
void _IM_NSWindow_cacheImageInRect_C(NSWindow *_self, struct _NSRect aRect);

// method '-[NSWindow canBecomeKeyWindow]'
BOOL _IM_NSWindow_canBecomeKeyWindow(NSWindow *_self);

// method '-[NSWindow canBecomeMainWindow]'
BOOL _IM_NSWindow_canBecomeMainWindow(NSWindow *_self);

// method '-[NSWindow canHide]'
BOOL _IM_NSWindow_canHide(NSWindow *_self);

// method '-[NSWindow canStoreColor]'
BOOL _IM_NSWindow_canStoreColor(NSWindow *_self);

// method '-[NSWindow cascadeTopLeftFromPoint:]'
struct _NSPoint _IM_NSWindow_cascadeTopLeftFromPoint_C(NSWindow *_self, struct _NSPoint topLeftPoint);

// method '-[NSWindow center]'
void _IM_NSWindow_center(NSWindow *_self);

// method '-[NSWindow childWindows]'
id _IM_NSWindow_childWindows(NSWindow *_self);

// method '-[NSWindow close]'
void _IM_NSWindow_close(NSWindow *_self);

// method '-[NSWindow constrainFrameRect:toScreen:]'
struct _NSRect _IM_NSWindow_constrainFrameRect_CtoScreen_C(NSWindow *_self, struct _NSRect frameRect, NSScreen* screen);

// method '-[NSWindow contentAspectRatio]'
struct _NSSize _IM_NSWindow_contentAspectRatio(NSWindow *_self);

// method '-[NSWindow contentMaxSize]'
struct _NSSize _IM_NSWindow_contentMaxSize(NSWindow *_self);

// method '-[NSWindow contentMinSize]'
struct _NSSize _IM_NSWindow_contentMinSize(NSWindow *_self);

// method '-[NSWindow contentRectForFrameRect:]'
struct _NSRect _IM_NSWindow_contentRectForFrameRect_C(NSWindow *_self, struct _NSRect frameRect);

// method '+[NSWindow contentRectForFrameRect:styleMask:]'
struct _NSRect _CM_NSWindow_contentRectForFrameRect_CstyleMask_C(Class _class, struct _NSRect fRect, unsigned int aStyle);

// method '-[NSWindow contentResizeIncrements]'
struct _NSSize _IM_NSWindow_contentResizeIncrements(NSWindow *_self);

// method '-[NSWindow contentView]'
id _IM_NSWindow_contentView(NSWindow *_self);

// method '-[NSWindow convertBaseToScreen:]'
struct _NSPoint _IM_NSWindow_convertBaseToScreen_C(NSWindow *_self, struct _NSPoint aPoint);

// method '-[NSWindow convertScreenToBase:]'
struct _NSPoint _IM_NSWindow_convertScreenToBase_C(NSWindow *_self, struct _NSPoint aPoint);

// method '-[NSWindow currentEvent]'
NSEvent* _IM_NSWindow_currentEvent(NSWindow *_self);

// method '-[NSWindow dataWithEPSInsideRect:]'
id _IM_NSWindow_dataWithEPSInsideRect_C(NSWindow *_self, struct _NSRect rect);

// method '-[NSWindow dataWithPDFInsideRect:]'
id _IM_NSWindow_dataWithPDFInsideRect_C(NSWindow *_self, struct _NSRect rect);

// method '-[NSWindow deepestScreen]'
NSScreen* _IM_NSWindow_deepestScreen(NSWindow *_self);

// method '-[NSWindow defaultButtonCell]'
NSButtonCell* _IM_NSWindow_defaultButtonCell(NSWindow *_self);

// method '+[NSWindow defaultDepthLimit]'
int _CM_NSWindow_defaultDepthLimit(Class _class);

// method '-[NSWindow delegate]'
id _IM_NSWindow_delegate(NSWindow *_self);

// method '-[NSWindow deminiaturize:]'
void _IM_NSWindow_deminiaturize_C(NSWindow *_self, id sender);

// method '-[NSWindow depthLimit]'
int _IM_NSWindow_depthLimit(NSWindow *_self);

// method '-[NSWindow deviceDescription]'
id _IM_NSWindow_deviceDescription(NSWindow *_self);

// method '-[NSWindow disableCursorRects]'
void _IM_NSWindow_disableCursorRects(NSWindow *_self);

// method '-[NSWindow disableFlushWindow]'
void _IM_NSWindow_disableFlushWindow(NSWindow *_self);

// method '-[NSWindow disableKeyEquivalentForDefaultButtonCell]'
void _IM_NSWindow_disableKeyEquivalentForDefaultButtonCell(NSWindow *_self);

// method '-[NSWindow disableScreenUpdatesUntilFlush]'
void _IM_NSWindow_disableScreenUpdatesUntilFlush(NSWindow *_self);

// method '-[NSWindow discardCachedImage]'
void _IM_NSWindow_discardCachedImage(NSWindow *_self);

// method '-[NSWindow discardCursorRects]'
void _IM_NSWindow_discardCursorRects(NSWindow *_self);

// method '-[NSWindow discardEventsMatchingMask:beforeEvent:]'
void _IM_NSWindow_discardEventsMatchingMask_CbeforeEvent_C(NSWindow *_self, unsigned int mask, NSEvent* lastEvent);

// method '-[NSWindow display]'
void _IM_NSWindow_display(NSWindow *_self);

// method '-[NSWindow displayIfNeeded]'
void _IM_NSWindow_displayIfNeeded(NSWindow *_self);

// method '-[NSWindow displaysWhenScreenProfileChanges]'
BOOL _IM_NSWindow_displaysWhenScreenProfileChanges(NSWindow *_self);

// method '-[NSWindow dragImage:at:offset:event:pasteboard:source:slideBack:]'
void _IM_NSWindow_dragImage_Cat_Coffset_Cevent_Cpasteboard_Csource_CslideBack_C(NSWindow *_self, NSImage* anImage, struct _NSPoint baseLocation, struct _NSSize initialOffset, NSEvent* event, NSPasteboard* pboard, id sourceObj, BOOL slideFlag);

// method '-[NSWindow drawers]'
id _IM_NSWindow_drawers(NSWindow *_self);

// method '-[NSWindow enableCursorRects]'
void _IM_NSWindow_enableCursorRects(NSWindow *_self);

// method '-[NSWindow enableFlushWindow]'
void _IM_NSWindow_enableFlushWindow(NSWindow *_self);

// method '-[NSWindow enableKeyEquivalentForDefaultButtonCell]'
void _IM_NSWindow_enableKeyEquivalentForDefaultButtonCell(NSWindow *_self);

// method '-[NSWindow endEditingFor:]'
void _IM_NSWindow_endEditingFor_C(NSWindow *_self, id anObject);

// method '-[NSWindow fieldEditor:forObject:]'
NSText* _IM_NSWindow_fieldEditor_CforObject_C(NSWindow *_self, BOOL createFlag, id anObject);

// method '-[NSWindow firstResponder]'
NSResponder* _IM_NSWindow_firstResponder(NSWindow *_self);

// method '-[NSWindow flushWindow]'
void _IM_NSWindow_flushWindow(NSWindow *_self);

// method '-[NSWindow flushWindowIfNeeded]'
void _IM_NSWindow_flushWindowIfNeeded(NSWindow *_self);

// method '-[NSWindow frame]'
struct _NSRect _IM_NSWindow_frame(NSWindow *_self);

// method '-[NSWindow frameAutosaveName]'
NSString* _IM_NSWindow_frameAutosaveName(NSWindow *_self);

// method '-[NSWindow frameRectForContentRect:]'
struct _NSRect _IM_NSWindow_frameRectForContentRect_C(NSWindow *_self, struct _NSRect contentRect);

// method '+[NSWindow frameRectForContentRect:styleMask:]'
struct _NSRect _CM_NSWindow_frameRectForContentRect_CstyleMask_C(Class _class, struct _NSRect cRect, unsigned int aStyle);

// method '-[NSWindow gState]'
int _IM_NSWindow_gState(NSWindow *_self);

// method '-[NSWindow graphicsContext]'
NSGraphicsContext* _IM_NSWindow_graphicsContext(NSWindow *_self);

// method '-[NSWindow handleCloseScriptCommand:]'
id _IM_NSWindow_handleCloseScriptCommand_C(NSWindow *_self, id command);

// method '-[NSWindow handlePrintScriptCommand:]'
id _IM_NSWindow_handlePrintScriptCommand_C(NSWindow *_self, id command);

// method '-[NSWindow handleSaveScriptCommand:]'
id _IM_NSWindow_handleSaveScriptCommand_C(NSWindow *_self, id command);

// method '-[NSWindow hasCloseBox]'
BOOL _IM_NSWindow_hasCloseBox(NSWindow *_self);

// method '-[NSWindow hasDynamicDepthLimit]'
BOOL _IM_NSWindow_hasDynamicDepthLimit(NSWindow *_self);

// method '-[NSWindow hasShadow]'
BOOL _IM_NSWindow_hasShadow(NSWindow *_self);

// method '-[NSWindow hasTitleBar]'
BOOL _IM_NSWindow_hasTitleBar(NSWindow *_self);

// method '-[NSWindow hidesOnDeactivate]'
BOOL _IM_NSWindow_hidesOnDeactivate(NSWindow *_self);

// method '-[NSWindow ignoresMouseEvents]'
BOOL _IM_NSWindow_ignoresMouseEvents(NSWindow *_self);

// method '-[NSWindow initWithContentRect:styleMask:backing:defer:]'
NSWindow *_IM_NSWindow_initWithContentRect_CstyleMask_Cbacking_Cdefer_C(NSWindow *_self, struct _NSRect contentRect, unsigned int aStyle, int bufferingType, BOOL flag);

// method '-[NSWindow initWithContentRect:styleMask:backing:defer:screen:]'
NSWindow *_IM_NSWindow_initWithContentRect_CstyleMask_Cbacking_Cdefer_Cscreen_C(NSWindow *_self, struct _NSRect contentRect, unsigned int aStyle, int bufferingType, BOOL flag, NSScreen* screen);

// method '-[NSWindow initWithWindowRef:]'
NSWindow *_IM_NSWindow_initWithWindowRef_C(NSWindow *_self, struct OpaqueWindowPtr *windowRef);

// method '-[NSWindow initialFirstResponder]'
NSView* _IM_NSWindow_initialFirstResponder(NSWindow *_self);

// method '-[NSWindow invalidateCursorRectsForView:]'
void _IM_NSWindow_invalidateCursorRectsForView_C(NSWindow *_self, NSView* aView);

// method '-[NSWindow invalidateShadow]'
void _IM_NSWindow_invalidateShadow(NSWindow *_self);

// method '-[NSWindow isAutodisplay]'
BOOL _IM_NSWindow_isAutodisplay(NSWindow *_self);

// method '-[NSWindow isDocumentEdited]'
BOOL _IM_NSWindow_isDocumentEdited(NSWindow *_self);

// method '-[NSWindow isExcludedFromWindowsMenu]'
BOOL _IM_NSWindow_isExcludedFromWindowsMenu(NSWindow *_self);

// method '-[NSWindow isFloatingPanel]'
BOOL _IM_NSWindow_isFloatingPanel(NSWindow *_self);

// method '-[NSWindow isFlushWindowDisabled]'
BOOL _IM_NSWindow_isFlushWindowDisabled(NSWindow *_self);

// method '-[NSWindow isKeyWindow]'
BOOL _IM_NSWindow_isKeyWindow(NSWindow *_self);

// method '-[NSWindow isMainWindow]'
BOOL _IM_NSWindow_isMainWindow(NSWindow *_self);

// method '-[NSWindow isMiniaturizable]'
BOOL _IM_NSWindow_isMiniaturizable(NSWindow *_self);

// method '-[NSWindow isMiniaturized]'
BOOL _IM_NSWindow_isMiniaturized(NSWindow *_self);

// method '-[NSWindow isModalPanel]'
BOOL _IM_NSWindow_isModalPanel(NSWindow *_self);

// method '-[NSWindow isMovableByWindowBackground]'
BOOL _IM_NSWindow_isMovableByWindowBackground(NSWindow *_self);

// method '-[NSWindow isOneShot]'
BOOL _IM_NSWindow_isOneShot(NSWindow *_self);

// method '-[NSWindow isOpaque]'
BOOL _IM_NSWindow_isOpaque(NSWindow *_self);

// method '-[NSWindow isReleasedWhenClosed]'
BOOL _IM_NSWindow_isReleasedWhenClosed(NSWindow *_self);

// method '-[NSWindow isResizable]'
BOOL _IM_NSWindow_isResizable(NSWindow *_self);

// method '-[NSWindow isSheet]'
BOOL _IM_NSWindow_isSheet(NSWindow *_self);

// method '-[NSWindow isVisible]'
BOOL _IM_NSWindow_isVisible(NSWindow *_self);

// method '-[NSWindow isZoomable]'
BOOL _IM_NSWindow_isZoomable(NSWindow *_self);

// method '-[NSWindow isZoomed]'
BOOL _IM_NSWindow_isZoomed(NSWindow *_self);

// method '-[NSWindow keyDown:]'
void _IM_NSWindow_keyDown_C(NSWindow *_self, NSEvent* theEvent);

// method '-[NSWindow keyViewSelectionDirection]'
int _IM_NSWindow_keyViewSelectionDirection(NSWindow *_self);

// method '-[NSWindow level]'
int _IM_NSWindow_level(NSWindow *_self);

// method '-[NSWindow makeFirstResponder:]'
BOOL _IM_NSWindow_makeFirstResponder_C(NSWindow *_self, NSResponder* aResponder);

// method '-[NSWindow makeKeyAndOrderFront:]'
void _IM_NSWindow_makeKeyAndOrderFront_C(NSWindow *_self, id sender);

// method '-[NSWindow makeKeyWindow]'
void _IM_NSWindow_makeKeyWindow(NSWindow *_self);

// method '-[NSWindow makeMainWindow]'
void _IM_NSWindow_makeMainWindow(NSWindow *_self);

// method '-[NSWindow maxSize]'
struct _NSSize _IM_NSWindow_maxSize(NSWindow *_self);

// method '+[NSWindow menuChanged:]'
void _CM_NSWindow_menuChanged_C(Class _class, NSMenu* menu);

// method '+[NSWindow minFrameWidthWithTitle:styleMask:]'
float _CM_NSWindow_minFrameWidthWithTitle_CstyleMask_C(Class _class, NSString* aTitle, unsigned int aStyle);

// method '-[NSWindow minSize]'
struct _NSSize _IM_NSWindow_minSize(NSWindow *_self);

// method '-[NSWindow miniaturize:]'
void _IM_NSWindow_miniaturize_C(NSWindow *_self, id sender);

// method '-[NSWindow miniwindowImage]'
NSImage* _IM_NSWindow_miniwindowImage(NSWindow *_self);

// method '-[NSWindow miniwindowTitle]'
NSString* _IM_NSWindow_miniwindowTitle(NSWindow *_self);

// method '-[NSWindow mouseLocationOutsideOfEventStream]'
struct _NSPoint _IM_NSWindow_mouseLocationOutsideOfEventStream(NSWindow *_self);

// method '-[NSWindow nextEventMatchingMask:]'
NSEvent* _IM_NSWindow_nextEventMatchingMask_C(NSWindow *_self, unsigned int mask);

// method '-[NSWindow nextEventMatchingMask:untilDate:inMode:dequeue:]'
NSEvent* _IM_NSWindow_nextEventMatchingMask_CuntilDate_CinMode_Cdequeue_C(NSWindow *_self, unsigned int mask, id expiration, NSString* mode, BOOL deqFlag);

// method '-[NSWindow orderBack:]'
void _IM_NSWindow_orderBack_C(NSWindow *_self, id sender);

// method '-[NSWindow orderFront:]'
void _IM_NSWindow_orderFront_C(NSWindow *_self, id sender);

// method '-[NSWindow orderFrontRegardless]'
void _IM_NSWindow_orderFrontRegardless(NSWindow *_self);

// method '-[NSWindow orderOut:]'
void _IM_NSWindow_orderOut_C(NSWindow *_self, id sender);

// method '-[NSWindow orderWindow:relativeTo:]'
void _IM_NSWindow_orderWindow_CrelativeTo_C(NSWindow *_self, int place, int otherWin);

// method '-[NSWindow orderedIndex]'
int _IM_NSWindow_orderedIndex(NSWindow *_self);

// method '-[NSWindow parentWindow]'
NSWindow* _IM_NSWindow_parentWindow(NSWindow *_self);

// method '-[NSWindow performClose:]'
void _IM_NSWindow_performClose_C(NSWindow *_self, id sender);

// method '-[NSWindow performMiniaturize:]'
void _IM_NSWindow_performMiniaturize_C(NSWindow *_self, id sender);

// method '-[NSWindow performZoom:]'
void _IM_NSWindow_performZoom_C(NSWindow *_self, id sender);

// method '-[NSWindow postEvent:atStart:]'
void _IM_NSWindow_postEvent_CatStart_C(NSWindow *_self, NSEvent* event, BOOL flag);

// method '-[NSWindow preservesContentDuringLiveResize]'
BOOL _IM_NSWindow_preservesContentDuringLiveResize(NSWindow *_self);

// method '-[NSWindow print:]'
void _IM_NSWindow_print_C(NSWindow *_self, id sender);

// method '-[NSWindow recalculateKeyViewLoop]'
void _IM_NSWindow_recalculateKeyViewLoop(NSWindow *_self);

// method '-[NSWindow registerForDraggedTypes:]'
void _IM_NSWindow_registerForDraggedTypes_C(NSWindow *_self, id newTypes);

// method '-[NSWindow removeChildWindow:]'
void _IM_NSWindow_removeChildWindow_C(NSWindow *_self, NSWindow* childWin);

// method '+[NSWindow removeFrameUsingName:]'
void _CM_NSWindow_removeFrameUsingName_C(Class _class, NSString* name);

// method '-[NSWindow representedFilename]'
NSString* _IM_NSWindow_representedFilename(NSWindow *_self);

// method '-[NSWindow resetCursorRects]'
void _IM_NSWindow_resetCursorRects(NSWindow *_self);

// method '-[NSWindow resignKeyWindow]'
void _IM_NSWindow_resignKeyWindow(NSWindow *_self);

// method '-[NSWindow resignMainWindow]'
void _IM_NSWindow_resignMainWindow(NSWindow *_self);

// method '-[NSWindow resizeFlags]'
int _IM_NSWindow_resizeFlags(NSWindow *_self);

// method '-[NSWindow resizeIncrements]'
struct _NSSize _IM_NSWindow_resizeIncrements(NSWindow *_self);

// method '-[NSWindow restoreCachedImage]'
void _IM_NSWindow_restoreCachedImage(NSWindow *_self);

// method '-[NSWindow runToolbarCustomizationPalette:]'
void _IM_NSWindow_runToolbarCustomizationPalette_C(NSWindow *_self, id sender);

// method '-[NSWindow saveFrameUsingName:]'
void _IM_NSWindow_saveFrameUsingName_C(NSWindow *_self, NSString* name);

// method '-[NSWindow screen]'
NSScreen* _IM_NSWindow_screen(NSWindow *_self);

// method '-[NSWindow selectKeyViewFollowingView:]'
void _IM_NSWindow_selectKeyViewFollowingView_C(NSWindow *_self, NSView* aView);

// method '-[NSWindow selectKeyViewPrecedingView:]'
void _IM_NSWindow_selectKeyViewPrecedingView_C(NSWindow *_self, NSView* aView);

// method '-[NSWindow selectNextKeyView:]'
void _IM_NSWindow_selectNextKeyView_C(NSWindow *_self, id sender);

// method '-[NSWindow selectPreviousKeyView:]'
void _IM_NSWindow_selectPreviousKeyView_C(NSWindow *_self, id sender);

// method '-[NSWindow sendEvent:]'
void _IM_NSWindow_sendEvent_C(NSWindow *_self, NSEvent* theEvent);

// method '-[NSWindow setAcceptsMouseMovedEvents:]'
void _IM_NSWindow_setAcceptsMouseMovedEvents_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setAllowsToolTipsWhenApplicationIsInactive:]'
void _IM_NSWindow_setAllowsToolTipsWhenApplicationIsInactive_C(NSWindow *_self, BOOL allowWhenInactive);

// method '-[NSWindow setAlphaValue:]'
void _IM_NSWindow_setAlphaValue_C(NSWindow *_self, float windowAlpha);

// method '-[NSWindow setAspectRatio:]'
void _IM_NSWindow_setAspectRatio_C(NSWindow *_self, struct _NSSize ratio);

// method '-[NSWindow setAutodisplay:]'
void _IM_NSWindow_setAutodisplay_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setAutorecalculatesKeyViewLoop:]'
void _IM_NSWindow_setAutorecalculatesKeyViewLoop_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setBackgroundColor:]'
void _IM_NSWindow_setBackgroundColor_C(NSWindow *_self, NSColor* color);

// method '-[NSWindow setBackingType:]'
void _IM_NSWindow_setBackingType_C(NSWindow *_self, int bufferingType);

// method '-[NSWindow setCanHide:]'
void _IM_NSWindow_setCanHide_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setContentAspectRatio:]'
void _IM_NSWindow_setContentAspectRatio_C(NSWindow *_self, struct _NSSize ratio);

// method '-[NSWindow setContentMaxSize:]'
void _IM_NSWindow_setContentMaxSize_C(NSWindow *_self, struct _NSSize size);

// method '-[NSWindow setContentMinSize:]'
void _IM_NSWindow_setContentMinSize_C(NSWindow *_self, struct _NSSize size);

// method '-[NSWindow setContentResizeIncrements:]'
void _IM_NSWindow_setContentResizeIncrements_C(NSWindow *_self, struct _NSSize increments);

// method '-[NSWindow setContentSize:]'
void _IM_NSWindow_setContentSize_C(NSWindow *_self, struct _NSSize aSize);

// method '-[NSWindow setContentView:]'
void _IM_NSWindow_setContentView_C(NSWindow *_self, NSView* aView);

// method '-[NSWindow setDefaultButtonCell:]'
void _IM_NSWindow_setDefaultButtonCell_C(NSWindow *_self, NSButtonCell* defButt);

// method '-[NSWindow setDelegate:]'
void _IM_NSWindow_setDelegate_C(NSWindow *_self, id anObject);

// method '-[NSWindow setDepthLimit:]'
void _IM_NSWindow_setDepthLimit_C(NSWindow *_self, int limit);

// method '-[NSWindow setDisplaysWhenScreenProfileChanges:]'
void _IM_NSWindow_setDisplaysWhenScreenProfileChanges_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setDocumentEdited:]'
void _IM_NSWindow_setDocumentEdited_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setDynamicDepthLimit:]'
void _IM_NSWindow_setDynamicDepthLimit_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setExcludedFromWindowsMenu:]'
void _IM_NSWindow_setExcludedFromWindowsMenu_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setFrame:display:]'
void _IM_NSWindow_setFrame_Cdisplay_C(NSWindow *_self, struct _NSRect frameRect, BOOL flag);

// method '-[NSWindow setFrame:display:animate:]'
void _IM_NSWindow_setFrame_Cdisplay_Canimate_C(NSWindow *_self, struct _NSRect frameRect, BOOL displayFlag, BOOL animateFlag);

// method '-[NSWindow setFrameAutosaveName:]'
BOOL _IM_NSWindow_setFrameAutosaveName_C(NSWindow *_self, NSString* name);

// method '-[NSWindow setFrameFromString:]'
void _IM_NSWindow_setFrameFromString_C(NSWindow *_self, NSString* string);

// method '-[NSWindow setFrameOrigin:]'
void _IM_NSWindow_setFrameOrigin_C(NSWindow *_self, struct _NSPoint aPoint);

// method '-[NSWindow setFrameTopLeftPoint:]'
void _IM_NSWindow_setFrameTopLeftPoint_C(NSWindow *_self, struct _NSPoint aPoint);

// method '-[NSWindow setFrameUsingName:]'
BOOL _IM_NSWindow_setFrameUsingName_C(NSWindow *_self, NSString* name);

// method '-[NSWindow setFrameUsingName:force:]'
BOOL _IM_NSWindow_setFrameUsingName_Cforce_C(NSWindow *_self, NSString* name, BOOL force);

// method '-[NSWindow setHasShadow:]'
void _IM_NSWindow_setHasShadow_C(NSWindow *_self, BOOL hasShadow);

// method '-[NSWindow setHidesOnDeactivate:]'
void _IM_NSWindow_setHidesOnDeactivate_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setIgnoresMouseEvents:]'
void _IM_NSWindow_setIgnoresMouseEvents_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setInitialFirstResponder:]'
void _IM_NSWindow_setInitialFirstResponder_C(NSWindow *_self, NSView* view);

// method '-[NSWindow setIsMiniaturized:]'
void _IM_NSWindow_setIsMiniaturized_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setIsVisible:]'
void _IM_NSWindow_setIsVisible_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setIsZoomed:]'
void _IM_NSWindow_setIsZoomed_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setLevel:]'
void _IM_NSWindow_setLevel_C(NSWindow *_self, int newLevel);

// method '-[NSWindow setMaxSize:]'
void _IM_NSWindow_setMaxSize_C(NSWindow *_self, struct _NSSize size);

// method '-[NSWindow setMinSize:]'
void _IM_NSWindow_setMinSize_C(NSWindow *_self, struct _NSSize size);

// method '-[NSWindow setMiniwindowImage:]'
void _IM_NSWindow_setMiniwindowImage_C(NSWindow *_self, NSImage* image);

// method '-[NSWindow setMiniwindowTitle:]'
void _IM_NSWindow_setMiniwindowTitle_C(NSWindow *_self, NSString* title);

// method '-[NSWindow setMovableByWindowBackground:]'
void _IM_NSWindow_setMovableByWindowBackground_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setOneShot:]'
void _IM_NSWindow_setOneShot_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setOpaque:]'
void _IM_NSWindow_setOpaque_C(NSWindow *_self, BOOL isOpaque);

// method '-[NSWindow setOrderedIndex:]'
void _IM_NSWindow_setOrderedIndex_C(NSWindow *_self, int index);

// method '-[NSWindow setParentWindow:]'
void _IM_NSWindow_setParentWindow_C(NSWindow *_self, NSWindow* window);

// method '-[NSWindow setPreservesContentDuringLiveResize:]'
void _IM_NSWindow_setPreservesContentDuringLiveResize_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setReleasedWhenClosed:]'
void _IM_NSWindow_setReleasedWhenClosed_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setRepresentedFilename:]'
void _IM_NSWindow_setRepresentedFilename_C(NSWindow *_self, NSString* aString);

// method '-[NSWindow setResizeIncrements:]'
void _IM_NSWindow_setResizeIncrements_C(NSWindow *_self, struct _NSSize increments);

// method '-[NSWindow setShowsResizeIndicator:]'
void _IM_NSWindow_setShowsResizeIndicator_C(NSWindow *_self, BOOL show);

// method '-[NSWindow setShowsToolbarButton:]'
void _IM_NSWindow_setShowsToolbarButton_C(NSWindow *_self, BOOL show);

// method '-[NSWindow setTitle:]'
void _IM_NSWindow_setTitle_C(NSWindow *_self, NSString* aString);

// method '-[NSWindow setTitleWithRepresentedFilename:]'
void _IM_NSWindow_setTitleWithRepresentedFilename_C(NSWindow *_self, NSString* filename);

// method '-[NSWindow setToolbar:]'
void _IM_NSWindow_setToolbar_C(NSWindow *_self, NSToolbar* toolbar);

// method '-[NSWindow setViewsNeedDisplay:]'
void _IM_NSWindow_setViewsNeedDisplay_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow setWindowController:]'
void _IM_NSWindow_setWindowController_C(NSWindow *_self, NSWindowController* windowController);

// method '-[NSWindow showsResizeIndicator]'
BOOL _IM_NSWindow_showsResizeIndicator(NSWindow *_self);

// method '-[NSWindow showsToolbarButton]'
BOOL _IM_NSWindow_showsToolbarButton(NSWindow *_self);

// method '-[NSWindow standardWindowButton:]'
NSButton* _IM_NSWindow_standardWindowButton_C(NSWindow *_self, int b);

// method '+[NSWindow standardWindowButton:forStyleMask:]'
NSButton* _CM_NSWindow_standardWindowButton_CforStyleMask_C(Class _class, int b, unsigned int styleMask);

// method '-[NSWindow stringWithSavedFrame]'
NSString* _IM_NSWindow_stringWithSavedFrame(NSWindow *_self);

// method '-[NSWindow styleMask]'
unsigned int _IM_NSWindow_styleMask(NSWindow *_self);

// method '-[NSWindow title]'
NSString* _IM_NSWindow_title(NSWindow *_self);

// method '-[NSWindow toggleToolbarShown:]'
void _IM_NSWindow_toggleToolbarShown_C(NSWindow *_self, id sender);

// method '-[NSWindow toolbar]'
NSToolbar* _IM_NSWindow_toolbar(NSWindow *_self);

// method '-[NSWindow tryToPerform:with:]'
BOOL _IM_NSWindow_tryToPerform_Cwith_C(NSWindow *_self, SEL anAction, id anObject);

// method '-[NSWindow unregisterDraggedTypes]'
void _IM_NSWindow_unregisterDraggedTypes(NSWindow *_self);

// method '-[NSWindow update]'
void _IM_NSWindow_update(NSWindow *_self);

// method '-[NSWindow useOptimizedDrawing:]'
void _IM_NSWindow_useOptimizedDrawing_C(NSWindow *_self, BOOL flag);

// method '-[NSWindow userSpaceScaleFactor]'
float _IM_NSWindow_userSpaceScaleFactor(NSWindow *_self);

// method '-[NSWindow validRequestorForSendType:returnType:]'
id _IM_NSWindow_validRequestorForSendType_CreturnType_C(NSWindow *_self, NSString* sendType, NSString* returnType);

// method '-[NSWindow viewsNeedDisplay]'
BOOL _IM_NSWindow_viewsNeedDisplay(NSWindow *_self);

// method '-[NSWindow windowController]'
id _IM_NSWindow_windowController(NSWindow *_self);

// method '-[NSWindow windowNumber]'
int _IM_NSWindow_windowNumber(NSWindow *_self);

// method '-[NSWindow windowRef]'
struct OpaqueWindowPtr *_IM_NSWindow_windowRef(NSWindow *_self);

// method '-[NSWindow worksWhenModal]'
BOOL _IM_NSWindow_worksWhenModal(NSWindow *_self);

// method '-[NSWindow zoom:]'
void _IM_NSWindow_zoom_C(NSWindow *_self, id sender);

// method '-[NSWindowController close]'
void _IM_NSWindowController_close(NSWindowController *_self);

// method '-[NSWindowController document]'
id _IM_NSWindowController_document(NSWindowController *_self);

// method '-[NSWindowController initWithWindow:]'
NSWindowController *_IM_NSWindowController_initWithWindow_C(NSWindowController *_self, NSWindow* window);

// method '-[NSWindowController initWithWindowNibName:]'
NSWindowController *_IM_NSWindowController_initWithWindowNibName_C(NSWindowController *_self, NSString* windowNibName);

// method '-[NSWindowController initWithWindowNibName:owner:]'
NSWindowController *_IM_NSWindowController_initWithWindowNibName_Cowner_C(NSWindowController *_self, NSString* windowNibName, id owner);

// method '-[NSWindowController initWithWindowNibPath:owner:]'
NSWindowController *_IM_NSWindowController_initWithWindowNibPath_Cowner_C(NSWindowController *_self, NSString* windowNibPath, id owner);

// method '-[NSWindowController isWindowLoaded]'
BOOL _IM_NSWindowController_isWindowLoaded(NSWindowController *_self);

// method '-[NSWindowController loadWindow]'
void _IM_NSWindowController_loadWindow(NSWindowController *_self);

// method '-[NSWindowController owner]'
id _IM_NSWindowController_owner(NSWindowController *_self);

// method '-[NSWindowController setDocument:]'
void _IM_NSWindowController_setDocument_C(NSWindowController *_self, NSDocument* document);

// method '-[NSWindowController setDocumentEdited:]'
void _IM_NSWindowController_setDocumentEdited_C(NSWindowController *_self, BOOL dirtyFlag);

// method '-[NSWindowController setShouldCascadeWindows:]'
void _IM_NSWindowController_setShouldCascadeWindows_C(NSWindowController *_self, BOOL flag);

// method '-[NSWindowController setShouldCloseDocument:]'
void _IM_NSWindowController_setShouldCloseDocument_C(NSWindowController *_self, BOOL flag);

// method '-[NSWindowController setWindow:]'
void _IM_NSWindowController_setWindow_C(NSWindowController *_self, NSWindow* window);

// method '-[NSWindowController setWindowFrameAutosaveName:]'
void _IM_NSWindowController_setWindowFrameAutosaveName_C(NSWindowController *_self, NSString* name);

// method '-[NSWindowController shouldCascadeWindows]'
BOOL _IM_NSWindowController_shouldCascadeWindows(NSWindowController *_self);

// method '-[NSWindowController shouldCloseDocument]'
BOOL _IM_NSWindowController_shouldCloseDocument(NSWindowController *_self);

// method '-[NSWindowController showWindow:]'
void _IM_NSWindowController_showWindow_C(NSWindowController *_self, id sender);

// method '-[NSWindowController synchronizeWindowTitleWithDocumentName]'
void _IM_NSWindowController_synchronizeWindowTitleWithDocumentName(NSWindowController *_self);

// method '-[NSWindowController window]'
NSWindow* _IM_NSWindowController_window(NSWindowController *_self);

// method '-[NSWindowController windowDidLoad]'
void _IM_NSWindowController_windowDidLoad(NSWindowController *_self);

// method '-[NSWindowController windowFrameAutosaveName]'
NSString* _IM_NSWindowController_windowFrameAutosaveName(NSWindowController *_self);

// method '-[NSWindowController windowNibName]'
NSString* _IM_NSWindowController_windowNibName(NSWindowController *_self);

// method '-[NSWindowController windowNibPath]'
NSString* _IM_NSWindowController_windowNibPath(NSWindowController *_self);

// method '-[NSWindowController windowTitleForDocumentDisplayName:]'
NSString* _IM_NSWindowController_windowTitleForDocumentDisplayName_C(NSWindowController *_self, NSString* displayName);

// method '-[NSWindowController windowWillLoad]'
void _IM_NSWindowController_windowWillLoad(NSWindowController *_self);

// method '-[NSWorkspace absolutePathForAppBundleWithIdentifier:]'
NSString* _IM_NSWorkspace_absolutePathForAppBundleWithIdentifier_C(NSWorkspace *_self, NSString* bundleIdentifier);

// method '-[NSWorkspace activeApplication]'
id _IM_NSWorkspace_activeApplication(NSWorkspace *_self);

// method '-[NSWorkspace checkForRemovableMedia]'
void _IM_NSWorkspace_checkForRemovableMedia(NSWorkspace *_self);

// method '-[NSWorkspace extendPowerOffBy:]'
int _IM_NSWorkspace_extendPowerOffBy_C(NSWorkspace *_self, int requested);

// method '-[NSWorkspace fileSystemChanged]'
BOOL _IM_NSWorkspace_fileSystemChanged(NSWorkspace *_self);

// method '-[NSWorkspace findApplications]'
void _IM_NSWorkspace_findApplications(NSWorkspace *_self);

// method '-[NSWorkspace fullPathForApplication:]'
NSString* _IM_NSWorkspace_fullPathForApplication_C(NSWorkspace *_self, NSString* appName);

// method '-[NSWorkspace getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:]'
BOOL _IM_NSWorkspace_getFileSystemInfoForPath_CisRemovable_CisWritable_CisUnmountable_Cdescription_Ctype_C(NSWorkspace *_self, NSString* fullPath, BOOL* removableFlag, BOOL* writableFlag, BOOL* unmountableFlag, id *description, id *fileSystemType);

// method '-[NSWorkspace getInfoForFile:application:type:]'
BOOL _IM_NSWorkspace_getInfoForFile_Capplication_Ctype_C(NSWorkspace *_self, NSString* fullPath, id *appName, id *type);

// method '-[NSWorkspace hideOtherApplications]'
void _IM_NSWorkspace_hideOtherApplications(NSWorkspace *_self);

// method '-[NSWorkspace iconForFile:]'
NSImage* _IM_NSWorkspace_iconForFile_C(NSWorkspace *_self, NSString* fullPath);

// method '-[NSWorkspace iconForFileType:]'
NSImage* _IM_NSWorkspace_iconForFileType_C(NSWorkspace *_self, NSString* fileType);

// method '-[NSWorkspace iconForFiles:]'
NSImage* _IM_NSWorkspace_iconForFiles_C(NSWorkspace *_self, id fullPaths);

// method '-[NSWorkspace isFilePackageAtPath:]'
BOOL _IM_NSWorkspace_isFilePackageAtPath_C(NSWorkspace *_self, NSString* fullPath);

// method '-[NSWorkspace launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:]'
BOOL _IM_NSWorkspace_launchAppWithBundleIdentifier_Coptions_CadditionalEventParamDescriptor_ClaunchIdentifier_C(NSWorkspace *_self, NSString* bundleIdentifier, unsigned int options, id descriptor, id *identifier);

// method '-[NSWorkspace launchApplication:]'
BOOL _IM_NSWorkspace_launchApplication_C(NSWorkspace *_self, NSString* appName);

// method '-[NSWorkspace launchApplication:showIcon:autolaunch:]'
BOOL _IM_NSWorkspace_launchApplication_CshowIcon_Cautolaunch_C(NSWorkspace *_self, NSString* appName, BOOL showIcon, BOOL autolaunch);

// method '-[NSWorkspace launchedApplications]'
id _IM_NSWorkspace_launchedApplications(NSWorkspace *_self);

// method '-[NSWorkspace mountNewRemovableMedia]'
id _IM_NSWorkspace_mountNewRemovableMedia(NSWorkspace *_self);

// method '-[NSWorkspace mountedLocalVolumePaths]'
id _IM_NSWorkspace_mountedLocalVolumePaths(NSWorkspace *_self);

// method '-[NSWorkspace mountedRemovableMedia]'
id _IM_NSWorkspace_mountedRemovableMedia(NSWorkspace *_self);

// method '-[NSWorkspace noteFileSystemChanged]'
void _IM_NSWorkspace_noteFileSystemChanged(NSWorkspace *_self);

// method '-[NSWorkspace noteFileSystemChanged:]'
void _IM_NSWorkspace_noteFileSystemChanged_C(NSWorkspace *_self, NSString* path);

// method '-[NSWorkspace noteUserDefaultsChanged]'
void _IM_NSWorkspace_noteUserDefaultsChanged(NSWorkspace *_self);

// method '-[NSWorkspace notificationCenter]'
id _IM_NSWorkspace_notificationCenter(NSWorkspace *_self);

// method '-[NSWorkspace openFile:]'
BOOL _IM_NSWorkspace_openFile_C(NSWorkspace *_self, NSString* fullPath);

// method '-[NSWorkspace openFile:fromImage:at:inView:]'
BOOL _IM_NSWorkspace_openFile_CfromImage_Cat_CinView_C(NSWorkspace *_self, NSString* fullPath, NSImage* anImage, struct _NSPoint point, NSView* aView);

// method '-[NSWorkspace openFile:withApplication:]'
BOOL _IM_NSWorkspace_openFile_CwithApplication_C(NSWorkspace *_self, NSString* fullPath, NSString* appName);

// method '-[NSWorkspace openFile:withApplication:andDeactivate:]'
BOOL _IM_NSWorkspace_openFile_CwithApplication_CandDeactivate_C(NSWorkspace *_self, NSString* fullPath, NSString* appName, BOOL flag);

// method '-[NSWorkspace openTempFile:]'
BOOL _IM_NSWorkspace_openTempFile_C(NSWorkspace *_self, NSString* fullPath);

// method '-[NSWorkspace openURL:]'
BOOL _IM_NSWorkspace_openURL_C(NSWorkspace *_self, NSURL* url);

// method '-[NSWorkspace openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:]'
BOOL _IM_NSWorkspace_openURLs_CwithAppBundleIdentifier_Coptions_CadditionalEventParamDescriptor_ClaunchIdentifiers_C(NSWorkspace *_self, id urls, NSString* bundleIdentifier, unsigned int options, id descriptor, id *identifiers);

// method '-[NSWorkspace performFileOperation:source:destination:files:tag:]'
BOOL _IM_NSWorkspace_performFileOperation_Csource_Cdestination_Cfiles_Ctag_C(NSWorkspace *_self, NSString* operation, NSString* source, NSString* destination, id files, int *tag);

// method '-[NSWorkspace selectFile:inFileViewerRootedAtPath:]'
BOOL _IM_NSWorkspace_selectFile_CinFileViewerRootedAtPath_C(NSWorkspace *_self, NSString* fullPath, NSString* rootFullpath);

// method '-[NSWorkspace setIcon:forFile:options:]'
BOOL _IM_NSWorkspace_setIcon_CforFile_Coptions_C(NSWorkspace *_self, NSImage* image, NSString* fullPath, unsigned int options);

// method '+[NSWorkspace sharedWorkspace]'
NSWorkspace* _CM_NSWorkspace_sharedWorkspace(Class _class);

// method '-[NSWorkspace slideImage:from:to:]'
void _IM_NSWorkspace_slideImage_Cfrom_Cto_C(NSWorkspace *_self, NSImage* image, struct _NSPoint fromPoint, struct _NSPoint toPoint);

// method '-[NSWorkspace unmountAndEjectDeviceAtPath:]'
BOOL _IM_NSWorkspace_unmountAndEjectDeviceAtPath_C(NSWorkspace *_self, NSString* path);

// method '-[NSWorkspace userDefaultsChanged]'
BOOL _IM_NSWorkspace_userDefaultsChanged(NSWorkspace *_self);


// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// class 'CIColor'
typedef struct objc_object CIColor;

// class 'CIContext'
typedef struct objc_object CIContext;

// class 'CIFilter'
typedef struct objc_object CIFilter;

// class 'CIFilterShape'
typedef struct objc_object CIFilterShape;

// class 'CIImage'
typedef struct objc_object CIImage;

// class 'CIImageAccumulator'
typedef struct objc_object CIImageAccumulator;

// class 'CIKernel'
typedef struct objc_object CIKernel;

// class 'CIPlugIn'
typedef struct objc_object CIPlugIn;

// class 'CISampler'
typedef struct objc_object CISampler;

// class 'CIVector'
typedef struct objc_object CIVector;

// class 'NSObject'
typedef struct objc_object NSObject;

// getter for constant 'kCIApplyOptionDefinition'
id _get_kCIApplyOptionDefinition(void);

// setter for constant 'kCIApplyOptionDefinition'
void _set_kCIApplyOptionDefinition(id value);

// getter for constant 'kCIApplyOptionExtent'
id _get_kCIApplyOptionExtent(void);

// setter for constant 'kCIApplyOptionExtent'
void _set_kCIApplyOptionExtent(id value);

// getter for constant 'kCIApplyOptionUserInfo'
id _get_kCIApplyOptionUserInfo(void);

// setter for constant 'kCIApplyOptionUserInfo'
void _set_kCIApplyOptionUserInfo(id value);

// getter for constant 'kCIAttributeClass'
id _get_kCIAttributeClass(void);

// setter for constant 'kCIAttributeClass'
void _set_kCIAttributeClass(id value);

// getter for constant 'kCIAttributeDefault'
id _get_kCIAttributeDefault(void);

// setter for constant 'kCIAttributeDefault'
void _set_kCIAttributeDefault(id value);

// getter for constant 'kCIAttributeDisplayName'
id _get_kCIAttributeDisplayName(void);

// setter for constant 'kCIAttributeDisplayName'
void _set_kCIAttributeDisplayName(id value);

// getter for constant 'kCIAttributeFilterCategories'
id _get_kCIAttributeFilterCategories(void);

// setter for constant 'kCIAttributeFilterCategories'
void _set_kCIAttributeFilterCategories(id value);

// getter for constant 'kCIAttributeFilterDisplayName'
id _get_kCIAttributeFilterDisplayName(void);

// setter for constant 'kCIAttributeFilterDisplayName'
void _set_kCIAttributeFilterDisplayName(id value);

// getter for constant 'kCIAttributeFilterName'
id _get_kCIAttributeFilterName(void);

// setter for constant 'kCIAttributeFilterName'
void _set_kCIAttributeFilterName(id value);

// getter for constant 'kCIAttributeIdentity'
id _get_kCIAttributeIdentity(void);

// setter for constant 'kCIAttributeIdentity'
void _set_kCIAttributeIdentity(id value);

// getter for constant 'kCIAttributeMax'
id _get_kCIAttributeMax(void);

// setter for constant 'kCIAttributeMax'
void _set_kCIAttributeMax(id value);

// getter for constant 'kCIAttributeMin'
id _get_kCIAttributeMin(void);

// setter for constant 'kCIAttributeMin'
void _set_kCIAttributeMin(id value);

// getter for constant 'kCIAttributeName'
id _get_kCIAttributeName(void);

// setter for constant 'kCIAttributeName'
void _set_kCIAttributeName(id value);

// getter for constant 'kCIAttributeSliderMax'
id _get_kCIAttributeSliderMax(void);

// setter for constant 'kCIAttributeSliderMax'
void _set_kCIAttributeSliderMax(id value);

// getter for constant 'kCIAttributeSliderMin'
id _get_kCIAttributeSliderMin(void);

// setter for constant 'kCIAttributeSliderMin'
void _set_kCIAttributeSliderMin(id value);

// getter for constant 'kCIAttributeType'
id _get_kCIAttributeType(void);

// setter for constant 'kCIAttributeType'
void _set_kCIAttributeType(id value);

// getter for constant 'kCIAttributeTypeAngle'
id _get_kCIAttributeTypeAngle(void);

// setter for constant 'kCIAttributeTypeAngle'
void _set_kCIAttributeTypeAngle(id value);

// getter for constant 'kCIAttributeTypeBoolean'
id _get_kCIAttributeTypeBoolean(void);

// setter for constant 'kCIAttributeTypeBoolean'
void _set_kCIAttributeTypeBoolean(id value);

// getter for constant 'kCIAttributeTypeDistance'
id _get_kCIAttributeTypeDistance(void);

// setter for constant 'kCIAttributeTypeDistance'
void _set_kCIAttributeTypeDistance(id value);

// getter for constant 'kCIAttributeTypeGradient'
id _get_kCIAttributeTypeGradient(void);

// setter for constant 'kCIAttributeTypeGradient'
void _set_kCIAttributeTypeGradient(id value);

// getter for constant 'kCIAttributeTypeOffset'
id _get_kCIAttributeTypeOffset(void);

// setter for constant 'kCIAttributeTypeOffset'
void _set_kCIAttributeTypeOffset(id value);

// getter for constant 'kCIAttributeTypeOpaqueColor'
id _get_kCIAttributeTypeOpaqueColor(void);

// setter for constant 'kCIAttributeTypeOpaqueColor'
void _set_kCIAttributeTypeOpaqueColor(id value);

// getter for constant 'kCIAttributeTypePosition'
id _get_kCIAttributeTypePosition(void);

// setter for constant 'kCIAttributeTypePosition'
void _set_kCIAttributeTypePosition(id value);

// getter for constant 'kCIAttributeTypePosition3'
id _get_kCIAttributeTypePosition3(void);

// setter for constant 'kCIAttributeTypePosition3'
void _set_kCIAttributeTypePosition3(id value);

// getter for constant 'kCIAttributeTypeRectangle'
id _get_kCIAttributeTypeRectangle(void);

// setter for constant 'kCIAttributeTypeRectangle'
void _set_kCIAttributeTypeRectangle(id value);

// getter for constant 'kCIAttributeTypeScalar'
id _get_kCIAttributeTypeScalar(void);

// setter for constant 'kCIAttributeTypeScalar'
void _set_kCIAttributeTypeScalar(id value);

// getter for constant 'kCIAttributeTypeTime'
id _get_kCIAttributeTypeTime(void);

// setter for constant 'kCIAttributeTypeTime'
void _set_kCIAttributeTypeTime(id value);

// getter for constant 'kCICategoryBlur'
id _get_kCICategoryBlur(void);

// setter for constant 'kCICategoryBlur'
void _set_kCICategoryBlur(id value);

// getter for constant 'kCICategoryBuiltIn'
id _get_kCICategoryBuiltIn(void);

// setter for constant 'kCICategoryBuiltIn'
void _set_kCICategoryBuiltIn(id value);

// getter for constant 'kCICategoryColorAdjustment'
id _get_kCICategoryColorAdjustment(void);

// setter for constant 'kCICategoryColorAdjustment'
void _set_kCICategoryColorAdjustment(id value);

// getter for constant 'kCICategoryColorEffect'
id _get_kCICategoryColorEffect(void);

// setter for constant 'kCICategoryColorEffect'
void _set_kCICategoryColorEffect(id value);

// getter for constant 'kCICategoryCompositeOperation'
id _get_kCICategoryCompositeOperation(void);

// setter for constant 'kCICategoryCompositeOperation'
void _set_kCICategoryCompositeOperation(id value);

// getter for constant 'kCICategoryDistortionEffect'
id _get_kCICategoryDistortionEffect(void);

// setter for constant 'kCICategoryDistortionEffect'
void _set_kCICategoryDistortionEffect(id value);

// getter for constant 'kCICategoryGenerator'
id _get_kCICategoryGenerator(void);

// setter for constant 'kCICategoryGenerator'
void _set_kCICategoryGenerator(id value);

// getter for constant 'kCICategoryGeometryAdjustment'
id _get_kCICategoryGeometryAdjustment(void);

// setter for constant 'kCICategoryGeometryAdjustment'
void _set_kCICategoryGeometryAdjustment(id value);

// getter for constant 'kCICategoryGradient'
id _get_kCICategoryGradient(void);

// setter for constant 'kCICategoryGradient'
void _set_kCICategoryGradient(id value);

// getter for constant 'kCICategoryHalftoneEffect'
id _get_kCICategoryHalftoneEffect(void);

// setter for constant 'kCICategoryHalftoneEffect'
void _set_kCICategoryHalftoneEffect(id value);

// getter for constant 'kCICategoryHighDynamicRange'
id _get_kCICategoryHighDynamicRange(void);

// setter for constant 'kCICategoryHighDynamicRange'
void _set_kCICategoryHighDynamicRange(id value);

// getter for constant 'kCICategoryInterlaced'
id _get_kCICategoryInterlaced(void);

// setter for constant 'kCICategoryInterlaced'
void _set_kCICategoryInterlaced(id value);

// getter for constant 'kCICategoryNonSquarePixels'
id _get_kCICategoryNonSquarePixels(void);

// setter for constant 'kCICategoryNonSquarePixels'
void _set_kCICategoryNonSquarePixels(id value);

// getter for constant 'kCICategorySharpen'
id _get_kCICategorySharpen(void);

// setter for constant 'kCICategorySharpen'
void _set_kCICategorySharpen(id value);

// getter for constant 'kCICategoryStillImage'
id _get_kCICategoryStillImage(void);

// setter for constant 'kCICategoryStillImage'
void _set_kCICategoryStillImage(id value);

// getter for constant 'kCICategoryStylize'
id _get_kCICategoryStylize(void);

// setter for constant 'kCICategoryStylize'
void _set_kCICategoryStylize(id value);

// getter for constant 'kCICategoryTileEffect'
id _get_kCICategoryTileEffect(void);

// setter for constant 'kCICategoryTileEffect'
void _set_kCICategoryTileEffect(id value);

// getter for constant 'kCICategoryTransition'
id _get_kCICategoryTransition(void);

// setter for constant 'kCICategoryTransition'
void _set_kCICategoryTransition(id value);

// getter for constant 'kCICategoryVideo'
id _get_kCICategoryVideo(void);

// setter for constant 'kCICategoryVideo'
void _set_kCICategoryVideo(id value);

// getter for constant 'kCIContextOutputColorSpace'
id _get_kCIContextOutputColorSpace(void);

// setter for constant 'kCIContextOutputColorSpace'
void _set_kCIContextOutputColorSpace(id value);

// getter for constant 'kCIContextUseSoftwareRenderer'
id _get_kCIContextUseSoftwareRenderer(void);

// setter for constant 'kCIContextUseSoftwareRenderer'
void _set_kCIContextUseSoftwareRenderer(id value);

// getter for constant 'kCIContextWorkingColorSpace'
id _get_kCIContextWorkingColorSpace(void);

// setter for constant 'kCIContextWorkingColorSpace'
void _set_kCIContextWorkingColorSpace(id value);

// getter for constant 'kCIFormatARGB8'
int _get_kCIFormatARGB8(void);

// setter for constant 'kCIFormatARGB8'
void _set_kCIFormatARGB8(int value);

// getter for constant 'kCIFormatRGBA16'
int _get_kCIFormatRGBA16(void);

// setter for constant 'kCIFormatRGBA16'
void _set_kCIFormatRGBA16(int value);

// getter for constant 'kCIFormatRGBAf'
int _get_kCIFormatRGBAf(void);

// setter for constant 'kCIFormatRGBAf'
void _set_kCIFormatRGBAf(int value);

// getter for constant 'kCIImageColorSpace'
id _get_kCIImageColorSpace(void);

// setter for constant 'kCIImageColorSpace'
void _set_kCIImageColorSpace(id value);

// getter for constant 'kCIImageProviderTileSize'
id _get_kCIImageProviderTileSize(void);

// setter for constant 'kCIImageProviderTileSize'
void _set_kCIImageProviderTileSize(id value);

// getter for constant 'kCIImageProviderUserInfo'
id _get_kCIImageProviderUserInfo(void);

// setter for constant 'kCIImageProviderUserInfo'
void _set_kCIImageProviderUserInfo(id value);

// getter for constant 'kCISamplerAffineMatrix'
id _get_kCISamplerAffineMatrix(void);

// setter for constant 'kCISamplerAffineMatrix'
void _set_kCISamplerAffineMatrix(id value);

// getter for constant 'kCISamplerFilterLinear'
id _get_kCISamplerFilterLinear(void);

// setter for constant 'kCISamplerFilterLinear'
void _set_kCISamplerFilterLinear(id value);

// getter for constant 'kCISamplerFilterMode'
id _get_kCISamplerFilterMode(void);

// setter for constant 'kCISamplerFilterMode'
void _set_kCISamplerFilterMode(id value);

// getter for constant 'kCISamplerFilterNearest'
id _get_kCISamplerFilterNearest(void);

// setter for constant 'kCISamplerFilterNearest'
void _set_kCISamplerFilterNearest(id value);

// getter for constant 'kCISamplerWrapBlack'
id _get_kCISamplerWrapBlack(void);

// setter for constant 'kCISamplerWrapBlack'
void _set_kCISamplerWrapBlack(id value);

// getter for constant 'kCISamplerWrapClamp'
id _get_kCISamplerWrapClamp(void);

// setter for constant 'kCISamplerWrapClamp'
void _set_kCISamplerWrapClamp(id value);

// getter for constant 'kCISamplerWrapMode'
id _get_kCISamplerWrapMode(void);

// setter for constant 'kCISamplerWrapMode'
void _set_kCISamplerWrapMode(id value);

// method '-[CIColor alpha]'
float _IM_CIColor_alpha(CIColor *_self);

// method '-[CIColor blue]'
float _IM_CIColor_blue(CIColor *_self);

// method '-[CIColor colorSpace]'
struct CGColorSpace *_IM_CIColor_colorSpace(CIColor *_self);

// method '+[CIColor colorWithCGColor:]'
CIColor* _CM_CIColor_colorWithCGColor_C(Class _class, struct CGColor *c);

// method '+[CIColor colorWithRed:green:blue:]'
CIColor* _CM_CIColor_colorWithRed_Cgreen_Cblue_C(Class _class, float r, float g, float b);

// method '+[CIColor colorWithRed:green:blue:alpha:]'
CIColor* _CM_CIColor_colorWithRed_Cgreen_Cblue_Calpha_C(Class _class, float r, float g, float b, float a);

// method '+[CIColor colorWithString:]'
CIColor* _CM_CIColor_colorWithString_C(Class _class, id representation);

// method '-[CIColor components]'
const float* _IM_CIColor_components(CIColor *_self);

// method '-[CIColor green]'
float _IM_CIColor_green(CIColor *_self);

// method '-[CIColor initWithCGColor:]'
CIColor *_IM_CIColor_initWithCGColor_C(CIColor *_self, struct CGColor *c);

// method '-[CIColor numberOfComponents]'
unsigned long _IM_CIColor_numberOfComponents(CIColor *_self);

// method '-[CIColor red]'
float _IM_CIColor_red(CIColor *_self);

// method '-[CIColor stringRepresentation]'
id _IM_CIColor_stringRepresentation(CIColor *_self);

// method '-[CIContext clearCaches]'
void _IM_CIContext_clearCaches(CIContext *_self);

// method '+[CIContext contextWithCGContext:options:]'
CIContext* _CM_CIContext_contextWithCGContext_Coptions_C(Class _class, struct CGContext *ctx, id dict);

// method '+[CIContext contextWithCGLContext:pixelFormat:options:]'
CIContext* _CM_CIContext_contextWithCGLContext_CpixelFormat_Coptions_C(Class _class, struct _CGLContextObject *ctx, struct _CGLPixelFormatObject *pf, id dict);

// method '-[CIContext createCGImage:fromRect:]'
struct CGImage *_IM_CIContext_createCGImage_CfromRect_C(CIContext *_self, CIImage* im, struct CGRect r);

// method '-[CIContext createCGLayerWithSize:info:]'
struct CGLayer *_IM_CIContext_createCGLayerWithSize_Cinfo_C(CIContext *_self, struct CGSize size, struct __CFDictionary *d);

// method '-[CIContext drawImage:atPoint:fromRect:]'
void _IM_CIContext_drawImage_CatPoint_CfromRect_C(CIContext *_self, CIImage* im, struct CGPoint p, struct CGRect src);

// method '-[CIContext drawImage:inRect:fromRect:]'
void _IM_CIContext_drawImage_CinRect_CfromRect_C(CIContext *_self, CIImage* im, struct CGRect dest, struct CGRect src);

// method '-[CIContext reclaimResources]'
void _IM_CIContext_reclaimResources(CIContext *_self);

// method '-[CIFilter apply:arguments:options:]'
CIImage* _IM_CIFilter_apply_Carguments_Coptions_C(CIFilter *_self, CIKernel* k, id args, id dict);

// method '-[CIFilter attributes]'
id _IM_CIFilter_attributes(CIFilter *_self);

// method '+[CIFilter filterNamesInCategories:]'
id _CM_CIFilter_filterNamesInCategories_C(Class _class, id categories);

// method '+[CIFilter filterNamesInCategory:]'
id _CM_CIFilter_filterNamesInCategory_C(Class _class, id category);

// method '+[CIFilter filterWithName:]'
CIFilter* _CM_CIFilter_filterWithName_C(Class _class, id name);

// method '-[CIFilter inputKeys]'
id _IM_CIFilter_inputKeys(CIFilter *_self);

// method '+[CIFilter localizedNameForCategory:]'
id _CM_CIFilter_localizedNameForCategory_C(Class _class, id category);

// method '+[CIFilter localizedNameForFilterName:]'
id _CM_CIFilter_localizedNameForFilterName_C(Class _class, id filterName);

// method '-[CIFilter outputKeys]'
id _IM_CIFilter_outputKeys(CIFilter *_self);

// method '+[CIFilter registerFilterName:constructor:classAttributes:]'
void _CM_CIFilter_registerFilterName_Cconstructor_CclassAttributes_C(Class _class, id name, id anObject, id attributes);

// method '-[CIFilter setDefaults]'
void _IM_CIFilter_setDefaults(CIFilter *_self);

// method '-[CIFilterShape initWithRect:]'
CIFilterShape *_IM_CIFilterShape_initWithRect_C(CIFilterShape *_self, struct CGRect r);

// method '-[CIFilterShape insetByX:Y:]'
CIFilterShape* _IM_CIFilterShape_insetByX_CY_C(CIFilterShape *_self, int dx, int dy);

// method '-[CIFilterShape intersectWith:]'
CIFilterShape* _IM_CIFilterShape_intersectWith_C(CIFilterShape *_self, CIFilterShape* s2);

// method '-[CIFilterShape intersectWithRect:]'
CIFilterShape* _IM_CIFilterShape_intersectWithRect_C(CIFilterShape *_self, struct CGRect r);

// method '+[CIFilterShape shapeWithRect:]'
id _CM_CIFilterShape_shapeWithRect_C(Class _class, struct CGRect r);

// method '-[CIFilterShape transformBy:interior:]'
CIFilterShape* _IM_CIFilterShape_transformBy_Cinterior_C(CIFilterShape *_self, struct CGAffineTransform m, BOOL flag);

// method '-[CIFilterShape unionWith:]'
CIFilterShape* _IM_CIFilterShape_unionWith_C(CIFilterShape *_self, CIFilterShape* s2);

// method '-[CIFilterShape unionWithRect:]'
CIFilterShape* _IM_CIFilterShape_unionWithRect_C(CIFilterShape *_self, struct CGRect r);

// method '-[CIImage definition]'
CIFilterShape* _IM_CIImage_definition(CIImage *_self);

// method '-[CIImage extent]'
struct CGRect _IM_CIImage_extent(CIImage *_self);

// method '-[CIImage imageByApplyingTransform:]'
CIImage* _IM_CIImage_imageByApplyingTransform_C(CIImage *_self, struct CGAffineTransform matrix);

// method '+[CIImage imageWithBitmapData:bytesPerRow:size:format:colorSpace:]'
CIImage* _CM_CIImage_imageWithBitmapData_CbytesPerRow_Csize_Cformat_CcolorSpace_C(Class _class, id d, unsigned long bpr, struct CGSize size, int f, struct CGColorSpace *cs);

// method '+[CIImage imageWithCGImage:]'
CIImage* _CM_CIImage_imageWithCGImage_C(Class _class, struct CGImage *image);

// method '+[CIImage imageWithCGImage:options:]'
CIImage* _CM_CIImage_imageWithCGImage_Coptions_C(Class _class, struct CGImage *image, id d);

// method '+[CIImage imageWithCGLayer:]'
CIImage* _CM_CIImage_imageWithCGLayer_C(Class _class, struct CGLayer *layer);

// method '+[CIImage imageWithCGLayer:options:]'
CIImage* _CM_CIImage_imageWithCGLayer_Coptions_C(Class _class, struct CGLayer *layer, id d);

// method '+[CIImage imageWithCVImageBuffer:]'
CIImage* _CM_CIImage_imageWithCVImageBuffer_C(Class _class, struct __CVBuffer *imageBuffer);

// method '+[CIImage imageWithCVImageBuffer:options:]'
CIImage* _CM_CIImage_imageWithCVImageBuffer_Coptions_C(Class _class, struct __CVBuffer *imageBuffer, id dict);

// method '+[CIImage imageWithContentsOfURL:]'
CIImage* _CM_CIImage_imageWithContentsOfURL_C(Class _class, id url);

// method '+[CIImage imageWithContentsOfURL:options:]'
CIImage* _CM_CIImage_imageWithContentsOfURL_Coptions_C(Class _class, id url, id d);

// method '+[CIImage imageWithData:]'
CIImage* _CM_CIImage_imageWithData_C(Class _class, id data);

// method '+[CIImage imageWithData:options:]'
CIImage* _CM_CIImage_imageWithData_Coptions_C(Class _class, id data, id d);

// method '+[CIImage imageWithImageProvider:size::format:colorSpace:options:]'
CIImage* _CM_CIImage_imageWithImageProvider_Csize_C_Cformat_CcolorSpace_Coptions_C(Class _class, id p, unsigned long width, unsigned long height, int f, struct CGColorSpace *cs, id dict);

// method '+[CIImage imageWithTexture:size:flipped:colorSpace:]'
CIImage* _CM_CIImage_imageWithTexture_Csize_Cflipped_CcolorSpace_C(Class _class, unsigned int name, struct CGSize size, BOOL flag, struct CGColorSpace *cs);

// method '-[CIImage initWithBitmapData:bytesPerRow:size:format:colorSpace:]'
CIImage *_IM_CIImage_initWithBitmapData_CbytesPerRow_Csize_Cformat_CcolorSpace_C(CIImage *_self, id d, unsigned long bpr, struct CGSize size, int f, struct CGColorSpace *c);

// method '-[CIImage initWithCGImage:]'
CIImage *_IM_CIImage_initWithCGImage_C(CIImage *_self, struct CGImage *image);

// method '-[CIImage initWithCGImage:options:]'
CIImage *_IM_CIImage_initWithCGImage_Coptions_C(CIImage *_self, struct CGImage *image, id d);

// method '-[CIImage initWithCGLayer:]'
CIImage *_IM_CIImage_initWithCGLayer_C(CIImage *_self, struct CGLayer *layer);

// method '-[CIImage initWithCGLayer:options:]'
CIImage *_IM_CIImage_initWithCGLayer_Coptions_C(CIImage *_self, struct CGLayer *layer, id d);

// method '-[CIImage initWithCVImageBuffer:]'
CIImage *_IM_CIImage_initWithCVImageBuffer_C(CIImage *_self, struct __CVBuffer *imageBuffer);

// method '-[CIImage initWithCVImageBuffer:options:]'
CIImage *_IM_CIImage_initWithCVImageBuffer_Coptions_C(CIImage *_self, struct __CVBuffer *imageBuffer, id dict);

// method '-[CIImage initWithContentsOfURL:]'
CIImage *_IM_CIImage_initWithContentsOfURL_C(CIImage *_self, id url);

// method '-[CIImage initWithContentsOfURL:options:]'
CIImage *_IM_CIImage_initWithContentsOfURL_Coptions_C(CIImage *_self, id url, id d);

// method '-[CIImage initWithData:]'
CIImage *_IM_CIImage_initWithData_C(CIImage *_self, id data);

// method '-[CIImage initWithData:options:]'
CIImage *_IM_CIImage_initWithData_Coptions_C(CIImage *_self, id data, id d);

// method '-[CIImage initWithImageProvider:size::format:colorSpace:options:]'
CIImage *_IM_CIImage_initWithImageProvider_Csize_C_Cformat_CcolorSpace_Coptions_C(CIImage *_self, id p, unsigned long width, unsigned long height, int f, struct CGColorSpace *cs, id dict);

// method '-[CIImage initWithTexture:size:flipped:colorSpace:]'
CIImage *_IM_CIImage_initWithTexture_Csize_Cflipped_CcolorSpace_C(CIImage *_self, unsigned int name, struct CGSize size, BOOL flag, struct CGColorSpace *cs);

// method '-[CIImageAccumulator extent]'
struct CGRect _IM_CIImageAccumulator_extent(CIImageAccumulator *_self);

// method '-[CIImageAccumulator format]'
int _IM_CIImageAccumulator_format(CIImageAccumulator *_self);

// method '-[CIImageAccumulator image]'
CIImage* _IM_CIImageAccumulator_image(CIImageAccumulator *_self);

// method '+[CIImageAccumulator imageAccumulatorWithExtent:format:]'
CIImageAccumulator* _CM_CIImageAccumulator_imageAccumulatorWithExtent_Cformat_C(Class _class, struct CGRect r, int f);

// method '-[CIImageAccumulator initWithExtent:format:]'
CIImageAccumulator *_IM_CIImageAccumulator_initWithExtent_Cformat_C(CIImageAccumulator *_self, struct CGRect r, int f);

// method '-[CIImageAccumulator setImage:]'
void _IM_CIImageAccumulator_setImage_C(CIImageAccumulator *_self, CIImage* im);

// method '-[CIImageAccumulator setImage:dirtyRect:]'
void _IM_CIImageAccumulator_setImage_CdirtyRect_C(CIImageAccumulator *_self, CIImage* im, struct CGRect r);

// method '+[CIKernel kernelsWithString:]'
id _CM_CIKernel_kernelsWithString_C(Class _class, id s);

// method '-[CIKernel name]'
id _IM_CIKernel_name(CIKernel *_self);

// method '-[CIKernel setROISelector:]'
void _IM_CIKernel_setROISelector_C(CIKernel *_self, SEL aMethod);

// method '+[CIPlugIn loadAllPlugIns]'
void _CM_CIPlugIn_loadAllPlugIns(Class _class);

// method '+[CIPlugIn loadNonExecutablePlugIns]'
void _CM_CIPlugIn_loadNonExecutablePlugIns(Class _class);

// method '+[CIPlugIn loadPlugIn:allowNonExecutable:]'
void _CM_CIPlugIn_loadPlugIn_CallowNonExecutable_C(Class _class, id url, BOOL allowNonExecutable);

// method '-[CISampler definition]'
CIFilterShape* _IM_CISampler_definition(CISampler *_self);

// method '-[CISampler extent]'
struct CGRect _IM_CISampler_extent(CISampler *_self);

// method '-[CISampler initWithImage:]'
CISampler *_IM_CISampler_initWithImage_C(CISampler *_self, CIImage* im);

// method '-[CISampler initWithImage:options:]'
CISampler *_IM_CISampler_initWithImage_Coptions_C(CISampler *_self, CIImage* im, id dict);

// method '+[CISampler samplerWithImage:]'
CISampler* _CM_CISampler_samplerWithImage_C(Class _class, CIImage* im);

// method '+[CISampler samplerWithImage:options:]'
CISampler* _CM_CISampler_samplerWithImage_Coptions_C(Class _class, CIImage* im, id dict);

// method '-[CIVector W]'
float _IM_CIVector_W(CIVector *_self);

// method '-[CIVector X]'
float _IM_CIVector_X(CIVector *_self);

// method '-[CIVector Y]'
float _IM_CIVector_Y(CIVector *_self);

// method '-[CIVector Z]'
float _IM_CIVector_Z(CIVector *_self);

// method '-[CIVector count]'
unsigned long _IM_CIVector_count(CIVector *_self);

// method '-[CIVector initWithValues:count:]'
CIVector *_IM_CIVector_initWithValues_Ccount_C(CIVector *_self, const float* values, unsigned long count);

// method '-[CIVector initWithX:]'
CIVector *_IM_CIVector_initWithX_C(CIVector *_self, float x);

// method '-[CIVector initWithX:Y:]'
CIVector *_IM_CIVector_initWithX_CY_C(CIVector *_self, float x, float y);

// method '-[CIVector initWithX:Y:Z:]'
CIVector *_IM_CIVector_initWithX_CY_CZ_C(CIVector *_self, float x, float y, float z);

// method '-[CIVector initWithX:Y:Z:W:]'
CIVector *_IM_CIVector_initWithX_CY_CZ_CW_C(CIVector *_self, float x, float y, float z, float w);

// method '-[CIVector stringRepresentation]'
id _IM_CIVector_stringRepresentation(CIVector *_self);

// method '-[CIVector valueAtIndex:]'
float _IM_CIVector_valueAtIndex_C(CIVector *_self, unsigned long index);

// method '+[CIVector vectorWithString:]'
CIVector* _CM_CIVector_vectorWithString_C(Class _class, id representation);

// method '+[CIVector vectorWithValues:count:]'
CIVector* _CM_CIVector_vectorWithValues_Ccount_C(Class _class, const float* values, unsigned long count);

// method '+[CIVector vectorWithX:]'
CIVector* _CM_CIVector_vectorWithX_C(Class _class, float x);

// method '+[CIVector vectorWithX:Y:]'
CIVector* _CM_CIVector_vectorWithX_CY_C(Class _class, float x, float y);

// method '+[CIVector vectorWithX:Y:Z:]'
CIVector* _CM_CIVector_vectorWithX_CY_CZ_C(Class _class, float x, float y, float z);

// method '+[CIVector vectorWithX:Y:Z:W:]'
CIVector* _CM_CIVector_vectorWithX_CY_CZ_CW_C(Class _class, float x, float y, float z, float w);

// method '-[NSObject load:]'
BOOL _IM_NSObject_load_C(NSObject *_self, void *host);

// method '-[NSObject provideImageData:bytesPerRow:origin::size::userInfo:]'
void _IM_NSObject_provideImageData_CbytesPerRow_Corigin_C_Csize_C_CuserInfo_C(NSObject *_self, void *data, unsigned long rowbytes, unsigned long x, unsigned long y, unsigned long width, unsigned long height, id info);


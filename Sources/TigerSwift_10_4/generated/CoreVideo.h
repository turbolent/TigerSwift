// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'CVBufferRef'
typedef struct __CVBuffer *CVBufferRef;

// CoreFoundation type 'CVDisplayLinkRef'
typedef struct __CVDisplayLink *CVDisplayLinkRef;

// CoreFoundation type 'CVOpenGLBufferPoolRef'
typedef struct __CVOpenGLBufferPool *CVOpenGLBufferPoolRef;

// CoreFoundation type 'CVOpenGLTextureCacheRef'
typedef struct __CVOpenGLTextureCache *CVOpenGLTextureCacheRef;

// CoreFoundation type 'CVPixelBufferPoolRef'
typedef struct __CVPixelBufferPool *CVPixelBufferPoolRef;

// struct 'CVSMPTETime'
struct CVSMPTETime {
    short subframes;
    short subframeDivisor;
    unsigned int counter;
    unsigned int type;
    unsigned int flags;
    short hours;
    short minutes;
    short seconds;
    short frames;
};

// struct '_CVTime'
struct _CVTime {
    long long timeValue;
    int timeScale;
    int flags;
};

typedef struct _CVTime CVTime;

// struct '_CVTimeStamp'
struct _CVTimeStamp {
    unsigned int version;
    int videoTimeScale;
    long long videoTime;
    unsigned long long hostTime;
    double rateScalar;
    long long videoRefreshPeriod;
    struct CVSMPTETime smpteTime;
    unsigned long long flags;
    unsigned long long reserved;
};

typedef struct _CVTimeStamp CVTimeStamp;

// getter for constant 'kCVBufferMovieTimeKey'
struct __CFString *_get_kCVBufferMovieTimeKey(void);

// getter for constant 'kCVBufferNonPropagatedAttachmentsKey'
struct __CFString *_get_kCVBufferNonPropagatedAttachmentsKey(void);

// getter for constant 'kCVBufferPropagatedAttachmentsKey'
struct __CFString *_get_kCVBufferPropagatedAttachmentsKey(void);

// getter for constant 'kCVBufferTimeScaleKey'
struct __CFString *_get_kCVBufferTimeScaleKey(void);

// getter for constant 'kCVBufferTimeValueKey'
struct __CFString *_get_kCVBufferTimeValueKey(void);

// getter for constant 'kCVImageBufferCGColorSpaceKey'
struct __CFString *_get_kCVImageBufferCGColorSpaceKey(void);

// getter for constant 'kCVImageBufferCleanApertureHeightKey'
struct __CFString *_get_kCVImageBufferCleanApertureHeightKey(void);

// getter for constant 'kCVImageBufferCleanApertureHorizontalOffsetKey'
struct __CFString *_get_kCVImageBufferCleanApertureHorizontalOffsetKey(void);

// getter for constant 'kCVImageBufferCleanApertureKey'
struct __CFString *_get_kCVImageBufferCleanApertureKey(void);

// getter for constant 'kCVImageBufferCleanApertureVerticalOffsetKey'
struct __CFString *_get_kCVImageBufferCleanApertureVerticalOffsetKey(void);

// getter for constant 'kCVImageBufferCleanApertureWidthKey'
struct __CFString *_get_kCVImageBufferCleanApertureWidthKey(void);

// getter for constant 'kCVImageBufferDisplayDimensionsKey'
struct __CFString *_get_kCVImageBufferDisplayDimensionsKey(void);

// getter for constant 'kCVImageBufferDisplayHeightKey'
struct __CFString *_get_kCVImageBufferDisplayHeightKey(void);

// getter for constant 'kCVImageBufferDisplayWidthKey'
struct __CFString *_get_kCVImageBufferDisplayWidthKey(void);

// getter for constant 'kCVImageBufferFieldCountKey'
struct __CFString *_get_kCVImageBufferFieldCountKey(void);

// getter for constant 'kCVImageBufferFieldDetailKey'
struct __CFString *_get_kCVImageBufferFieldDetailKey(void);

// getter for constant 'kCVImageBufferFieldDetailSpatialFirstLineEarly'
struct __CFString *_get_kCVImageBufferFieldDetailSpatialFirstLineEarly(void);

// getter for constant 'kCVImageBufferFieldDetailSpatialFirstLineLate'
struct __CFString *_get_kCVImageBufferFieldDetailSpatialFirstLineLate(void);

// getter for constant 'kCVImageBufferFieldDetailTemporalBottomFirst'
struct __CFString *_get_kCVImageBufferFieldDetailTemporalBottomFirst(void);

// getter for constant 'kCVImageBufferFieldDetailTemporalTopFirst'
struct __CFString *_get_kCVImageBufferFieldDetailTemporalTopFirst(void);

// getter for constant 'kCVImageBufferGammaLevelKey'
struct __CFString *_get_kCVImageBufferGammaLevelKey(void);

// getter for constant 'kCVImageBufferPixelAspectRatioHorizontalSpacingKey'
struct __CFString *_get_kCVImageBufferPixelAspectRatioHorizontalSpacingKey(void);

// getter for constant 'kCVImageBufferPixelAspectRatioKey'
struct __CFString *_get_kCVImageBufferPixelAspectRatioKey(void);

// getter for constant 'kCVImageBufferPixelAspectRatioVerticalSpacingKey'
struct __CFString *_get_kCVImageBufferPixelAspectRatioVerticalSpacingKey(void);

// getter for constant 'kCVImageBufferPreferredCleanApertureKey'
struct __CFString *_get_kCVImageBufferPreferredCleanApertureKey(void);

// getter for constant 'kCVImageBufferYCbCrMatrixKey'
struct __CFString *_get_kCVImageBufferYCbCrMatrixKey(void);

// getter for constant 'kCVImageBufferYCbCrMatrix_ITU_R_601_4'
struct __CFString *_get_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void);

// getter for constant 'kCVImageBufferYCbCrMatrix_ITU_R_709_2'
struct __CFString *_get_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void);

// getter for constant 'kCVImageBufferYCbCrMatrix_SMPTE_240M_1995'
struct __CFString *_get_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void);

// getter for constant 'kCVIndefiniteTime'
struct _CVTime _get_kCVIndefiniteTime(void);

// getter for constant 'kCVOpenGLBufferHeight'
struct __CFString *_get_kCVOpenGLBufferHeight(void);

// getter for constant 'kCVOpenGLBufferInternalFormat'
struct __CFString *_get_kCVOpenGLBufferInternalFormat(void);

// getter for constant 'kCVOpenGLBufferMaximumMipmapLevel'
struct __CFString *_get_kCVOpenGLBufferMaximumMipmapLevel(void);

// getter for constant 'kCVOpenGLBufferPoolMaximumBufferAgeKey'
struct __CFString *_get_kCVOpenGLBufferPoolMaximumBufferAgeKey(void);

// getter for constant 'kCVOpenGLBufferPoolMinimumBufferCountKey'
struct __CFString *_get_kCVOpenGLBufferPoolMinimumBufferCountKey(void);

// getter for constant 'kCVOpenGLBufferTarget'
struct __CFString *_get_kCVOpenGLBufferTarget(void);

// getter for constant 'kCVOpenGLBufferWidth'
struct __CFString *_get_kCVOpenGLBufferWidth(void);

// getter for constant 'kCVPixelBufferBytesPerRowAlignmentKey'
struct __CFString *_get_kCVPixelBufferBytesPerRowAlignmentKey(void);

// getter for constant 'kCVPixelBufferCGBitmapContextCompatibilityKey'
struct __CFString *_get_kCVPixelBufferCGBitmapContextCompatibilityKey(void);

// getter for constant 'kCVPixelBufferCGImageCompatibilityKey'
struct __CFString *_get_kCVPixelBufferCGImageCompatibilityKey(void);

// getter for constant 'kCVPixelBufferExtendedPixelsBottomKey'
struct __CFString *_get_kCVPixelBufferExtendedPixelsBottomKey(void);

// getter for constant 'kCVPixelBufferExtendedPixelsLeftKey'
struct __CFString *_get_kCVPixelBufferExtendedPixelsLeftKey(void);

// getter for constant 'kCVPixelBufferExtendedPixelsRightKey'
struct __CFString *_get_kCVPixelBufferExtendedPixelsRightKey(void);

// getter for constant 'kCVPixelBufferExtendedPixelsTopKey'
struct __CFString *_get_kCVPixelBufferExtendedPixelsTopKey(void);

// getter for constant 'kCVPixelBufferHeightKey'
struct __CFString *_get_kCVPixelBufferHeightKey(void);

// getter for constant 'kCVPixelBufferMemoryAllocatorKey'
struct __CFString *_get_kCVPixelBufferMemoryAllocatorKey(void);

// getter for constant 'kCVPixelBufferOpenGLCompatibilityKey'
struct __CFString *_get_kCVPixelBufferOpenGLCompatibilityKey(void);

// getter for constant 'kCVPixelBufferPixelFormatTypeKey'
struct __CFString *_get_kCVPixelBufferPixelFormatTypeKey(void);

// getter for constant 'kCVPixelBufferPoolMaximumBufferAgeKey'
struct __CFString *_get_kCVPixelBufferPoolMaximumBufferAgeKey(void);

// getter for constant 'kCVPixelBufferPoolMinimumBufferCountKey'
struct __CFString *_get_kCVPixelBufferPoolMinimumBufferCountKey(void);

// getter for constant 'kCVPixelBufferWidthKey'
struct __CFString *_get_kCVPixelBufferWidthKey(void);

// getter for constant 'kCVPixelFormatBitsPerBlock'
struct __CFString *_get_kCVPixelFormatBitsPerBlock(void);

// getter for constant 'kCVPixelFormatBlockHeight'
struct __CFString *_get_kCVPixelFormatBlockHeight(void);

// getter for constant 'kCVPixelFormatBlockHorizontalAlignment'
struct __CFString *_get_kCVPixelFormatBlockHorizontalAlignment(void);

// getter for constant 'kCVPixelFormatBlockVerticalAlignment'
struct __CFString *_get_kCVPixelFormatBlockVerticalAlignment(void);

// getter for constant 'kCVPixelFormatBlockWidth'
struct __CFString *_get_kCVPixelFormatBlockWidth(void);

// getter for constant 'kCVPixelFormatCGBitmapContextCompatibility'
struct __CFString *_get_kCVPixelFormatCGBitmapContextCompatibility(void);

// getter for constant 'kCVPixelFormatCGBitmapInfo'
struct __CFString *_get_kCVPixelFormatCGBitmapInfo(void);

// getter for constant 'kCVPixelFormatCGImageCompatibility'
struct __CFString *_get_kCVPixelFormatCGImageCompatibility(void);

// getter for constant 'kCVPixelFormatCodecType'
struct __CFString *_get_kCVPixelFormatCodecType(void);

// getter for constant 'kCVPixelFormatConstant'
struct __CFString *_get_kCVPixelFormatConstant(void);

// getter for constant 'kCVPixelFormatFillExtendedPixelsCallback'
struct __CFString *_get_kCVPixelFormatFillExtendedPixelsCallback(void);

// getter for constant 'kCVPixelFormatFourCC'
struct __CFString *_get_kCVPixelFormatFourCC(void);

// getter for constant 'kCVPixelFormatHorizontalSubsampling'
struct __CFString *_get_kCVPixelFormatHorizontalSubsampling(void);

// getter for constant 'kCVPixelFormatName'
struct __CFString *_get_kCVPixelFormatName(void);

// getter for constant 'kCVPixelFormatOpenGLCompatibility'
struct __CFString *_get_kCVPixelFormatOpenGLCompatibility(void);

// getter for constant 'kCVPixelFormatOpenGLFormat'
struct __CFString *_get_kCVPixelFormatOpenGLFormat(void);

// getter for constant 'kCVPixelFormatOpenGLInternalFormat'
struct __CFString *_get_kCVPixelFormatOpenGLInternalFormat(void);

// getter for constant 'kCVPixelFormatOpenGLType'
struct __CFString *_get_kCVPixelFormatOpenGLType(void);

// getter for constant 'kCVPixelFormatPlanes'
struct __CFString *_get_kCVPixelFormatPlanes(void);

// getter for constant 'kCVPixelFormatQDCompatibility'
struct __CFString *_get_kCVPixelFormatQDCompatibility(void);

// getter for constant 'kCVPixelFormatVerticalSubsampling'
struct __CFString *_get_kCVPixelFormatVerticalSubsampling(void);

// getter for constant 'kCVZeroTime'
struct _CVTime _get_kCVZeroTime(void);

enum { kCVAttachmentMode_ShouldNotPropagate = 0 };

enum { kCVAttachmentMode_ShouldPropagate = 1 };

enum { kCVReturnAllocationFailed = -6662 };

enum { kCVReturnDisplayLinkAlreadyRunning = -6671 };

enum { kCVReturnDisplayLinkCallbacksNotSet = -6673 };

enum { kCVReturnDisplayLinkNotRunning = -6672 };

enum { kCVReturnError = -6660 };

enum { kCVReturnFirst = -6660 };

enum { kCVReturnInvalidArgument = -6661 };

enum { kCVReturnInvalidDisplay = -6670 };

enum { kCVReturnInvalidPixelBufferAttributes = -6682 };

enum { kCVReturnInvalidPixelFormat = -6680 };

enum { kCVReturnInvalidPoolAttributes = -6691 };

enum { kCVReturnInvalidSize = -6681 };

enum { kCVReturnLast = -6699 };

enum { kCVReturnPixelBufferNotOpenGLCompatible = -6683 };

enum { kCVReturnPoolAllocationFailed = -6690 };

enum { kCVReturnSuccess = 0 };

enum { kCVSMPTETimeRunning = 2 };

enum { kCVSMPTETimeType24 = 0 };

enum { kCVSMPTETimeType25 = 1 };

enum { kCVSMPTETimeType2997 = 4 };

enum { kCVSMPTETimeType2997Drop = 5 };

enum { kCVSMPTETimeType30 = 3 };

enum { kCVSMPTETimeType30Drop = 2 };

enum { kCVSMPTETimeType5994 = 7 };

enum { kCVSMPTETimeType60 = 6 };

enum { kCVSMPTETimeValid = 1 };

enum { kCVTimeIsIndefinite = 1 };

enum { kCVTimeStampBottomField = 131072 };

enum { kCVTimeStampHostTimeValid = 2 };

enum { kCVTimeStampIsInterlaced = 196608 };

enum { kCVTimeStampRateScalarValid = 16 };

enum { kCVTimeStampSMPTETimeValid = 4 };

enum { kCVTimeStampTopField = 65536 };

enum { kCVTimeStampVideoHostTimeValid = 3 };

enum { kCVTimeStampVideoRefreshPeriodValid = 8 };

enum { kCVTimeStampVideoTimeValid = 1 };

// function 'CVBufferGetAttachment'
id CVBufferGetAttachment(struct __CVBuffer *buffer, struct __CFString *key, unsigned int *attachmentMode);

// function 'CVBufferGetAttachments'
struct __CFDictionary *CVBufferGetAttachments(struct __CVBuffer *buffer, unsigned int attachmentMode);

// function 'CVBufferPropagateAttachments'
void CVBufferPropagateAttachments(struct __CVBuffer *sourceBuffer, struct __CVBuffer *destinationBuffer);

// function 'CVBufferRelease'
void CVBufferRelease(struct __CVBuffer *buffer);

// function 'CVBufferRemoveAllAttachments'
void CVBufferRemoveAllAttachments(struct __CVBuffer *buffer);

// function 'CVBufferRemoveAttachment'
void CVBufferRemoveAttachment(struct __CVBuffer *buffer, struct __CFString *key);

// function 'CVBufferRetain'
struct __CVBuffer *CVBufferRetain(struct __CVBuffer *buffer);

// function 'CVBufferSetAttachment'
void CVBufferSetAttachment(struct __CVBuffer *buffer, struct __CFString *key, id value, unsigned int attachmentMode);

// function 'CVBufferSetAttachments'
void CVBufferSetAttachments(struct __CVBuffer *buffer, struct __CFDictionary *theAttachments, unsigned int attachmentMode);

// function 'CVDisplayLinkCreateWithActiveCGDisplays'
int CVDisplayLinkCreateWithActiveCGDisplays(struct __CVDisplayLink **displayLinkOut);

// function 'CVDisplayLinkCreateWithCGDisplay'
int CVDisplayLinkCreateWithCGDisplay(struct _CGDirectDisplayID *displayID, struct __CVDisplayLink **displayLinkOut);

// function 'CVDisplayLinkCreateWithCGDisplays'
int CVDisplayLinkCreateWithCGDisplays(struct _CGDirectDisplayID **displayArray, long count, struct __CVDisplayLink **displayLinkOut);

// function 'CVDisplayLinkCreateWithOpenGLDisplayMask'
int CVDisplayLinkCreateWithOpenGLDisplayMask(unsigned int mask, struct __CVDisplayLink **displayLinkOut);

// function 'CVDisplayLinkGetActualOutputVideoRefreshPeriod'
double CVDisplayLinkGetActualOutputVideoRefreshPeriod(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkGetCurrentCGDisplay'
struct _CGDirectDisplayID *CVDisplayLinkGetCurrentCGDisplay(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkGetCurrentTime'
int CVDisplayLinkGetCurrentTime(struct __CVDisplayLink *displayLink, struct _CVTimeStamp *outTime);

// function 'CVDisplayLinkGetNominalOutputVideoRefreshPeriod'
struct _CVTime CVDisplayLinkGetNominalOutputVideoRefreshPeriod(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkGetOutputVideoLatency'
struct _CVTime CVDisplayLinkGetOutputVideoLatency(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkGetTypeID'
unsigned long CVDisplayLinkGetTypeID(void);

// function 'CVDisplayLinkIsRunning'
Boolean CVDisplayLinkIsRunning(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkRelease'
void CVDisplayLinkRelease(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkRetain'
struct __CVDisplayLink *CVDisplayLinkRetain(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkSetCurrentCGDisplay'
int CVDisplayLinkSetCurrentCGDisplay(struct __CVDisplayLink *displayLink, struct _CGDirectDisplayID *displayID);

// function 'CVDisplayLinkSetCurrentCGDisplayFromOpenGLContext'
int CVDisplayLinkSetCurrentCGDisplayFromOpenGLContext(struct __CVDisplayLink *displayLink, struct _CGLContextObject *cglContext, struct _CGLPixelFormatObject *cglPixelFormat);

// function 'CVDisplayLinkStart'
int CVDisplayLinkStart(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkStop'
int CVDisplayLinkStop(struct __CVDisplayLink *displayLink);

// function 'CVDisplayLinkTranslateTime'
int CVDisplayLinkTranslateTime(struct __CVDisplayLink *displayLink, const struct _CVTimeStamp* inTime, struct _CVTimeStamp *outTime);

// function 'CVGetCurrentHostTime'
unsigned long long CVGetCurrentHostTime(void);

// function 'CVGetHostClockFrequency'
double CVGetHostClockFrequency(void);

// function 'CVGetHostClockMinimumTimeDelta'
unsigned int CVGetHostClockMinimumTimeDelta(void);

// function 'CVImageBufferGetCleanRect'
struct CGRect CVImageBufferGetCleanRect(struct __CVBuffer *imageBuffer);

// function 'CVImageBufferGetColorSpace'
struct CGColorSpace *CVImageBufferGetColorSpace(struct __CVBuffer *imageBuffer);

// function 'CVImageBufferGetDisplaySize'
struct CGSize CVImageBufferGetDisplaySize(struct __CVBuffer *imageBuffer);

// function 'CVImageBufferGetEncodedSize'
struct CGSize CVImageBufferGetEncodedSize(struct __CVBuffer *imageBuffer);

// function 'CVOpenGLBufferAttach'
int CVOpenGLBufferAttach(struct __CVBuffer *openGLBuffer, struct _CGLContextObject *cglContext, unsigned long face, long level, long screen);

// function 'CVOpenGLBufferCreate'
int CVOpenGLBufferCreate(struct __CFAllocator *allocator, unsigned long width, unsigned long height, struct __CFDictionary *attributes, struct __CVBuffer **bufferOut);

// function 'CVOpenGLBufferGetAttributes'
struct __CFDictionary *CVOpenGLBufferGetAttributes(struct __CVBuffer *openGLBuffer);

// function 'CVOpenGLBufferGetTypeID'
unsigned long CVOpenGLBufferGetTypeID(void);

// function 'CVOpenGLBufferPoolCreate'
int CVOpenGLBufferPoolCreate(struct __CFAllocator *allocator, struct __CFDictionary *poolAttributes, struct __CFDictionary *openGLBufferAttributes, struct __CVOpenGLBufferPool **poolOut);

// function 'CVOpenGLBufferPoolCreateOpenGLBuffer'
int CVOpenGLBufferPoolCreateOpenGLBuffer(struct __CFAllocator *allocator, struct __CVOpenGLBufferPool *openGLBufferPool, struct __CVBuffer **openGLBufferOut);

// function 'CVOpenGLBufferPoolGetAttributes'
struct __CFDictionary *CVOpenGLBufferPoolGetAttributes(struct __CVOpenGLBufferPool *pool);

// function 'CVOpenGLBufferPoolGetOpenGLBufferAttributes'
struct __CFDictionary *CVOpenGLBufferPoolGetOpenGLBufferAttributes(struct __CVOpenGLBufferPool *pool);

// function 'CVOpenGLBufferPoolGetTypeID'
unsigned long CVOpenGLBufferPoolGetTypeID(void);

// function 'CVOpenGLBufferPoolRelease'
void CVOpenGLBufferPoolRelease(struct __CVOpenGLBufferPool *openGLBufferPool);

// function 'CVOpenGLBufferPoolRetain'
struct __CVOpenGLBufferPool *CVOpenGLBufferPoolRetain(struct __CVOpenGLBufferPool *openGLBufferPool);

// function 'CVOpenGLBufferRelease'
void CVOpenGLBufferRelease(struct __CVBuffer *buffer);

// function 'CVOpenGLBufferRetain'
struct __CVBuffer *CVOpenGLBufferRetain(struct __CVBuffer *buffer);

// function 'CVOpenGLTextureCacheCreate'
int CVOpenGLTextureCacheCreate(struct __CFAllocator *allocator, struct __CFDictionary *cacheAttributes, struct _CGLContextObject *cglContext, struct _CGLPixelFormatObject *cglPixelFormat, struct __CFDictionary *textureAttributes, struct __CVOpenGLTextureCache **cacheOut);

// function 'CVOpenGLTextureCacheCreateTextureFromImage'
int CVOpenGLTextureCacheCreateTextureFromImage(struct __CFAllocator *allocator, struct __CVOpenGLTextureCache *textureCache, struct __CVBuffer *sourceImage, struct __CFDictionary *attributes, struct __CVBuffer **textureOut);

// function 'CVOpenGLTextureCacheFlush'
void CVOpenGLTextureCacheFlush(struct __CVOpenGLTextureCache *textureCache, unsigned long long options);

// function 'CVOpenGLTextureCacheGetTypeID'
unsigned long CVOpenGLTextureCacheGetTypeID(void);

// function 'CVOpenGLTextureCacheRelease'
void CVOpenGLTextureCacheRelease(struct __CVOpenGLTextureCache *textureCache);

// function 'CVOpenGLTextureCacheRetain'
struct __CVOpenGLTextureCache *CVOpenGLTextureCacheRetain(struct __CVOpenGLTextureCache *textureCache);

// function 'CVOpenGLTextureGetCleanTexCoords'
void CVOpenGLTextureGetCleanTexCoords(struct __CVBuffer *image, float *lowerLeft, float *lowerRight, float *upperRight, float *upperLeft);

// function 'CVOpenGLTextureGetName'
unsigned long CVOpenGLTextureGetName(struct __CVBuffer *image);

// function 'CVOpenGLTextureGetTarget'
unsigned long CVOpenGLTextureGetTarget(struct __CVBuffer *image);

// function 'CVOpenGLTextureGetTypeID'
unsigned long CVOpenGLTextureGetTypeID(void);

// function 'CVOpenGLTextureIsFlipped'
Boolean CVOpenGLTextureIsFlipped(struct __CVBuffer *image);

// function 'CVOpenGLTextureRelease'
void CVOpenGLTextureRelease(struct __CVBuffer *texture);

// function 'CVOpenGLTextureRetain'
struct __CVBuffer *CVOpenGLTextureRetain(struct __CVBuffer *texture);

// function 'CVPixelBufferCreate'
int CVPixelBufferCreate(struct __CFAllocator *allocator, unsigned long width, unsigned long height, unsigned long pixelFormatType, struct __CFDictionary *pixelBufferAttributes, struct __CVBuffer **pixelBufferOut);

// function 'CVPixelBufferCreateResolvedAttributesDictionary'
int CVPixelBufferCreateResolvedAttributesDictionary(struct __CFAllocator *allocator, struct __CFArray *attributes, struct __CFDictionary **resolvedDictionaryOut);

// function 'CVPixelBufferFillExtendedPixels'
int CVPixelBufferFillExtendedPixels(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetBaseAddress'
void *CVPixelBufferGetBaseAddress(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetBaseAddressOfPlane'
void *CVPixelBufferGetBaseAddressOfPlane(struct __CVBuffer *pixelBuffer, unsigned long planeIndex);

// function 'CVPixelBufferGetBytesPerRow'
unsigned long CVPixelBufferGetBytesPerRow(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetBytesPerRowOfPlane'
unsigned long CVPixelBufferGetBytesPerRowOfPlane(struct __CVBuffer *pixelBuffer, unsigned long planeIndex);

// function 'CVPixelBufferGetDataSize'
unsigned long CVPixelBufferGetDataSize(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetExtendedPixels'
void CVPixelBufferGetExtendedPixels(struct __CVBuffer *pixelBuffer, unsigned int *extraColumnsOnLeft, unsigned int *extraColumnsOnRight, unsigned int *extraRowsOnTop, unsigned int *extraRowsOnBottom);

// function 'CVPixelBufferGetHeight'
unsigned long CVPixelBufferGetHeight(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetHeightOfPlane'
unsigned long CVPixelBufferGetHeightOfPlane(struct __CVBuffer *pixelBuffer, unsigned long planeIndex);

// function 'CVPixelBufferGetPixelFormatType'
unsigned long CVPixelBufferGetPixelFormatType(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetPlaneCount'
unsigned long CVPixelBufferGetPlaneCount(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetTypeID'
unsigned long CVPixelBufferGetTypeID(void);

// function 'CVPixelBufferGetWidth'
unsigned long CVPixelBufferGetWidth(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferGetWidthOfPlane'
unsigned long CVPixelBufferGetWidthOfPlane(struct __CVBuffer *pixelBuffer, unsigned long planeIndex);

// function 'CVPixelBufferIsPlanar'
Boolean CVPixelBufferIsPlanar(struct __CVBuffer *pixelBuffer);

// function 'CVPixelBufferLockBaseAddress'
int CVPixelBufferLockBaseAddress(struct __CVBuffer *pixelBuffer, unsigned long long lockFlags);

// function 'CVPixelBufferPoolCreate'
int CVPixelBufferPoolCreate(struct __CFAllocator *allocator, struct __CFDictionary *poolAttributes, struct __CFDictionary *pixelBufferAttributes, struct __CVPixelBufferPool **poolOut);

// function 'CVPixelBufferPoolCreatePixelBuffer'
int CVPixelBufferPoolCreatePixelBuffer(struct __CFAllocator *allocator, struct __CVPixelBufferPool *pixelBufferPool, struct __CVBuffer **pixelBufferOut);

// function 'CVPixelBufferPoolGetAttributes'
struct __CFDictionary *CVPixelBufferPoolGetAttributes(struct __CVPixelBufferPool *pool);

// function 'CVPixelBufferPoolGetPixelBufferAttributes'
struct __CFDictionary *CVPixelBufferPoolGetPixelBufferAttributes(struct __CVPixelBufferPool *pool);

// function 'CVPixelBufferPoolGetTypeID'
unsigned long CVPixelBufferPoolGetTypeID(void);

// function 'CVPixelBufferPoolRelease'
void CVPixelBufferPoolRelease(struct __CVPixelBufferPool *pixelBufferPool);

// function 'CVPixelBufferPoolRetain'
struct __CVPixelBufferPool *CVPixelBufferPoolRetain(struct __CVPixelBufferPool *pixelBufferPool);

// function 'CVPixelBufferRelease'
void CVPixelBufferRelease(struct __CVBuffer *texture);

// function 'CVPixelBufferRetain'
struct __CVBuffer *CVPixelBufferRetain(struct __CVBuffer *texture);

// function 'CVPixelBufferUnlockBaseAddress'
int CVPixelBufferUnlockBaseAddress(struct __CVBuffer *pixelBuffer, unsigned long long unlockFlags);

// function 'CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes'
struct __CFArray *CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(struct __CFAllocator *allocator);

// function 'CVPixelFormatDescriptionCreateWithPixelFormatType'
struct __CFDictionary *CVPixelFormatDescriptionCreateWithPixelFormatType(struct __CFAllocator *allocator, unsigned long pixelFormat);

// function 'CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType'
void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(struct __CFDictionary *description, unsigned long pixelFormat);


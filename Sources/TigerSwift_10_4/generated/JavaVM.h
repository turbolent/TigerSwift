// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// opaque 'JVMPI_RawMonitor'
typedef struct _JVMPI_RawMonitor *JVMPI_RawMonitor;

// opaque 'jfieldID'
typedef struct _jfieldID *jfieldID;

// opaque 'jframeID'
typedef struct _jframeID *jframeID;

// opaque 'jmethodID'
typedef struct _jmethodID *jmethodID;

// opaque 'jobject'
typedef struct _jobject *jobject;

// opaque 'jobjectID'
typedef struct _jobjectID *jobjectID;

// opaque 'jrawMonitorID'
typedef struct _jrawMonitorID *jrawMonitorID;

// class 'NSJavaConfiguration'
typedef struct objc_object NSJavaConfiguration;

// class 'NSJavaVirtualMachine'
typedef struct objc_object NSJavaVirtualMachine;

// class 'NSObject'
typedef struct objc_object NSObject;

// struct '_jvmtiParamInfo'
struct _jvmtiParamInfo {
    char *name;
    int kind;
    int base_type;
    unsigned char null_ok;
};

typedef struct _jvmtiParamInfo jvmtiParamInfo;

// struct '_jvmtiFrameInfo'
struct _jvmtiFrameInfo {
    struct _jmethodID *method;
    long long location;
};

typedef struct _jvmtiFrameInfo jvmtiFrameInfo;

// struct '_JVMDI_exception_handler_entry'
struct _JVMDI_exception_handler_entry {
    long long start_location;
    long long end_location;
    long long handler_location;
    struct _jobject *exception;
};

typedef struct _JVMDI_exception_handler_entry JVMDI_exception_handler_entry;

// struct 'JDK1_1AttachArgs'
struct JDK1_1AttachArgs {
    void *__padding;
};

// struct '_JVMDI_object_reference_info'
struct _JVMDI_object_reference_info {
    int instance_field_count;
    struct JVMDI_instance_field *instance_fields;
    int static_field_count;
    struct JVMDI_static_field *static_fields;
    int array_element_count;
    struct JVMDI_array_element *array_elements;
    int frame_slot_count;
    struct JVMDI_frame_slot *frame_slots;
};

typedef struct _JVMDI_object_reference_info JVMDI_object_reference_info;

// struct '_JVMPI_Method'
struct _JVMPI_Method {
    char *method_name;
    char *method_signature;
    int start_lineno;
    int end_lineno;
    struct _jmethodID *method_id;
};

typedef struct _JVMPI_Method JVMPI_Method;

// struct '_jmmExtAttributeInfo'
struct _jmmExtAttributeInfo {
    char *name;
    char type;
    char *description;
};

typedef struct _jmmExtAttributeInfo jmmExtAttributeInfo;

// struct '_jvmtiThreadInfo'
struct _jvmtiThreadInfo {
    char *name;
    int priority;
    unsigned char is_daemon;
    struct _jobject *thread_group;
    struct _jobject *context_class_loader;
};

typedef struct _jvmtiThreadInfo jvmtiThreadInfo;

// struct '_JVMPI_CallFrame'
struct _JVMPI_CallFrame {
    int lineno;
    struct _jmethodID *method_id;
};

typedef struct _JVMPI_CallFrame JVMPI_CallFrame;

// struct '_JVMDI_exception_event_data'
struct _JVMDI_exception_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
    struct _jmethodID *method;
    long long location;
    struct _jobject *exception;
    struct _jobject *catch_clazz;
    struct _jmethodID *catch_method;
    long long catch_location;
};

typedef struct _JVMDI_exception_event_data JVMDI_exception_event_data;

// struct '_JVMDI_owned_monitor_info'
struct _JVMDI_owned_monitor_info {
    int owned_monitor_count;
    struct _jobject **owned_monitors;
};

typedef struct _JVMDI_owned_monitor_info JVMDI_owned_monitor_info;

// struct 'jawt_Rectangle'
struct jawt_Rectangle {
    int x;
    int y;
    int width;
    int height;
};

// struct '_jvmtiLineNumberEntry'
struct _jvmtiLineNumberEntry {
    long long start_location;
    int line_number;
};

typedef struct _jvmtiLineNumberEntry jvmtiLineNumberEntry;

// struct '_JVMDI_line_number_entry'
struct _JVMDI_line_number_entry {
    long long start_location;
    int line_number;
};

typedef struct _JVMDI_line_number_entry JVMDI_line_number_entry;

// struct 'JavaVMOption'
struct JavaVMOption {
    char *optionString;
    void *extraInfo;
};

// struct 'JavaVMInitArgs'
struct JavaVMInitArgs {
    int version;
    int nOptions;
    struct JavaVMOption *options;
    unsigned char ignoreUnrecognized;
};

// struct '_JVMDI_operand_stack_element'
struct _JVMDI_operand_stack_element {
    int word;
    int type;
};

typedef struct _JVMDI_operand_stack_element JVMDI_operand_stack_element;

// struct '_jvmtiAddrLocationMap'
struct _jvmtiAddrLocationMap {
    void *start_address;
    long long location;
};

typedef struct _jvmtiAddrLocationMap jvmtiAddrLocationMap;

// struct 'JavaVM_'
struct JavaVM_ {
    struct JNIInvokeInterface_ *functions;
};

// struct '_JVMDI_single_step_event_data'
struct _JVMDI_single_step_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
    struct _jmethodID *method;
    long long location;
};

typedef struct _JVMDI_single_step_event_data JVMDI_single_step_event_data;

// struct '_jvmtiLocalVariableEntry'
struct _jvmtiLocalVariableEntry {
    long long start_location;
    int length;
    char *name;
    char *signature;
    char *generic_signature;
    int slot;
};

typedef struct _jvmtiLocalVariableEntry jvmtiLocalVariableEntry;

// struct '_jvmtiStackInfo'
struct _jvmtiStackInfo {
    struct _jobject *thread;
    int state;
    struct _jvmtiFrameInfo *frame_buffer;
    int frame_count;
};

typedef struct _jvmtiStackInfo jvmtiStackInfo;

// struct '_JNINativeMethod'
struct _JNINativeMethod {
    char *name;
    char *signature;
    void *fnPtr;
};

typedef struct _JNINativeMethod JNINativeMethod;

// struct '_jvmtiExtensionEventInfo'
struct _jvmtiExtensionEventInfo {
    int extension_event_index;
    char *id;
    char *short_description;
    int param_count;
    struct _jvmtiParamInfo *params;
};

typedef struct _jvmtiExtensionEventInfo jvmtiExtensionEventInfo;

// struct '_JVMDI_thread_change_event_data'
struct _JVMDI_thread_change_event_data {
    struct _jobject *thread;
};

typedef struct _JVMDI_thread_change_event_data JVMDI_thread_change_event_data;

// struct '_jvmtiClassDefinition'
struct _jvmtiClassDefinition {
    struct _jobject *klass;
    int class_byte_count;
    char *class_bytes;
};

typedef struct _jvmtiClassDefinition jvmtiClassDefinition;

// struct 'JavaVMAttachArgs'
struct JavaVMAttachArgs {
    int version;
    char *name;
    struct _jobject *group;
};

// struct '_jdwpReplyPacket'
struct _jdwpReplyPacket {
    int len;
    int id;
    char flags;
    short errorCode;
    char *data;
};

typedef struct _jdwpReplyPacket jdwpReplyPacket;

// struct '_jdwpCmdPacket'
struct _jdwpCmdPacket {
    int len;
    int id;
    char flags;
    char cmdSet;
    char cmd;
    char *data;
};

typedef struct _jdwpCmdPacket jdwpCmdPacket;

// struct '_JVMPI_HeapDumpArg'
struct _JVMPI_HeapDumpArg {
    int heap_dump_level;
};

typedef struct _JVMPI_HeapDumpArg JVMPI_HeapDumpArg;

// struct '_JVMDI_exception_catch_event_data'
struct _JVMDI_exception_catch_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
    struct _jmethodID *method;
    long long location;
    struct _jobject *exception;
};

typedef struct _JVMDI_exception_catch_event_data JVMDI_exception_catch_event_data;

// struct '_JVMDI_thread_info'
struct _JVMDI_thread_info {
    char *name;
    int priority;
    unsigned char is_daemon;
    struct _jobject *thread_group;
    struct _jobject *context_class_loader;
};

typedef struct _JVMDI_thread_info JVMDI_thread_info;

// struct 'jawt_DrawingSurfaceInfo'
struct jawt_DrawingSurfaceInfo {
    void *platformInfo;
    struct jawt_DrawingSurface *ds;
    struct jawt_Rectangle bounds;
    int clipSize;
    struct jawt_Rectangle *clip;
};

// struct '_jvmtiMonitorUsage'
struct _jvmtiMonitorUsage {
    struct _jobject *owner;
    int entry_count;
    int waiter_count;
    struct _jobject **waiters;
    int notify_waiter_count;
    struct _jobject **notify_waiters;
};

typedef struct _jvmtiMonitorUsage jvmtiMonitorUsage;

// struct '_jvmtiTimerInfo'
struct _jvmtiTimerInfo {
    long long max_value;
    unsigned char may_skip_forward;
    unsigned char may_skip_backward;
    int kind;
    long long reserved1;
    long long reserved2;
};

typedef struct _jvmtiTimerInfo jvmtiTimerInfo;

// struct '_JVMDI_thread_group_info'
struct _JVMDI_thread_group_info {
    struct _jobject *parent;
    char *name;
    int max_priority;
    unsigned char is_daemon;
};

typedef struct _JVMDI_thread_group_info JVMDI_thread_group_info;

// struct '_JVMDI_frame_event_data'
struct _JVMDI_frame_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
    struct _jmethodID *method;
    struct _jframeID *frame;
};

typedef struct _JVMDI_frame_event_data JVMDI_frame_event_data;

// struct '_JVMDI_field_access_event_data'
struct _JVMDI_field_access_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
    struct _jmethodID *method;
    long long location;
    struct _jobject *field_clazz;
    struct _jobject *object;
    struct _jfieldID *field;
};

typedef struct _JVMDI_field_access_event_data JVMDI_field_access_event_data;

// struct '_JVMPI_Field'
struct _JVMPI_Field {
    char *field_name;
    char *field_signature;
};

typedef struct _JVMPI_Field JVMPI_Field;

// struct '_JVMDI_monitor_info'
struct _JVMDI_monitor_info {
    struct _jobject *owner;
    int entry_count;
    int waiter_count;
    struct _jobject **waiters;
};

typedef struct _JVMDI_monitor_info JVMDI_monitor_info;

// struct '_JVMPI_Lineno'
struct _JVMPI_Lineno {
    int offset;
    int lineno;
};

typedef struct _JVMPI_Lineno JVMPI_Lineno;

// struct '_JVMDI_class_definition'
struct _JVMDI_class_definition {
    struct _jobject *clazz;
    int class_byte_count;
    char *class_bytes;
};

typedef struct _JVMDI_class_definition JVMDI_class_definition;

// struct 'JAWT_MacOSXDrawingSurfaceInfo'
struct JAWT_MacOSXDrawingSurfaceInfo {
    id cocoaViewRef;
};

// struct '_JVMDI_breakpoint_event_data'
struct _JVMDI_breakpoint_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
    struct _jmethodID *method;
    long long location;
};

typedef struct _JVMDI_breakpoint_event_data JVMDI_breakpoint_event_data;

// struct '_jvmtiThreadGroupInfo'
struct _jvmtiThreadGroupInfo {
    struct _jobject *parent;
    char *name;
    int max_priority;
    unsigned char is_daemon;
};

typedef struct _jvmtiThreadGroupInfo jvmtiThreadGroupInfo;

// struct '_JVMDI_local_variable_entry'
struct _JVMDI_local_variable_entry {
    long long start_location;
    int length;
    char *name;
    char *signature;
    int slot;
};

typedef struct _JVMDI_local_variable_entry JVMDI_local_variable_entry;

// struct '_JVMDI_user_event_data'
struct _JVMDI_user_event_data {
    struct _jobject *object;
    int key;
};

typedef struct _JVMDI_user_event_data JVMDI_user_event_data;

// struct 'JNIEnv_'
struct JNIEnv_ {
    struct JNINativeInterface_ *functions;
};

// struct '_JVMDI_class_event_data'
struct _JVMDI_class_event_data {
    struct _jobject *thread;
    struct _jobject *clazz;
};

typedef struct _JVMDI_class_event_data JVMDI_class_event_data;

// getter for constant 'NSDefaultJavaClassPathKey'
id _get_NSDefaultJavaClassPathKey(void);

// setter for constant 'NSDefaultJavaClassPathKey'
void _set_NSDefaultJavaClassPathKey(id value);

// getter for constant 'NSDefaultJavaCompilerKey'
id _get_NSDefaultJavaCompilerKey(void);

// setter for constant 'NSDefaultJavaCompilerKey'
void _set_NSDefaultJavaCompilerKey(id value);

// getter for constant 'NSDefaultJavaDebugLibraryKey'
id _get_NSDefaultJavaDebugLibraryKey(void);

// setter for constant 'NSDefaultJavaDebugLibraryKey'
void _set_NSDefaultJavaDebugLibraryKey(id value);

// getter for constant 'NSDefaultJavaLibraryKey'
id _get_NSDefaultJavaLibraryKey(void);

// setter for constant 'NSDefaultJavaLibraryKey'
void _set_NSDefaultJavaLibraryKey(id value);

// getter for constant 'NSDefaultJavaVMKey'
id _get_NSDefaultJavaVMKey(void);

// setter for constant 'NSDefaultJavaVMKey'
void _set_NSDefaultJavaVMKey(id value);

// getter for constant 'NSDefaultJavaVendorKey'
id _get_NSDefaultJavaVendorKey(void);

// setter for constant 'NSDefaultJavaVendorKey'
void _set_NSDefaultJavaVendorKey(id value);

// getter for constant 'NSDefaultObjCJavaDebugLibraryKey'
id _get_NSDefaultObjCJavaDebugLibraryKey(void);

// setter for constant 'NSDefaultObjCJavaDebugLibraryKey'
void _set_NSDefaultObjCJavaDebugLibraryKey(id value);

// getter for constant 'NSDefaultObjCJavaLibraryKey'
id _get_NSDefaultObjCJavaLibraryKey(void);

// setter for constant 'NSDefaultObjCJavaLibraryKey'
void _set_NSDefaultObjCJavaLibraryKey(id value);

// getter for constant 'NSInvalidJavaClassException'
id _get_NSInvalidJavaClassException(void);

// setter for constant 'NSInvalidJavaClassException'
void _set_NSInvalidJavaClassException(id value);

// getter for constant 'NSJavaVMArgumentsKey'
id _get_NSJavaVMArgumentsKey(void);

// setter for constant 'NSJavaVMArgumentsKey'
void _set_NSJavaVMArgumentsKey(id value);

// getter for constant 'j_vm'
struct JNIInvokeInterface_ **_get_j_vm(void);

// setter for constant 'j_vm'
void _set_j_vm(struct JNIInvokeInterface_ **value);

enum { JAWT_LOCK_BOUNDS_CHANGED = 4 };

enum { JAWT_LOCK_CLIP_CHANGED = 2 };

enum { JAWT_LOCK_ERROR = 1 };

enum { JAWT_LOCK_SURFACE_CHANGED = 8 };

enum { JAWT_VERSION_1_3 = 65539 };

enum { JAWT_VERSION_1_4 = 65540 };

enum { JDWPTRANSPORT_ERROR_ILLEGAL_ARGUMENT = 103 };

enum { JDWPTRANSPORT_ERROR_ILLEGAL_STATE = 201 };

enum { JDWPTRANSPORT_ERROR_INTERNAL = 113 };

enum { JDWPTRANSPORT_ERROR_IO_ERROR = 202 };

enum { JDWPTRANSPORT_ERROR_MSG_NOT_AVAILABLE = 204 };

enum { JDWPTRANSPORT_ERROR_NONE = 0 };

enum { JDWPTRANSPORT_ERROR_OUT_OF_MEMORY = 110 };

enum { JDWPTRANSPORT_ERROR_TIMEOUT = 203 };

enum { JDWPTRANSPORT_FLAGS_NONE = 0 };

enum { JDWPTRANSPORT_FLAGS_REPLY = 128 };

enum { JDWPTRANSPORT_VERSION_1_0 = 65536 };

enum { JDWP_ArrayReference = 13 };

enum { JDWP_ArrayReference_GetValues = 2 };

enum { JDWP_ArrayReference_Length = 1 };

enum { JDWP_ArrayReference_SetValues = 3 };

enum { JDWP_ArrayType = 4 };

enum { JDWP_ArrayType_NewInstance = 1 };

enum { JDWP_ClassLoaderReference = 14 };

enum { JDWP_ClassLoaderReference_VisibleClasses = 1 };

enum { JDWP_ClassObjectReference = 17 };

enum { JDWP_ClassObjectReference_ReflectedType = 1 };

enum { JDWP_ClassStatus_ERROR = 8 };

enum { JDWP_ClassStatus_INITIALIZED = 4 };

enum { JDWP_ClassStatus_PREPARED = 2 };

enum { JDWP_ClassStatus_VERIFIED = 1 };

enum { JDWP_ClassType = 3 };

enum { JDWP_ClassType_InvokeMethod = 3 };

enum { JDWP_ClassType_NewInstance = 4 };

enum { JDWP_ClassType_SetValues = 2 };

enum { JDWP_ClassType_Superclass = 1 };

enum { JDWP_Error_ABSENT_INFORMATION = 101 };

enum { JDWP_Error_ACCESS_DENIED = 111 };

enum { JDWP_Error_ADD_METHOD_NOT_IMPLEMENTED = 63 };

enum { JDWP_Error_ALREADY_INVOKING = 502 };

enum { JDWP_Error_CIRCULAR_CLASS_DEFINITION = 61 };

enum { JDWP_Error_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED = 70 };

enum { JDWP_Error_CLASS_NOT_PREPARED = 22 };

enum { JDWP_Error_DELETE_METHOD_NOT_IMPLEMENTED = 67 };

enum { JDWP_Error_DUPLICATE = 40 };

enum { JDWP_Error_FAILS_VERIFICATION = 62 };

enum { JDWP_Error_HIERARCHY_CHANGE_NOT_IMPLEMENTED = 66 };

enum { JDWP_Error_ILLEGAL_ARGUMENT = 103 };

enum { JDWP_Error_INTERNAL = 113 };

enum { JDWP_Error_INTERRUPT = 52 };

enum { JDWP_Error_INVALID_ARRAY = 508 };

enum { JDWP_Error_INVALID_CLASS = 21 };

enum { JDWP_Error_INVALID_CLASS_FORMAT = 60 };

enum { JDWP_Error_INVALID_CLASS_LOADER = 507 };

enum { JDWP_Error_INVALID_COUNT = 512 };

enum { JDWP_Error_INVALID_EVENT_TYPE = 102 };

enum { JDWP_Error_INVALID_FIELDID = 25 };

enum { JDWP_Error_INVALID_FRAMEID = 30 };

enum { JDWP_Error_INVALID_INDEX = 503 };

enum { JDWP_Error_INVALID_LENGTH = 504 };

enum { JDWP_Error_INVALID_LOCATION = 24 };

enum { JDWP_Error_INVALID_METHODID = 23 };

enum { JDWP_Error_INVALID_MONITOR = 50 };

enum { JDWP_Error_INVALID_OBJECT = 20 };

enum { JDWP_Error_INVALID_PRIORITY = 12 };

enum { JDWP_Error_INVALID_SLOT = 35 };

enum { JDWP_Error_INVALID_STRING = 506 };

enum { JDWP_Error_INVALID_TAG = 500 };

enum { JDWP_Error_INVALID_THREAD = 10 };

enum { JDWP_Error_INVALID_THREAD_GROUP = 11 };

enum { JDWP_Error_INVALID_TYPESTATE = 65 };

enum { JDWP_Error_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED = 71 };

enum { JDWP_Error_NAMES_DONT_MATCH = 69 };

enum { JDWP_Error_NATIVE_METHOD = 511 };

enum { JDWP_Error_NONE = 0 };

enum { JDWP_Error_NOT_CURRENT_FRAME = 33 };

enum { JDWP_Error_NOT_FOUND = 41 };

enum { JDWP_Error_NOT_IMPLEMENTED = 99 };

enum { JDWP_Error_NOT_MONITOR_OWNER = 51 };

enum { JDWP_Error_NO_MORE_FRAMES = 31 };

enum { JDWP_Error_NULL_POINTER = 100 };

enum { JDWP_Error_OPAQUE_FRAME = 32 };

enum { JDWP_Error_OUT_OF_MEMORY = 110 };

enum { JDWP_Error_SCHEMA_CHANGE_NOT_IMPLEMENTED = 64 };

enum { JDWP_Error_THREAD_NOT_SUSPENDED = 13 };

enum { JDWP_Error_THREAD_SUSPENDED = 14 };

enum { JDWP_Error_TRANSPORT_INIT = 510 };

enum { JDWP_Error_TRANSPORT_LOAD = 509 };

enum { JDWP_Error_TYPE_MISMATCH = 34 };

enum { JDWP_Error_UNATTACHED_THREAD = 115 };

enum { JDWP_Error_UNSUPPORTED_VERSION = 68 };

enum { JDWP_Error_VM_DEAD = 112 };

enum { JDWP_Event = 64 };

enum { JDWP_EventKind_BREAKPOINT = 2 };

enum { JDWP_EventKind_CLASS_LOAD = 10 };

enum { JDWP_EventKind_CLASS_PREPARE = 8 };

enum { JDWP_EventKind_CLASS_UNLOAD = 9 };

enum { JDWP_EventKind_EXCEPTION = 4 };

enum { JDWP_EventKind_EXCEPTION_CATCH = 30 };

enum { JDWP_EventKind_FIELD_ACCESS = 20 };

enum { JDWP_EventKind_FIELD_MODIFICATION = 21 };

enum { JDWP_EventKind_FRAME_POP = 3 };

enum { JDWP_EventKind_METHOD_ENTRY = 40 };

enum { JDWP_EventKind_METHOD_EXIT = 41 };

enum { JDWP_EventKind_SINGLE_STEP = 1 };

enum { JDWP_EventKind_THREAD_END = 7 };

enum { JDWP_EventKind_THREAD_START = 6 };

enum { JDWP_EventKind_USER_DEFINED = 5 };

enum { JDWP_EventKind_VM_DEATH = 99 };

enum { JDWP_EventKind_VM_DISCONNECTED = 100 };

enum { JDWP_EventKind_VM_INIT = 90 };

enum { JDWP_EventRequest = 15 };

enum { JDWP_EventRequest_Clear = 2 };

enum { JDWP_EventRequest_ClearAllBreakpoints = 3 };

enum { JDWP_EventRequest_Set = 1 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_ClassExclude = 6 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_ClassMatch = 5 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_ClassOnly = 4 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_Conditional = 2 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_Count = 1 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_ExceptionOnly = 8 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_FieldOnly = 9 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_InstanceOnly = 11 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_LocationOnly = 7 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_Step = 10 };

enum { JDWP_EventRequest_Set_Out_modifiers_Modifier_ThreadOnly = 3 };

enum { JDWP_Event_Composite = 100 };

enum { JDWP_Field = 8 };

enum { JDWP_HIGHEST_COMMAND_SET = 17 };

enum { JDWP_InterfaceType = 5 };

enum { JDWP_InvokeOptions_INVOKE_NONVIRTUAL = 2 };

enum { JDWP_InvokeOptions_INVOKE_SINGLE_THREADED = 1 };

enum { JDWP_Method = 6 };

enum { JDWP_Method_Bytecodes = 3 };

enum { JDWP_Method_IsObsolete = 4 };

enum { JDWP_Method_LineTable = 1 };

enum { JDWP_Method_VariableTable = 2 };

enum { JDWP_Method_VariableTableWithGeneric = 5 };

enum { JDWP_ObjectReference = 9 };

enum { JDWP_ObjectReference_DisableCollection = 7 };

enum { JDWP_ObjectReference_EnableCollection = 8 };

enum { JDWP_ObjectReference_GetValues = 2 };

enum { JDWP_ObjectReference_InvokeMethod = 6 };

enum { JDWP_ObjectReference_IsCollected = 9 };

enum { JDWP_ObjectReference_MonitorInfo = 5 };

enum { JDWP_ObjectReference_ReferenceType = 1 };

enum { JDWP_ObjectReference_SetValues = 3 };

enum { JDWP_REQUEST_NONE = -1 };

enum { JDWP_ReferenceType = 2 };

enum { JDWP_ReferenceType_ClassLoader = 2 };

enum { JDWP_ReferenceType_ClassObject = 11 };

enum { JDWP_ReferenceType_Fields = 4 };

enum { JDWP_ReferenceType_FieldsWithGeneric = 14 };

enum { JDWP_ReferenceType_GetValues = 6 };

enum { JDWP_ReferenceType_Interfaces = 10 };

enum { JDWP_ReferenceType_Methods = 5 };

enum { JDWP_ReferenceType_MethodsWithGeneric = 15 };

enum { JDWP_ReferenceType_Modifiers = 3 };

enum { JDWP_ReferenceType_NestedTypes = 8 };

enum { JDWP_ReferenceType_Signature = 1 };

enum { JDWP_ReferenceType_SignatureWithGeneric = 13 };

enum { JDWP_ReferenceType_SourceDebugExtension = 12 };

enum { JDWP_ReferenceType_SourceFile = 7 };

enum { JDWP_ReferenceType_Status = 9 };

enum { JDWP_StackFrame = 16 };

enum { JDWP_StackFrame_GetValues = 1 };

enum { JDWP_StackFrame_PopFrames = 4 };

enum { JDWP_StackFrame_SetValues = 2 };

enum { JDWP_StackFrame_ThisObject = 3 };

enum { JDWP_StepDepth_INTO = 0 };

enum { JDWP_StepDepth_OUT = 2 };

enum { JDWP_StepDepth_OVER = 1 };

enum { JDWP_StepSize_LINE = 1 };

enum { JDWP_StepSize_MIN = 0 };

enum { JDWP_StringReference = 10 };

enum { JDWP_StringReference_Value = 1 };

enum { JDWP_SuspendPolicy_ALL = 2 };

enum { JDWP_SuspendPolicy_EVENT_THREAD = 1 };

enum { JDWP_SuspendPolicy_NONE = 0 };

enum { JDWP_SuspendStatus_SUSPEND_STATUS_SUSPENDED = 1 };

enum { JDWP_Tag_ARRAY = 91 };

enum { JDWP_Tag_BOOLEAN = 90 };

enum { JDWP_Tag_BYTE = 66 };

enum { JDWP_Tag_CHAR = 67 };

enum { JDWP_Tag_CLASS_LOADER = 108 };

enum { JDWP_Tag_CLASS_OBJECT = 99 };

enum { JDWP_Tag_DOUBLE = 68 };

enum { JDWP_Tag_FLOAT = 70 };

enum { JDWP_Tag_INT = 73 };

enum { JDWP_Tag_LONG = 74 };

enum { JDWP_Tag_OBJECT = 76 };

enum { JDWP_Tag_SHORT = 83 };

enum { JDWP_Tag_STRING = 115 };

enum { JDWP_Tag_THREAD = 116 };

enum { JDWP_Tag_THREAD_GROUP = 103 };

enum { JDWP_Tag_VOID = 86 };

enum { JDWP_ThreadGroupReference = 12 };

enum { JDWP_ThreadGroupReference_Children = 3 };

enum { JDWP_ThreadGroupReference_Name = 1 };

enum { JDWP_ThreadGroupReference_Parent = 2 };

enum { JDWP_ThreadReference = 11 };

enum { JDWP_ThreadReference_CurrentContendedMonitor = 9 };

enum { JDWP_ThreadReference_FrameCount = 7 };

enum { JDWP_ThreadReference_Frames = 6 };

enum { JDWP_ThreadReference_Interrupt = 11 };

enum { JDWP_ThreadReference_Name = 1 };

enum { JDWP_ThreadReference_OwnedMonitors = 8 };

enum { JDWP_ThreadReference_Resume = 3 };

enum { JDWP_ThreadReference_Status = 4 };

enum { JDWP_ThreadReference_Stop = 10 };

enum { JDWP_ThreadReference_Suspend = 2 };

enum { JDWP_ThreadReference_SuspendCount = 12 };

enum { JDWP_ThreadReference_ThreadGroup = 5 };

enum { JDWP_ThreadStatus_MONITOR = 3 };

enum { JDWP_ThreadStatus_RUNNING = 1 };

enum { JDWP_ThreadStatus_SLEEPING = 2 };

enum { JDWP_ThreadStatus_WAIT = 4 };

enum { JDWP_ThreadStatus_ZOMBIE = 0 };

enum { JDWP_TypeTag_ARRAY = 3 };

enum { JDWP_TypeTag_CLASS = 1 };

enum { JDWP_TypeTag_INTERFACE = 2 };

enum { JDWP_VirtualMachine = 1 };

enum { JDWP_VirtualMachine_AllClasses = 3 };

enum { JDWP_VirtualMachine_AllClassesWithGeneric = 20 };

enum { JDWP_VirtualMachine_AllThreads = 4 };

enum { JDWP_VirtualMachine_Capabilities = 12 };

enum { JDWP_VirtualMachine_CapabilitiesNew = 17 };

enum { JDWP_VirtualMachine_ClassPaths = 13 };

enum { JDWP_VirtualMachine_ClassesBySignature = 2 };

enum { JDWP_VirtualMachine_CreateString = 11 };

enum { JDWP_VirtualMachine_Dispose = 6 };

enum { JDWP_VirtualMachine_DisposeObjects = 14 };

enum { JDWP_VirtualMachine_Exit = 10 };

enum { JDWP_VirtualMachine_HoldEvents = 15 };

enum { JDWP_VirtualMachine_IDSizes = 7 };

enum { JDWP_VirtualMachine_RedefineClasses = 18 };

enum { JDWP_VirtualMachine_ReleaseEvents = 16 };

enum { JDWP_VirtualMachine_Resume = 9 };

enum { JDWP_VirtualMachine_SetDefaultStratum = 19 };

enum { JDWP_VirtualMachine_Suspend = 8 };

enum { JDWP_VirtualMachine_TopLevelThreadGroups = 5 };

enum { JDWP_VirtualMachine_Version = 1 };

enum { JMM_CLASS_INIT_TOTAL_COUNT = 110 };

enum { JMM_CLASS_INIT_TOTAL_TIME_MS = 111 };

enum { JMM_CLASS_LOADED_BYTES = 101 };

enum { JMM_CLASS_LOADED_COUNT = 1 };

enum { JMM_CLASS_UNLOADED_BYTES = 102 };

enum { JMM_CLASS_UNLOADED_COUNT = 2 };

enum { JMM_CLASS_VERIFY_TOTAL_TIME_MS = 113 };

enum { JMM_COLLECTION_USAGE_THRESHOLD_HIGH = 903 };

enum { JMM_COLLECTION_USAGE_THRESHOLD_LOW = 904 };

enum { JMM_COMPILE_TOTAL_TIME_MS = 8 };

enum { JMM_GC_COUNT = 10 };

enum { JMM_GC_EXT_ATTRIBUTE_INFO_SIZE = 401 };

enum { JMM_GC_TIME_MS = 9 };

enum { JMM_INTERNAL_ATTRIBUTE_INDEX = 100 };

enum { JMM_JVM_INIT_DONE_TIME_MS = 7 };

enum { JMM_METHOD_DATA_SIZE_BYTES = 112 };

enum { JMM_OS_ATTRIBUTE_INDEX = 200 };

enum { JMM_OS_MEM_TOTAL_PHYSICAL_BYTES = 202 };

enum { JMM_OS_PROCESS_ID = 201 };

enum { JMM_SAFEPOINT_COUNT = 105 };

enum { JMM_SHARED_CLASS_LOADED_BYTES = 116 };

enum { JMM_SHARED_CLASS_LOADED_COUNT = 114 };

enum { JMM_SHARED_CLASS_UNLOADED_BYTES = 117 };

enum { JMM_SHARED_CLASS_UNLOADED_COUNT = 115 };

enum { JMM_STAT_GC_STAT = 806 };

enum { JMM_STAT_PEAK_POOL_USAGE = 805 };

enum { JMM_STAT_PEAK_THREAD_COUNT = 801 };

enum { JMM_STAT_THREAD_CONTENTION_COUNT = 802 };

enum { JMM_STAT_THREAD_CONTENTION_STAT = 804 };

enum { JMM_STAT_THREAD_CONTENTION_TIME = 803 };

enum { JMM_THREAD_CONTENTION_MONITORING = 23 };

enum { JMM_THREAD_CPU_TIME = 24 };

enum { JMM_THREAD_DAEMON_COUNT = 6 };

enum { JMM_THREAD_LIVE_COUNT = 4 };

enum { JMM_THREAD_PEAK_COUNT = 5 };

enum { JMM_THREAD_STATE_FLAG_NATIVE = 4096 };

enum { JMM_THREAD_STATE_FLAG_SUSPENDED = 256 };

enum { JMM_THREAD_STATE_MONITOR = 3 };

enum { JMM_THREAD_STATE_NEW = 9 };

enum { JMM_THREAD_STATE_RUNNING = 1 };

enum { JMM_THREAD_STATE_RUNNING_NATIVE = 8 };

enum { JMM_THREAD_STATE_SLEEP = 2 };

enum { JMM_THREAD_STATE_SUSPENDED = 6 };

enum { JMM_THREAD_STATE_TERMINATED = 7 };

enum { JMM_THREAD_STATE_TIMED_WAIT = 5 };

enum { JMM_THREAD_STATE_UNKNOWN = -1 };

enum { JMM_THREAD_STATE_WAIT = 4 };

enum { JMM_THREAD_STATE_ZOMBIE = 0 };

enum { JMM_THREAD_TOTAL_COUNT = 3 };

enum { JMM_TOTAL_APP_TIME_MS = 108 };

enum { JMM_TOTAL_CLASSLOAD_TIME_MS = 103 };

enum { JMM_TOTAL_SAFEPOINTSYNC_TIME_MS = 106 };

enum { JMM_TOTAL_STOPPED_TIME_MS = 107 };

enum { JMM_USAGE_THRESHOLD_HIGH = 901 };

enum { JMM_USAGE_THRESHOLD_LOW = 902 };

enum { JMM_VERBOSE_CLASS = 22 };

enum { JMM_VERBOSE_GC = 21 };

enum { JMM_VERSION_1 = 536936448 };

enum { JMM_VERSION_1_0 = 536936448 };

enum { JMM_VMGLOBAL_SOURCE_DEFAULT = 1 };

enum { JMM_VMGLOBAL_SOURCE_WASSET = 2 };

enum { JMM_VMGLOBAL_TYPE_JBOOLEAN = 1 };

enum { JMM_VMGLOBAL_TYPE_JLONG = 3 };

enum { JMM_VMGLOBAL_TYPE_JSTRING = 2 };

enum { JMM_VMGLOBAL_TYPE_UNKNOWN = 0 };

enum { JMM_VM_GLOBAL_COUNT = 104 };

enum { JMM_VM_THREAD_COUNT = 109 };

enum { JNI_ABORT = 2 };

enum { JNI_COMMIT = 1 };

enum { JNI_EDETACHED = -2 };

enum { JNI_EEXIST = -5 };

enum { JNI_EINVAL = -6 };

enum { JNI_ENOMEM = -4 };

enum { JNI_ERR = -1 };

enum { JNI_EVERSION = -3 };

enum { JNI_FALSE = 0 };

enum { JNI_OK = 0 };

enum { JNI_TRUE = 1 };

enum { JNI_VERSION_1_1 = 65537 };

enum { JNI_VERSION_1_2 = 65538 };

enum { JNI_VERSION_1_4 = 65540 };

enum { JVMDI_CLASS_STATUS_ERROR = 8 };

enum { JVMDI_CLASS_STATUS_INITIALIZED = 4 };

enum { JVMDI_CLASS_STATUS_PREPARED = 2 };

enum { JVMDI_CLASS_STATUS_VERIFIED = 1 };

enum { JVMDI_DISABLE = 0 };

enum { JVMDI_ENABLE = 1 };

enum { JVMDI_ERROR_ABSENT_INFORMATION = 101 };

enum { JVMDI_ERROR_ACCESS_DENIED = 111 };

enum { JVMDI_ERROR_ADD_METHOD_NOT_IMPLEMENTED = 63 };

enum { JVMDI_ERROR_CIRCULAR_CLASS_DEFINITION = 61 };

enum { JVMDI_ERROR_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED = 70 };

enum { JVMDI_ERROR_CLASS_NOT_PREPARED = 22 };

enum { JVMDI_ERROR_DELETE_METHOD_NOT_IMPLEMENTED = 67 };

enum { JVMDI_ERROR_DUPLICATE = 40 };

enum { JVMDI_ERROR_DUPLICATE_BREAKPOINT = 40 };

enum { JVMDI_ERROR_DUPLICATE_FRAME_POP = 40 };

enum { JVMDI_ERROR_FAILS_VERIFICATION = 62 };

enum { JVMDI_ERROR_HIERARCHY_CHANGE_NOT_IMPLEMENTED = 66 };

enum { JVMDI_ERROR_ILLEGAL_ARGUMENT = 103 };

enum { JVMDI_ERROR_INTERNAL = 113 };

enum { JVMDI_ERROR_INTERRUPT = 52 };

enum { JVMDI_ERROR_INVALID_CLASS = 21 };

enum { JVMDI_ERROR_INVALID_CLASS_FORMAT = 60 };

enum { JVMDI_ERROR_INVALID_EVENT_TYPE = 102 };

enum { JVMDI_ERROR_INVALID_FIELDID = 25 };

enum { JVMDI_ERROR_INVALID_FRAMEID = 30 };

enum { JVMDI_ERROR_INVALID_LOCATION = 24 };

enum { JVMDI_ERROR_INVALID_METHODID = 23 };

enum { JVMDI_ERROR_INVALID_MONITOR = 50 };

enum { JVMDI_ERROR_INVALID_OBJECT = 20 };

enum { JVMDI_ERROR_INVALID_PRIORITY = 12 };

enum { JVMDI_ERROR_INVALID_SLOT = 35 };

enum { JVMDI_ERROR_INVALID_THREAD = 10 };

enum { JVMDI_ERROR_INVALID_THREAD_GROUP = 11 };

enum { JVMDI_ERROR_INVALID_TYPESTATE = 65 };

enum { JVMDI_ERROR_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED = 71 };

enum { JVMDI_ERROR_NAMES_DONT_MATCH = 69 };

enum { JVMDI_ERROR_NONE = 0 };

enum { JVMDI_ERROR_NOT_CURRENT_FRAME = 33 };

enum { JVMDI_ERROR_NOT_FOUND = 41 };

enum { JVMDI_ERROR_NOT_IMPLEMENTED = 99 };

enum { JVMDI_ERROR_NOT_MONITOR_OWNER = 51 };

enum { JVMDI_ERROR_NO_MORE_FRAMES = 31 };

enum { JVMDI_ERROR_NO_SUCH_BREAKPOINT = 41 };

enum { JVMDI_ERROR_NULL_POINTER = 100 };

enum { JVMDI_ERROR_OPAQUE_FRAME = 32 };

enum { JVMDI_ERROR_OUT_OF_MEMORY = 110 };

enum { JVMDI_ERROR_SCHEMA_CHANGE_NOT_IMPLEMENTED = 64 };

enum { JVMDI_ERROR_THREAD_NOT_SUSPENDED = 13 };

enum { JVMDI_ERROR_THREAD_SUSPENDED = 14 };

enum { JVMDI_ERROR_TYPE_MISMATCH = 34 };

enum { JVMDI_ERROR_UNATTACHED_THREAD = 115 };

enum { JVMDI_ERROR_UNSUPPORTED_VERSION = 68 };

enum { JVMDI_ERROR_VM_DEAD = 112 };

enum { JVMDI_EVENT_BREAKPOINT = 2 };

enum { JVMDI_EVENT_CLASS_LOAD = 10 };

enum { JVMDI_EVENT_CLASS_PREPARE = 8 };

enum { JVMDI_EVENT_CLASS_UNLOAD = 9 };

enum { JVMDI_EVENT_EXCEPTION = 4 };

enum { JVMDI_EVENT_EXCEPTION_CATCH = 30 };

enum { JVMDI_EVENT_FIELD_ACCESS = 20 };

enum { JVMDI_EVENT_FIELD_MODIFICATION = 21 };

enum { JVMDI_EVENT_FRAME_POP = 3 };

enum { JVMDI_EVENT_METHOD_ENTRY = 40 };

enum { JVMDI_EVENT_METHOD_EXIT = 41 };

enum { JVMDI_EVENT_SINGLE_STEP = 1 };

enum { JVMDI_EVENT_THREAD_END = 7 };

enum { JVMDI_EVENT_THREAD_START = 6 };

enum { JVMDI_EVENT_USER_DEFINED = 5 };

enum { JVMDI_EVENT_VM_DEATH = 99 };

enum { JVMDI_EVENT_VM_INIT = 90 };

enum { JVMDI_MAX_EVENT_TYPE_VAL = 99 };

enum { JVMDI_MONITOR_WAIT_FOREVER = 0 };

enum { JVMDI_OPERAND_TYPE_DOUBLE0 = 6 };

enum { JVMDI_OPERAND_TYPE_DOUBLE1 = 7 };

enum { JVMDI_OPERAND_TYPE_FLOAT = 3 };

enum { JVMDI_OPERAND_TYPE_INT = 2 };

enum { JVMDI_OPERAND_TYPE_LONG0 = 4 };

enum { JVMDI_OPERAND_TYPE_LONG1 = 5 };

enum { JVMDI_OPERAND_TYPE_REFERENCE = 1 };

enum { JVMDI_OPERAND_TYPE_RETURN_ADDRESS = 8 };

enum { JVMDI_SUSPEND_STATUS_BREAK = 2 };

enum { JVMDI_SUSPEND_STATUS_SUSPENDED = 1 };

enum { JVMDI_THREAD_MAX_PRIORITY = 10 };

enum { JVMDI_THREAD_MIN_PRIORITY = 1 };

enum { JVMDI_THREAD_NORM_PRIORITY = 5 };

enum { JVMDI_THREAD_STATUS_MONITOR = 3 };

enum { JVMDI_THREAD_STATUS_RUNNING = 1 };

enum { JVMDI_THREAD_STATUS_SLEEPING = 2 };

enum { JVMDI_THREAD_STATUS_UNKNOWN = -1 };

enum { JVMDI_THREAD_STATUS_WAIT = 4 };

enum { JVMDI_THREAD_STATUS_ZOMBIE = 0 };

enum { JVMDI_VERSION_1 = 536936448 };

enum { JVMDI_VERSION_1_1 = 536936449 };

enum { JVMDI_VERSION_1_2 = 536936450 };

enum { JVMDI_VERSION_1_3 = 536936451 };

enum { JVMPI_BOOLEAN = 4 };

enum { JVMPI_BYTE = 8 };

enum { JVMPI_CHAR = 5 };

enum { JVMPI_CLASS = 2 };

enum { JVMPI_DOUBLE = 7 };

enum { JVMPI_DUMP_LEVEL_0 = 0 };

enum { JVMPI_DUMP_LEVEL_1 = 1 };

enum { JVMPI_DUMP_LEVEL_2 = 2 };

enum { JVMPI_EVENT_ARENA_DELETE = 49 };

enum { JVMPI_EVENT_ARENA_NEW = 48 };

enum { JVMPI_EVENT_CLASS_LOAD = 42 };

enum { JVMPI_EVENT_CLASS_LOAD_HOOK = 35 };

enum { JVMPI_EVENT_CLASS_UNLOAD = 43 };

enum { JVMPI_EVENT_COMPILED_METHOD_LOAD = 7 };

enum { JVMPI_EVENT_COMPILED_METHOD_UNLOAD = 8 };

enum { JVMPI_EVENT_DATA_DUMP_REQUEST = 44 };

enum { JVMPI_EVENT_DATA_RESET_REQUEST = 45 };

enum { JVMPI_EVENT_DELETE_ARENA = 49 };

enum { JVMPI_EVENT_DUMP_DATA_REQUEST = 44 };

enum { JVMPI_EVENT_GC_FINISH = 61 };

enum { JVMPI_EVENT_GC_START = 60 };

enum { JVMPI_EVENT_HEAP_DUMP = 37 };

enum { JVMPI_EVENT_INSTRUCTION_START = 9 };

enum { JVMPI_EVENT_JNI_GLOBALREF_ALLOC = 38 };

enum { JVMPI_EVENT_JNI_GLOBALREF_FREE = 39 };

enum { JVMPI_EVENT_JNI_WEAK_GLOBALREF_ALLOC = 40 };

enum { JVMPI_EVENT_JNI_WEAK_GLOBALREF_FREE = 41 };

enum { JVMPI_EVENT_JVM_INIT_DONE = 46 };

enum { JVMPI_EVENT_JVM_SHUT_DOWN = 47 };

enum { JVMPI_EVENT_LOAD_COMPILED_METHOD = 7 };

enum { JVMPI_EVENT_METHOD_ENTRY = 1 };

enum { JVMPI_EVENT_METHOD_ENTRY2 = 2 };

enum { JVMPI_EVENT_METHOD_EXIT = 3 };

enum { JVMPI_EVENT_MONITOR_CONTENDED_ENTER = 54 };

enum { JVMPI_EVENT_MONITOR_CONTENDED_ENTERED = 55 };

enum { JVMPI_EVENT_MONITOR_CONTENDED_EXIT = 56 };

enum { JVMPI_EVENT_MONITOR_DUMP = 59 };

enum { JVMPI_EVENT_MONITOR_WAIT = 57 };

enum { JVMPI_EVENT_MONITOR_WAITED = 58 };

enum { JVMPI_EVENT_NEW_ARENA = 48 };

enum { JVMPI_EVENT_OBJECT_ALLOC = 4 };

enum { JVMPI_EVENT_OBJECT_DUMP = 50 };

enum { JVMPI_EVENT_OBJECT_FREE = 5 };

enum { JVMPI_EVENT_OBJECT_MOVE = 6 };

enum { JVMPI_EVENT_OBJ_ALLOC = 4 };

enum { JVMPI_EVENT_OBJ_FREE = 5 };

enum { JVMPI_EVENT_OBJ_MOVE = 6 };

enum { JVMPI_EVENT_RAW_MONITOR_CONTENDED_ENTER = 51 };

enum { JVMPI_EVENT_RAW_MONITOR_CONTENDED_ENTERED = 52 };

enum { JVMPI_EVENT_RAW_MONITOR_CONTENDED_EXIT = 53 };

enum { JVMPI_EVENT_RESET_DATA_REQUEST = 45 };

enum { JVMPI_EVENT_THREAD_END = 34 };

enum { JVMPI_EVENT_THREAD_START = 33 };

enum { JVMPI_EVENT_UNLOAD_COMPILED_METHOD = 8 };

enum { JVMPI_FAIL = -1 };

enum { JVMPI_FLOAT = 6 };

enum { JVMPI_GC_CLASS_DUMP = 32 };

enum { JVMPI_GC_INSTANCE_DUMP = 33 };

enum { JVMPI_GC_OBJ_ARRAY_DUMP = 34 };

enum { JVMPI_GC_PRIM_ARRAY_DUMP = 35 };

enum { JVMPI_GC_ROOT_JAVA_FRAME = 3 };

enum { JVMPI_GC_ROOT_JNI_GLOBAL = 1 };

enum { JVMPI_GC_ROOT_JNI_LOCAL = 2 };

enum { JVMPI_GC_ROOT_MONITOR_USED = 7 };

enum { JVMPI_GC_ROOT_NATIVE_STACK = 4 };

enum { JVMPI_GC_ROOT_STICKY_CLASS = 5 };

enum { JVMPI_GC_ROOT_THREAD_BLOCK = 6 };

enum { JVMPI_GC_ROOT_THREAD_OBJ = 8 };

enum { JVMPI_GC_ROOT_UNKNOWN = 255 };

enum { JVMPI_INT = 10 };

enum { JVMPI_LONG = 11 };

enum { JVMPI_MAXIMUM_PRIORITY = 10 };

enum { JVMPI_MAX_EVENT_TYPE_VAL = 61 };

enum { JVMPI_MINIMUM_PRIORITY = 1 };

enum { JVMPI_MONITOR_JAVA = 1 };

enum { JVMPI_MONITOR_RAW = 2 };

enum { JVMPI_NORMAL_OBJECT = 0 };

enum { JVMPI_NORMAL_PRIORITY = 5 };

enum { JVMPI_NOT_AVAILABLE = 1 };

enum { JVMPI_REQUESTED_EVENT = 268435456 };

enum { JVMPI_SHORT = 9 };

enum { JVMPI_SUCCESS = 0 };

enum { JVMPI_THREAD_CONDVAR_WAIT = 3 };

enum { JVMPI_THREAD_INTERRUPTED = 16384 };

enum { JVMPI_THREAD_MONITOR_WAIT = 2 };

enum { JVMPI_THREAD_RUNNABLE = 1 };

enum { JVMPI_THREAD_SUSPENDED = 32768 };

enum { JVMPI_VERSION_1 = 268435457 };

enum { JVMPI_VERSION_1_1 = 268435458 };

enum { JVMPI_VERSION_1_2 = 268435459 };

enum { JVMTI_CLASS_STATUS_ARRAY = 16 };

enum { JVMTI_CLASS_STATUS_ERROR = 8 };

enum { JVMTI_CLASS_STATUS_INITIALIZED = 4 };

enum { JVMTI_CLASS_STATUS_PREPARED = 2 };

enum { JVMTI_CLASS_STATUS_PRIMITIVE = 32 };

enum { JVMTI_CLASS_STATUS_VERIFIED = 1 };

enum { JVMTI_DISABLE = 0 };

enum { JVMTI_ENABLE = 1 };

enum { JVMTI_ERROR_ABSENT_INFORMATION = 101 };

enum { JVMTI_ERROR_ACCESS_DENIED = 111 };

enum { JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION = 61 };

enum { JVMTI_ERROR_CLASS_NOT_PREPARED = 22 };

enum { JVMTI_ERROR_DUPLICATE = 40 };

enum { JVMTI_ERROR_FAILS_VERIFICATION = 62 };

enum { JVMTI_ERROR_ILLEGAL_ARGUMENT = 103 };

enum { JVMTI_ERROR_INTERNAL = 113 };

enum { JVMTI_ERROR_INTERRUPT = 52 };

enum { JVMTI_ERROR_INVALID_CLASS = 21 };

enum { JVMTI_ERROR_INVALID_CLASS_FORMAT = 60 };

enum { JVMTI_ERROR_INVALID_ENVIRONMENT = 116 };

enum { JVMTI_ERROR_INVALID_EVENT_TYPE = 102 };

enum { JVMTI_ERROR_INVALID_FIELDID = 25 };

enum { JVMTI_ERROR_INVALID_LOCATION = 24 };

enum { JVMTI_ERROR_INVALID_METHODID = 23 };

enum { JVMTI_ERROR_INVALID_MONITOR = 50 };

enum { JVMTI_ERROR_INVALID_OBJECT = 20 };

enum { JVMTI_ERROR_INVALID_PRIORITY = 12 };

enum { JVMTI_ERROR_INVALID_SLOT = 35 };

enum { JVMTI_ERROR_INVALID_THREAD = 10 };

enum { JVMTI_ERROR_INVALID_THREAD_GROUP = 11 };

enum { JVMTI_ERROR_INVALID_TYPESTATE = 65 };

enum { JVMTI_ERROR_MAX = 116 };

enum { JVMTI_ERROR_MUST_POSSESS_CAPABILITY = 99 };

enum { JVMTI_ERROR_NAMES_DONT_MATCH = 69 };

enum { JVMTI_ERROR_NATIVE_METHOD = 104 };

enum { JVMTI_ERROR_NONE = 0 };

enum { JVMTI_ERROR_NOT_AVAILABLE = 98 };

enum { JVMTI_ERROR_NOT_FOUND = 41 };

enum { JVMTI_ERROR_NOT_MONITOR_OWNER = 51 };

enum { JVMTI_ERROR_NO_MORE_FRAMES = 31 };

enum { JVMTI_ERROR_NULL_POINTER = 100 };

enum { JVMTI_ERROR_OPAQUE_FRAME = 32 };

enum { JVMTI_ERROR_OUT_OF_MEMORY = 110 };

enum { JVMTI_ERROR_THREAD_NOT_ALIVE = 15 };

enum { JVMTI_ERROR_THREAD_NOT_SUSPENDED = 13 };

enum { JVMTI_ERROR_THREAD_SUSPENDED = 14 };

enum { JVMTI_ERROR_TYPE_MISMATCH = 34 };

enum { JVMTI_ERROR_UNATTACHED_THREAD = 115 };

enum { JVMTI_ERROR_UNMODIFIABLE_CLASS = 79 };

enum { JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED = 70 };

enum { JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED = 66 };

enum { JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED = 63 };

enum { JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED = 67 };

enum { JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED = 71 };

enum { JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED = 64 };

enum { JVMTI_ERROR_UNSUPPORTED_VERSION = 68 };

enum { JVMTI_ERROR_WRONG_PHASE = 112 };

enum { JVMTI_EVENT_BREAKPOINT = 62 };

enum { JVMTI_EVENT_CLASS_FILE_LOAD_HOOK = 54 };

enum { JVMTI_EVENT_CLASS_LOAD = 55 };

enum { JVMTI_EVENT_CLASS_PREPARE = 56 };

enum { JVMTI_EVENT_COMPILED_METHOD_LOAD = 68 };

enum { JVMTI_EVENT_COMPILED_METHOD_UNLOAD = 69 };

enum { JVMTI_EVENT_DATA_DUMP_REQUEST = 71 };

enum { JVMTI_EVENT_DYNAMIC_CODE_GENERATED = 70 };

enum { JVMTI_EVENT_EXCEPTION = 58 };

enum { JVMTI_EVENT_EXCEPTION_CATCH = 59 };

enum { JVMTI_EVENT_FIELD_ACCESS = 63 };

enum { JVMTI_EVENT_FIELD_MODIFICATION = 64 };

enum { JVMTI_EVENT_FRAME_POP = 61 };

enum { JVMTI_EVENT_GARBAGE_COLLECTION_FINISH = 82 };

enum { JVMTI_EVENT_GARBAGE_COLLECTION_START = 81 };

enum { JVMTI_EVENT_METHOD_ENTRY = 65 };

enum { JVMTI_EVENT_METHOD_EXIT = 66 };

enum { JVMTI_EVENT_MONITOR_CONTENDED_ENTER = 75 };

enum { JVMTI_EVENT_MONITOR_CONTENDED_ENTERED = 76 };

enum { JVMTI_EVENT_MONITOR_WAIT = 73 };

enum { JVMTI_EVENT_MONITOR_WAITED = 74 };

enum { JVMTI_EVENT_NATIVE_METHOD_BIND = 67 };

enum { JVMTI_EVENT_OBJECT_FREE = 83 };

enum { JVMTI_EVENT_SINGLE_STEP = 60 };

enum { JVMTI_EVENT_THREAD_END = 53 };

enum { JVMTI_EVENT_THREAD_START = 52 };

enum { JVMTI_EVENT_VM_DEATH = 51 };

enum { JVMTI_EVENT_VM_INIT = 50 };

enum { JVMTI_EVENT_VM_OBJECT_ALLOC = 84 };

enum { JVMTI_EVENT_VM_START = 57 };

enum { JVMTI_HEAP_OBJECT_EITHER = 3 };

enum { JVMTI_HEAP_OBJECT_TAGGED = 1 };

enum { JVMTI_HEAP_OBJECT_UNTAGGED = 2 };

enum { JVMTI_HEAP_ROOT_JNI_GLOBAL = 1 };

enum { JVMTI_HEAP_ROOT_JNI_LOCAL = 5 };

enum { JVMTI_HEAP_ROOT_MONITOR = 3 };

enum { JVMTI_HEAP_ROOT_OTHER = 7 };

enum { JVMTI_HEAP_ROOT_STACK_LOCAL = 4 };

enum { JVMTI_HEAP_ROOT_SYSTEM_CLASS = 2 };

enum { JVMTI_HEAP_ROOT_THREAD = 6 };

enum { JVMTI_ITERATION_ABORT = 0 };

enum { JVMTI_ITERATION_CONTINUE = 1 };

enum { JVMTI_ITERATION_IGNORE = 2 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED = 1025 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_MASK = 1207 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_NEW = 0 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE = 5 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED = 2 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING = 161 };

enum { JVMTI_JAVA_LANG_THREAD_STATE_WAITING = 145 };

enum { JVMTI_JLOCATION_JVMBCI = 1 };

enum { JVMTI_JLOCATION_MACHINEPC = 2 };

enum { JVMTI_JLOCATION_OTHER = 0 };

enum { JVMTI_KIND_ALLOC_ALLOC_BUF = 95 };

enum { JVMTI_KIND_ALLOC_BUF = 94 };

enum { JVMTI_KIND_IN = 91 };

enum { JVMTI_KIND_IN_BUF = 93 };

enum { JVMTI_KIND_IN_PTR = 92 };

enum { JVMTI_KIND_OUT = 96 };

enum { JVMTI_KIND_OUT_BUF = 97 };

enum { JVMTI_MAX_EVENT_TYPE_VAL = 84 };

enum { JVMTI_MIN_EVENT_TYPE_VAL = 50 };

enum { JVMTI_PHASE_DEAD = 8 };

enum { JVMTI_PHASE_LIVE = 4 };

enum { JVMTI_PHASE_ONLOAD = 1 };

enum { JVMTI_PHASE_PRIMORDIAL = 2 };

enum { JVMTI_PHASE_START = 6 };

enum { JVMTI_REFERENCE_ARRAY_ELEMENT = 3 };

enum { JVMTI_REFERENCE_CLASS = 1 };

enum { JVMTI_REFERENCE_CLASS_LOADER = 4 };

enum { JVMTI_REFERENCE_CONSTANT_POOL = 9 };

enum { JVMTI_REFERENCE_FIELD = 2 };

enum { JVMTI_REFERENCE_INTERFACE = 7 };

enum { JVMTI_REFERENCE_PROTECTION_DOMAIN = 6 };

enum { JVMTI_REFERENCE_SIGNERS = 5 };

enum { JVMTI_REFERENCE_STATIC_FIELD = 8 };

enum { JVMTI_THREAD_MAX_PRIORITY = 10 };

enum { JVMTI_THREAD_MIN_PRIORITY = 1 };

enum { JVMTI_THREAD_NORM_PRIORITY = 5 };

enum { JVMTI_THREAD_STATE_ALIVE = 1 };

enum { JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER = 1024 };

enum { JVMTI_THREAD_STATE_INTERRUPTED = 2097152 };

enum { JVMTI_THREAD_STATE_IN_NATIVE = 4194304 };

enum { JVMTI_THREAD_STATE_IN_OBJECT_WAIT = 256 };

enum { JVMTI_THREAD_STATE_PARKED = 512 };

enum { JVMTI_THREAD_STATE_RUNNABLE = 4 };

enum { JVMTI_THREAD_STATE_SLEEPING = 64 };

enum { JVMTI_THREAD_STATE_SUSPENDED = 1048576 };

enum { JVMTI_THREAD_STATE_TERMINATED = 2 };

enum { JVMTI_THREAD_STATE_VENDOR_1 = 268435456 };

enum { JVMTI_THREAD_STATE_VENDOR_2 = 536870912 };

enum { JVMTI_THREAD_STATE_VENDOR_3 = 1073741824 };

enum { JVMTI_THREAD_STATE_WAITING = 128 };

enum { JVMTI_THREAD_STATE_WAITING_INDEFINITELY = 16 };

enum { JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT = 32 };

enum { JVMTI_TIMER_ELAPSED = 32 };

enum { JVMTI_TIMER_TOTAL_CPU = 31 };

enum { JVMTI_TIMER_USER_CPU = 30 };

enum { JVMTI_TYPE_CCHAR = 115 };

enum { JVMTI_TYPE_CVOID = 116 };

enum { JVMTI_TYPE_JBOOLEAN = 108 };

enum { JVMTI_TYPE_JBYTE = 101 };

enum { JVMTI_TYPE_JCHAR = 102 };

enum { JVMTI_TYPE_JCLASS = 111 };

enum { JVMTI_TYPE_JDOUBLE = 107 };

enum { JVMTI_TYPE_JFIELDID = 113 };

enum { JVMTI_TYPE_JFLOAT = 106 };

enum { JVMTI_TYPE_JINT = 104 };

enum { JVMTI_TYPE_JLONG = 105 };

enum { JVMTI_TYPE_JMETHODID = 114 };

enum { JVMTI_TYPE_JNIENV = 117 };

enum { JVMTI_TYPE_JOBJECT = 109 };

enum { JVMTI_TYPE_JSHORT = 103 };

enum { JVMTI_TYPE_JTHREAD = 110 };

enum { JVMTI_TYPE_JVALUE = 112 };

enum { JVMTI_VERBOSE_CLASS = 2 };

enum { JVMTI_VERBOSE_GC = 1 };

enum { JVMTI_VERBOSE_JNI = 4 };

enum { JVMTI_VERBOSE_OTHER = 0 };

enum { JVMTI_VERSION = 805371937 };

enum { JVMTI_VERSION_1 = 805371904 };

enum { JVMTI_VERSION_1_0 = 805371904 };

enum { JVMTI_VERSION_INTERFACE_JNI = 0 };

enum { JVMTI_VERSION_INTERFACE_JVMTI = 805306368 };

enum { JVMTI_VERSION_MASK_INTERFACE_TYPE = 1879048192 };

enum { JVMTI_VERSION_MASK_MAJOR = 268369920 };

enum { JVMTI_VERSION_MASK_MICRO = 255 };

enum { JVMTI_VERSION_MASK_MINOR = 65280 };

enum { JVMTI_VERSION_SHIFT_MAJOR = 16 };

enum { JVMTI_VERSION_SHIFT_MICRO = 0 };

enum { JVMTI_VERSION_SHIFT_MINOR = 8 };

// function 'Agent_OnLoad'
long Agent_OnLoad(struct JNIInvokeInterface_ **vm, char* options, void *reserved);

// function 'Agent_OnUnload'
void Agent_OnUnload(struct JNIInvokeInterface_ **vm);

// function 'JNI_CreateJavaVM'
long JNI_CreateJavaVM(struct JNIInvokeInterface_ ***pvm, void **penv, void *args);

// function 'JNI_GetCreatedJavaVMs'
long JNI_GetCreatedJavaVMs(struct JNIInvokeInterface_ ***p1, long p2, int *p3);

// function 'JNI_GetDefaultJavaVMInitArgs'
long JNI_GetDefaultJavaVMInitArgs(void *args);

// function 'JNI_OnLoad'
long JNI_OnLoad(struct JNIInvokeInterface_ **vm, void *reserved);

// function 'JNI_OnUnload'
void JNI_OnUnload(struct JNIInvokeInterface_ **vm, void *reserved);

// method '+[NSJavaConfiguration configurationForVendor:]'
NSJavaConfiguration* _CM_NSJavaConfiguration_configurationForVendor_C(Class _class, id vendorName);

// method '+[NSJavaConfiguration defaultConfiguration]'
NSJavaConfiguration* _CM_NSJavaConfiguration_defaultConfiguration(Class _class);

// method '-[NSJavaConfiguration init]'
NSJavaConfiguration *_IM_NSJavaConfiguration_init(NSJavaConfiguration *_self);

// method '-[NSJavaConfiguration initWithVendor:]'
NSJavaConfiguration *_IM_NSJavaConfiguration_initWithVendor_C(NSJavaConfiguration *_self, id vendorName);

// method '-[NSJavaConfiguration valueForKey:]'
id _IM_NSJavaConfiguration_valueForKey_C(NSJavaConfiguration *_self, id keyName);

// method '-[NSJavaConfiguration valueForKey:expandEnvironmentVariables:]'
id _IM_NSJavaConfiguration_valueForKey_CexpandEnvironmentVariables_C(NSJavaConfiguration *_self, id keyName, BOOL flag);

// method '-[NSJavaConfiguration vendorName]'
id _IM_NSJavaConfiguration_vendorName(NSJavaConfiguration *_self);

// method '+[NSJavaConfiguration vendorNames]'
id _CM_NSJavaConfiguration_vendorNames(Class _class);

// method '-[NSJavaVirtualMachine attachCurrentThread]'
void _IM_NSJavaVirtualMachine_attachCurrentThread(NSJavaVirtualMachine *_self);

// method '+[NSJavaVirtualMachine defaultClassPath]'
id _CM_NSJavaVirtualMachine_defaultClassPath(Class _class);

// method '+[NSJavaVirtualMachine defaultVirtualMachine]'
id _CM_NSJavaVirtualMachine_defaultVirtualMachine(Class _class);

// method '-[NSJavaVirtualMachine defineClass:withName:]'
Class _IM_NSJavaVirtualMachine_defineClass_CwithName_C(NSJavaVirtualMachine *_self, id javaClassData, id className);

// method '-[NSJavaVirtualMachine detachCurrentThread]'
void _IM_NSJavaVirtualMachine_detachCurrentThread(NSJavaVirtualMachine *_self);

// method '-[NSJavaVirtualMachine findClass:]'
Class _IM_NSJavaVirtualMachine_findClass_C(NSJavaVirtualMachine *_self, id className);

// method '-[NSJavaVirtualMachine initWithClassPath:]'
NSJavaVirtualMachine *_IM_NSJavaVirtualMachine_initWithClassPath_C(NSJavaVirtualMachine *_self, id classPath);

// method '-[NSObject awtMessage:message:env:]'
void _IM_NSObject_awtMessage_Cmessage_Cenv_C(NSObject *_self, long messageID, struct _jobject *message, struct JNINativeInterface_ **env);


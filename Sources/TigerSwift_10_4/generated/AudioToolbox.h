// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'AUMIDIControllerRef'
typedef struct OpaqueAUMIDIController *AUMIDIControllerRef;

// CoreFoundation type 'AUParameterListenerRef'
typedef struct AUListenerBase *AUParameterListenerRef;

// CoreFoundation type 'AudioConverterRef'
typedef struct OpaqueAudioConverter *AudioConverterRef;

// CoreFoundation type 'CAClockRef'
typedef struct OpaqueCAClock *CAClockRef;

// CoreFoundation type 'ExtAudioFileRef'
typedef struct OpaqueExtAudioFile *ExtAudioFileRef;

// opaque 'AUGraph'
typedef struct OpaqueAUGraph *AUGraph;

// opaque 'AudioFileID'
typedef struct OpaqueAudioFileID *AudioFileID;

// opaque 'CAFOverview'
typedef struct CAFOverview *CAFOverview;

// opaque 'MusicEventIterator'
typedef struct OpaqueMusicEventIterator *MusicEventIterator;

// opaque 'MusicPlayer'
typedef struct OpaqueMusicPlayer *MusicPlayer;

// opaque 'MusicSequence'
typedef struct OpaqueMusicSequence *MusicSequence;

// opaque 'MusicTrack'
typedef struct OpaqueMusicTrack *MusicTrack;

// struct 'AudioFileTypeAndFormatID'
struct AudioFileTypeAndFormatID {
    unsigned int mFileType;
    unsigned int mFormatID;
};

// struct 'AudioFile_SMPTE_Time'
struct AudioFile_SMPTE_Time {
    char mHours;
    unsigned char mMinutes;
    unsigned char mSeconds;
    unsigned char mFrames;
    unsigned int mSubFrameSampleOffset;
};

// struct 'AudioFileMarker'
struct AudioFileMarker {
    double mFramePosition;
    struct __CFString *mName;
    int mMarkerID;
    struct AudioFile_SMPTE_Time mSMPTETime;
    unsigned int mType;
    unsigned short mReserved;
    unsigned short mChannel;
};

// struct 'CAF_SMPTE_Time'
struct CAF_SMPTE_Time {
    char mHours;
    char mMinutes;
    char mSeconds;
    char mFrames;
    unsigned int mSubFrameSampleOffset;
};

// struct 'CAFMarker'
struct CAFMarker {
    unsigned int mType;
    double mFramePosition;
    unsigned int mMarkerID;
    struct CAF_SMPTE_Time mSMPTETime;
    unsigned int mChannel;
};

// struct 'AudioFramePacketTranslation'
struct AudioFramePacketTranslation {
    long long mFrame;
    long long mPacket;
    unsigned int mFrameOffsetInPacket;
};

// struct 'CAFOverviewSample'
struct CAFOverviewSample {
    short mMinValue;
    short mMaxValue;
};

// struct 'AudioBalanceFade'
struct AudioBalanceFade {
    float mLeftRightBalance;
    float mBackFrontFade;
    unsigned int mType;
    struct AudioChannelLayout *mChannelLayout;
};

// struct 'AudioUnitNodeConnection'
struct AudioUnitNodeConnection {
    int sourceNode;
    unsigned int sourceOutputNumber;
    int destNode;
    unsigned int destInputNumber;
};

// struct 'CAFFileHeader'
struct CAFFileHeader {
    unsigned int mFileType;
    unsigned short mFileVersion;
    unsigned short mFileFlags;
};

// struct 'CABarBeatTime'
struct CABarBeatTime {
    int bar;
    unsigned short beat;
    unsigned short subbeat;
    unsigned short subbeatDivisor;
    unsigned short reserved;
};

// struct 'AudioFilePacketTableInfo'
struct AudioFilePacketTableInfo {
    long long mNumberValidFrames;
    int mPrimingFrames;
    int mRemainderFrames;
};

// struct 'AUPresetEvent'
struct AUPresetEvent {
    unsigned int scope;
    unsigned int element;
    void *preset;
};

// struct 'CAFAudioDescription'
struct CAFAudioDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
};

// struct 'CAFStringID'
struct CAFStringID {
    unsigned int mStringID;
    long long mStringStartByteOffset;
};

// struct 'CAFPositionPeak'
struct CAFPositionPeak {
    float mValue;
    unsigned long long mFrameNumber;
};

// struct 'MIDIChannelMessage'
struct MIDIChannelMessage {
    unsigned char status;
    unsigned char data1;
    unsigned char data2;
    unsigned char reserved;
};

// struct 'CAFInfoStrings'
struct CAFInfoStrings {
    unsigned int mNumEntries;
};

// struct 'CATempoMapEntry'
struct CATempoMapEntry {
    double beats;
    double tempoBPM;
};

// struct 'CAFInstrumentChunk'
struct CAFInstrumentChunk {
    float mBaseNote;
    unsigned char mMIDILowNote;
    unsigned char mMIDIHighNote;
    unsigned char mMIDILowVelocity;
    unsigned char mMIDIHighVelocity;
    float mdBGain;
    unsigned int mStartRegionID;
    unsigned int mSustainRegionID;
    unsigned int mReleaseRegionID;
    unsigned int mInstrumentID;
};

// struct 'MIDINoteMessage'
struct MIDINoteMessage {
    unsigned char channel;
    unsigned char note;
    unsigned char velocity;
    unsigned char releaseVelocity;
    float duration;
};

// struct 'ExtendedControlEvent'
struct ExtendedControlEvent {
    unsigned int groupID;
    unsigned int controlID;
    float value;
};

// struct 'ExtendedTempoEvent'
struct ExtendedTempoEvent {
    double bpm;
};

// struct 'AudioConverterPrimeInfo'
struct AudioConverterPrimeInfo {
    unsigned int leadingFrames;
    unsigned int trailingFrames;
};

// struct 'CAFChunkHeader'
struct CAFChunkHeader {
    unsigned int mChunkType;
    long long mChunkSize;
};

// struct 'CAMeterTrackEntry'
struct CAMeterTrackEntry {
    double beats;
    unsigned short meterNumer;
    unsigned short meterDenom;
};

// struct 'ParameterEvent'
struct ParameterEvent {
    unsigned int parameterID;
    unsigned int scope;
    unsigned int element;
    float value;
};

enum { kAUGraphErr_CannotDoInCurrentContext = -10863 };

enum { kAUGraphErr_InvalidAudioUnit = -10864 };

enum { kAUGraphErr_InvalidConnection = -10861 };

enum { kAUGraphErr_NodeNotFound = -10860 };

enum { kAUGraphErr_OutputNodeErr = -10862 };

enum { kAUParameterListener_AnyParameter = 4294967295 };

enum { kAudioBalanceFadeType_EqualPower = 1 };

enum { kAudioBalanceFadeType_MaxUnityGain = 0 };

enum { kAudioConverterApplicableEncodeBitRates = 1634034290 };

enum { kAudioConverterApplicableEncodeSampleRates = 1634038642 };

enum { kAudioConverterAvailableEncodeBitRates = 1986355826 };

enum { kAudioConverterAvailableEncodeChannelLayoutTags = 1634034540 };

enum { kAudioConverterAvailableEncodeSampleRates = 1986360178 };

enum { kAudioConverterChannelMap = 1667788144 };

enum { kAudioConverterCodecQuality = 1667527029 };

enum { kAudioConverterCompressionMagicCookie = 1668114275 };

enum { kAudioConverterCurrentInputStreamDescription = 1633904996 };

enum { kAudioConverterCurrentOutputStreamDescription = 1633906532 };

enum { kAudioConverterDecompressionMagicCookie = 1684891491 };

enum { kAudioConverterEncodeAdjustableSampleRate = 1634366322 };

enum { kAudioConverterEncodeBitRate = 1651663220 };

enum { kAudioConverterErr_BadPropertySizeError = 561211770 };

enum { kAudioConverterErr_FormatNotSupported = 1718449215 };

enum { kAudioConverterErr_InputSampleRateOutOfRange = 560558962 };

enum { kAudioConverterErr_InvalidInputSize = 1768846202 };

enum { kAudioConverterErr_InvalidOutputSize = 1869902714 };

enum { kAudioConverterErr_OperationNotSupported = 1869627199 };

enum { kAudioConverterErr_OutputSampleRateOutOfRange = 560952178 };

enum { kAudioConverterErr_PropertyNotSupported = 1886547824 };

enum { kAudioConverterErr_RequiresPacketDescriptionsError = 561015652 };

enum { kAudioConverterErr_UnspecifiedError = 2003329396 };

enum { kAudioConverterInputChannelLayout = 1768123424 };

enum { kAudioConverterOutputChannelLayout = 1868786720 };

enum { kAudioConverterPrimeInfo = 1886546285 };

enum { kAudioConverterPrimeMethod = 1886547309 };

enum { kAudioConverterPropertyBitDepthHint = 1633903204 };

enum { kAudioConverterPropertyCalculateInputBufferSize = 1667850867 };

enum { kAudioConverterPropertyCalculateOutputBufferSize = 1668244083 };

enum { kAudioConverterPropertyInputCodecParameters = 1768121456 };

enum { kAudioConverterPropertyMaximumInputBufferSize = 2020172403 };

enum { kAudioConverterPropertyMaximumInputPacketSize = 2020175987 };

enum { kAudioConverterPropertyMaximumOutputPacketSize = 2020569203 };

enum { kAudioConverterPropertyMinimumInputBufferSize = 1835623027 };

enum { kAudioConverterPropertyMinimumOutputBufferSize = 1836016243 };

enum { kAudioConverterPropertyOutputCodecParameters = 1868784752 };

enum { kAudioConverterPropertySettings = 1633906803 };

enum { kAudioConverterQuality_High = 96 };

enum { kAudioConverterQuality_Low = 32 };

enum { kAudioConverterQuality_Max = 127 };

enum { kAudioConverterQuality_Medium = 64 };

enum { kAudioConverterQuality_Min = 0 };

enum { kAudioConverterSampleRateConverterAlgorithm = 1936876393 };

enum { kAudioConverterSampleRateConverterQuality = 1936876401 };

enum { kAudioFileAAC_ADTSType = 1633973363 };

enum { kAudioFileAC3Type = 1633889587 };

enum { kAudioFileAIFCType = 1095321155 };

enum { kAudioFileAIFFType = 1095321158 };

enum { kAudioFileBadPropertySizeError = 561211770 };

enum { kAudioFileCAFType = 1667327590 };

enum { kAudioFileCloseSelect = 6 };

enum { kAudioFileComponent_AvailableFormatIDs = 1718446436 };

enum { kAudioFileComponent_AvailableStreamDescriptionsForFormat = 1935960420 };

enum { kAudioFileComponent_CanRead = 1668182628 };

enum { kAudioFileComponent_CanWrite = 1668183922 };

enum { kAudioFileComponent_ExtensionsForType = 1717926004 };

enum { kAudioFileComponent_FastDispatchTable = 1717855860 };

enum { kAudioFileComponent_FileTypeName = 1718906477 };

enum { kAudioFileComponent_HFSTypeCodesForType = 1718118003 };

enum { kAudioFileCountUserDataSelect = 20 };

enum { kAudioFileCreateSelect = 1 };

enum { kAudioFileDataIsThisFormatSelect = 17 };

enum { kAudioFileDoesNotAllow64BitDataSizeError = 1868981823 };

enum { kAudioFileExtensionIsThisFormatSelect = 15 };

enum { kAudioFileFileIsThisFormatSelect = 16 };

enum { kAudioFileFormatNameUnavailableError = 1852663103 };

enum { kAudioFileGetGlobalInfoSelect = 19 };

enum { kAudioFileGetGlobalInfoSizeSelect = 18 };

enum { kAudioFileGetPropertyInfoSelect = 12 };

enum { kAudioFileGetPropertySelect = 13 };

enum { kAudioFileGetUserDataSelect = 22 };

enum { kAudioFileGetUserDataSizeSelect = 21 };

enum { kAudioFileGlobalInfo_AllExtensions = 1634498676 };

enum { kAudioFileGlobalInfo_AllHFSTypeCodes = 1634231923 };

enum { kAudioFileGlobalInfo_AvailableFormatIDs = 1718446436 };

enum { kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat = 1935960420 };

enum { kAudioFileGlobalInfo_ExtensionsForType = 1717926004 };

enum { kAudioFileGlobalInfo_FileTypeName = 1718906477 };

enum { kAudioFileGlobalInfo_HFSTypeCodesForType = 1718118003 };

enum { kAudioFileGlobalInfo_ReadableTypes = 1634103910 };

enum { kAudioFileGlobalInfo_WritableTypes = 1634105190 };

enum { kAudioFileInitializeSelect = 3 };

enum { kAudioFileInitializeWithCallbacksSelect = 5 };

enum { kAudioFileInvalidChunkError = 1667787583 };

enum { kAudioFileInvalidFileError = 1685348671 };

enum { kAudioFileInvalidPacketOffsetError = 1885563711 };

enum { kAudioFileLoopDirection_Backward = 3 };

enum { kAudioFileLoopDirection_Forward = 1 };

enum { kAudioFileLoopDirection_ForwardAndBackward = 2 };

enum { kAudioFileLoopDirection_NoLooping = 0 };

enum { kAudioFileM4AType = 1832149350 };

enum { kAudioFileMP3Type = 1297106739 };

enum { kAudioFileMPEG4Type = 1836069990 };

enum { kAudioFileMarkerType_Generic = 0 };

enum { kAudioFileNextType = 1315264596 };

enum { kAudioFileNotOptimizedError = 1869640813 };

enum { kAudioFileOpenSelect = 2 };

enum { kAudioFileOpenWithCallbacksSelect = 4 };

enum { kAudioFileOperationNotSupportedError = 1869627199 };

enum { kAudioFileOptimizeSelect = 7 };

enum { kAudioFilePermissionsError = 1886547263 };

enum { kAudioFilePropertyAudioDataByteCount = 1650683508 };

enum { kAudioFilePropertyAudioDataPacketCount = 1885564532 };

enum { kAudioFilePropertyChannelLayout = 1668112752 };

enum { kAudioFilePropertyChunkIDs = 1667787108 };

enum { kAudioFilePropertyDataFormat = 1684434292 };

enum { kAudioFilePropertyDataFormatName = 1718512997 };

enum { kAudioFilePropertyDataOffset = 1685022310 };

enum { kAudioFilePropertyDeferSizeUpdates = 1685289589 };

enum { kAudioFilePropertyFileFormat = 1717988724 };

enum { kAudioFilePropertyFrameToPacket = 1718775915 };

enum { kAudioFilePropertyInfoDictionary = 1768842863 };

enum { kAudioFilePropertyIsOptimized = 1869640813 };

enum { kAudioFilePropertyMagicCookieData = 1835493731 };

enum { kAudioFilePropertyMarkerList = 1835756659 };

enum { kAudioFilePropertyMaximumPacketSize = 1886616165 };

enum { kAudioFilePropertyPacketTableInfo = 1886283375 };

enum { kAudioFilePropertyPacketToFrame = 1886086770 };

enum { kAudioFilePropertyRegionList = 1919380595 };

enum { kAudioFileReadBytesSelect = 8 };

enum { kAudioFileReadPacketsSelect = 10 };

enum { kAudioFileRegionFlag_LoopEnable = 1 };

enum { kAudioFileRegionFlag_PlayBackward = 4 };

enum { kAudioFileRegionFlag_PlayForward = 2 };

enum { kAudioFileSetPropertySelect = 14 };

enum { kAudioFileSetUserDataSelect = 23 };

enum { kAudioFileSoundDesigner2Type = 1399075430 };

enum { kAudioFileUnspecifiedError = 2003334207 };

enum { kAudioFileUnsupportedDataFormatError = 1718449215 };

enum { kAudioFileUnsupportedFileTypeError = 1954115647 };

enum { kAudioFileUnsupportedPropertyError = 1886681407 };

enum { kAudioFileWAVEType = 1463899717 };

enum { kAudioFileWriteBytesSelect = 9 };

enum { kAudioFileWritePacketsSelect = 11 };

enum { kAudioFormatBadPropertySizeError = 561211770 };

enum { kAudioFormatBadSpecifierSizeError = 561213539 };

enum { kAudioFormatProperty_ASBDFromESDS = 1702064996 };

enum { kAudioFormatProperty_AvailableEncodeBitRates = 1634034290 };

enum { kAudioFormatProperty_AvailableEncodeChannelLayoutTags = 1634034540 };

enum { kAudioFormatProperty_AvailableEncodeNumberChannels = 1635151459 };

enum { kAudioFormatProperty_AvailableEncodeSampleRates = 1634038642 };

enum { kAudioFormatProperty_BalanceFade = 1650551910 };

enum { kAudioFormatProperty_BitmapForLayoutTag = 1651340391 };

enum { kAudioFormatProperty_ChannelLayoutForBitmap = 1668116578 };

enum { kAudioFormatProperty_ChannelLayoutForTag = 1668116588 };

enum { kAudioFormatProperty_ChannelLayoutFromESDS = 1702060908 };

enum { kAudioFormatProperty_ChannelLayoutName = 1819242093 };

enum { kAudioFormatProperty_ChannelMap = 1667788144 };

enum { kAudioFormatProperty_ChannelName = 1668178285 };

enum { kAudioFormatProperty_DecodeFormatIDs = 1633904998 };

enum { kAudioFormatProperty_Decoders = 1635148901 };

enum { kAudioFormatProperty_EncodeFormatIDs = 1633906534 };

enum { kAudioFormatProperty_Encoders = 1635149166 };

enum { kAudioFormatProperty_FormatInfo = 1718449257 };

enum { kAudioFormatProperty_FormatIsExternallyFramed = 1717925990 };

enum { kAudioFormatProperty_FormatIsVBR = 1719034482 };

enum { kAudioFormatProperty_FormatName = 1718509933 };

enum { kAudioFormatProperty_MatrixMixMap = 1835884912 };

enum { kAudioFormatProperty_NumberOfChannelsForLayout = 1852008557 };

enum { kAudioFormatProperty_PanningMatrix = 1885433453 };

enum { kAudioFormatProperty_TagForChannelLayout = 1668116596 };

enum { kAudioFormatProperty_TagsForNumberOfChannels = 1952540515 };

enum { kAudioFormatUnknownFormatError = 560360820 };

enum { kAudioFormatUnspecifiedError = 2003329396 };

enum { kAudioFormatUnsupportedDataFormatError = 1718449215 };

enum { kAudioFormatUnsupportedPropertyError = 1886547824 };

enum { kAudioToolboxErr_CannotDoInCurrentContext = -10863 };

enum { kAudioToolboxErr_EndOfTrack = -10857 };

enum { kAudioToolboxErr_IllegalTrackDestination = -10855 };

enum { kAudioToolboxErr_InvalidEventType = -10853 };

enum { kAudioToolboxErr_InvalidPlayerState = -10852 };

enum { kAudioToolboxErr_NoSequence = -10854 };

enum { kAudioToolboxErr_StartOfTrack = -10856 };

enum { kAudioToolboxErr_TrackIndexError = -10859 };

enum { kAudioToolboxErr_TrackNotFound = -10858 };

enum { kAudioUnitEvent_BeginParameterChangeGesture = 1 };

enum { kAudioUnitEvent_EndParameterChangeGesture = 2 };

enum { kAudioUnitEvent_ParameterValueChange = 0 };

enum { kAudioUnitEvent_PropertyChange = 3 };

enum { kCAClockMessage_Armed = 1634889060 };

enum { kCAClockMessage_Disarmed = 1684107885 };

enum { kCAClockMessage_PropertyChanged = 1885562983 };

enum { kCAClockMessage_StartTimeSet = 1937009005 };

enum { kCAClockMessage_Started = 1937011316 };

enum { kCAClockMessage_Stopped = 1937010544 };

enum { kCAClockMessage_WrongSMPTEFormat = 1064529264 };

enum { kCAClockProperty_InternalTimebase = 1768846434 };

enum { kCAClockProperty_MIDIClockDestinations = 1835164516 };

enum { kCAClockProperty_MTCDestinations = 1836344164 };

enum { kCAClockProperty_MTCFreewheelTime = 1836344951 };

enum { kCAClockProperty_MeterTrack = 1835365490 };

enum { kCAClockProperty_Name = 1851878757 };

enum { kCAClockProperty_SMPTEFormat = 1936552038 };

enum { kCAClockProperty_SMPTEOffset = 1936552047 };

enum { kCAClockProperty_SyncMode = 1937337965 };

enum { kCAClockProperty_SyncSource = 1937337971 };

enum { kCAClockProperty_TempoMap = 1953329263 };

enum { kCAClockProperty_TimebaseSource = 1769235059 };

enum { kCAClockSyncMode_Internal = 1768846450 };

enum { kCAClockSyncMode_MIDIClockTransport = 1835232363 };

enum { kCAClockSyncMode_MTCTransport = 1835889763 };

enum { kCAClockTimeFormat_Beats = 1650811252 };

enum { kCAClockTimeFormat_HostTime = 1752134516 };

enum { kCAClockTimeFormat_SMPTESeconds = 1936552051 };

enum { kCAClockTimeFormat_SMPTETime = 1936552052 };

enum { kCAClockTimeFormat_Samples = 1935764848 };

enum { kCAClockTimeFormat_Seconds = 1936024435 };

enum { kCAClockTimebase_AudioDevice = 1635083369 };

enum { kCAClockTimebase_AudioOutputUnit = 1635086197 };

enum { kCAClockTimebase_HostTime = 1752134516 };

enum { kCAClock_CannotSetTimeError = -66805 };

enum { kCAClock_InvalidPlayRateError = -66806 };

enum { kCAClock_InvalidPropertySizeError = -66815 };

enum { kCAClock_InvalidSMPTEFormatError = -66809 };

enum { kCAClock_InvalidSMPTEOffsetError = -66808 };

enum { kCAClock_InvalidSyncModeError = -66813 };

enum { kCAClock_InvalidSyncSourceError = -66812 };

enum { kCAClock_InvalidTimeFormatError = -66814 };

enum { kCAClock_InvalidTimebaseError = -66811 };

enum { kCAClock_InvalidTimebaseSourceError = -66810 };

enum { kCAClock_InvalidUnitError = -66807 };

enum { kCAClock_UnknownPropertyError = -66816 };

enum { kCAFLinearPCMFormatFlagIsFloat = 1 };

enum { kCAFLinearPCMFormatFlagIsLittleEndian = 2 };

enum { kCAFMarkerChunkHdrSize = 8 };

enum { kCAFMarkerType_EditDestinationBegin = 1684170087 };

enum { kCAFMarkerType_EditDestinationEnd = 1684368996 };

enum { kCAFMarkerType_EditSourceBegin = 1667392871 };

enum { kCAFMarkerType_EditSourceEnd = 1667591780 };

enum { kCAFMarkerType_Generic = 0 };

enum { kCAFMarkerType_Index = 1768842360 };

enum { kCAFMarkerType_ProgramEnd = 1885695588 };

enum { kCAFMarkerType_ProgramStart = 1885496679 };

enum { kCAFMarkerType_RegionEnd = 1919250020 };

enum { kCAFMarkerType_RegionStart = 1919051111 };

enum { kCAFMarkerType_RegionSyncPoint = 1920170339 };

enum { kCAFMarkerType_ReleaseLoopEnd = 1919706478 };

enum { kCAFMarkerType_ReleaseLoopStart = 1919705703 };

enum { kCAFMarkerType_SavedPlayPosition = 1936747641 };

enum { kCAFMarkerType_SelectionEnd = 1936027236 };

enum { kCAFMarkerType_SelectionStart = 1935828327 };

enum { kCAFMarkerType_SustainLoopEnd = 1936483694 };

enum { kCAFMarkerType_SustainLoopStart = 1936482919 };

enum { kCAFMarkerType_TrackEnd = 1952804452 };

enum { kCAFMarkerType_TrackStart = 1952605543 };

enum { kCAFRegionChunkHdrSize = 8 };

enum { kCAFRegionFlag_LoopEnable = 1 };

enum { kCAFRegionFlag_PlayBackward = 4 };

enum { kCAFRegionFlag_PlayForward = 2 };

enum { kCAF_AudioDataChunkID = 1684108385 };

enum { kCAF_ChannelLayoutChunkID = 1667785070 };

enum { kCAF_EditCommentsChunkID = 1701077876 };

enum { kCAF_FileType = 1667327590 };

enum { kCAF_FileVersion_Initial = 1 };

enum { kCAF_FillerChunkID = 1718773093 };

enum { kCAF_InfoStringsChunkID = 1768842863 };

enum { kCAF_InstrumentChunkID = 1768846196 };

enum { kCAF_MIDIChunkID = 1835623529 };

enum { kCAF_MagicCookieID = 1802857321 };

enum { kCAF_MarkerChunkID = 1835102827 };

enum { kCAF_OverviewChunkID = 1870034551 };

enum { kCAF_PacketTableChunkID = 1885432692 };

enum { kCAF_PeakChunkID = 1885692267 };

enum { kCAF_RegionChunkID = 1919248238 };

enum { kCAF_SMPTE_TimeType24 = 1 };

enum { kCAF_SMPTE_TimeType25 = 2 };

enum { kCAF_SMPTE_TimeType2997 = 5 };

enum { kCAF_SMPTE_TimeType2997Drop = 6 };

enum { kCAF_SMPTE_TimeType30 = 4 };

enum { kCAF_SMPTE_TimeType30Drop = 3 };

enum { kCAF_SMPTE_TimeType5994 = 8 };

enum { kCAF_SMPTE_TimeType60 = 7 };

enum { kCAF_SMPTE_TimeTypeNone = 0 };

enum { kCAF_StreamDescriptionChunkID = 1684370275 };

enum { kCAF_StringsChunkID = 1937011303 };

enum { kCAF_UMIDChunkID = 1970104676 };

enum { kCAF_UUIDChunkID = 1970628964 };

enum { kConverterPrimeMethod_None = 2 };

enum { kConverterPrimeMethod_Normal = 1 };

enum { kConverterPrimeMethod_Pre = 0 };

enum { kExtAudioFileError_AsyncWriteBufferOverflow = -66570 };

enum { kExtAudioFileError_AsyncWriteTooLarge = -66569 };

enum { kExtAudioFileError_InvalidChannelMap = -66564 };

enum { kExtAudioFileError_InvalidDataFormat = -66566 };

enum { kExtAudioFileError_InvalidOperationOrder = -66565 };

enum { kExtAudioFileError_InvalidProperty = -66561 };

enum { kExtAudioFileError_InvalidPropertySize = -66562 };

enum { kExtAudioFileError_InvalidSeek = -66568 };

enum { kExtAudioFileError_MaxPacketSizeUnknown = -66567 };

enum { kExtAudioFileError_NonPCMClientFormat = -66563 };

enum { kExtAudioFileProperty_AudioConverter = 1633906294 };

enum { kExtAudioFileProperty_ClientChannelLayout = 1667460207 };

enum { kExtAudioFileProperty_ClientDataFormat = 1667657076 };

enum { kExtAudioFileProperty_ClientMaxPacketSize = 1668116595 };

enum { kExtAudioFileProperty_ConverterConfig = 1633903462 };

enum { kExtAudioFileProperty_FileChannelLayout = 1717791855 };

enum { kExtAudioFileProperty_FileDataFormat = 1717988724 };

enum { kExtAudioFileProperty_FileLengthFrames = 593916525 };

enum { kExtAudioFileProperty_FileMaxPacketSize = 1718448243 };

enum { kExtAudioFileProperty_IOBuffer = 1768907366 };

enum { kExtAudioFileProperty_IOBufferSizeBytes = 1768907379 };

enum { kMusicEventType_AUPreset = 10 };

enum { kMusicEventType_ExtendedControl = 2 };

enum { kMusicEventType_ExtendedNote = 1 };

enum { kMusicEventType_ExtendedTempo = 3 };

enum { kMusicEventType_Last = 11 };

enum { kMusicEventType_MIDIChannelMessage = 7 };

enum { kMusicEventType_MIDINoteMessage = 6 };

enum { kMusicEventType_MIDIRawData = 8 };

enum { kMusicEventType_Meta = 5 };

enum { kMusicEventType_NULL = 0 };

enum { kMusicEventType_Parameter = 9 };

enum { kMusicEventType_User = 4 };

enum { kMusicSequenceLoadSMF_ChannelsToTracks = 1 };

#define kMusicTimeStamp_EndOfTrack 1000000000.0

enum { kPanningMode_SoundField = 3 };

enum { kPanningMode_VectorBasedPanning = 4 };

enum { kSequenceTrackProperty_AutomatedParameters = 4 };

enum { kSequenceTrackProperty_LoopInfo = 0 };

enum { kSequenceTrackProperty_MuteStatus = 2 };

enum { kSequenceTrackProperty_OffsetTime = 1 };

enum { kSequenceTrackProperty_SoloStatus = 3 };

enum { kSequenceTrackProperty_TrackLength = 5 };

// function 'AUGraphClearConnections'
long AUGraphClearConnections(struct OpaqueAUGraph *inGraph);

// function 'AUGraphClose'
long AUGraphClose(struct OpaqueAUGraph *inGraph);

// function 'AUGraphConnectNodeInput'
long AUGraphConnectNodeInput(struct OpaqueAUGraph *inGraph, long inSourceNode, unsigned long inSourceOutputNumber, long inDestNode, unsigned long inDestInputNumber);

// function 'AUGraphCountNodeConnections'
long AUGraphCountNodeConnections(struct OpaqueAUGraph *inGraph, long inNode, unsigned int *outNumConnections);

// function 'AUGraphDisconnectNodeInput'
long AUGraphDisconnectNodeInput(struct OpaqueAUGraph *inGraph, long inDestNode, unsigned long inDestInputNumber);

// function 'AUGraphGetCPULoad'
long AUGraphGetCPULoad(struct OpaqueAUGraph *inGraph, float *outAverageCPULoad);

// function 'AUGraphGetConnectionInfo'
long AUGraphGetConnectionInfo(struct OpaqueAUGraph *inGraph, unsigned long inConnectionIndex, int *outSourceNode, unsigned int *outSourceOutputNumber, int *outDestNode, unsigned int *outDestInputNumber);

// function 'AUGraphGetIndNode'
long AUGraphGetIndNode(struct OpaqueAUGraph *inGraph, unsigned long inIndex, int *outNode);

// function 'AUGraphGetMaxCPULoad'
long AUGraphGetMaxCPULoad(struct OpaqueAUGraph *inGraph, float *outMaxLoad);

// function 'AUGraphGetNodeConnections'
long AUGraphGetNodeConnections(struct OpaqueAUGraph *inGraph, long inNode, struct AudioUnitNodeConnection *outConnections, unsigned int *ioNumConnections);

// function 'AUGraphGetNodeCount'
long AUGraphGetNodeCount(struct OpaqueAUGraph *inGraph, unsigned int *outNumberOfNodes);

// function 'AUGraphGetNodeInfo'
long AUGraphGetNodeInfo(struct OpaqueAUGraph *inGraph, long inNode, struct ComponentDescription *outDescription, unsigned int *outClassDataSize, void **outClassData, struct ComponentInstanceRecord **outAudioUnit);

// function 'AUGraphGetNodeInfoSubGraph'
long AUGraphGetNodeInfoSubGraph(const struct OpaqueAUGraph* inGraph, long inNode, struct OpaqueAUGraph **outSubGraph);

// function 'AUGraphGetNumberOfConnections'
long AUGraphGetNumberOfConnections(struct OpaqueAUGraph *inGraph, unsigned int *outNumConnections);

// function 'AUGraphInitialize'
long AUGraphInitialize(struct OpaqueAUGraph *inGraph);

// function 'AUGraphIsInitialized'
long AUGraphIsInitialized(struct OpaqueAUGraph *inGraph, Boolean* outIsInitialized);

// function 'AUGraphIsNodeSubGraph'
long AUGraphIsNodeSubGraph(const struct OpaqueAUGraph* inGraph, long inNode, Boolean* outFlag);

// function 'AUGraphIsOpen'
long AUGraphIsOpen(struct OpaqueAUGraph *inGraph, Boolean* outIsOpen);

// function 'AUGraphIsRunning'
long AUGraphIsRunning(struct OpaqueAUGraph *inGraph, Boolean* outIsRunning);

// function 'AUGraphNewNode'
long AUGraphNewNode(struct OpaqueAUGraph *inGraph, const struct ComponentDescription* inDescription, unsigned long inClassDataSize, const void* inClassData, int *outNode);

// function 'AUGraphNewNodeSubGraph'
long AUGraphNewNodeSubGraph(struct OpaqueAUGraph *inGraph, int *outNode);

// function 'AUGraphOpen'
long AUGraphOpen(struct OpaqueAUGraph *inGraph);

// function 'AUGraphRemoveNode'
long AUGraphRemoveNode(struct OpaqueAUGraph *inGraph, long inNode);

// function 'AUGraphStart'
long AUGraphStart(struct OpaqueAUGraph *inGraph);

// function 'AUGraphStop'
long AUGraphStop(struct OpaqueAUGraph *inGraph);

// function 'AUGraphUninitialize'
long AUGraphUninitialize(struct OpaqueAUGraph *inGraph);

// function 'AUGraphUpdate'
long AUGraphUpdate(struct OpaqueAUGraph *inGraph, Boolean* outIsUpdated);

// function 'AUListenerAddParameter'
long AUListenerAddParameter(struct AUListenerBase *inListener, void *inObject, const struct AudioUnitParameter* inParameter);

// function 'AUListenerDispose'
long AUListenerDispose(struct AUListenerBase *inListener);

// function 'AUListenerRemoveParameter'
long AUListenerRemoveParameter(struct AUListenerBase *inListener, void *inObject, const struct AudioUnitParameter* inParameter);

// function 'AUMIDIControllerConnectSource'
long AUMIDIControllerConnectSource(struct OpaqueAUMIDIController *inController, struct OpaqueMIDIEndpoint *inSource);

// function 'AUMIDIControllerCreate'
long AUMIDIControllerCreate(struct __CFString *inVirtualDestinationName, struct OpaqueAUMIDIController **outController);

// function 'AUMIDIControllerDisconnectSource'
long AUMIDIControllerDisconnectSource(struct OpaqueAUMIDIController *inController, struct OpaqueMIDIEndpoint *inSource);

// function 'AUMIDIControllerDispose'
long AUMIDIControllerDispose(struct OpaqueAUMIDIController *inController);

// function 'AUMIDIControllerExportXMLNames'
long AUMIDIControllerExportXMLNames(struct OpaqueAUMIDIController *inController, struct __CFURL **outXMLFileURL);

// function 'AUMIDIControllerMapEventToParameter'
long AUMIDIControllerMapEventToParameter(struct OpaqueAUMIDIController *inController, unsigned char inMIDIStatusByte, unsigned short inMIDIControl, const struct AudioUnitParameter* inParameter);

// function 'AUParameterFormatValue'
char* AUParameterFormatValue(double inParameterValue, const struct AudioUnitParameter* inParameter, char* inTextBuffer, unsigned long inDigits);

// function 'AUParameterListenerNotify'
long AUParameterListenerNotify(struct AUListenerBase *inSendingListener, void *inSendingObject, const struct AudioUnitParameter* inParameter);

// function 'AUParameterSet'
long AUParameterSet(struct AUListenerBase *inSendingListener, void *inSendingObject, const struct AudioUnitParameter* inParameter, float inValue, unsigned long inBufferOffsetInFrames);

// function 'AUParameterValueFromLinear'
float AUParameterValueFromLinear(float inLinearValue, const struct AudioUnitParameter* inParameter);

// function 'AUParameterValueToLinear'
float AUParameterValueToLinear(float inParameterValue, const struct AudioUnitParameter* inParameter);

// function 'AudioConverterConvertBuffer'
long AudioConverterConvertBuffer(struct OpaqueAudioConverter *inAudioConverter, unsigned long inInputDataSize, const void* inInputData, unsigned int *ioOutputDataSize, void *outOutputData);

// function 'AudioConverterDispose'
long AudioConverterDispose(struct OpaqueAudioConverter *inAudioConverter);

// function 'AudioConverterGetProperty'
long AudioConverterGetProperty(struct OpaqueAudioConverter *inAudioConverter, unsigned long inPropertyID, unsigned int *ioPropertyDataSize, void *outPropertyData);

// function 'AudioConverterGetPropertyInfo'
long AudioConverterGetPropertyInfo(struct OpaqueAudioConverter *inAudioConverter, unsigned long inPropertyID, unsigned int *outSize, Boolean* outWritable);

// function 'AudioConverterNew'
long AudioConverterNew(const struct AudioStreamBasicDescription* inSourceFormat, const struct AudioStreamBasicDescription* inDestinationFormat, struct OpaqueAudioConverter **outAudioConverter);

// function 'AudioConverterNewSpecific'
long AudioConverterNewSpecific(const struct AudioStreamBasicDescription* inSourceFormat, const struct AudioStreamBasicDescription* inDestinationFormat, unsigned long inNumberClassDescriptions, struct AudioClassDescription *inClassDescriptions, struct OpaqueAudioConverter **outAudioConverter);

// function 'AudioConverterReset'
long AudioConverterReset(struct OpaqueAudioConverter *inAudioConverter);

// function 'AudioConverterSetProperty'
long AudioConverterSetProperty(struct OpaqueAudioConverter *inAudioConverter, unsigned long inPropertyID, unsigned long inPropertyDataSize, const void* inPropertyData);

// function 'AudioFileClose'
long AudioFileClose(struct OpaqueAudioFileID *inAudioFile);

// function 'AudioFileCountUserData'
long AudioFileCountUserData(struct OpaqueAudioFileID *inAudioFile, unsigned long inUserDataID, unsigned int *outNumberItems);

// function 'AudioFileGetGlobalInfo'
long AudioFileGetGlobalInfo(unsigned long inPropertyID, unsigned long inSpecifierSize, void *inSpecifier, unsigned int *ioDataSize, void *outPropertyData);

// function 'AudioFileGetGlobalInfoSize'
long AudioFileGetGlobalInfoSize(unsigned long inPropertyID, unsigned long inSpecifierSize, void *inSpecifier, unsigned int *outDataSize);

// function 'AudioFileGetProperty'
long AudioFileGetProperty(struct OpaqueAudioFileID *inAudioFile, unsigned long inPropertyID, unsigned int *ioDataSize, void *outPropertyData);

// function 'AudioFileGetPropertyInfo'
long AudioFileGetPropertyInfo(struct OpaqueAudioFileID *inAudioFile, unsigned long inPropertyID, unsigned int *outDataSize, unsigned int *isWritable);

// function 'AudioFileGetUserData'
long AudioFileGetUserData(struct OpaqueAudioFileID *inAudioFile, unsigned long inUserDataID, unsigned long inIndex, unsigned int *ioUserDataSize, void *outUserData);

// function 'AudioFileGetUserDataSize'
long AudioFileGetUserDataSize(struct OpaqueAudioFileID *inAudioFile, unsigned long inUserDataID, unsigned long inIndex, unsigned int *outUserDataSize);

// function 'AudioFileOptimize'
long AudioFileOptimize(struct OpaqueAudioFileID *inAudioFile);

// function 'AudioFileReadBytes'
long AudioFileReadBytes(struct OpaqueAudioFileID *inAudioFile, Boolean inUseCache, long long inStartingByte, unsigned int *ioNumBytes, void *outBuffer);

// function 'AudioFileReadPackets'
long AudioFileReadPackets(struct OpaqueAudioFileID *inAudioFile, Boolean inUseCache, unsigned int *outNumBytes, struct AudioStreamPacketDescription *outPacketDescriptions, long long inStartingPacket, unsigned int *ioNumPackets, void *outBuffer);

// function 'AudioFileSetProperty'
long AudioFileSetProperty(struct OpaqueAudioFileID *inAudioFile, unsigned long inPropertyID, unsigned long inDataSize, const void* inPropertyData);

// function 'AudioFileSetUserData'
long AudioFileSetUserData(struct OpaqueAudioFileID *inAudioFile, unsigned long inUserDataID, unsigned long inIndex, unsigned long inUserDataSize, const void* inUserData);

// function 'AudioFileWriteBytes'
long AudioFileWriteBytes(struct OpaqueAudioFileID *inAudioFile, Boolean inUseCache, long long inStartingByte, unsigned int *ioNumBytes, const void* inBuffer);

// function 'AudioFileWritePackets'
long AudioFileWritePackets(struct OpaqueAudioFileID *inAudioFile, Boolean inUseCache, unsigned long inNumBytes, struct AudioStreamPacketDescription *inPacketDescriptions, long long inStartingPacket, unsigned int *ioNumPackets, const void* inBuffer);

// function 'AudioFormatGetProperty'
long AudioFormatGetProperty(unsigned long inPropertyID, unsigned long inSpecifierSize, const void* inSpecifier, unsigned int *ioPropertyDataSize, void *outPropertyData);

// function 'AudioFormatGetPropertyInfo'
long AudioFormatGetPropertyInfo(unsigned long inPropertyID, unsigned long inSpecifierSize, const void* inSpecifier, unsigned int *outPropertyDataSize);

// function 'CAClockArm'
long CAClockArm(struct OpaqueCAClock *inCAClock);

// function 'CAClockBarBeatTimeToBeats'
long CAClockBarBeatTimeToBeats(struct OpaqueCAClock *inCAClock, const struct CABarBeatTime* inBarBeatTime, double *outBeats);

// function 'CAClockBeatsToBarBeatTime'
long CAClockBeatsToBarBeatTime(struct OpaqueCAClock *inCAClock, double inBeats, unsigned short inSubbeatDivisor, struct CABarBeatTime *outBarBeatTime);

// function 'CAClockDisarm'
long CAClockDisarm(struct OpaqueCAClock *inCAClock);

// function 'CAClockDispose'
long CAClockDispose(struct OpaqueCAClock *inCAClock);

// function 'CAClockGetPlayRate'
long CAClockGetPlayRate(struct OpaqueCAClock *inCAClock, double *outPlayRate);

// function 'CAClockGetProperty'
long CAClockGetProperty(struct OpaqueCAClock *inCAClock, unsigned long inPropertyID, unsigned int *ioPropertyDataSize, void *outPropertyData);

// function 'CAClockGetPropertyInfo'
long CAClockGetPropertyInfo(struct OpaqueCAClock *inCAClock, unsigned long inPropertyID, unsigned int *outSize, Boolean* outWritable);

// function 'CAClockNew'
long CAClockNew(unsigned long inReservedFlags, struct OpaqueCAClock **outCAClock);

// function 'CAClockSMPTETimeToSeconds'
long CAClockSMPTETimeToSeconds(struct OpaqueCAClock *inCAClock, const struct SMPTETime* inSMPTETime, double *outSeconds);

// function 'CAClockSecondsToSMPTETime'
long CAClockSecondsToSMPTETime(struct OpaqueCAClock *inCAClock, double inSeconds, unsigned short inSubframeDivisor, struct SMPTETime *outSMPTETime);

// function 'CAClockSetPlayRate'
long CAClockSetPlayRate(struct OpaqueCAClock *inCAClock, double inPlayRate);

// function 'CAClockSetProperty'
long CAClockSetProperty(struct OpaqueCAClock *inCAClock, unsigned long inPropertyID, unsigned long inPropertyDataSize, const void* inPropertyData);

// function 'CAClockStart'
long CAClockStart(struct OpaqueCAClock *inCAClock);

// function 'CAClockStop'
long CAClockStop(struct OpaqueCAClock *inCAClock);

// function 'CAShow'
void CAShow(void *inObject);

// function 'DisposeAUGraph'
long DisposeAUGraph(struct OpaqueAUGraph *inGraph);

// function 'DisposeMusicEventIterator'
long DisposeMusicEventIterator(struct OpaqueMusicEventIterator *inIterator);

// function 'DisposeMusicPlayer'
long DisposeMusicPlayer(struct OpaqueMusicPlayer *inPlayer);

// function 'DisposeMusicSequence'
long DisposeMusicSequence(struct OpaqueMusicSequence *inSequence);

// function 'ExtAudioFileDispose'
long ExtAudioFileDispose(struct OpaqueExtAudioFile *inExtAudioFile);

// function 'ExtAudioFileGetProperty'
long ExtAudioFileGetProperty(struct OpaqueExtAudioFile *inExtAudioFile, unsigned long inPropertyID, unsigned int *ioPropertyDataSize, void *outPropertyData);

// function 'ExtAudioFileGetPropertyInfo'
long ExtAudioFileGetPropertyInfo(struct OpaqueExtAudioFile *inExtAudioFile, unsigned long inPropertyID, unsigned int *outSize, Boolean* outWritable);

// function 'ExtAudioFileSeek'
long ExtAudioFileSeek(struct OpaqueExtAudioFile *inExtAudioFile, long long inFrameOffset);

// function 'ExtAudioFileSetProperty'
long ExtAudioFileSetProperty(struct OpaqueExtAudioFile *inExtAudioFile, unsigned long inPropertyID, unsigned long inPropertyDataSize, const void* inPropertyData);

// function 'ExtAudioFileTell'
long ExtAudioFileTell(struct OpaqueExtAudioFile *inExtAudioFile, long long *outFrameOffset);

// function 'ExtAudioFileWrapAudioFileID'
long ExtAudioFileWrapAudioFileID(struct OpaqueAudioFileID *inFileID, Boolean inForWriting, struct OpaqueExtAudioFile **outExtAudioFile);

// function 'MusicEventIteratorDeleteEvent'
long MusicEventIteratorDeleteEvent(struct OpaqueMusicEventIterator *inIterator);

// function 'MusicEventIteratorGetEventInfo'
long MusicEventIteratorGetEventInfo(struct OpaqueMusicEventIterator *inIterator, double *outTimeStamp, unsigned int *outEventType, const void** outEventData, unsigned int *outEventDataSize);

// function 'MusicEventIteratorHasCurrentEvent'
long MusicEventIteratorHasCurrentEvent(struct OpaqueMusicEventIterator *inIterator, Boolean* outHasCurEvent);

// function 'MusicEventIteratorHasNextEvent'
long MusicEventIteratorHasNextEvent(struct OpaqueMusicEventIterator *inIterator, Boolean* outHasNextEvent);

// function 'MusicEventIteratorHasPreviousEvent'
long MusicEventIteratorHasPreviousEvent(struct OpaqueMusicEventIterator *inIterator, Boolean* outHasPrevEvent);

// function 'MusicEventIteratorNextEvent'
long MusicEventIteratorNextEvent(struct OpaqueMusicEventIterator *inIterator);

// function 'MusicEventIteratorPreviousEvent'
long MusicEventIteratorPreviousEvent(struct OpaqueMusicEventIterator *inIterator);

// function 'MusicEventIteratorSeek'
long MusicEventIteratorSeek(struct OpaqueMusicEventIterator *inIterator, double inTimeStamp);

// function 'MusicEventIteratorSetEventInfo'
long MusicEventIteratorSetEventInfo(struct OpaqueMusicEventIterator *inIterator, unsigned long inEventType, const void* inEventData);

// function 'MusicEventIteratorSetEventTime'
long MusicEventIteratorSetEventTime(struct OpaqueMusicEventIterator *inIterator, double inTimeStamp);

// function 'MusicPlayerGetBeatsForHostTime'
long MusicPlayerGetBeatsForHostTime(struct OpaqueMusicPlayer *inPlayer, unsigned long long inHostTime, double *outBeats);

// function 'MusicPlayerGetHostTimeForBeats'
long MusicPlayerGetHostTimeForBeats(struct OpaqueMusicPlayer *inPlayer, double inBeats, unsigned long long *outHostTime);

// function 'MusicPlayerGetPlayRateScalar'
long MusicPlayerGetPlayRateScalar(struct OpaqueMusicPlayer *inPlayer, double *outScaleRate);

// function 'MusicPlayerGetSequence'
long MusicPlayerGetSequence(struct OpaqueMusicPlayer *inPlayer, struct OpaqueMusicSequence **outSequence);

// function 'MusicPlayerGetTime'
long MusicPlayerGetTime(struct OpaqueMusicPlayer *inPlayer, double *outTime);

// function 'MusicPlayerIsPlaying'
long MusicPlayerIsPlaying(struct OpaqueMusicPlayer *inPlayer, Boolean* outIsPlaying);

// function 'MusicPlayerPreroll'
long MusicPlayerPreroll(struct OpaqueMusicPlayer *inPlayer);

// function 'MusicPlayerSetPlayRateScalar'
long MusicPlayerSetPlayRateScalar(struct OpaqueMusicPlayer *inPlayer, double inScaleRate);

// function 'MusicPlayerSetSequence'
long MusicPlayerSetSequence(struct OpaqueMusicPlayer *inPlayer, struct OpaqueMusicSequence *inSequence);

// function 'MusicPlayerSetTime'
long MusicPlayerSetTime(struct OpaqueMusicPlayer *inPlayer, double inTime);

// function 'MusicPlayerStart'
long MusicPlayerStart(struct OpaqueMusicPlayer *inPlayer);

// function 'MusicPlayerStop'
long MusicPlayerStop(struct OpaqueMusicPlayer *inPlayer);

// function 'MusicSequenceDisposeTrack'
long MusicSequenceDisposeTrack(struct OpaqueMusicSequence *inSequence, struct OpaqueMusicTrack *inTrack);

// function 'MusicSequenceGetAUGraph'
long MusicSequenceGetAUGraph(struct OpaqueMusicSequence *inSequence, struct OpaqueAUGraph **outGraph);

// function 'MusicSequenceGetBeatsForSeconds'
long MusicSequenceGetBeatsForSeconds(struct OpaqueMusicSequence *inSequence, double inSeconds, double *outBeats);

// function 'MusicSequenceGetIndTrack'
long MusicSequenceGetIndTrack(struct OpaqueMusicSequence *inSequence, unsigned long inTrackIndex, struct OpaqueMusicTrack **outTrack);

// function 'MusicSequenceGetSecondsForBeats'
long MusicSequenceGetSecondsForBeats(struct OpaqueMusicSequence *inSequence, double inBeats, double *outSeconds);

// function 'MusicSequenceGetTempoTrack'
long MusicSequenceGetTempoTrack(struct OpaqueMusicSequence *inSequence, struct OpaqueMusicTrack **outTrack);

// function 'MusicSequenceGetTrackCount'
long MusicSequenceGetTrackCount(struct OpaqueMusicSequence *inSequence, unsigned int *outNumberOfTracks);

// function 'MusicSequenceGetTrackIndex'
long MusicSequenceGetTrackIndex(struct OpaqueMusicSequence *inSequence, struct OpaqueMusicTrack *inTrack, unsigned int *outTrackIndex);

// function 'MusicSequenceLoadSMFData'
long MusicSequenceLoadSMFData(struct OpaqueMusicSequence *inSequence, struct __CFData *inData);

// function 'MusicSequenceLoadSMFDataWithFlags'
long MusicSequenceLoadSMFDataWithFlags(struct OpaqueMusicSequence *inSequence, struct __CFData *inData, unsigned long inFlags);

// function 'MusicSequenceNewTrack'
long MusicSequenceNewTrack(struct OpaqueMusicSequence *inSequence, struct OpaqueMusicTrack **outTrack);

// function 'MusicSequenceReverse'
long MusicSequenceReverse(struct OpaqueMusicSequence *inSequence);

// function 'MusicSequenceSaveSMFData'
long MusicSequenceSaveSMFData(struct OpaqueMusicSequence *inSequence, struct __CFData **outData, unsigned short inResolution);

// function 'MusicSequenceSetAUGraph'
long MusicSequenceSetAUGraph(struct OpaqueMusicSequence *inSequence, struct OpaqueAUGraph *inGraph);

// function 'MusicSequenceSetMIDIEndpoint'
long MusicSequenceSetMIDIEndpoint(struct OpaqueMusicSequence *inSequence, struct OpaqueMIDIEndpoint *inEndpoint);

// function 'MusicTrackClear'
long MusicTrackClear(struct OpaqueMusicTrack *inTrack, double inStartTime, double inEndTime);

// function 'MusicTrackCopyInsert'
long MusicTrackCopyInsert(struct OpaqueMusicTrack *inSourceTrack, double inSourceStartTime, double inSourceEndTime, struct OpaqueMusicTrack *inDestTrack, double inDestInsertTime);

// function 'MusicTrackCut'
long MusicTrackCut(struct OpaqueMusicTrack *inTrack, double inStartTime, double inEndTime);

// function 'MusicTrackGetDestMIDIEndpoint'
long MusicTrackGetDestMIDIEndpoint(struct OpaqueMusicTrack *inTrack, struct OpaqueMIDIEndpoint **outEndpoint);

// function 'MusicTrackGetDestNode'
long MusicTrackGetDestNode(struct OpaqueMusicTrack *inTrack, int *outNode);

// function 'MusicTrackGetProperty'
long MusicTrackGetProperty(struct OpaqueMusicTrack *inTrack, unsigned long inPropertyID, void *outData, unsigned int *ioLength);

// function 'MusicTrackGetSequence'
long MusicTrackGetSequence(struct OpaqueMusicTrack *inTrack, struct OpaqueMusicSequence **outSequence);

// function 'MusicTrackMerge'
long MusicTrackMerge(struct OpaqueMusicTrack *inSourceTrack, double inSourceStartTime, double inSourceEndTime, struct OpaqueMusicTrack *inDestTrack, double inDestInsertTime);

// function 'MusicTrackMoveEvents'
long MusicTrackMoveEvents(struct OpaqueMusicTrack *inTrack, double inStartTime, double inEndTime, double inMoveTime);

// function 'MusicTrackNewAUPresetEvent'
long MusicTrackNewAUPresetEvent(struct OpaqueMusicTrack *inTrack, double inTimeStamp, const struct AUPresetEvent* inPresetEvent);

// function 'MusicTrackNewExtendedControlEvent'
long MusicTrackNewExtendedControlEvent(struct OpaqueMusicTrack *inTrack, double inTimeStamp, const struct ExtendedControlEvent* inInfo);

// function 'MusicTrackNewExtendedTempoEvent'
long MusicTrackNewExtendedTempoEvent(struct OpaqueMusicTrack *inTrack, double inTimeStamp, double inBPM);

// function 'MusicTrackNewMIDIChannelEvent'
long MusicTrackNewMIDIChannelEvent(struct OpaqueMusicTrack *inTrack, double inTimeStamp, const struct MIDIChannelMessage* inMessage);

// function 'MusicTrackNewMIDINoteEvent'
long MusicTrackNewMIDINoteEvent(struct OpaqueMusicTrack *inTrack, double inTimeStamp, const struct MIDINoteMessage* inMessage);

// function 'MusicTrackNewParameterEvent'
long MusicTrackNewParameterEvent(struct OpaqueMusicTrack *inTrack, double inTimeStamp, const struct ParameterEvent* inInfo);

// function 'MusicTrackSetDestMIDIEndpoint'
long MusicTrackSetDestMIDIEndpoint(struct OpaqueMusicTrack *inTrack, struct OpaqueMIDIEndpoint *inEndpoint);

// function 'MusicTrackSetDestNode'
long MusicTrackSetDestNode(struct OpaqueMusicTrack *inTrack, long inNode);

// function 'MusicTrackSetProperty'
long MusicTrackSetProperty(struct OpaqueMusicTrack *inTrack, unsigned long inPropertyID, void *inData, unsigned long inLength);

// function 'NewAUGraph'
long NewAUGraph(struct OpaqueAUGraph **outGraph);

// function 'NewMusicEventIterator'
long NewMusicEventIterator(struct OpaqueMusicTrack *inTrack, struct OpaqueMusicEventIterator **outIterator);

// function 'NewMusicPlayer'
long NewMusicPlayer(struct OpaqueMusicPlayer **outPlayer);

// function 'NewMusicSequence'
long NewMusicSequence(struct OpaqueMusicSequence **outSequence);

// function 'NewMusicTrackFrom'
long NewMusicTrackFrom(struct OpaqueMusicTrack *inSourceTrack, double inSourceStartTime, double inSourceEndTime, struct OpaqueMusicTrack **outNewTrack);

// function 'OpenDefaultAudioOutput'
long OpenDefaultAudioOutput(struct ComponentInstanceRecord **outUnit);

// function 'OpenSystemSoundAudioOutput'
long OpenSystemSoundAudioOutput(struct ComponentInstanceRecord **outUnit);


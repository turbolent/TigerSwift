// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// opaque 'SEL'
typedef struct objc_selector *SEL;

// struct 'objc_ivar'
struct objc_ivar {
    char *ivar_name;
    char *ivar_type;
    int ivar_offset;
};

// struct 'objc_super'
struct objc_super {
    id receiver;
    Class class;
};

// struct 'objc_module'
struct objc_module {
    unsigned long version;
    unsigned long size;
    char *name;
    struct objc_symtab *symtab;
};

// struct 'objc_class'
struct objc_class {
    Class isa;
    Class super_class;
    char *name;
    long version;
    long info;
    long instance_size;
    struct objc_ivar_list *ivars;
    struct objc_method_list **methodLists;
    struct objc_cache *cache;
    struct objc_protocol_list *protocols;
};

// struct 'objc_object'
struct objc_object {
    Class isa;
};

// struct 'objc_category'
struct objc_category {
    char *category_name;
    char *class_name;
    struct objc_method_list *instance_methods;
    struct objc_method_list *class_methods;
    struct objc_protocol_list *protocols;
};

enum { ARITH_SHIFT = 16 };

enum { CLS_CLASS = 1 };

enum { CLS_FLUSH_CACHE = 32 };

enum { CLS_FROM_BUNDLE = 4096 };

enum { CLS_GROW_CACHE = 64 };

enum { CLS_HAS_CXX_STRUCTORS = 8192 };

enum { CLS_INITIALIZED = 4 };

enum { CLS_INITIALIZING = 2048 };

enum { CLS_JAVA_CLASS = 1024 };

enum { CLS_JAVA_HYBRID = 512 };

enum { CLS_MAPPED = 16 };

enum { CLS_META = 2 };

enum { CLS_METHOD_ARRAY = 256 };

enum { CLS_NEED_BIND = 128 };

enum { CLS_NO_METHOD_ARRAY = 16384 };

enum { CLS_POSING = 8 };

enum { NO = 0 };

enum { Nil = 0 };

enum { OBJC_NEXT_METHOD_LIST = 1 };

enum { OBSOLETE_OBJC_GETCLASSES = 1 };

enum { YES = 1 };

enum { marg_prearg_size = 0 };

// function 'class_createInstance'
id class_createInstance(Class p1, unsigned int idxIvars);

// function 'class_createInstanceFromZone'
id class_createInstanceFromZone(Class p1, unsigned int idxIvars, void *z);

// function 'class_getInstanceVariable'
struct objc_ivar *class_getInstanceVariable(Class p1, const char* p2);

// function 'class_getVersion'
int class_getVersion(Class p1);

// function 'class_poseAs'
Class class_poseAs(Class imposter, Class original);

// function 'class_setVersion'
void class_setVersion(Class p1, int p2);

// function 'objc_addClass'
void objc_addClass(Class myClass);

// function 'objc_getClass'
id objc_getClass(const char* name);

// function 'objc_getClassList'
int objc_getClassList(Class *buffer, int bufferLen);

// function 'objc_getClasses'
void *objc_getClasses(void);

// function 'objc_getMetaClass'
id objc_getMetaClass(const char* name);

// function 'objc_getRequiredClass'
id objc_getRequiredClass(const char* name);

// function 'objc_lookUpClass'
id objc_lookUpClass(const char* name);

// function 'objc_msgSendv'
id objc_msgSendv(id self, SEL op, unsigned int arg_size, void *arg_frame);

// function 'objc_msgSendv_stret'
void objc_msgSendv_stret(void *stretAddr, id self, SEL op, unsigned int arg_size, void *arg_frame);

// function 'objc_setMultithreaded'
void objc_setMultithreaded(BOOL flag);

// function 'object_getClassName'
const char* object_getClassName(id obj);

// function 'object_getIndexedIvars'
void *object_getIndexedIvars(id obj);

// function 'object_getInstanceVariable'
struct objc_ivar *object_getInstanceVariable(id p1, const char* name, void **p3);

// function 'object_setInstanceVariable'
struct objc_ivar *object_setInstanceVariable(id p1, const char* name, void *p3);

// function 'sel_getName'
const char* sel_getName(SEL sel);

// function 'sel_getUid'
SEL sel_getUid(const char* str);

// function 'sel_isMapped'
BOOL sel_isMapped(SEL sel);

// function 'sel_registerName'
SEL sel_registerName(const char* str);


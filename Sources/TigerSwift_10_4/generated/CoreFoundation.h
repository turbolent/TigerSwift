// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'CFAllocatorRef'
typedef struct __CFAllocator *CFAllocatorRef;

// CoreFoundation type 'CFArrayRef'
typedef struct __CFArray *CFArrayRef;

// CoreFoundation type 'CFAttributedStringRef'
typedef struct __CFAttributedString *CFAttributedStringRef;

// CoreFoundation type 'CFBagRef'
typedef struct __CFBag *CFBagRef;

// CoreFoundation type 'CFBinaryHeapRef'
typedef struct __CFBinaryHeap *CFBinaryHeapRef;

// CoreFoundation type 'CFBitVectorRef'
typedef struct __CFBitVector *CFBitVectorRef;

// CoreFoundation type 'CFBooleanRef'
typedef struct __CFBoolean *CFBooleanRef;

// CoreFoundation type 'CFBundleRef'
typedef struct __CFBundle *CFBundleRef;

// CoreFoundation type 'CFCalendarRef'
typedef struct __CFCalendar *CFCalendarRef;

// CoreFoundation type 'CFCharacterSetRef'
typedef struct __CFCharacterSet *CFCharacterSetRef;

// CoreFoundation type 'CFDataRef'
typedef struct __CFData *CFDataRef;

// CoreFoundation type 'CFDateFormatterRef'
typedef struct __CFDateFormatter *CFDateFormatterRef;

// CoreFoundation type 'CFDateRef'
typedef struct __CFDate *CFDateRef;

// CoreFoundation type 'CFDictionaryRef'
typedef struct __CFDictionary *CFDictionaryRef;

// CoreFoundation type 'CFLocaleRef'
typedef struct __CFLocale *CFLocaleRef;

// CoreFoundation type 'CFMachPortRef'
typedef struct __CFMachPort *CFMachPortRef;

// CoreFoundation type 'CFMessagePortRef'
typedef struct __CFMessagePort *CFMessagePortRef;

// CoreFoundation type 'CFMutableArrayRef'
typedef struct __CFArray *CFMutableArrayRef;

// CoreFoundation type 'CFMutableAttributedStringRef'
typedef struct __CFAttributedString *CFMutableAttributedStringRef;

// CoreFoundation type 'CFMutableBagRef'
typedef struct __CFBag *CFMutableBagRef;

// CoreFoundation type 'CFMutableBitVectorRef'
typedef struct __CFBitVector *CFMutableBitVectorRef;

// CoreFoundation type 'CFMutableCharacterSetRef'
typedef struct __CFCharacterSet *CFMutableCharacterSetRef;

// CoreFoundation type 'CFMutableDataRef'
typedef struct __CFData *CFMutableDataRef;

// CoreFoundation type 'CFMutableDictionaryRef'
typedef struct __CFDictionary *CFMutableDictionaryRef;

// CoreFoundation type 'CFMutableSetRef'
typedef struct __CFSet *CFMutableSetRef;

// CoreFoundation type 'CFMutableStringRef'
typedef struct __CFString *CFMutableStringRef;

// CoreFoundation type 'CFNotificationCenterRef'
typedef struct __CFNotificationCenter *CFNotificationCenterRef;

// CoreFoundation type 'CFNullRef'
typedef struct __CFNull *CFNullRef;

// CoreFoundation type 'CFNumberFormatterRef'
typedef struct __CFNumberFormatter *CFNumberFormatterRef;

// CoreFoundation type 'CFNumberRef'
typedef struct __CFNumber *CFNumberRef;

// CoreFoundation type 'CFPlugInInstanceRef'
typedef struct __CFPlugInInstance *CFPlugInInstanceRef;

// CoreFoundation type 'CFPlugInRef'
typedef struct __CFBundle *CFPlugInRef;

// CoreFoundation type 'CFReadStreamRef'
typedef struct __CFReadStream *CFReadStreamRef;

// CoreFoundation type 'CFRunLoopObserverRef'
typedef struct __CFRunLoopObserver *CFRunLoopObserverRef;

// CoreFoundation type 'CFRunLoopRef'
typedef struct __CFRunLoop *CFRunLoopRef;

// CoreFoundation type 'CFRunLoopSourceRef'
typedef struct __CFRunLoopSource *CFRunLoopSourceRef;

// CoreFoundation type 'CFRunLoopTimerRef'
typedef struct __CFRunLoopTimer *CFRunLoopTimerRef;

// CoreFoundation type 'CFSetRef'
typedef struct __CFSet *CFSetRef;

// CoreFoundation type 'CFSocketRef'
typedef struct __CFSocket *CFSocketRef;

// CoreFoundation type 'CFStringRef'
typedef struct __CFString *CFStringRef;

// CoreFoundation type 'CFTimeZoneRef'
typedef struct __CFTimeZone *CFTimeZoneRef;

// CoreFoundation type 'CFTreeRef'
typedef struct __CFTree *CFTreeRef;

// CoreFoundation type 'CFTypeRef'
typedef void *CFTypeRef;

// CoreFoundation type 'CFURLRef'
typedef struct __CFURL *CFURLRef;

// CoreFoundation type 'CFUUIDRef'
typedef struct __CFUUID *CFUUIDRef;

// CoreFoundation type 'CFUserNotificationRef'
typedef struct __CFUserNotification *CFUserNotificationRef;

// CoreFoundation type 'CFWriteStreamRef'
typedef struct __CFWriteStream *CFWriteStreamRef;

// CoreFoundation type 'CFXMLNodeRef'
typedef struct __CFXMLNode *CFXMLNodeRef;

// CoreFoundation type 'CFXMLParserRef'
typedef struct __CFXMLParser *CFXMLParserRef;

// struct '_CFXMLExternalID'
struct _CFXMLExternalID {
    struct __CFURL *systemID;
    struct __CFString *publicID;
};

typedef struct _CFXMLExternalID CFXMLExternalID;

// struct '_CFXMLDocumentTypeInfo'
struct _CFXMLDocumentTypeInfo {
    struct _CFXMLExternalID externalID;
};

typedef struct _CFXMLDocumentTypeInfo CFXMLDocumentTypeInfo;

// struct '_CFRange'
struct _CFRange {
    int location;
    int length;
};

typedef struct _CFRange CFRange;

// struct '_CFGregorianUnits'
struct _CFGregorianUnits {
    int years;
    int months;
    int days;
    int hours;
    int minutes;
    double seconds;
};

typedef struct _CFGregorianUnits CFGregorianUnits;

// struct '_CFSocketSignature'
struct _CFSocketSignature {
    int protocolFamily;
    int socketType;
    int protocol;
    struct __CFData *address;
};

typedef struct _CFSocketSignature CFSocketSignature;

// struct '_CFXMLElementTypeDeclarationInfo'
struct _CFXMLElementTypeDeclarationInfo {
    struct __CFString *contentDescription;
};

typedef struct _CFXMLElementTypeDeclarationInfo CFXMLElementTypeDeclarationInfo;

// struct '_CFGregorianDate'
struct _CFGregorianDate {
    int year;
    char month;
    char day;
    char hour;
    char minute;
    double second;
};

typedef struct _CFGregorianDate CFGregorianDate;

// struct '_CFXMLAttributeDeclarationInfo'
struct _CFXMLAttributeDeclarationInfo {
    struct __CFString *attributeName;
    struct __CFString *typeString;
    struct __CFString *defaultString;
};

typedef struct _CFXMLAttributeDeclarationInfo CFXMLAttributeDeclarationInfo;

// struct '_CFXMLAttributeListDeclarationInfo'
struct _CFXMLAttributeListDeclarationInfo {
    int numberOfAttributes;
    struct _CFXMLAttributeDeclarationInfo *attributes;
};

typedef struct _CFXMLAttributeListDeclarationInfo CFXMLAttributeListDeclarationInfo;

// struct '_CFXMLEntityInfo'
struct _CFXMLEntityInfo {
    int entityType;
    struct __CFString *replacementText;
    struct _CFXMLExternalID entityID;
    struct __CFString *notationName;
};

typedef struct _CFXMLEntityInfo CFXMLEntityInfo;

// struct '_CFXMLEntityReferenceInfo'
struct _CFXMLEntityReferenceInfo {
    int entityType;
};

typedef struct _CFXMLEntityReferenceInfo CFXMLEntityReferenceInfo;

// struct '_CFStreamError'
struct _CFStreamError {
    int domain;
    int error;
};

typedef struct _CFStreamError CFStreamError;

// struct '_CFSwappedFloat32'
struct _CFSwappedFloat32 {
    unsigned int v;
};

typedef struct _CFSwappedFloat32 CFSwappedFloat32;

// struct '_CFUUIDBytes'
struct _CFUUIDBytes {
    unsigned char byte0;
    unsigned char byte1;
    unsigned char byte2;
    unsigned char byte3;
    unsigned char byte4;
    unsigned char byte5;
    unsigned char byte6;
    unsigned char byte7;
    unsigned char byte8;
    unsigned char byte9;
    unsigned char byte10;
    unsigned char byte11;
    unsigned char byte12;
    unsigned char byte13;
    unsigned char byte14;
    unsigned char byte15;
};

typedef struct _CFUUIDBytes CFUUIDBytes;

// struct '_CFXMLDocumentInfo'
struct _CFXMLDocumentInfo {
    struct __CFURL *sourceURL;
    unsigned int encoding;
};

typedef struct _CFXMLDocumentInfo CFXMLDocumentInfo;

// struct '_CFSwappedFloat64'
struct _CFSwappedFloat64 {
    unsigned long long v;
};

typedef struct _CFSwappedFloat64 CFSwappedFloat64;

// struct '_CFXMLProcessingInstructionInfo'
struct _CFXMLProcessingInstructionInfo {
    struct __CFString *dataString;
};

typedef struct _CFXMLProcessingInstructionInfo CFXMLProcessingInstructionInfo;

// struct '_CFXMLNotationInfo'
struct _CFXMLNotationInfo {
    struct _CFXMLExternalID externalID;
};

typedef struct _CFXMLNotationInfo CFXMLNotationInfo;

// struct '_REFIID'
struct _REFIID {
    unsigned char byte0;
    unsigned char byte1;
    unsigned char byte2;
    unsigned char byte3;
    unsigned char byte4;
    unsigned char byte5;
    unsigned char byte6;
    unsigned char byte7;
    unsigned char byte8;
    unsigned char byte9;
    unsigned char byte10;
    unsigned char byte11;
    unsigned char byte12;
    unsigned char byte13;
    unsigned char byte14;
    unsigned char byte15;
};

typedef struct _REFIID REFIID;

// getter for constant 'kCFAbsoluteTimeIntervalSince1904'
double _get_kCFAbsoluteTimeIntervalSince1904(void);

// getter for constant 'kCFAbsoluteTimeIntervalSince1970'
double _get_kCFAbsoluteTimeIntervalSince1970(void);

// getter for constant 'kCFAllocatorDefault'
struct __CFAllocator *_get_kCFAllocatorDefault(void);

// getter for constant 'kCFAllocatorMalloc'
struct __CFAllocator *_get_kCFAllocatorMalloc(void);

// getter for constant 'kCFAllocatorMallocZone'
struct __CFAllocator *_get_kCFAllocatorMallocZone(void);

// getter for constant 'kCFAllocatorNull'
struct __CFAllocator *_get_kCFAllocatorNull(void);

// getter for constant 'kCFAllocatorSystemDefault'
struct __CFAllocator *_get_kCFAllocatorSystemDefault(void);

// getter for constant 'kCFAllocatorUseContext'
struct __CFAllocator *_get_kCFAllocatorUseContext(void);

// getter for constant 'kCFBooleanFalse'
struct __CFBoolean *_get_kCFBooleanFalse(void);

// getter for constant 'kCFBooleanTrue'
struct __CFBoolean *_get_kCFBooleanTrue(void);

// getter for constant 'kCFBuddhistCalendar'
struct __CFString *_get_kCFBuddhistCalendar(void);

// getter for constant 'kCFBundleDevelopmentRegionKey'
struct __CFString *_get_kCFBundleDevelopmentRegionKey(void);

// getter for constant 'kCFBundleExecutableKey'
struct __CFString *_get_kCFBundleExecutableKey(void);

// getter for constant 'kCFBundleIdentifierKey'
struct __CFString *_get_kCFBundleIdentifierKey(void);

// getter for constant 'kCFBundleInfoDictionaryVersionKey'
struct __CFString *_get_kCFBundleInfoDictionaryVersionKey(void);

// getter for constant 'kCFBundleLocalizationsKey'
struct __CFString *_get_kCFBundleLocalizationsKey(void);

// getter for constant 'kCFBundleNameKey'
struct __CFString *_get_kCFBundleNameKey(void);

// getter for constant 'kCFBundleVersionKey'
struct __CFString *_get_kCFBundleVersionKey(void);

// getter for constant 'kCFChineseCalendar'
struct __CFString *_get_kCFChineseCalendar(void);

// getter for constant 'kCFCoreFoundationVersionNumber'
double _get_kCFCoreFoundationVersionNumber(void);

// setter for constant 'kCFCoreFoundationVersionNumber'
void _set_kCFCoreFoundationVersionNumber(double value);

// getter for constant 'kCFDateFormatterAMSymbol'
struct __CFString *_get_kCFDateFormatterAMSymbol(void);

// getter for constant 'kCFDateFormatterCalendar'
struct __CFString *_get_kCFDateFormatterCalendar(void);

// getter for constant 'kCFDateFormatterCalendarName'
struct __CFString *_get_kCFDateFormatterCalendarName(void);

// getter for constant 'kCFDateFormatterDefaultDate'
struct __CFString *_get_kCFDateFormatterDefaultDate(void);

// getter for constant 'kCFDateFormatterDefaultFormat'
struct __CFString *_get_kCFDateFormatterDefaultFormat(void);

// getter for constant 'kCFDateFormatterEraSymbols'
struct __CFString *_get_kCFDateFormatterEraSymbols(void);

// getter for constant 'kCFDateFormatterIsLenient'
struct __CFString *_get_kCFDateFormatterIsLenient(void);

// getter for constant 'kCFDateFormatterMonthSymbols'
struct __CFString *_get_kCFDateFormatterMonthSymbols(void);

// getter for constant 'kCFDateFormatterPMSymbol'
struct __CFString *_get_kCFDateFormatterPMSymbol(void);

// getter for constant 'kCFDateFormatterShortMonthSymbols'
struct __CFString *_get_kCFDateFormatterShortMonthSymbols(void);

// getter for constant 'kCFDateFormatterShortWeekdaySymbols'
struct __CFString *_get_kCFDateFormatterShortWeekdaySymbols(void);

// getter for constant 'kCFDateFormatterTimeZone'
struct __CFString *_get_kCFDateFormatterTimeZone(void);

// getter for constant 'kCFDateFormatterTwoDigitStartDate'
struct __CFString *_get_kCFDateFormatterTwoDigitStartDate(void);

// getter for constant 'kCFDateFormatterWeekdaySymbols'
struct __CFString *_get_kCFDateFormatterWeekdaySymbols(void);

// getter for constant 'kCFGregorianCalendar'
struct __CFString *_get_kCFGregorianCalendar(void);

// getter for constant 'kCFHebrewCalendar'
struct __CFString *_get_kCFHebrewCalendar(void);

// getter for constant 'kCFIslamicCalendar'
struct __CFString *_get_kCFIslamicCalendar(void);

// getter for constant 'kCFIslamicCivilCalendar'
struct __CFString *_get_kCFIslamicCivilCalendar(void);

// getter for constant 'kCFJapaneseCalendar'
struct __CFString *_get_kCFJapaneseCalendar(void);

// getter for constant 'kCFLocaleCalendar'
struct __CFString *_get_kCFLocaleCalendar(void);

// getter for constant 'kCFLocaleCalendarIdentifier'
struct __CFString *_get_kCFLocaleCalendarIdentifier(void);

// getter for constant 'kCFLocaleCollationIdentifier'
struct __CFString *_get_kCFLocaleCollationIdentifier(void);

// getter for constant 'kCFLocaleCountryCode'
struct __CFString *_get_kCFLocaleCountryCode(void);

// getter for constant 'kCFLocaleCurrencyCode'
struct __CFString *_get_kCFLocaleCurrencyCode(void);

// getter for constant 'kCFLocaleCurrencySymbol'
struct __CFString *_get_kCFLocaleCurrencySymbol(void);

// getter for constant 'kCFLocaleDecimalSeparator'
struct __CFString *_get_kCFLocaleDecimalSeparator(void);

// getter for constant 'kCFLocaleExemplarCharacterSet'
struct __CFString *_get_kCFLocaleExemplarCharacterSet(void);

// getter for constant 'kCFLocaleGroupingSeparator'
struct __CFString *_get_kCFLocaleGroupingSeparator(void);

// getter for constant 'kCFLocaleIdentifier'
struct __CFString *_get_kCFLocaleIdentifier(void);

// getter for constant 'kCFLocaleLanguageCode'
struct __CFString *_get_kCFLocaleLanguageCode(void);

// getter for constant 'kCFLocaleMeasurementSystem'
struct __CFString *_get_kCFLocaleMeasurementSystem(void);

// getter for constant 'kCFLocaleScriptCode'
struct __CFString *_get_kCFLocaleScriptCode(void);

// getter for constant 'kCFLocaleUsesMetricSystem'
struct __CFString *_get_kCFLocaleUsesMetricSystem(void);

// getter for constant 'kCFLocaleVariantCode'
struct __CFString *_get_kCFLocaleVariantCode(void);

// getter for constant 'kCFNull'
struct __CFNull *_get_kCFNull(void);

// getter for constant 'kCFNumberFormatterAlwaysShowDecimalSeparator'
struct __CFString *_get_kCFNumberFormatterAlwaysShowDecimalSeparator(void);

// getter for constant 'kCFNumberFormatterCurrencyCode'
struct __CFString *_get_kCFNumberFormatterCurrencyCode(void);

// getter for constant 'kCFNumberFormatterCurrencyDecimalSeparator'
struct __CFString *_get_kCFNumberFormatterCurrencyDecimalSeparator(void);

// getter for constant 'kCFNumberFormatterCurrencySymbol'
struct __CFString *_get_kCFNumberFormatterCurrencySymbol(void);

// getter for constant 'kCFNumberFormatterDecimalSeparator'
struct __CFString *_get_kCFNumberFormatterDecimalSeparator(void);

// getter for constant 'kCFNumberFormatterDefaultFormat'
struct __CFString *_get_kCFNumberFormatterDefaultFormat(void);

// getter for constant 'kCFNumberFormatterExponentSymbol'
struct __CFString *_get_kCFNumberFormatterExponentSymbol(void);

// getter for constant 'kCFNumberFormatterFormatWidth'
struct __CFString *_get_kCFNumberFormatterFormatWidth(void);

// getter for constant 'kCFNumberFormatterGroupingSeparator'
struct __CFString *_get_kCFNumberFormatterGroupingSeparator(void);

// getter for constant 'kCFNumberFormatterGroupingSize'
struct __CFString *_get_kCFNumberFormatterGroupingSize(void);

// getter for constant 'kCFNumberFormatterInfinitySymbol'
struct __CFString *_get_kCFNumberFormatterInfinitySymbol(void);

// getter for constant 'kCFNumberFormatterInternationalCurrencySymbol'
struct __CFString *_get_kCFNumberFormatterInternationalCurrencySymbol(void);

// getter for constant 'kCFNumberFormatterMaxFractionDigits'
struct __CFString *_get_kCFNumberFormatterMaxFractionDigits(void);

// getter for constant 'kCFNumberFormatterMaxIntegerDigits'
struct __CFString *_get_kCFNumberFormatterMaxIntegerDigits(void);

// getter for constant 'kCFNumberFormatterMinFractionDigits'
struct __CFString *_get_kCFNumberFormatterMinFractionDigits(void);

// getter for constant 'kCFNumberFormatterMinIntegerDigits'
struct __CFString *_get_kCFNumberFormatterMinIntegerDigits(void);

// getter for constant 'kCFNumberFormatterMinusSign'
struct __CFString *_get_kCFNumberFormatterMinusSign(void);

// getter for constant 'kCFNumberFormatterMultiplier'
struct __CFString *_get_kCFNumberFormatterMultiplier(void);

// getter for constant 'kCFNumberFormatterNaNSymbol'
struct __CFString *_get_kCFNumberFormatterNaNSymbol(void);

// getter for constant 'kCFNumberFormatterNegativePrefix'
struct __CFString *_get_kCFNumberFormatterNegativePrefix(void);

// getter for constant 'kCFNumberFormatterNegativeSuffix'
struct __CFString *_get_kCFNumberFormatterNegativeSuffix(void);

// getter for constant 'kCFNumberFormatterPaddingCharacter'
struct __CFString *_get_kCFNumberFormatterPaddingCharacter(void);

// getter for constant 'kCFNumberFormatterPaddingPosition'
struct __CFString *_get_kCFNumberFormatterPaddingPosition(void);

// getter for constant 'kCFNumberFormatterPerMillSymbol'
struct __CFString *_get_kCFNumberFormatterPerMillSymbol(void);

// getter for constant 'kCFNumberFormatterPercentSymbol'
struct __CFString *_get_kCFNumberFormatterPercentSymbol(void);

// getter for constant 'kCFNumberFormatterPlusSign'
struct __CFString *_get_kCFNumberFormatterPlusSign(void);

// getter for constant 'kCFNumberFormatterPositivePrefix'
struct __CFString *_get_kCFNumberFormatterPositivePrefix(void);

// getter for constant 'kCFNumberFormatterPositiveSuffix'
struct __CFString *_get_kCFNumberFormatterPositiveSuffix(void);

// getter for constant 'kCFNumberFormatterRoundingIncrement'
struct __CFString *_get_kCFNumberFormatterRoundingIncrement(void);

// getter for constant 'kCFNumberFormatterRoundingMode'
struct __CFString *_get_kCFNumberFormatterRoundingMode(void);

// getter for constant 'kCFNumberFormatterSecondaryGroupingSize'
struct __CFString *_get_kCFNumberFormatterSecondaryGroupingSize(void);

// getter for constant 'kCFNumberFormatterUseGroupingSeparator'
struct __CFString *_get_kCFNumberFormatterUseGroupingSeparator(void);

// getter for constant 'kCFNumberFormatterZeroSymbol'
struct __CFString *_get_kCFNumberFormatterZeroSymbol(void);

// getter for constant 'kCFNumberNaN'
struct __CFNumber *_get_kCFNumberNaN(void);

// getter for constant 'kCFNumberNegativeInfinity'
struct __CFNumber *_get_kCFNumberNegativeInfinity(void);

// getter for constant 'kCFNumberPositiveInfinity'
struct __CFNumber *_get_kCFNumberPositiveInfinity(void);

// getter for constant 'kCFPlugInDynamicRegisterFunctionKey'
struct __CFString *_get_kCFPlugInDynamicRegisterFunctionKey(void);

// getter for constant 'kCFPlugInDynamicRegistrationKey'
struct __CFString *_get_kCFPlugInDynamicRegistrationKey(void);

// getter for constant 'kCFPlugInFactoriesKey'
struct __CFString *_get_kCFPlugInFactoriesKey(void);

// getter for constant 'kCFPlugInTypesKey'
struct __CFString *_get_kCFPlugInTypesKey(void);

// getter for constant 'kCFPlugInUnloadFunctionKey'
struct __CFString *_get_kCFPlugInUnloadFunctionKey(void);

// getter for constant 'kCFPreferencesAnyApplication'
struct __CFString *_get_kCFPreferencesAnyApplication(void);

// getter for constant 'kCFPreferencesAnyHost'
struct __CFString *_get_kCFPreferencesAnyHost(void);

// getter for constant 'kCFPreferencesAnyUser'
struct __CFString *_get_kCFPreferencesAnyUser(void);

// getter for constant 'kCFPreferencesCurrentApplication'
struct __CFString *_get_kCFPreferencesCurrentApplication(void);

// getter for constant 'kCFPreferencesCurrentHost'
struct __CFString *_get_kCFPreferencesCurrentHost(void);

// getter for constant 'kCFPreferencesCurrentUser'
struct __CFString *_get_kCFPreferencesCurrentUser(void);

// getter for constant 'kCFRunLoopCommonModes'
struct __CFString *_get_kCFRunLoopCommonModes(void);

// getter for constant 'kCFRunLoopDefaultMode'
struct __CFString *_get_kCFRunLoopDefaultMode(void);

// getter for constant 'kCFSocketCommandKey'
struct __CFString *_get_kCFSocketCommandKey(void);

// getter for constant 'kCFSocketErrorKey'
struct __CFString *_get_kCFSocketErrorKey(void);

// getter for constant 'kCFSocketNameKey'
struct __CFString *_get_kCFSocketNameKey(void);

// getter for constant 'kCFSocketRegisterCommand'
struct __CFString *_get_kCFSocketRegisterCommand(void);

// getter for constant 'kCFSocketResultKey'
struct __CFString *_get_kCFSocketResultKey(void);

// getter for constant 'kCFSocketRetrieveCommand'
struct __CFString *_get_kCFSocketRetrieveCommand(void);

// getter for constant 'kCFSocketValueKey'
struct __CFString *_get_kCFSocketValueKey(void);

// getter for constant 'kCFStreamPropertyAppendToFile'
struct __CFString *_get_kCFStreamPropertyAppendToFile(void);

// getter for constant 'kCFStreamPropertyDataWritten'
struct __CFString *_get_kCFStreamPropertyDataWritten(void);

// getter for constant 'kCFStreamPropertyFileCurrentOffset'
struct __CFString *_get_kCFStreamPropertyFileCurrentOffset(void);

// getter for constant 'kCFStreamPropertySocketNativeHandle'
struct __CFString *_get_kCFStreamPropertySocketNativeHandle(void);

// getter for constant 'kCFStreamPropertySocketRemoteHostName'
struct __CFString *_get_kCFStreamPropertySocketRemoteHostName(void);

// getter for constant 'kCFStreamPropertySocketRemotePortNumber'
struct __CFString *_get_kCFStreamPropertySocketRemotePortNumber(void);

// getter for constant 'kCFStringTransformFullwidthHalfwidth'
struct __CFString *_get_kCFStringTransformFullwidthHalfwidth(void);

// getter for constant 'kCFStringTransformHiraganaKatakana'
struct __CFString *_get_kCFStringTransformHiraganaKatakana(void);

// getter for constant 'kCFStringTransformLatinArabic'
struct __CFString *_get_kCFStringTransformLatinArabic(void);

// getter for constant 'kCFStringTransformLatinCyrillic'
struct __CFString *_get_kCFStringTransformLatinCyrillic(void);

// getter for constant 'kCFStringTransformLatinGreek'
struct __CFString *_get_kCFStringTransformLatinGreek(void);

// getter for constant 'kCFStringTransformLatinHangul'
struct __CFString *_get_kCFStringTransformLatinHangul(void);

// getter for constant 'kCFStringTransformLatinHebrew'
struct __CFString *_get_kCFStringTransformLatinHebrew(void);

// getter for constant 'kCFStringTransformLatinHiragana'
struct __CFString *_get_kCFStringTransformLatinHiragana(void);

// getter for constant 'kCFStringTransformLatinKatakana'
struct __CFString *_get_kCFStringTransformLatinKatakana(void);

// getter for constant 'kCFStringTransformLatinThai'
struct __CFString *_get_kCFStringTransformLatinThai(void);

// getter for constant 'kCFStringTransformMandarinLatin'
struct __CFString *_get_kCFStringTransformMandarinLatin(void);

// getter for constant 'kCFStringTransformStripCombiningMarks'
struct __CFString *_get_kCFStringTransformStripCombiningMarks(void);

// getter for constant 'kCFStringTransformToLatin'
struct __CFString *_get_kCFStringTransformToLatin(void);

// getter for constant 'kCFStringTransformToUnicodeName'
struct __CFString *_get_kCFStringTransformToUnicodeName(void);

// getter for constant 'kCFStringTransformToXMLHex'
struct __CFString *_get_kCFStringTransformToXMLHex(void);

// getter for constant 'kCFURLFileDirectoryContents'
struct __CFString *_get_kCFURLFileDirectoryContents(void);

// getter for constant 'kCFURLFileExists'
struct __CFString *_get_kCFURLFileExists(void);

// getter for constant 'kCFURLFileLastModificationTime'
struct __CFString *_get_kCFURLFileLastModificationTime(void);

// getter for constant 'kCFURLFileLength'
struct __CFString *_get_kCFURLFileLength(void);

// getter for constant 'kCFURLFileOwnerID'
struct __CFString *_get_kCFURLFileOwnerID(void);

// getter for constant 'kCFURLFilePOSIXMode'
struct __CFString *_get_kCFURLFilePOSIXMode(void);

// getter for constant 'kCFURLHTTPStatusCode'
struct __CFString *_get_kCFURLHTTPStatusCode(void);

// getter for constant 'kCFURLHTTPStatusLine'
struct __CFString *_get_kCFURLHTTPStatusLine(void);

// getter for constant 'kCFUserNotificationAlertHeaderKey'
struct __CFString *_get_kCFUserNotificationAlertHeaderKey(void);

// getter for constant 'kCFUserNotificationAlertMessageKey'
struct __CFString *_get_kCFUserNotificationAlertMessageKey(void);

// getter for constant 'kCFUserNotificationAlternateButtonTitleKey'
struct __CFString *_get_kCFUserNotificationAlternateButtonTitleKey(void);

// getter for constant 'kCFUserNotificationCheckBoxTitlesKey'
struct __CFString *_get_kCFUserNotificationCheckBoxTitlesKey(void);

// getter for constant 'kCFUserNotificationDefaultButtonTitleKey'
struct __CFString *_get_kCFUserNotificationDefaultButtonTitleKey(void);

// getter for constant 'kCFUserNotificationIconURLKey'
struct __CFString *_get_kCFUserNotificationIconURLKey(void);

// getter for constant 'kCFUserNotificationLocalizationURLKey'
struct __CFString *_get_kCFUserNotificationLocalizationURLKey(void);

// getter for constant 'kCFUserNotificationOtherButtonTitleKey'
struct __CFString *_get_kCFUserNotificationOtherButtonTitleKey(void);

// getter for constant 'kCFUserNotificationPopUpSelectionKey'
struct __CFString *_get_kCFUserNotificationPopUpSelectionKey(void);

// getter for constant 'kCFUserNotificationPopUpTitlesKey'
struct __CFString *_get_kCFUserNotificationPopUpTitlesKey(void);

// getter for constant 'kCFUserNotificationProgressIndicatorValueKey'
struct __CFString *_get_kCFUserNotificationProgressIndicatorValueKey(void);

// getter for constant 'kCFUserNotificationSoundURLKey'
struct __CFString *_get_kCFUserNotificationSoundURLKey(void);

// getter for constant 'kCFUserNotificationTextFieldTitlesKey'
struct __CFString *_get_kCFUserNotificationTextFieldTitlesKey(void);

// getter for constant 'kCFUserNotificationTextFieldValuesKey'
struct __CFString *_get_kCFUserNotificationTextFieldValuesKey(void);

// getter for constant 'kCFXMLTreeErrorDescription'
struct __CFString *_get_kCFXMLTreeErrorDescription(void);

// getter for constant 'kCFXMLTreeErrorLineNumber'
struct __CFString *_get_kCFXMLTreeErrorLineNumber(void);

// getter for constant 'kCFXMLTreeErrorLocation'
struct __CFString *_get_kCFXMLTreeErrorLocation(void);

// getter for constant 'kCFXMLTreeErrorStatusCode'
struct __CFString *_get_kCFXMLTreeErrorStatusCode(void);

enum { CFByteOrderBigEndian = 2 };

enum { CFByteOrderLittleEndian = 1 };

enum { CFByteOrderUnknown = 0 };

enum { CFNotificationSuspensionBehaviorCoalesce = 2 };

enum { CFNotificationSuspensionBehaviorDeliverImmediately = 4 };

enum { CFNotificationSuspensionBehaviorDrop = 1 };

enum { CFNotificationSuspensionBehaviorHold = 3 };

enum { COREFOUNDATION_CFPLUGINCOM_SEPARATE = 1 };

enum { E_ABORT = -2147483641 };

enum { E_ACCESSDENIED = -2147483639 };

enum { E_FAIL = -2147483640 };

enum { E_HANDLE = -2147483642 };

enum { E_INVALIDARG = -2147483645 };

enum { E_NOINTERFACE = -2147483644 };

enum { E_NOTIMPL = -2147483647 };

enum { E_OUTOFMEMORY = -2147483646 };

enum { E_POINTER = -2147483643 };

enum { E_UNEXPECTED = -2147418113 };

enum { FALSE = 0 };

enum { SEVERITY_ERROR = 1 };

enum { SEVERITY_SUCCESS = 0 };

enum { S_FALSE = 1 };

enum { S_OK = 0 };

enum { TRUE = 1 };

enum { kCFCalendarComponentsWrap = 1 };

enum { kCFCalendarUnitDay = 16 };

enum { kCFCalendarUnitEra = 2 };

enum { kCFCalendarUnitHour = 32 };

enum { kCFCalendarUnitMinute = 64 };

enum { kCFCalendarUnitMonth = 8 };

enum { kCFCalendarUnitSecond = 128 };

enum { kCFCalendarUnitWeek = 256 };

enum { kCFCalendarUnitWeekday = 512 };

enum { kCFCalendarUnitWeekdayOrdinal = 1024 };

enum { kCFCalendarUnitYear = 4 };

enum { kCFCharacterSetAlphaNumeric = 10 };

enum { kCFCharacterSetCapitalizedLetter = 13 };

enum { kCFCharacterSetControl = 1 };

enum { kCFCharacterSetDecimalDigit = 4 };

enum { kCFCharacterSetDecomposable = 9 };

enum { kCFCharacterSetIllegal = 12 };

enum { kCFCharacterSetLetter = 5 };

enum { kCFCharacterSetLowercaseLetter = 6 };

enum { kCFCharacterSetNonBase = 8 };

enum { kCFCharacterSetPunctuation = 11 };

enum { kCFCharacterSetSymbol = 14 };

enum { kCFCharacterSetUppercaseLetter = 7 };

enum { kCFCharacterSetWhitespace = 2 };

enum { kCFCharacterSetWhitespaceAndNewline = 3 };

enum { kCFCompareAnchored = 8 };

enum { kCFCompareBackwards = 4 };

enum { kCFCompareCaseInsensitive = 1 };

enum { kCFCompareEqualTo = 0 };

enum { kCFCompareGreaterThan = 1 };

enum { kCFCompareLessThan = -1 };

enum { kCFCompareLocalized = 32 };

enum { kCFCompareNonliteral = 16 };

enum { kCFCompareNumerically = 64 };

#define kCFCoreFoundationVersionNumber10_0 196.4

#define kCFCoreFoundationVersionNumber10_0_3 196.5

#define kCFCoreFoundationVersionNumber10_1 226.0

#define kCFCoreFoundationVersionNumber10_1_2 227.2

#define kCFCoreFoundationVersionNumber10_1_4 227.3

#define kCFCoreFoundationVersionNumber10_2 263.0

#define kCFCoreFoundationVersionNumber10_3 299.0

#define kCFCoreFoundationVersionNumber10_3_3 299.3

#define kCFCoreFoundationVersionNumber10_3_4 299.31

enum { kCFDateFormatterFullStyle = 4 };

enum { kCFDateFormatterLongStyle = 3 };

enum { kCFDateFormatterMediumStyle = 2 };

enum { kCFDateFormatterNoStyle = 0 };

enum { kCFDateFormatterShortStyle = 1 };

enum { kCFGregorianAllUnits = 16777215 };

enum { kCFGregorianUnitsDays = 4 };

enum { kCFGregorianUnitsHours = 8 };

enum { kCFGregorianUnitsMinutes = 16 };

enum { kCFGregorianUnitsMonths = 2 };

enum { kCFGregorianUnitsSeconds = 32 };

enum { kCFGregorianUnitsYears = 1 };

enum { kCFMessagePortIsInvalid = -3 };

enum { kCFMessagePortReceiveTimeout = -2 };

enum { kCFMessagePortSendTimeout = -1 };

enum { kCFMessagePortSuccess = 0 };

enum { kCFMessagePortTransportError = -4 };

enum { kCFNotFound = -1 };

enum { kCFNotificationDeliverImmediately = 1 };

enum { kCFNotificationPostToAllSessions = 2 };

enum { kCFNumberCFIndexType = 14 };

enum { kCFNumberCharType = 7 };

enum { kCFNumberDoubleType = 13 };

enum { kCFNumberFloat32Type = 5 };

enum { kCFNumberFloat64Type = 6 };

enum { kCFNumberFloatType = 12 };

enum { kCFNumberFormatterCurrencyStyle = 2 };

enum { kCFNumberFormatterDecimalStyle = 1 };

enum { kCFNumberFormatterNoStyle = 0 };

enum { kCFNumberFormatterPadAfterPrefix = 1 };

enum { kCFNumberFormatterPadAfterSuffix = 3 };

enum { kCFNumberFormatterPadBeforePrefix = 0 };

enum { kCFNumberFormatterPadBeforeSuffix = 2 };

enum { kCFNumberFormatterParseIntegersOnly = 1 };

enum { kCFNumberFormatterPercentStyle = 3 };

enum { kCFNumberFormatterRoundCeiling = 0 };

enum { kCFNumberFormatterRoundDown = 2 };

enum { kCFNumberFormatterRoundFloor = 1 };

enum { kCFNumberFormatterRoundHalfDown = 5 };

enum { kCFNumberFormatterRoundHalfEven = 4 };

enum { kCFNumberFormatterRoundHalfUp = 6 };

enum { kCFNumberFormatterRoundUp = 3 };

enum { kCFNumberFormatterScientificStyle = 4 };

enum { kCFNumberFormatterSpellOutStyle = 5 };

enum { kCFNumberIntType = 9 };

enum { kCFNumberLongLongType = 11 };

enum { kCFNumberLongType = 10 };

enum { kCFNumberMaxType = 14 };

enum { kCFNumberSInt16Type = 2 };

enum { kCFNumberSInt32Type = 3 };

enum { kCFNumberSInt64Type = 4 };

enum { kCFNumberSInt8Type = 1 };

enum { kCFNumberShortType = 8 };

enum { kCFPropertyListBinaryFormat_v1_0 = 200 };

enum { kCFPropertyListImmutable = 0 };

enum { kCFPropertyListMutableContainers = 1 };

enum { kCFPropertyListMutableContainersAndLeaves = 2 };

enum { kCFPropertyListOpenStepFormat = 1 };

enum { kCFPropertyListXMLFormat_v1_0 = 100 };

enum { kCFRunLoopAfterWaiting = 64 };

enum { kCFRunLoopAllActivities = 268435455 };

enum { kCFRunLoopBeforeSources = 4 };

enum { kCFRunLoopBeforeTimers = 2 };

enum { kCFRunLoopBeforeWaiting = 32 };

enum { kCFRunLoopEntry = 1 };

enum { kCFRunLoopExit = 128 };

enum { kCFRunLoopRunFinished = 1 };

enum { kCFRunLoopRunHandledSource = 4 };

enum { kCFRunLoopRunStopped = 2 };

enum { kCFRunLoopRunTimedOut = 3 };

enum { kCFSocketAcceptCallBack = 2 };

enum { kCFSocketAutomaticallyReenableAcceptCallBack = 2 };

enum { kCFSocketAutomaticallyReenableDataCallBack = 3 };

enum { kCFSocketAutomaticallyReenableReadCallBack = 1 };

enum { kCFSocketAutomaticallyReenableWriteCallBack = 8 };

enum { kCFSocketCloseOnInvalidate = 128 };

enum { kCFSocketConnectCallBack = 4 };

enum { kCFSocketDataCallBack = 3 };

enum { kCFSocketError = -1 };

enum { kCFSocketNoCallBack = 0 };

enum { kCFSocketReadCallBack = 1 };

enum { kCFSocketSuccess = 0 };

enum { kCFSocketTimeout = -2 };

enum { kCFSocketWriteCallBack = 8 };

enum { kCFStreamErrorDomainCustom = -1 };

enum { kCFStreamErrorDomainMacOSStatus = 2 };

enum { kCFStreamErrorDomainPOSIX = 1 };

enum { kCFStreamEventCanAcceptBytes = 4 };

enum { kCFStreamEventEndEncountered = 16 };

enum { kCFStreamEventErrorOccurred = 8 };

enum { kCFStreamEventHasBytesAvailable = 2 };

enum { kCFStreamEventNone = 0 };

enum { kCFStreamEventOpenCompleted = 1 };

enum { kCFStreamStatusAtEnd = 5 };

enum { kCFStreamStatusClosed = 6 };

enum { kCFStreamStatusError = 7 };

enum { kCFStreamStatusNotOpen = 0 };

enum { kCFStreamStatusOpen = 2 };

enum { kCFStreamStatusOpening = 1 };

enum { kCFStreamStatusReading = 3 };

enum { kCFStreamStatusWriting = 4 };

enum { kCFStringEncodingANSEL = 1537 };

enum { kCFStringEncodingASCII = 1536 };

enum { kCFStringEncodingBig5 = 2563 };

enum { kCFStringEncodingBig5_E = 2569 };

enum { kCFStringEncodingBig5_HKSCS_1999 = 2566 };

enum { kCFStringEncodingCNS_11643_92_P1 = 1617 };

enum { kCFStringEncodingCNS_11643_92_P2 = 1618 };

enum { kCFStringEncodingCNS_11643_92_P3 = 1619 };

enum { kCFStringEncodingDOSArabic = 1049 };

enum { kCFStringEncodingDOSBalticRim = 1030 };

enum { kCFStringEncodingDOSCanadianFrench = 1048 };

enum { kCFStringEncodingDOSChineseSimplif = 1057 };

enum { kCFStringEncodingDOSChineseTrad = 1059 };

enum { kCFStringEncodingDOSCyrillic = 1043 };

enum { kCFStringEncodingDOSGreek = 1029 };

enum { kCFStringEncodingDOSGreek1 = 1041 };

enum { kCFStringEncodingDOSGreek2 = 1052 };

enum { kCFStringEncodingDOSHebrew = 1047 };

enum { kCFStringEncodingDOSIcelandic = 1046 };

enum { kCFStringEncodingDOSJapanese = 1056 };

enum { kCFStringEncodingDOSKorean = 1058 };

enum { kCFStringEncodingDOSLatin1 = 1040 };

enum { kCFStringEncodingDOSLatin2 = 1042 };

enum { kCFStringEncodingDOSLatinUS = 1024 };

enum { kCFStringEncodingDOSNordic = 1050 };

enum { kCFStringEncodingDOSPortuguese = 1045 };

enum { kCFStringEncodingDOSRussian = 1051 };

enum { kCFStringEncodingDOSThai = 1053 };

enum { kCFStringEncodingDOSTurkish = 1044 };

enum { kCFStringEncodingEBCDIC_CP037 = 3074 };

enum { kCFStringEncodingEBCDIC_US = 3073 };

enum { kCFStringEncodingEUC_CN = 2352 };

enum { kCFStringEncodingEUC_JP = 2336 };

enum { kCFStringEncodingEUC_KR = 2368 };

enum { kCFStringEncodingEUC_TW = 2353 };

enum { kCFStringEncodingGBK_95 = 1585 };

enum { kCFStringEncodingGB_18030_2000 = 1586 };

enum { kCFStringEncodingGB_2312_80 = 1584 };

enum { kCFStringEncodingHZ_GB_2312 = 2565 };

enum { kCFStringEncodingISOLatin1 = 513 };

enum { kCFStringEncodingISOLatin10 = 528 };

enum { kCFStringEncodingISOLatin2 = 514 };

enum { kCFStringEncodingISOLatin3 = 515 };

enum { kCFStringEncodingISOLatin4 = 516 };

enum { kCFStringEncodingISOLatin5 = 521 };

enum { kCFStringEncodingISOLatin6 = 522 };

enum { kCFStringEncodingISOLatin7 = 525 };

enum { kCFStringEncodingISOLatin8 = 526 };

enum { kCFStringEncodingISOLatin9 = 527 };

enum { kCFStringEncodingISOLatinArabic = 518 };

enum { kCFStringEncodingISOLatinCyrillic = 517 };

enum { kCFStringEncodingISOLatinGreek = 519 };

enum { kCFStringEncodingISOLatinHebrew = 520 };

enum { kCFStringEncodingISOLatinThai = 523 };

enum { kCFStringEncodingISO_2022_CN = 2096 };

enum { kCFStringEncodingISO_2022_CN_EXT = 2097 };

enum { kCFStringEncodingISO_2022_JP = 2080 };

enum { kCFStringEncodingISO_2022_JP_1 = 2082 };

enum { kCFStringEncodingISO_2022_JP_2 = 2081 };

enum { kCFStringEncodingISO_2022_JP_3 = 2083 };

enum { kCFStringEncodingISO_2022_KR = 2112 };

enum { kCFStringEncodingInvalidId = 4294967295 };

enum { kCFStringEncodingJIS_C6226_78 = 1572 };

enum { kCFStringEncodingJIS_X0201_76 = 1568 };

enum { kCFStringEncodingJIS_X0208_83 = 1569 };

enum { kCFStringEncodingJIS_X0208_90 = 1570 };

enum { kCFStringEncodingJIS_X0212_90 = 1571 };

enum { kCFStringEncodingKOI8_R = 2562 };

enum { kCFStringEncodingKOI8_U = 2568 };

enum { kCFStringEncodingKSC_5601_87 = 1600 };

enum { kCFStringEncodingKSC_5601_92_Johab = 1601 };

enum { kCFStringEncodingMacArabic = 4 };

enum { kCFStringEncodingMacArmenian = 24 };

enum { kCFStringEncodingMacBengali = 13 };

enum { kCFStringEncodingMacBurmese = 19 };

enum { kCFStringEncodingMacCeltic = 39 };

enum { kCFStringEncodingMacCentralEurRoman = 29 };

enum { kCFStringEncodingMacChineseSimp = 25 };

enum { kCFStringEncodingMacChineseTrad = 2 };

enum { kCFStringEncodingMacCroatian = 36 };

enum { kCFStringEncodingMacCyrillic = 7 };

enum { kCFStringEncodingMacDevanagari = 9 };

enum { kCFStringEncodingMacDingbats = 34 };

enum { kCFStringEncodingMacEthiopic = 28 };

enum { kCFStringEncodingMacExtArabic = 31 };

enum { kCFStringEncodingMacFarsi = 140 };

enum { kCFStringEncodingMacGaelic = 40 };

enum { kCFStringEncodingMacGeorgian = 23 };

enum { kCFStringEncodingMacGreek = 6 };

enum { kCFStringEncodingMacGujarati = 11 };

enum { kCFStringEncodingMacGurmukhi = 10 };

enum { kCFStringEncodingMacHFS = 255 };

enum { kCFStringEncodingMacHebrew = 5 };

enum { kCFStringEncodingMacIcelandic = 37 };

enum { kCFStringEncodingMacInuit = 236 };

enum { kCFStringEncodingMacJapanese = 1 };

enum { kCFStringEncodingMacKannada = 16 };

enum { kCFStringEncodingMacKhmer = 20 };

enum { kCFStringEncodingMacKorean = 3 };

enum { kCFStringEncodingMacLaotian = 22 };

enum { kCFStringEncodingMacMalayalam = 17 };

enum { kCFStringEncodingMacMongolian = 27 };

enum { kCFStringEncodingMacOriya = 12 };

enum { kCFStringEncodingMacRoman = 0 };

enum { kCFStringEncodingMacRomanLatin1 = 2564 };

enum { kCFStringEncodingMacRomanian = 38 };

enum { kCFStringEncodingMacSinhalese = 18 };

enum { kCFStringEncodingMacSymbol = 33 };

enum { kCFStringEncodingMacTamil = 14 };

enum { kCFStringEncodingMacTelugu = 15 };

enum { kCFStringEncodingMacThai = 21 };

enum { kCFStringEncodingMacTibetan = 26 };

enum { kCFStringEncodingMacTurkish = 35 };

enum { kCFStringEncodingMacUkrainian = 152 };

enum { kCFStringEncodingMacVT100 = 252 };

enum { kCFStringEncodingMacVietnamese = 30 };

enum { kCFStringEncodingNextStepJapanese = 2818 };

enum { kCFStringEncodingNextStepLatin = 2817 };

enum { kCFStringEncodingNonLossyASCII = 3071 };

enum { kCFStringEncodingShiftJIS = 2561 };

enum { kCFStringEncodingShiftJIS_X0213_00 = 1576 };

enum { kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577 };

enum { kCFStringEncodingUTF16 = 256 };

enum { kCFStringEncodingUTF16BE = 268435712 };

enum { kCFStringEncodingUTF16LE = 335544576 };

enum { kCFStringEncodingUTF32 = 201326848 };

enum { kCFStringEncodingUTF32BE = 402653440 };

enum { kCFStringEncodingUTF32LE = 469762304 };

enum { kCFStringEncodingUTF8 = 134217984 };

enum { kCFStringEncodingUnicode = 256 };

enum { kCFStringEncodingVISCII = 2567 };

enum { kCFStringEncodingWindowsArabic = 1286 };

enum { kCFStringEncodingWindowsBalticRim = 1287 };

enum { kCFStringEncodingWindowsCyrillic = 1282 };

enum { kCFStringEncodingWindowsGreek = 1283 };

enum { kCFStringEncodingWindowsHebrew = 1285 };

enum { kCFStringEncodingWindowsKoreanJohab = 1296 };

enum { kCFStringEncodingWindowsLatin1 = 1280 };

enum { kCFStringEncodingWindowsLatin2 = 1281 };

enum { kCFStringEncodingWindowsLatin5 = 1284 };

enum { kCFStringEncodingWindowsVietnamese = 1288 };

enum { kCFStringNormalizationFormC = 2 };

enum { kCFStringNormalizationFormD = 0 };

enum { kCFStringNormalizationFormKC = 3 };

enum { kCFStringNormalizationFormKD = 1 };

enum { kCFURLComponentFragment = 12 };

enum { kCFURLComponentHost = 8 };

enum { kCFURLComponentNetLocation = 2 };

enum { kCFURLComponentParameterString = 10 };

enum { kCFURLComponentPassword = 6 };

enum { kCFURLComponentPath = 3 };

enum { kCFURLComponentPort = 9 };

enum { kCFURLComponentQuery = 11 };

enum { kCFURLComponentResourceSpecifier = 4 };

enum { kCFURLComponentScheme = 1 };

enum { kCFURLComponentUser = 5 };

enum { kCFURLComponentUserInfo = 7 };

enum { kCFURLHFSPathStyle = 1 };

enum { kCFURLImproperArgumentsError = -15 };

enum { kCFURLPOSIXPathStyle = 0 };

enum { kCFURLPropertyKeyUnavailableError = -17 };

enum { kCFURLRemoteHostUnavailableError = -14 };

enum { kCFURLResourceAccessViolationError = -13 };

enum { kCFURLResourceNotFoundError = -12 };

enum { kCFURLTimeoutError = -18 };

enum { kCFURLUnknownError = -10 };

enum { kCFURLUnknownPropertyKeyError = -16 };

enum { kCFURLUnknownSchemeError = -11 };

enum { kCFURLWindowsPathStyle = 2 };

enum { kCFUserNotificationAlternateResponse = 1 };

enum { kCFUserNotificationCancelResponse = 3 };

enum { kCFUserNotificationCautionAlertLevel = 2 };

enum { kCFUserNotificationDefaultResponse = 0 };

enum { kCFUserNotificationNoDefaultButtonFlag = 32 };

enum { kCFUserNotificationNoteAlertLevel = 1 };

enum { kCFUserNotificationOtherResponse = 2 };

enum { kCFUserNotificationPlainAlertLevel = 3 };

enum { kCFUserNotificationStopAlertLevel = 0 };

enum { kCFUserNotificationUseRadioButtonsFlag = 64 };

enum { kCFXMLEntityTypeCharacter = 4 };

enum { kCFXMLEntityTypeParameter = 0 };

enum { kCFXMLEntityTypeParsedExternal = 2 };

enum { kCFXMLEntityTypeParsedInternal = 1 };

enum { kCFXMLEntityTypeUnparsed = 3 };

enum { kCFXMLErrorElementlessDocument = 11 };

enum { kCFXMLErrorEncodingConversionFailure = 3 };

enum { kCFXMLErrorMalformedCDSect = 7 };

enum { kCFXMLErrorMalformedCharacterReference = 13 };

enum { kCFXMLErrorMalformedCloseTag = 8 };

enum { kCFXMLErrorMalformedComment = 12 };

enum { kCFXMLErrorMalformedDTD = 5 };

enum { kCFXMLErrorMalformedDocument = 10 };

enum { kCFXMLErrorMalformedName = 6 };

enum { kCFXMLErrorMalformedParsedCharacterData = 14 };

enum { kCFXMLErrorMalformedProcessingInstruction = 4 };

enum { kCFXMLErrorMalformedStartTag = 9 };

enum { kCFXMLErrorNoData = 15 };

enum { kCFXMLErrorUnexpectedEOF = 1 };

enum { kCFXMLErrorUnknownEncoding = 2 };

enum { kCFXMLNodeCurrentVersion = 1 };

enum { kCFXMLNodeTypeAttribute = 3 };

enum { kCFXMLNodeTypeAttributeListDeclaration = 15 };

enum { kCFXMLNodeTypeCDATASection = 7 };

enum { kCFXMLNodeTypeComment = 5 };

enum { kCFXMLNodeTypeDocument = 1 };

enum { kCFXMLNodeTypeDocumentFragment = 8 };

enum { kCFXMLNodeTypeDocumentType = 11 };

enum { kCFXMLNodeTypeElement = 2 };

enum { kCFXMLNodeTypeElementTypeDeclaration = 14 };

enum { kCFXMLNodeTypeEntity = 9 };

enum { kCFXMLNodeTypeEntityReference = 10 };

enum { kCFXMLNodeTypeNotation = 13 };

enum { kCFXMLNodeTypeProcessingInstruction = 4 };

enum { kCFXMLNodeTypeText = 6 };

enum { kCFXMLNodeTypeWhitespace = 12 };

enum { kCFXMLParserAddImpliedAttributes = 32 };

enum { kCFXMLParserAllOptions = 16777215 };

enum { kCFXMLParserNoOptions = 0 };

enum { kCFXMLParserReplacePhysicalEntities = 4 };

enum { kCFXMLParserResolveExternalEntities = 16 };

enum { kCFXMLParserSkipMetaData = 2 };

enum { kCFXMLParserSkipWhitespace = 8 };

enum { kCFXMLParserValidateDocument = 1 };

enum { kCFXMLStatusParseInProgress = -1 };

enum { kCFXMLStatusParseNotBegun = -2 };

enum { kCFXMLStatusParseSuccessful = 0 };

// function 'CFAbsoluteTimeAddGregorianUnits'
double CFAbsoluteTimeAddGregorianUnits(double at, struct __CFTimeZone *tz, struct _CFGregorianUnits units);

// function 'CFAbsoluteTimeGetCurrent'
double CFAbsoluteTimeGetCurrent(void);

// function 'CFAbsoluteTimeGetDayOfWeek'
long CFAbsoluteTimeGetDayOfWeek(double at, struct __CFTimeZone *tz);

// function 'CFAbsoluteTimeGetDayOfYear'
long CFAbsoluteTimeGetDayOfYear(double at, struct __CFTimeZone *tz);

// function 'CFAbsoluteTimeGetDifferenceAsGregorianUnits'
struct _CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(double at1, double at2, struct __CFTimeZone *tz, unsigned long unitFlags);

// function 'CFAbsoluteTimeGetGregorianDate'
struct _CFGregorianDate CFAbsoluteTimeGetGregorianDate(double at, struct __CFTimeZone *tz);

// function 'CFAbsoluteTimeGetWeekOfYear'
long CFAbsoluteTimeGetWeekOfYear(double at, struct __CFTimeZone *tz);

// function 'CFAllocatorAllocate'
void *CFAllocatorAllocate(struct __CFAllocator *allocator, long size, unsigned long hint);

// function 'CFAllocatorDeallocate'
void CFAllocatorDeallocate(struct __CFAllocator *allocator, void *ptr);

// function 'CFAllocatorGetDefault'
struct __CFAllocator *CFAllocatorGetDefault(void);

// function 'CFAllocatorGetPreferredSizeForSize'
long CFAllocatorGetPreferredSizeForSize(struct __CFAllocator *allocator, long size, unsigned long hint);

// function 'CFAllocatorGetTypeID'
unsigned long CFAllocatorGetTypeID(void);

// function 'CFAllocatorReallocate'
void *CFAllocatorReallocate(struct __CFAllocator *allocator, void *ptr, long newsize, unsigned long hint);

// function 'CFAllocatorSetDefault'
void CFAllocatorSetDefault(struct __CFAllocator *allocator);

// function 'CFArrayAppendArray'
void CFArrayAppendArray(struct __CFArray *theArray, struct __CFArray *otherArray, struct _CFRange otherRange);

// function 'CFArrayAppendValue'
void CFArrayAppendValue(struct __CFArray *theArray, const void* value);

// function 'CFArrayContainsValue'
Boolean CFArrayContainsValue(struct __CFArray *theArray, struct _CFRange range, const void* value);

// function 'CFArrayCreateCopy'
struct __CFArray *CFArrayCreateCopy(struct __CFAllocator *allocator, struct __CFArray *theArray);

// function 'CFArrayCreateMutableCopy'
struct __CFArray *CFArrayCreateMutableCopy(struct __CFAllocator *allocator, long capacity, struct __CFArray *theArray);

// function 'CFArrayExchangeValuesAtIndices'
void CFArrayExchangeValuesAtIndices(struct __CFArray *theArray, long idx1, long idx2);

// function 'CFArrayGetCount'
long CFArrayGetCount(struct __CFArray *theArray);

// function 'CFArrayGetCountOfValue'
long CFArrayGetCountOfValue(struct __CFArray *theArray, struct _CFRange range, const void* value);

// function 'CFArrayGetFirstIndexOfValue'
long CFArrayGetFirstIndexOfValue(struct __CFArray *theArray, struct _CFRange range, const void* value);

// function 'CFArrayGetLastIndexOfValue'
long CFArrayGetLastIndexOfValue(struct __CFArray *theArray, struct _CFRange range, const void* value);

// function 'CFArrayGetTypeID'
unsigned long CFArrayGetTypeID(void);

// function 'CFArrayGetValueAtIndex'
const void* CFArrayGetValueAtIndex(struct __CFArray *theArray, long idx);

// function 'CFArrayGetValues'
void CFArrayGetValues(struct __CFArray *theArray, struct _CFRange range, const void** values);

// function 'CFArrayInsertValueAtIndex'
void CFArrayInsertValueAtIndex(struct __CFArray *theArray, long idx, const void* value);

// function 'CFArrayRemoveAllValues'
void CFArrayRemoveAllValues(struct __CFArray *theArray);

// function 'CFArrayRemoveValueAtIndex'
void CFArrayRemoveValueAtIndex(struct __CFArray *theArray, long idx);

// function 'CFArrayReplaceValues'
void CFArrayReplaceValues(struct __CFArray *theArray, struct _CFRange range, const void** newValues, long newCount);

// function 'CFArraySetValueAtIndex'
void CFArraySetValueAtIndex(struct __CFArray *theArray, long idx, const void* value);

// function 'CFAttributedStringBeginEditing'
void CFAttributedStringBeginEditing(struct __CFAttributedString *aStr);

// function 'CFAttributedStringCreate'
struct __CFAttributedString *CFAttributedStringCreate(struct __CFAllocator *alloc, struct __CFString *str, struct __CFDictionary *attributes);

// function 'CFAttributedStringCreateCopy'
struct __CFAttributedString *CFAttributedStringCreateCopy(struct __CFAllocator *alloc, struct __CFAttributedString *aStr);

// function 'CFAttributedStringCreateMutable'
struct __CFAttributedString *CFAttributedStringCreateMutable(struct __CFAllocator *alloc, long maxLength);

// function 'CFAttributedStringCreateMutableCopy'
struct __CFAttributedString *CFAttributedStringCreateMutableCopy(struct __CFAllocator *alloc, long maxLength, struct __CFAttributedString *aStr);

// function 'CFAttributedStringCreateWithSubstring'
struct __CFAttributedString *CFAttributedStringCreateWithSubstring(struct __CFAllocator *alloc, struct __CFAttributedString *aStr, struct _CFRange range);

// function 'CFAttributedStringEndEditing'
void CFAttributedStringEndEditing(struct __CFAttributedString *aStr);

// function 'CFAttributedStringGetAttribute'
id CFAttributedStringGetAttribute(struct __CFAttributedString *aStr, long loc, struct __CFString *attrName, struct _CFRange *effectiveRange);

// function 'CFAttributedStringGetAttributeAndLongestEffectiveRange'
id CFAttributedStringGetAttributeAndLongestEffectiveRange(struct __CFAttributedString *aStr, long loc, struct __CFString *attrName, struct _CFRange inRange, struct _CFRange *longestEffectiveRange);

// function 'CFAttributedStringGetAttributes'
struct __CFDictionary *CFAttributedStringGetAttributes(struct __CFAttributedString *aStr, long loc, struct _CFRange *effectiveRange);

// function 'CFAttributedStringGetAttributesAndLongestEffectiveRange'
struct __CFDictionary *CFAttributedStringGetAttributesAndLongestEffectiveRange(struct __CFAttributedString *aStr, long loc, struct _CFRange inRange, struct _CFRange *longestEffectiveRange);

// function 'CFAttributedStringGetLength'
long CFAttributedStringGetLength(struct __CFAttributedString *aStr);

// function 'CFAttributedStringGetMutableString'
struct __CFString *CFAttributedStringGetMutableString(struct __CFAttributedString *aStr);

// function 'CFAttributedStringGetString'
struct __CFString *CFAttributedStringGetString(struct __CFAttributedString *aStr);

// function 'CFAttributedStringGetTypeID'
unsigned long CFAttributedStringGetTypeID(void);

// function 'CFAttributedStringRemoveAttribute'
void CFAttributedStringRemoveAttribute(struct __CFAttributedString *aStr, struct _CFRange range, struct __CFString *attrName);

// function 'CFAttributedStringReplaceAttributedString'
void CFAttributedStringReplaceAttributedString(struct __CFAttributedString *aStr, struct _CFRange range, struct __CFAttributedString *replacement);

// function 'CFAttributedStringReplaceString'
void CFAttributedStringReplaceString(struct __CFAttributedString *aStr, struct _CFRange range, struct __CFString *replacement);

// function 'CFAttributedStringSetAttribute'
void CFAttributedStringSetAttribute(struct __CFAttributedString *aStr, struct _CFRange range, struct __CFString *attrName, id value);

// function 'CFAttributedStringSetAttributes'
void CFAttributedStringSetAttributes(struct __CFAttributedString *aStr, struct _CFRange range, struct __CFDictionary *replacement, Boolean clearOtherAttributes);

// function 'CFBagAddValue'
void CFBagAddValue(struct __CFBag *theBag, const void* value);

// function 'CFBagContainsValue'
Boolean CFBagContainsValue(struct __CFBag *theBag, const void* value);

// function 'CFBagCreateCopy'
struct __CFBag *CFBagCreateCopy(struct __CFAllocator *allocator, struct __CFBag *theBag);

// function 'CFBagCreateMutableCopy'
struct __CFBag *CFBagCreateMutableCopy(struct __CFAllocator *allocator, long capacity, struct __CFBag *theBag);

// function 'CFBagGetCount'
long CFBagGetCount(struct __CFBag *theBag);

// function 'CFBagGetCountOfValue'
long CFBagGetCountOfValue(struct __CFBag *theBag, const void* value);

// function 'CFBagGetTypeID'
unsigned long CFBagGetTypeID(void);

// function 'CFBagGetValue'
const void* CFBagGetValue(struct __CFBag *theBag, const void* value);

// function 'CFBagGetValueIfPresent'
Boolean CFBagGetValueIfPresent(struct __CFBag *theBag, const void* candidate, const void** value);

// function 'CFBagGetValues'
void CFBagGetValues(struct __CFBag *theBag, const void** values);

// function 'CFBagRemoveAllValues'
void CFBagRemoveAllValues(struct __CFBag *theBag);

// function 'CFBagRemoveValue'
void CFBagRemoveValue(struct __CFBag *theBag, const void* value);

// function 'CFBagReplaceValue'
void CFBagReplaceValue(struct __CFBag *theBag, const void* value);

// function 'CFBagSetValue'
void CFBagSetValue(struct __CFBag *theBag, const void* value);

// function 'CFBinaryHeapAddValue'
void CFBinaryHeapAddValue(struct __CFBinaryHeap *heap, const void* value);

// function 'CFBinaryHeapContainsValue'
Boolean CFBinaryHeapContainsValue(struct __CFBinaryHeap *heap, const void* value);

// function 'CFBinaryHeapCreateCopy'
struct __CFBinaryHeap *CFBinaryHeapCreateCopy(struct __CFAllocator *allocator, long capacity, struct __CFBinaryHeap *heap);

// function 'CFBinaryHeapGetCount'
long CFBinaryHeapGetCount(struct __CFBinaryHeap *heap);

// function 'CFBinaryHeapGetCountOfValue'
long CFBinaryHeapGetCountOfValue(struct __CFBinaryHeap *heap, const void* value);

// function 'CFBinaryHeapGetMinimum'
const void* CFBinaryHeapGetMinimum(struct __CFBinaryHeap *heap);

// function 'CFBinaryHeapGetMinimumIfPresent'
Boolean CFBinaryHeapGetMinimumIfPresent(struct __CFBinaryHeap *heap, const void** value);

// function 'CFBinaryHeapGetTypeID'
unsigned long CFBinaryHeapGetTypeID(void);

// function 'CFBinaryHeapGetValues'
void CFBinaryHeapGetValues(struct __CFBinaryHeap *heap, const void** values);

// function 'CFBinaryHeapRemoveAllValues'
void CFBinaryHeapRemoveAllValues(struct __CFBinaryHeap *heap);

// function 'CFBinaryHeapRemoveMinimumValue'
void CFBinaryHeapRemoveMinimumValue(struct __CFBinaryHeap *heap);

// function 'CFBitVectorContainsBit'
Boolean CFBitVectorContainsBit(struct __CFBitVector *bv, struct _CFRange range, unsigned long value);

// function 'CFBitVectorCreate'
struct __CFBitVector *CFBitVectorCreate(struct __CFAllocator *allocator, const UInt8* bytes, long numBits);

// function 'CFBitVectorCreateCopy'
struct __CFBitVector *CFBitVectorCreateCopy(struct __CFAllocator *allocator, struct __CFBitVector *bv);

// function 'CFBitVectorCreateMutable'
struct __CFBitVector *CFBitVectorCreateMutable(struct __CFAllocator *allocator, long capacity);

// function 'CFBitVectorCreateMutableCopy'
struct __CFBitVector *CFBitVectorCreateMutableCopy(struct __CFAllocator *allocator, long capacity, struct __CFBitVector *bv);

// function 'CFBitVectorFlipBitAtIndex'
void CFBitVectorFlipBitAtIndex(struct __CFBitVector *bv, long idx);

// function 'CFBitVectorFlipBits'
void CFBitVectorFlipBits(struct __CFBitVector *bv, struct _CFRange range);

// function 'CFBitVectorGetBitAtIndex'
unsigned long CFBitVectorGetBitAtIndex(struct __CFBitVector *bv, long idx);

// function 'CFBitVectorGetBits'
void CFBitVectorGetBits(struct __CFBitVector *bv, struct _CFRange range, UInt8* bytes);

// function 'CFBitVectorGetCount'
long CFBitVectorGetCount(struct __CFBitVector *bv);

// function 'CFBitVectorGetCountOfBit'
long CFBitVectorGetCountOfBit(struct __CFBitVector *bv, struct _CFRange range, unsigned long value);

// function 'CFBitVectorGetFirstIndexOfBit'
long CFBitVectorGetFirstIndexOfBit(struct __CFBitVector *bv, struct _CFRange range, unsigned long value);

// function 'CFBitVectorGetLastIndexOfBit'
long CFBitVectorGetLastIndexOfBit(struct __CFBitVector *bv, struct _CFRange range, unsigned long value);

// function 'CFBitVectorGetTypeID'
unsigned long CFBitVectorGetTypeID(void);

// function 'CFBitVectorSetAllBits'
void CFBitVectorSetAllBits(struct __CFBitVector *bv, unsigned long value);

// function 'CFBitVectorSetBitAtIndex'
void CFBitVectorSetBitAtIndex(struct __CFBitVector *bv, long idx, unsigned long value);

// function 'CFBitVectorSetBits'
void CFBitVectorSetBits(struct __CFBitVector *bv, struct _CFRange range, unsigned long value);

// function 'CFBitVectorSetCount'
void CFBitVectorSetCount(struct __CFBitVector *bv, long count);

// function 'CFBooleanGetTypeID'
unsigned long CFBooleanGetTypeID(void);

// function 'CFBooleanGetValue'
Boolean CFBooleanGetValue(struct __CFBoolean *boolean);

// function 'CFBundleCloseBundleResourceMap'
void CFBundleCloseBundleResourceMap(struct __CFBundle *bundle, short refNum);

// function 'CFBundleCopyAuxiliaryExecutableURL'
struct __CFURL *CFBundleCopyAuxiliaryExecutableURL(struct __CFBundle *bundle, struct __CFString *executableName);

// function 'CFBundleCopyBuiltInPlugInsURL'
struct __CFURL *CFBundleCopyBuiltInPlugInsURL(struct __CFBundle *bundle);

// function 'CFBundleCopyBundleLocalizations'
struct __CFArray *CFBundleCopyBundleLocalizations(struct __CFBundle *bundle);

// function 'CFBundleCopyBundleURL'
struct __CFURL *CFBundleCopyBundleURL(struct __CFBundle *bundle);

// function 'CFBundleCopyExecutableURL'
struct __CFURL *CFBundleCopyExecutableURL(struct __CFBundle *bundle);

// function 'CFBundleCopyInfoDictionaryForURL'
struct __CFDictionary *CFBundleCopyInfoDictionaryForURL(struct __CFURL *url);

// function 'CFBundleCopyInfoDictionaryInDirectory'
struct __CFDictionary *CFBundleCopyInfoDictionaryInDirectory(struct __CFURL *bundleURL);

// function 'CFBundleCopyLocalizationsForPreferences'
struct __CFArray *CFBundleCopyLocalizationsForPreferences(struct __CFArray *locArray, struct __CFArray *prefArray);

// function 'CFBundleCopyLocalizationsForURL'
struct __CFArray *CFBundleCopyLocalizationsForURL(struct __CFURL *url);

// function 'CFBundleCopyLocalizedString'
struct __CFString *CFBundleCopyLocalizedString(struct __CFBundle *bundle, struct __CFString *key, struct __CFString *value, struct __CFString *tableName);

// function 'CFBundleCopyPreferredLocalizationsFromArray'
struct __CFArray *CFBundleCopyPreferredLocalizationsFromArray(struct __CFArray *locArray);

// function 'CFBundleCopyPrivateFrameworksURL'
struct __CFURL *CFBundleCopyPrivateFrameworksURL(struct __CFBundle *bundle);

// function 'CFBundleCopyResourceURL'
struct __CFURL *CFBundleCopyResourceURL(struct __CFBundle *bundle, struct __CFString *resourceName, struct __CFString *resourceType, struct __CFString *subDirName);

// function 'CFBundleCopyResourceURLForLocalization'
struct __CFURL *CFBundleCopyResourceURLForLocalization(struct __CFBundle *bundle, struct __CFString *resourceName, struct __CFString *resourceType, struct __CFString *subDirName, struct __CFString *localizationName);

// function 'CFBundleCopyResourceURLInDirectory'
struct __CFURL *CFBundleCopyResourceURLInDirectory(struct __CFURL *bundleURL, struct __CFString *resourceName, struct __CFString *resourceType, struct __CFString *subDirName);

// function 'CFBundleCopyResourceURLsOfType'
struct __CFArray *CFBundleCopyResourceURLsOfType(struct __CFBundle *bundle, struct __CFString *resourceType, struct __CFString *subDirName);

// function 'CFBundleCopyResourceURLsOfTypeForLocalization'
struct __CFArray *CFBundleCopyResourceURLsOfTypeForLocalization(struct __CFBundle *bundle, struct __CFString *resourceType, struct __CFString *subDirName, struct __CFString *localizationName);

// function 'CFBundleCopyResourceURLsOfTypeInDirectory'
struct __CFArray *CFBundleCopyResourceURLsOfTypeInDirectory(struct __CFURL *bundleURL, struct __CFString *resourceType, struct __CFString *subDirName);

// function 'CFBundleCopyResourcesDirectoryURL'
struct __CFURL *CFBundleCopyResourcesDirectoryURL(struct __CFBundle *bundle);

// function 'CFBundleCopySharedFrameworksURL'
struct __CFURL *CFBundleCopySharedFrameworksURL(struct __CFBundle *bundle);

// function 'CFBundleCopySharedSupportURL'
struct __CFURL *CFBundleCopySharedSupportURL(struct __CFBundle *bundle);

// function 'CFBundleCopySupportFilesDirectoryURL'
struct __CFURL *CFBundleCopySupportFilesDirectoryURL(struct __CFBundle *bundle);

// function 'CFBundleCreate'
struct __CFBundle *CFBundleCreate(struct __CFAllocator *allocator, struct __CFURL *bundleURL);

// function 'CFBundleCreateBundlesFromDirectory'
struct __CFArray *CFBundleCreateBundlesFromDirectory(struct __CFAllocator *allocator, struct __CFURL *directoryURL, struct __CFString *bundleType);

// function 'CFBundleGetAllBundles'
struct __CFArray *CFBundleGetAllBundles(void);

// function 'CFBundleGetBundleWithIdentifier'
struct __CFBundle *CFBundleGetBundleWithIdentifier(struct __CFString *bundleID);

// function 'CFBundleGetDataPointerForName'
void *CFBundleGetDataPointerForName(struct __CFBundle *bundle, struct __CFString *symbolName);

// function 'CFBundleGetDataPointersForNames'
void CFBundleGetDataPointersForNames(struct __CFBundle *bundle, struct __CFArray *symbolNames, void **stbl);

// function 'CFBundleGetDevelopmentRegion'
struct __CFString *CFBundleGetDevelopmentRegion(struct __CFBundle *bundle);

// function 'CFBundleGetFunctionPointerForName'
void *CFBundleGetFunctionPointerForName(struct __CFBundle *bundle, struct __CFString *functionName);

// function 'CFBundleGetFunctionPointersForNames'
void CFBundleGetFunctionPointersForNames(struct __CFBundle *bundle, struct __CFArray *functionNames, void **ftbl);

// function 'CFBundleGetIdentifier'
struct __CFString *CFBundleGetIdentifier(struct __CFBundle *bundle);

// function 'CFBundleGetInfoDictionary'
struct __CFDictionary *CFBundleGetInfoDictionary(struct __CFBundle *bundle);

// function 'CFBundleGetLocalInfoDictionary'
struct __CFDictionary *CFBundleGetLocalInfoDictionary(struct __CFBundle *bundle);

// function 'CFBundleGetMainBundle'
struct __CFBundle *CFBundleGetMainBundle(void);

// function 'CFBundleGetPackageInfo'
void CFBundleGetPackageInfo(struct __CFBundle *bundle, unsigned int *packageType, unsigned int *packageCreator);

// function 'CFBundleGetPackageInfoInDirectory'
Boolean CFBundleGetPackageInfoInDirectory(struct __CFURL *url, unsigned int *packageType, unsigned int *packageCreator);

// function 'CFBundleGetPlugIn'
struct __CFBundle *CFBundleGetPlugIn(struct __CFBundle *bundle);

// function 'CFBundleGetTypeID'
unsigned long CFBundleGetTypeID(void);

// function 'CFBundleGetValueForInfoDictionaryKey'
id CFBundleGetValueForInfoDictionaryKey(struct __CFBundle *bundle, struct __CFString *key);

// function 'CFBundleGetVersionNumber'
unsigned long CFBundleGetVersionNumber(struct __CFBundle *bundle);

// function 'CFBundleIsExecutableLoaded'
Boolean CFBundleIsExecutableLoaded(struct __CFBundle *bundle);

// function 'CFBundleLoadExecutable'
Boolean CFBundleLoadExecutable(struct __CFBundle *bundle);

// function 'CFBundleOpenBundleResourceFiles'
long CFBundleOpenBundleResourceFiles(struct __CFBundle *bundle, short *refNum, short *localizedRefNum);

// function 'CFBundleOpenBundleResourceMap'
short CFBundleOpenBundleResourceMap(struct __CFBundle *bundle);

// function 'CFBundleUnloadExecutable'
void CFBundleUnloadExecutable(struct __CFBundle *bundle);

// function 'CFByteOrderGetCurrent'
int CFByteOrderGetCurrent(void);

// function 'CFCalendarCopyCurrent'
struct __CFCalendar *CFCalendarCopyCurrent(void);

// function 'CFCalendarCopyLocale'
struct __CFLocale *CFCalendarCopyLocale(struct __CFCalendar *calendar);

// function 'CFCalendarCopyTimeZone'
struct __CFTimeZone *CFCalendarCopyTimeZone(struct __CFCalendar *calendar);

// function 'CFCalendarCreateWithIdentifier'
struct __CFCalendar *CFCalendarCreateWithIdentifier(struct __CFAllocator *allocator, struct __CFString *identifier);

// function 'CFCalendarGetFirstWeekday'
long CFCalendarGetFirstWeekday(struct __CFCalendar *calendar);

// function 'CFCalendarGetIdentifier'
struct __CFString *CFCalendarGetIdentifier(struct __CFCalendar *calendar);

// function 'CFCalendarGetMaximumRangeOfUnit'
struct _CFRange CFCalendarGetMaximumRangeOfUnit(struct __CFCalendar *calendar, int unit);

// function 'CFCalendarGetMinimumDaysInFirstWeek'
long CFCalendarGetMinimumDaysInFirstWeek(struct __CFCalendar *calendar);

// function 'CFCalendarGetMinimumRangeOfUnit'
struct _CFRange CFCalendarGetMinimumRangeOfUnit(struct __CFCalendar *calendar, int unit);

// function 'CFCalendarGetOrdinalityOfUnit'
long CFCalendarGetOrdinalityOfUnit(struct __CFCalendar *calendar, int smallerUnit, int biggerUnit, double at);

// function 'CFCalendarGetRangeOfUnit'
struct _CFRange CFCalendarGetRangeOfUnit(struct __CFCalendar *calendar, int smallerUnit, int biggerUnit, double at);

// function 'CFCalendarGetTypeID'
unsigned long CFCalendarGetTypeID(void);

// function 'CFCalendarSetFirstWeekday'
void CFCalendarSetFirstWeekday(struct __CFCalendar *calendar, long wkdy);

// function 'CFCalendarSetLocale'
void CFCalendarSetLocale(struct __CFCalendar *calendar, struct __CFLocale *locale);

// function 'CFCalendarSetMinimumDaysInFirstWeek'
void CFCalendarSetMinimumDaysInFirstWeek(struct __CFCalendar *calendar, long mwd);

// function 'CFCalendarSetTimeZone'
void CFCalendarSetTimeZone(struct __CFCalendar *calendar, struct __CFTimeZone *tz);

// function 'CFCharacterSetAddCharactersInRange'
void CFCharacterSetAddCharactersInRange(struct __CFCharacterSet *theSet, struct _CFRange theRange);

// function 'CFCharacterSetAddCharactersInString'
void CFCharacterSetAddCharactersInString(struct __CFCharacterSet *theSet, struct __CFString *theString);

// function 'CFCharacterSetCreateBitmapRepresentation'
struct __CFData *CFCharacterSetCreateBitmapRepresentation(struct __CFAllocator *alloc, struct __CFCharacterSet *theSet);

// function 'CFCharacterSetCreateCopy'
struct __CFCharacterSet *CFCharacterSetCreateCopy(struct __CFAllocator *alloc, struct __CFCharacterSet *theSet);

// function 'CFCharacterSetCreateInvertedSet'
struct __CFCharacterSet *CFCharacterSetCreateInvertedSet(struct __CFAllocator *alloc, struct __CFCharacterSet *theSet);

// function 'CFCharacterSetCreateMutable'
struct __CFCharacterSet *CFCharacterSetCreateMutable(struct __CFAllocator *alloc);

// function 'CFCharacterSetCreateMutableCopy'
struct __CFCharacterSet *CFCharacterSetCreateMutableCopy(struct __CFAllocator *alloc, struct __CFCharacterSet *theSet);

// function 'CFCharacterSetCreateWithBitmapRepresentation'
struct __CFCharacterSet *CFCharacterSetCreateWithBitmapRepresentation(struct __CFAllocator *alloc, struct __CFData *theData);

// function 'CFCharacterSetCreateWithCharactersInRange'
struct __CFCharacterSet *CFCharacterSetCreateWithCharactersInRange(struct __CFAllocator *alloc, struct _CFRange theRange);

// function 'CFCharacterSetCreateWithCharactersInString'
struct __CFCharacterSet *CFCharacterSetCreateWithCharactersInString(struct __CFAllocator *alloc, struct __CFString *theString);

// function 'CFCharacterSetGetPredefined'
struct __CFCharacterSet *CFCharacterSetGetPredefined(int theSetIdentifier);

// function 'CFCharacterSetGetTypeID'
unsigned long CFCharacterSetGetTypeID(void);

// function 'CFCharacterSetHasMemberInPlane'
Boolean CFCharacterSetHasMemberInPlane(struct __CFCharacterSet *theSet, long thePlane);

// function 'CFCharacterSetIntersect'
void CFCharacterSetIntersect(struct __CFCharacterSet *theSet, struct __CFCharacterSet *theOtherSet);

// function 'CFCharacterSetInvert'
void CFCharacterSetInvert(struct __CFCharacterSet *theSet);

// function 'CFCharacterSetIsCharacterMember'
Boolean CFCharacterSetIsCharacterMember(struct __CFCharacterSet *theSet, unsigned short theChar);

// function 'CFCharacterSetIsLongCharacterMember'
Boolean CFCharacterSetIsLongCharacterMember(struct __CFCharacterSet *theSet, unsigned long theChar);

// function 'CFCharacterSetIsSupersetOfSet'
Boolean CFCharacterSetIsSupersetOfSet(struct __CFCharacterSet *theSet, struct __CFCharacterSet *theOtherset);

// function 'CFCharacterSetRemoveCharactersInRange'
void CFCharacterSetRemoveCharactersInRange(struct __CFCharacterSet *theSet, struct _CFRange theRange);

// function 'CFCharacterSetRemoveCharactersInString'
void CFCharacterSetRemoveCharactersInString(struct __CFCharacterSet *theSet, struct __CFString *theString);

// function 'CFCharacterSetUnion'
void CFCharacterSetUnion(struct __CFCharacterSet *theSet, struct __CFCharacterSet *theOtherSet);

// function 'CFConvertDoubleHostToSwapped'
struct _CFSwappedFloat64 CFConvertDoubleHostToSwapped(double arg);

// function 'CFConvertDoubleSwappedToHost'
double CFConvertDoubleSwappedToHost(struct _CFSwappedFloat64 arg);

// function 'CFConvertFloat32HostToSwapped'
struct _CFSwappedFloat32 CFConvertFloat32HostToSwapped(float arg);

// function 'CFConvertFloat32SwappedToHost'
float CFConvertFloat32SwappedToHost(struct _CFSwappedFloat32 arg);

// function 'CFConvertFloat64HostToSwapped'
struct _CFSwappedFloat64 CFConvertFloat64HostToSwapped(double arg);

// function 'CFConvertFloat64SwappedToHost'
double CFConvertFloat64SwappedToHost(struct _CFSwappedFloat64 arg);

// function 'CFConvertFloatHostToSwapped'
struct _CFSwappedFloat32 CFConvertFloatHostToSwapped(float arg);

// function 'CFConvertFloatSwappedToHost'
float CFConvertFloatSwappedToHost(struct _CFSwappedFloat32 arg);

// function 'CFCopyDescription'
struct __CFString *CFCopyDescription(id cf);

// function 'CFCopyTypeIDDescription'
struct __CFString *CFCopyTypeIDDescription(unsigned long type_id);

// function 'CFDataAppendBytes'
void CFDataAppendBytes(struct __CFData *theData, const UInt8* bytes, long length);

// function 'CFDataCreate'
struct __CFData *CFDataCreate(struct __CFAllocator *allocator, const UInt8* bytes, long length);

// function 'CFDataCreateCopy'
struct __CFData *CFDataCreateCopy(struct __CFAllocator *allocator, struct __CFData *theData);

// function 'CFDataCreateMutable'
struct __CFData *CFDataCreateMutable(struct __CFAllocator *allocator, long capacity);

// function 'CFDataCreateMutableCopy'
struct __CFData *CFDataCreateMutableCopy(struct __CFAllocator *allocator, long capacity, struct __CFData *theData);

// function 'CFDataCreateWithBytesNoCopy'
struct __CFData *CFDataCreateWithBytesNoCopy(struct __CFAllocator *allocator, const UInt8* bytes, long length, struct __CFAllocator *bytesDeallocator);

// function 'CFDataDeleteBytes'
void CFDataDeleteBytes(struct __CFData *theData, struct _CFRange range);

// function 'CFDataGetBytePtr'
const UInt8* CFDataGetBytePtr(struct __CFData *theData);

// function 'CFDataGetBytes'
void CFDataGetBytes(struct __CFData *theData, struct _CFRange range, UInt8* buffer);

// function 'CFDataGetLength'
long CFDataGetLength(struct __CFData *theData);

// function 'CFDataGetMutableBytePtr'
UInt8* CFDataGetMutableBytePtr(struct __CFData *theData);

// function 'CFDataGetTypeID'
unsigned long CFDataGetTypeID(void);

// function 'CFDataIncreaseLength'
void CFDataIncreaseLength(struct __CFData *theData, long extraLength);

// function 'CFDataReplaceBytes'
void CFDataReplaceBytes(struct __CFData *theData, struct _CFRange range, const UInt8* newBytes, long newLength);

// function 'CFDataSetLength'
void CFDataSetLength(struct __CFData *theData, long length);

// function 'CFDateCompare'
int CFDateCompare(struct __CFDate *theDate, struct __CFDate *otherDate, void *context);

// function 'CFDateCreate'
struct __CFDate *CFDateCreate(struct __CFAllocator *allocator, double at);

// function 'CFDateFormatterCopyProperty'
id CFDateFormatterCopyProperty(struct __CFDateFormatter *formatter, struct __CFString *key);

// function 'CFDateFormatterCreate'
struct __CFDateFormatter *CFDateFormatterCreate(struct __CFAllocator *allocator, struct __CFLocale *locale, int dateStyle, int timeStyle);

// function 'CFDateFormatterCreateDateFromString'
struct __CFDate *CFDateFormatterCreateDateFromString(struct __CFAllocator *allocator, struct __CFDateFormatter *formatter, struct __CFString *string, struct _CFRange *rangep);

// function 'CFDateFormatterCreateStringWithAbsoluteTime'
struct __CFString *CFDateFormatterCreateStringWithAbsoluteTime(struct __CFAllocator *allocator, struct __CFDateFormatter *formatter, double at);

// function 'CFDateFormatterCreateStringWithDate'
struct __CFString *CFDateFormatterCreateStringWithDate(struct __CFAllocator *allocator, struct __CFDateFormatter *formatter, struct __CFDate *date);

// function 'CFDateFormatterGetAbsoluteTimeFromString'
Boolean CFDateFormatterGetAbsoluteTimeFromString(struct __CFDateFormatter *formatter, struct __CFString *string, struct _CFRange *rangep, double *atp);

// function 'CFDateFormatterGetDateStyle'
int CFDateFormatterGetDateStyle(struct __CFDateFormatter *formatter);

// function 'CFDateFormatterGetFormat'
struct __CFString *CFDateFormatterGetFormat(struct __CFDateFormatter *formatter);

// function 'CFDateFormatterGetLocale'
struct __CFLocale *CFDateFormatterGetLocale(struct __CFDateFormatter *formatter);

// function 'CFDateFormatterGetTimeStyle'
int CFDateFormatterGetTimeStyle(struct __CFDateFormatter *formatter);

// function 'CFDateFormatterGetTypeID'
unsigned long CFDateFormatterGetTypeID(void);

// function 'CFDateFormatterSetFormat'
void CFDateFormatterSetFormat(struct __CFDateFormatter *formatter, struct __CFString *formatString);

// function 'CFDateFormatterSetProperty'
void CFDateFormatterSetProperty(struct __CFDateFormatter *formatter, struct __CFString *key, id value);

// function 'CFDateGetAbsoluteTime'
double CFDateGetAbsoluteTime(struct __CFDate *theDate);

// function 'CFDateGetTimeIntervalSinceDate'
double CFDateGetTimeIntervalSinceDate(struct __CFDate *theDate, struct __CFDate *otherDate);

// function 'CFDateGetTypeID'
unsigned long CFDateGetTypeID(void);

// function 'CFDictionaryAddValue'
void CFDictionaryAddValue(struct __CFDictionary *theDict, const void* key, const void* value);

// function 'CFDictionaryContainsKey'
Boolean CFDictionaryContainsKey(struct __CFDictionary *theDict, const void* key);

// function 'CFDictionaryContainsValue'
Boolean CFDictionaryContainsValue(struct __CFDictionary *theDict, const void* value);

// function 'CFDictionaryCreateCopy'
struct __CFDictionary *CFDictionaryCreateCopy(struct __CFAllocator *allocator, struct __CFDictionary *theDict);

// function 'CFDictionaryCreateMutableCopy'
struct __CFDictionary *CFDictionaryCreateMutableCopy(struct __CFAllocator *allocator, long capacity, struct __CFDictionary *theDict);

// function 'CFDictionaryGetCount'
long CFDictionaryGetCount(struct __CFDictionary *theDict);

// function 'CFDictionaryGetCountOfKey'
long CFDictionaryGetCountOfKey(struct __CFDictionary *theDict, const void* key);

// function 'CFDictionaryGetCountOfValue'
long CFDictionaryGetCountOfValue(struct __CFDictionary *theDict, const void* value);

// function 'CFDictionaryGetKeysAndValues'
void CFDictionaryGetKeysAndValues(struct __CFDictionary *theDict, const void** keys, const void** values);

// function 'CFDictionaryGetTypeID'
unsigned long CFDictionaryGetTypeID(void);

// function 'CFDictionaryGetValue'
const void* CFDictionaryGetValue(struct __CFDictionary *theDict, const void* key);

// function 'CFDictionaryGetValueIfPresent'
Boolean CFDictionaryGetValueIfPresent(struct __CFDictionary *theDict, const void* key, const void** value);

// function 'CFDictionaryRemoveAllValues'
void CFDictionaryRemoveAllValues(struct __CFDictionary *theDict);

// function 'CFDictionaryRemoveValue'
void CFDictionaryRemoveValue(struct __CFDictionary *theDict, const void* key);

// function 'CFDictionaryReplaceValue'
void CFDictionaryReplaceValue(struct __CFDictionary *theDict, const void* key, const void* value);

// function 'CFDictionarySetValue'
void CFDictionarySetValue(struct __CFDictionary *theDict, const void* key, const void* value);

// function 'CFEqual'
Boolean CFEqual(id cf1, id cf2);

// function 'CFGetAllocator'
struct __CFAllocator *CFGetAllocator(id cf);

// function 'CFGetRetainCount'
long CFGetRetainCount(id cf);

// function 'CFGetTypeID'
unsigned long CFGetTypeID(id cf);

// function 'CFGregorianDateGetAbsoluteTime'
double CFGregorianDateGetAbsoluteTime(struct _CFGregorianDate gdate, struct __CFTimeZone *tz);

// function 'CFGregorianDateIsValid'
Boolean CFGregorianDateIsValid(struct _CFGregorianDate gdate, unsigned long unitFlags);

// function 'CFHash'
unsigned long CFHash(id cf);

// function 'CFLocaleCopyAvailableLocaleIdentifiers'
struct __CFArray *CFLocaleCopyAvailableLocaleIdentifiers(void);

// function 'CFLocaleCopyCurrent'
struct __CFLocale *CFLocaleCopyCurrent(void);

// function 'CFLocaleCopyDisplayNameForPropertyValue'
struct __CFString *CFLocaleCopyDisplayNameForPropertyValue(struct __CFLocale *displayLocale, struct __CFString *key, struct __CFString *value);

// function 'CFLocaleCopyISOCountryCodes'
struct __CFArray *CFLocaleCopyISOCountryCodes(void);

// function 'CFLocaleCopyISOCurrencyCodes'
struct __CFArray *CFLocaleCopyISOCurrencyCodes(void);

// function 'CFLocaleCopyISOLanguageCodes'
struct __CFArray *CFLocaleCopyISOLanguageCodes(void);

// function 'CFLocaleCreate'
struct __CFLocale *CFLocaleCreate(struct __CFAllocator *allocator, struct __CFString *localeIdentifier);

// function 'CFLocaleCreateCanonicalLanguageIdentifierFromString'
struct __CFString *CFLocaleCreateCanonicalLanguageIdentifierFromString(struct __CFAllocator *allocator, struct __CFString *localeIdentifier);

// function 'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes'
struct __CFString *CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(struct __CFAllocator *allocator, short lcode, short rcode);

// function 'CFLocaleCreateCanonicalLocaleIdentifierFromString'
struct __CFString *CFLocaleCreateCanonicalLocaleIdentifierFromString(struct __CFAllocator *allocator, struct __CFString *localeIdentifier);

// function 'CFLocaleCreateComponentsFromLocaleIdentifier'
struct __CFDictionary *CFLocaleCreateComponentsFromLocaleIdentifier(struct __CFAllocator *allocator, struct __CFString *localeID);

// function 'CFLocaleCreateCopy'
struct __CFLocale *CFLocaleCreateCopy(struct __CFAllocator *allocator, struct __CFLocale *locale);

// function 'CFLocaleCreateLocaleIdentifierFromComponents'
struct __CFString *CFLocaleCreateLocaleIdentifierFromComponents(struct __CFAllocator *allocator, struct __CFDictionary *dictionary);

// function 'CFLocaleGetIdentifier'
struct __CFString *CFLocaleGetIdentifier(struct __CFLocale *locale);

// function 'CFLocaleGetSystem'
struct __CFLocale *CFLocaleGetSystem(void);

// function 'CFLocaleGetTypeID'
unsigned long CFLocaleGetTypeID(void);

// function 'CFLocaleGetValue'
id CFLocaleGetValue(struct __CFLocale *locale, struct __CFString *key);

// function 'CFMachPortCreateRunLoopSource'
struct __CFRunLoopSource *CFMachPortCreateRunLoopSource(struct __CFAllocator *allocator, struct __CFMachPort *port, long order);

// function 'CFMachPortGetPort'
unsigned int CFMachPortGetPort(struct __CFMachPort *port);

// function 'CFMachPortGetTypeID'
unsigned long CFMachPortGetTypeID(void);

// function 'CFMachPortInvalidate'
void CFMachPortInvalidate(struct __CFMachPort *port);

// function 'CFMachPortIsValid'
Boolean CFMachPortIsValid(struct __CFMachPort *port);

// function 'CFMakeCollectable'
id CFMakeCollectable(id cf);

// function 'CFMessagePortCreateRemote'
struct __CFMessagePort *CFMessagePortCreateRemote(struct __CFAllocator *allocator, struct __CFString *name);

// function 'CFMessagePortCreateRunLoopSource'
struct __CFRunLoopSource *CFMessagePortCreateRunLoopSource(struct __CFAllocator *allocator, struct __CFMessagePort *local, long order);

// function 'CFMessagePortGetName'
struct __CFString *CFMessagePortGetName(struct __CFMessagePort *ms);

// function 'CFMessagePortGetTypeID'
unsigned long CFMessagePortGetTypeID(void);

// function 'CFMessagePortInvalidate'
void CFMessagePortInvalidate(struct __CFMessagePort *ms);

// function 'CFMessagePortIsRemote'
Boolean CFMessagePortIsRemote(struct __CFMessagePort *ms);

// function 'CFMessagePortIsValid'
Boolean CFMessagePortIsValid(struct __CFMessagePort *ms);

// function 'CFMessagePortSendRequest'
long CFMessagePortSendRequest(struct __CFMessagePort *remote, long msgid, struct __CFData *data, double sendTimeout, double rcvTimeout, struct __CFString *replyMode, struct __CFData **returnData);

// function 'CFMessagePortSetName'
Boolean CFMessagePortSetName(struct __CFMessagePort *ms, struct __CFString *newName);

// function 'CFNotificationCenterGetDarwinNotifyCenter'
struct __CFNotificationCenter *CFNotificationCenterGetDarwinNotifyCenter(void);

// function 'CFNotificationCenterGetDistributedCenter'
struct __CFNotificationCenter *CFNotificationCenterGetDistributedCenter(void);

// function 'CFNotificationCenterGetLocalCenter'
struct __CFNotificationCenter *CFNotificationCenterGetLocalCenter(void);

// function 'CFNotificationCenterGetTypeID'
unsigned long CFNotificationCenterGetTypeID(void);

// function 'CFNotificationCenterPostNotification'
void CFNotificationCenterPostNotification(struct __CFNotificationCenter *center, struct __CFString *name, const void* object, struct __CFDictionary *userInfo, Boolean deliverImmediately);

// function 'CFNotificationCenterPostNotificationWithOptions'
void CFNotificationCenterPostNotificationWithOptions(struct __CFNotificationCenter *center, struct __CFString *name, const void* object, struct __CFDictionary *userInfo, unsigned long options);

// function 'CFNotificationCenterRemoveEveryObserver'
void CFNotificationCenterRemoveEveryObserver(struct __CFNotificationCenter *center, const void* observer);

// function 'CFNotificationCenterRemoveObserver'
void CFNotificationCenterRemoveObserver(struct __CFNotificationCenter *center, const void* observer, struct __CFString *name, const void* object);

// function 'CFNullGetTypeID'
unsigned long CFNullGetTypeID(void);

// function 'CFNumberCompare'
int CFNumberCompare(struct __CFNumber *number, struct __CFNumber *otherNumber, void *context);

// function 'CFNumberCreate'
struct __CFNumber *CFNumberCreate(struct __CFAllocator *allocator, int theType, const void* valuePtr);

// function 'CFNumberFormatterCopyProperty'
id CFNumberFormatterCopyProperty(struct __CFNumberFormatter *formatter, struct __CFString *key);

// function 'CFNumberFormatterCreate'
struct __CFNumberFormatter *CFNumberFormatterCreate(struct __CFAllocator *allocator, struct __CFLocale *locale, int style);

// function 'CFNumberFormatterCreateNumberFromString'
struct __CFNumber *CFNumberFormatterCreateNumberFromString(struct __CFAllocator *allocator, struct __CFNumberFormatter *formatter, struct __CFString *string, struct _CFRange *rangep, unsigned long options);

// function 'CFNumberFormatterCreateStringWithNumber'
struct __CFString *CFNumberFormatterCreateStringWithNumber(struct __CFAllocator *allocator, struct __CFNumberFormatter *formatter, struct __CFNumber *number);

// function 'CFNumberFormatterCreateStringWithValue'
struct __CFString *CFNumberFormatterCreateStringWithValue(struct __CFAllocator *allocator, struct __CFNumberFormatter *formatter, int numberType, const void* valuePtr);

// function 'CFNumberFormatterGetDecimalInfoForCurrencyCode'
Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(struct __CFString *currencyCode, int *defaultFractionDigits, double *roundingIncrement);

// function 'CFNumberFormatterGetFormat'
struct __CFString *CFNumberFormatterGetFormat(struct __CFNumberFormatter *formatter);

// function 'CFNumberFormatterGetLocale'
struct __CFLocale *CFNumberFormatterGetLocale(struct __CFNumberFormatter *formatter);

// function 'CFNumberFormatterGetStyle'
int CFNumberFormatterGetStyle(struct __CFNumberFormatter *formatter);

// function 'CFNumberFormatterGetTypeID'
unsigned long CFNumberFormatterGetTypeID(void);

// function 'CFNumberFormatterGetValueFromString'
Boolean CFNumberFormatterGetValueFromString(struct __CFNumberFormatter *formatter, struct __CFString *string, struct _CFRange *rangep, int numberType, void *valuePtr);

// function 'CFNumberFormatterSetFormat'
void CFNumberFormatterSetFormat(struct __CFNumberFormatter *formatter, struct __CFString *formatString);

// function 'CFNumberFormatterSetProperty'
void CFNumberFormatterSetProperty(struct __CFNumberFormatter *formatter, struct __CFString *key, id value);

// function 'CFNumberGetByteSize'
long CFNumberGetByteSize(struct __CFNumber *number);

// function 'CFNumberGetType'
int CFNumberGetType(struct __CFNumber *number);

// function 'CFNumberGetTypeID'
unsigned long CFNumberGetTypeID(void);

// function 'CFNumberGetValue'
Boolean CFNumberGetValue(struct __CFNumber *number, int theType, void *valuePtr);

// function 'CFNumberIsFloatType'
Boolean CFNumberIsFloatType(struct __CFNumber *number);

// function 'CFPlugInAddInstanceForFactory'
void CFPlugInAddInstanceForFactory(struct __CFUUID *factoryID);

// function 'CFPlugInCreate'
struct __CFBundle *CFPlugInCreate(struct __CFAllocator *allocator, struct __CFURL *plugInURL);

// function 'CFPlugInFindFactoriesForPlugInType'
struct __CFArray *CFPlugInFindFactoriesForPlugInType(struct __CFUUID *typeUUID);

// function 'CFPlugInFindFactoriesForPlugInTypeInPlugIn'
struct __CFArray *CFPlugInFindFactoriesForPlugInTypeInPlugIn(struct __CFUUID *typeUUID, struct __CFBundle *plugIn);

// function 'CFPlugInGetBundle'
struct __CFBundle *CFPlugInGetBundle(struct __CFBundle *plugIn);

// function 'CFPlugInGetTypeID'
unsigned long CFPlugInGetTypeID(void);

// function 'CFPlugInInstanceCreate'
void *CFPlugInInstanceCreate(struct __CFAllocator *allocator, struct __CFUUID *factoryUUID, struct __CFUUID *typeUUID);

// function 'CFPlugInInstanceGetFactoryName'
struct __CFString *CFPlugInInstanceGetFactoryName(struct __CFPlugInInstance *instance);

// function 'CFPlugInInstanceGetInstanceData'
void *CFPlugInInstanceGetInstanceData(struct __CFPlugInInstance *instance);

// function 'CFPlugInInstanceGetInterfaceFunctionTable'
Boolean CFPlugInInstanceGetInterfaceFunctionTable(struct __CFPlugInInstance *instance, struct __CFString *interfaceName, void **ftbl);

// function 'CFPlugInInstanceGetTypeID'
unsigned long CFPlugInInstanceGetTypeID(void);

// function 'CFPlugInIsLoadOnDemand'
Boolean CFPlugInIsLoadOnDemand(struct __CFBundle *plugIn);

// function 'CFPlugInRegisterFactoryFunctionByName'
Boolean CFPlugInRegisterFactoryFunctionByName(struct __CFUUID *factoryUUID, struct __CFBundle *plugIn, struct __CFString *functionName);

// function 'CFPlugInRegisterPlugInType'
Boolean CFPlugInRegisterPlugInType(struct __CFUUID *factoryUUID, struct __CFUUID *typeUUID);

// function 'CFPlugInRemoveInstanceForFactory'
void CFPlugInRemoveInstanceForFactory(struct __CFUUID *factoryID);

// function 'CFPlugInSetLoadOnDemand'
void CFPlugInSetLoadOnDemand(struct __CFBundle *plugIn, Boolean flag);

// function 'CFPlugInUnregisterFactory'
Boolean CFPlugInUnregisterFactory(struct __CFUUID *factoryUUID);

// function 'CFPlugInUnregisterPlugInType'
Boolean CFPlugInUnregisterPlugInType(struct __CFUUID *factoryUUID, struct __CFUUID *typeUUID);

// function 'CFPreferencesAddSuitePreferencesToApp'
void CFPreferencesAddSuitePreferencesToApp(struct __CFString *applicationID, struct __CFString *suiteID);

// function 'CFPreferencesAppSynchronize'
Boolean CFPreferencesAppSynchronize(struct __CFString *applicationID);

// function 'CFPreferencesAppValueIsForced'
Boolean CFPreferencesAppValueIsForced(struct __CFString *key, struct __CFString *applicationID);

// function 'CFPreferencesCopyAppValue'
id CFPreferencesCopyAppValue(struct __CFString *key, struct __CFString *applicationID);

// function 'CFPreferencesCopyApplicationList'
struct __CFArray *CFPreferencesCopyApplicationList(struct __CFString *userName, struct __CFString *hostName);

// function 'CFPreferencesCopyKeyList'
struct __CFArray *CFPreferencesCopyKeyList(struct __CFString *applicationID, struct __CFString *userName, struct __CFString *hostName);

// function 'CFPreferencesCopyMultiple'
struct __CFDictionary *CFPreferencesCopyMultiple(struct __CFArray *keysToFetch, struct __CFString *applicationID, struct __CFString *userName, struct __CFString *hostName);

// function 'CFPreferencesCopyValue'
id CFPreferencesCopyValue(struct __CFString *key, struct __CFString *applicationID, struct __CFString *userName, struct __CFString *hostName);

// function 'CFPreferencesGetAppBooleanValue'
Boolean CFPreferencesGetAppBooleanValue(struct __CFString *key, struct __CFString *applicationID, Boolean* keyExistsAndHasValidFormat);

// function 'CFPreferencesGetAppIntegerValue'
long CFPreferencesGetAppIntegerValue(struct __CFString *key, struct __CFString *applicationID, Boolean* keyExistsAndHasValidFormat);

// function 'CFPreferencesRemoveSuitePreferencesFromApp'
void CFPreferencesRemoveSuitePreferencesFromApp(struct __CFString *applicationID, struct __CFString *suiteID);

// function 'CFPreferencesSetAppValue'
void CFPreferencesSetAppValue(struct __CFString *key, id value, struct __CFString *applicationID);

// function 'CFPreferencesSetMultiple'
void CFPreferencesSetMultiple(struct __CFDictionary *keysToSet, struct __CFArray *keysToRemove, struct __CFString *applicationID, struct __CFString *userName, struct __CFString *hostName);

// function 'CFPreferencesSetValue'
void CFPreferencesSetValue(struct __CFString *key, id value, struct __CFString *applicationID, struct __CFString *userName, struct __CFString *hostName);

// function 'CFPreferencesSynchronize'
Boolean CFPreferencesSynchronize(struct __CFString *applicationID, struct __CFString *userName, struct __CFString *hostName);

// function 'CFPropertyListCreateDeepCopy'
id CFPropertyListCreateDeepCopy(struct __CFAllocator *allocator, id propertyList, unsigned long mutabilityOption);

// function 'CFPropertyListCreateFromStream'
id CFPropertyListCreateFromStream(struct __CFAllocator *allocator, struct __CFReadStream *stream, long streamLength, unsigned long mutabilityOption, int *format, struct __CFString **errorString);

// function 'CFPropertyListCreateFromXMLData'
id CFPropertyListCreateFromXMLData(struct __CFAllocator *allocator, struct __CFData *xmlData, unsigned long mutabilityOption, struct __CFString **errorString);

// function 'CFPropertyListCreateXMLData'
struct __CFData *CFPropertyListCreateXMLData(struct __CFAllocator *allocator, id propertyList);

// function 'CFPropertyListIsValid'
Boolean CFPropertyListIsValid(id plist, int format);

// function 'CFPropertyListWriteToStream'
long CFPropertyListWriteToStream(id propertyList, struct __CFWriteStream *stream, int format, struct __CFString **errorString);

// function 'CFRangeMake'
struct _CFRange CFRangeMake(long loc, long len);

// function 'CFReadStreamClose'
void CFReadStreamClose(struct __CFReadStream *stream);

// function 'CFReadStreamCopyProperty'
id CFReadStreamCopyProperty(struct __CFReadStream *stream, struct __CFString *propertyName);

// function 'CFReadStreamCreateWithBytesNoCopy'
struct __CFReadStream *CFReadStreamCreateWithBytesNoCopy(struct __CFAllocator *alloc, const UInt8* bytes, long length, struct __CFAllocator *bytesDeallocator);

// function 'CFReadStreamCreateWithFile'
struct __CFReadStream *CFReadStreamCreateWithFile(struct __CFAllocator *alloc, struct __CFURL *fileURL);

// function 'CFReadStreamGetBuffer'
const UInt8* CFReadStreamGetBuffer(struct __CFReadStream *stream, long maxBytesToRead, int *numBytesRead);

// function 'CFReadStreamGetError'
struct _CFStreamError CFReadStreamGetError(struct __CFReadStream *stream);

// function 'CFReadStreamGetStatus'
int CFReadStreamGetStatus(struct __CFReadStream *stream);

// function 'CFReadStreamGetTypeID'
unsigned long CFReadStreamGetTypeID(void);

// function 'CFReadStreamHasBytesAvailable'
Boolean CFReadStreamHasBytesAvailable(struct __CFReadStream *stream);

// function 'CFReadStreamOpen'
Boolean CFReadStreamOpen(struct __CFReadStream *stream);

// function 'CFReadStreamRead'
long CFReadStreamRead(struct __CFReadStream *stream, UInt8* buffer, long bufferLength);

// function 'CFReadStreamScheduleWithRunLoop'
void CFReadStreamScheduleWithRunLoop(struct __CFReadStream *stream, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFReadStreamSetProperty'
Boolean CFReadStreamSetProperty(struct __CFReadStream *stream, struct __CFString *propertyName, id propertyValue);

// function 'CFReadStreamUnscheduleFromRunLoop'
void CFReadStreamUnscheduleFromRunLoop(struct __CFReadStream *stream, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFRelease'
void CFRelease(id cf);

// function 'CFRetain'
id CFRetain(id cf);

// function 'CFRunLoopAddCommonMode'
void CFRunLoopAddCommonMode(struct __CFRunLoop *rl, struct __CFString *mode);

// function 'CFRunLoopAddObserver'
void CFRunLoopAddObserver(struct __CFRunLoop *rl, struct __CFRunLoopObserver *observer, struct __CFString *mode);

// function 'CFRunLoopAddSource'
void CFRunLoopAddSource(struct __CFRunLoop *rl, struct __CFRunLoopSource *source, struct __CFString *mode);

// function 'CFRunLoopAddTimer'
void CFRunLoopAddTimer(struct __CFRunLoop *rl, struct __CFRunLoopTimer *timer, struct __CFString *mode);

// function 'CFRunLoopContainsObserver'
Boolean CFRunLoopContainsObserver(struct __CFRunLoop *rl, struct __CFRunLoopObserver *observer, struct __CFString *mode);

// function 'CFRunLoopContainsSource'
Boolean CFRunLoopContainsSource(struct __CFRunLoop *rl, struct __CFRunLoopSource *source, struct __CFString *mode);

// function 'CFRunLoopContainsTimer'
Boolean CFRunLoopContainsTimer(struct __CFRunLoop *rl, struct __CFRunLoopTimer *timer, struct __CFString *mode);

// function 'CFRunLoopCopyAllModes'
struct __CFArray *CFRunLoopCopyAllModes(struct __CFRunLoop *rl);

// function 'CFRunLoopCopyCurrentMode'
struct __CFString *CFRunLoopCopyCurrentMode(struct __CFRunLoop *rl);

// function 'CFRunLoopGetCurrent'
struct __CFRunLoop *CFRunLoopGetCurrent(void);

// function 'CFRunLoopGetNextTimerFireDate'
double CFRunLoopGetNextTimerFireDate(struct __CFRunLoop *rl, struct __CFString *mode);

// function 'CFRunLoopGetTypeID'
unsigned long CFRunLoopGetTypeID(void);

// function 'CFRunLoopIsWaiting'
Boolean CFRunLoopIsWaiting(struct __CFRunLoop *rl);

// function 'CFRunLoopObserverDoesRepeat'
Boolean CFRunLoopObserverDoesRepeat(struct __CFRunLoopObserver *observer);

// function 'CFRunLoopObserverGetActivities'
unsigned long CFRunLoopObserverGetActivities(struct __CFRunLoopObserver *observer);

// function 'CFRunLoopObserverGetOrder'
long CFRunLoopObserverGetOrder(struct __CFRunLoopObserver *observer);

// function 'CFRunLoopObserverGetTypeID'
unsigned long CFRunLoopObserverGetTypeID(void);

// function 'CFRunLoopObserverInvalidate'
void CFRunLoopObserverInvalidate(struct __CFRunLoopObserver *observer);

// function 'CFRunLoopObserverIsValid'
Boolean CFRunLoopObserverIsValid(struct __CFRunLoopObserver *observer);

// function 'CFRunLoopRemoveObserver'
void CFRunLoopRemoveObserver(struct __CFRunLoop *rl, struct __CFRunLoopObserver *observer, struct __CFString *mode);

// function 'CFRunLoopRemoveSource'
void CFRunLoopRemoveSource(struct __CFRunLoop *rl, struct __CFRunLoopSource *source, struct __CFString *mode);

// function 'CFRunLoopRemoveTimer'
void CFRunLoopRemoveTimer(struct __CFRunLoop *rl, struct __CFRunLoopTimer *timer, struct __CFString *mode);

// function 'CFRunLoopRun'
void CFRunLoopRun(void);

// function 'CFRunLoopRunInMode'
long CFRunLoopRunInMode(struct __CFString *mode, double seconds, Boolean returnAfterSourceHandled);

// function 'CFRunLoopSourceGetOrder'
long CFRunLoopSourceGetOrder(struct __CFRunLoopSource *source);

// function 'CFRunLoopSourceGetTypeID'
unsigned long CFRunLoopSourceGetTypeID(void);

// function 'CFRunLoopSourceInvalidate'
void CFRunLoopSourceInvalidate(struct __CFRunLoopSource *source);

// function 'CFRunLoopSourceIsValid'
Boolean CFRunLoopSourceIsValid(struct __CFRunLoopSource *source);

// function 'CFRunLoopSourceSignal'
void CFRunLoopSourceSignal(struct __CFRunLoopSource *source);

// function 'CFRunLoopStop'
void CFRunLoopStop(struct __CFRunLoop *rl);

// function 'CFRunLoopTimerDoesRepeat'
Boolean CFRunLoopTimerDoesRepeat(struct __CFRunLoopTimer *timer);

// function 'CFRunLoopTimerGetInterval'
double CFRunLoopTimerGetInterval(struct __CFRunLoopTimer *timer);

// function 'CFRunLoopTimerGetNextFireDate'
double CFRunLoopTimerGetNextFireDate(struct __CFRunLoopTimer *timer);

// function 'CFRunLoopTimerGetOrder'
long CFRunLoopTimerGetOrder(struct __CFRunLoopTimer *timer);

// function 'CFRunLoopTimerGetTypeID'
unsigned long CFRunLoopTimerGetTypeID(void);

// function 'CFRunLoopTimerInvalidate'
void CFRunLoopTimerInvalidate(struct __CFRunLoopTimer *timer);

// function 'CFRunLoopTimerIsValid'
Boolean CFRunLoopTimerIsValid(struct __CFRunLoopTimer *timer);

// function 'CFRunLoopTimerSetNextFireDate'
void CFRunLoopTimerSetNextFireDate(struct __CFRunLoopTimer *timer, double fireDate);

// function 'CFRunLoopWakeUp'
void CFRunLoopWakeUp(struct __CFRunLoop *rl);

// function 'CFSetAddValue'
void CFSetAddValue(struct __CFSet *theSet, const void* value);

// function 'CFSetContainsValue'
Boolean CFSetContainsValue(struct __CFSet *theSet, const void* value);

// function 'CFSetCreateCopy'
struct __CFSet *CFSetCreateCopy(struct __CFAllocator *allocator, struct __CFSet *theSet);

// function 'CFSetCreateMutableCopy'
struct __CFSet *CFSetCreateMutableCopy(struct __CFAllocator *allocator, long capacity, struct __CFSet *theSet);

// function 'CFSetGetCount'
long CFSetGetCount(struct __CFSet *theSet);

// function 'CFSetGetCountOfValue'
long CFSetGetCountOfValue(struct __CFSet *theSet, const void* value);

// function 'CFSetGetTypeID'
unsigned long CFSetGetTypeID(void);

// function 'CFSetGetValue'
const void* CFSetGetValue(struct __CFSet *theSet, const void* value);

// function 'CFSetGetValueIfPresent'
Boolean CFSetGetValueIfPresent(struct __CFSet *theSet, const void* candidate, const void** value);

// function 'CFSetGetValues'
void CFSetGetValues(struct __CFSet *theSet, const void** values);

// function 'CFSetRemoveAllValues'
void CFSetRemoveAllValues(struct __CFSet *theSet);

// function 'CFSetRemoveValue'
void CFSetRemoveValue(struct __CFSet *theSet, const void* value);

// function 'CFSetReplaceValue'
void CFSetReplaceValue(struct __CFSet *theSet, const void* value);

// function 'CFSetSetValue'
void CFSetSetValue(struct __CFSet *theSet, const void* value);

// function 'CFShow'
void CFShow(id obj);

// function 'CFShowStr'
void CFShowStr(struct __CFString *str);

// function 'CFSocketConnectToAddress'
int CFSocketConnectToAddress(struct __CFSocket *s, struct __CFData *address, double timeout);

// function 'CFSocketCopyAddress'
struct __CFData *CFSocketCopyAddress(struct __CFSocket *s);

// function 'CFSocketCopyPeerAddress'
struct __CFData *CFSocketCopyPeerAddress(struct __CFSocket *s);

// function 'CFSocketCopyRegisteredSocketSignature'
int CFSocketCopyRegisteredSocketSignature(const struct _CFSocketSignature* nameServerSignature, double timeout, struct __CFString *name, struct _CFSocketSignature *signature, struct __CFData **nameServerAddress);

// function 'CFSocketCopyRegisteredValue'
int CFSocketCopyRegisteredValue(const struct _CFSocketSignature* nameServerSignature, double timeout, struct __CFString *name, void **value, struct __CFData **nameServerAddress);

// function 'CFSocketCreateRunLoopSource'
struct __CFRunLoopSource *CFSocketCreateRunLoopSource(struct __CFAllocator *allocator, struct __CFSocket *s, long order);

// function 'CFSocketDisableCallBacks'
void CFSocketDisableCallBacks(struct __CFSocket *s, unsigned long callBackTypes);

// function 'CFSocketEnableCallBacks'
void CFSocketEnableCallBacks(struct __CFSocket *s, unsigned long callBackTypes);

// function 'CFSocketGetDefaultNameRegistryPortNumber'
unsigned short CFSocketGetDefaultNameRegistryPortNumber(void);

// function 'CFSocketGetNative'
int CFSocketGetNative(struct __CFSocket *s);

// function 'CFSocketGetSocketFlags'
unsigned long CFSocketGetSocketFlags(struct __CFSocket *s);

// function 'CFSocketGetTypeID'
unsigned long CFSocketGetTypeID(void);

// function 'CFSocketInvalidate'
void CFSocketInvalidate(struct __CFSocket *s);

// function 'CFSocketIsValid'
Boolean CFSocketIsValid(struct __CFSocket *s);

// function 'CFSocketRegisterSocketSignature'
int CFSocketRegisterSocketSignature(const struct _CFSocketSignature* nameServerSignature, double timeout, struct __CFString *name, const struct _CFSocketSignature* signature);

// function 'CFSocketRegisterValue'
int CFSocketRegisterValue(const struct _CFSocketSignature* nameServerSignature, double timeout, struct __CFString *name, id value);

// function 'CFSocketSendData'
int CFSocketSendData(struct __CFSocket *s, struct __CFData *address, struct __CFData *data, double timeout);

// function 'CFSocketSetAddress'
int CFSocketSetAddress(struct __CFSocket *s, struct __CFData *address);

// function 'CFSocketSetDefaultNameRegistryPortNumber'
void CFSocketSetDefaultNameRegistryPortNumber(unsigned short port);

// function 'CFSocketSetSocketFlags'
void CFSocketSetSocketFlags(struct __CFSocket *s, unsigned long flags);

// function 'CFSocketUnregister'
int CFSocketUnregister(const struct _CFSocketSignature* nameServerSignature, double timeout, struct __CFString *name);

// function 'CFStreamCreatePairWithPeerSocketSignature'
void CFStreamCreatePairWithPeerSocketSignature(struct __CFAllocator *alloc, const struct _CFSocketSignature* signature, struct __CFReadStream **readStream, struct __CFWriteStream **writeStream);

// function 'CFStreamCreatePairWithSocket'
void CFStreamCreatePairWithSocket(struct __CFAllocator *alloc, int sock, struct __CFReadStream **readStream, struct __CFWriteStream **writeStream);

// function 'CFStreamCreatePairWithSocketToHost'
void CFStreamCreatePairWithSocketToHost(struct __CFAllocator *alloc, struct __CFString *host, unsigned long port, struct __CFReadStream **readStream, struct __CFWriteStream **writeStream);

// function 'CFStringAppend'
void CFStringAppend(struct __CFString *theString, struct __CFString *appendedString);

// function 'CFStringAppendCString'
void CFStringAppendCString(struct __CFString *theString, const char* cStr, unsigned long encoding);

// function 'CFStringAppendCharacters'
void CFStringAppendCharacters(struct __CFString *theString, const unsigned short* chars, long numChars);

// function 'CFStringAppendPascalString'
void CFStringAppendPascalString(struct __CFString *theString, ConstStr255Param pStr, unsigned long encoding);

// function 'CFStringCapitalize'
void CFStringCapitalize(struct __CFString *theString, struct __CFLocale *locale);

// function 'CFStringCompare'
int CFStringCompare(struct __CFString *theString1, struct __CFString *theString2, unsigned long compareOptions);

// function 'CFStringCompareWithOptions'
int CFStringCompareWithOptions(struct __CFString *theString1, struct __CFString *theString2, struct _CFRange rangeToCompare, unsigned long compareOptions);

// function 'CFStringConvertEncodingToIANACharSetName'
struct __CFString *CFStringConvertEncodingToIANACharSetName(unsigned long encoding);

// function 'CFStringConvertEncodingToNSStringEncoding'
unsigned long CFStringConvertEncodingToNSStringEncoding(unsigned long encoding);

// function 'CFStringConvertEncodingToWindowsCodepage'
unsigned long CFStringConvertEncodingToWindowsCodepage(unsigned long encoding);

// function 'CFStringConvertIANACharSetNameToEncoding'
unsigned long CFStringConvertIANACharSetNameToEncoding(struct __CFString *theString);

// function 'CFStringConvertNSStringEncodingToEncoding'
unsigned long CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);

// function 'CFStringConvertWindowsCodepageToEncoding'
unsigned long CFStringConvertWindowsCodepageToEncoding(unsigned long codepage);

// function 'CFStringCreateArrayBySeparatingStrings'
struct __CFArray *CFStringCreateArrayBySeparatingStrings(struct __CFAllocator *alloc, struct __CFString *theString, struct __CFString *separatorString);

// function 'CFStringCreateArrayWithFindResults'
struct __CFArray *CFStringCreateArrayWithFindResults(struct __CFAllocator *alloc, struct __CFString *theString, struct __CFString *stringToFind, struct _CFRange rangeToSearch, unsigned long compareOptions);

// function 'CFStringCreateByCombiningStrings'
struct __CFString *CFStringCreateByCombiningStrings(struct __CFAllocator *alloc, struct __CFArray *theArray, struct __CFString *separatorString);

// function 'CFStringCreateCopy'
struct __CFString *CFStringCreateCopy(struct __CFAllocator *alloc, struct __CFString *theString);

// function 'CFStringCreateExternalRepresentation'
struct __CFData *CFStringCreateExternalRepresentation(struct __CFAllocator *alloc, struct __CFString *theString, unsigned long encoding, unsigned char lossByte);

// function 'CFStringCreateFromExternalRepresentation'
struct __CFString *CFStringCreateFromExternalRepresentation(struct __CFAllocator *alloc, struct __CFData *data, unsigned long encoding);

// function 'CFStringCreateMutable'
struct __CFString *CFStringCreateMutable(struct __CFAllocator *alloc, long maxLength);

// function 'CFStringCreateMutableCopy'
struct __CFString *CFStringCreateMutableCopy(struct __CFAllocator *alloc, long maxLength, struct __CFString *theString);

// function 'CFStringCreateMutableWithExternalCharactersNoCopy'
struct __CFString *CFStringCreateMutableWithExternalCharactersNoCopy(struct __CFAllocator *alloc, unsigned short *chars, long numChars, long capacity, struct __CFAllocator *externalCharactersAllocator);

// function 'CFStringCreateWithBytes'
struct __CFString *CFStringCreateWithBytes(struct __CFAllocator *alloc, const UInt8* bytes, long numBytes, unsigned long encoding, Boolean isExternalRepresentation);

// function 'CFStringCreateWithCString'
struct __CFString *CFStringCreateWithCString(struct __CFAllocator *alloc, const char* cStr, unsigned long encoding);

// function 'CFStringCreateWithCStringNoCopy'
struct __CFString *CFStringCreateWithCStringNoCopy(struct __CFAllocator *alloc, const char* cStr, unsigned long encoding, struct __CFAllocator *contentsDeallocator);

// function 'CFStringCreateWithCharacters'
struct __CFString *CFStringCreateWithCharacters(struct __CFAllocator *alloc, const unsigned short* chars, long numChars);

// function 'CFStringCreateWithCharactersNoCopy'
struct __CFString *CFStringCreateWithCharactersNoCopy(struct __CFAllocator *alloc, const unsigned short* chars, long numChars, struct __CFAllocator *contentsDeallocator);

// function 'CFStringCreateWithFileSystemRepresentation'
struct __CFString *CFStringCreateWithFileSystemRepresentation(struct __CFAllocator *alloc, const char* buffer);

// function 'CFStringCreateWithPascalString'
struct __CFString *CFStringCreateWithPascalString(struct __CFAllocator *alloc, ConstStr255Param pStr, unsigned long encoding);

// function 'CFStringCreateWithPascalStringNoCopy'
struct __CFString *CFStringCreateWithPascalStringNoCopy(struct __CFAllocator *alloc, ConstStr255Param pStr, unsigned long encoding, struct __CFAllocator *contentsDeallocator);

// function 'CFStringCreateWithSubstring'
struct __CFString *CFStringCreateWithSubstring(struct __CFAllocator *alloc, struct __CFString *str, struct _CFRange range);

// function 'CFStringDelete'
void CFStringDelete(struct __CFString *theString, struct _CFRange range);

// function 'CFStringFind'
struct _CFRange CFStringFind(struct __CFString *theString, struct __CFString *stringToFind, unsigned long compareOptions);

// function 'CFStringFindAndReplace'
long CFStringFindAndReplace(struct __CFString *theString, struct __CFString *stringToFind, struct __CFString *replacementString, struct _CFRange rangeToSearch, unsigned long compareOptions);

// function 'CFStringFindCharacterFromSet'
Boolean CFStringFindCharacterFromSet(struct __CFString *theString, struct __CFCharacterSet *theSet, struct _CFRange rangeToSearch, unsigned long searchOptions, struct _CFRange *result);

// function 'CFStringFindWithOptions'
Boolean CFStringFindWithOptions(struct __CFString *theString, struct __CFString *stringToFind, struct _CFRange rangeToSearch, unsigned long searchOptions, struct _CFRange *result);

// function 'CFStringGetBytes'
long CFStringGetBytes(struct __CFString *theString, struct _CFRange range, unsigned long encoding, unsigned char lossByte, Boolean isExternalRepresentation, UInt8* buffer, long maxBufLen, int *usedBufLen);

// function 'CFStringGetCString'
Boolean CFStringGetCString(struct __CFString *theString, char* buffer, long bufferSize, unsigned long encoding);

// function 'CFStringGetCStringPtr'
const char* CFStringGetCStringPtr(struct __CFString *theString, unsigned long encoding);

// function 'CFStringGetCharacterAtIndex'
unsigned short CFStringGetCharacterAtIndex(struct __CFString *theString, long idx);

// function 'CFStringGetCharacters'
void CFStringGetCharacters(struct __CFString *theString, struct _CFRange range, unsigned short *buffer);

// function 'CFStringGetCharactersPtr'
const unsigned short* CFStringGetCharactersPtr(struct __CFString *theString);

// function 'CFStringGetDoubleValue'
double CFStringGetDoubleValue(struct __CFString *str);

// function 'CFStringGetFastestEncoding'
unsigned long CFStringGetFastestEncoding(struct __CFString *theString);

// function 'CFStringGetFileSystemRepresentation'
Boolean CFStringGetFileSystemRepresentation(struct __CFString *string, char* buffer, long maxBufLen);

// function 'CFStringGetIntValue'
long CFStringGetIntValue(struct __CFString *str);

// function 'CFStringGetLength'
long CFStringGetLength(struct __CFString *theString);

// function 'CFStringGetLineBounds'
void CFStringGetLineBounds(struct __CFString *theString, struct _CFRange range, int *lineBeginIndex, int *lineEndIndex, int *contentsEndIndex);

// function 'CFStringGetListOfAvailableEncodings'
const unsigned int* CFStringGetListOfAvailableEncodings(void);

// function 'CFStringGetMaximumSizeForEncoding'
long CFStringGetMaximumSizeForEncoding(long length, unsigned long encoding);

// function 'CFStringGetMaximumSizeOfFileSystemRepresentation'
long CFStringGetMaximumSizeOfFileSystemRepresentation(struct __CFString *string);

// function 'CFStringGetMostCompatibleMacStringEncoding'
unsigned long CFStringGetMostCompatibleMacStringEncoding(unsigned long encoding);

// function 'CFStringGetNameOfEncoding'
struct __CFString *CFStringGetNameOfEncoding(unsigned long encoding);

// function 'CFStringGetPascalString'
Boolean CFStringGetPascalString(struct __CFString *theString, StringPtr buffer, long bufferSize, unsigned long encoding);

// function 'CFStringGetPascalStringPtr'
ConstStringPtr CFStringGetPascalStringPtr(struct __CFString *theString, unsigned long encoding);

// function 'CFStringGetRangeOfComposedCharactersAtIndex'
struct _CFRange CFStringGetRangeOfComposedCharactersAtIndex(struct __CFString *theString, long theIndex);

// function 'CFStringGetSmallestEncoding'
unsigned long CFStringGetSmallestEncoding(struct __CFString *theString);

// function 'CFStringGetSystemEncoding'
unsigned long CFStringGetSystemEncoding(void);

// function 'CFStringGetTypeID'
unsigned long CFStringGetTypeID(void);

// function 'CFStringHasPrefix'
Boolean CFStringHasPrefix(struct __CFString *theString, struct __CFString *prefix);

// function 'CFStringHasSuffix'
Boolean CFStringHasSuffix(struct __CFString *theString, struct __CFString *suffix);

// function 'CFStringInsert'
void CFStringInsert(struct __CFString *str, long idx, struct __CFString *insertedStr);

// function 'CFStringIsEncodingAvailable'
Boolean CFStringIsEncodingAvailable(unsigned long encoding);

// function 'CFStringLowercase'
void CFStringLowercase(struct __CFString *theString, struct __CFLocale *locale);

// function 'CFStringNormalize'
void CFStringNormalize(struct __CFString *theString, int theForm);

// function 'CFStringPad'
void CFStringPad(struct __CFString *theString, struct __CFString *padString, long length, long indexIntoPad);

// function 'CFStringReplace'
void CFStringReplace(struct __CFString *theString, struct _CFRange range, struct __CFString *replacement);

// function 'CFStringReplaceAll'
void CFStringReplaceAll(struct __CFString *theString, struct __CFString *replacement);

// function 'CFStringSetExternalCharactersNoCopy'
void CFStringSetExternalCharactersNoCopy(struct __CFString *theString, unsigned short *chars, long length, long capacity);

// function 'CFStringTransform'
Boolean CFStringTransform(struct __CFString *string, struct _CFRange *range, struct __CFString *transform, Boolean reverse);

// function 'CFStringTrim'
void CFStringTrim(struct __CFString *theString, struct __CFString *trimString);

// function 'CFStringTrimWhitespace'
void CFStringTrimWhitespace(struct __CFString *theString);

// function 'CFStringUppercase'
void CFStringUppercase(struct __CFString *theString, struct __CFLocale *locale);

// function 'CFSwapInt16'
unsigned short CFSwapInt16(unsigned short arg);

// function 'CFSwapInt16BigToHost'
unsigned short CFSwapInt16BigToHost(unsigned short arg);

// function 'CFSwapInt16HostToBig'
unsigned short CFSwapInt16HostToBig(unsigned short arg);

// function 'CFSwapInt16HostToLittle'
unsigned short CFSwapInt16HostToLittle(unsigned short arg);

// function 'CFSwapInt16LittleToHost'
unsigned short CFSwapInt16LittleToHost(unsigned short arg);

// function 'CFSwapInt32'
unsigned int CFSwapInt32(unsigned int arg);

// function 'CFSwapInt32BigToHost'
unsigned int CFSwapInt32BigToHost(unsigned int arg);

// function 'CFSwapInt32HostToBig'
unsigned int CFSwapInt32HostToBig(unsigned int arg);

// function 'CFSwapInt32HostToLittle'
unsigned int CFSwapInt32HostToLittle(unsigned int arg);

// function 'CFSwapInt32LittleToHost'
unsigned int CFSwapInt32LittleToHost(unsigned int arg);

// function 'CFSwapInt64'
unsigned long long CFSwapInt64(unsigned long long arg);

// function 'CFSwapInt64BigToHost'
unsigned long long CFSwapInt64BigToHost(unsigned long long arg);

// function 'CFSwapInt64HostToBig'
unsigned long long CFSwapInt64HostToBig(unsigned long long arg);

// function 'CFSwapInt64HostToLittle'
unsigned long long CFSwapInt64HostToLittle(unsigned long long arg);

// function 'CFSwapInt64LittleToHost'
unsigned long long CFSwapInt64LittleToHost(unsigned long long arg);

// function 'CFTimeZoneCopyAbbreviation'
struct __CFString *CFTimeZoneCopyAbbreviation(struct __CFTimeZone *tz, double at);

// function 'CFTimeZoneCopyAbbreviationDictionary'
struct __CFDictionary *CFTimeZoneCopyAbbreviationDictionary(void);

// function 'CFTimeZoneCopyDefault'
struct __CFTimeZone *CFTimeZoneCopyDefault(void);

// function 'CFTimeZoneCopyKnownNames'
struct __CFArray *CFTimeZoneCopyKnownNames(void);

// function 'CFTimeZoneCopySystem'
struct __CFTimeZone *CFTimeZoneCopySystem(void);

// function 'CFTimeZoneCreate'
struct __CFTimeZone *CFTimeZoneCreate(struct __CFAllocator *allocator, struct __CFString *name, struct __CFData *data);

// function 'CFTimeZoneCreateWithName'
struct __CFTimeZone *CFTimeZoneCreateWithName(struct __CFAllocator *allocator, struct __CFString *name, Boolean tryAbbrev);

// function 'CFTimeZoneCreateWithTimeIntervalFromGMT'
struct __CFTimeZone *CFTimeZoneCreateWithTimeIntervalFromGMT(struct __CFAllocator *allocator, double ti);

// function 'CFTimeZoneGetData'
struct __CFData *CFTimeZoneGetData(struct __CFTimeZone *tz);

// function 'CFTimeZoneGetName'
struct __CFString *CFTimeZoneGetName(struct __CFTimeZone *tz);

// function 'CFTimeZoneGetSecondsFromGMT'
double CFTimeZoneGetSecondsFromGMT(struct __CFTimeZone *tz, double at);

// function 'CFTimeZoneGetTypeID'
unsigned long CFTimeZoneGetTypeID(void);

// function 'CFTimeZoneIsDaylightSavingTime'
Boolean CFTimeZoneIsDaylightSavingTime(struct __CFTimeZone *tz, double at);

// function 'CFTimeZoneResetSystem'
void CFTimeZoneResetSystem(void);

// function 'CFTimeZoneSetAbbreviationDictionary'
void CFTimeZoneSetAbbreviationDictionary(struct __CFDictionary *dict);

// function 'CFTimeZoneSetDefault'
void CFTimeZoneSetDefault(struct __CFTimeZone *tz);

// function 'CFTreeAppendChild'
void CFTreeAppendChild(struct __CFTree *tree, struct __CFTree *newChild);

// function 'CFTreeFindRoot'
struct __CFTree *CFTreeFindRoot(struct __CFTree *tree);

// function 'CFTreeGetChildAtIndex'
struct __CFTree *CFTreeGetChildAtIndex(struct __CFTree *tree, long idx);

// function 'CFTreeGetChildCount'
long CFTreeGetChildCount(struct __CFTree *tree);

// function 'CFTreeGetChildren'
void CFTreeGetChildren(struct __CFTree *tree, struct __CFTree **children);

// function 'CFTreeGetFirstChild'
struct __CFTree *CFTreeGetFirstChild(struct __CFTree *tree);

// function 'CFTreeGetNextSibling'
struct __CFTree *CFTreeGetNextSibling(struct __CFTree *tree);

// function 'CFTreeGetParent'
struct __CFTree *CFTreeGetParent(struct __CFTree *tree);

// function 'CFTreeGetTypeID'
unsigned long CFTreeGetTypeID(void);

// function 'CFTreeInsertSibling'
void CFTreeInsertSibling(struct __CFTree *tree, struct __CFTree *newSibling);

// function 'CFTreePrependChild'
void CFTreePrependChild(struct __CFTree *tree, struct __CFTree *newChild);

// function 'CFTreeRemove'
void CFTreeRemove(struct __CFTree *tree);

// function 'CFTreeRemoveAllChildren'
void CFTreeRemoveAllChildren(struct __CFTree *tree);

// function 'CFURLCanBeDecomposed'
Boolean CFURLCanBeDecomposed(struct __CFURL *anURL);

// function 'CFURLCopyAbsoluteURL'
struct __CFURL *CFURLCopyAbsoluteURL(struct __CFURL *relativeURL);

// function 'CFURLCopyFileSystemPath'
struct __CFString *CFURLCopyFileSystemPath(struct __CFURL *anURL, int pathStyle);

// function 'CFURLCopyFragment'
struct __CFString *CFURLCopyFragment(struct __CFURL *anURL, struct __CFString *charactersToLeaveEscaped);

// function 'CFURLCopyHostName'
struct __CFString *CFURLCopyHostName(struct __CFURL *anURL);

// function 'CFURLCopyLastPathComponent'
struct __CFString *CFURLCopyLastPathComponent(struct __CFURL *url);

// function 'CFURLCopyNetLocation'
struct __CFString *CFURLCopyNetLocation(struct __CFURL *anURL);

// function 'CFURLCopyParameterString'
struct __CFString *CFURLCopyParameterString(struct __CFURL *anURL, struct __CFString *charactersToLeaveEscaped);

// function 'CFURLCopyPassword'
struct __CFString *CFURLCopyPassword(struct __CFURL *anURL);

// function 'CFURLCopyPath'
struct __CFString *CFURLCopyPath(struct __CFURL *anURL);

// function 'CFURLCopyPathExtension'
struct __CFString *CFURLCopyPathExtension(struct __CFURL *url);

// function 'CFURLCopyQueryString'
struct __CFString *CFURLCopyQueryString(struct __CFURL *anURL, struct __CFString *charactersToLeaveEscaped);

// function 'CFURLCopyResourceSpecifier'
struct __CFString *CFURLCopyResourceSpecifier(struct __CFURL *anURL);

// function 'CFURLCopyScheme'
struct __CFString *CFURLCopyScheme(struct __CFURL *anURL);

// function 'CFURLCopyStrictPath'
struct __CFString *CFURLCopyStrictPath(struct __CFURL *anURL, Boolean* isAbsolute);

// function 'CFURLCopyUserName'
struct __CFString *CFURLCopyUserName(struct __CFURL *anURL);

// function 'CFURLCreateAbsoluteURLWithBytes'
struct __CFURL *CFURLCreateAbsoluteURLWithBytes(struct __CFAllocator *alloc, const UInt8* relativeURLBytes, long length, unsigned long encoding, struct __CFURL *baseURL, Boolean useCompatibilityMode);

// function 'CFURLCreateCopyAppendingPathComponent'
struct __CFURL *CFURLCreateCopyAppendingPathComponent(struct __CFAllocator *allocator, struct __CFURL *url, struct __CFString *pathComponent, Boolean isDirectory);

// function 'CFURLCreateCopyAppendingPathExtension'
struct __CFURL *CFURLCreateCopyAppendingPathExtension(struct __CFAllocator *allocator, struct __CFURL *url, struct __CFString *extension);

// function 'CFURLCreateCopyDeletingLastPathComponent'
struct __CFURL *CFURLCreateCopyDeletingLastPathComponent(struct __CFAllocator *allocator, struct __CFURL *url);

// function 'CFURLCreateCopyDeletingPathExtension'
struct __CFURL *CFURLCreateCopyDeletingPathExtension(struct __CFAllocator *allocator, struct __CFURL *url);

// function 'CFURLCreateData'
struct __CFData *CFURLCreateData(struct __CFAllocator *allocator, struct __CFURL *url, unsigned long encoding, Boolean escapeWhitespace);

// function 'CFURLCreateDataAndPropertiesFromResource'
Boolean CFURLCreateDataAndPropertiesFromResource(struct __CFAllocator *alloc, struct __CFURL *url, struct __CFData **resourceData, struct __CFDictionary **properties, struct __CFArray *desiredProperties, int *errorCode);

// function 'CFURLCreateFromFileSystemRepresentation'
struct __CFURL *CFURLCreateFromFileSystemRepresentation(struct __CFAllocator *allocator, const UInt8* buffer, long bufLen, Boolean isDirectory);

// function 'CFURLCreateFromFileSystemRepresentationRelativeToBase'
struct __CFURL *CFURLCreateFromFileSystemRepresentationRelativeToBase(struct __CFAllocator *allocator, const UInt8* buffer, long bufLen, Boolean isDirectory, struct __CFURL *baseURL);

// function 'CFURLCreatePropertyFromResource'
id CFURLCreatePropertyFromResource(struct __CFAllocator *alloc, struct __CFURL *url, struct __CFString *property, int *errorCode);

// function 'CFURLCreateStringByAddingPercentEscapes'
struct __CFString *CFURLCreateStringByAddingPercentEscapes(struct __CFAllocator *allocator, struct __CFString *originalString, struct __CFString *charactersToLeaveUnescaped, struct __CFString *legalURLCharactersToBeEscaped, unsigned long encoding);

// function 'CFURLCreateStringByReplacingPercentEscapes'
struct __CFString *CFURLCreateStringByReplacingPercentEscapes(struct __CFAllocator *allocator, struct __CFString *originalString, struct __CFString *charactersToLeaveEscaped);

// function 'CFURLCreateStringByReplacingPercentEscapesUsingEncoding'
struct __CFString *CFURLCreateStringByReplacingPercentEscapesUsingEncoding(struct __CFAllocator *allocator, struct __CFString *origString, struct __CFString *charsToLeaveEscaped, unsigned long encoding);

// function 'CFURLCreateWithBytes'
struct __CFURL *CFURLCreateWithBytes(struct __CFAllocator *allocator, const UInt8* URLBytes, long length, unsigned long encoding, struct __CFURL *baseURL);

// function 'CFURLCreateWithFileSystemPath'
struct __CFURL *CFURLCreateWithFileSystemPath(struct __CFAllocator *allocator, struct __CFString *filePath, int pathStyle, Boolean isDirectory);

// function 'CFURLCreateWithFileSystemPathRelativeToBase'
struct __CFURL *CFURLCreateWithFileSystemPathRelativeToBase(struct __CFAllocator *allocator, struct __CFString *filePath, int pathStyle, Boolean isDirectory, struct __CFURL *baseURL);

// function 'CFURLCreateWithString'
struct __CFURL *CFURLCreateWithString(struct __CFAllocator *allocator, struct __CFString *URLString, struct __CFURL *baseURL);

// function 'CFURLDestroyResource'
Boolean CFURLDestroyResource(struct __CFURL *url, int *errorCode);

// function 'CFURLGetBaseURL'
struct __CFURL *CFURLGetBaseURL(struct __CFURL *anURL);

// function 'CFURLGetByteRangeForComponent'
struct _CFRange CFURLGetByteRangeForComponent(struct __CFURL *url, int component, struct _CFRange *rangeIncludingSeparators);

// function 'CFURLGetBytes'
long CFURLGetBytes(struct __CFURL *url, UInt8* buffer, long bufferLength);

// function 'CFURLGetFileSystemRepresentation'
Boolean CFURLGetFileSystemRepresentation(struct __CFURL *url, Boolean resolveAgainstBase, UInt8* buffer, long maxBufLen);

// function 'CFURLGetPortNumber'
long CFURLGetPortNumber(struct __CFURL *anURL);

// function 'CFURLGetString'
struct __CFString *CFURLGetString(struct __CFURL *anURL);

// function 'CFURLGetTypeID'
unsigned long CFURLGetTypeID(void);

// function 'CFURLHasDirectoryPath'
Boolean CFURLHasDirectoryPath(struct __CFURL *anURL);

// function 'CFURLWriteDataAndPropertiesToResource'
Boolean CFURLWriteDataAndPropertiesToResource(struct __CFURL *url, struct __CFData *dataToWrite, struct __CFDictionary *propertiesToWrite, int *errorCode);

// function 'CFUUIDCreate'
struct __CFUUID *CFUUIDCreate(struct __CFAllocator *alloc);

// function 'CFUUIDCreateFromString'
struct __CFUUID *CFUUIDCreateFromString(struct __CFAllocator *alloc, struct __CFString *uuidStr);

// function 'CFUUIDCreateFromUUIDBytes'
struct __CFUUID *CFUUIDCreateFromUUIDBytes(struct __CFAllocator *alloc, struct _CFUUIDBytes bytes);

// function 'CFUUIDCreateString'
struct __CFString *CFUUIDCreateString(struct __CFAllocator *alloc, struct __CFUUID *uuid);

// function 'CFUUIDCreateWithBytes'
struct __CFUUID *CFUUIDCreateWithBytes(struct __CFAllocator *alloc, unsigned char byte0, unsigned char byte1, unsigned char byte2, unsigned char byte3, unsigned char byte4, unsigned char byte5, unsigned char byte6, unsigned char byte7, unsigned char byte8, unsigned char byte9, unsigned char byte10, unsigned char byte11, unsigned char byte12, unsigned char byte13, unsigned char byte14, unsigned char byte15);

// function 'CFUUIDGetConstantUUIDWithBytes'
struct __CFUUID *CFUUIDGetConstantUUIDWithBytes(struct __CFAllocator *alloc, unsigned char byte0, unsigned char byte1, unsigned char byte2, unsigned char byte3, unsigned char byte4, unsigned char byte5, unsigned char byte6, unsigned char byte7, unsigned char byte8, unsigned char byte9, unsigned char byte10, unsigned char byte11, unsigned char byte12, unsigned char byte13, unsigned char byte14, unsigned char byte15);

// function 'CFUUIDGetTypeID'
unsigned long CFUUIDGetTypeID(void);

// function 'CFUUIDGetUUIDBytes'
struct _CFUUIDBytes CFUUIDGetUUIDBytes(struct __CFUUID *uuid);

// function 'CFUserNotificationCancel'
long CFUserNotificationCancel(struct __CFUserNotification *userNotification);

// function 'CFUserNotificationCheckBoxChecked'
unsigned long CFUserNotificationCheckBoxChecked(long i);

// function 'CFUserNotificationCreate'
struct __CFUserNotification *CFUserNotificationCreate(struct __CFAllocator *allocator, double timeout, unsigned long flags, int *error, struct __CFDictionary *dictionary);

// function 'CFUserNotificationDisplayAlert'
long CFUserNotificationDisplayAlert(double timeout, unsigned long flags, struct __CFURL *iconURL, struct __CFURL *soundURL, struct __CFURL *localizationURL, struct __CFString *alertHeader, struct __CFString *alertMessage, struct __CFString *defaultButtonTitle, struct __CFString *alternateButtonTitle, struct __CFString *otherButtonTitle, unsigned int *responseFlags);

// function 'CFUserNotificationDisplayNotice'
long CFUserNotificationDisplayNotice(double timeout, unsigned long flags, struct __CFURL *iconURL, struct __CFURL *soundURL, struct __CFURL *localizationURL, struct __CFString *alertHeader, struct __CFString *alertMessage, struct __CFString *defaultButtonTitle);

// function 'CFUserNotificationGetResponseDictionary'
struct __CFDictionary *CFUserNotificationGetResponseDictionary(struct __CFUserNotification *userNotification);

// function 'CFUserNotificationGetResponseValue'
struct __CFString *CFUserNotificationGetResponseValue(struct __CFUserNotification *userNotification, struct __CFString *key, long idx);

// function 'CFUserNotificationGetTypeID'
unsigned long CFUserNotificationGetTypeID(void);

// function 'CFUserNotificationPopUpSelection'
unsigned long CFUserNotificationPopUpSelection(long n);

// function 'CFUserNotificationReceiveResponse'
long CFUserNotificationReceiveResponse(struct __CFUserNotification *userNotification, double timeout, unsigned int *responseFlags);

// function 'CFUserNotificationSecureTextField'
unsigned long CFUserNotificationSecureTextField(long i);

// function 'CFUserNotificationUpdate'
long CFUserNotificationUpdate(struct __CFUserNotification *userNotification, double timeout, unsigned long flags, struct __CFDictionary *dictionary);

// function 'CFWriteStreamCanAcceptBytes'
Boolean CFWriteStreamCanAcceptBytes(struct __CFWriteStream *stream);

// function 'CFWriteStreamClose'
void CFWriteStreamClose(struct __CFWriteStream *stream);

// function 'CFWriteStreamCopyProperty'
id CFWriteStreamCopyProperty(struct __CFWriteStream *stream, struct __CFString *propertyName);

// function 'CFWriteStreamCreateWithAllocatedBuffers'
struct __CFWriteStream *CFWriteStreamCreateWithAllocatedBuffers(struct __CFAllocator *alloc, struct __CFAllocator *bufferAllocator);

// function 'CFWriteStreamCreateWithBuffer'
struct __CFWriteStream *CFWriteStreamCreateWithBuffer(struct __CFAllocator *alloc, UInt8* buffer, long bufferCapacity);

// function 'CFWriteStreamCreateWithFile'
struct __CFWriteStream *CFWriteStreamCreateWithFile(struct __CFAllocator *alloc, struct __CFURL *fileURL);

// function 'CFWriteStreamGetError'
struct _CFStreamError CFWriteStreamGetError(struct __CFWriteStream *stream);

// function 'CFWriteStreamGetStatus'
int CFWriteStreamGetStatus(struct __CFWriteStream *stream);

// function 'CFWriteStreamGetTypeID'
unsigned long CFWriteStreamGetTypeID(void);

// function 'CFWriteStreamOpen'
Boolean CFWriteStreamOpen(struct __CFWriteStream *stream);

// function 'CFWriteStreamScheduleWithRunLoop'
void CFWriteStreamScheduleWithRunLoop(struct __CFWriteStream *stream, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFWriteStreamSetProperty'
Boolean CFWriteStreamSetProperty(struct __CFWriteStream *stream, struct __CFString *propertyName, id propertyValue);

// function 'CFWriteStreamUnscheduleFromRunLoop'
void CFWriteStreamUnscheduleFromRunLoop(struct __CFWriteStream *stream, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'CFWriteStreamWrite'
long CFWriteStreamWrite(struct __CFWriteStream *stream, const UInt8* buffer, long bufferLength);

// function 'CFXMLCreateStringByEscapingEntities'
struct __CFString *CFXMLCreateStringByEscapingEntities(struct __CFAllocator *allocator, struct __CFString *string, struct __CFDictionary *entitiesDictionary);

// function 'CFXMLCreateStringByUnescapingEntities'
struct __CFString *CFXMLCreateStringByUnescapingEntities(struct __CFAllocator *allocator, struct __CFString *string, struct __CFDictionary *entitiesDictionary);

// function 'CFXMLNodeCreate'
struct __CFXMLNode *CFXMLNodeCreate(struct __CFAllocator *alloc, int xmlType, struct __CFString *dataString, const void* additionalInfoPtr, long version);

// function 'CFXMLNodeCreateCopy'
struct __CFXMLNode *CFXMLNodeCreateCopy(struct __CFAllocator *alloc, struct __CFXMLNode *origNode);

// function 'CFXMLNodeGetInfoPtr'
const void* CFXMLNodeGetInfoPtr(struct __CFXMLNode *node);

// function 'CFXMLNodeGetString'
struct __CFString *CFXMLNodeGetString(struct __CFXMLNode *node);

// function 'CFXMLNodeGetTypeCode'
int CFXMLNodeGetTypeCode(struct __CFXMLNode *node);

// function 'CFXMLNodeGetTypeID'
unsigned long CFXMLNodeGetTypeID(void);

// function 'CFXMLNodeGetVersion'
long CFXMLNodeGetVersion(struct __CFXMLNode *node);

// function 'CFXMLParserAbort'
void CFXMLParserAbort(struct __CFXMLParser *parser, int errorCode, struct __CFString *errorDescription);

// function 'CFXMLParserCopyErrorDescription'
struct __CFString *CFXMLParserCopyErrorDescription(struct __CFXMLParser *parser);

// function 'CFXMLParserGetDocument'
void *CFXMLParserGetDocument(struct __CFXMLParser *parser);

// function 'CFXMLParserGetLineNumber'
long CFXMLParserGetLineNumber(struct __CFXMLParser *parser);

// function 'CFXMLParserGetLocation'
long CFXMLParserGetLocation(struct __CFXMLParser *parser);

// function 'CFXMLParserGetSourceURL'
struct __CFURL *CFXMLParserGetSourceURL(struct __CFXMLParser *parser);

// function 'CFXMLParserGetStatusCode'
int CFXMLParserGetStatusCode(struct __CFXMLParser *parser);

// function 'CFXMLParserGetTypeID'
unsigned long CFXMLParserGetTypeID(void);

// function 'CFXMLParserParse'
Boolean CFXMLParserParse(struct __CFXMLParser *parser);

// function 'CFXMLTreeCreateFromData'
struct __CFTree *CFXMLTreeCreateFromData(struct __CFAllocator *allocator, struct __CFData *xmlData, struct __CFURL *dataSource, unsigned long parseOptions, long versionOfNodes);

// function 'CFXMLTreeCreateFromDataWithError'
struct __CFTree *CFXMLTreeCreateFromDataWithError(struct __CFAllocator *allocator, struct __CFData *xmlData, struct __CFURL *dataSource, unsigned long parseOptions, long versionOfNodes, struct __CFDictionary **errorDict);

// function 'CFXMLTreeCreateWithDataFromURL'
struct __CFTree *CFXMLTreeCreateWithDataFromURL(struct __CFAllocator *allocator, struct __CFURL *dataSource, unsigned long parseOptions, long versionOfNodes);

// function 'CFXMLTreeCreateWithNode'
struct __CFTree *CFXMLTreeCreateWithNode(struct __CFAllocator *allocator, struct __CFXMLNode *node);

// function 'CFXMLTreeCreateXMLData'
struct __CFData *CFXMLTreeCreateXMLData(struct __CFAllocator *allocator, struct __CFTree *xmlTree);

// function 'CFXMLTreeGetNode'
struct __CFXMLNode *CFXMLTreeGetNode(struct __CFTree *xmlTree);


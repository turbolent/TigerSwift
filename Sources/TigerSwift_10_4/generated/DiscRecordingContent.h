// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'DRFileRef'
typedef struct __DRFile *DRFileRef;

// CoreFoundation type 'DRFolderRef'
typedef struct __DRFolder *DRFolderRef;

// class 'DRBurn'
typedef struct objc_object DRBurn;

// class 'DRFSObject'
typedef struct objc_object DRFSObject;

// class 'DRFile'
typedef struct objc_object DRFile;

// class 'DRFolder'
typedef struct objc_object DRFolder;

// class 'DRTrack'
typedef struct objc_object DRTrack;

// class 'NSObject'
typedef struct objc_object NSObject;

// struct 'DRFileProductionInfo'
struct DRFileProductionInfo {
    unsigned long long requestedAddress;
    void *buffer;
    unsigned int reqCount;
    unsigned int actCount;
    unsigned int blockSize;
    unsigned int fork;
};

// struct 'DRFileForkSizeInfo'
struct DRFileForkSizeInfo {
    unsigned int fork;
    unsigned int query;
    unsigned long long size;
};

// getter for constant 'DRAccessDate'
id _get_DRAccessDate(void);

// getter for constant 'DRAllFilesystems'
id _get_DRAllFilesystems(void);

// getter for constant 'DRAttributeModificationDate'
id _get_DRAttributeModificationDate(void);

// getter for constant 'DRBackupDate'
id _get_DRBackupDate(void);

// getter for constant 'DRContentModificationDate'
id _get_DRContentModificationDate(void);

// getter for constant 'DRCreationDate'
id _get_DRCreationDate(void);

// getter for constant 'DREffectiveDate'
id _get_DREffectiveDate(void);

// getter for constant 'DRExpirationDate'
id _get_DRExpirationDate(void);

// getter for constant 'DRHFSPlus'
id _get_DRHFSPlus(void);

// getter for constant 'DRHFSPlusCatalogNodeID'
id _get_DRHFSPlusCatalogNodeID(void);

// getter for constant 'DRHFSPlusTextEncodingHint'
id _get_DRHFSPlusTextEncodingHint(void);

// getter for constant 'DRISO9660'
id _get_DRISO9660(void);

// getter for constant 'DRISO9660LevelOne'
id _get_DRISO9660LevelOne(void);

// getter for constant 'DRISO9660LevelTwo'
id _get_DRISO9660LevelTwo(void);

// getter for constant 'DRISO9660VersionNumber'
id _get_DRISO9660VersionNumber(void);

// getter for constant 'DRInvisible'
id _get_DRInvisible(void);

// getter for constant 'DRJoliet'
id _get_DRJoliet(void);

// getter for constant 'DRLinkTypeFinderAlias'
id _get_DRLinkTypeFinderAlias(void);

// getter for constant 'DRLinkTypeHardLink'
id _get_DRLinkTypeHardLink(void);

// getter for constant 'DRLinkTypeSymbolicLink'
id _get_DRLinkTypeSymbolicLink(void);

// getter for constant 'DRMacExtendedFinderFlags'
id _get_DRMacExtendedFinderFlags(void);

// getter for constant 'DRMacFileCreator'
id _get_DRMacFileCreator(void);

// getter for constant 'DRMacFileType'
id _get_DRMacFileType(void);

// getter for constant 'DRMacFinderFlags'
id _get_DRMacFinderFlags(void);

// getter for constant 'DRMacIconLocation'
id _get_DRMacIconLocation(void);

// getter for constant 'DRMacScrollPosition'
id _get_DRMacScrollPosition(void);

// getter for constant 'DRMacWindowBounds'
id _get_DRMacWindowBounds(void);

// getter for constant 'DRMacWindowView'
id _get_DRMacWindowView(void);

// getter for constant 'DRPosixFileMode'
id _get_DRPosixFileMode(void);

// getter for constant 'DRPosixGID'
id _get_DRPosixGID(void);

// getter for constant 'DRPosixUID'
id _get_DRPosixUID(void);

// getter for constant 'DRRecordingDate'
id _get_DRRecordingDate(void);

// getter for constant 'DRUDF'
id _get_DRUDF(void);

// getter for constant 'DRUDFApplicationIdentifierSuffix'
id _get_DRUDFApplicationIdentifierSuffix(void);

// getter for constant 'DRUDFExtendedFilePermissions'
id _get_DRUDFExtendedFilePermissions(void);

// getter for constant 'DRUDFInterchangeLevel'
id _get_DRUDFInterchangeLevel(void);

// getter for constant 'DRUDFMaxInterchangeLevel'
id _get_DRUDFMaxInterchangeLevel(void);

// getter for constant 'DRUDFMaxVolumeSequenceNumber'
id _get_DRUDFMaxVolumeSequenceNumber(void);

// getter for constant 'DRUDFPrimaryVolumeDescriptorNumber'
id _get_DRUDFPrimaryVolumeDescriptorNumber(void);

// getter for constant 'DRUDFRealTimeFile'
id _get_DRUDFRealTimeFile(void);

// getter for constant 'DRUDFVersion102'
id _get_DRUDFVersion102(void);

// getter for constant 'DRUDFVersion150'
id _get_DRUDFVersion150(void);

// getter for constant 'DRUDFVolumeSequenceNumber'
id _get_DRUDFVolumeSequenceNumber(void);

// getter for constant 'DRUDFVolumeSetIdentifier'
id _get_DRUDFVolumeSetIdentifier(void);

// getter for constant 'DRUDFVolumeSetImplementationUse'
id _get_DRUDFVolumeSetImplementationUse(void);

// getter for constant 'DRUDFVolumeSetTimestamp'
id _get_DRUDFVolumeSetTimestamp(void);

// getter for constant 'DRUDFWriteVersion'
id _get_DRUDFWriteVersion(void);

// getter for constant 'kDRAbstractFile'
struct __CFString *_get_kDRAbstractFile(void);

// getter for constant 'kDRAccessDate'
struct __CFString *_get_kDRAccessDate(void);

// getter for constant 'kDRAllFilesystems'
struct __CFString *_get_kDRAllFilesystems(void);

// getter for constant 'kDRApplicationIdentifier'
struct __CFString *_get_kDRApplicationIdentifier(void);

// getter for constant 'kDRAttributeModificationDate'
struct __CFString *_get_kDRAttributeModificationDate(void);

// getter for constant 'kDRBackupDate'
struct __CFString *_get_kDRBackupDate(void);

// getter for constant 'kDRBibliographicFile'
struct __CFString *_get_kDRBibliographicFile(void);

// getter for constant 'kDRBlockSize'
struct __CFString *_get_kDRBlockSize(void);

// getter for constant 'kDRContentModificationDate'
struct __CFString *_get_kDRContentModificationDate(void);

// getter for constant 'kDRCopyrightFile'
struct __CFString *_get_kDRCopyrightFile(void);

// getter for constant 'kDRCreationDate'
struct __CFString *_get_kDRCreationDate(void);

// getter for constant 'kDRDataPreparer'
struct __CFString *_get_kDRDataPreparer(void);

// getter for constant 'kDRDefaultDate'
struct __CFString *_get_kDRDefaultDate(void);

// getter for constant 'kDREffectiveDate'
struct __CFString *_get_kDREffectiveDate(void);

// getter for constant 'kDRExpirationDate'
struct __CFString *_get_kDRExpirationDate(void);

// getter for constant 'kDRHFSPlus'
struct __CFString *_get_kDRHFSPlus(void);

// getter for constant 'kDRHFSPlusCatalogNodeID'
struct __CFString *_get_kDRHFSPlusCatalogNodeID(void);

// getter for constant 'kDRHFSPlusTextEncodingHint'
struct __CFString *_get_kDRHFSPlusTextEncodingHint(void);

// getter for constant 'kDRISO9660'
struct __CFString *_get_kDRISO9660(void);

// getter for constant 'kDRISO9660LevelOne'
struct __CFString *_get_kDRISO9660LevelOne(void);

// getter for constant 'kDRISO9660LevelTwo'
struct __CFString *_get_kDRISO9660LevelTwo(void);

// getter for constant 'kDRISO9660VersionNumber'
struct __CFString *_get_kDRISO9660VersionNumber(void);

// getter for constant 'kDRISOLevel'
struct __CFString *_get_kDRISOLevel(void);

// getter for constant 'kDRISOMacExtensions'
struct __CFString *_get_kDRISOMacExtensions(void);

// getter for constant 'kDRISORockRidgeExtensions'
struct __CFString *_get_kDRISORockRidgeExtensions(void);

// getter for constant 'kDRInvisible'
struct __CFString *_get_kDRInvisible(void);

// getter for constant 'kDRJoliet'
struct __CFString *_get_kDRJoliet(void);

// getter for constant 'kDRMacExtendedFinderFlags'
struct __CFString *_get_kDRMacExtendedFinderFlags(void);

// getter for constant 'kDRMacFileCreator'
struct __CFString *_get_kDRMacFileCreator(void);

// getter for constant 'kDRMacFileType'
struct __CFString *_get_kDRMacFileType(void);

// getter for constant 'kDRMacFinderFlags'
struct __CFString *_get_kDRMacFinderFlags(void);

// getter for constant 'kDRMacIconLocation'
struct __CFString *_get_kDRMacIconLocation(void);

// getter for constant 'kDRMacScrollPosition'
struct __CFString *_get_kDRMacScrollPosition(void);

// getter for constant 'kDRMacWindowBounds'
struct __CFString *_get_kDRMacWindowBounds(void);

// getter for constant 'kDRMacWindowView'
struct __CFString *_get_kDRMacWindowView(void);

// getter for constant 'kDRPosixFileMode'
struct __CFString *_get_kDRPosixFileMode(void);

// getter for constant 'kDRPosixGID'
struct __CFString *_get_kDRPosixGID(void);

// getter for constant 'kDRPosixUID'
struct __CFString *_get_kDRPosixUID(void);

// getter for constant 'kDRPublisher'
struct __CFString *_get_kDRPublisher(void);

// getter for constant 'kDRRecordingDate'
struct __CFString *_get_kDRRecordingDate(void);

// getter for constant 'kDRSuppressMacSpecificFiles'
struct __CFString *_get_kDRSuppressMacSpecificFiles(void);

// getter for constant 'kDRSystemIdentifier'
struct __CFString *_get_kDRSystemIdentifier(void);

// getter for constant 'kDRUDF'
struct __CFString *_get_kDRUDF(void);

// getter for constant 'kDRUDFApplicationIdentifierSuffix'
struct __CFString *_get_kDRUDFApplicationIdentifierSuffix(void);

// getter for constant 'kDRUDFExtendedFilePermissions'
struct __CFString *_get_kDRUDFExtendedFilePermissions(void);

// getter for constant 'kDRUDFInterchangeLevel'
struct __CFString *_get_kDRUDFInterchangeLevel(void);

// getter for constant 'kDRUDFMaxInterchangeLevel'
struct __CFString *_get_kDRUDFMaxInterchangeLevel(void);

// getter for constant 'kDRUDFMaxVolumeSequenceNumber'
struct __CFString *_get_kDRUDFMaxVolumeSequenceNumber(void);

// getter for constant 'kDRUDFPrimaryVolumeDescriptorNumber'
struct __CFString *_get_kDRUDFPrimaryVolumeDescriptorNumber(void);

// getter for constant 'kDRUDFRealTimeFile'
struct __CFString *_get_kDRUDFRealTimeFile(void);

// getter for constant 'kDRUDFVersion102'
struct __CFString *_get_kDRUDFVersion102(void);

// getter for constant 'kDRUDFVersion150'
struct __CFString *_get_kDRUDFVersion150(void);

// getter for constant 'kDRUDFVolumeSequenceNumber'
struct __CFString *_get_kDRUDFVolumeSequenceNumber(void);

// getter for constant 'kDRUDFVolumeSetIdentifier'
struct __CFString *_get_kDRUDFVolumeSetIdentifier(void);

// getter for constant 'kDRUDFVolumeSetImplementationUse'
struct __CFString *_get_kDRUDFVolumeSetImplementationUse(void);

// getter for constant 'kDRUDFVolumeSetTimestamp'
struct __CFString *_get_kDRUDFVolumeSetTimestamp(void);

// getter for constant 'kDRUDFWriteVersion'
struct __CFString *_get_kDRUDFWriteVersion(void);

// getter for constant 'kDRVolumeCheckedDate'
struct __CFString *_get_kDRVolumeCheckedDate(void);

// getter for constant 'kDRVolumeCreationDate'
struct __CFString *_get_kDRVolumeCreationDate(void);

// getter for constant 'kDRVolumeEffectiveDate'
struct __CFString *_get_kDRVolumeEffectiveDate(void);

// getter for constant 'kDRVolumeExpirationDate'
struct __CFString *_get_kDRVolumeExpirationDate(void);

// getter for constant 'kDRVolumeModificationDate'
struct __CFString *_get_kDRVolumeModificationDate(void);

// getter for constant 'kDRVolumeSet'
struct __CFString *_get_kDRVolumeSet(void);

enum { DRFileForkData = 0 };

enum { DRFileForkResource = 1 };

enum { DRFilesystemInclusionMaskHFSPlus = 8 };

enum { DRFilesystemInclusionMaskISO9660 = 1 };

enum { DRFilesystemInclusionMaskJoliet = 2 };

enum { DRFilesystemInclusionMaskUDF = 4 };

enum { kDRFileForkData = 0 };

enum { kDRFileForkResource = 1 };

enum { kDRFileForkSizeActual = 0 };

enum { kDRFileForkSizeEstimate = 1 };

enum { kDRFileMessageForkSize = 1718839674 };

enum { kDRFileMessagePostBurn = 1886352244 };

enum { kDRFileMessagePreBurn = 1886545184 };

enum { kDRFileMessageProduceData = 1886547812 };

enum { kDRFileMessageRelease = 1652122912 };

enum { kDRFileMessageVerificationStarting = 1987208825 };

enum { kDRFilesystemMaskDefault = 4294967295 };

enum { kDRFilesystemMaskHFSPlus = 8 };

enum { kDRFilesystemMaskISO9660 = 1 };

enum { kDRFilesystemMaskJoliet = 2 };

enum { kDRFilesystemMaskUDF = 4 };

enum { kDRLinkTypeFinderAlias = 3 };

enum { kDRLinkTypeHardLink = 1 };

enum { kDRLinkTypeSymbolicLink = 2 };

// function 'DRAudioTrackCreateWithURL'
struct __DRTrack *DRAudioTrackCreateWithURL(struct __CFURL *audioFileURL);

// function 'DRFSObjectCopyBaseName'
struct __CFString *DRFSObjectCopyBaseName(const id object);

// function 'DRFSObjectCopyFilesystemProperties'
struct __CFDictionary *DRFSObjectCopyFilesystemProperties(const id object, struct __CFString *fsKey, Boolean coalesce);

// function 'DRFSObjectCopyFilesystemProperty'
id DRFSObjectCopyFilesystemProperty(const id object, struct __CFString *fsKey, struct __CFString *propertyKey, Boolean coalesce);

// function 'DRFSObjectCopyMangledName'
struct __CFString *DRFSObjectCopyMangledName(const id object, struct __CFString *fsKey);

// function 'DRFSObjectCopyMangledNames'
struct __CFDictionary *DRFSObjectCopyMangledNames(const id object);

// function 'DRFSObjectCopyRealURL'
struct __CFURL *DRFSObjectCopyRealURL(const id object);

// function 'DRFSObjectCopySpecificName'
struct __CFString *DRFSObjectCopySpecificName(const id object, struct __CFString *fsKey);

// function 'DRFSObjectCopySpecificNames'
struct __CFDictionary *DRFSObjectCopySpecificNames(const id object);

// function 'DRFSObjectGetFilesystemMask'
unsigned long DRFSObjectGetFilesystemMask(const id object, unsigned int *explicitMask, unsigned int *effectiveMask);

// function 'DRFSObjectGetParent'
struct __DRFolder *DRFSObjectGetParent(const id object);

// function 'DRFSObjectIsVirtual'
Boolean DRFSObjectIsVirtual(const id object);

// function 'DRFSObjectSetBaseName'
void DRFSObjectSetBaseName(id object, struct __CFString *baseName);

// function 'DRFSObjectSetFilesystemMask'
void DRFSObjectSetFilesystemMask(id object, unsigned long newMask);

// function 'DRFSObjectSetFilesystemProperties'
void DRFSObjectSetFilesystemProperties(id object, struct __CFString *fsKey, struct __CFDictionary *properties);

// function 'DRFSObjectSetFilesystemProperty'
void DRFSObjectSetFilesystemProperty(id object, struct __CFString *fsKey, struct __CFString *propertyKey, id value);

// function 'DRFSObjectSetSpecificName'
void DRFSObjectSetSpecificName(id object, struct __CFString *fsKey, struct __CFString *specificName);

// function 'DRFSObjectSetSpecificNames'
void DRFSObjectSetSpecificNames(id object, struct __CFDictionary *specificNames);

// function 'DRFileCreateRealWithURL'
struct __DRFile *DRFileCreateRealWithURL(const struct __CFURL* urlRef);

// function 'DRFileCreateVirtualLink'
struct __DRFile *DRFileCreateVirtualLink(id original, unsigned long linkType, struct __CFString *fsKey);

// function 'DRFileCreateVirtualWithData'
struct __DRFile *DRFileCreateVirtualWithData(struct __CFString *baseName, void *fileData, unsigned long fileDataLength);

// function 'DRFileGetTypeID'
unsigned long DRFileGetTypeID(void);

// function 'DRFilesystemTrackCreate'
struct __DRTrack *DRFilesystemTrackCreate(struct __DRFolder *rootFolder);

// function 'DRFilesystemTrackEstimateOverhead'
unsigned long long DRFilesystemTrackEstimateOverhead(unsigned long long numBlocks, unsigned long blockSize, unsigned long fsMask);

// function 'DRFolderAddChild'
void DRFolderAddChild(struct __DRFolder *parent, id newChild);

// function 'DRFolderConvertRealToVirtual'
void DRFolderConvertRealToVirtual(struct __DRFolder *realFolder);

// function 'DRFolderCopyChildren'
struct __CFArray *DRFolderCopyChildren(const struct __DRFolder* folder);

// function 'DRFolderCountChildren'
unsigned long DRFolderCountChildren(const struct __DRFolder* folder);

// function 'DRFolderCreateRealWithURL'
struct __DRFolder *DRFolderCreateRealWithURL(const struct __CFURL* urlRef);

// function 'DRFolderCreateVirtual'
struct __DRFolder *DRFolderCreateVirtual(struct __CFString *baseName);

// function 'DRFolderGetTypeID'
unsigned long DRFolderGetTypeID(void);

// function 'DRFolderRemoveChild'
void DRFolderRemoveChild(struct __DRFolder *parent, id child);

// method '+[DRBurn layoutForImageFile:]'
id _CM_DRBurn_layoutForImageFile_C(Class _class, id path);

// method '-[DRFSObject baseName]'
id _IM_DRFSObject_baseName(DRFSObject *_self);

// method '-[DRFSObject effectiveFilesystemMask]'
unsigned long _IM_DRFSObject_effectiveFilesystemMask(DRFSObject *_self);

// method '-[DRFSObject explicitFilesystemMask]'
unsigned long _IM_DRFSObject_explicitFilesystemMask(DRFSObject *_self);

// method '-[DRFSObject isVirtual]'
BOOL _IM_DRFSObject_isVirtual(DRFSObject *_self);

// method '-[DRFSObject mangledNameForFilesystem:]'
id _IM_DRFSObject_mangledNameForFilesystem_C(DRFSObject *_self, id filesystem);

// method '-[DRFSObject mangledNames]'
id _IM_DRFSObject_mangledNames(DRFSObject *_self);

// method '-[DRFSObject parent]'
DRFolder* _IM_DRFSObject_parent(DRFSObject *_self);

// method '-[DRFSObject propertiesForFilesystem:mergeWithOtherFilesystems:]'
id _IM_DRFSObject_propertiesForFilesystem_CmergeWithOtherFilesystems_C(DRFSObject *_self, id filesystem, BOOL merge);

// method '-[DRFSObject propertyForKey:inFilesystem:mergeWithOtherFilesystems:]'
id _IM_DRFSObject_propertyForKey_CinFilesystem_CmergeWithOtherFilesystems_C(DRFSObject *_self, id key, id filesystem, BOOL merge);

// method '-[DRFSObject setBaseName:]'
void _IM_DRFSObject_setBaseName_C(DRFSObject *_self, id baseName);

// method '-[DRFSObject setExplicitFilesystemMask:]'
void _IM_DRFSObject_setExplicitFilesystemMask_C(DRFSObject *_self, unsigned long mask);

// method '-[DRFSObject setProperties:inFilesystem:]'
void _IM_DRFSObject_setProperties_CinFilesystem_C(DRFSObject *_self, id properties, id filesystem);

// method '-[DRFSObject setProperty:forKey:inFilesystem:]'
void _IM_DRFSObject_setProperty_CforKey_CinFilesystem_C(DRFSObject *_self, id property, id key, id filesystem);

// method '-[DRFSObject setSpecificName:forFilesystem:]'
void _IM_DRFSObject_setSpecificName_CforFilesystem_C(DRFSObject *_self, id name, id filesystem);

// method '-[DRFSObject setSpecificNames:]'
void _IM_DRFSObject_setSpecificNames_C(DRFSObject *_self, id specificNames);

// method '-[DRFSObject sourcePath]'
id _IM_DRFSObject_sourcePath(DRFSObject *_self);

// method '-[DRFSObject specificNameForFilesystem:]'
id _IM_DRFSObject_specificNameForFilesystem_C(DRFSObject *_self, id filesystem);

// method '-[DRFSObject specificNames]'
id _IM_DRFSObject_specificNames(DRFSObject *_self);

// method '+[DRFile fileWithPath:]'
DRFile* _CM_DRFile_fileWithPath_C(Class _class, id path);

// method '+[DRFile finderAliasPointingTo:inFilesystem:]'
DRFile* _CM_DRFile_finderAliasPointingTo_CinFilesystem_C(Class _class, DRFSObject* original, id filesystem);

// method '+[DRFile hardLinkPointingTo:inFilesystem:]'
DRFile* _CM_DRFile_hardLinkPointingTo_CinFilesystem_C(Class _class, DRFile* original, id filesystem);

// method '-[DRFile initWithLinkType:pointingTo:inFilesystem:]'
DRFile *_IM_DRFile_initWithLinkType_CpointingTo_CinFilesystem_C(DRFile *_self, id linkType, DRFSObject* original, id filesystem);

// method '-[DRFile initWithName:data:]'
DRFile *_IM_DRFile_initWithName_Cdata_C(DRFile *_self, id name, id data);

// method '-[DRFile initWithName:dataProducer:]'
DRFile *_IM_DRFile_initWithName_CdataProducer_C(DRFile *_self, id name, id producer);

// method '-[DRFile initWithPath:]'
DRFile *_IM_DRFile_initWithPath_C(DRFile *_self, id path);

// method '+[DRFile symLinkPointingTo:inFilesystem:]'
DRFile* _CM_DRFile_symLinkPointingTo_CinFilesystem_C(Class _class, DRFSObject* original, id filesystem);

// method '+[DRFile virtualFileWithName:data:]'
DRFile* _CM_DRFile_virtualFileWithName_Cdata_C(Class _class, id name, id data);

// method '+[DRFile virtualFileWithName:dataProducer:]'
DRFile* _CM_DRFile_virtualFileWithName_CdataProducer_C(Class _class, id name, id producer);

// method '-[DRFolder addChild:]'
void _IM_DRFolder_addChild_C(DRFolder *_self, DRFSObject* child);

// method '-[DRFolder children]'
id _IM_DRFolder_children(DRFolder *_self);

// method '-[DRFolder count]'
unsigned int _IM_DRFolder_count(DRFolder *_self);

// method '+[DRFolder folderWithPath:]'
DRFolder* _CM_DRFolder_folderWithPath_C(Class _class, id path);

// method '-[DRFolder initWithName:]'
DRFolder *_IM_DRFolder_initWithName_C(DRFolder *_self, id name);

// method '-[DRFolder initWithPath:]'
DRFolder *_IM_DRFolder_initWithPath_C(DRFolder *_self, id path);

// method '-[DRFolder makeVirtual]'
void _IM_DRFolder_makeVirtual(DRFolder *_self);

// method '-[DRFolder removeChild:]'
void _IM_DRFolder_removeChild_C(DRFolder *_self, DRFSObject* child);

// method '+[DRFolder virtualFolderWithName:]'
DRFolder* _CM_DRFolder_virtualFolderWithName_C(Class _class, id name);

// method '+[DRTrack trackForAudioFile:]'
DRTrack* _CM_DRTrack_trackForAudioFile_C(Class _class, id path);

// method '+[DRTrack trackForAudioOfLength:producer:]'
DRTrack* _CM_DRTrack_trackForAudioOfLength_Cproducer_C(Class _class, id length, id producer);

// method '+[DRTrack trackForRootFolder:]'
DRTrack* _CM_DRTrack_trackForRootFolder_C(Class _class, DRFolder* rootFolder);

// method '-[NSObject calculateSizeOfFile:fork:estimating:]'
unsigned long long _IM_NSObject_calculateSizeOfFile_Cfork_Cestimating_C(NSObject *_self, DRFile* file, unsigned long fork, BOOL estimate);

// method '-[NSObject cleanupFileAfterBurn:]'
void _IM_NSObject_cleanupFileAfterBurn_C(NSObject *_self, DRFile* file);

// method '-[NSObject prepareFileForBurn:]'
BOOL _IM_NSObject_prepareFileForBurn_C(NSObject *_self, DRFile* file);

// method '-[NSObject prepareFileForVerification:]'
BOOL _IM_NSObject_prepareFileForVerification_C(NSObject *_self, DRFile* file);

// method '-[NSObject produceFile:fork:intoBuffer:length:atAddress:blockSize:]'
unsigned int _IM_NSObject_produceFile_Cfork_CintoBuffer_Clength_CatAddress_CblockSize_C(NSObject *_self, DRFile* file, unsigned long fork, char* buffer, unsigned int bufferLength, unsigned long long address, unsigned int blockSize);


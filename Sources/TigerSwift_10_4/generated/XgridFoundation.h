// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// class 'NSObject'
typedef struct objc_object NSObject;

// class 'XGActionMonitor'
typedef struct objc_object XGActionMonitor;

// class 'XGAuthenticator'
typedef struct objc_object XGAuthenticator;

// class 'XGConnection'
typedef struct objc_object XGConnection;

// class 'XGController'
typedef struct objc_object XGController;

// class 'XGFile'
typedef struct objc_object XGFile;

// class 'XGFileDownload'
typedef struct objc_object XGFileDownload;

// class 'XGGSSAuthenticator'
typedef struct objc_object XGGSSAuthenticator;

// class 'XGGrid'
typedef struct objc_object XGGrid;

// class 'XGJob'
typedef struct objc_object XGJob;

// class 'XGResource'
typedef struct objc_object XGResource;

// class 'XGTwoWayRandomAuthenticator'
typedef struct objc_object XGTwoWayRandomAuthenticator;

// getter for constant 'XGActionMonitorResultsOutputFilesKey'
id _get_XGActionMonitorResultsOutputFilesKey(void);

// getter for constant 'XGActionMonitorResultsOutputStreamsKey'
id _get_XGActionMonitorResultsOutputStreamsKey(void);

// getter for constant 'XGConnectionKeyIsClosed'
id _get_XGConnectionKeyIsClosed(void);

// getter for constant 'XGConnectionKeyIsOpened'
id _get_XGConnectionKeyIsOpened(void);

// getter for constant 'XGConnectionKeyState'
id _get_XGConnectionKeyState(void);

// getter for constant 'XGControllerWillDeallocNotification'
id _get_XGControllerWillDeallocNotification(void);

// getter for constant 'XGFileStandardErrorPath'
id _get_XGFileStandardErrorPath(void);

// getter for constant 'XGFileStandardOutputPath'
id _get_XGFileStandardOutputPath(void);

// getter for constant 'XGJobSpecificationApplicationIdentifierKey'
id _get_XGJobSpecificationApplicationIdentifierKey(void);

// getter for constant 'XGJobSpecificationArgumentTypeKey'
id _get_XGJobSpecificationArgumentTypeKey(void);

// getter for constant 'XGJobSpecificationArgumentsKey'
id _get_XGJobSpecificationArgumentsKey(void);

// getter for constant 'XGJobSpecificationCommandKey'
id _get_XGJobSpecificationCommandKey(void);

// getter for constant 'XGJobSpecificationDependsOnJobsKey'
id _get_XGJobSpecificationDependsOnJobsKey(void);

// getter for constant 'XGJobSpecificationDependsOnTasksKey'
id _get_XGJobSpecificationDependsOnTasksKey(void);

// getter for constant 'XGJobSpecificationEnvironmentKey'
id _get_XGJobSpecificationEnvironmentKey(void);

// getter for constant 'XGJobSpecificationFileDataKey'
id _get_XGJobSpecificationFileDataKey(void);

// getter for constant 'XGJobSpecificationGridIdentifierKey'
id _get_XGJobSpecificationGridIdentifierKey(void);

// getter for constant 'XGJobSpecificationInputFileMapKey'
id _get_XGJobSpecificationInputFileMapKey(void);

// getter for constant 'XGJobSpecificationInputFilesKey'
id _get_XGJobSpecificationInputFilesKey(void);

// getter for constant 'XGJobSpecificationInputStreamKey'
id _get_XGJobSpecificationInputStreamKey(void);

// getter for constant 'XGJobSpecificationIsExecutableKey'
id _get_XGJobSpecificationIsExecutableKey(void);

// getter for constant 'XGJobSpecificationNameKey'
id _get_XGJobSpecificationNameKey(void);

// getter for constant 'XGJobSpecificationNotificationEmailKey'
id _get_XGJobSpecificationNotificationEmailKey(void);

// getter for constant 'XGJobSpecificationPathIdentifierKey'
id _get_XGJobSpecificationPathIdentifierKey(void);

// getter for constant 'XGJobSpecificationSchedulerParametersKey'
id _get_XGJobSpecificationSchedulerParametersKey(void);

// getter for constant 'XGJobSpecificationSubmissionIdentifierKey'
id _get_XGJobSpecificationSubmissionIdentifierKey(void);

// getter for constant 'XGJobSpecificationTaskPrototypeIdentifierKey'
id _get_XGJobSpecificationTaskPrototypeIdentifierKey(void);

// getter for constant 'XGJobSpecificationTaskPrototypesKey'
id _get_XGJobSpecificationTaskPrototypesKey(void);

// getter for constant 'XGJobSpecificationTaskSpecificationsKey'
id _get_XGJobSpecificationTaskSpecificationsKey(void);

// getter for constant 'XGJobSpecificationTypeKey'
id _get_XGJobSpecificationTypeKey(void);

// getter for constant 'XGJobSpecificationTypeTaskListValue'
id _get_XGJobSpecificationTypeTaskListValue(void);

enum { XGActionMonitorOutcomeFailure = 2 };

enum { XGActionMonitorOutcomeNone = 0 };

enum { XGActionMonitorOutcomeSuccess = 1 };

enum { XGAuthenticatorStateAuthenticated = 2 };

enum { XGAuthenticatorStateAuthenticating = 1 };

enum { XGAuthenticatorStateFailed = 3 };

enum { XGAuthenticatorStateUnauthenticated = 0 };

enum { XGConnectionStateClosed = 0 };

enum { XGConnectionStateClosing = 3 };

enum { XGConnectionStateOpen = 2 };

enum { XGConnectionStateOpening = 1 };

enum { XGFileTypeNone = 0 };

enum { XGFileTypeRegular = 1 };

enum { XGFileTypeStream = 2 };

enum { XGResourceActionDelete = 5 };

enum { XGResourceActionGetOutputFiles = 10 };

enum { XGResourceActionGetOutputStreams = 9 };

enum { XGResourceActionGetSpecification = 11 };

enum { XGResourceActionMakeDefault = 7 };

enum { XGResourceActionNone = 0 };

enum { XGResourceActionRename = 6 };

enum { XGResourceActionRestart = 2 };

enum { XGResourceActionResume = 4 };

enum { XGResourceActionStop = 1 };

enum { XGResourceActionSubmitJob = 8 };

enum { XGResourceActionSuspend = 3 };

enum { XGResourceStateAvailable = 4 };

enum { XGResourceStateCanceled = 12 };

enum { XGResourceStateConnecting = 2 };

enum { XGResourceStateFailed = 13 };

enum { XGResourceStateFinished = 14 };

enum { XGResourceStateOffline = 1 };

enum { XGResourceStatePending = 6 };

enum { XGResourceStateRunning = 9 };

enum { XGResourceStateStagingIn = 8 };

enum { XGResourceStateStagingOut = 11 };

enum { XGResourceStateStarting = 7 };

enum { XGResourceStateSuspended = 10 };

enum { XGResourceStateUnavailable = 3 };

enum { XGResourceStateUninitialized = 0 };

enum { XGResourceStateWorking = 5 };

// method '-[NSObject authenticatorDidAuthenticate:]'
void _IM_NSObject_authenticatorDidAuthenticate_C(NSObject *_self, XGAuthenticator* authenticator);

// method '-[NSObject authenticatorDidNotAuthenticate:]'
void _IM_NSObject_authenticatorDidNotAuthenticate_C(NSObject *_self, XGAuthenticator* authenticator);

// method '-[NSObject connectionDidClose:]'
void _IM_NSObject_connectionDidClose_C(NSObject *_self, XGConnection* connection);

// method '-[NSObject connectionDidNotOpen:withError:]'
void _IM_NSObject_connectionDidNotOpen_CwithError_C(NSObject *_self, XGConnection* connection, id error);

// method '-[NSObject connectionDidOpen:]'
void _IM_NSObject_connectionDidOpen_C(NSObject *_self, XGConnection* connection);

// method '-[NSObject fileDownload:decideDestinationWithSuggestedPath:]'
void _IM_NSObject_fileDownload_CdecideDestinationWithSuggestedPath_C(NSObject *_self, XGFileDownload* fileDownload, id path);

// method '-[NSObject fileDownload:didCreateDestination:]'
void _IM_NSObject_fileDownload_CdidCreateDestination_C(NSObject *_self, XGFileDownload* fileDownload, id destination);

// method '-[NSObject fileDownload:didFailWithError:]'
void _IM_NSObject_fileDownload_CdidFailWithError_C(NSObject *_self, XGFileDownload* fileDownload, id error);

// method '-[NSObject fileDownload:didReceiveAttributes:]'
void _IM_NSObject_fileDownload_CdidReceiveAttributes_C(NSObject *_self, XGFileDownload* fileDownload, id attributes);

// method '-[NSObject fileDownload:didReceiveData:]'
void _IM_NSObject_fileDownload_CdidReceiveData_C(NSObject *_self, XGFileDownload* fileDownload, id data);

// method '-[NSObject fileDownloadDidBegin:]'
void _IM_NSObject_fileDownloadDidBegin_C(NSObject *_self, XGFileDownload* fileDownload);

// method '-[NSObject fileDownloadDidFinish:]'
void _IM_NSObject_fileDownloadDidFinish_C(NSObject *_self, XGFileDownload* fileDownload);

// method '-[XGActionMonitor action]'
int _IM_XGActionMonitor_action(XGActionMonitor *_self);

// method '-[XGActionMonitor actionDidFail]'
BOOL _IM_XGActionMonitor_actionDidFail(XGActionMonitor *_self);

// method '-[XGActionMonitor actionDidSucceed]'
BOOL _IM_XGActionMonitor_actionDidSucceed(XGActionMonitor *_self);

// method '+[XGActionMonitor actionMonitorWithResource:action:]'
id _CM_XGActionMonitor_actionMonitorWithResource_Caction_C(Class _class, XGResource* resource, int action);

// method '+[XGActionMonitor actionMonitorWithResource:action:parameters:]'
id _CM_XGActionMonitor_actionMonitorWithResource_Caction_Cparameters_C(Class _class, XGResource* resource, int action, id parameters);

// method '-[XGActionMonitor error]'
id _IM_XGActionMonitor_error(XGActionMonitor *_self);

// method '-[XGActionMonitor initWithResource:action:parameters:]'
XGActionMonitor *_IM_XGActionMonitor_initWithResource_Caction_Cparameters_C(XGActionMonitor *_self, id resource, int action, id parameters);

// method '-[XGActionMonitor outcome]'
int _IM_XGActionMonitor_outcome(XGActionMonitor *_self);

// method '-[XGActionMonitor parameters]'
id _IM_XGActionMonitor_parameters(XGActionMonitor *_self);

// method '-[XGActionMonitor performAction]'
void _IM_XGActionMonitor_performAction(XGActionMonitor *_self);

// method '-[XGActionMonitor resource]'
XGResource* _IM_XGActionMonitor_resource(XGActionMonitor *_self);

// method '-[XGActionMonitor results]'
id _IM_XGActionMonitor_results(XGActionMonitor *_self);

// method '-[XGAuthenticator beginAuthentication:]'
void _IM_XGAuthenticator_beginAuthentication_C(XGAuthenticator *_self, id piggybackReply);

// method '-[XGAuthenticator delegate]'
id _IM_XGAuthenticator_delegate(XGAuthenticator *_self);

// method '-[XGAuthenticator error]'
id _IM_XGAuthenticator_error(XGAuthenticator *_self);

// method '-[XGAuthenticator failWithError:]'
void _IM_XGAuthenticator_failWithError_C(XGAuthenticator *_self, id error);

// method '-[XGAuthenticator finishAuthentication]'
void _IM_XGAuthenticator_finishAuthentication(XGAuthenticator *_self);

// method '-[XGAuthenticator piggyback]'
id _IM_XGAuthenticator_piggyback(XGAuthenticator *_self);

// method '+[XGAuthenticator profileURI]'
id _CM_XGAuthenticator_profileURI(Class _class);

// method '-[XGAuthenticator receiveData:]'
void _IM_XGAuthenticator_receiveData_C(XGAuthenticator *_self, id data);

// method '-[XGAuthenticator sendData:]'
void _IM_XGAuthenticator_sendData_C(XGAuthenticator *_self, id data);

// method '-[XGAuthenticator setDelegate:]'
void _IM_XGAuthenticator_setDelegate_C(XGAuthenticator *_self, id delegate);

// method '-[XGAuthenticator state]'
int _IM_XGAuthenticator_state(XGAuthenticator *_self);

// method '-[XGConnection authenticator]'
XGAuthenticator* _IM_XGConnection_authenticator(XGConnection *_self);

// method '-[XGConnection close]'
void _IM_XGConnection_close(XGConnection *_self);

// method '-[XGConnection delegate]'
id _IM_XGConnection_delegate(XGConnection *_self);

// method '-[XGConnection error]'
id _IM_XGConnection_error(XGConnection *_self);

// method '-[XGConnection hostname]'
id _IM_XGConnection_hostname(XGConnection *_self);

// method '-[XGConnection initWithHostname:portnumber:]'
XGConnection *_IM_XGConnection_initWithHostname_Cportnumber_C(XGConnection *_self, id hostname, unsigned long portnumber);

// method '-[XGConnection initWithNetService:]'
XGConnection *_IM_XGConnection_initWithNetService_C(XGConnection *_self, id netService);

// method '-[XGConnection isClosed]'
BOOL _IM_XGConnection_isClosed(XGConnection *_self);

// method '-[XGConnection isOpened]'
BOOL _IM_XGConnection_isOpened(XGConnection *_self);

// method '-[XGConnection name]'
id _IM_XGConnection_name(XGConnection *_self);

// method '-[XGConnection netService]'
id _IM_XGConnection_netService(XGConnection *_self);

// method '-[XGConnection open]'
void _IM_XGConnection_open(XGConnection *_self);

// method '-[XGConnection portnumber]'
unsigned long _IM_XGConnection_portnumber(XGConnection *_self);

// method '-[XGConnection servicePrincipal]'
id _IM_XGConnection_servicePrincipal(XGConnection *_self);

// method '-[XGConnection setAuthenticator:]'
void _IM_XGConnection_setAuthenticator_C(XGConnection *_self, XGAuthenticator* authenticator);

// method '-[XGConnection setDelegate:]'
void _IM_XGConnection_setDelegate_C(XGConnection *_self, id delegate);

// method '-[XGConnection state]'
int _IM_XGConnection_state(XGConnection *_self);

// method '+[XGController controllerWithHostname:portnumber:]'
id _CM_XGController_controllerWithHostname_Cportnumber_C(Class _class, id hostname, unsigned long portnumber);

// method '+[XGController controllerWithNetService:]'
id _CM_XGController_controllerWithNetService_C(Class _class, id netService);

// method '-[XGController defaultGrid]'
XGGrid* _IM_XGController_defaultGrid(XGController *_self);

// method '-[XGController gridForIdentifier:]'
XGGrid* _IM_XGController_gridForIdentifier_C(XGController *_self, id identifier);

// method '-[XGController grids]'
id _IM_XGController_grids(XGController *_self);

// method '-[XGController initWithConnection:]'
XGController *_IM_XGController_initWithConnection_C(XGController *_self, XGConnection* connection);

// method '-[XGController jobsPredicateString]'
id _IM_XGController_jobsPredicateString(XGController *_self);

// method '-[XGController performSubmitJobActionWithJobSpecification:gridIdentifier:]'
id _IM_XGController_performSubmitJobActionWithJobSpecification_CgridIdentifier_C(XGController *_self, id jobSpecification, id gridIdentifier);

// method '-[XGController setJobsPredicateString:]'
void _IM_XGController_setJobsPredicateString_C(XGController *_self, id predicateString);

// method '-[XGFile job]'
XGJob* _IM_XGFile_job(XGFile *_self);

// method '-[XGFile path]'
id _IM_XGFile_path(XGFile *_self);

// method '-[XGFile taskIdentifier]'
id _IM_XGFile_taskIdentifier(XGFile *_self);

// method '-[XGFile type]'
int _IM_XGFile_type(XGFile *_self);

// method '-[XGFileDownload cancel]'
void _IM_XGFileDownload_cancel(XGFileDownload *_self);

// method '-[XGFileDownload delegate]'
id _IM_XGFileDownload_delegate(XGFileDownload *_self);

// method '-[XGFileDownload destination]'
id _IM_XGFileDownload_destination(XGFileDownload *_self);

// method '-[XGFileDownload file]'
XGFile* _IM_XGFileDownload_file(XGFileDownload *_self);

// method '-[XGFileDownload initWithFile:delegate:]'
XGFileDownload *_IM_XGFileDownload_initWithFile_Cdelegate_C(XGFileDownload *_self, XGFile* file, id delegate);

// method '-[XGFileDownload setDestination:allowOverwrite:]'
void _IM_XGFileDownload_setDestination_CallowOverwrite_C(XGFileDownload *_self, id destination, BOOL allowOverwrite);

// method '-[XGGSSAuthenticator servicePrincipal]'
id _IM_XGGSSAuthenticator_servicePrincipal(XGGSSAuthenticator *_self);

// method '-[XGGSSAuthenticator setServicePrincipal:]'
void _IM_XGGSSAuthenticator_setServicePrincipal_C(XGGSSAuthenticator *_self, id servicePrincipal);

// method '-[XGGrid isDefault]'
BOOL _IM_XGGrid_isDefault(XGGrid *_self);

// method '-[XGGrid jobForIdentifier:]'
XGJob* _IM_XGGrid_jobForIdentifier_C(XGGrid *_self, id identifier);

// method '-[XGGrid jobs]'
id _IM_XGGrid_jobs(XGGrid *_self);

// method '-[XGJob activeCPUPower]'
float _IM_XGJob_activeCPUPower(XGJob *_self);

// method '-[XGJob applicationIdentifier]'
id _IM_XGJob_applicationIdentifier(XGJob *_self);

// method '-[XGJob applicationInfo]'
id _IM_XGJob_applicationInfo(XGJob *_self);

// method '-[XGJob completedTaskCount]'
int _IM_XGJob_completedTaskCount(XGJob *_self);

// method '-[XGJob dateStarted]'
id _IM_XGJob_dateStarted(XGJob *_self);

// method '-[XGJob dateStopped]'
id _IM_XGJob_dateStopped(XGJob *_self);

// method '-[XGJob dateSubmitted]'
id _IM_XGJob_dateSubmitted(XGJob *_self);

// method '-[XGJob percentDone]'
float _IM_XGJob_percentDone(XGJob *_self);

// method '-[XGJob performDeleteAction]'
XGActionMonitor* _IM_XGJob_performDeleteAction(XGJob *_self);

// method '-[XGJob performGetOutputFilesAction]'
XGActionMonitor* _IM_XGJob_performGetOutputFilesAction(XGJob *_self);

// method '-[XGJob performGetOutputStreamsAction]'
XGActionMonitor* _IM_XGJob_performGetOutputStreamsAction(XGJob *_self);

// method '-[XGJob performGetSpecificationAction]'
XGActionMonitor* _IM_XGJob_performGetSpecificationAction(XGJob *_self);

// method '-[XGJob performRestartAction]'
XGActionMonitor* _IM_XGJob_performRestartAction(XGJob *_self);

// method '-[XGJob performResumeAction]'
XGActionMonitor* _IM_XGJob_performResumeAction(XGJob *_self);

// method '-[XGJob performStopAction]'
XGActionMonitor* _IM_XGJob_performStopAction(XGJob *_self);

// method '-[XGJob performSuspendAction]'
XGActionMonitor* _IM_XGJob_performSuspendAction(XGJob *_self);

// method '-[XGJob taskCount]'
int _IM_XGJob_taskCount(XGJob *_self);

// method '-[XGResource actionMonitors]'
id _IM_XGResource_actionMonitors(XGResource *_self);

// method '-[XGResource connection]'
XGConnection* _IM_XGResource_connection(XGResource *_self);

// method '-[XGResource controller]'
XGController* _IM_XGResource_controller(XGResource *_self);

// method '-[XGResource identifier]'
id _IM_XGResource_identifier(XGResource *_self);

// method '-[XGResource isUpdated]'
BOOL _IM_XGResource_isUpdated(XGResource *_self);

// method '-[XGResource isUpdating]'
BOOL _IM_XGResource_isUpdating(XGResource *_self);

// method '-[XGResource performAction:withParameters:]'
XGActionMonitor* _IM_XGResource_performAction_CwithParameters_C(XGResource *_self, int action, id parameters);

// method '-[XGResource state]'
int _IM_XGResource_state(XGResource *_self);

// method '-[XGTwoWayRandomAuthenticator setPassword:]'
void _IM_XGTwoWayRandomAuthenticator_setPassword_C(XGTwoWayRandomAuthenticator *_self, id password);

// method '-[XGTwoWayRandomAuthenticator setUsername:]'
void _IM_XGTwoWayRandomAuthenticator_setUsername_C(XGTwoWayRandomAuthenticator *_self, id username);

// method '-[XGTwoWayRandomAuthenticator username]'
id _IM_XGTwoWayRandomAuthenticator_username(XGTwoWayRandomAuthenticator *_self);


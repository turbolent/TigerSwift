// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// opaque 'NSAppleEventManagerSuspensionID'
typedef struct __NSAppleEventManagerSuspension *NSAppleEventManagerSuspensionID;

// opaque 'NSHandler'
typedef struct _NSHandler *NSHandler;

// opaque 'NSHashTable'
typedef struct _NSHashTable *NSHashTable;

// opaque 'NSMapTable'
typedef struct _NSMapTable *NSMapTable;

// opaque 'NSZone'
typedef struct _NSZone *NSZone;

// class 'NSAffineTransform'
typedef struct objc_object NSAffineTransform;

// class 'NSAppleEventDescriptor'
typedef struct objc_object NSAppleEventDescriptor;

// class 'NSAppleEventManager'
typedef struct objc_object NSAppleEventManager;

// class 'NSAppleScript'
typedef struct objc_object NSAppleScript;

// class 'NSArchiver'
typedef struct objc_object NSArchiver;

// class 'NSArray'
typedef struct objc_object NSArray;

// class 'NSAssertionHandler'
typedef struct objc_object NSAssertionHandler;

// class 'NSAttributedString'
typedef struct objc_object NSAttributedString;

// class 'NSAutoreleasePool'
typedef struct objc_object NSAutoreleasePool;

// class 'NSBundle'
typedef struct objc_object NSBundle;

// class 'NSCachedURLResponse'
typedef struct objc_object NSCachedURLResponse;

// class 'NSCalendar'
typedef struct objc_object NSCalendar;

// class 'NSCalendarDate'
typedef struct objc_object NSCalendarDate;

// class 'NSCharacterSet'
typedef struct objc_object NSCharacterSet;

// class 'NSClassDescription'
typedef struct objc_object NSClassDescription;

// class 'NSCloneCommand'
typedef struct objc_object NSCloneCommand;

// class 'NSCloseCommand'
typedef struct objc_object NSCloseCommand;

// class 'NSCoder'
typedef struct objc_object NSCoder;

// class 'NSComparisonPredicate'
typedef struct objc_object NSComparisonPredicate;

// class 'NSCompoundPredicate'
typedef struct objc_object NSCompoundPredicate;

// class 'NSConditionLock'
typedef struct objc_object NSConditionLock;

// class 'NSConnection'
typedef struct objc_object NSConnection;

// class 'NSCountedSet'
typedef struct objc_object NSCountedSet;

// class 'NSCreateCommand'
typedef struct objc_object NSCreateCommand;

// class 'NSData'
typedef struct objc_object NSData;

// class 'NSDate'
typedef struct objc_object NSDate;

// class 'NSDateComponents'
typedef struct objc_object NSDateComponents;

// class 'NSDateFormatter'
typedef struct objc_object NSDateFormatter;

// class 'NSDecimalNumber'
typedef struct objc_object NSDecimalNumber;

// class 'NSDecimalNumberHandler'
typedef struct objc_object NSDecimalNumberHandler;

// class 'NSDeleteCommand'
typedef struct objc_object NSDeleteCommand;

// class 'NSDictionary'
typedef struct objc_object NSDictionary;

// class 'NSDirectoryEnumerator'
typedef struct objc_object NSDirectoryEnumerator;

// class 'NSDistantObject'
typedef struct objc_object NSDistantObject;

// class 'NSDistantObjectRequest'
typedef struct objc_object NSDistantObjectRequest;

// class 'NSDistributedLock'
typedef struct objc_object NSDistributedLock;

// class 'NSDistributedNotificationCenter'
typedef struct objc_object NSDistributedNotificationCenter;

// class 'NSEnumerator'
typedef struct objc_object NSEnumerator;

// class 'NSError'
typedef struct objc_object NSError;

// class 'NSException'
typedef struct objc_object NSException;

// class 'NSExpression'
typedef struct objc_object NSExpression;

// class 'NSFileHandle'
typedef struct objc_object NSFileHandle;

// class 'NSFileManager'
typedef struct objc_object NSFileManager;

// class 'NSFormatter'
typedef struct objc_object NSFormatter;

// class 'NSHTTPCookie'
typedef struct objc_object NSHTTPCookie;

// class 'NSHTTPCookieStorage'
typedef struct objc_object NSHTTPCookieStorage;

// class 'NSHTTPURLResponse'
typedef struct objc_object NSHTTPURLResponse;

// class 'NSHost'
typedef struct objc_object NSHost;

// class 'NSIndexPath'
typedef struct objc_object NSIndexPath;

// class 'NSIndexSet'
typedef struct objc_object NSIndexSet;

// class 'NSIndexSpecifier'
typedef struct objc_object NSIndexSpecifier;

// class 'NSInputStream'
typedef struct objc_object NSInputStream;

// class 'NSInvocation'
typedef struct objc_object NSInvocation;

// class 'NSKeyedArchiver'
typedef struct objc_object NSKeyedArchiver;

// class 'NSKeyedUnarchiver'
typedef struct objc_object NSKeyedUnarchiver;

// class 'NSLocale'
typedef struct objc_object NSLocale;

// class 'NSLock'
typedef struct objc_object NSLock;

// class 'NSLogicalTest'
typedef struct objc_object NSLogicalTest;

// class 'NSMachBootstrapServer'
typedef struct objc_object NSMachBootstrapServer;

// class 'NSMachPort'
typedef struct objc_object NSMachPort;

// class 'NSMessagePortNameServer'
typedef struct objc_object NSMessagePortNameServer;

// class 'NSMetadataItem'
typedef struct objc_object NSMetadataItem;

// class 'NSMetadataQuery'
typedef struct objc_object NSMetadataQuery;

// class 'NSMetadataQueryAttributeValueTuple'
typedef struct objc_object NSMetadataQueryAttributeValueTuple;

// class 'NSMetadataQueryResultGroup'
typedef struct objc_object NSMetadataQueryResultGroup;

// class 'NSMethodSignature'
typedef struct objc_object NSMethodSignature;

// class 'NSMoveCommand'
typedef struct objc_object NSMoveCommand;

// class 'NSMutableArray'
typedef struct objc_object NSMutableArray;

// class 'NSMutableAttributedString'
typedef struct objc_object NSMutableAttributedString;

// class 'NSMutableCharacterSet'
typedef struct objc_object NSMutableCharacterSet;

// class 'NSMutableData'
typedef struct objc_object NSMutableData;

// class 'NSMutableDictionary'
typedef struct objc_object NSMutableDictionary;

// class 'NSMutableIndexSet'
typedef struct objc_object NSMutableIndexSet;

// class 'NSMutableSet'
typedef struct objc_object NSMutableSet;

// class 'NSMutableString'
typedef struct objc_object NSMutableString;

// class 'NSMutableURLRequest'
typedef struct objc_object NSMutableURLRequest;

// class 'NSNameSpecifier'
typedef struct objc_object NSNameSpecifier;

// class 'NSNetService'
typedef struct objc_object NSNetService;

// class 'NSNetServiceBrowser'
typedef struct objc_object NSNetServiceBrowser;

// class 'NSNotification'
typedef struct objc_object NSNotification;

// class 'NSNotificationCenter'
typedef struct objc_object NSNotificationCenter;

// class 'NSNotificationQueue'
typedef struct objc_object NSNotificationQueue;

// class 'NSNull'
typedef struct objc_object NSNull;

// class 'NSNumber'
typedef struct objc_object NSNumber;

// class 'NSNumberFormatter'
typedef struct objc_object NSNumberFormatter;

// class 'NSObject'
typedef struct objc_object NSObject;

// class 'NSOutputStream'
typedef struct objc_object NSOutputStream;

// class 'NSPipe'
typedef struct objc_object NSPipe;

// class 'NSPort'
typedef struct objc_object NSPort;

// class 'NSPortCoder'
typedef struct objc_object NSPortCoder;

// class 'NSPortMessage'
typedef struct objc_object NSPortMessage;

// class 'NSPortNameServer'
typedef struct objc_object NSPortNameServer;

// class 'NSPositionalSpecifier'
typedef struct objc_object NSPositionalSpecifier;

// class 'NSPredicate'
typedef struct objc_object NSPredicate;

// class 'NSProcessInfo'
typedef struct objc_object NSProcessInfo;

// class 'NSPropertyListSerialization'
typedef struct objc_object NSPropertyListSerialization;

// class 'NSProtocolChecker'
typedef struct objc_object NSProtocolChecker;

// class 'NSProxy'
typedef struct objc_object NSProxy;

// class 'NSQuitCommand'
typedef struct objc_object NSQuitCommand;

// class 'NSRangeSpecifier'
typedef struct objc_object NSRangeSpecifier;

// class 'NSRecursiveLock'
typedef struct objc_object NSRecursiveLock;

// class 'NSRelativeSpecifier'
typedef struct objc_object NSRelativeSpecifier;

// class 'NSRunLoop'
typedef struct objc_object NSRunLoop;

// class 'NSScanner'
typedef struct objc_object NSScanner;

// class 'NSScriptClassDescription'
typedef struct objc_object NSScriptClassDescription;

// class 'NSScriptCoercionHandler'
typedef struct objc_object NSScriptCoercionHandler;

// class 'NSScriptCommand'
typedef struct objc_object NSScriptCommand;

// class 'NSScriptCommandDescription'
typedef struct objc_object NSScriptCommandDescription;

// class 'NSScriptExecutionContext'
typedef struct objc_object NSScriptExecutionContext;

// class 'NSScriptObjectSpecifier'
typedef struct objc_object NSScriptObjectSpecifier;

// class 'NSScriptSuiteRegistry'
typedef struct objc_object NSScriptSuiteRegistry;

// class 'NSScriptWhoseTest'
typedef struct objc_object NSScriptWhoseTest;

// class 'NSSet'
typedef struct objc_object NSSet;

// class 'NSSetCommand'
typedef struct objc_object NSSetCommand;

// class 'NSSocketPort'
typedef struct objc_object NSSocketPort;

// class 'NSSocketPortNameServer'
typedef struct objc_object NSSocketPortNameServer;

// class 'NSSortDescriptor'
typedef struct objc_object NSSortDescriptor;

// class 'NSSpecifierTest'
typedef struct objc_object NSSpecifierTest;

// class 'NSSpellServer'
typedef struct objc_object NSSpellServer;

// class 'NSStream'
typedef struct objc_object NSStream;

// class 'NSString'
typedef struct objc_object NSString;

// class 'NSTask'
typedef struct objc_object NSTask;

// class 'NSThread'
typedef struct objc_object NSThread;

// class 'NSTimeZone'
typedef struct objc_object NSTimeZone;

// class 'NSTimer'
typedef struct objc_object NSTimer;

// class 'NSURL'
typedef struct objc_object NSURL;

// class 'NSURLAuthenticationChallenge'
typedef struct objc_object NSURLAuthenticationChallenge;

// class 'NSURLCache'
typedef struct objc_object NSURLCache;

// class 'NSURLConnection'
typedef struct objc_object NSURLConnection;

// class 'NSURLCredential'
typedef struct objc_object NSURLCredential;

// class 'NSURLCredentialStorage'
typedef struct objc_object NSURLCredentialStorage;

// class 'NSURLDownload'
typedef struct objc_object NSURLDownload;

// class 'NSURLHandle'
typedef struct objc_object NSURLHandle;

// class 'NSURLProtectionSpace'
typedef struct objc_object NSURLProtectionSpace;

// class 'NSURLProtocol'
typedef struct objc_object NSURLProtocol;

// class 'NSURLRequest'
typedef struct objc_object NSURLRequest;

// class 'NSURLResponse'
typedef struct objc_object NSURLResponse;

// class 'NSUnarchiver'
typedef struct objc_object NSUnarchiver;

// class 'NSUndoManager'
typedef struct objc_object NSUndoManager;

// class 'NSUniqueIDSpecifier'
typedef struct objc_object NSUniqueIDSpecifier;

// class 'NSUserDefaults'
typedef struct objc_object NSUserDefaults;

// class 'NSValue'
typedef struct objc_object NSValue;

// class 'NSValueTransformer'
typedef struct objc_object NSValueTransformer;

// class 'NSWhoseSpecifier'
typedef struct objc_object NSWhoseSpecifier;

// class 'NSXMLDTD'
typedef struct objc_object NSXMLDTD;

// class 'NSXMLDTDNode'
typedef struct objc_object NSXMLDTDNode;

// class 'NSXMLDocument'
typedef struct objc_object NSXMLDocument;

// class 'NSXMLElement'
typedef struct objc_object NSXMLElement;

// class 'NSXMLNode'
typedef struct objc_object NSXMLNode;

// class 'NSXMLParser'
typedef struct objc_object NSXMLParser;

// struct '_NSAffineTransformStruct'
struct _NSAffineTransformStruct {
    float m11;
    float m12;
    float m21;
    float m22;
    float tX;
    float tY;
};

typedef struct _NSAffineTransformStruct NSAffineTransformStruct;

// struct '_NSPoint'
struct _NSPoint {
    float x;
    float y;
};

typedef struct _NSPoint NSPoint;

// struct '_NSSize'
struct _NSSize {
    float width;
    float height;
};

typedef struct _NSSize NSSize;

// struct '_NSRect'
struct _NSRect {
    struct _NSPoint origin;
    struct _NSSize size;
};

typedef struct _NSRect NSRect;

// struct '_NSHashEnumerator'
struct _NSHashEnumerator {
    unsigned int _pi;
    unsigned int _si;
    void *_bs;
};

typedef struct _NSHashEnumerator NSHashEnumerator;

// struct '_NSRange'
struct _NSRange {
    unsigned int location;
    unsigned int length;
};

typedef struct _NSRange NSRange;

// struct '_NSSwappedDouble'
struct _NSSwappedDouble {
    unsigned long long v;
};

typedef struct _NSSwappedDouble NSSwappedDouble;

// struct '_NSSwappedFloat'
struct _NSSwappedFloat {
    unsigned long v;
};

typedef struct _NSSwappedFloat NSSwappedFloat;

// struct '_NSMapEnumerator'
struct _NSMapEnumerator {
    unsigned int _pi;
    unsigned int _si;
    void *_bs;
};

typedef struct _NSMapEnumerator NSMapEnumerator;

// getter for constant 'NSAMPMDesignation'
NSString* _get_NSAMPMDesignation(void);

// getter for constant 'NSAppleEventManagerWillProcessFirstEventNotification'
NSString* _get_NSAppleEventManagerWillProcessFirstEventNotification(void);

// setter for constant 'NSAppleEventManagerWillProcessFirstEventNotification'
void _set_NSAppleEventManagerWillProcessFirstEventNotification(NSString* value);

// getter for constant 'NSAppleEventTimeOutDefault'
double _get_NSAppleEventTimeOutDefault(void);

// getter for constant 'NSAppleEventTimeOutNone'
double _get_NSAppleEventTimeOutNone(void);

// getter for constant 'NSAppleScriptErrorAppName'
NSString* _get_NSAppleScriptErrorAppName(void);

// getter for constant 'NSAppleScriptErrorBriefMessage'
NSString* _get_NSAppleScriptErrorBriefMessage(void);

// getter for constant 'NSAppleScriptErrorMessage'
NSString* _get_NSAppleScriptErrorMessage(void);

// getter for constant 'NSAppleScriptErrorNumber'
NSString* _get_NSAppleScriptErrorNumber(void);

// getter for constant 'NSAppleScriptErrorRange'
NSString* _get_NSAppleScriptErrorRange(void);

// getter for constant 'NSArgumentDomain'
NSString* _get_NSArgumentDomain(void);

// getter for constant 'NSAverageKeyValueOperator'
NSString* _get_NSAverageKeyValueOperator(void);

// getter for constant 'NSBuddhistCalendar'
NSString* _get_NSBuddhistCalendar(void);

// getter for constant 'NSBundleDidLoadNotification'
NSString* _get_NSBundleDidLoadNotification(void);

// getter for constant 'NSCharacterConversionException'
NSString* _get_NSCharacterConversionException(void);

// getter for constant 'NSChineseCalendar'
NSString* _get_NSChineseCalendar(void);

// getter for constant 'NSClassDescriptionNeededForClassNotification'
NSString* _get_NSClassDescriptionNeededForClassNotification(void);

// setter for constant 'NSClassDescriptionNeededForClassNotification'
void _set_NSClassDescriptionNeededForClassNotification(NSString* value);

// getter for constant 'NSCocoaErrorDomain'
NSString* _get_NSCocoaErrorDomain(void);

// getter for constant 'NSConnectionDidDieNotification'
NSString* _get_NSConnectionDidDieNotification(void);

// getter for constant 'NSConnectionDidInitializeNotification'
NSString* _get_NSConnectionDidInitializeNotification(void);

// getter for constant 'NSConnectionReplyMode'
NSString* _get_NSConnectionReplyMode(void);

// getter for constant 'NSCountKeyValueOperator'
NSString* _get_NSCountKeyValueOperator(void);

// getter for constant 'NSCurrencySymbol'
NSString* _get_NSCurrencySymbol(void);

// getter for constant 'NSDateFormatString'
NSString* _get_NSDateFormatString(void);

// getter for constant 'NSDateTimeOrdering'
NSString* _get_NSDateTimeOrdering(void);

// getter for constant 'NSDeallocateZombies'
BOOL _get_NSDeallocateZombies(void);

// setter for constant 'NSDeallocateZombies'
void _set_NSDeallocateZombies(BOOL value);

// getter for constant 'NSDebugEnabled'
BOOL _get_NSDebugEnabled(void);

// setter for constant 'NSDebugEnabled'
void _set_NSDebugEnabled(BOOL value);

// getter for constant 'NSDecimalDigits'
NSString* _get_NSDecimalDigits(void);

// getter for constant 'NSDecimalNumberDivideByZeroException'
NSString* _get_NSDecimalNumberDivideByZeroException(void);

// getter for constant 'NSDecimalNumberExactnessException'
NSString* _get_NSDecimalNumberExactnessException(void);

// getter for constant 'NSDecimalNumberOverflowException'
NSString* _get_NSDecimalNumberOverflowException(void);

// getter for constant 'NSDecimalNumberUnderflowException'
NSString* _get_NSDecimalNumberUnderflowException(void);

// getter for constant 'NSDecimalSeparator'
NSString* _get_NSDecimalSeparator(void);

// getter for constant 'NSDefaultRunLoopMode'
NSString* _get_NSDefaultRunLoopMode(void);

// getter for constant 'NSDestinationInvalidException'
NSString* _get_NSDestinationInvalidException(void);

// getter for constant 'NSDidBecomeSingleThreadedNotification'
NSString* _get_NSDidBecomeSingleThreadedNotification(void);

// getter for constant 'NSDistinctUnionOfArraysKeyValueOperator'
NSString* _get_NSDistinctUnionOfArraysKeyValueOperator(void);

// getter for constant 'NSDistinctUnionOfObjectsKeyValueOperator'
NSString* _get_NSDistinctUnionOfObjectsKeyValueOperator(void);

// getter for constant 'NSDistinctUnionOfSetsKeyValueOperator'
NSString* _get_NSDistinctUnionOfSetsKeyValueOperator(void);

// getter for constant 'NSEarlierTimeDesignations'
NSString* _get_NSEarlierTimeDesignations(void);

// getter for constant 'NSErrorFailingURLStringKey'
NSString* _get_NSErrorFailingURLStringKey(void);

// getter for constant 'NSFTPPropertyActiveTransferModeKey'
NSString* _get_NSFTPPropertyActiveTransferModeKey(void);

// setter for constant 'NSFTPPropertyActiveTransferModeKey'
void _set_NSFTPPropertyActiveTransferModeKey(NSString* value);

// getter for constant 'NSFTPPropertyFTPProxy'
NSString* _get_NSFTPPropertyFTPProxy(void);

// setter for constant 'NSFTPPropertyFTPProxy'
void _set_NSFTPPropertyFTPProxy(NSString* value);

// getter for constant 'NSFTPPropertyFileOffsetKey'
NSString* _get_NSFTPPropertyFileOffsetKey(void);

// setter for constant 'NSFTPPropertyFileOffsetKey'
void _set_NSFTPPropertyFileOffsetKey(NSString* value);

// getter for constant 'NSFTPPropertyUserLoginKey'
NSString* _get_NSFTPPropertyUserLoginKey(void);

// setter for constant 'NSFTPPropertyUserLoginKey'
void _set_NSFTPPropertyUserLoginKey(NSString* value);

// getter for constant 'NSFTPPropertyUserPasswordKey'
NSString* _get_NSFTPPropertyUserPasswordKey(void);

// setter for constant 'NSFTPPropertyUserPasswordKey'
void _set_NSFTPPropertyUserPasswordKey(NSString* value);

// getter for constant 'NSFailedAuthenticationException'
NSString* _get_NSFailedAuthenticationException(void);

// getter for constant 'NSFileAppendOnly'
NSString* _get_NSFileAppendOnly(void);

// getter for constant 'NSFileBusy'
NSString* _get_NSFileBusy(void);

// getter for constant 'NSFileCreationDate'
NSString* _get_NSFileCreationDate(void);

// getter for constant 'NSFileDeviceIdentifier'
NSString* _get_NSFileDeviceIdentifier(void);

// getter for constant 'NSFileExtensionHidden'
NSString* _get_NSFileExtensionHidden(void);

// getter for constant 'NSFileGroupOwnerAccountID'
NSString* _get_NSFileGroupOwnerAccountID(void);

// getter for constant 'NSFileGroupOwnerAccountName'
NSString* _get_NSFileGroupOwnerAccountName(void);

// getter for constant 'NSFileHFSCreatorCode'
NSString* _get_NSFileHFSCreatorCode(void);

// getter for constant 'NSFileHFSTypeCode'
NSString* _get_NSFileHFSTypeCode(void);

// getter for constant 'NSFileHandleConnectionAcceptedNotification'
NSString* _get_NSFileHandleConnectionAcceptedNotification(void);

// getter for constant 'NSFileHandleDataAvailableNotification'
NSString* _get_NSFileHandleDataAvailableNotification(void);

// getter for constant 'NSFileHandleNotificationDataItem'
NSString* _get_NSFileHandleNotificationDataItem(void);

// getter for constant 'NSFileHandleNotificationFileHandleItem'
NSString* _get_NSFileHandleNotificationFileHandleItem(void);

// getter for constant 'NSFileHandleNotificationMonitorModes'
NSString* _get_NSFileHandleNotificationMonitorModes(void);

// getter for constant 'NSFileHandleOperationException'
NSString* _get_NSFileHandleOperationException(void);

// getter for constant 'NSFileHandleReadCompletionNotification'
NSString* _get_NSFileHandleReadCompletionNotification(void);

// getter for constant 'NSFileHandleReadToEndOfFileCompletionNotification'
NSString* _get_NSFileHandleReadToEndOfFileCompletionNotification(void);

// getter for constant 'NSFileImmutable'
NSString* _get_NSFileImmutable(void);

// getter for constant 'NSFileModificationDate'
NSString* _get_NSFileModificationDate(void);

// getter for constant 'NSFileOwnerAccountID'
NSString* _get_NSFileOwnerAccountID(void);

// getter for constant 'NSFileOwnerAccountName'
NSString* _get_NSFileOwnerAccountName(void);

// getter for constant 'NSFilePathErrorKey'
NSString* _get_NSFilePathErrorKey(void);

// getter for constant 'NSFilePosixPermissions'
NSString* _get_NSFilePosixPermissions(void);

// getter for constant 'NSFileReferenceCount'
NSString* _get_NSFileReferenceCount(void);

// getter for constant 'NSFileSize'
NSString* _get_NSFileSize(void);

// getter for constant 'NSFileSystemFileNumber'
NSString* _get_NSFileSystemFileNumber(void);

// getter for constant 'NSFileSystemFreeNodes'
NSString* _get_NSFileSystemFreeNodes(void);

// getter for constant 'NSFileSystemFreeSize'
NSString* _get_NSFileSystemFreeSize(void);

// getter for constant 'NSFileSystemNodes'
NSString* _get_NSFileSystemNodes(void);

// getter for constant 'NSFileSystemNumber'
NSString* _get_NSFileSystemNumber(void);

// getter for constant 'NSFileSystemSize'
NSString* _get_NSFileSystemSize(void);

// getter for constant 'NSFileType'
NSString* _get_NSFileType(void);

// getter for constant 'NSFileTypeBlockSpecial'
NSString* _get_NSFileTypeBlockSpecial(void);

// getter for constant 'NSFileTypeCharacterSpecial'
NSString* _get_NSFileTypeCharacterSpecial(void);

// getter for constant 'NSFileTypeDirectory'
NSString* _get_NSFileTypeDirectory(void);

// getter for constant 'NSFileTypeRegular'
NSString* _get_NSFileTypeRegular(void);

// getter for constant 'NSFileTypeSocket'
NSString* _get_NSFileTypeSocket(void);

// getter for constant 'NSFileTypeSymbolicLink'
NSString* _get_NSFileTypeSymbolicLink(void);

// getter for constant 'NSFileTypeUnknown'
NSString* _get_NSFileTypeUnknown(void);

// getter for constant 'NSFoundationVersionNumber'
double _get_NSFoundationVersionNumber(void);

// setter for constant 'NSFoundationVersionNumber'
void _set_NSFoundationVersionNumber(double value);

// getter for constant 'NSGenericException'
NSString* _get_NSGenericException(void);

// getter for constant 'NSGlobalDomain'
NSString* _get_NSGlobalDomain(void);

// getter for constant 'NSGregorianCalendar'
NSString* _get_NSGregorianCalendar(void);

// getter for constant 'NSHTTPCookieComment'
NSString* _get_NSHTTPCookieComment(void);

// getter for constant 'NSHTTPCookieCommentURL'
NSString* _get_NSHTTPCookieCommentURL(void);

// getter for constant 'NSHTTPCookieDiscard'
NSString* _get_NSHTTPCookieDiscard(void);

// getter for constant 'NSHTTPCookieDomain'
NSString* _get_NSHTTPCookieDomain(void);

// getter for constant 'NSHTTPCookieExpires'
NSString* _get_NSHTTPCookieExpires(void);

// getter for constant 'NSHTTPCookieManagerAcceptPolicyChangedNotification'
NSString* _get_NSHTTPCookieManagerAcceptPolicyChangedNotification(void);

// getter for constant 'NSHTTPCookieManagerCookiesChangedNotification'
NSString* _get_NSHTTPCookieManagerCookiesChangedNotification(void);

// getter for constant 'NSHTTPCookieMaximumAge'
NSString* _get_NSHTTPCookieMaximumAge(void);

// getter for constant 'NSHTTPCookieName'
NSString* _get_NSHTTPCookieName(void);

// getter for constant 'NSHTTPCookieOriginURL'
NSString* _get_NSHTTPCookieOriginURL(void);

// getter for constant 'NSHTTPCookiePath'
NSString* _get_NSHTTPCookiePath(void);

// getter for constant 'NSHTTPCookiePort'
NSString* _get_NSHTTPCookiePort(void);

// getter for constant 'NSHTTPCookieSecure'
NSString* _get_NSHTTPCookieSecure(void);

// getter for constant 'NSHTTPCookieValue'
NSString* _get_NSHTTPCookieValue(void);

// getter for constant 'NSHTTPCookieVersion'
NSString* _get_NSHTTPCookieVersion(void);

// getter for constant 'NSHTTPPropertyErrorPageDataKey'
NSString* _get_NSHTTPPropertyErrorPageDataKey(void);

// setter for constant 'NSHTTPPropertyErrorPageDataKey'
void _set_NSHTTPPropertyErrorPageDataKey(NSString* value);

// getter for constant 'NSHTTPPropertyHTTPProxy'
NSString* _get_NSHTTPPropertyHTTPProxy(void);

// setter for constant 'NSHTTPPropertyHTTPProxy'
void _set_NSHTTPPropertyHTTPProxy(NSString* value);

// getter for constant 'NSHTTPPropertyRedirectionHeadersKey'
NSString* _get_NSHTTPPropertyRedirectionHeadersKey(void);

// setter for constant 'NSHTTPPropertyRedirectionHeadersKey'
void _set_NSHTTPPropertyRedirectionHeadersKey(NSString* value);

// getter for constant 'NSHTTPPropertyServerHTTPVersionKey'
NSString* _get_NSHTTPPropertyServerHTTPVersionKey(void);

// setter for constant 'NSHTTPPropertyServerHTTPVersionKey'
void _set_NSHTTPPropertyServerHTTPVersionKey(NSString* value);

// getter for constant 'NSHTTPPropertyStatusCodeKey'
NSString* _get_NSHTTPPropertyStatusCodeKey(void);

// setter for constant 'NSHTTPPropertyStatusCodeKey'
void _set_NSHTTPPropertyStatusCodeKey(NSString* value);

// getter for constant 'NSHTTPPropertyStatusReasonKey'
NSString* _get_NSHTTPPropertyStatusReasonKey(void);

// setter for constant 'NSHTTPPropertyStatusReasonKey'
void _set_NSHTTPPropertyStatusReasonKey(NSString* value);

// getter for constant 'NSHangOnUncaughtException'
BOOL _get_NSHangOnUncaughtException(void);

// setter for constant 'NSHangOnUncaughtException'
void _set_NSHangOnUncaughtException(BOOL value);

// getter for constant 'NSHebrewCalendar'
NSString* _get_NSHebrewCalendar(void);

// getter for constant 'NSHourNameDesignations'
NSString* _get_NSHourNameDesignations(void);

// getter for constant 'NSInconsistentArchiveException'
NSString* _get_NSInconsistentArchiveException(void);

// getter for constant 'NSInternalInconsistencyException'
NSString* _get_NSInternalInconsistencyException(void);

// getter for constant 'NSInternationalCurrencyString'
NSString* _get_NSInternationalCurrencyString(void);

// getter for constant 'NSInvalidArchiveOperationException'
NSString* _get_NSInvalidArchiveOperationException(void);

// getter for constant 'NSInvalidArgumentException'
NSString* _get_NSInvalidArgumentException(void);

// getter for constant 'NSInvalidReceivePortException'
NSString* _get_NSInvalidReceivePortException(void);

// getter for constant 'NSInvalidSendPortException'
NSString* _get_NSInvalidSendPortException(void);

// getter for constant 'NSInvalidUnarchiveOperationException'
NSString* _get_NSInvalidUnarchiveOperationException(void);

// getter for constant 'NSIsNilTransformerName'
NSString* _get_NSIsNilTransformerName(void);

// getter for constant 'NSIsNotNilTransformerName'
NSString* _get_NSIsNotNilTransformerName(void);

// getter for constant 'NSIslamicCalendar'
NSString* _get_NSIslamicCalendar(void);

// getter for constant 'NSIslamicCivilCalendar'
NSString* _get_NSIslamicCivilCalendar(void);

// getter for constant 'NSJapaneseCalendar'
NSString* _get_NSJapaneseCalendar(void);

// getter for constant 'NSKeepAllocationStatistics'
BOOL _get_NSKeepAllocationStatistics(void);

// setter for constant 'NSKeepAllocationStatistics'
void _set_NSKeepAllocationStatistics(BOOL value);

// getter for constant 'NSKeyValueChangeIndexesKey'
NSString* _get_NSKeyValueChangeIndexesKey(void);

// getter for constant 'NSKeyValueChangeKindKey'
NSString* _get_NSKeyValueChangeKindKey(void);

// getter for constant 'NSKeyValueChangeNewKey'
NSString* _get_NSKeyValueChangeNewKey(void);

// getter for constant 'NSKeyValueChangeOldKey'
NSString* _get_NSKeyValueChangeOldKey(void);

// getter for constant 'NSLaterTimeDesignations'
NSString* _get_NSLaterTimeDesignations(void);

// getter for constant 'NSLoadedClasses'
NSString* _get_NSLoadedClasses(void);

// getter for constant 'NSLocalNotificationCenterType'
NSString* _get_NSLocalNotificationCenterType(void);

// getter for constant 'NSLocaleCalendar'
NSString* _get_NSLocaleCalendar(void);

// getter for constant 'NSLocaleCollationIdentifier'
NSString* _get_NSLocaleCollationIdentifier(void);

// getter for constant 'NSLocaleCountryCode'
NSString* _get_NSLocaleCountryCode(void);

// getter for constant 'NSLocaleCurrencyCode'
NSString* _get_NSLocaleCurrencyCode(void);

// getter for constant 'NSLocaleCurrencySymbol'
NSString* _get_NSLocaleCurrencySymbol(void);

// getter for constant 'NSLocaleDecimalSeparator'
NSString* _get_NSLocaleDecimalSeparator(void);

// getter for constant 'NSLocaleExemplarCharacterSet'
NSString* _get_NSLocaleExemplarCharacterSet(void);

// getter for constant 'NSLocaleGroupingSeparator'
NSString* _get_NSLocaleGroupingSeparator(void);

// getter for constant 'NSLocaleIdentifier'
NSString* _get_NSLocaleIdentifier(void);

// getter for constant 'NSLocaleLanguageCode'
NSString* _get_NSLocaleLanguageCode(void);

// getter for constant 'NSLocaleMeasurementSystem'
NSString* _get_NSLocaleMeasurementSystem(void);

// getter for constant 'NSLocaleScriptCode'
NSString* _get_NSLocaleScriptCode(void);

// getter for constant 'NSLocaleUsesMetricSystem'
NSString* _get_NSLocaleUsesMetricSystem(void);

// getter for constant 'NSLocaleVariantCode'
NSString* _get_NSLocaleVariantCode(void);

// getter for constant 'NSLocalizedDescriptionKey'
NSString* _get_NSLocalizedDescriptionKey(void);

// getter for constant 'NSLocalizedFailureReasonErrorKey'
NSString* _get_NSLocalizedFailureReasonErrorKey(void);

// getter for constant 'NSLocalizedRecoveryOptionsErrorKey'
NSString* _get_NSLocalizedRecoveryOptionsErrorKey(void);

// getter for constant 'NSLocalizedRecoverySuggestionErrorKey'
NSString* _get_NSLocalizedRecoverySuggestionErrorKey(void);

// getter for constant 'NSMachErrorDomain'
NSString* _get_NSMachErrorDomain(void);

// getter for constant 'NSMallocException'
NSString* _get_NSMallocException(void);

// getter for constant 'NSMaximumKeyValueOperator'
NSString* _get_NSMaximumKeyValueOperator(void);

// getter for constant 'NSMetadataQueryDidFinishGatheringNotification'
NSString* _get_NSMetadataQueryDidFinishGatheringNotification(void);

// getter for constant 'NSMetadataQueryDidStartGatheringNotification'
NSString* _get_NSMetadataQueryDidStartGatheringNotification(void);

// getter for constant 'NSMetadataQueryDidUpdateNotification'
NSString* _get_NSMetadataQueryDidUpdateNotification(void);

// getter for constant 'NSMetadataQueryGatheringProgressNotification'
NSString* _get_NSMetadataQueryGatheringProgressNotification(void);

// getter for constant 'NSMetadataQueryLocalComputerScope'
NSString* _get_NSMetadataQueryLocalComputerScope(void);

// getter for constant 'NSMetadataQueryNetworkScope'
NSString* _get_NSMetadataQueryNetworkScope(void);

// getter for constant 'NSMetadataQueryResultContentRelevanceAttribute'
NSString* _get_NSMetadataQueryResultContentRelevanceAttribute(void);

// getter for constant 'NSMetadataQueryUserHomeScope'
NSString* _get_NSMetadataQueryUserHomeScope(void);

// getter for constant 'NSMinimumKeyValueOperator'
NSString* _get_NSMinimumKeyValueOperator(void);

// getter for constant 'NSMonthNameArray'
NSString* _get_NSMonthNameArray(void);

// getter for constant 'NSNegateBooleanTransformerName'
NSString* _get_NSNegateBooleanTransformerName(void);

// getter for constant 'NSNegativeCurrencyFormatString'
NSString* _get_NSNegativeCurrencyFormatString(void);

// getter for constant 'NSNetServicesErrorCode'
NSString* _get_NSNetServicesErrorCode(void);

// getter for constant 'NSNetServicesErrorDomain'
NSString* _get_NSNetServicesErrorDomain(void);

// getter for constant 'NSNextDayDesignations'
NSString* _get_NSNextDayDesignations(void);

// getter for constant 'NSNextNextDayDesignations'
NSString* _get_NSNextNextDayDesignations(void);

// getter for constant 'NSOSStatusErrorDomain'
NSString* _get_NSOSStatusErrorDomain(void);

// getter for constant 'NSObjectInaccessibleException'
NSString* _get_NSObjectInaccessibleException(void);

// getter for constant 'NSObjectNotAvailableException'
NSString* _get_NSObjectNotAvailableException(void);

// getter for constant 'NSOldStyleException'
NSString* _get_NSOldStyleException(void);

// getter for constant 'NSOperationNotSupportedForKeyException'
NSString* _get_NSOperationNotSupportedForKeyException(void);

// setter for constant 'NSOperationNotSupportedForKeyException'
void _set_NSOperationNotSupportedForKeyException(NSString* value);

// getter for constant 'NSPOSIXErrorDomain'
NSString* _get_NSPOSIXErrorDomain(void);

// getter for constant 'NSParseErrorException'
NSString* _get_NSParseErrorException(void);

// getter for constant 'NSPortDidBecomeInvalidNotification'
NSString* _get_NSPortDidBecomeInvalidNotification(void);

// getter for constant 'NSPortReceiveException'
NSString* _get_NSPortReceiveException(void);

// getter for constant 'NSPortSendException'
NSString* _get_NSPortSendException(void);

// getter for constant 'NSPortTimeoutException'
NSString* _get_NSPortTimeoutException(void);

// getter for constant 'NSPositiveCurrencyFormatString'
NSString* _get_NSPositiveCurrencyFormatString(void);

// getter for constant 'NSPriorDayDesignations'
NSString* _get_NSPriorDayDesignations(void);

// getter for constant 'NSRangeException'
NSString* _get_NSRangeException(void);

// getter for constant 'NSRecoveryAttempterErrorKey'
NSString* _get_NSRecoveryAttempterErrorKey(void);

// getter for constant 'NSRegistrationDomain'
NSString* _get_NSRegistrationDomain(void);

// getter for constant 'NSShortDateFormatString'
NSString* _get_NSShortDateFormatString(void);

// getter for constant 'NSShortMonthNameArray'
NSString* _get_NSShortMonthNameArray(void);

// getter for constant 'NSShortTimeDateFormatString'
NSString* _get_NSShortTimeDateFormatString(void);

// getter for constant 'NSShortWeekDayNameArray'
NSString* _get_NSShortWeekDayNameArray(void);

// getter for constant 'NSStreamDataWrittenToMemoryStreamKey'
NSString* _get_NSStreamDataWrittenToMemoryStreamKey(void);

// getter for constant 'NSStreamFileCurrentOffsetKey'
NSString* _get_NSStreamFileCurrentOffsetKey(void);

// getter for constant 'NSStreamSOCKSErrorDomain'
NSString* _get_NSStreamSOCKSErrorDomain(void);

// getter for constant 'NSStreamSOCKSProxyConfigurationKey'
NSString* _get_NSStreamSOCKSProxyConfigurationKey(void);

// getter for constant 'NSStreamSOCKSProxyHostKey'
NSString* _get_NSStreamSOCKSProxyHostKey(void);

// getter for constant 'NSStreamSOCKSProxyPasswordKey'
NSString* _get_NSStreamSOCKSProxyPasswordKey(void);

// getter for constant 'NSStreamSOCKSProxyPortKey'
NSString* _get_NSStreamSOCKSProxyPortKey(void);

// getter for constant 'NSStreamSOCKSProxyUserKey'
NSString* _get_NSStreamSOCKSProxyUserKey(void);

// getter for constant 'NSStreamSOCKSProxyVersion4'
NSString* _get_NSStreamSOCKSProxyVersion4(void);

// getter for constant 'NSStreamSOCKSProxyVersion5'
NSString* _get_NSStreamSOCKSProxyVersion5(void);

// getter for constant 'NSStreamSOCKSProxyVersionKey'
NSString* _get_NSStreamSOCKSProxyVersionKey(void);

// getter for constant 'NSStreamSocketSSLErrorDomain'
NSString* _get_NSStreamSocketSSLErrorDomain(void);

// getter for constant 'NSStreamSocketSecurityLevelKey'
NSString* _get_NSStreamSocketSecurityLevelKey(void);

// getter for constant 'NSStreamSocketSecurityLevelNegotiatedSSL'
NSString* _get_NSStreamSocketSecurityLevelNegotiatedSSL(void);

// getter for constant 'NSStreamSocketSecurityLevelNone'
NSString* _get_NSStreamSocketSecurityLevelNone(void);

// getter for constant 'NSStreamSocketSecurityLevelSSLv2'
NSString* _get_NSStreamSocketSecurityLevelSSLv2(void);

// getter for constant 'NSStreamSocketSecurityLevelSSLv3'
NSString* _get_NSStreamSocketSecurityLevelSSLv3(void);

// getter for constant 'NSStreamSocketSecurityLevelTLSv1'
NSString* _get_NSStreamSocketSecurityLevelTLSv1(void);

// getter for constant 'NSStringEncodingErrorKey'
NSString* _get_NSStringEncodingErrorKey(void);

// getter for constant 'NSSumKeyValueOperator'
NSString* _get_NSSumKeyValueOperator(void);

// getter for constant 'NSTaskDidTerminateNotification'
NSString* _get_NSTaskDidTerminateNotification(void);

// getter for constant 'NSThisDayDesignations'
NSString* _get_NSThisDayDesignations(void);

// getter for constant 'NSThousandsSeparator'
NSString* _get_NSThousandsSeparator(void);

// getter for constant 'NSThreadWillExitNotification'
NSString* _get_NSThreadWillExitNotification(void);

// getter for constant 'NSTimeDateFormatString'
NSString* _get_NSTimeDateFormatString(void);

// getter for constant 'NSTimeFormatString'
NSString* _get_NSTimeFormatString(void);

// getter for constant 'NSURLAuthenticationMethodDefault'
NSString* _get_NSURLAuthenticationMethodDefault(void);

// getter for constant 'NSURLAuthenticationMethodHTMLForm'
NSString* _get_NSURLAuthenticationMethodHTMLForm(void);

// getter for constant 'NSURLAuthenticationMethodHTTPBasic'
NSString* _get_NSURLAuthenticationMethodHTTPBasic(void);

// getter for constant 'NSURLAuthenticationMethodHTTPDigest'
NSString* _get_NSURLAuthenticationMethodHTTPDigest(void);

// getter for constant 'NSURLCredentialStorageChangedNotification'
NSString* _get_NSURLCredentialStorageChangedNotification(void);

// getter for constant 'NSURLErrorDomain'
NSString* _get_NSURLErrorDomain(void);

// getter for constant 'NSURLErrorKey'
NSString* _get_NSURLErrorKey(void);

// getter for constant 'NSURLFileScheme'
NSString* _get_NSURLFileScheme(void);

// setter for constant 'NSURLFileScheme'
void _set_NSURLFileScheme(NSString* value);

// getter for constant 'NSURLProtectionSpaceFTPProxy'
NSString* _get_NSURLProtectionSpaceFTPProxy(void);

// getter for constant 'NSURLProtectionSpaceHTTPProxy'
NSString* _get_NSURLProtectionSpaceHTTPProxy(void);

// getter for constant 'NSURLProtectionSpaceHTTPSProxy'
NSString* _get_NSURLProtectionSpaceHTTPSProxy(void);

// getter for constant 'NSURLProtectionSpaceSOCKSProxy'
NSString* _get_NSURLProtectionSpaceSOCKSProxy(void);

// getter for constant 'NSUnarchiveFromDataTransformerName'
NSString* _get_NSUnarchiveFromDataTransformerName(void);

// getter for constant 'NSUndefinedKeyException'
NSString* _get_NSUndefinedKeyException(void);

// getter for constant 'NSUnderlyingErrorKey'
NSString* _get_NSUnderlyingErrorKey(void);

// getter for constant 'NSUndoManagerCheckpointNotification'
NSString* _get_NSUndoManagerCheckpointNotification(void);

// getter for constant 'NSUndoManagerDidOpenUndoGroupNotification'
NSString* _get_NSUndoManagerDidOpenUndoGroupNotification(void);

// getter for constant 'NSUndoManagerDidRedoChangeNotification'
NSString* _get_NSUndoManagerDidRedoChangeNotification(void);

// getter for constant 'NSUndoManagerDidUndoChangeNotification'
NSString* _get_NSUndoManagerDidUndoChangeNotification(void);

// getter for constant 'NSUndoManagerWillCloseUndoGroupNotification'
NSString* _get_NSUndoManagerWillCloseUndoGroupNotification(void);

// getter for constant 'NSUndoManagerWillRedoChangeNotification'
NSString* _get_NSUndoManagerWillRedoChangeNotification(void);

// getter for constant 'NSUndoManagerWillUndoChangeNotification'
NSString* _get_NSUndoManagerWillUndoChangeNotification(void);

// getter for constant 'NSUnionOfArraysKeyValueOperator'
NSString* _get_NSUnionOfArraysKeyValueOperator(void);

// getter for constant 'NSUnionOfObjectsKeyValueOperator'
NSString* _get_NSUnionOfObjectsKeyValueOperator(void);

// getter for constant 'NSUnionOfSetsKeyValueOperator'
NSString* _get_NSUnionOfSetsKeyValueOperator(void);

// getter for constant 'NSUserDefaultsDidChangeNotification'
NSString* _get_NSUserDefaultsDidChangeNotification(void);

// getter for constant 'NSWeekDayNameArray'
NSString* _get_NSWeekDayNameArray(void);

// getter for constant 'NSWillBecomeMultiThreadedNotification'
NSString* _get_NSWillBecomeMultiThreadedNotification(void);

// getter for constant 'NSXMLParserErrorDomain'
NSString* _get_NSXMLParserErrorDomain(void);

// getter for constant 'NSYearMonthWeekDesignations'
NSString* _get_NSYearMonthWeekDesignations(void);

// getter for constant 'NSZeroPoint'
struct _NSPoint _get_NSZeroPoint(void);

// getter for constant 'NSZeroRect'
struct _NSRect _get_NSZeroRect(void);

// getter for constant 'NSZeroSize'
struct _NSSize _get_NSZeroSize(void);

// getter for constant 'NSZombieEnabled'
BOOL _get_NSZombieEnabled(void);

// setter for constant 'NSZombieEnabled'
void _set_NSZombieEnabled(BOOL value);

enum { NSASCIIStringEncoding = 1 };

enum { NSAdminApplicationDirectory = 4 };

enum { NSAllApplicationsDirectory = 100 };

enum { NSAllDomainsMask = 65535 };

enum { NSAllLibrariesDirectory = 101 };

enum { NSAllPredicateModifier = 1 };

enum { NSAnchoredSearch = 8 };

enum { NSAndPredicateType = 1 };

enum { NSAnyPredicateModifier = 2 };

enum { NSApplicationDirectory = 1 };

enum { NSApplicationSupportDirectory = 14 };

enum { NSArgumentEvaluationScriptError = 3 };

enum { NSArgumentsWrongScriptError = 6 };

enum { NSAtomicWrite = 1 };

enum { NSBackwardsSearch = 4 };

enum { NSBeginsWithComparison = 5 };

enum { NSBeginsWithPredicateOperatorType = 8 };

enum { NSCachesDirectory = 13 };

enum { NSCalculationDivideByZero = 4 };

enum { NSCalculationLossOfPrecision = 1 };

enum { NSCalculationNoError = 0 };

enum { NSCalculationOverflow = 3 };

enum { NSCalculationUnderflow = 2 };

enum { NSCannotCreateScriptCommandError = 10 };

enum { NSCaseInsensitivePredicateOption = 1 };

enum { NSCaseInsensitiveSearch = 1 };

enum { NSConstantValueExpressionType = 0 };

enum { NSContainerSpecifierError = 2 };

enum { NSContainsComparison = 7 };

enum { NSCoreServiceDirectory = 10 };

enum { NSCustomSelectorPredicateOperatorType = 11 };

enum { NSDateFormatterBehavior10_0 = 1000 };

enum { NSDateFormatterBehavior10_4 = 1040 };

enum { NSDateFormatterBehaviorDefault = 0 };

enum { NSDateFormatterFullStyle = 4 };

enum { NSDateFormatterLongStyle = 3 };

enum { NSDateFormatterMediumStyle = 2 };

enum { NSDateFormatterNoStyle = 0 };

enum { NSDateFormatterShortStyle = 1 };

enum { NSDayCalendarUnit = 16 };

enum { NSDecimalMaxSize = 8 };

enum { NSDecimalNoScale = 32767 };

enum { NSDemoApplicationDirectory = 2 };

enum { NSDesktopDirectory = 12 };

enum { NSDeveloperApplicationDirectory = 3 };

enum { NSDeveloperDirectory = 6 };

enum { NSDiacriticInsensitivePredicateOption = 2 };

enum { NSDirectPredicateModifier = 0 };

enum { NSDocumentDirectory = 9 };

enum { NSDocumentationDirectory = 8 };

enum { NSEndsWithComparison = 6 };

enum { NSEndsWithPredicateOperatorType = 9 };

enum { NSEqualToComparison = 0 };

enum { NSEqualToPredicateOperatorType = 4 };

enum { NSEraCalendarUnit = 2 };

enum { NSEvaluatedObjectExpressionType = 1 };

enum { NSEverySubelement = 1 };

enum { NSFileErrorMaximum = 1023 };

enum { NSFileErrorMinimum = 0 };

enum { NSFileLockingError = 255 };

enum { NSFileNoSuchFileError = 4 };

enum { NSFileReadCorruptFileError = 259 };

enum { NSFileReadInapplicableStringEncodingError = 261 };

enum { NSFileReadInvalidFileNameError = 258 };

enum { NSFileReadNoPermissionError = 257 };

enum { NSFileReadNoSuchFileError = 260 };

enum { NSFileReadUnknownError = 256 };

enum { NSFileReadUnsupportedSchemeError = 262 };

enum { NSFileWriteInapplicableStringEncodingError = 517 };

enum { NSFileWriteInvalidFileNameError = 514 };

enum { NSFileWriteNoPermissionError = 513 };

enum { NSFileWriteOutOfSpaceError = 640 };

enum { NSFileWriteUnknownError = 512 };

enum { NSFileWriteUnsupportedSchemeError = 518 };

enum { NSFormattingError = 2048 };

enum { NSFormattingErrorMaximum = 2559 };

enum { NSFormattingErrorMinimum = 2048 };

#define NSFoundationVersionNumber10_0 397.4

#define NSFoundationVersionNumber10_1 425.0

#define NSFoundationVersionNumber10_2 462.0

#define NSFoundationVersionNumber10_3 500.0

#define NSFoundationVersionNumber10_3_2 500.3

#define NSFoundationVersionNumber10_3_3 500.54

#define NSFoundationVersionNumber10_3_4 500.56

enum { NSFoundationVersionWithFileManagerResourceForkSupport = 412 };

enum { NSFunctionExpressionType = 4 };

enum { NSGreaterThanComparison = 4 };

enum { NSGreaterThanOrEqualToComparison = 3 };

enum { NSGreaterThanOrEqualToPredicateOperatorType = 3 };

enum { NSGreaterThanPredicateOperatorType = 2 };

enum { NSHPUXOperatingSystem = 4 };

enum { NSHTTPCookieAcceptPolicyAlways = 0 };

enum { NSHTTPCookieAcceptPolicyNever = 1 };

enum { NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2 };

enum { NSHourCalendarUnit = 32 };

enum { NSISO2022JPStringEncoding = 21 };

enum { NSISOLatin1StringEncoding = 5 };

enum { NSISOLatin2StringEncoding = 9 };

enum { NSInPredicateOperatorType = 10 };

enum { NSIndexSubelement = 0 };

enum { NSInternalScriptError = 8 };

enum { NSInternalSpecifierError = 5 };

enum { NSInvalidIndexSpecifierError = 4 };

enum { NSJapaneseEUCStringEncoding = 3 };

enum { NSKeyPathExpressionType = 3 };

enum { NSKeySpecifierEvaluationScriptError = 2 };

enum { NSKeyValueChangeInsertion = 2 };

enum { NSKeyValueChangeRemoval = 3 };

enum { NSKeyValueChangeReplacement = 4 };

enum { NSKeyValueChangeSetting = 1 };

enum { NSKeyValueIntersectSetMutation = 3 };

enum { NSKeyValueMinusSetMutation = 2 };

enum { NSKeyValueObservingOptionNew = 1 };

enum { NSKeyValueObservingOptionOld = 2 };

enum { NSKeyValueSetSetMutation = 4 };

enum { NSKeyValueUnionSetMutation = 1 };

enum { NSKeyValueValidationError = 1024 };

enum { NSLessThanComparison = 2 };

enum { NSLessThanOrEqualToComparison = 1 };

enum { NSLessThanOrEqualToPredicateOperatorType = 1 };

enum { NSLessThanPredicateOperatorType = 0 };

enum { NSLibraryDirectory = 5 };

enum { NSLikePredicateOperatorType = 7 };

enum { NSLiteralSearch = 2 };

enum { NSLocalDomainMask = 2 };

enum { NSMACHOperatingSystem = 5 };

enum { NSMacOSRomanStringEncoding = 30 };

enum { NSMappedRead = 1 };

enum { NSMatchesPredicateOperatorType = 6 };

enum { NSMaxXEdge = 2 };

enum { NSMaxYEdge = 3 };

enum { NSMaximumStringLength = 2147483646 };

enum { NSMiddleSubelement = 2 };

enum { NSMinXEdge = 0 };

enum { NSMinYEdge = 1 };

enum { NSMinuteCalendarUnit = 64 };

enum { NSMonthCalendarUnit = 8 };

enum { NSNEXTSTEPStringEncoding = 2 };

enum { NSNetServicesActivityInProgress = -72003 };

enum { NSNetServicesBadArgumentError = -72004 };

enum { NSNetServicesCancelledError = -72005 };

enum { NSNetServicesCollisionError = -72001 };

enum { NSNetServicesInvalidError = -72006 };

enum { NSNetServicesNotFoundError = -72002 };

enum { NSNetServicesTimeoutError = -72007 };

enum { NSNetServicesUnknownError = -72000 };

enum { NSNetworkDomainMask = 4 };

enum { NSNoScriptError = 0 };

enum { NSNoSpecifierError = 0 };

enum { NSNoSubelement = 4 };

enum { NSNoTopLevelContainersSpecifierError = 1 };

enum { NSNonLossyASCIIStringEncoding = 7 };

enum { NSNotEqualToPredicateOperatorType = 5 };

enum { NSNotFound = 2147483647 };

enum { NSNotPredicateType = 0 };

enum { NSNotificationCoalescingOnName = 1 };

enum { NSNotificationCoalescingOnSender = 2 };

enum { NSNotificationDeliverImmediately = 1 };

enum { NSNotificationNoCoalescing = 0 };

enum { NSNotificationPostToAllSessions = 2 };

enum { NSNotificationSuspensionBehaviorCoalesce = 2 };

enum { NSNotificationSuspensionBehaviorDeliverImmediately = 4 };

enum { NSNotificationSuspensionBehaviorDrop = 1 };

enum { NSNotificationSuspensionBehaviorHold = 3 };

enum { NSNumberFormatterBehavior10_0 = 1000 };

enum { NSNumberFormatterBehavior10_4 = 1040 };

enum { NSNumberFormatterBehaviorDefault = 0 };

enum { NSNumberFormatterCurrencyStyle = 2 };

enum { NSNumberFormatterDecimalStyle = 1 };

enum { NSNumberFormatterNoStyle = 0 };

enum { NSNumberFormatterPadAfterPrefix = 1 };

enum { NSNumberFormatterPadAfterSuffix = 3 };

enum { NSNumberFormatterPadBeforePrefix = 0 };

enum { NSNumberFormatterPadBeforeSuffix = 2 };

enum { NSNumberFormatterPercentStyle = 3 };

enum { NSNumberFormatterRoundCeiling = 0 };

enum { NSNumberFormatterRoundDown = 2 };

enum { NSNumberFormatterRoundFloor = 1 };

enum { NSNumberFormatterRoundHalfDown = 5 };

enum { NSNumberFormatterRoundHalfEven = 4 };

enum { NSNumberFormatterRoundHalfUp = 6 };

enum { NSNumberFormatterRoundUp = 3 };

enum { NSNumberFormatterScientificStyle = 4 };

enum { NSNumberFormatterSpellOutStyle = 5 };

enum { NSNumericSearch = 64 };

enum { NSOSF1OperatingSystem = 7 };

enum { NSObjCArrayType = 91 };

enum { NSObjCBitfield = 98 };

enum { NSObjCBoolType = 66 };

enum { NSObjCCharType = 99 };

enum { NSObjCDoubleType = 100 };

enum { NSObjCFloatType = 102 };

enum { NSObjCLongType = 108 };

enum { NSObjCLonglongType = 113 };

enum { NSObjCNoType = 0 };

enum { NSObjCObjectType = 64 };

enum { NSObjCPointerType = 94 };

enum { NSObjCSelectorType = 58 };

enum { NSObjCShortType = 115 };

enum { NSObjCStringType = 42 };

enum { NSObjCStructType = 123 };

enum { NSObjCUnionType = 40 };

enum { NSObjCVoidType = 118 };

enum { NSObjectAutoreleasedEvent = 3 };

enum { NSObjectExtraRefDecrementedEvent = 5 };

enum { NSObjectExtraRefIncrementedEvent = 4 };

enum { NSObjectInternalRefDecrementedEvent = 7 };

enum { NSObjectInternalRefIncrementedEvent = 6 };

enum { NSOpenStepUnicodeReservedBase = 62464 };

enum { NSOperationNotSupportedForKeyScriptError = 9 };

enum { NSOperationNotSupportedForKeySpecifierError = 6 };

enum { NSOrPredicateType = 2 };

enum { NSOrderedAscending = -1 };

enum { NSOrderedDescending = 1 };

enum { NSOrderedSame = 0 };

enum { NSPositionAfter = 0 };

enum { NSPositionBefore = 1 };

enum { NSPositionBeginning = 2 };

enum { NSPositionEnd = 3 };

enum { NSPositionReplace = 4 };

enum { NSPostASAP = 2 };

enum { NSPostNow = 3 };

enum { NSPostWhenIdle = 1 };

enum { NSPropertyListBinaryFormat_v1_0 = 200 };

enum { NSPropertyListImmutable = 0 };

enum { NSPropertyListMutableContainers = 1 };

enum { NSPropertyListMutableContainersAndLeaves = 2 };

enum { NSPropertyListOpenStepFormat = 1 };

enum { NSPropertyListXMLFormat_v1_0 = 100 };

enum { NSProprietaryStringEncoding = 65536 };

enum { NSRandomSubelement = 3 };

enum { NSReceiverEvaluationScriptError = 1 };

enum { NSReceiversCantHandleCommandScriptError = 4 };

enum { NSRelativeAfter = 0 };

enum { NSRelativeBefore = 1 };

enum { NSRequiredArgumentsMissingScriptError = 5 };

enum { NSRoundBankers = 3 };

enum { NSRoundDown = 1 };

enum { NSRoundPlain = 0 };

enum { NSRoundUp = 2 };

enum { NSSaveOptionsAsk = 2 };

enum { NSSaveOptionsNo = 1 };

enum { NSSaveOptionsYes = 0 };

enum { NSScannedOption = 1 };

enum { NSSecondCalendarUnit = 128 };

enum { NSShiftJISStringEncoding = 8 };

enum { NSSolarisOperatingSystem = 3 };

enum { NSStreamEventEndEncountered = 16 };

enum { NSStreamEventErrorOccurred = 8 };

enum { NSStreamEventHasBytesAvailable = 2 };

enum { NSStreamEventHasSpaceAvailable = 4 };

enum { NSStreamEventNone = 0 };

enum { NSStreamEventOpenCompleted = 1 };

enum { NSStreamStatusAtEnd = 5 };

enum { NSStreamStatusClosed = 6 };

enum { NSStreamStatusError = 7 };

enum { NSStreamStatusNotOpen = 0 };

enum { NSStreamStatusOpen = 2 };

enum { NSStreamStatusOpening = 1 };

enum { NSStreamStatusReading = 3 };

enum { NSStreamStatusWriting = 4 };

enum { NSSunOSOperatingSystem = 6 };

enum { NSSymbolStringEncoding = 6 };

enum { NSSystemDomainMask = 8 };

#define NSTimeIntervalSince1970 978307200.0

enum { NSURLCacheStorageAllowed = 0 };

enum { NSURLCacheStorageAllowedInMemoryOnly = 1 };

enum { NSURLCacheStorageNotAllowed = 2 };

enum { NSURLCredentialPersistenceForSession = 1 };

enum { NSURLCredentialPersistenceNone = 0 };

enum { NSURLCredentialPersistencePermanent = 2 };

enum { NSURLErrorBadServerResponse = -1011 };

enum { NSURLErrorBadURL = -1000 };

enum { NSURLErrorCancelled = -999 };

enum { NSURLErrorCannotCloseFile = -3002 };

enum { NSURLErrorCannotConnectToHost = -1004 };

enum { NSURLErrorCannotCreateFile = -3000 };

enum { NSURLErrorCannotFindHost = -1003 };

enum { NSURLErrorCannotLoadFromNetwork = -2000 };

enum { NSURLErrorCannotMoveFile = -3005 };

enum { NSURLErrorCannotOpenFile = -3001 };

enum { NSURLErrorCannotRemoveFile = -3004 };

enum { NSURLErrorCannotWriteToFile = -3003 };

enum { NSURLErrorClientCertificateRejected = -1205 };

enum { NSURLErrorDNSLookupFailed = -1006 };

enum { NSURLErrorDownloadDecodingFailedMidStream = -3006 };

enum { NSURLErrorDownloadDecodingFailedToComplete = -3007 };

enum { NSURLErrorFileDoesNotExist = -1100 };

enum { NSURLErrorFileIsDirectory = -1101 };

enum { NSURLErrorHTTPTooManyRedirects = -1007 };

enum { NSURLErrorNetworkConnectionLost = -1005 };

enum { NSURLErrorNoPermissionsToReadFile = -1102 };

enum { NSURLErrorNotConnectedToInternet = -1009 };

enum { NSURLErrorRedirectToNonExistentLocation = -1010 };

enum { NSURLErrorResourceUnavailable = -1008 };

enum { NSURLErrorSecureConnectionFailed = -1200 };

enum { NSURLErrorServerCertificateHasBadDate = -1201 };

enum { NSURLErrorServerCertificateHasUnknownRoot = -1203 };

enum { NSURLErrorServerCertificateNotYetValid = -1204 };

enum { NSURLErrorServerCertificateUntrusted = -1202 };

enum { NSURLErrorTimedOut = -1001 };

enum { NSURLErrorUnknown = -1 };

enum { NSURLErrorUnsupportedURL = -1002 };

enum { NSURLErrorUserAuthenticationRequired = -1013 };

enum { NSURLErrorUserCancelledAuthentication = -1012 };

enum { NSURLErrorZeroByteResource = -1014 };

enum { NSURLHandleLoadFailed = 3 };

enum { NSURLHandleLoadInProgress = 2 };

enum { NSURLHandleLoadSucceeded = 1 };

enum { NSURLHandleNotLoaded = 0 };

enum { NSURLRequestReloadIgnoringCacheData = 1 };

enum { NSURLRequestReturnCacheDataDontLoad = 3 };

enum { NSURLRequestReturnCacheDataElseLoad = 2 };

enum { NSURLRequestUseProtocolCachePolicy = 0 };

enum { NSURLResponseUnknownLength = -1 };

enum { NSUTF8StringEncoding = 4 };

enum { NSUncachedRead = 2 };

enum { NSUndefinedDateComponent = 2147483647 };

enum { NSUndoCloseGroupingRunLoopOrdering = 350000 };

enum { NSUnicodeStringEncoding = 10 };

enum { NSUnknownKeyScriptError = 7 };

enum { NSUnknownKeySpecifierError = 3 };

enum { NSUserCancelledError = 3072 };

enum { NSUserDirectory = 7 };

enum { NSUserDomainMask = 1 };

enum { NSValidationErrorMaximum = 2047 };

enum { NSValidationErrorMinimum = 1024 };

enum { NSVariableExpressionType = 2 };

enum { NSWeekCalendarUnit = 256 };

enum { NSWeekdayCalendarUnit = 512 };

enum { NSWeekdayOrdinalCalendarUnit = 1024 };

enum { NSWindows95OperatingSystem = 2 };

enum { NSWindowsCP1250StringEncoding = 15 };

enum { NSWindowsCP1251StringEncoding = 11 };

enum { NSWindowsCP1252StringEncoding = 12 };

enum { NSWindowsCP1253StringEncoding = 13 };

enum { NSWindowsCP1254StringEncoding = 14 };

enum { NSWindowsNTOperatingSystem = 1 };

enum { NSWrapCalendarComponents = 1 };

enum { NSXMLAttributeCDATAKind = 6 };

enum { NSXMLAttributeDeclarationKind = 10 };

enum { NSXMLAttributeEntitiesKind = 11 };

enum { NSXMLAttributeEntityKind = 10 };

enum { NSXMLAttributeEnumerationKind = 14 };

enum { NSXMLAttributeIDKind = 7 };

enum { NSXMLAttributeIDRefKind = 8 };

enum { NSXMLAttributeIDRefsKind = 9 };

enum { NSXMLAttributeKind = 3 };

enum { NSXMLAttributeNMTokenKind = 12 };

enum { NSXMLAttributeNMTokensKind = 13 };

enum { NSXMLAttributeNotationKind = 15 };

enum { NSXMLCommentKind = 6 };

enum { NSXMLDTDKind = 8 };

enum { NSXMLDocumentHTMLKind = 2 };

enum { NSXMLDocumentIncludeContentTypeDeclaration = 262144 };

enum { NSXMLDocumentKind = 1 };

enum { NSXMLDocumentTextKind = 3 };

enum { NSXMLDocumentTidyHTML = 512 };

enum { NSXMLDocumentTidyXML = 1024 };

enum { NSXMLDocumentValidate = 8192 };

enum { NSXMLDocumentXHTMLKind = 1 };

enum { NSXMLDocumentXInclude = 65536 };

enum { NSXMLDocumentXMLKind = 0 };

enum { NSXMLElementDeclarationAnyKind = 18 };

enum { NSXMLElementDeclarationElementKind = 20 };

enum { NSXMLElementDeclarationEmptyKind = 17 };

enum { NSXMLElementDeclarationKind = 11 };

enum { NSXMLElementDeclarationMixedKind = 19 };

enum { NSXMLElementDeclarationUndefinedKind = 16 };

enum { NSXMLElementKind = 2 };

enum { NSXMLEntityDeclarationKind = 9 };

enum { NSXMLEntityGeneralKind = 1 };

enum { NSXMLEntityParameterKind = 4 };

enum { NSXMLEntityParsedKind = 2 };

enum { NSXMLEntityPredefined = 5 };

enum { NSXMLEntityUnparsedKind = 3 };

enum { NSXMLInvalidKind = 0 };

enum { NSXMLNamespaceKind = 4 };

enum { NSXMLNodeCompactEmptyElement = 4 };

enum { NSXMLNodeExpandEmptyElement = 2 };

enum { NSXMLNodeIsCDATA = 1 };

enum { NSXMLNodeOptionsNone = 0 };

enum { NSXMLNodePreserveAll = 4293918750 };

enum { NSXMLNodePreserveAttributeOrder = 2097152 };

enum { NSXMLNodePreserveCDATA = 16777216 };

enum { NSXMLNodePreserveCharacterReferences = 134217728 };

enum { NSXMLNodePreserveDTD = 67108864 };

enum { NSXMLNodePreserveEmptyElements = 6 };

enum { NSXMLNodePreserveEntities = 4194304 };

enum { NSXMLNodePreserveNamespaceOrder = 1048576 };

enum { NSXMLNodePreservePrefixes = 8388608 };

enum { NSXMLNodePreserveQuotes = 24 };

enum { NSXMLNodePreserveWhitespace = 33554432 };

enum { NSXMLNodePrettyPrint = 131072 };

enum { NSXMLNodeUseDoubleQuotes = 16 };

enum { NSXMLNodeUseSingleQuotes = 8 };

enum { NSXMLNotationDeclarationKind = 12 };

enum { NSXMLParserAttributeHasNoValueError = 41 };

enum { NSXMLParserAttributeListNotFinishedError = 51 };

enum { NSXMLParserAttributeListNotStartedError = 50 };

enum { NSXMLParserAttributeNotFinishedError = 40 };

enum { NSXMLParserAttributeNotStartedError = 39 };

enum { NSXMLParserAttributeRedefinedError = 42 };

enum { NSXMLParserCDATANotFinishedError = 63 };

enum { NSXMLParserCharacterRefAtEOFError = 10 };

enum { NSXMLParserCharacterRefInDTDError = 13 };

enum { NSXMLParserCharacterRefInEpilogError = 12 };

enum { NSXMLParserCharacterRefInPrologError = 11 };

enum { NSXMLParserCommentContainsDoubleHyphenError = 80 };

enum { NSXMLParserCommentNotFinishedError = 45 };

enum { NSXMLParserConditionalSectionNotFinishedError = 59 };

enum { NSXMLParserConditionalSectionNotStartedError = 58 };

enum { NSXMLParserDOCTYPEDeclNotFinishedError = 61 };

enum { NSXMLParserDelegateAbortedParseError = 512 };

enum { NSXMLParserDocumentStartError = 3 };

enum { NSXMLParserElementContentDeclNotFinishedError = 55 };

enum { NSXMLParserElementContentDeclNotStartedError = 54 };

enum { NSXMLParserEmptyDocumentError = 4 };

enum { NSXMLParserEncodingNotSupportedError = 32 };

enum { NSXMLParserEntityBoundaryError = 90 };

enum { NSXMLParserEntityIsExternalError = 29 };

enum { NSXMLParserEntityIsParameterError = 30 };

enum { NSXMLParserEntityNotFinishedError = 37 };

enum { NSXMLParserEntityNotStartedError = 36 };

enum { NSXMLParserEntityRefAtEOFError = 14 };

enum { NSXMLParserEntityRefInDTDError = 17 };

enum { NSXMLParserEntityRefInEpilogError = 16 };

enum { NSXMLParserEntityRefInPrologError = 15 };

enum { NSXMLParserEntityRefLoopError = 89 };

enum { NSXMLParserEntityReferenceMissingSemiError = 23 };

enum { NSXMLParserEntityReferenceWithoutNameError = 22 };

enum { NSXMLParserEntityValueRequiredError = 84 };

enum { NSXMLParserEqualExpectedError = 75 };

enum { NSXMLParserExternalStandaloneEntityError = 82 };

enum { NSXMLParserExternalSubsetNotFinishedError = 60 };

enum { NSXMLParserExtraContentError = 86 };

enum { NSXMLParserGTRequiredError = 73 };

enum { NSXMLParserInternalError = 1 };

enum { NSXMLParserInvalidCharacterError = 9 };

enum { NSXMLParserInvalidCharacterInEntityError = 87 };

enum { NSXMLParserInvalidCharacterRefError = 8 };

enum { NSXMLParserInvalidConditionalSectionError = 83 };

enum { NSXMLParserInvalidDecimalCharacterRefError = 7 };

enum { NSXMLParserInvalidEncodingError = 81 };

enum { NSXMLParserInvalidEncodingNameError = 79 };

enum { NSXMLParserInvalidHexCharacterRefError = 6 };

enum { NSXMLParserInvalidURIError = 91 };

enum { NSXMLParserLTRequiredError = 72 };

enum { NSXMLParserLTSlashRequiredError = 74 };

enum { NSXMLParserLessThanSymbolInAttributeError = 38 };

enum { NSXMLParserLiteralNotFinishedError = 44 };

enum { NSXMLParserLiteralNotStartedError = 43 };

enum { NSXMLParserMisplacedCDATAEndStringError = 62 };

enum { NSXMLParserMisplacedXMLDeclarationError = 64 };

enum { NSXMLParserMixedContentDeclNotFinishedError = 53 };

enum { NSXMLParserMixedContentDeclNotStartedError = 52 };

enum { NSXMLParserNAMERequiredError = 68 };

enum { NSXMLParserNMTOKENRequiredError = 67 };

enum { NSXMLParserNamespaceDeclarationError = 35 };

enum { NSXMLParserNoDTDError = 94 };

enum { NSXMLParserNotWellBalancedError = 85 };

enum { NSXMLParserNotationNotFinishedError = 49 };

enum { NSXMLParserNotationNotStartedError = 48 };

enum { NSXMLParserOutOfMemoryError = 2 };

enum { NSXMLParserPCDATARequiredError = 69 };

enum { NSXMLParserParsedEntityRefAtEOFError = 18 };

enum { NSXMLParserParsedEntityRefInEpilogError = 20 };

enum { NSXMLParserParsedEntityRefInInternalError = 88 };

enum { NSXMLParserParsedEntityRefInInternalSubsetError = 21 };

enum { NSXMLParserParsedEntityRefInPrologError = 19 };

enum { NSXMLParserParsedEntityRefMissingSemiError = 25 };

enum { NSXMLParserParsedEntityRefNoNameError = 24 };

enum { NSXMLParserPrematureDocumentEndError = 5 };

enum { NSXMLParserProcessingInstructionNotFinishedError = 47 };

enum { NSXMLParserProcessingInstructionNotStartedError = 46 };

enum { NSXMLParserPublicIdentifierRequiredError = 71 };

enum { NSXMLParserSeparatorRequiredError = 66 };

enum { NSXMLParserSpaceRequiredError = 65 };

enum { NSXMLParserStandaloneValueError = 78 };

enum { NSXMLParserStringNotClosedError = 34 };

enum { NSXMLParserStringNotStartedError = 33 };

enum { NSXMLParserTagNameMismatchError = 76 };

enum { NSXMLParserURIFragmentError = 92 };

enum { NSXMLParserURIRequiredError = 70 };

enum { NSXMLParserUndeclaredEntityError = 26 };

enum { NSXMLParserUnfinishedTagError = 77 };

enum { NSXMLParserUnknownEncodingError = 31 };

enum { NSXMLParserUnparsedEntityError = 28 };

enum { NSXMLParserXMLDeclNotFinishedError = 57 };

enum { NSXMLParserXMLDeclNotStartedError = 56 };

enum { NSXMLProcessingInstructionKind = 5 };

enum { NSXMLTextKind = 7 };

enum { NSYearCalendarUnit = 4 };

enum { NS_BigEndian = 2 };

enum { NS_LittleEndian = 1 };

enum { NS_UNICHAR_IS_EIGHT_BIT = 0 };

enum { NS_UnknownByteOrder = 0 };

// function 'NSAllHashTableObjects'
NSArray* NSAllHashTableObjects(struct _NSHashTable *table);

// function 'NSAllMapTableKeys'
NSArray* NSAllMapTableKeys(struct _NSMapTable *table);

// function 'NSAllMapTableValues'
NSArray* NSAllMapTableValues(struct _NSMapTable *table);

// function 'NSAllocateCollectable'
void *NSAllocateCollectable(unsigned long size, unsigned long options);

// function 'NSAllocateMemoryPages'
void *NSAllocateMemoryPages(unsigned int bytes);

// function 'NSAllocateObject'
id NSAllocateObject(Class aClass, unsigned int extraBytes, struct _NSZone *zone);

// function 'NSClassFromString'
Class NSClassFromString(NSString* aClassName);

// function 'NSCompareHashTables'
BOOL NSCompareHashTables(struct _NSHashTable *table1, struct _NSHashTable *table2);

// function 'NSCompareMapTables'
BOOL NSCompareMapTables(struct _NSMapTable *table1, struct _NSMapTable *table2);

// function 'NSContainsRect'
BOOL NSContainsRect(struct _NSRect aRect, struct _NSRect bRect);

// function 'NSConvertHostDoubleToSwapped'
struct _NSSwappedDouble NSConvertHostDoubleToSwapped(double x);

// function 'NSConvertHostFloatToSwapped'
struct _NSSwappedFloat NSConvertHostFloatToSwapped(float x);

// function 'NSConvertSwappedDoubleToHost'
double NSConvertSwappedDoubleToHost(struct _NSSwappedDouble x);

// function 'NSConvertSwappedFloatToHost'
float NSConvertSwappedFloatToHost(struct _NSSwappedFloat x);

// function 'NSCopyHashTableWithZone'
struct _NSHashTable *NSCopyHashTableWithZone(struct _NSHashTable *table, struct _NSZone *zone);

// function 'NSCopyMapTableWithZone'
struct _NSMapTable *NSCopyMapTableWithZone(struct _NSMapTable *table, struct _NSZone *zone);

// function 'NSCopyMemoryPages'
void NSCopyMemoryPages(const void* source, void *dest, unsigned int bytes);

// function 'NSCopyObject'
id NSCopyObject(id object, unsigned int extraBytes, struct _NSZone *zone);

// function 'NSCountFrames'
unsigned int NSCountFrames(void);

// function 'NSCountHashTable'
unsigned int NSCountHashTable(struct _NSHashTable *table);

// function 'NSCountMapTable'
unsigned int NSCountMapTable(struct _NSMapTable *table);

// function 'NSCreateZone'
struct _NSZone *NSCreateZone(unsigned int startSize, unsigned int granularity, BOOL canFree);

// function 'NSDeallocateMemoryPages'
void NSDeallocateMemoryPages(void *ptr, unsigned int bytes);

// function 'NSDeallocateObject'
void NSDeallocateObject(id object);

// function 'NSDecrementExtraRefCountWasZero'
BOOL NSDecrementExtraRefCountWasZero(id object);

// function 'NSDefaultMallocZone'
struct _NSZone *NSDefaultMallocZone(void);

// function 'NSDivideRect'
void NSDivideRect(struct _NSRect inRect, struct _NSRect *slice, struct _NSRect *rem, float amount, int edge);

// function 'NSEndHashTableEnumeration'
void NSEndHashTableEnumeration(struct _NSHashEnumerator *enumerator);

// function 'NSEndMapTableEnumeration'
void NSEndMapTableEnumeration(struct _NSMapEnumerator *enumerator);

// function 'NSEnumerateHashTable'
struct _NSHashEnumerator NSEnumerateHashTable(struct _NSHashTable *table);

// function 'NSEnumerateMapTable'
struct _NSMapEnumerator NSEnumerateMapTable(struct _NSMapTable *table);

// function 'NSEqualPoints'
BOOL NSEqualPoints(struct _NSPoint aPoint, struct _NSPoint bPoint);

// function 'NSEqualRanges'
BOOL NSEqualRanges(struct _NSRange range1, struct _NSRange range2);

// function 'NSEqualRects'
BOOL NSEqualRects(struct _NSRect aRect, struct _NSRect bRect);

// function 'NSEqualSizes'
BOOL NSEqualSizes(struct _NSSize aSize, struct _NSSize bSize);

// function 'NSExtraRefCount'
unsigned int NSExtraRefCount(id object);

// function 'NSFileTypeForHFSTypeCode'
NSString* NSFileTypeForHFSTypeCode(unsigned long hfsFileTypeCode);

// function 'NSFrameAddress'
void *NSFrameAddress(unsigned int frame);

// function 'NSFreeHashTable'
void NSFreeHashTable(struct _NSHashTable *table);

// function 'NSFreeMapTable'
void NSFreeMapTable(struct _NSMapTable *table);

// function 'NSFullUserName'
NSString* NSFullUserName(void);

// function 'NSGetSizeAndAlignment'
const char* NSGetSizeAndAlignment(const char* typePtr, unsigned int *sizep, unsigned int *alignp);

// function 'NSHFSTypeCodeFromFileType'
unsigned long NSHFSTypeCodeFromFileType(NSString* fileTypeString);

// function 'NSHFSTypeOfFile'
NSString* NSHFSTypeOfFile(NSString* fullFilePath);

// function 'NSHashGet'
void *NSHashGet(struct _NSHashTable *table, const void* pointer);

// function 'NSHashInsert'
void NSHashInsert(struct _NSHashTable *table, const void* pointer);

// function 'NSHashInsertIfAbsent'
void *NSHashInsertIfAbsent(struct _NSHashTable *table, const void* pointer);

// function 'NSHashInsertKnownAbsent'
void NSHashInsertKnownAbsent(struct _NSHashTable *table, const void* pointer);

// function 'NSHashRemove'
void NSHashRemove(struct _NSHashTable *table, const void* pointer);

// function 'NSHeight'
float NSHeight(struct _NSRect aRect);

// function 'NSHomeDirectory'
NSString* NSHomeDirectory(void);

// function 'NSHomeDirectoryForUser'
NSString* NSHomeDirectoryForUser(NSString* userName);

// function 'NSHostByteOrder'
unsigned int NSHostByteOrder(void);

// function 'NSIncrementExtraRefCount'
void NSIncrementExtraRefCount(id object);

// function 'NSInsetRect'
struct _NSRect NSInsetRect(struct _NSRect aRect, float dX, float dY);

// function 'NSIntegralRect'
struct _NSRect NSIntegralRect(struct _NSRect aRect);

// function 'NSIntersectionRange'
struct _NSRange NSIntersectionRange(struct _NSRange range1, struct _NSRange range2);

// function 'NSIntersectionRect'
struct _NSRect NSIntersectionRect(struct _NSRect aRect, struct _NSRect bRect);

// function 'NSIntersectsRect'
BOOL NSIntersectsRect(struct _NSRect aRect, struct _NSRect bRect);

// function 'NSIsEmptyRect'
BOOL NSIsEmptyRect(struct _NSRect aRect);

// function 'NSIsFreedObject'
BOOL NSIsFreedObject(id anObject);

// function 'NSLocationInRange'
BOOL NSLocationInRange(unsigned int loc, struct _NSRange range);

// function 'NSLogPageSize'
unsigned int NSLogPageSize(void);

// function 'NSMakePoint'
struct _NSPoint NSMakePoint(float x, float y);

// function 'NSMakeRange'
struct _NSRange NSMakeRange(unsigned int loc, unsigned int len);

// function 'NSMakeRect'
struct _NSRect NSMakeRect(float x, float y, float w, float h);

// function 'NSMakeSize'
struct _NSSize NSMakeSize(float w, float h);

// function 'NSMapGet'
void *NSMapGet(struct _NSMapTable *table, const void* key);

// function 'NSMapInsert'
void NSMapInsert(struct _NSMapTable *table, const void* key, const void* value);

// function 'NSMapInsertIfAbsent'
void *NSMapInsertIfAbsent(struct _NSMapTable *table, const void* key, const void* value);

// function 'NSMapInsertKnownAbsent'
void NSMapInsertKnownAbsent(struct _NSMapTable *table, const void* key, const void* value);

// function 'NSMapMember'
BOOL NSMapMember(struct _NSMapTable *table, const void* key, void **originalKey, void **value);

// function 'NSMapRemove'
void NSMapRemove(struct _NSMapTable *table, const void* key);

// function 'NSMaxRange'
unsigned int NSMaxRange(struct _NSRange range);

// function 'NSMaxX'
float NSMaxX(struct _NSRect aRect);

// function 'NSMaxY'
float NSMaxY(struct _NSRect aRect);

// function 'NSMidX'
float NSMidX(struct _NSRect aRect);

// function 'NSMidY'
float NSMidY(struct _NSRect aRect);

// function 'NSMinX'
float NSMinX(struct _NSRect aRect);

// function 'NSMinY'
float NSMinY(struct _NSRect aRect);

// function 'NSMouseInRect'
BOOL NSMouseInRect(struct _NSPoint aPoint, struct _NSRect aRect, BOOL flipped);

// function 'NSNextHashEnumeratorItem'
void *NSNextHashEnumeratorItem(struct _NSHashEnumerator *enumerator);

// function 'NSNextMapEnumeratorPair'
BOOL NSNextMapEnumeratorPair(struct _NSMapEnumerator *enumerator, void **key, void **value);

// function 'NSOffsetRect'
struct _NSRect NSOffsetRect(struct _NSRect aRect, float dX, float dY);

// function 'NSOpenStepRootDirectory'
NSString* NSOpenStepRootDirectory(void);

// function 'NSPageSize'
unsigned int NSPageSize(void);

// function 'NSPointFromString'
struct _NSPoint NSPointFromString(NSString* aString);

// function 'NSPointInRect'
BOOL NSPointInRect(struct _NSPoint aPoint, struct _NSRect aRect);

// function 'NSRangeFromString'
struct _NSRange NSRangeFromString(NSString* aString);

// function 'NSRealMemoryAvailable'
unsigned int NSRealMemoryAvailable(void);

// function 'NSReallocateCollectable'
void *NSReallocateCollectable(void *ptr, unsigned long size, unsigned long options);

// function 'NSRectFromString'
struct _NSRect NSRectFromString(NSString* aString);

// function 'NSRecycleZone'
void NSRecycleZone(struct _NSZone *zone);

// function 'NSResetHashTable'
void NSResetHashTable(struct _NSHashTable *table);

// function 'NSResetMapTable'
void NSResetMapTable(struct _NSMapTable *table);

// function 'NSReturnAddress'
void *NSReturnAddress(unsigned int frame);

// function 'NSRoundDownToMultipleOfPageSize'
unsigned int NSRoundDownToMultipleOfPageSize(unsigned int bytes);

// function 'NSRoundUpToMultipleOfPageSize'
unsigned int NSRoundUpToMultipleOfPageSize(unsigned int bytes);

// function 'NSSearchPathForDirectoriesInDomains'
NSArray* NSSearchPathForDirectoriesInDomains(int directory, int domainMask, BOOL expandTilde);

// function 'NSSelectorFromString'
SEL NSSelectorFromString(NSString* aSelectorName);

// function 'NSSetZoneName'
void NSSetZoneName(struct _NSZone *zone, NSString* name);

// function 'NSShouldRetainWithZone'
BOOL NSShouldRetainWithZone(id anObject, struct _NSZone *requestedZone);

// function 'NSSizeFromString'
struct _NSSize NSSizeFromString(NSString* aString);

// function 'NSStringFromClass'
NSString* NSStringFromClass(Class aClass);

// function 'NSStringFromHashTable'
NSString* NSStringFromHashTable(struct _NSHashTable *table);

// function 'NSStringFromMapTable'
NSString* NSStringFromMapTable(struct _NSMapTable *table);

// function 'NSStringFromPoint'
NSString* NSStringFromPoint(struct _NSPoint aPoint);

// function 'NSStringFromRange'
NSString* NSStringFromRange(struct _NSRange range);

// function 'NSStringFromRect'
NSString* NSStringFromRect(struct _NSRect aRect);

// function 'NSStringFromSelector'
NSString* NSStringFromSelector(SEL aSelector);

// function 'NSStringFromSize'
NSString* NSStringFromSize(struct _NSSize aSize);

// function 'NSSwapBigDoubleToHost'
double NSSwapBigDoubleToHost(struct _NSSwappedDouble x);

// function 'NSSwapBigFloatToHost'
float NSSwapBigFloatToHost(struct _NSSwappedFloat x);

// function 'NSSwapBigIntToHost'
unsigned int NSSwapBigIntToHost(unsigned int x);

// function 'NSSwapBigLongLongToHost'
unsigned long long NSSwapBigLongLongToHost(unsigned long long x);

// function 'NSSwapBigLongToHost'
unsigned long NSSwapBigLongToHost(unsigned long x);

// function 'NSSwapBigShortToHost'
unsigned short NSSwapBigShortToHost(unsigned short x);

// function 'NSSwapDouble'
struct _NSSwappedDouble NSSwapDouble(struct _NSSwappedDouble x);

// function 'NSSwapFloat'
struct _NSSwappedFloat NSSwapFloat(struct _NSSwappedFloat x);

// function 'NSSwapHostDoubleToBig'
struct _NSSwappedDouble NSSwapHostDoubleToBig(double x);

// function 'NSSwapHostDoubleToLittle'
struct _NSSwappedDouble NSSwapHostDoubleToLittle(double x);

// function 'NSSwapHostFloatToBig'
struct _NSSwappedFloat NSSwapHostFloatToBig(float x);

// function 'NSSwapHostFloatToLittle'
struct _NSSwappedFloat NSSwapHostFloatToLittle(float x);

// function 'NSSwapHostIntToBig'
unsigned int NSSwapHostIntToBig(unsigned int x);

// function 'NSSwapHostIntToLittle'
unsigned int NSSwapHostIntToLittle(unsigned int x);

// function 'NSSwapHostLongLongToBig'
unsigned long long NSSwapHostLongLongToBig(unsigned long long x);

// function 'NSSwapHostLongLongToLittle'
unsigned long long NSSwapHostLongLongToLittle(unsigned long long x);

// function 'NSSwapHostLongToBig'
unsigned long NSSwapHostLongToBig(unsigned long x);

// function 'NSSwapHostLongToLittle'
unsigned long NSSwapHostLongToLittle(unsigned long x);

// function 'NSSwapHostShortToBig'
unsigned short NSSwapHostShortToBig(unsigned short x);

// function 'NSSwapHostShortToLittle'
unsigned short NSSwapHostShortToLittle(unsigned short x);

// function 'NSSwapInt'
unsigned int NSSwapInt(unsigned int inv);

// function 'NSSwapLittleDoubleToHost'
double NSSwapLittleDoubleToHost(struct _NSSwappedDouble x);

// function 'NSSwapLittleFloatToHost'
float NSSwapLittleFloatToHost(struct _NSSwappedFloat x);

// function 'NSSwapLittleIntToHost'
unsigned int NSSwapLittleIntToHost(unsigned int x);

// function 'NSSwapLittleLongLongToHost'
unsigned long long NSSwapLittleLongLongToHost(unsigned long long x);

// function 'NSSwapLittleLongToHost'
unsigned long NSSwapLittleLongToHost(unsigned long x);

// function 'NSSwapLittleShortToHost'
unsigned short NSSwapLittleShortToHost(unsigned short x);

// function 'NSSwapLong'
unsigned long NSSwapLong(unsigned long inv);

// function 'NSSwapLongLong'
unsigned long long NSSwapLongLong(unsigned long long inv);

// function 'NSSwapShort'
unsigned short NSSwapShort(unsigned short inv);

// function 'NSTemporaryDirectory'
NSString* NSTemporaryDirectory(void);

// function 'NSUnionRange'
struct _NSRange NSUnionRange(struct _NSRange range1, struct _NSRange range2);

// function 'NSUnionRect'
struct _NSRect NSUnionRect(struct _NSRect aRect, struct _NSRect bRect);

// function 'NSUserName'
NSString* NSUserName(void);

// function 'NSWidth'
float NSWidth(struct _NSRect aRect);

// function 'NSZoneCalloc'
void *NSZoneCalloc(struct _NSZone *zone, unsigned int numElems, unsigned int byteSize);

// function 'NSZoneFree'
void NSZoneFree(struct _NSZone *zone, void *ptr);

// function 'NSZoneFromPointer'
struct _NSZone *NSZoneFromPointer(void *ptr);

// function 'NSZoneMalloc'
void *NSZoneMalloc(struct _NSZone *zone, unsigned int size);

// function 'NSZoneName'
NSString* NSZoneName(struct _NSZone *zone);

// function 'NSZoneRealloc'
void *NSZoneRealloc(struct _NSZone *zone, void *ptr, unsigned int size);

// function 'NXReadNSObjectFromCoder'
NSObject* NXReadNSObjectFromCoder(NSCoder* decoder);

// method '-[NSAffineTransform appendTransform:]'
void _IM_NSAffineTransform_appendTransform_C(NSAffineTransform *_self, NSAffineTransform* transform);

// method '-[NSAffineTransform initWithTransform:]'
NSAffineTransform *_IM_NSAffineTransform_initWithTransform_C(NSAffineTransform *_self, NSAffineTransform* transform);

// method '-[NSAffineTransform invert]'
void _IM_NSAffineTransform_invert(NSAffineTransform *_self);

// method '-[NSAffineTransform prependTransform:]'
void _IM_NSAffineTransform_prependTransform_C(NSAffineTransform *_self, NSAffineTransform* transform);

// method '-[NSAffineTransform rotateByDegrees:]'
void _IM_NSAffineTransform_rotateByDegrees_C(NSAffineTransform *_self, float angle);

// method '-[NSAffineTransform rotateByRadians:]'
void _IM_NSAffineTransform_rotateByRadians_C(NSAffineTransform *_self, float angle);

// method '-[NSAffineTransform scaleBy:]'
void _IM_NSAffineTransform_scaleBy_C(NSAffineTransform *_self, float scale);

// method '-[NSAffineTransform scaleXBy:yBy:]'
void _IM_NSAffineTransform_scaleXBy_CyBy_C(NSAffineTransform *_self, float scaleX, float scaleY);

// method '-[NSAffineTransform setTransformStruct:]'
void _IM_NSAffineTransform_setTransformStruct_C(NSAffineTransform *_self, struct _NSAffineTransformStruct transformStruct);

// method '+[NSAffineTransform transform]'
NSAffineTransform* _CM_NSAffineTransform_transform(Class _class);

// method '-[NSAffineTransform transformPoint:]'
struct _NSPoint _IM_NSAffineTransform_transformPoint_C(NSAffineTransform *_self, struct _NSPoint aPoint);

// method '-[NSAffineTransform transformSize:]'
struct _NSSize _IM_NSAffineTransform_transformSize_C(NSAffineTransform *_self, struct _NSSize aSize);

// method '-[NSAffineTransform transformStruct]'
struct _NSAffineTransformStruct _IM_NSAffineTransform_transformStruct(NSAffineTransform *_self);

// method '-[NSAffineTransform translateXBy:yBy:]'
void _IM_NSAffineTransform_translateXBy_CyBy_C(NSAffineTransform *_self, float deltaX, float deltaY);

// method '-[NSAppleEventDescriptor aeDesc]'
const struct AEDesc* _IM_NSAppleEventDescriptor_aeDesc(NSAppleEventDescriptor *_self);

// method '+[NSAppleEventDescriptor appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_appleEventWithEventClass_CeventID_CtargetDescriptor_CreturnID_CtransactionID_C(Class _class, unsigned long eventClass, unsigned long eventID, NSAppleEventDescriptor* targetDescriptor, short returnID, long transactionID);

// method '-[NSAppleEventDescriptor attributeDescriptorForKeyword:]'
NSAppleEventDescriptor* _IM_NSAppleEventDescriptor_attributeDescriptorForKeyword_C(NSAppleEventDescriptor *_self, unsigned long keyword);

// method '-[NSAppleEventDescriptor booleanValue]'
Boolean _IM_NSAppleEventDescriptor_booleanValue(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor coerceToDescriptorType:]'
NSAppleEventDescriptor* _IM_NSAppleEventDescriptor_coerceToDescriptorType_C(NSAppleEventDescriptor *_self, unsigned long descriptorType);

// method '-[NSAppleEventDescriptor data]'
NSData* _IM_NSAppleEventDescriptor_data(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor descriptorAtIndex:]'
NSAppleEventDescriptor* _IM_NSAppleEventDescriptor_descriptorAtIndex_C(NSAppleEventDescriptor *_self, long index);

// method '-[NSAppleEventDescriptor descriptorForKeyword:]'
NSAppleEventDescriptor* _IM_NSAppleEventDescriptor_descriptorForKeyword_C(NSAppleEventDescriptor *_self, unsigned long keyword);

// method '-[NSAppleEventDescriptor descriptorType]'
unsigned long _IM_NSAppleEventDescriptor_descriptorType(NSAppleEventDescriptor *_self);

// method '+[NSAppleEventDescriptor descriptorWithBoolean:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithBoolean_C(Class _class, Boolean boolean);

// method '+[NSAppleEventDescriptor descriptorWithDescriptorType:bytes:length:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithDescriptorType_Cbytes_Clength_C(Class _class, unsigned long descriptorType, const void* bytes, unsigned int byteCount);

// method '+[NSAppleEventDescriptor descriptorWithDescriptorType:data:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithDescriptorType_Cdata_C(Class _class, unsigned long descriptorType, NSData* data);

// method '+[NSAppleEventDescriptor descriptorWithEnumCode:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithEnumCode_C(Class _class, unsigned long enumerator);

// method '+[NSAppleEventDescriptor descriptorWithInt32:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithInt32_C(Class _class, long signedInt);

// method '+[NSAppleEventDescriptor descriptorWithString:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithString_C(Class _class, NSString* string);

// method '+[NSAppleEventDescriptor descriptorWithTypeCode:]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_descriptorWithTypeCode_C(Class _class, unsigned long typeCode);

// method '-[NSAppleEventDescriptor enumCodeValue]'
unsigned long _IM_NSAppleEventDescriptor_enumCodeValue(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor eventClass]'
unsigned long _IM_NSAppleEventDescriptor_eventClass(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor eventID]'
unsigned long _IM_NSAppleEventDescriptor_eventID(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor initListDescriptor]'
NSAppleEventDescriptor *_IM_NSAppleEventDescriptor_initListDescriptor(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor initRecordDescriptor]'
NSAppleEventDescriptor *_IM_NSAppleEventDescriptor_initRecordDescriptor(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor initWithAEDescNoCopy:]'
NSAppleEventDescriptor *_IM_NSAppleEventDescriptor_initWithAEDescNoCopy_C(NSAppleEventDescriptor *_self, const struct AEDesc* aeDesc);

// method '-[NSAppleEventDescriptor initWithDescriptorType:bytes:length:]'
NSAppleEventDescriptor *_IM_NSAppleEventDescriptor_initWithDescriptorType_Cbytes_Clength_C(NSAppleEventDescriptor *_self, unsigned long descriptorType, const void* bytes, unsigned int byteCount);

// method '-[NSAppleEventDescriptor initWithDescriptorType:data:]'
NSAppleEventDescriptor *_IM_NSAppleEventDescriptor_initWithDescriptorType_Cdata_C(NSAppleEventDescriptor *_self, unsigned long descriptorType, NSData* data);

// method '-[NSAppleEventDescriptor initWithEventClass:eventID:targetDescriptor:returnID:transactionID:]'
NSAppleEventDescriptor *_IM_NSAppleEventDescriptor_initWithEventClass_CeventID_CtargetDescriptor_CreturnID_CtransactionID_C(NSAppleEventDescriptor *_self, unsigned long eventClass, unsigned long eventID, NSAppleEventDescriptor* targetDescriptor, short returnID, long transactionID);

// method '-[NSAppleEventDescriptor insertDescriptor:atIndex:]'
void _IM_NSAppleEventDescriptor_insertDescriptor_CatIndex_C(NSAppleEventDescriptor *_self, NSAppleEventDescriptor* descriptor, long index);

// method '-[NSAppleEventDescriptor int32Value]'
long _IM_NSAppleEventDescriptor_int32Value(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor keywordForDescriptorAtIndex:]'
unsigned long _IM_NSAppleEventDescriptor_keywordForDescriptorAtIndex_C(NSAppleEventDescriptor *_self, long index);

// method '+[NSAppleEventDescriptor listDescriptor]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_listDescriptor(Class _class);

// method '+[NSAppleEventDescriptor nullDescriptor]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_nullDescriptor(Class _class);

// method '-[NSAppleEventDescriptor numberOfItems]'
int _IM_NSAppleEventDescriptor_numberOfItems(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor paramDescriptorForKeyword:]'
NSAppleEventDescriptor* _IM_NSAppleEventDescriptor_paramDescriptorForKeyword_C(NSAppleEventDescriptor *_self, unsigned long keyword);

// method '+[NSAppleEventDescriptor recordDescriptor]'
NSAppleEventDescriptor* _CM_NSAppleEventDescriptor_recordDescriptor(Class _class);

// method '-[NSAppleEventDescriptor removeDescriptorAtIndex:]'
void _IM_NSAppleEventDescriptor_removeDescriptorAtIndex_C(NSAppleEventDescriptor *_self, long index);

// method '-[NSAppleEventDescriptor removeDescriptorWithKeyword:]'
void _IM_NSAppleEventDescriptor_removeDescriptorWithKeyword_C(NSAppleEventDescriptor *_self, unsigned long keyword);

// method '-[NSAppleEventDescriptor removeParamDescriptorWithKeyword:]'
void _IM_NSAppleEventDescriptor_removeParamDescriptorWithKeyword_C(NSAppleEventDescriptor *_self, unsigned long keyword);

// method '-[NSAppleEventDescriptor returnID]'
short _IM_NSAppleEventDescriptor_returnID(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor setAttributeDescriptor:forKeyword:]'
void _IM_NSAppleEventDescriptor_setAttributeDescriptor_CforKeyword_C(NSAppleEventDescriptor *_self, NSAppleEventDescriptor* descriptor, unsigned long keyword);

// method '-[NSAppleEventDescriptor setDescriptor:forKeyword:]'
void _IM_NSAppleEventDescriptor_setDescriptor_CforKeyword_C(NSAppleEventDescriptor *_self, NSAppleEventDescriptor* descriptor, unsigned long keyword);

// method '-[NSAppleEventDescriptor setParamDescriptor:forKeyword:]'
void _IM_NSAppleEventDescriptor_setParamDescriptor_CforKeyword_C(NSAppleEventDescriptor *_self, NSAppleEventDescriptor* descriptor, unsigned long keyword);

// method '-[NSAppleEventDescriptor stringValue]'
NSString* _IM_NSAppleEventDescriptor_stringValue(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor transactionID]'
long _IM_NSAppleEventDescriptor_transactionID(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventDescriptor typeCodeValue]'
unsigned long _IM_NSAppleEventDescriptor_typeCodeValue(NSAppleEventDescriptor *_self);

// method '-[NSAppleEventManager appleEventForSuspensionID:]'
NSAppleEventDescriptor* _IM_NSAppleEventManager_appleEventForSuspensionID_C(NSAppleEventManager *_self, struct __NSAppleEventManagerSuspension *suspensionID);

// method '-[NSAppleEventManager currentAppleEvent]'
NSAppleEventDescriptor* _IM_NSAppleEventManager_currentAppleEvent(NSAppleEventManager *_self);

// method '-[NSAppleEventManager currentReplyAppleEvent]'
NSAppleEventDescriptor* _IM_NSAppleEventManager_currentReplyAppleEvent(NSAppleEventManager *_self);

// method '-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:]'
short _IM_NSAppleEventManager_dispatchRawAppleEvent_CwithRawReply_ChandlerRefCon_C(NSAppleEventManager *_self, const struct AEDesc* theAppleEvent, struct AEDesc *theReply, unsigned long handlerRefCon);

// method '-[NSAppleEventManager removeEventHandlerForEventClass:andEventID:]'
void _IM_NSAppleEventManager_removeEventHandlerForEventClass_CandEventID_C(NSAppleEventManager *_self, unsigned long eventClass, unsigned long eventID);

// method '-[NSAppleEventManager replyAppleEventForSuspensionID:]'
NSAppleEventDescriptor* _IM_NSAppleEventManager_replyAppleEventForSuspensionID_C(NSAppleEventManager *_self, struct __NSAppleEventManagerSuspension *suspensionID);

// method '-[NSAppleEventManager resumeWithSuspensionID:]'
void _IM_NSAppleEventManager_resumeWithSuspensionID_C(NSAppleEventManager *_self, struct __NSAppleEventManagerSuspension *suspensionID);

// method '-[NSAppleEventManager setCurrentAppleEventAndReplyEventWithSuspensionID:]'
void _IM_NSAppleEventManager_setCurrentAppleEventAndReplyEventWithSuspensionID_C(NSAppleEventManager *_self, struct __NSAppleEventManagerSuspension *suspensionID);

// method '-[NSAppleEventManager setEventHandler:andSelector:forEventClass:andEventID:]'
void _IM_NSAppleEventManager_setEventHandler_CandSelector_CforEventClass_CandEventID_C(NSAppleEventManager *_self, id handler, SEL handleEventSelector, unsigned long eventClass, unsigned long eventID);

// method '+[NSAppleEventManager sharedAppleEventManager]'
NSAppleEventManager* _CM_NSAppleEventManager_sharedAppleEventManager(Class _class);

// method '-[NSAppleEventManager suspendCurrentAppleEvent]'
struct __NSAppleEventManagerSuspension *_IM_NSAppleEventManager_suspendCurrentAppleEvent(NSAppleEventManager *_self);

// method '-[NSAppleScript compileAndReturnError:]'
BOOL _IM_NSAppleScript_compileAndReturnError_C(NSAppleScript *_self, id *errorInfo);

// method '-[NSAppleScript executeAndReturnError:]'
NSAppleEventDescriptor* _IM_NSAppleScript_executeAndReturnError_C(NSAppleScript *_self, id *errorInfo);

// method '-[NSAppleScript executeAppleEvent:error:]'
NSAppleEventDescriptor* _IM_NSAppleScript_executeAppleEvent_Cerror_C(NSAppleScript *_self, NSAppleEventDescriptor* event, id *errorInfo);

// method '-[NSAppleScript initWithContentsOfURL:error:]'
NSAppleScript *_IM_NSAppleScript_initWithContentsOfURL_Cerror_C(NSAppleScript *_self, NSURL* url, id *errorInfo);

// method '-[NSAppleScript initWithSource:]'
NSAppleScript *_IM_NSAppleScript_initWithSource_C(NSAppleScript *_self, NSString* source);

// method '-[NSAppleScript isCompiled]'
BOOL _IM_NSAppleScript_isCompiled(NSAppleScript *_self);

// method '-[NSAppleScript source]'
NSString* _IM_NSAppleScript_source(NSAppleScript *_self);

// method '+[NSArchiver archiveRootObject:toFile:]'
BOOL _CM_NSArchiver_archiveRootObject_CtoFile_C(Class _class, id rootObject, NSString* path);

// method '+[NSArchiver archivedDataWithRootObject:]'
NSData* _CM_NSArchiver_archivedDataWithRootObject_C(Class _class, id rootObject);

// method '-[NSArchiver archiverData]'
NSMutableData* _IM_NSArchiver_archiverData(NSArchiver *_self);

// method '-[NSArchiver classNameEncodedForTrueClassName:]'
NSString* _IM_NSArchiver_classNameEncodedForTrueClassName_C(NSArchiver *_self, NSString* trueName);

// method '-[NSArchiver encodeClassName:intoClassName:]'
void _IM_NSArchiver_encodeClassName_CintoClassName_C(NSArchiver *_self, NSString* trueName, NSString* inArchiveName);

// method '-[NSArchiver encodeConditionalObject:]'
void _IM_NSArchiver_encodeConditionalObject_C(NSArchiver *_self, id object);

// method '-[NSArchiver encodeRootObject:]'
void _IM_NSArchiver_encodeRootObject_C(NSArchiver *_self, id rootObject);

// method '-[NSArchiver initForWritingWithMutableData:]'
NSArchiver *_IM_NSArchiver_initForWritingWithMutableData_C(NSArchiver *_self, NSMutableData* mdata);

// method '-[NSArchiver replaceObject:withObject:]'
void _IM_NSArchiver_replaceObject_CwithObject_C(NSArchiver *_self, id object, id newObject);

// method '-[NSArray addObserver:forKeyPath:options:context:]'
void _IM_NSArray_addObserver_CforKeyPath_Coptions_Ccontext_C(NSArray *_self, NSObject* observer, NSString* keyPath, unsigned int options, void *context);

// method '-[NSArray addObserver:toObjectsAtIndexes:forKeyPath:options:context:]'
void _IM_NSArray_addObserver_CtoObjectsAtIndexes_CforKeyPath_Coptions_Ccontext_C(NSArray *_self, NSObject* observer, NSIndexSet* indexes, NSString* keyPath, unsigned int options, void *context);

// method '+[NSArray array]'
id _CM_NSArray_array(Class _class);

// method '-[NSArray arrayByAddingObject:]'
NSArray* _IM_NSArray_arrayByAddingObject_C(NSArray *_self, id anObject);

// method '-[NSArray arrayByAddingObjectsFromArray:]'
NSArray* _IM_NSArray_arrayByAddingObjectsFromArray_C(NSArray *_self, NSArray* otherArray);

// method '+[NSArray arrayWithArray:]'
id _CM_NSArray_arrayWithArray_C(Class _class, NSArray* array);

// method '+[NSArray arrayWithContentsOfFile:]'
id _CM_NSArray_arrayWithContentsOfFile_C(Class _class, NSString* path);

// method '+[NSArray arrayWithContentsOfURL:]'
id _CM_NSArray_arrayWithContentsOfURL_C(Class _class, NSURL* url);

// method '+[NSArray arrayWithObject:]'
id _CM_NSArray_arrayWithObject_C(Class _class, id anObject);

// method '+[NSArray arrayWithObjects:count:]'
id _CM_NSArray_arrayWithObjects_Ccount_C(Class _class, id *objs, unsigned int cnt);

// method '-[NSArray componentsJoinedByString:]'
NSString* _IM_NSArray_componentsJoinedByString_C(NSArray *_self, NSString* separator);

// method '-[NSArray containsObject:]'
BOOL _IM_NSArray_containsObject_C(NSArray *_self, id anObject);

// method '-[NSArray count]'
unsigned int _IM_NSArray_count(NSArray *_self);

// method '-[NSArray description]'
NSString* _IM_NSArray_description(NSArray *_self);

// method '-[NSArray descriptionWithLocale:]'
NSString* _IM_NSArray_descriptionWithLocale_C(NSArray *_self, NSDictionary* locale);

// method '-[NSArray descriptionWithLocale:indent:]'
NSString* _IM_NSArray_descriptionWithLocale_Cindent_C(NSArray *_self, NSDictionary* locale, unsigned int level);

// method '-[NSArray filteredArrayUsingPredicate:]'
NSArray* _IM_NSArray_filteredArrayUsingPredicate_C(NSArray *_self, NSPredicate* predicate);

// method '-[NSArray firstObjectCommonWithArray:]'
id _IM_NSArray_firstObjectCommonWithArray_C(NSArray *_self, NSArray* otherArray);

// method '-[NSArray indexOfObject:]'
unsigned int _IM_NSArray_indexOfObject_C(NSArray *_self, id anObject);

// method '-[NSArray indexOfObject:inRange:]'
unsigned int _IM_NSArray_indexOfObject_CinRange_C(NSArray *_self, id anObject, struct _NSRange range);

// method '-[NSArray indexOfObjectIdenticalTo:]'
unsigned int _IM_NSArray_indexOfObjectIdenticalTo_C(NSArray *_self, id anObject);

// method '-[NSArray indexOfObjectIdenticalTo:inRange:]'
unsigned int _IM_NSArray_indexOfObjectIdenticalTo_CinRange_C(NSArray *_self, id anObject, struct _NSRange range);

// method '-[NSArray initWithArray:]'
NSArray *_IM_NSArray_initWithArray_C(NSArray *_self, NSArray* array);

// method '-[NSArray initWithArray:copyItems:]'
NSArray *_IM_NSArray_initWithArray_CcopyItems_C(NSArray *_self, NSArray* array, BOOL flag);

// method '-[NSArray initWithContentsOfFile:]'
NSArray *_IM_NSArray_initWithContentsOfFile_C(NSArray *_self, NSString* path);

// method '-[NSArray initWithContentsOfURL:]'
NSArray *_IM_NSArray_initWithContentsOfURL_C(NSArray *_self, NSURL* url);

// method '-[NSArray initWithObjects:count:]'
NSArray *_IM_NSArray_initWithObjects_Ccount_C(NSArray *_self, id *objects, unsigned int count);

// method '-[NSArray isEqualToArray:]'
BOOL _IM_NSArray_isEqualToArray_C(NSArray *_self, NSArray* otherArray);

// method '-[NSArray lastObject]'
id _IM_NSArray_lastObject(NSArray *_self);

// method '-[NSArray makeObjectsPerformSelector:]'
void _IM_NSArray_makeObjectsPerformSelector_C(NSArray *_self, SEL aSelector);

// method '-[NSArray makeObjectsPerformSelector:withObject:]'
void _IM_NSArray_makeObjectsPerformSelector_CwithObject_C(NSArray *_self, SEL aSelector, id argument);

// method '-[NSArray objectAtIndex:]'
id _IM_NSArray_objectAtIndex_C(NSArray *_self, unsigned int index);

// method '-[NSArray objectEnumerator]'
NSEnumerator* _IM_NSArray_objectEnumerator(NSArray *_self);

// method '-[NSArray objectsAtIndexes:]'
NSArray* _IM_NSArray_objectsAtIndexes_C(NSArray *_self, NSIndexSet* indexes);

// method '-[NSArray pathsMatchingExtensions:]'
NSArray* _IM_NSArray_pathsMatchingExtensions_C(NSArray *_self, NSArray* filterTypes);

// method '-[NSArray removeObserver:forKeyPath:]'
void _IM_NSArray_removeObserver_CforKeyPath_C(NSArray *_self, NSObject* observer, NSString* keyPath);

// method '-[NSArray removeObserver:fromObjectsAtIndexes:forKeyPath:]'
void _IM_NSArray_removeObserver_CfromObjectsAtIndexes_CforKeyPath_C(NSArray *_self, NSObject* observer, NSIndexSet* indexes, NSString* keyPath);

// method '-[NSArray reverseObjectEnumerator]'
NSEnumerator* _IM_NSArray_reverseObjectEnumerator(NSArray *_self);

// method '-[NSArray setValue:forKey:]'
void _IM_NSArray_setValue_CforKey_C(NSArray *_self, id value, NSString* key);

// method '-[NSArray sortedArrayHint]'
NSData* _IM_NSArray_sortedArrayHint(NSArray *_self);

// method '-[NSArray sortedArrayUsingDescriptors:]'
NSArray* _IM_NSArray_sortedArrayUsingDescriptors_C(NSArray *_self, NSArray* sortDescriptors);

// method '-[NSArray sortedArrayUsingSelector:]'
NSArray* _IM_NSArray_sortedArrayUsingSelector_C(NSArray *_self, SEL comparator);

// method '-[NSArray subarrayWithRange:]'
NSArray* _IM_NSArray_subarrayWithRange_C(NSArray *_self, struct _NSRange range);

// method '-[NSArray valueForKey:]'
id _IM_NSArray_valueForKey_C(NSArray *_self, NSString* key);

// method '-[NSArray writeToFile:atomically:]'
BOOL _IM_NSArray_writeToFile_Catomically_C(NSArray *_self, NSString* path, BOOL useAuxiliaryFile);

// method '-[NSArray writeToURL:atomically:]'
BOOL _IM_NSArray_writeToURL_Catomically_C(NSArray *_self, NSURL* url, BOOL atomically);

// method '+[NSAssertionHandler currentHandler]'
NSAssertionHandler* _CM_NSAssertionHandler_currentHandler(Class _class);

// method '-[NSAttributedString attribute:atIndex:effectiveRange:]'
id _IM_NSAttributedString_attribute_CatIndex_CeffectiveRange_C(NSAttributedString *_self, NSString* attrName, unsigned int location, struct _NSRange *range);

// method '-[NSAttributedString attribute:atIndex:longestEffectiveRange:inRange:]'
id _IM_NSAttributedString_attribute_CatIndex_ClongestEffectiveRange_CinRange_C(NSAttributedString *_self, NSString* attrName, unsigned int location, struct _NSRange *range, struct _NSRange rangeLimit);

// method '-[NSAttributedString attributedSubstringFromRange:]'
NSAttributedString* _IM_NSAttributedString_attributedSubstringFromRange_C(NSAttributedString *_self, struct _NSRange range);

// method '-[NSAttributedString attributesAtIndex:effectiveRange:]'
NSDictionary* _IM_NSAttributedString_attributesAtIndex_CeffectiveRange_C(NSAttributedString *_self, unsigned int location, struct _NSRange *range);

// method '-[NSAttributedString attributesAtIndex:longestEffectiveRange:inRange:]'
NSDictionary* _IM_NSAttributedString_attributesAtIndex_ClongestEffectiveRange_CinRange_C(NSAttributedString *_self, unsigned int location, struct _NSRange *range, struct _NSRange rangeLimit);

// method '-[NSAttributedString initWithAttributedString:]'
NSAttributedString *_IM_NSAttributedString_initWithAttributedString_C(NSAttributedString *_self, NSAttributedString* attrStr);

// method '-[NSAttributedString initWithString:]'
NSAttributedString *_IM_NSAttributedString_initWithString_C(NSAttributedString *_self, NSString* str);

// method '-[NSAttributedString initWithString:attributes:]'
NSAttributedString *_IM_NSAttributedString_initWithString_Cattributes_C(NSAttributedString *_self, NSString* str, NSDictionary* attrs);

// method '-[NSAttributedString isEqualToAttributedString:]'
BOOL _IM_NSAttributedString_isEqualToAttributedString_C(NSAttributedString *_self, NSAttributedString* other);

// method '-[NSAttributedString length]'
unsigned int _IM_NSAttributedString_length(NSAttributedString *_self);

// method '-[NSAttributedString string]'
NSString* _IM_NSAttributedString_string(NSAttributedString *_self);

// method '+[NSAutoreleasePool addObject:]'
void _CM_NSAutoreleasePool_addObject_C(Class _class, id anObject);

// method '-[NSAutoreleasePool addObject:]'
void _IM_NSAutoreleasePool_addObject_C(NSAutoreleasePool *_self, id anObject);

// method '+[NSAutoreleasePool autoreleasedObjectCount]'
unsigned int _CM_NSAutoreleasePool_autoreleasedObjectCount(Class _class);

// method '-[NSAutoreleasePool drain]'
void _IM_NSAutoreleasePool_drain(NSAutoreleasePool *_self);

// method '+[NSAutoreleasePool enableFreedObjectCheck:]'
void _CM_NSAutoreleasePool_enableFreedObjectCheck_C(Class _class, BOOL enable);

// method '+[NSAutoreleasePool enableRelease:]'
void _CM_NSAutoreleasePool_enableRelease_C(Class _class, BOOL enable);

// method '+[NSAutoreleasePool poolCountHighWaterMark]'
unsigned int _CM_NSAutoreleasePool_poolCountHighWaterMark(Class _class);

// method '+[NSAutoreleasePool poolCountHighWaterResolution]'
unsigned int _CM_NSAutoreleasePool_poolCountHighWaterResolution(Class _class);

// method '+[NSAutoreleasePool resetTotalAutoreleasedObjects]'
void _CM_NSAutoreleasePool_resetTotalAutoreleasedObjects(Class _class);

// method '+[NSAutoreleasePool setPoolCountHighWaterMark:]'
void _CM_NSAutoreleasePool_setPoolCountHighWaterMark_C(Class _class, unsigned int count);

// method '+[NSAutoreleasePool setPoolCountHighWaterResolution:]'
void _CM_NSAutoreleasePool_setPoolCountHighWaterResolution_C(Class _class, unsigned int res);

// method '+[NSAutoreleasePool showPools]'
void _CM_NSAutoreleasePool_showPools(Class _class);

// method '+[NSAutoreleasePool topAutoreleasePoolCount]'
unsigned int _CM_NSAutoreleasePool_topAutoreleasePoolCount(Class _class);

// method '+[NSAutoreleasePool totalAutoreleasedObjects]'
unsigned int _CM_NSAutoreleasePool_totalAutoreleasedObjects(Class _class);

// method '+[NSBundle allBundles]'
NSArray* _CM_NSBundle_allBundles(Class _class);

// method '+[NSBundle allFrameworks]'
NSArray* _CM_NSBundle_allFrameworks(Class _class);

// method '-[NSBundle builtInPlugInsPath]'
NSString* _IM_NSBundle_builtInPlugInsPath(NSBundle *_self);

// method '+[NSBundle bundleForClass:]'
NSBundle* _CM_NSBundle_bundleForClass_C(Class _class, Class aClass);

// method '-[NSBundle bundleIdentifier]'
NSString* _IM_NSBundle_bundleIdentifier(NSBundle *_self);

// method '-[NSBundle bundlePath]'
NSString* _IM_NSBundle_bundlePath(NSBundle *_self);

// method '+[NSBundle bundleWithIdentifier:]'
NSBundle* _CM_NSBundle_bundleWithIdentifier_C(Class _class, NSString* identifier);

// method '+[NSBundle bundleWithPath:]'
NSBundle* _CM_NSBundle_bundleWithPath_C(Class _class, NSString* path);

// method '-[NSBundle classNamed:]'
Class _IM_NSBundle_classNamed_C(NSBundle *_self, NSString* className);

// method '-[NSBundle developmentLocalization]'
NSString* _IM_NSBundle_developmentLocalization(NSBundle *_self);

// method '-[NSBundle executablePath]'
NSString* _IM_NSBundle_executablePath(NSBundle *_self);

// method '-[NSBundle infoDictionary]'
NSDictionary* _IM_NSBundle_infoDictionary(NSBundle *_self);

// method '-[NSBundle initWithPath:]'
NSBundle *_IM_NSBundle_initWithPath_C(NSBundle *_self, NSString* path);

// method '-[NSBundle isLoaded]'
BOOL _IM_NSBundle_isLoaded(NSBundle *_self);

// method '-[NSBundle load]'
BOOL _IM_NSBundle_load(NSBundle *_self);

// method '-[NSBundle localizations]'
NSArray* _IM_NSBundle_localizations(NSBundle *_self);

// method '-[NSBundle localizedInfoDictionary]'
NSDictionary* _IM_NSBundle_localizedInfoDictionary(NSBundle *_self);

// method '-[NSBundle localizedStringForKey:value:table:]'
NSString* _IM_NSBundle_localizedStringForKey_Cvalue_Ctable_C(NSBundle *_self, NSString* key, NSString* value, NSString* tableName);

// method '+[NSBundle mainBundle]'
NSBundle* _CM_NSBundle_mainBundle(Class _class);

// method '-[NSBundle objectForInfoDictionaryKey:]'
id _IM_NSBundle_objectForInfoDictionaryKey_C(NSBundle *_self, NSString* key);

// method '-[NSBundle pathForAuxiliaryExecutable:]'
NSString* _IM_NSBundle_pathForAuxiliaryExecutable_C(NSBundle *_self, NSString* executableName);

// method '-[NSBundle pathForResource:ofType:]'
NSString* _IM_NSBundle_pathForResource_CofType_C(NSBundle *_self, NSString* name, NSString* ext);

// method '+[NSBundle pathForResource:ofType:inDirectory:]'
NSString* _CM_NSBundle_pathForResource_CofType_CinDirectory_C(Class _class, NSString* name, NSString* ext, NSString* bundlePath);

// method '-[NSBundle pathForResource:ofType:inDirectory:]'
NSString* _IM_NSBundle_pathForResource_CofType_CinDirectory_C(NSBundle *_self, NSString* name, NSString* ext, NSString* subpath);

// method '-[NSBundle pathForResource:ofType:inDirectory:forLocalization:]'
NSString* _IM_NSBundle_pathForResource_CofType_CinDirectory_CforLocalization_C(NSBundle *_self, NSString* name, NSString* ext, NSString* subpath, NSString* localizationName);

// method '+[NSBundle pathsForResourcesOfType:inDirectory:]'
NSArray* _CM_NSBundle_pathsForResourcesOfType_CinDirectory_C(Class _class, NSString* ext, NSString* bundlePath);

// method '-[NSBundle pathsForResourcesOfType:inDirectory:]'
NSArray* _IM_NSBundle_pathsForResourcesOfType_CinDirectory_C(NSBundle *_self, NSString* ext, NSString* subpath);

// method '-[NSBundle pathsForResourcesOfType:inDirectory:forLocalization:]'
NSArray* _IM_NSBundle_pathsForResourcesOfType_CinDirectory_CforLocalization_C(NSBundle *_self, NSString* ext, NSString* subpath, NSString* localizationName);

// method '-[NSBundle preferredLocalizations]'
NSArray* _IM_NSBundle_preferredLocalizations(NSBundle *_self);

// method '+[NSBundle preferredLocalizationsFromArray:]'
NSArray* _CM_NSBundle_preferredLocalizationsFromArray_C(Class _class, NSArray* localizationsArray);

// method '+[NSBundle preferredLocalizationsFromArray:forPreferences:]'
NSArray* _CM_NSBundle_preferredLocalizationsFromArray_CforPreferences_C(Class _class, NSArray* localizationsArray, NSArray* preferencesArray);

// method '-[NSBundle principalClass]'
Class _IM_NSBundle_principalClass(NSBundle *_self);

// method '-[NSBundle privateFrameworksPath]'
NSString* _IM_NSBundle_privateFrameworksPath(NSBundle *_self);

// method '-[NSBundle resourcePath]'
NSString* _IM_NSBundle_resourcePath(NSBundle *_self);

// method '-[NSBundle sharedFrameworksPath]'
NSString* _IM_NSBundle_sharedFrameworksPath(NSBundle *_self);

// method '-[NSBundle sharedSupportPath]'
NSString* _IM_NSBundle_sharedSupportPath(NSBundle *_self);

// method '-[NSCachedURLResponse data]'
NSData* _IM_NSCachedURLResponse_data(NSCachedURLResponse *_self);

// method '-[NSCachedURLResponse initWithResponse:data:]'
NSCachedURLResponse *_IM_NSCachedURLResponse_initWithResponse_Cdata_C(NSCachedURLResponse *_self, NSURLResponse* response, NSData* data);

// method '-[NSCachedURLResponse initWithResponse:data:userInfo:storagePolicy:]'
NSCachedURLResponse *_IM_NSCachedURLResponse_initWithResponse_Cdata_CuserInfo_CstoragePolicy_C(NSCachedURLResponse *_self, NSURLResponse* response, NSData* data, NSDictionary* userInfo, int storagePolicy);

// method '-[NSCachedURLResponse response]'
NSURLResponse* _IM_NSCachedURLResponse_response(NSCachedURLResponse *_self);

// method '-[NSCachedURLResponse storagePolicy]'
int _IM_NSCachedURLResponse_storagePolicy(NSCachedURLResponse *_self);

// method '-[NSCachedURLResponse userInfo]'
NSDictionary* _IM_NSCachedURLResponse_userInfo(NSCachedURLResponse *_self);

// method '-[NSCalendar calendarIdentifier]'
NSString* _IM_NSCalendar_calendarIdentifier(NSCalendar *_self);

// method '-[NSCalendar components:fromDate:]'
NSDateComponents* _IM_NSCalendar_components_CfromDate_C(NSCalendar *_self, unsigned int unitFlags, NSDate* date);

// method '-[NSCalendar components:fromDate:toDate:options:]'
NSDateComponents* _IM_NSCalendar_components_CfromDate_CtoDate_Coptions_C(NSCalendar *_self, unsigned int unitFlags, NSDate* startingDate, NSDate* resultDate, unsigned int opts);

// method '+[NSCalendar currentCalendar]'
id _CM_NSCalendar_currentCalendar(Class _class);

// method '-[NSCalendar dateByAddingComponents:toDate:options:]'
NSDate* _IM_NSCalendar_dateByAddingComponents_CtoDate_Coptions_C(NSCalendar *_self, NSDateComponents* comps, NSDate* date, unsigned int opts);

// method '-[NSCalendar dateFromComponents:]'
NSDate* _IM_NSCalendar_dateFromComponents_C(NSCalendar *_self, NSDateComponents* comps);

// method '-[NSCalendar firstWeekday]'
unsigned int _IM_NSCalendar_firstWeekday(NSCalendar *_self);

// method '-[NSCalendar initWithCalendarIdentifier:]'
NSCalendar *_IM_NSCalendar_initWithCalendarIdentifier_C(NSCalendar *_self, NSString* ident);

// method '-[NSCalendar locale]'
NSLocale* _IM_NSCalendar_locale(NSCalendar *_self);

// method '-[NSCalendar maximumRangeOfUnit:]'
struct _NSRange _IM_NSCalendar_maximumRangeOfUnit_C(NSCalendar *_self, int unit);

// method '-[NSCalendar minimumDaysInFirstWeek]'
unsigned int _IM_NSCalendar_minimumDaysInFirstWeek(NSCalendar *_self);

// method '-[NSCalendar minimumRangeOfUnit:]'
struct _NSRange _IM_NSCalendar_minimumRangeOfUnit_C(NSCalendar *_self, int unit);

// method '-[NSCalendar ordinalityOfUnit:inUnit:forDate:]'
unsigned int _IM_NSCalendar_ordinalityOfUnit_CinUnit_CforDate_C(NSCalendar *_self, int smaller, int larger, NSDate* date);

// method '-[NSCalendar rangeOfUnit:inUnit:forDate:]'
struct _NSRange _IM_NSCalendar_rangeOfUnit_CinUnit_CforDate_C(NSCalendar *_self, int smaller, int larger, NSDate* date);

// method '-[NSCalendar setFirstWeekday:]'
void _IM_NSCalendar_setFirstWeekday_C(NSCalendar *_self, unsigned int weekday);

// method '-[NSCalendar setLocale:]'
void _IM_NSCalendar_setLocale_C(NSCalendar *_self, NSLocale* locale);

// method '-[NSCalendar setMinimumDaysInFirstWeek:]'
void _IM_NSCalendar_setMinimumDaysInFirstWeek_C(NSCalendar *_self, unsigned int mdw);

// method '-[NSCalendar setTimeZone:]'
void _IM_NSCalendar_setTimeZone_C(NSCalendar *_self, NSTimeZone* tz);

// method '-[NSCalendar timeZone]'
NSTimeZone* _IM_NSCalendar_timeZone(NSCalendar *_self);

// method '+[NSCalendarDate calendarDate]'
id _CM_NSCalendarDate_calendarDate(Class _class);

// method '-[NSCalendarDate calendarFormat]'
NSString* _IM_NSCalendarDate_calendarFormat(NSCalendarDate *_self);

// method '-[NSCalendarDate dateByAddingYears:months:days:hours:minutes:seconds:]'
NSCalendarDate* _IM_NSCalendarDate_dateByAddingYears_Cmonths_Cdays_Chours_Cminutes_Cseconds_C(NSCalendarDate *_self, int year, int month, int day, int hour, int minute, int second);

// method '+[NSCalendarDate dateWithString:calendarFormat:]'
id _CM_NSCalendarDate_dateWithString_CcalendarFormat_C(Class _class, NSString* description, NSString* format);

// method '+[NSCalendarDate dateWithString:calendarFormat:locale:]'
id _CM_NSCalendarDate_dateWithString_CcalendarFormat_Clocale_C(Class _class, NSString* description, NSString* format, NSDictionary* dict);

// method '+[NSCalendarDate dateWithYear:month:day:hour:minute:second:timeZone:]'
id _CM_NSCalendarDate_dateWithYear_Cmonth_Cday_Chour_Cminute_Csecond_CtimeZone_C(Class _class, int year, unsigned int month, unsigned int day, unsigned int hour, unsigned int minute, unsigned int second, NSTimeZone* aTimeZone);

// method '-[NSCalendarDate dayOfCommonEra]'
int _IM_NSCalendarDate_dayOfCommonEra(NSCalendarDate *_self);

// method '-[NSCalendarDate dayOfMonth]'
int _IM_NSCalendarDate_dayOfMonth(NSCalendarDate *_self);

// method '-[NSCalendarDate dayOfWeek]'
int _IM_NSCalendarDate_dayOfWeek(NSCalendarDate *_self);

// method '-[NSCalendarDate dayOfYear]'
int _IM_NSCalendarDate_dayOfYear(NSCalendarDate *_self);

// method '-[NSCalendarDate description]'
NSString* _IM_NSCalendarDate_description(NSCalendarDate *_self);

// method '-[NSCalendarDate descriptionWithCalendarFormat:]'
NSString* _IM_NSCalendarDate_descriptionWithCalendarFormat_C(NSCalendarDate *_self, NSString* format);

// method '-[NSCalendarDate descriptionWithCalendarFormat:locale:]'
NSString* _IM_NSCalendarDate_descriptionWithCalendarFormat_Clocale_C(NSCalendarDate *_self, NSString* format, NSDictionary* locale);

// method '-[NSCalendarDate descriptionWithLocale:]'
NSString* _IM_NSCalendarDate_descriptionWithLocale_C(NSCalendarDate *_self, NSDictionary* locale);

// method '-[NSCalendarDate hourOfDay]'
int _IM_NSCalendarDate_hourOfDay(NSCalendarDate *_self);

// method '-[NSCalendarDate initWithString:]'
NSCalendarDate *_IM_NSCalendarDate_initWithString_C(NSCalendarDate *_self, NSString* description);

// method '-[NSCalendarDate initWithString:calendarFormat:]'
NSCalendarDate *_IM_NSCalendarDate_initWithString_CcalendarFormat_C(NSCalendarDate *_self, NSString* description, NSString* format);

// method '-[NSCalendarDate initWithString:calendarFormat:locale:]'
NSCalendarDate *_IM_NSCalendarDate_initWithString_CcalendarFormat_Clocale_C(NSCalendarDate *_self, NSString* description, NSString* format, NSDictionary* dict);

// method '-[NSCalendarDate initWithYear:month:day:hour:minute:second:timeZone:]'
NSCalendarDate *_IM_NSCalendarDate_initWithYear_Cmonth_Cday_Chour_Cminute_Csecond_CtimeZone_C(NSCalendarDate *_self, int year, unsigned int month, unsigned int day, unsigned int hour, unsigned int minute, unsigned int second, NSTimeZone* aTimeZone);

// method '-[NSCalendarDate minuteOfHour]'
int _IM_NSCalendarDate_minuteOfHour(NSCalendarDate *_self);

// method '-[NSCalendarDate monthOfYear]'
int _IM_NSCalendarDate_monthOfYear(NSCalendarDate *_self);

// method '-[NSCalendarDate secondOfMinute]'
int _IM_NSCalendarDate_secondOfMinute(NSCalendarDate *_self);

// method '-[NSCalendarDate setCalendarFormat:]'
void _IM_NSCalendarDate_setCalendarFormat_C(NSCalendarDate *_self, NSString* format);

// method '-[NSCalendarDate setTimeZone:]'
void _IM_NSCalendarDate_setTimeZone_C(NSCalendarDate *_self, NSTimeZone* aTimeZone);

// method '-[NSCalendarDate timeZone]'
NSTimeZone* _IM_NSCalendarDate_timeZone(NSCalendarDate *_self);

// method '-[NSCalendarDate yearOfCommonEra]'
int _IM_NSCalendarDate_yearOfCommonEra(NSCalendarDate *_self);

// method '-[NSCalendarDate years:months:days:hours:minutes:seconds:sinceDate:]'
void _IM_NSCalendarDate_years_Cmonths_Cdays_Chours_Cminutes_Cseconds_CsinceDate_C(NSCalendarDate *_self, int *yp, int *mop, int *dp, int *hp, int *mip, int *sp, NSCalendarDate* date);

// method '+[NSCharacterSet alphanumericCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_alphanumericCharacterSet(Class _class);

// method '-[NSCharacterSet bitmapRepresentation]'
NSData* _IM_NSCharacterSet_bitmapRepresentation(NSCharacterSet *_self);

// method '+[NSCharacterSet capitalizedLetterCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_capitalizedLetterCharacterSet(Class _class);

// method '-[NSCharacterSet characterIsMember:]'
BOOL _IM_NSCharacterSet_characterIsMember_C(NSCharacterSet *_self, unsigned short aCharacter);

// method '+[NSCharacterSet characterSetWithBitmapRepresentation:]'
NSCharacterSet* _CM_NSCharacterSet_characterSetWithBitmapRepresentation_C(Class _class, NSData* data);

// method '+[NSCharacterSet characterSetWithCharactersInString:]'
NSCharacterSet* _CM_NSCharacterSet_characterSetWithCharactersInString_C(Class _class, NSString* aString);

// method '+[NSCharacterSet characterSetWithContentsOfFile:]'
NSCharacterSet* _CM_NSCharacterSet_characterSetWithContentsOfFile_C(Class _class, NSString* fName);

// method '+[NSCharacterSet characterSetWithRange:]'
NSCharacterSet* _CM_NSCharacterSet_characterSetWithRange_C(Class _class, struct _NSRange aRange);

// method '+[NSCharacterSet controlCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_controlCharacterSet(Class _class);

// method '+[NSCharacterSet decimalDigitCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_decimalDigitCharacterSet(Class _class);

// method '+[NSCharacterSet decomposableCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_decomposableCharacterSet(Class _class);

// method '-[NSCharacterSet hasMemberInPlane:]'
BOOL _IM_NSCharacterSet_hasMemberInPlane_C(NSCharacterSet *_self, unsigned char thePlane);

// method '+[NSCharacterSet illegalCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_illegalCharacterSet(Class _class);

// method '-[NSCharacterSet invertedSet]'
NSCharacterSet* _IM_NSCharacterSet_invertedSet(NSCharacterSet *_self);

// method '-[NSCharacterSet isSupersetOfSet:]'
BOOL _IM_NSCharacterSet_isSupersetOfSet_C(NSCharacterSet *_self, NSCharacterSet* theOtherSet);

// method '+[NSCharacterSet letterCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_letterCharacterSet(Class _class);

// method '-[NSCharacterSet longCharacterIsMember:]'
BOOL _IM_NSCharacterSet_longCharacterIsMember_C(NSCharacterSet *_self, unsigned long theLongChar);

// method '+[NSCharacterSet lowercaseLetterCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_lowercaseLetterCharacterSet(Class _class);

// method '+[NSCharacterSet nonBaseCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_nonBaseCharacterSet(Class _class);

// method '+[NSCharacterSet punctuationCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_punctuationCharacterSet(Class _class);

// method '+[NSCharacterSet symbolCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_symbolCharacterSet(Class _class);

// method '+[NSCharacterSet uppercaseLetterCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_uppercaseLetterCharacterSet(Class _class);

// method '+[NSCharacterSet whitespaceAndNewlineCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_whitespaceAndNewlineCharacterSet(Class _class);

// method '+[NSCharacterSet whitespaceCharacterSet]'
NSCharacterSet* _CM_NSCharacterSet_whitespaceCharacterSet(Class _class);

// method '-[NSClassDescription attributeKeys]'
NSArray* _IM_NSClassDescription_attributeKeys(NSClassDescription *_self);

// method '+[NSClassDescription classDescriptionForClass:]'
NSClassDescription* _CM_NSClassDescription_classDescriptionForClass_C(Class _class, Class aClass);

// method '+[NSClassDescription invalidateClassDescriptionCache]'
void _CM_NSClassDescription_invalidateClassDescriptionCache(Class _class);

// method '-[NSClassDescription inverseForRelationshipKey:]'
NSString* _IM_NSClassDescription_inverseForRelationshipKey_C(NSClassDescription *_self, NSString* relationshipKey);

// method '+[NSClassDescription registerClassDescription:forClass:]'
void _CM_NSClassDescription_registerClassDescription_CforClass_C(Class _class, NSClassDescription* description, Class aClass);

// method '-[NSClassDescription toManyRelationshipKeys]'
NSArray* _IM_NSClassDescription_toManyRelationshipKeys(NSClassDescription *_self);

// method '-[NSClassDescription toOneRelationshipKeys]'
NSArray* _IM_NSClassDescription_toOneRelationshipKeys(NSClassDescription *_self);

// method '-[NSCloneCommand keySpecifier]'
NSScriptObjectSpecifier* _IM_NSCloneCommand_keySpecifier(NSCloneCommand *_self);

// method '-[NSCloneCommand setReceiversSpecifier:]'
void _IM_NSCloneCommand_setReceiversSpecifier_C(NSCloneCommand *_self, NSScriptObjectSpecifier* receiversRef);

// method '-[NSCloseCommand saveOptions]'
int _IM_NSCloseCommand_saveOptions(NSCloseCommand *_self);

// method '-[NSCoder allowsKeyedCoding]'
BOOL _IM_NSCoder_allowsKeyedCoding(NSCoder *_self);

// method '-[NSCoder containsValueForKey:]'
BOOL _IM_NSCoder_containsValueForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeArrayOfObjCType:count:at:]'
void _IM_NSCoder_decodeArrayOfObjCType_Ccount_Cat_C(NSCoder *_self, const char* itemType, unsigned int count, void *array);

// method '-[NSCoder decodeBoolForKey:]'
BOOL _IM_NSCoder_decodeBoolForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeBytesForKey:returnedLength:]'
const uint8_t* _IM_NSCoder_decodeBytesForKey_CreturnedLength_C(NSCoder *_self, NSString* key, unsigned int *lengthp);

// method '-[NSCoder decodeBytesWithReturnedLength:]'
void *_IM_NSCoder_decodeBytesWithReturnedLength_C(NSCoder *_self, unsigned int *lengthp);

// method '-[NSCoder decodeDataObject]'
NSData* _IM_NSCoder_decodeDataObject(NSCoder *_self);

// method '-[NSCoder decodeDoubleForKey:]'
double _IM_NSCoder_decodeDoubleForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeFloatForKey:]'
float _IM_NSCoder_decodeFloatForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeInt32ForKey:]'
int _IM_NSCoder_decodeInt32ForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeInt64ForKey:]'
long long _IM_NSCoder_decodeInt64ForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeIntForKey:]'
int _IM_NSCoder_decodeIntForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeNXObject]'
id _IM_NSCoder_decodeNXObject(NSCoder *_self);

// method '-[NSCoder decodeObject]'
id _IM_NSCoder_decodeObject(NSCoder *_self);

// method '-[NSCoder decodeObjectForKey:]'
id _IM_NSCoder_decodeObjectForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodePoint]'
struct _NSPoint _IM_NSCoder_decodePoint(NSCoder *_self);

// method '-[NSCoder decodePointForKey:]'
struct _NSPoint _IM_NSCoder_decodePointForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodePropertyList]'
id _IM_NSCoder_decodePropertyList(NSCoder *_self);

// method '-[NSCoder decodeRect]'
struct _NSRect _IM_NSCoder_decodeRect(NSCoder *_self);

// method '-[NSCoder decodeRectForKey:]'
struct _NSRect _IM_NSCoder_decodeRectForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeSize]'
struct _NSSize _IM_NSCoder_decodeSize(NSCoder *_self);

// method '-[NSCoder decodeSizeForKey:]'
struct _NSSize _IM_NSCoder_decodeSizeForKey_C(NSCoder *_self, NSString* key);

// method '-[NSCoder decodeValueOfObjCType:at:]'
void _IM_NSCoder_decodeValueOfObjCType_Cat_C(NSCoder *_self, const char* type, void *data);

// method '-[NSCoder encodeArrayOfObjCType:count:at:]'
void _IM_NSCoder_encodeArrayOfObjCType_Ccount_Cat_C(NSCoder *_self, const char* type, unsigned int count, const void* array);

// method '-[NSCoder encodeBool:forKey:]'
void _IM_NSCoder_encodeBool_CforKey_C(NSCoder *_self, BOOL boolv, NSString* key);

// method '-[NSCoder encodeBycopyObject:]'
void _IM_NSCoder_encodeBycopyObject_C(NSCoder *_self, id anObject);

// method '-[NSCoder encodeByrefObject:]'
void _IM_NSCoder_encodeByrefObject_C(NSCoder *_self, id anObject);

// method '-[NSCoder encodeBytes:length:]'
void _IM_NSCoder_encodeBytes_Clength_C(NSCoder *_self, const void* byteaddr, unsigned int length);

// method '-[NSCoder encodeBytes:length:forKey:]'
void _IM_NSCoder_encodeBytes_Clength_CforKey_C(NSCoder *_self, const uint8_t* bytesp, unsigned int lenv, NSString* key);

// method '-[NSCoder encodeConditionalObject:]'
void _IM_NSCoder_encodeConditionalObject_C(NSCoder *_self, id object);

// method '-[NSCoder encodeConditionalObject:forKey:]'
void _IM_NSCoder_encodeConditionalObject_CforKey_C(NSCoder *_self, id objv, NSString* key);

// method '-[NSCoder encodeDataObject:]'
void _IM_NSCoder_encodeDataObject_C(NSCoder *_self, NSData* data);

// method '-[NSCoder encodeDouble:forKey:]'
void _IM_NSCoder_encodeDouble_CforKey_C(NSCoder *_self, double realv, NSString* key);

// method '-[NSCoder encodeFloat:forKey:]'
void _IM_NSCoder_encodeFloat_CforKey_C(NSCoder *_self, float realv, NSString* key);

// method '-[NSCoder encodeInt32:forKey:]'
void _IM_NSCoder_encodeInt32_CforKey_C(NSCoder *_self, int intv, NSString* key);

// method '-[NSCoder encodeInt64:forKey:]'
void _IM_NSCoder_encodeInt64_CforKey_C(NSCoder *_self, long long intv, NSString* key);

// method '-[NSCoder encodeInt:forKey:]'
void _IM_NSCoder_encodeInt_CforKey_C(NSCoder *_self, int intv, NSString* key);

// method '-[NSCoder encodeNXObject:]'
void _IM_NSCoder_encodeNXObject_C(NSCoder *_self, id object);

// method '-[NSCoder encodeObject:]'
void _IM_NSCoder_encodeObject_C(NSCoder *_self, id object);

// method '-[NSCoder encodeObject:forKey:]'
void _IM_NSCoder_encodeObject_CforKey_C(NSCoder *_self, id objv, NSString* key);

// method '-[NSCoder encodePoint:]'
void _IM_NSCoder_encodePoint_C(NSCoder *_self, struct _NSPoint point);

// method '-[NSCoder encodePoint:forKey:]'
void _IM_NSCoder_encodePoint_CforKey_C(NSCoder *_self, struct _NSPoint point, NSString* key);

// method '-[NSCoder encodePropertyList:]'
void _IM_NSCoder_encodePropertyList_C(NSCoder *_self, id aPropertyList);

// method '-[NSCoder encodeRect:]'
void _IM_NSCoder_encodeRect_C(NSCoder *_self, struct _NSRect rect);

// method '-[NSCoder encodeRect:forKey:]'
void _IM_NSCoder_encodeRect_CforKey_C(NSCoder *_self, struct _NSRect rect, NSString* key);

// method '-[NSCoder encodeRootObject:]'
void _IM_NSCoder_encodeRootObject_C(NSCoder *_self, id rootObject);

// method '-[NSCoder encodeSize:]'
void _IM_NSCoder_encodeSize_C(NSCoder *_self, struct _NSSize size);

// method '-[NSCoder encodeSize:forKey:]'
void _IM_NSCoder_encodeSize_CforKey_C(NSCoder *_self, struct _NSSize size, NSString* key);

// method '-[NSCoder encodeValueOfObjCType:at:]'
void _IM_NSCoder_encodeValueOfObjCType_Cat_C(NSCoder *_self, const char* type, const void* addr);

// method '-[NSCoder objectZone]'
struct _NSZone *_IM_NSCoder_objectZone(NSCoder *_self);

// method '-[NSCoder setObjectZone:]'
void _IM_NSCoder_setObjectZone_C(NSCoder *_self, struct _NSZone *zone);

// method '-[NSCoder systemVersion]'
unsigned int _IM_NSCoder_systemVersion(NSCoder *_self);

// method '-[NSCoder versionForClassName:]'
unsigned int _IM_NSCoder_versionForClassName_C(NSCoder *_self, NSString* className);

// method '-[NSComparisonPredicate comparisonPredicateModifier]'
int _IM_NSComparisonPredicate_comparisonPredicateModifier(NSComparisonPredicate *_self);

// method '-[NSComparisonPredicate customSelector]'
SEL _IM_NSComparisonPredicate_customSelector(NSComparisonPredicate *_self);

// method '-[NSComparisonPredicate initWithLeftExpression:rightExpression:customSelector:]'
NSComparisonPredicate *_IM_NSComparisonPredicate_initWithLeftExpression_CrightExpression_CcustomSelector_C(NSComparisonPredicate *_self, NSExpression* lhs, NSExpression* rhs, SEL selector);

// method '-[NSComparisonPredicate initWithLeftExpression:rightExpression:modifier:type:options:]'
NSComparisonPredicate *_IM_NSComparisonPredicate_initWithLeftExpression_CrightExpression_Cmodifier_Ctype_Coptions_C(NSComparisonPredicate *_self, NSExpression* lhs, NSExpression* rhs, int modifier, int type, unsigned int options);

// method '-[NSComparisonPredicate leftExpression]'
NSExpression* _IM_NSComparisonPredicate_leftExpression(NSComparisonPredicate *_self);

// method '-[NSComparisonPredicate options]'
unsigned int _IM_NSComparisonPredicate_options(NSComparisonPredicate *_self);

// method '-[NSComparisonPredicate predicateOperatorType]'
int _IM_NSComparisonPredicate_predicateOperatorType(NSComparisonPredicate *_self);

// method '+[NSComparisonPredicate predicateWithLeftExpression:rightExpression:customSelector:]'
NSPredicate* _CM_NSComparisonPredicate_predicateWithLeftExpression_CrightExpression_CcustomSelector_C(Class _class, NSExpression* lhs, NSExpression* rhs, SEL selector);

// method '+[NSComparisonPredicate predicateWithLeftExpression:rightExpression:modifier:type:options:]'
NSPredicate* _CM_NSComparisonPredicate_predicateWithLeftExpression_CrightExpression_Cmodifier_Ctype_Coptions_C(Class _class, NSExpression* lhs, NSExpression* rhs, int modifier, int type, unsigned int options);

// method '-[NSComparisonPredicate rightExpression]'
NSExpression* _IM_NSComparisonPredicate_rightExpression(NSComparisonPredicate *_self);

// method '+[NSCompoundPredicate andPredicateWithSubpredicates:]'
NSPredicate* _CM_NSCompoundPredicate_andPredicateWithSubpredicates_C(Class _class, NSArray* subpredicates);

// method '-[NSCompoundPredicate compoundPredicateType]'
int _IM_NSCompoundPredicate_compoundPredicateType(NSCompoundPredicate *_self);

// method '-[NSCompoundPredicate initWithType:subpredicates:]'
NSCompoundPredicate *_IM_NSCompoundPredicate_initWithType_Csubpredicates_C(NSCompoundPredicate *_self, int type, NSArray* subpredicates);

// method '+[NSCompoundPredicate notPredicateWithSubpredicate:]'
NSPredicate* _CM_NSCompoundPredicate_notPredicateWithSubpredicate_C(Class _class, NSPredicate* predicate);

// method '+[NSCompoundPredicate orPredicateWithSubpredicates:]'
NSPredicate* _CM_NSCompoundPredicate_orPredicateWithSubpredicates_C(Class _class, NSArray* subpredicates);

// method '-[NSCompoundPredicate subpredicates]'
NSArray* _IM_NSCompoundPredicate_subpredicates(NSCompoundPredicate *_self);

// method '-[NSConditionLock condition]'
int _IM_NSConditionLock_condition(NSConditionLock *_self);

// method '-[NSConditionLock initWithCondition:]'
NSConditionLock *_IM_NSConditionLock_initWithCondition_C(NSConditionLock *_self, int condition);

// method '-[NSConditionLock lockBeforeDate:]'
BOOL _IM_NSConditionLock_lockBeforeDate_C(NSConditionLock *_self, NSDate* limit);

// method '-[NSConditionLock lockWhenCondition:]'
void _IM_NSConditionLock_lockWhenCondition_C(NSConditionLock *_self, int condition);

// method '-[NSConditionLock lockWhenCondition:beforeDate:]'
BOOL _IM_NSConditionLock_lockWhenCondition_CbeforeDate_C(NSConditionLock *_self, int condition, NSDate* limit);

// method '-[NSConditionLock tryLock]'
BOOL _IM_NSConditionLock_tryLock(NSConditionLock *_self);

// method '-[NSConditionLock tryLockWhenCondition:]'
BOOL _IM_NSConditionLock_tryLockWhenCondition_C(NSConditionLock *_self, int condition);

// method '-[NSConditionLock unlockWithCondition:]'
void _IM_NSConditionLock_unlockWithCondition_C(NSConditionLock *_self, int condition);

// method '-[NSConnection addRequestMode:]'
void _IM_NSConnection_addRequestMode_C(NSConnection *_self, NSString* rmode);

// method '-[NSConnection addRunLoop:]'
void _IM_NSConnection_addRunLoop_C(NSConnection *_self, NSRunLoop* runloop);

// method '+[NSConnection allConnections]'
NSArray* _CM_NSConnection_allConnections(Class _class);

// method '+[NSConnection connectionWithReceivePort:sendPort:]'
NSConnection* _CM_NSConnection_connectionWithReceivePort_CsendPort_C(Class _class, NSPort* receivePort, NSPort* sendPort);

// method '+[NSConnection connectionWithRegisteredName:host:]'
NSConnection* _CM_NSConnection_connectionWithRegisteredName_Chost_C(Class _class, NSString* name, NSString* hostName);

// method '+[NSConnection connectionWithRegisteredName:host:usingNameServer:]'
NSConnection* _CM_NSConnection_connectionWithRegisteredName_Chost_CusingNameServer_C(Class _class, NSString* name, NSString* hostName, NSPortNameServer* server);

// method '+[NSConnection currentConversation]'
id _CM_NSConnection_currentConversation(Class _class);

// method '+[NSConnection defaultConnection]'
NSConnection* _CM_NSConnection_defaultConnection(Class _class);

// method '-[NSConnection delegate]'
id _IM_NSConnection_delegate(NSConnection *_self);

// method '-[NSConnection enableMultipleThreads]'
void _IM_NSConnection_enableMultipleThreads(NSConnection *_self);

// method '-[NSConnection independentConversationQueueing]'
BOOL _IM_NSConnection_independentConversationQueueing(NSConnection *_self);

// method '-[NSConnection initWithReceivePort:sendPort:]'
NSConnection *_IM_NSConnection_initWithReceivePort_CsendPort_C(NSConnection *_self, NSPort* receivePort, NSPort* sendPort);

// method '-[NSConnection invalidate]'
void _IM_NSConnection_invalidate(NSConnection *_self);

// method '-[NSConnection isValid]'
BOOL _IM_NSConnection_isValid(NSConnection *_self);

// method '-[NSConnection localObjects]'
NSArray* _IM_NSConnection_localObjects(NSConnection *_self);

// method '-[NSConnection multipleThreadsEnabled]'
BOOL _IM_NSConnection_multipleThreadsEnabled(NSConnection *_self);

// method '-[NSConnection receivePort]'
NSPort* _IM_NSConnection_receivePort(NSConnection *_self);

// method '-[NSConnection registerName:]'
BOOL _IM_NSConnection_registerName_C(NSConnection *_self, NSString* name);

// method '-[NSConnection registerName:withNameServer:]'
BOOL _IM_NSConnection_registerName_CwithNameServer_C(NSConnection *_self, NSString* name, NSPortNameServer* server);

// method '-[NSConnection remoteObjects]'
NSArray* _IM_NSConnection_remoteObjects(NSConnection *_self);

// method '-[NSConnection removeRequestMode:]'
void _IM_NSConnection_removeRequestMode_C(NSConnection *_self, NSString* rmode);

// method '-[NSConnection removeRunLoop:]'
void _IM_NSConnection_removeRunLoop_C(NSConnection *_self, NSRunLoop* runloop);

// method '-[NSConnection replyTimeout]'
double _IM_NSConnection_replyTimeout(NSConnection *_self);

// method '-[NSConnection requestModes]'
NSArray* _IM_NSConnection_requestModes(NSConnection *_self);

// method '-[NSConnection requestTimeout]'
double _IM_NSConnection_requestTimeout(NSConnection *_self);

// method '-[NSConnection rootObject]'
id _IM_NSConnection_rootObject(NSConnection *_self);

// method '-[NSConnection rootProxy]'
NSDistantObject* _IM_NSConnection_rootProxy(NSConnection *_self);

// method '+[NSConnection rootProxyForConnectionWithRegisteredName:host:]'
NSDistantObject* _CM_NSConnection_rootProxyForConnectionWithRegisteredName_Chost_C(Class _class, NSString* name, NSString* hostName);

// method '+[NSConnection rootProxyForConnectionWithRegisteredName:host:usingNameServer:]'
NSDistantObject* _CM_NSConnection_rootProxyForConnectionWithRegisteredName_Chost_CusingNameServer_C(Class _class, NSString* name, NSString* hostName, NSPortNameServer* server);

// method '-[NSConnection runInNewThread]'
void _IM_NSConnection_runInNewThread(NSConnection *_self);

// method '-[NSConnection sendPort]'
NSPort* _IM_NSConnection_sendPort(NSConnection *_self);

// method '-[NSConnection setDelegate:]'
void _IM_NSConnection_setDelegate_C(NSConnection *_self, id anObject);

// method '-[NSConnection setIndependentConversationQueueing:]'
void _IM_NSConnection_setIndependentConversationQueueing_C(NSConnection *_self, BOOL yorn);

// method '-[NSConnection setReplyTimeout:]'
void _IM_NSConnection_setReplyTimeout_C(NSConnection *_self, double ti);

// method '-[NSConnection setRequestTimeout:]'
void _IM_NSConnection_setRequestTimeout_C(NSConnection *_self, double ti);

// method '-[NSConnection setRootObject:]'
void _IM_NSConnection_setRootObject_C(NSConnection *_self, id anObject);

// method '-[NSConnection statistics]'
NSDictionary* _IM_NSConnection_statistics(NSConnection *_self);

// method '-[NSCountedSet addObject:]'
void _IM_NSCountedSet_addObject_C(NSCountedSet *_self, id object);

// method '-[NSCountedSet countForObject:]'
unsigned int _IM_NSCountedSet_countForObject_C(NSCountedSet *_self, id object);

// method '-[NSCountedSet initWithArray:]'
NSCountedSet *_IM_NSCountedSet_initWithArray_C(NSCountedSet *_self, NSArray* array);

// method '-[NSCountedSet initWithCapacity:]'
NSCountedSet *_IM_NSCountedSet_initWithCapacity_C(NSCountedSet *_self, unsigned int numItems);

// method '-[NSCountedSet initWithSet:]'
NSCountedSet *_IM_NSCountedSet_initWithSet_C(NSCountedSet *_self, NSSet* set);

// method '-[NSCountedSet objectEnumerator]'
NSEnumerator* _IM_NSCountedSet_objectEnumerator(NSCountedSet *_self);

// method '-[NSCountedSet removeObject:]'
void _IM_NSCountedSet_removeObject_C(NSCountedSet *_self, id object);

// method '-[NSCreateCommand createClassDescription]'
NSScriptClassDescription* _IM_NSCreateCommand_createClassDescription(NSCreateCommand *_self);

// method '-[NSCreateCommand resolvedKeyDictionary]'
NSDictionary* _IM_NSCreateCommand_resolvedKeyDictionary(NSCreateCommand *_self);

// method '-[NSData bytes]'
const void* _IM_NSData_bytes(NSData *_self);

// method '+[NSData data]'
id _CM_NSData_data(Class _class);

// method '+[NSData dataWithBytes:length:]'
id _CM_NSData_dataWithBytes_Clength_C(Class _class, const void* bytes, unsigned int length);

// method '+[NSData dataWithContentsOfFile:]'
id _CM_NSData_dataWithContentsOfFile_C(Class _class, NSString* path);

// method '+[NSData dataWithContentsOfFile:options:error:]'
id _CM_NSData_dataWithContentsOfFile_Coptions_Cerror_C(Class _class, NSString* path, unsigned int readOptionsMask, id *errorPtr);

// method '+[NSData dataWithContentsOfMappedFile:]'
id _CM_NSData_dataWithContentsOfMappedFile_C(Class _class, NSString* path);

// method '+[NSData dataWithContentsOfURL:]'
id _CM_NSData_dataWithContentsOfURL_C(Class _class, NSURL* url);

// method '+[NSData dataWithContentsOfURL:options:error:]'
id _CM_NSData_dataWithContentsOfURL_Coptions_Cerror_C(Class _class, NSURL* url, unsigned int readOptionsMask, id *errorPtr);

// method '+[NSData dataWithData:]'
id _CM_NSData_dataWithData_C(Class _class, NSData* data);

// method '-[NSData description]'
NSString* _IM_NSData_description(NSData *_self);

// method '-[NSData getBytes:length:]'
void _IM_NSData_getBytes_Clength_C(NSData *_self, void *buffer, unsigned int length);

// method '-[NSData initWithBytes:length:]'
NSData *_IM_NSData_initWithBytes_Clength_C(NSData *_self, const void* bytes, unsigned int length);

// method '-[NSData initWithContentsOfFile:]'
NSData *_IM_NSData_initWithContentsOfFile_C(NSData *_self, NSString* path);

// method '-[NSData initWithContentsOfFile:options:error:]'
NSData *_IM_NSData_initWithContentsOfFile_Coptions_Cerror_C(NSData *_self, NSString* path, unsigned int readOptionsMask, id *errorPtr);

// method '-[NSData initWithContentsOfMappedFile:]'
NSData *_IM_NSData_initWithContentsOfMappedFile_C(NSData *_self, NSString* path);

// method '-[NSData initWithContentsOfURL:]'
NSData *_IM_NSData_initWithContentsOfURL_C(NSData *_self, NSURL* url);

// method '-[NSData initWithContentsOfURL:options:error:]'
NSData *_IM_NSData_initWithContentsOfURL_Coptions_Cerror_C(NSData *_self, NSURL* url, unsigned int readOptionsMask, id *errorPtr);

// method '-[NSData initWithData:]'
NSData *_IM_NSData_initWithData_C(NSData *_self, NSData* data);

// method '-[NSData isEqualToData:]'
BOOL _IM_NSData_isEqualToData_C(NSData *_self, NSData* other);

// method '-[NSData length]'
unsigned int _IM_NSData_length(NSData *_self);

// method '-[NSData subdataWithRange:]'
NSData* _IM_NSData_subdataWithRange_C(NSData *_self, struct _NSRange range);

// method '-[NSData writeToFile:atomically:]'
BOOL _IM_NSData_writeToFile_Catomically_C(NSData *_self, NSString* path, BOOL useAuxiliaryFile);

// method '-[NSData writeToFile:options:error:]'
BOOL _IM_NSData_writeToFile_Coptions_Cerror_C(NSData *_self, NSString* path, unsigned int writeOptionsMask, id *errorPtr);

// method '-[NSData writeToURL:atomically:]'
BOOL _IM_NSData_writeToURL_Catomically_C(NSData *_self, NSURL* url, BOOL atomically);

// method '-[NSData writeToURL:options:error:]'
BOOL _IM_NSData_writeToURL_Coptions_Cerror_C(NSData *_self, NSURL* url, unsigned int writeOptionsMask, id *errorPtr);

// method '-[NSDate addTimeInterval:]'
id _IM_NSDate_addTimeInterval_C(NSDate *_self, double seconds);

// method '-[NSDate compare:]'
int _IM_NSDate_compare_C(NSDate *_self, NSDate* other);

// method '+[NSDate date]'
id _CM_NSDate_date(Class _class);

// method '-[NSDate dateWithCalendarFormat:timeZone:]'
NSCalendarDate* _IM_NSDate_dateWithCalendarFormat_CtimeZone_C(NSDate *_self, NSString* format, NSTimeZone* aTimeZone);

// method '+[NSDate dateWithNaturalLanguageString:]'
id _CM_NSDate_dateWithNaturalLanguageString_C(Class _class, NSString* string);

// method '+[NSDate dateWithNaturalLanguageString:locale:]'
id _CM_NSDate_dateWithNaturalLanguageString_Clocale_C(Class _class, NSString* string, NSDictionary* dict);

// method '+[NSDate dateWithString:]'
id _CM_NSDate_dateWithString_C(Class _class, NSString* aString);

// method '+[NSDate dateWithTimeIntervalSince1970:]'
id _CM_NSDate_dateWithTimeIntervalSince1970_C(Class _class, double secs);

// method '+[NSDate dateWithTimeIntervalSinceNow:]'
id _CM_NSDate_dateWithTimeIntervalSinceNow_C(Class _class, double secs);

// method '+[NSDate dateWithTimeIntervalSinceReferenceDate:]'
id _CM_NSDate_dateWithTimeIntervalSinceReferenceDate_C(Class _class, double secs);

// method '-[NSDate description]'
NSString* _IM_NSDate_description(NSDate *_self);

// method '-[NSDate descriptionWithCalendarFormat:timeZone:locale:]'
NSString* _IM_NSDate_descriptionWithCalendarFormat_CtimeZone_Clocale_C(NSDate *_self, NSString* format, NSTimeZone* aTimeZone, NSDictionary* locale);

// method '-[NSDate descriptionWithLocale:]'
NSString* _IM_NSDate_descriptionWithLocale_C(NSDate *_self, NSDictionary* locale);

// method '+[NSDate distantFuture]'
id _CM_NSDate_distantFuture(Class _class);

// method '+[NSDate distantPast]'
id _CM_NSDate_distantPast(Class _class);

// method '-[NSDate earlierDate:]'
NSDate* _IM_NSDate_earlierDate_C(NSDate *_self, NSDate* anotherDate);

// method '-[NSDate init]'
NSDate *_IM_NSDate_init(NSDate *_self);

// method '-[NSDate initWithString:]'
NSDate *_IM_NSDate_initWithString_C(NSDate *_self, NSString* description);

// method '-[NSDate initWithTimeInterval:sinceDate:]'
NSDate *_IM_NSDate_initWithTimeInterval_CsinceDate_C(NSDate *_self, double secsToBeAdded, NSDate* anotherDate);

// method '-[NSDate initWithTimeIntervalSinceNow:]'
NSDate *_IM_NSDate_initWithTimeIntervalSinceNow_C(NSDate *_self, double secsToBeAddedToNow);

// method '-[NSDate initWithTimeIntervalSinceReferenceDate:]'
NSDate *_IM_NSDate_initWithTimeIntervalSinceReferenceDate_C(NSDate *_self, double secsToBeAdded);

// method '-[NSDate isEqualToDate:]'
BOOL _IM_NSDate_isEqualToDate_C(NSDate *_self, NSDate* otherDate);

// method '-[NSDate laterDate:]'
NSDate* _IM_NSDate_laterDate_C(NSDate *_self, NSDate* anotherDate);

// method '-[NSDate timeIntervalSince1970]'
double _IM_NSDate_timeIntervalSince1970(NSDate *_self);

// method '-[NSDate timeIntervalSinceDate:]'
double _IM_NSDate_timeIntervalSinceDate_C(NSDate *_self, NSDate* anotherDate);

// method '-[NSDate timeIntervalSinceNow]'
double _IM_NSDate_timeIntervalSinceNow(NSDate *_self);

// method '+[NSDate timeIntervalSinceReferenceDate]'
double _CM_NSDate_timeIntervalSinceReferenceDate(Class _class);

// method '-[NSDate timeIntervalSinceReferenceDate]'
double _IM_NSDate_timeIntervalSinceReferenceDate(NSDate *_self);

// method '-[NSDateComponents day]'
int _IM_NSDateComponents_day(NSDateComponents *_self);

// method '-[NSDateComponents era]'
int _IM_NSDateComponents_era(NSDateComponents *_self);

// method '-[NSDateComponents hour]'
int _IM_NSDateComponents_hour(NSDateComponents *_self);

// method '-[NSDateComponents minute]'
int _IM_NSDateComponents_minute(NSDateComponents *_self);

// method '-[NSDateComponents month]'
int _IM_NSDateComponents_month(NSDateComponents *_self);

// method '-[NSDateComponents second]'
int _IM_NSDateComponents_second(NSDateComponents *_self);

// method '-[NSDateComponents setDay:]'
void _IM_NSDateComponents_setDay_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setEra:]'
void _IM_NSDateComponents_setEra_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setHour:]'
void _IM_NSDateComponents_setHour_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setMinute:]'
void _IM_NSDateComponents_setMinute_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setMonth:]'
void _IM_NSDateComponents_setMonth_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setSecond:]'
void _IM_NSDateComponents_setSecond_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setWeek:]'
void _IM_NSDateComponents_setWeek_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setWeekday:]'
void _IM_NSDateComponents_setWeekday_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setWeekdayOrdinal:]'
void _IM_NSDateComponents_setWeekdayOrdinal_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents setYear:]'
void _IM_NSDateComponents_setYear_C(NSDateComponents *_self, int v);

// method '-[NSDateComponents week]'
int _IM_NSDateComponents_week(NSDateComponents *_self);

// method '-[NSDateComponents weekday]'
int _IM_NSDateComponents_weekday(NSDateComponents *_self);

// method '-[NSDateComponents weekdayOrdinal]'
int _IM_NSDateComponents_weekdayOrdinal(NSDateComponents *_self);

// method '-[NSDateComponents year]'
int _IM_NSDateComponents_year(NSDateComponents *_self);

// method '-[NSDateFormatter AMSymbol]'
NSString* _IM_NSDateFormatter_AMSymbol(NSDateFormatter *_self);

// method '-[NSDateFormatter PMSymbol]'
NSString* _IM_NSDateFormatter_PMSymbol(NSDateFormatter *_self);

// method '-[NSDateFormatter allowsNaturalLanguage]'
BOOL _IM_NSDateFormatter_allowsNaturalLanguage(NSDateFormatter *_self);

// method '-[NSDateFormatter calendar]'
NSCalendar* _IM_NSDateFormatter_calendar(NSDateFormatter *_self);

// method '-[NSDateFormatter dateFormat]'
NSString* _IM_NSDateFormatter_dateFormat(NSDateFormatter *_self);

// method '-[NSDateFormatter dateFromString:]'
NSDate* _IM_NSDateFormatter_dateFromString_C(NSDateFormatter *_self, NSString* string);

// method '-[NSDateFormatter dateStyle]'
int _IM_NSDateFormatter_dateStyle(NSDateFormatter *_self);

// method '-[NSDateFormatter defaultDate]'
NSDate* _IM_NSDateFormatter_defaultDate(NSDateFormatter *_self);

// method '+[NSDateFormatter defaultFormatterBehavior]'
int _CM_NSDateFormatter_defaultFormatterBehavior(Class _class);

// method '-[NSDateFormatter eraSymbols]'
NSArray* _IM_NSDateFormatter_eraSymbols(NSDateFormatter *_self);

// method '-[NSDateFormatter formatterBehavior]'
int _IM_NSDateFormatter_formatterBehavior(NSDateFormatter *_self);

// method '-[NSDateFormatter generatesCalendarDates]'
BOOL _IM_NSDateFormatter_generatesCalendarDates(NSDateFormatter *_self);

// method '-[NSDateFormatter getObjectValue:forString:range:error:]'
BOOL _IM_NSDateFormatter_getObjectValue_CforString_Crange_Cerror_C(NSDateFormatter *_self, id *obj, NSString* string, struct _NSRange *rangep, id *error);

// method '-[NSDateFormatter init]'
NSDateFormatter *_IM_NSDateFormatter_init(NSDateFormatter *_self);

// method '-[NSDateFormatter initWithDateFormat:allowNaturalLanguage:]'
NSDateFormatter *_IM_NSDateFormatter_initWithDateFormat_CallowNaturalLanguage_C(NSDateFormatter *_self, NSString* format, BOOL flag);

// method '-[NSDateFormatter isLenient]'
BOOL _IM_NSDateFormatter_isLenient(NSDateFormatter *_self);

// method '-[NSDateFormatter locale]'
NSLocale* _IM_NSDateFormatter_locale(NSDateFormatter *_self);

// method '-[NSDateFormatter monthSymbols]'
NSArray* _IM_NSDateFormatter_monthSymbols(NSDateFormatter *_self);

// method '-[NSDateFormatter setAMSymbol:]'
void _IM_NSDateFormatter_setAMSymbol_C(NSDateFormatter *_self, NSString* string);

// method '-[NSDateFormatter setCalendar:]'
void _IM_NSDateFormatter_setCalendar_C(NSDateFormatter *_self, NSCalendar* calendar);

// method '-[NSDateFormatter setDateFormat:]'
void _IM_NSDateFormatter_setDateFormat_C(NSDateFormatter *_self, NSString* string);

// method '-[NSDateFormatter setDateStyle:]'
void _IM_NSDateFormatter_setDateStyle_C(NSDateFormatter *_self, int style);

// method '-[NSDateFormatter setDefaultDate:]'
void _IM_NSDateFormatter_setDefaultDate_C(NSDateFormatter *_self, NSDate* date);

// method '+[NSDateFormatter setDefaultFormatterBehavior:]'
void _CM_NSDateFormatter_setDefaultFormatterBehavior_C(Class _class, int behavior);

// method '-[NSDateFormatter setEraSymbols:]'
void _IM_NSDateFormatter_setEraSymbols_C(NSDateFormatter *_self, NSArray* array);

// method '-[NSDateFormatter setFormatterBehavior:]'
void _IM_NSDateFormatter_setFormatterBehavior_C(NSDateFormatter *_self, int behavior);

// method '-[NSDateFormatter setGeneratesCalendarDates:]'
void _IM_NSDateFormatter_setGeneratesCalendarDates_C(NSDateFormatter *_self, BOOL b);

// method '-[NSDateFormatter setLenient:]'
void _IM_NSDateFormatter_setLenient_C(NSDateFormatter *_self, BOOL b);

// method '-[NSDateFormatter setLocale:]'
void _IM_NSDateFormatter_setLocale_C(NSDateFormatter *_self, NSLocale* locale);

// method '-[NSDateFormatter setMonthSymbols:]'
void _IM_NSDateFormatter_setMonthSymbols_C(NSDateFormatter *_self, NSArray* array);

// method '-[NSDateFormatter setPMSymbol:]'
void _IM_NSDateFormatter_setPMSymbol_C(NSDateFormatter *_self, NSString* string);

// method '-[NSDateFormatter setShortMonthSymbols:]'
void _IM_NSDateFormatter_setShortMonthSymbols_C(NSDateFormatter *_self, NSArray* array);

// method '-[NSDateFormatter setShortWeekdaySymbols:]'
void _IM_NSDateFormatter_setShortWeekdaySymbols_C(NSDateFormatter *_self, NSArray* array);

// method '-[NSDateFormatter setTimeStyle:]'
void _IM_NSDateFormatter_setTimeStyle_C(NSDateFormatter *_self, int style);

// method '-[NSDateFormatter setTimeZone:]'
void _IM_NSDateFormatter_setTimeZone_C(NSDateFormatter *_self, NSTimeZone* tz);

// method '-[NSDateFormatter setTwoDigitStartDate:]'
void _IM_NSDateFormatter_setTwoDigitStartDate_C(NSDateFormatter *_self, NSDate* date);

// method '-[NSDateFormatter setWeekdaySymbols:]'
void _IM_NSDateFormatter_setWeekdaySymbols_C(NSDateFormatter *_self, NSArray* array);

// method '-[NSDateFormatter shortMonthSymbols]'
NSArray* _IM_NSDateFormatter_shortMonthSymbols(NSDateFormatter *_self);

// method '-[NSDateFormatter shortWeekdaySymbols]'
NSArray* _IM_NSDateFormatter_shortWeekdaySymbols(NSDateFormatter *_self);

// method '-[NSDateFormatter stringFromDate:]'
NSString* _IM_NSDateFormatter_stringFromDate_C(NSDateFormatter *_self, NSDate* date);

// method '-[NSDateFormatter timeStyle]'
int _IM_NSDateFormatter_timeStyle(NSDateFormatter *_self);

// method '-[NSDateFormatter timeZone]'
NSTimeZone* _IM_NSDateFormatter_timeZone(NSDateFormatter *_self);

// method '-[NSDateFormatter twoDigitStartDate]'
NSDate* _IM_NSDateFormatter_twoDigitStartDate(NSDateFormatter *_self);

// method '-[NSDateFormatter weekdaySymbols]'
NSArray* _IM_NSDateFormatter_weekdaySymbols(NSDateFormatter *_self);

// method '-[NSDecimalNumber compare:]'
int _IM_NSDecimalNumber_compare_C(NSDecimalNumber *_self, NSNumber* decimalNumber);

// method '-[NSDecimalNumber decimalNumberByAdding:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByAdding_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber);

// method '-[NSDecimalNumber decimalNumberByAdding:withBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByAdding_CwithBehavior_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber, id behavior);

// method '-[NSDecimalNumber decimalNumberByDividingBy:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByDividingBy_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber);

// method '-[NSDecimalNumber decimalNumberByDividingBy:withBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByDividingBy_CwithBehavior_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber, id behavior);

// method '-[NSDecimalNumber decimalNumberByMultiplyingBy:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByMultiplyingBy_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber);

// method '-[NSDecimalNumber decimalNumberByMultiplyingBy:withBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByMultiplyingBy_CwithBehavior_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber, id behavior);

// method '-[NSDecimalNumber decimalNumberByMultiplyingByPowerOf10:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByMultiplyingByPowerOf10_C(NSDecimalNumber *_self, short power);

// method '-[NSDecimalNumber decimalNumberByMultiplyingByPowerOf10:withBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByMultiplyingByPowerOf10_CwithBehavior_C(NSDecimalNumber *_self, short power, id behavior);

// method '-[NSDecimalNumber decimalNumberByRaisingToPower:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByRaisingToPower_C(NSDecimalNumber *_self, unsigned int power);

// method '-[NSDecimalNumber decimalNumberByRaisingToPower:withBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByRaisingToPower_CwithBehavior_C(NSDecimalNumber *_self, unsigned int power, id behavior);

// method '-[NSDecimalNumber decimalNumberByRoundingAccordingToBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberByRoundingAccordingToBehavior_C(NSDecimalNumber *_self, id behavior);

// method '-[NSDecimalNumber decimalNumberBySubtracting:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberBySubtracting_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber);

// method '-[NSDecimalNumber decimalNumberBySubtracting:withBehavior:]'
NSDecimalNumber* _IM_NSDecimalNumber_decimalNumberBySubtracting_CwithBehavior_C(NSDecimalNumber *_self, NSDecimalNumber* decimalNumber, id behavior);

// method '+[NSDecimalNumber decimalNumberWithMantissa:exponent:isNegative:]'
NSDecimalNumber* _CM_NSDecimalNumber_decimalNumberWithMantissa_Cexponent_CisNegative_C(Class _class, unsigned long long mantissa, short exponent, BOOL flag);

// method '+[NSDecimalNumber decimalNumberWithString:]'
NSDecimalNumber* _CM_NSDecimalNumber_decimalNumberWithString_C(Class _class, NSString* numberValue);

// method '+[NSDecimalNumber decimalNumberWithString:locale:]'
NSDecimalNumber* _CM_NSDecimalNumber_decimalNumberWithString_Clocale_C(Class _class, NSString* numberValue, NSDictionary* locale);

// method '+[NSDecimalNumber defaultBehavior]'
id _CM_NSDecimalNumber_defaultBehavior(Class _class);

// method '-[NSDecimalNumber descriptionWithLocale:]'
NSString* _IM_NSDecimalNumber_descriptionWithLocale_C(NSDecimalNumber *_self, NSDictionary* locale);

// method '-[NSDecimalNumber doubleValue]'
double _IM_NSDecimalNumber_doubleValue(NSDecimalNumber *_self);

// method '-[NSDecimalNumber initWithMantissa:exponent:isNegative:]'
NSDecimalNumber *_IM_NSDecimalNumber_initWithMantissa_Cexponent_CisNegative_C(NSDecimalNumber *_self, unsigned long long mantissa, short exponent, BOOL flag);

// method '-[NSDecimalNumber initWithString:]'
NSDecimalNumber *_IM_NSDecimalNumber_initWithString_C(NSDecimalNumber *_self, NSString* numberValue);

// method '-[NSDecimalNumber initWithString:locale:]'
NSDecimalNumber *_IM_NSDecimalNumber_initWithString_Clocale_C(NSDecimalNumber *_self, NSString* numberValue, NSDictionary* locale);

// method '+[NSDecimalNumber maximumDecimalNumber]'
NSDecimalNumber* _CM_NSDecimalNumber_maximumDecimalNumber(Class _class);

// method '+[NSDecimalNumber minimumDecimalNumber]'
NSDecimalNumber* _CM_NSDecimalNumber_minimumDecimalNumber(Class _class);

// method '+[NSDecimalNumber notANumber]'
NSDecimalNumber* _CM_NSDecimalNumber_notANumber(Class _class);

// method '-[NSDecimalNumber objCType]'
const char* _IM_NSDecimalNumber_objCType(NSDecimalNumber *_self);

// method '+[NSDecimalNumber one]'
NSDecimalNumber* _CM_NSDecimalNumber_one(Class _class);

// method '+[NSDecimalNumber setDefaultBehavior:]'
void _CM_NSDecimalNumber_setDefaultBehavior_C(Class _class, id behavior);

// method '+[NSDecimalNumber zero]'
NSDecimalNumber* _CM_NSDecimalNumber_zero(Class _class);

// method '+[NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:]'
id _CM_NSDecimalNumberHandler_decimalNumberHandlerWithRoundingMode_Cscale_CraiseOnExactness_CraiseOnOverflow_CraiseOnUnderflow_CraiseOnDivideByZero_C(Class _class, int roundingMode, short scale, BOOL exact, BOOL overflow, BOOL underflow, BOOL divideByZero);

// method '+[NSDecimalNumberHandler defaultDecimalNumberHandler]'
id _CM_NSDecimalNumberHandler_defaultDecimalNumberHandler(Class _class);

// method '-[NSDecimalNumberHandler initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:]'
NSDecimalNumberHandler *_IM_NSDecimalNumberHandler_initWithRoundingMode_Cscale_CraiseOnExactness_CraiseOnOverflow_CraiseOnUnderflow_CraiseOnDivideByZero_C(NSDecimalNumberHandler *_self, int roundingMode, short scale, BOOL exact, BOOL overflow, BOOL underflow, BOOL divideByZero);

// method '-[NSDeleteCommand keySpecifier]'
NSScriptObjectSpecifier* _IM_NSDeleteCommand_keySpecifier(NSDeleteCommand *_self);

// method '-[NSDeleteCommand setReceiversSpecifier:]'
void _IM_NSDeleteCommand_setReceiversSpecifier_C(NSDeleteCommand *_self, NSScriptObjectSpecifier* receiversRef);

// method '-[NSDictionary allKeys]'
NSArray* _IM_NSDictionary_allKeys(NSDictionary *_self);

// method '-[NSDictionary allKeysForObject:]'
NSArray* _IM_NSDictionary_allKeysForObject_C(NSDictionary *_self, id anObject);

// method '-[NSDictionary allValues]'
NSArray* _IM_NSDictionary_allValues(NSDictionary *_self);

// method '-[NSDictionary count]'
unsigned int _IM_NSDictionary_count(NSDictionary *_self);

// method '-[NSDictionary description]'
NSString* _IM_NSDictionary_description(NSDictionary *_self);

// method '-[NSDictionary descriptionInStringsFileFormat]'
NSString* _IM_NSDictionary_descriptionInStringsFileFormat(NSDictionary *_self);

// method '-[NSDictionary descriptionWithLocale:]'
NSString* _IM_NSDictionary_descriptionWithLocale_C(NSDictionary *_self, NSDictionary* locale);

// method '-[NSDictionary descriptionWithLocale:indent:]'
NSString* _IM_NSDictionary_descriptionWithLocale_Cindent_C(NSDictionary *_self, NSDictionary* locale, unsigned int level);

// method '+[NSDictionary dictionary]'
id _CM_NSDictionary_dictionary(Class _class);

// method '+[NSDictionary dictionaryWithContentsOfFile:]'
id _CM_NSDictionary_dictionaryWithContentsOfFile_C(Class _class, NSString* path);

// method '+[NSDictionary dictionaryWithContentsOfURL:]'
id _CM_NSDictionary_dictionaryWithContentsOfURL_C(Class _class, NSURL* url);

// method '+[NSDictionary dictionaryWithDictionary:]'
id _CM_NSDictionary_dictionaryWithDictionary_C(Class _class, NSDictionary* dict);

// method '+[NSDictionary dictionaryWithObject:forKey:]'
id _CM_NSDictionary_dictionaryWithObject_CforKey_C(Class _class, id object, id key);

// method '+[NSDictionary dictionaryWithObjects:forKeys:]'
id _CM_NSDictionary_dictionaryWithObjects_CforKeys_C(Class _class, NSArray* objects, NSArray* keys);

// method '+[NSDictionary dictionaryWithObjects:forKeys:count:]'
id _CM_NSDictionary_dictionaryWithObjects_CforKeys_Ccount_C(Class _class, id *objects, id *keys, unsigned int count);

// method '-[NSDictionary fileCreationDate]'
NSDate* _IM_NSDictionary_fileCreationDate(NSDictionary *_self);

// method '-[NSDictionary fileExtensionHidden]'
BOOL _IM_NSDictionary_fileExtensionHidden(NSDictionary *_self);

// method '-[NSDictionary fileGroupOwnerAccountID]'
NSNumber* _IM_NSDictionary_fileGroupOwnerAccountID(NSDictionary *_self);

// method '-[NSDictionary fileGroupOwnerAccountName]'
NSString* _IM_NSDictionary_fileGroupOwnerAccountName(NSDictionary *_self);

// method '-[NSDictionary fileHFSCreatorCode]'
unsigned long _IM_NSDictionary_fileHFSCreatorCode(NSDictionary *_self);

// method '-[NSDictionary fileHFSTypeCode]'
unsigned long _IM_NSDictionary_fileHFSTypeCode(NSDictionary *_self);

// method '-[NSDictionary fileIsAppendOnly]'
BOOL _IM_NSDictionary_fileIsAppendOnly(NSDictionary *_self);

// method '-[NSDictionary fileIsImmutable]'
BOOL _IM_NSDictionary_fileIsImmutable(NSDictionary *_self);

// method '-[NSDictionary fileModificationDate]'
NSDate* _IM_NSDictionary_fileModificationDate(NSDictionary *_self);

// method '-[NSDictionary fileOwnerAccountID]'
NSNumber* _IM_NSDictionary_fileOwnerAccountID(NSDictionary *_self);

// method '-[NSDictionary fileOwnerAccountName]'
NSString* _IM_NSDictionary_fileOwnerAccountName(NSDictionary *_self);

// method '-[NSDictionary filePosixPermissions]'
unsigned long _IM_NSDictionary_filePosixPermissions(NSDictionary *_self);

// method '-[NSDictionary fileSize]'
unsigned long long _IM_NSDictionary_fileSize(NSDictionary *_self);

// method '-[NSDictionary fileSystemFileNumber]'
unsigned long _IM_NSDictionary_fileSystemFileNumber(NSDictionary *_self);

// method '-[NSDictionary fileSystemNumber]'
unsigned long _IM_NSDictionary_fileSystemNumber(NSDictionary *_self);

// method '-[NSDictionary fileType]'
NSString* _IM_NSDictionary_fileType(NSDictionary *_self);

// method '-[NSDictionary initWithContentsOfFile:]'
NSDictionary *_IM_NSDictionary_initWithContentsOfFile_C(NSDictionary *_self, NSString* path);

// method '-[NSDictionary initWithContentsOfURL:]'
NSDictionary *_IM_NSDictionary_initWithContentsOfURL_C(NSDictionary *_self, NSURL* url);

// method '-[NSDictionary initWithDictionary:]'
NSDictionary *_IM_NSDictionary_initWithDictionary_C(NSDictionary *_self, NSDictionary* otherDictionary);

// method '-[NSDictionary initWithDictionary:copyItems:]'
NSDictionary *_IM_NSDictionary_initWithDictionary_CcopyItems_C(NSDictionary *_self, NSDictionary* otherDictionary, BOOL aBool);

// method '-[NSDictionary initWithObjects:forKeys:]'
NSDictionary *_IM_NSDictionary_initWithObjects_CforKeys_C(NSDictionary *_self, NSArray* objects, NSArray* keys);

// method '-[NSDictionary initWithObjects:forKeys:count:]'
NSDictionary *_IM_NSDictionary_initWithObjects_CforKeys_Ccount_C(NSDictionary *_self, id *objects, id *keys, unsigned int count);

// method '-[NSDictionary isEqualToDictionary:]'
BOOL _IM_NSDictionary_isEqualToDictionary_C(NSDictionary *_self, NSDictionary* otherDictionary);

// method '-[NSDictionary keyEnumerator]'
NSEnumerator* _IM_NSDictionary_keyEnumerator(NSDictionary *_self);

// method '-[NSDictionary keysSortedByValueUsingSelector:]'
NSArray* _IM_NSDictionary_keysSortedByValueUsingSelector_C(NSDictionary *_self, SEL comparator);

// method '-[NSDictionary objectEnumerator]'
NSEnumerator* _IM_NSDictionary_objectEnumerator(NSDictionary *_self);

// method '-[NSDictionary objectForKey:]'
id _IM_NSDictionary_objectForKey_C(NSDictionary *_self, id aKey);

// method '-[NSDictionary objectsForKeys:notFoundMarker:]'
NSArray* _IM_NSDictionary_objectsForKeys_CnotFoundMarker_C(NSDictionary *_self, NSArray* keys, id marker);

// method '-[NSDictionary valueForKey:]'
id _IM_NSDictionary_valueForKey_C(NSDictionary *_self, NSString* key);

// method '-[NSDictionary writeToFile:atomically:]'
BOOL _IM_NSDictionary_writeToFile_Catomically_C(NSDictionary *_self, NSString* path, BOOL useAuxiliaryFile);

// method '-[NSDictionary writeToURL:atomically:]'
BOOL _IM_NSDictionary_writeToURL_Catomically_C(NSDictionary *_self, NSURL* url, BOOL atomically);

// method '-[NSDirectoryEnumerator directoryAttributes]'
NSDictionary* _IM_NSDirectoryEnumerator_directoryAttributes(NSDirectoryEnumerator *_self);

// method '-[NSDirectoryEnumerator fileAttributes]'
NSDictionary* _IM_NSDirectoryEnumerator_fileAttributes(NSDirectoryEnumerator *_self);

// method '-[NSDirectoryEnumerator skipDescendents]'
void _IM_NSDirectoryEnumerator_skipDescendents(NSDirectoryEnumerator *_self);

// method '-[NSDistantObject connectionForProxy]'
NSConnection* _IM_NSDistantObject_connectionForProxy(NSDistantObject *_self);

// method '-[NSDistantObject initWithLocal:connection:]'
NSDistantObject *_IM_NSDistantObject_initWithLocal_Cconnection_C(NSDistantObject *_self, id target, NSConnection* connection);

// method '-[NSDistantObject initWithTarget:connection:]'
NSDistantObject *_IM_NSDistantObject_initWithTarget_Cconnection_C(NSDistantObject *_self, id target, NSConnection* connection);

// method '+[NSDistantObject proxyWithLocal:connection:]'
NSDistantObject* _CM_NSDistantObject_proxyWithLocal_Cconnection_C(Class _class, id target, NSConnection* connection);

// method '+[NSDistantObject proxyWithTarget:connection:]'
NSDistantObject* _CM_NSDistantObject_proxyWithTarget_Cconnection_C(Class _class, id target, NSConnection* connection);

// method '-[NSDistantObject setProtocolForProxy:]'
void _IM_NSDistantObject_setProtocolForProxy_C(NSDistantObject *_self, id proto);

// method '-[NSDistantObjectRequest connection]'
NSConnection* _IM_NSDistantObjectRequest_connection(NSDistantObjectRequest *_self);

// method '-[NSDistantObjectRequest conversation]'
id _IM_NSDistantObjectRequest_conversation(NSDistantObjectRequest *_self);

// method '-[NSDistantObjectRequest invocation]'
NSInvocation* _IM_NSDistantObjectRequest_invocation(NSDistantObjectRequest *_self);

// method '-[NSDistantObjectRequest replyWithException:]'
void _IM_NSDistantObjectRequest_replyWithException_C(NSDistantObjectRequest *_self, NSException* exception);

// method '-[NSDistributedLock breakLock]'
void _IM_NSDistributedLock_breakLock(NSDistributedLock *_self);

// method '-[NSDistributedLock initWithPath:]'
NSDistributedLock *_IM_NSDistributedLock_initWithPath_C(NSDistributedLock *_self, NSString* path);

// method '-[NSDistributedLock lockDate]'
NSDate* _IM_NSDistributedLock_lockDate(NSDistributedLock *_self);

// method '+[NSDistributedLock lockWithPath:]'
NSDistributedLock* _CM_NSDistributedLock_lockWithPath_C(Class _class, NSString* path);

// method '-[NSDistributedLock tryLock]'
BOOL _IM_NSDistributedLock_tryLock(NSDistributedLock *_self);

// method '-[NSDistributedLock unlock]'
void _IM_NSDistributedLock_unlock(NSDistributedLock *_self);

// method '-[NSDistributedNotificationCenter addObserver:selector:name:object:]'
void _IM_NSDistributedNotificationCenter_addObserver_Cselector_Cname_Cobject_C(NSDistributedNotificationCenter *_self, id observer, SEL aSelector, NSString* aName, NSString* anObject);

// method '-[NSDistributedNotificationCenter addObserver:selector:name:object:suspensionBehavior:]'
void _IM_NSDistributedNotificationCenter_addObserver_Cselector_Cname_Cobject_CsuspensionBehavior_C(NSDistributedNotificationCenter *_self, id observer, SEL selector, NSString* name, NSString* object, int suspensionBehavior);

// method '+[NSDistributedNotificationCenter defaultCenter]'
id _CM_NSDistributedNotificationCenter_defaultCenter(Class _class);

// method '+[NSDistributedNotificationCenter notificationCenterForType:]'
NSDistributedNotificationCenter* _CM_NSDistributedNotificationCenter_notificationCenterForType_C(Class _class, NSString* notificationCenterType);

// method '-[NSDistributedNotificationCenter postNotificationName:object:]'
void _IM_NSDistributedNotificationCenter_postNotificationName_Cobject_C(NSDistributedNotificationCenter *_self, NSString* aName, NSString* anObject);

// method '-[NSDistributedNotificationCenter postNotificationName:object:userInfo:]'
void _IM_NSDistributedNotificationCenter_postNotificationName_Cobject_CuserInfo_C(NSDistributedNotificationCenter *_self, NSString* aName, NSString* anObject, NSDictionary* aUserInfo);

// method '-[NSDistributedNotificationCenter postNotificationName:object:userInfo:deliverImmediately:]'
void _IM_NSDistributedNotificationCenter_postNotificationName_Cobject_CuserInfo_CdeliverImmediately_C(NSDistributedNotificationCenter *_self, NSString* name, NSString* object, NSDictionary* userInfo, BOOL deliverImmediately);

// method '-[NSDistributedNotificationCenter postNotificationName:object:userInfo:options:]'
void _IM_NSDistributedNotificationCenter_postNotificationName_Cobject_CuserInfo_Coptions_C(NSDistributedNotificationCenter *_self, NSString* name, NSString* object, NSDictionary* userInfo, unsigned int options);

// method '-[NSDistributedNotificationCenter removeObserver:name:object:]'
void _IM_NSDistributedNotificationCenter_removeObserver_Cname_Cobject_C(NSDistributedNotificationCenter *_self, id observer, NSString* aName, NSString* anObject);

// method '-[NSDistributedNotificationCenter setSuspended:]'
void _IM_NSDistributedNotificationCenter_setSuspended_C(NSDistributedNotificationCenter *_self, BOOL suspended);

// method '-[NSDistributedNotificationCenter suspended]'
BOOL _IM_NSDistributedNotificationCenter_suspended(NSDistributedNotificationCenter *_self);

// method '-[NSEnumerator allObjects]'
NSArray* _IM_NSEnumerator_allObjects(NSEnumerator *_self);

// method '-[NSEnumerator nextObject]'
id _IM_NSEnumerator_nextObject(NSEnumerator *_self);

// method '-[NSError code]'
int _IM_NSError_code(NSError *_self);

// method '-[NSError domain]'
NSString* _IM_NSError_domain(NSError *_self);

// method '+[NSError errorWithDomain:code:userInfo:]'
id _CM_NSError_errorWithDomain_Ccode_CuserInfo_C(Class _class, NSString* domain, int code, NSDictionary* dict);

// method '-[NSError initWithDomain:code:userInfo:]'
NSError *_IM_NSError_initWithDomain_Ccode_CuserInfo_C(NSError *_self, NSString* domain, int code, NSDictionary* dict);

// method '-[NSError localizedDescription]'
NSString* _IM_NSError_localizedDescription(NSError *_self);

// method '-[NSError localizedFailureReason]'
NSString* _IM_NSError_localizedFailureReason(NSError *_self);

// method '-[NSError localizedRecoveryOptions]'
NSArray* _IM_NSError_localizedRecoveryOptions(NSError *_self);

// method '-[NSError localizedRecoverySuggestion]'
NSString* _IM_NSError_localizedRecoverySuggestion(NSError *_self);

// method '-[NSError recoveryAttempter]'
id _IM_NSError_recoveryAttempter(NSError *_self);

// method '-[NSError userInfo]'
NSDictionary* _IM_NSError_userInfo(NSError *_self);

// method '+[NSException exceptionWithName:reason:userInfo:]'
NSException* _CM_NSException_exceptionWithName_Creason_CuserInfo_C(Class _class, NSString* name, NSString* reason, NSDictionary* userInfo);

// method '-[NSException initWithName:reason:userInfo:]'
NSException *_IM_NSException_initWithName_Creason_CuserInfo_C(NSException *_self, NSString* aName, NSString* aReason, NSDictionary* aUserInfo);

// method '-[NSException name]'
NSString* _IM_NSException_name(NSException *_self);

// method '-[NSException raise]'
void _IM_NSException_raise(NSException *_self);

// method '-[NSException reason]'
NSString* _IM_NSException_reason(NSException *_self);

// method '-[NSException userInfo]'
NSDictionary* _IM_NSException_userInfo(NSException *_self);

// method '-[NSExpression arguments]'
NSArray* _IM_NSExpression_arguments(NSExpression *_self);

// method '-[NSExpression constantValue]'
id _IM_NSExpression_constantValue(NSExpression *_self);

// method '+[NSExpression expressionForConstantValue:]'
NSExpression* _CM_NSExpression_expressionForConstantValue_C(Class _class, id obj);

// method '+[NSExpression expressionForEvaluatedObject]'
NSExpression* _CM_NSExpression_expressionForEvaluatedObject(Class _class);

// method '+[NSExpression expressionForFunction:arguments:]'
NSExpression* _CM_NSExpression_expressionForFunction_Carguments_C(Class _class, NSString* name, NSArray* parameters);

// method '+[NSExpression expressionForKeyPath:]'
NSExpression* _CM_NSExpression_expressionForKeyPath_C(Class _class, NSString* keyPath);

// method '+[NSExpression expressionForVariable:]'
NSExpression* _CM_NSExpression_expressionForVariable_C(Class _class, NSString* string);

// method '-[NSExpression expressionType]'
int _IM_NSExpression_expressionType(NSExpression *_self);

// method '-[NSExpression expressionValueWithObject:context:]'
id _IM_NSExpression_expressionValueWithObject_Ccontext_C(NSExpression *_self, id object, NSMutableDictionary* context);

// method '-[NSExpression function]'
NSString* _IM_NSExpression_function(NSExpression *_self);

// method '-[NSExpression initWithExpressionType:]'
NSExpression *_IM_NSExpression_initWithExpressionType_C(NSExpression *_self, int type);

// method '-[NSExpression keyPath]'
NSString* _IM_NSExpression_keyPath(NSExpression *_self);

// method '-[NSExpression operand]'
NSExpression* _IM_NSExpression_operand(NSExpression *_self);

// method '-[NSExpression variable]'
NSString* _IM_NSExpression_variable(NSExpression *_self);

// method '-[NSFileHandle acceptConnectionInBackgroundAndNotify]'
void _IM_NSFileHandle_acceptConnectionInBackgroundAndNotify(NSFileHandle *_self);

// method '-[NSFileHandle acceptConnectionInBackgroundAndNotifyForModes:]'
void _IM_NSFileHandle_acceptConnectionInBackgroundAndNotifyForModes_C(NSFileHandle *_self, NSArray* modes);

// method '-[NSFileHandle availableData]'
NSData* _IM_NSFileHandle_availableData(NSFileHandle *_self);

// method '-[NSFileHandle closeFile]'
void _IM_NSFileHandle_closeFile(NSFileHandle *_self);

// method '-[NSFileHandle fileDescriptor]'
int _IM_NSFileHandle_fileDescriptor(NSFileHandle *_self);

// method '+[NSFileHandle fileHandleForReadingAtPath:]'
id _CM_NSFileHandle_fileHandleForReadingAtPath_C(Class _class, NSString* path);

// method '+[NSFileHandle fileHandleForUpdatingAtPath:]'
id _CM_NSFileHandle_fileHandleForUpdatingAtPath_C(Class _class, NSString* path);

// method '+[NSFileHandle fileHandleForWritingAtPath:]'
id _CM_NSFileHandle_fileHandleForWritingAtPath_C(Class _class, NSString* path);

// method '+[NSFileHandle fileHandleWithNullDevice]'
id _CM_NSFileHandle_fileHandleWithNullDevice(Class _class);

// method '+[NSFileHandle fileHandleWithStandardError]'
id _CM_NSFileHandle_fileHandleWithStandardError(Class _class);

// method '+[NSFileHandle fileHandleWithStandardInput]'
id _CM_NSFileHandle_fileHandleWithStandardInput(Class _class);

// method '+[NSFileHandle fileHandleWithStandardOutput]'
id _CM_NSFileHandle_fileHandleWithStandardOutput(Class _class);

// method '-[NSFileHandle initWithFileDescriptor:]'
NSFileHandle *_IM_NSFileHandle_initWithFileDescriptor_C(NSFileHandle *_self, int fd);

// method '-[NSFileHandle initWithFileDescriptor:closeOnDealloc:]'
NSFileHandle *_IM_NSFileHandle_initWithFileDescriptor_CcloseOnDealloc_C(NSFileHandle *_self, int fd, BOOL closeopt);

// method '-[NSFileHandle offsetInFile]'
unsigned long long _IM_NSFileHandle_offsetInFile(NSFileHandle *_self);

// method '-[NSFileHandle readDataOfLength:]'
NSData* _IM_NSFileHandle_readDataOfLength_C(NSFileHandle *_self, unsigned int length);

// method '-[NSFileHandle readDataToEndOfFile]'
NSData* _IM_NSFileHandle_readDataToEndOfFile(NSFileHandle *_self);

// method '-[NSFileHandle readInBackgroundAndNotify]'
void _IM_NSFileHandle_readInBackgroundAndNotify(NSFileHandle *_self);

// method '-[NSFileHandle readInBackgroundAndNotifyForModes:]'
void _IM_NSFileHandle_readInBackgroundAndNotifyForModes_C(NSFileHandle *_self, NSArray* modes);

// method '-[NSFileHandle readToEndOfFileInBackgroundAndNotify]'
void _IM_NSFileHandle_readToEndOfFileInBackgroundAndNotify(NSFileHandle *_self);

// method '-[NSFileHandle readToEndOfFileInBackgroundAndNotifyForModes:]'
void _IM_NSFileHandle_readToEndOfFileInBackgroundAndNotifyForModes_C(NSFileHandle *_self, NSArray* modes);

// method '-[NSFileHandle seekToEndOfFile]'
unsigned long long _IM_NSFileHandle_seekToEndOfFile(NSFileHandle *_self);

// method '-[NSFileHandle seekToFileOffset:]'
void _IM_NSFileHandle_seekToFileOffset_C(NSFileHandle *_self, unsigned long long offset);

// method '-[NSFileHandle synchronizeFile]'
void _IM_NSFileHandle_synchronizeFile(NSFileHandle *_self);

// method '-[NSFileHandle truncateFileAtOffset:]'
void _IM_NSFileHandle_truncateFileAtOffset_C(NSFileHandle *_self, unsigned long long offset);

// method '-[NSFileHandle waitForDataInBackgroundAndNotify]'
void _IM_NSFileHandle_waitForDataInBackgroundAndNotify(NSFileHandle *_self);

// method '-[NSFileHandle waitForDataInBackgroundAndNotifyForModes:]'
void _IM_NSFileHandle_waitForDataInBackgroundAndNotifyForModes_C(NSFileHandle *_self, NSArray* modes);

// method '-[NSFileHandle writeData:]'
void _IM_NSFileHandle_writeData_C(NSFileHandle *_self, NSData* data);

// method '-[NSFileManager changeCurrentDirectoryPath:]'
BOOL _IM_NSFileManager_changeCurrentDirectoryPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager changeFileAttributes:atPath:]'
BOOL _IM_NSFileManager_changeFileAttributes_CatPath_C(NSFileManager *_self, NSDictionary* attributes, NSString* path);

// method '-[NSFileManager componentsToDisplayForPath:]'
NSArray* _IM_NSFileManager_componentsToDisplayForPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager contentsAtPath:]'
NSData* _IM_NSFileManager_contentsAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager contentsEqualAtPath:andPath:]'
BOOL _IM_NSFileManager_contentsEqualAtPath_CandPath_C(NSFileManager *_self, NSString* path1, NSString* path2);

// method '-[NSFileManager copyPath:toPath:handler:]'
BOOL _IM_NSFileManager_copyPath_CtoPath_Chandler_C(NSFileManager *_self, NSString* src, NSString* dest, id handler);

// method '-[NSFileManager createDirectoryAtPath:attributes:]'
BOOL _IM_NSFileManager_createDirectoryAtPath_Cattributes_C(NSFileManager *_self, NSString* path, NSDictionary* attributes);

// method '-[NSFileManager createFileAtPath:contents:attributes:]'
BOOL _IM_NSFileManager_createFileAtPath_Ccontents_Cattributes_C(NSFileManager *_self, NSString* path, NSData* data, NSDictionary* attr);

// method '-[NSFileManager createSymbolicLinkAtPath:pathContent:]'
BOOL _IM_NSFileManager_createSymbolicLinkAtPath_CpathContent_C(NSFileManager *_self, NSString* path, NSString* otherpath);

// method '-[NSFileManager currentDirectoryPath]'
NSString* _IM_NSFileManager_currentDirectoryPath(NSFileManager *_self);

// method '+[NSFileManager defaultManager]'
NSFileManager* _CM_NSFileManager_defaultManager(Class _class);

// method '-[NSFileManager directoryContentsAtPath:]'
NSArray* _IM_NSFileManager_directoryContentsAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager displayNameAtPath:]'
NSString* _IM_NSFileManager_displayNameAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager enumeratorAtPath:]'
NSDirectoryEnumerator* _IM_NSFileManager_enumeratorAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager fileAttributesAtPath:traverseLink:]'
NSDictionary* _IM_NSFileManager_fileAttributesAtPath_CtraverseLink_C(NSFileManager *_self, NSString* path, BOOL yorn);

// method '-[NSFileManager fileExistsAtPath:]'
BOOL _IM_NSFileManager_fileExistsAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager fileExistsAtPath:isDirectory:]'
BOOL _IM_NSFileManager_fileExistsAtPath_CisDirectory_C(NSFileManager *_self, NSString* path, BOOL* isDirectory);

// method '-[NSFileManager fileSystemAttributesAtPath:]'
NSDictionary* _IM_NSFileManager_fileSystemAttributesAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager fileSystemRepresentationWithPath:]'
const char* _IM_NSFileManager_fileSystemRepresentationWithPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager isDeletableFileAtPath:]'
BOOL _IM_NSFileManager_isDeletableFileAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager isExecutableFileAtPath:]'
BOOL _IM_NSFileManager_isExecutableFileAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager isReadableFileAtPath:]'
BOOL _IM_NSFileManager_isReadableFileAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager isWritableFileAtPath:]'
BOOL _IM_NSFileManager_isWritableFileAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager linkPath:toPath:handler:]'
BOOL _IM_NSFileManager_linkPath_CtoPath_Chandler_C(NSFileManager *_self, NSString* src, NSString* dest, id handler);

// method '-[NSFileManager movePath:toPath:handler:]'
BOOL _IM_NSFileManager_movePath_CtoPath_Chandler_C(NSFileManager *_self, NSString* src, NSString* dest, id handler);

// method '-[NSFileManager pathContentOfSymbolicLinkAtPath:]'
NSString* _IM_NSFileManager_pathContentOfSymbolicLinkAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFileManager removeFileAtPath:handler:]'
BOOL _IM_NSFileManager_removeFileAtPath_Chandler_C(NSFileManager *_self, NSString* path, id handler);

// method '-[NSFileManager stringWithFileSystemRepresentation:length:]'
NSString* _IM_NSFileManager_stringWithFileSystemRepresentation_Clength_C(NSFileManager *_self, const char* str, unsigned int len);

// method '-[NSFileManager subpathsAtPath:]'
NSArray* _IM_NSFileManager_subpathsAtPath_C(NSFileManager *_self, NSString* path);

// method '-[NSFormatter attributedStringForObjectValue:withDefaultAttributes:]'
NSAttributedString* _IM_NSFormatter_attributedStringForObjectValue_CwithDefaultAttributes_C(NSFormatter *_self, id obj, NSDictionary* attrs);

// method '-[NSFormatter editingStringForObjectValue:]'
NSString* _IM_NSFormatter_editingStringForObjectValue_C(NSFormatter *_self, id obj);

// method '-[NSFormatter getObjectValue:forString:errorDescription:]'
BOOL _IM_NSFormatter_getObjectValue_CforString_CerrorDescription_C(NSFormatter *_self, id *obj, NSString* string, id *error);

// method '-[NSFormatter isPartialStringValid:newEditingString:errorDescription:]'
BOOL _IM_NSFormatter_isPartialStringValid_CnewEditingString_CerrorDescription_C(NSFormatter *_self, NSString* partialString, id *newString, id *error);

// method '-[NSFormatter isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:]'
BOOL _IM_NSFormatter_isPartialStringValid_CproposedSelectedRange_CoriginalString_CoriginalSelectedRange_CerrorDescription_C(NSFormatter *_self, id *partialStringPtr, struct _NSRange *proposedSelRangePtr, NSString* origString, struct _NSRange origSelRange, id *error);

// method '-[NSFormatter stringForObjectValue:]'
NSString* _IM_NSFormatter_stringForObjectValue_C(NSFormatter *_self, id obj);

// method '-[NSHTTPCookie comment]'
NSString* _IM_NSHTTPCookie_comment(NSHTTPCookie *_self);

// method '-[NSHTTPCookie commentURL]'
NSURL* _IM_NSHTTPCookie_commentURL(NSHTTPCookie *_self);

// method '+[NSHTTPCookie cookieWithProperties:]'
id _CM_NSHTTPCookie_cookieWithProperties_C(Class _class, NSDictionary* properties);

// method '+[NSHTTPCookie cookiesWithResponseHeaderFields:forURL:]'
NSArray* _CM_NSHTTPCookie_cookiesWithResponseHeaderFields_CforURL_C(Class _class, NSDictionary* headerFields, NSURL* URL);

// method '-[NSHTTPCookie domain]'
NSString* _IM_NSHTTPCookie_domain(NSHTTPCookie *_self);

// method '-[NSHTTPCookie expiresDate]'
NSDate* _IM_NSHTTPCookie_expiresDate(NSHTTPCookie *_self);

// method '-[NSHTTPCookie initWithProperties:]'
NSHTTPCookie *_IM_NSHTTPCookie_initWithProperties_C(NSHTTPCookie *_self, NSDictionary* properties);

// method '-[NSHTTPCookie isSecure]'
BOOL _IM_NSHTTPCookie_isSecure(NSHTTPCookie *_self);

// method '-[NSHTTPCookie isSessionOnly]'
BOOL _IM_NSHTTPCookie_isSessionOnly(NSHTTPCookie *_self);

// method '-[NSHTTPCookie name]'
NSString* _IM_NSHTTPCookie_name(NSHTTPCookie *_self);

// method '-[NSHTTPCookie path]'
NSString* _IM_NSHTTPCookie_path(NSHTTPCookie *_self);

// method '-[NSHTTPCookie portList]'
NSArray* _IM_NSHTTPCookie_portList(NSHTTPCookie *_self);

// method '-[NSHTTPCookie properties]'
NSDictionary* _IM_NSHTTPCookie_properties(NSHTTPCookie *_self);

// method '+[NSHTTPCookie requestHeaderFieldsWithCookies:]'
NSDictionary* _CM_NSHTTPCookie_requestHeaderFieldsWithCookies_C(Class _class, NSArray* cookies);

// method '-[NSHTTPCookie value]'
NSString* _IM_NSHTTPCookie_value(NSHTTPCookie *_self);

// method '-[NSHTTPCookie version]'
unsigned int _IM_NSHTTPCookie_version(NSHTTPCookie *_self);

// method '-[NSHTTPCookieStorage cookieAcceptPolicy]'
int _IM_NSHTTPCookieStorage_cookieAcceptPolicy(NSHTTPCookieStorage *_self);

// method '-[NSHTTPCookieStorage cookies]'
NSArray* _IM_NSHTTPCookieStorage_cookies(NSHTTPCookieStorage *_self);

// method '-[NSHTTPCookieStorage cookiesForURL:]'
NSArray* _IM_NSHTTPCookieStorage_cookiesForURL_C(NSHTTPCookieStorage *_self, NSURL* URL);

// method '-[NSHTTPCookieStorage deleteCookie:]'
void _IM_NSHTTPCookieStorage_deleteCookie_C(NSHTTPCookieStorage *_self, NSHTTPCookie* cookie);

// method '-[NSHTTPCookieStorage setCookie:]'
void _IM_NSHTTPCookieStorage_setCookie_C(NSHTTPCookieStorage *_self, NSHTTPCookie* cookie);

// method '-[NSHTTPCookieStorage setCookieAcceptPolicy:]'
void _IM_NSHTTPCookieStorage_setCookieAcceptPolicy_C(NSHTTPCookieStorage *_self, int cookieAcceptPolicy);

// method '-[NSHTTPCookieStorage setCookies:forURL:mainDocumentURL:]'
void _IM_NSHTTPCookieStorage_setCookies_CforURL_CmainDocumentURL_C(NSHTTPCookieStorage *_self, NSArray* cookies, NSURL* URL, NSURL* mainDocumentURL);

// method '+[NSHTTPCookieStorage sharedHTTPCookieStorage]'
NSHTTPCookieStorage* _CM_NSHTTPCookieStorage_sharedHTTPCookieStorage(Class _class);

// method '-[NSHTTPURLResponse allHeaderFields]'
NSDictionary* _IM_NSHTTPURLResponse_allHeaderFields(NSHTTPURLResponse *_self);

// method '+[NSHTTPURLResponse localizedStringForStatusCode:]'
NSString* _CM_NSHTTPURLResponse_localizedStringForStatusCode_C(Class _class, int statusCode);

// method '-[NSHTTPURLResponse statusCode]'
int _IM_NSHTTPURLResponse_statusCode(NSHTTPURLResponse *_self);

// method '-[NSHost address]'
NSString* _IM_NSHost_address(NSHost *_self);

// method '-[NSHost addresses]'
NSArray* _IM_NSHost_addresses(NSHost *_self);

// method '+[NSHost currentHost]'
NSHost* _CM_NSHost_currentHost(Class _class);

// method '+[NSHost flushHostCache]'
void _CM_NSHost_flushHostCache(Class _class);

// method '+[NSHost hostWithAddress:]'
NSHost* _CM_NSHost_hostWithAddress_C(Class _class, NSString* address);

// method '+[NSHost hostWithName:]'
NSHost* _CM_NSHost_hostWithName_C(Class _class, NSString* name);

// method '-[NSHost isEqualToHost:]'
BOOL _IM_NSHost_isEqualToHost_C(NSHost *_self, NSHost* aHost);

// method '+[NSHost isHostCacheEnabled]'
BOOL _CM_NSHost_isHostCacheEnabled(Class _class);

// method '-[NSHost name]'
NSString* _IM_NSHost_name(NSHost *_self);

// method '-[NSHost names]'
NSArray* _IM_NSHost_names(NSHost *_self);

// method '+[NSHost setHostCacheEnabled:]'
void _CM_NSHost_setHostCacheEnabled_C(Class _class, BOOL flag);

// method '-[NSIndexPath compare:]'
int _IM_NSIndexPath_compare_C(NSIndexPath *_self, NSIndexPath* otherObject);

// method '-[NSIndexPath indexAtPosition:]'
unsigned int _IM_NSIndexPath_indexAtPosition_C(NSIndexPath *_self, unsigned int position);

// method '-[NSIndexPath indexPathByAddingIndex:]'
NSIndexPath* _IM_NSIndexPath_indexPathByAddingIndex_C(NSIndexPath *_self, unsigned int index);

// method '-[NSIndexPath indexPathByRemovingLastIndex]'
NSIndexPath* _IM_NSIndexPath_indexPathByRemovingLastIndex(NSIndexPath *_self);

// method '+[NSIndexPath indexPathWithIndex:]'
NSIndexPath* _CM_NSIndexPath_indexPathWithIndex_C(Class _class, unsigned int index);

// method '+[NSIndexPath indexPathWithIndexes:length:]'
NSIndexPath* _CM_NSIndexPath_indexPathWithIndexes_Clength_C(Class _class, unsigned int *indexes, unsigned int length);

// method '-[NSIndexPath initWithIndex:]'
NSIndexPath *_IM_NSIndexPath_initWithIndex_C(NSIndexPath *_self, unsigned int index);

// method '-[NSIndexPath initWithIndexes:length:]'
NSIndexPath *_IM_NSIndexPath_initWithIndexes_Clength_C(NSIndexPath *_self, unsigned int *indexes, unsigned int length);

// method '-[NSIndexPath length]'
unsigned int _IM_NSIndexPath_length(NSIndexPath *_self);

// method '-[NSIndexSet containsIndex:]'
BOOL _IM_NSIndexSet_containsIndex_C(NSIndexSet *_self, unsigned int value);

// method '-[NSIndexSet containsIndexes:]'
BOOL _IM_NSIndexSet_containsIndexes_C(NSIndexSet *_self, NSIndexSet* indexSet);

// method '-[NSIndexSet containsIndexesInRange:]'
BOOL _IM_NSIndexSet_containsIndexesInRange_C(NSIndexSet *_self, struct _NSRange range);

// method '-[NSIndexSet count]'
unsigned int _IM_NSIndexSet_count(NSIndexSet *_self);

// method '-[NSIndexSet firstIndex]'
unsigned int _IM_NSIndexSet_firstIndex(NSIndexSet *_self);

// method '-[NSIndexSet getIndexes:maxCount:inIndexRange:]'
unsigned int _IM_NSIndexSet_getIndexes_CmaxCount_CinIndexRange_C(NSIndexSet *_self, unsigned int *indexBuffer, unsigned int bufferSize, struct _NSRange *range);

// method '-[NSIndexSet indexGreaterThanIndex:]'
unsigned int _IM_NSIndexSet_indexGreaterThanIndex_C(NSIndexSet *_self, unsigned int value);

// method '-[NSIndexSet indexGreaterThanOrEqualToIndex:]'
unsigned int _IM_NSIndexSet_indexGreaterThanOrEqualToIndex_C(NSIndexSet *_self, unsigned int value);

// method '-[NSIndexSet indexLessThanIndex:]'
unsigned int _IM_NSIndexSet_indexLessThanIndex_C(NSIndexSet *_self, unsigned int value);

// method '-[NSIndexSet indexLessThanOrEqualToIndex:]'
unsigned int _IM_NSIndexSet_indexLessThanOrEqualToIndex_C(NSIndexSet *_self, unsigned int value);

// method '+[NSIndexSet indexSet]'
id _CM_NSIndexSet_indexSet(Class _class);

// method '+[NSIndexSet indexSetWithIndex:]'
id _CM_NSIndexSet_indexSetWithIndex_C(Class _class, unsigned int value);

// method '+[NSIndexSet indexSetWithIndexesInRange:]'
id _CM_NSIndexSet_indexSetWithIndexesInRange_C(Class _class, struct _NSRange range);

// method '-[NSIndexSet init]'
NSIndexSet *_IM_NSIndexSet_init(NSIndexSet *_self);

// method '-[NSIndexSet initWithIndex:]'
NSIndexSet *_IM_NSIndexSet_initWithIndex_C(NSIndexSet *_self, unsigned int value);

// method '-[NSIndexSet initWithIndexSet:]'
NSIndexSet *_IM_NSIndexSet_initWithIndexSet_C(NSIndexSet *_self, NSIndexSet* indexSet);

// method '-[NSIndexSet initWithIndexesInRange:]'
NSIndexSet *_IM_NSIndexSet_initWithIndexesInRange_C(NSIndexSet *_self, struct _NSRange range);

// method '-[NSIndexSet intersectsIndexesInRange:]'
BOOL _IM_NSIndexSet_intersectsIndexesInRange_C(NSIndexSet *_self, struct _NSRange range);

// method '-[NSIndexSet isEqualToIndexSet:]'
BOOL _IM_NSIndexSet_isEqualToIndexSet_C(NSIndexSet *_self, NSIndexSet* indexSet);

// method '-[NSIndexSet lastIndex]'
unsigned int _IM_NSIndexSet_lastIndex(NSIndexSet *_self);

// method '-[NSIndexSpecifier index]'
int _IM_NSIndexSpecifier_index(NSIndexSpecifier *_self);

// method '-[NSIndexSpecifier initWithContainerClassDescription:containerSpecifier:key:index:]'
NSIndexSpecifier *_IM_NSIndexSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_Cindex_C(NSIndexSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property, int index);

// method '-[NSIndexSpecifier setIndex:]'
void _IM_NSIndexSpecifier_setIndex_C(NSIndexSpecifier *_self, int index);

// method '-[NSInputStream hasBytesAvailable]'
BOOL _IM_NSInputStream_hasBytesAvailable(NSInputStream *_self);

// method '-[NSInputStream initWithData:]'
NSInputStream *_IM_NSInputStream_initWithData_C(NSInputStream *_self, NSData* data);

// method '-[NSInputStream initWithFileAtPath:]'
NSInputStream *_IM_NSInputStream_initWithFileAtPath_C(NSInputStream *_self, NSString* path);

// method '+[NSInputStream inputStreamWithData:]'
id _CM_NSInputStream_inputStreamWithData_C(Class _class, NSData* data);

// method '+[NSInputStream inputStreamWithFileAtPath:]'
id _CM_NSInputStream_inputStreamWithFileAtPath_C(Class _class, NSString* path);

// method '-[NSInputStream read:maxLength:]'
int _IM_NSInputStream_read_CmaxLength_C(NSInputStream *_self, uint8_t* buffer, unsigned int len);

// method '-[NSInvocation argumentsRetained]'
BOOL _IM_NSInvocation_argumentsRetained(NSInvocation *_self);

// method '+[NSInvocation invocationWithMethodSignature:]'
NSInvocation* _CM_NSInvocation_invocationWithMethodSignature_C(Class _class, NSMethodSignature* sig);

// method '-[NSInvocation invoke]'
void _IM_NSInvocation_invoke(NSInvocation *_self);

// method '-[NSInvocation invokeWithTarget:]'
void _IM_NSInvocation_invokeWithTarget_C(NSInvocation *_self, id target);

// method '-[NSInvocation methodSignature]'
NSMethodSignature* _IM_NSInvocation_methodSignature(NSInvocation *_self);

// method '-[NSInvocation retainArguments]'
void _IM_NSInvocation_retainArguments(NSInvocation *_self);

// method '-[NSInvocation selector]'
SEL _IM_NSInvocation_selector(NSInvocation *_self);

// method '-[NSInvocation setArgument:atIndex:]'
void _IM_NSInvocation_setArgument_CatIndex_C(NSInvocation *_self, void *argumentLocation, int index);

// method '-[NSInvocation setReturnValue:]'
void _IM_NSInvocation_setReturnValue_C(NSInvocation *_self, void *retLoc);

// method '-[NSInvocation setSelector:]'
void _IM_NSInvocation_setSelector_C(NSInvocation *_self, SEL selector);

// method '-[NSInvocation setTarget:]'
void _IM_NSInvocation_setTarget_C(NSInvocation *_self, id target);

// method '-[NSInvocation target]'
id _IM_NSInvocation_target(NSInvocation *_self);

// method '+[NSKeyedArchiver archiveRootObject:toFile:]'
BOOL _CM_NSKeyedArchiver_archiveRootObject_CtoFile_C(Class _class, id rootObject, NSString* path);

// method '+[NSKeyedArchiver archivedDataWithRootObject:]'
NSData* _CM_NSKeyedArchiver_archivedDataWithRootObject_C(Class _class, id rootObject);

// method '+[NSKeyedArchiver classNameForClass:]'
NSString* _CM_NSKeyedArchiver_classNameForClass_C(Class _class, Class cls);

// method '-[NSKeyedArchiver classNameForClass:]'
NSString* _IM_NSKeyedArchiver_classNameForClass_C(NSKeyedArchiver *_self, Class cls);

// method '-[NSKeyedArchiver delegate]'
id _IM_NSKeyedArchiver_delegate(NSKeyedArchiver *_self);

// method '-[NSKeyedArchiver encodeBool:forKey:]'
void _IM_NSKeyedArchiver_encodeBool_CforKey_C(NSKeyedArchiver *_self, BOOL boolv, NSString* key);

// method '-[NSKeyedArchiver encodeBytes:length:forKey:]'
void _IM_NSKeyedArchiver_encodeBytes_Clength_CforKey_C(NSKeyedArchiver *_self, const uint8_t* bytesp, unsigned int lenv, NSString* key);

// method '-[NSKeyedArchiver encodeConditionalObject:forKey:]'
void _IM_NSKeyedArchiver_encodeConditionalObject_CforKey_C(NSKeyedArchiver *_self, id objv, NSString* key);

// method '-[NSKeyedArchiver encodeDouble:forKey:]'
void _IM_NSKeyedArchiver_encodeDouble_CforKey_C(NSKeyedArchiver *_self, double realv, NSString* key);

// method '-[NSKeyedArchiver encodeFloat:forKey:]'
void _IM_NSKeyedArchiver_encodeFloat_CforKey_C(NSKeyedArchiver *_self, float realv, NSString* key);

// method '-[NSKeyedArchiver encodeInt32:forKey:]'
void _IM_NSKeyedArchiver_encodeInt32_CforKey_C(NSKeyedArchiver *_self, int intv, NSString* key);

// method '-[NSKeyedArchiver encodeInt64:forKey:]'
void _IM_NSKeyedArchiver_encodeInt64_CforKey_C(NSKeyedArchiver *_self, long long intv, NSString* key);

// method '-[NSKeyedArchiver encodeInt:forKey:]'
void _IM_NSKeyedArchiver_encodeInt_CforKey_C(NSKeyedArchiver *_self, int intv, NSString* key);

// method '-[NSKeyedArchiver encodeObject:forKey:]'
void _IM_NSKeyedArchiver_encodeObject_CforKey_C(NSKeyedArchiver *_self, id objv, NSString* key);

// method '-[NSKeyedArchiver finishEncoding]'
void _IM_NSKeyedArchiver_finishEncoding(NSKeyedArchiver *_self);

// method '-[NSKeyedArchiver initForWritingWithMutableData:]'
NSKeyedArchiver *_IM_NSKeyedArchiver_initForWritingWithMutableData_C(NSKeyedArchiver *_self, NSMutableData* data);

// method '-[NSKeyedArchiver outputFormat]'
int _IM_NSKeyedArchiver_outputFormat(NSKeyedArchiver *_self);

// method '+[NSKeyedArchiver setClassName:forClass:]'
void _CM_NSKeyedArchiver_setClassName_CforClass_C(Class _class, NSString* codedName, Class cls);

// method '-[NSKeyedArchiver setClassName:forClass:]'
void _IM_NSKeyedArchiver_setClassName_CforClass_C(NSKeyedArchiver *_self, NSString* codedName, Class cls);

// method '-[NSKeyedArchiver setDelegate:]'
void _IM_NSKeyedArchiver_setDelegate_C(NSKeyedArchiver *_self, id delegate);

// method '-[NSKeyedArchiver setOutputFormat:]'
void _IM_NSKeyedArchiver_setOutputFormat_C(NSKeyedArchiver *_self, int format);

// method '+[NSKeyedUnarchiver classForClassName:]'
Class _CM_NSKeyedUnarchiver_classForClassName_C(Class _class, NSString* codedName);

// method '-[NSKeyedUnarchiver classForClassName:]'
Class _IM_NSKeyedUnarchiver_classForClassName_C(NSKeyedUnarchiver *_self, NSString* codedName);

// method '-[NSKeyedUnarchiver containsValueForKey:]'
BOOL _IM_NSKeyedUnarchiver_containsValueForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeBoolForKey:]'
BOOL _IM_NSKeyedUnarchiver_decodeBoolForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeBytesForKey:returnedLength:]'
const uint8_t* _IM_NSKeyedUnarchiver_decodeBytesForKey_CreturnedLength_C(NSKeyedUnarchiver *_self, NSString* key, unsigned int *lengthp);

// method '-[NSKeyedUnarchiver decodeDoubleForKey:]'
double _IM_NSKeyedUnarchiver_decodeDoubleForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeFloatForKey:]'
float _IM_NSKeyedUnarchiver_decodeFloatForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeInt32ForKey:]'
int _IM_NSKeyedUnarchiver_decodeInt32ForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeInt64ForKey:]'
long long _IM_NSKeyedUnarchiver_decodeInt64ForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeIntForKey:]'
int _IM_NSKeyedUnarchiver_decodeIntForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver decodeObjectForKey:]'
id _IM_NSKeyedUnarchiver_decodeObjectForKey_C(NSKeyedUnarchiver *_self, NSString* key);

// method '-[NSKeyedUnarchiver delegate]'
id _IM_NSKeyedUnarchiver_delegate(NSKeyedUnarchiver *_self);

// method '-[NSKeyedUnarchiver finishDecoding]'
void _IM_NSKeyedUnarchiver_finishDecoding(NSKeyedUnarchiver *_self);

// method '-[NSKeyedUnarchiver initForReadingWithData:]'
NSKeyedUnarchiver *_IM_NSKeyedUnarchiver_initForReadingWithData_C(NSKeyedUnarchiver *_self, NSData* data);

// method '+[NSKeyedUnarchiver setClass:forClassName:]'
void _CM_NSKeyedUnarchiver_setClass_CforClassName_C(Class _class, Class cls, NSString* codedName);

// method '-[NSKeyedUnarchiver setClass:forClassName:]'
void _IM_NSKeyedUnarchiver_setClass_CforClassName_C(NSKeyedUnarchiver *_self, Class cls, NSString* codedName);

// method '-[NSKeyedUnarchiver setDelegate:]'
void _IM_NSKeyedUnarchiver_setDelegate_C(NSKeyedUnarchiver *_self, id delegate);

// method '+[NSKeyedUnarchiver unarchiveObjectWithData:]'
id _CM_NSKeyedUnarchiver_unarchiveObjectWithData_C(Class _class, NSData* data);

// method '+[NSKeyedUnarchiver unarchiveObjectWithFile:]'
id _CM_NSKeyedUnarchiver_unarchiveObjectWithFile_C(Class _class, NSString* path);

// method '+[NSLocale ISOCountryCodes]'
NSArray* _CM_NSLocale_ISOCountryCodes(Class _class);

// method '+[NSLocale ISOCurrencyCodes]'
NSArray* _CM_NSLocale_ISOCurrencyCodes(Class _class);

// method '+[NSLocale ISOLanguageCodes]'
NSArray* _CM_NSLocale_ISOLanguageCodes(Class _class);

// method '+[NSLocale availableLocaleIdentifiers]'
NSArray* _CM_NSLocale_availableLocaleIdentifiers(Class _class);

// method '+[NSLocale canonicalLocaleIdentifierFromString:]'
NSString* _CM_NSLocale_canonicalLocaleIdentifierFromString_C(Class _class, NSString* string);

// method '+[NSLocale componentsFromLocaleIdentifier:]'
NSDictionary* _CM_NSLocale_componentsFromLocaleIdentifier_C(Class _class, NSString* string);

// method '+[NSLocale currentLocale]'
id _CM_NSLocale_currentLocale(Class _class);

// method '-[NSLocale displayNameForKey:value:]'
NSString* _IM_NSLocale_displayNameForKey_Cvalue_C(NSLocale *_self, id key, id value);

// method '-[NSLocale initWithLocaleIdentifier:]'
NSLocale *_IM_NSLocale_initWithLocaleIdentifier_C(NSLocale *_self, NSString* string);

// method '-[NSLocale localeIdentifier]'
NSString* _IM_NSLocale_localeIdentifier(NSLocale *_self);

// method '+[NSLocale localeIdentifierFromComponents:]'
NSString* _CM_NSLocale_localeIdentifierFromComponents_C(Class _class, NSDictionary* dict);

// method '-[NSLocale objectForKey:]'
id _IM_NSLocale_objectForKey_C(NSLocale *_self, id key);

// method '+[NSLocale systemLocale]'
id _CM_NSLocale_systemLocale(Class _class);

// method '-[NSLock lockBeforeDate:]'
BOOL _IM_NSLock_lockBeforeDate_C(NSLock *_self, NSDate* limit);

// method '-[NSLock tryLock]'
BOOL _IM_NSLock_tryLock(NSLock *_self);

// method '-[NSLogicalTest initAndTestWithTests:]'
NSLogicalTest *_IM_NSLogicalTest_initAndTestWithTests_C(NSLogicalTest *_self, NSArray* subTests);

// method '-[NSLogicalTest initNotTestWithTest:]'
NSLogicalTest *_IM_NSLogicalTest_initNotTestWithTest_C(NSLogicalTest *_self, NSScriptWhoseTest* subTest);

// method '-[NSLogicalTest initOrTestWithTests:]'
NSLogicalTest *_IM_NSLogicalTest_initOrTestWithTests_C(NSLogicalTest *_self, NSArray* subTests);

// method '-[NSMachBootstrapServer portForName:]'
NSPort* _IM_NSMachBootstrapServer_portForName_C(NSMachBootstrapServer *_self, NSString* name);

// method '-[NSMachBootstrapServer portForName:host:]'
NSPort* _IM_NSMachBootstrapServer_portForName_Chost_C(NSMachBootstrapServer *_self, NSString* name, NSString* host);

// method '-[NSMachBootstrapServer registerPort:name:]'
BOOL _IM_NSMachBootstrapServer_registerPort_Cname_C(NSMachBootstrapServer *_self, NSPort* port, NSString* name);

// method '+[NSMachBootstrapServer sharedInstance]'
id _CM_NSMachBootstrapServer_sharedInstance(Class _class);

// method '-[NSMachPort initWithMachPort:]'
NSMachPort *_IM_NSMachPort_initWithMachPort_C(NSMachPort *_self, int machPort);

// method '-[NSMachPort machPort]'
int _IM_NSMachPort_machPort(NSMachPort *_self);

// method '+[NSMachPort portWithMachPort:]'
NSPort* _CM_NSMachPort_portWithMachPort_C(Class _class, int machPort);

// method '-[NSMachPort removeFromRunLoop:forMode:]'
void _IM_NSMachPort_removeFromRunLoop_CforMode_C(NSMachPort *_self, NSRunLoop* runLoop, NSString* mode);

// method '-[NSMachPort scheduleInRunLoop:forMode:]'
void _IM_NSMachPort_scheduleInRunLoop_CforMode_C(NSMachPort *_self, NSRunLoop* runLoop, NSString* mode);

// method '-[NSMessagePortNameServer portForName:]'
NSPort* _IM_NSMessagePortNameServer_portForName_C(NSMessagePortNameServer *_self, NSString* name);

// method '-[NSMessagePortNameServer portForName:host:]'
NSPort* _IM_NSMessagePortNameServer_portForName_Chost_C(NSMessagePortNameServer *_self, NSString* name, NSString* host);

// method '+[NSMessagePortNameServer sharedInstance]'
id _CM_NSMessagePortNameServer_sharedInstance(Class _class);

// method '-[NSMetadataItem attributes]'
NSArray* _IM_NSMetadataItem_attributes(NSMetadataItem *_self);

// method '-[NSMetadataItem valueForAttribute:]'
id _IM_NSMetadataItem_valueForAttribute_C(NSMetadataItem *_self, NSString* key);

// method '-[NSMetadataItem valuesForAttributes:]'
NSDictionary* _IM_NSMetadataItem_valuesForAttributes_C(NSMetadataItem *_self, NSArray* keys);

// method '-[NSMetadataQuery delegate]'
id _IM_NSMetadataQuery_delegate(NSMetadataQuery *_self);

// method '-[NSMetadataQuery disableUpdates]'
void _IM_NSMetadataQuery_disableUpdates(NSMetadataQuery *_self);

// method '-[NSMetadataQuery enableUpdates]'
void _IM_NSMetadataQuery_enableUpdates(NSMetadataQuery *_self);

// method '-[NSMetadataQuery groupedResults]'
NSArray* _IM_NSMetadataQuery_groupedResults(NSMetadataQuery *_self);

// method '-[NSMetadataQuery groupingAttributes]'
NSArray* _IM_NSMetadataQuery_groupingAttributes(NSMetadataQuery *_self);

// method '-[NSMetadataQuery indexOfResult:]'
unsigned int _IM_NSMetadataQuery_indexOfResult_C(NSMetadataQuery *_self, id result);

// method '-[NSMetadataQuery init]'
NSMetadataQuery *_IM_NSMetadataQuery_init(NSMetadataQuery *_self);

// method '-[NSMetadataQuery isGathering]'
BOOL _IM_NSMetadataQuery_isGathering(NSMetadataQuery *_self);

// method '-[NSMetadataQuery isStarted]'
BOOL _IM_NSMetadataQuery_isStarted(NSMetadataQuery *_self);

// method '-[NSMetadataQuery isStopped]'
BOOL _IM_NSMetadataQuery_isStopped(NSMetadataQuery *_self);

// method '-[NSMetadataQuery notificationBatchingInterval]'
double _IM_NSMetadataQuery_notificationBatchingInterval(NSMetadataQuery *_self);

// method '-[NSMetadataQuery predicate]'
NSPredicate* _IM_NSMetadataQuery_predicate(NSMetadataQuery *_self);

// method '-[NSMetadataQuery resultAtIndex:]'
id _IM_NSMetadataQuery_resultAtIndex_C(NSMetadataQuery *_self, unsigned int idx);

// method '-[NSMetadataQuery resultCount]'
unsigned int _IM_NSMetadataQuery_resultCount(NSMetadataQuery *_self);

// method '-[NSMetadataQuery results]'
NSArray* _IM_NSMetadataQuery_results(NSMetadataQuery *_self);

// method '-[NSMetadataQuery searchScopes]'
NSArray* _IM_NSMetadataQuery_searchScopes(NSMetadataQuery *_self);

// method '-[NSMetadataQuery setDelegate:]'
void _IM_NSMetadataQuery_setDelegate_C(NSMetadataQuery *_self, id delegate);

// method '-[NSMetadataQuery setGroupingAttributes:]'
void _IM_NSMetadataQuery_setGroupingAttributes_C(NSMetadataQuery *_self, NSArray* attrs);

// method '-[NSMetadataQuery setNotificationBatchingInterval:]'
void _IM_NSMetadataQuery_setNotificationBatchingInterval_C(NSMetadataQuery *_self, double ti);

// method '-[NSMetadataQuery setPredicate:]'
void _IM_NSMetadataQuery_setPredicate_C(NSMetadataQuery *_self, NSPredicate* predicate);

// method '-[NSMetadataQuery setSearchScopes:]'
void _IM_NSMetadataQuery_setSearchScopes_C(NSMetadataQuery *_self, NSArray* scopes);

// method '-[NSMetadataQuery setSortDescriptors:]'
void _IM_NSMetadataQuery_setSortDescriptors_C(NSMetadataQuery *_self, NSArray* descriptors);

// method '-[NSMetadataQuery setValueListAttributes:]'
void _IM_NSMetadataQuery_setValueListAttributes_C(NSMetadataQuery *_self, NSArray* attrs);

// method '-[NSMetadataQuery sortDescriptors]'
NSArray* _IM_NSMetadataQuery_sortDescriptors(NSMetadataQuery *_self);

// method '-[NSMetadataQuery startQuery]'
BOOL _IM_NSMetadataQuery_startQuery(NSMetadataQuery *_self);

// method '-[NSMetadataQuery stopQuery]'
void _IM_NSMetadataQuery_stopQuery(NSMetadataQuery *_self);

// method '-[NSMetadataQuery valueListAttributes]'
NSArray* _IM_NSMetadataQuery_valueListAttributes(NSMetadataQuery *_self);

// method '-[NSMetadataQuery valueLists]'
NSDictionary* _IM_NSMetadataQuery_valueLists(NSMetadataQuery *_self);

// method '-[NSMetadataQuery valueOfAttribute:forResultAtIndex:]'
id _IM_NSMetadataQuery_valueOfAttribute_CforResultAtIndex_C(NSMetadataQuery *_self, NSString* attrName, unsigned int idx);

// method '-[NSMetadataQueryAttributeValueTuple attribute]'
NSString* _IM_NSMetadataQueryAttributeValueTuple_attribute(NSMetadataQueryAttributeValueTuple *_self);

// method '-[NSMetadataQueryAttributeValueTuple count]'
unsigned int _IM_NSMetadataQueryAttributeValueTuple_count(NSMetadataQueryAttributeValueTuple *_self);

// method '-[NSMetadataQueryAttributeValueTuple value]'
id _IM_NSMetadataQueryAttributeValueTuple_value(NSMetadataQueryAttributeValueTuple *_self);

// method '-[NSMetadataQueryResultGroup attribute]'
NSString* _IM_NSMetadataQueryResultGroup_attribute(NSMetadataQueryResultGroup *_self);

// method '-[NSMetadataQueryResultGroup resultAtIndex:]'
id _IM_NSMetadataQueryResultGroup_resultAtIndex_C(NSMetadataQueryResultGroup *_self, unsigned int idx);

// method '-[NSMetadataQueryResultGroup resultCount]'
unsigned int _IM_NSMetadataQueryResultGroup_resultCount(NSMetadataQueryResultGroup *_self);

// method '-[NSMetadataQueryResultGroup results]'
NSArray* _IM_NSMetadataQueryResultGroup_results(NSMetadataQueryResultGroup *_self);

// method '-[NSMetadataQueryResultGroup subgroups]'
NSArray* _IM_NSMetadataQueryResultGroup_subgroups(NSMetadataQueryResultGroup *_self);

// method '-[NSMetadataQueryResultGroup value]'
id _IM_NSMetadataQueryResultGroup_value(NSMetadataQueryResultGroup *_self);

// method '-[NSMethodSignature frameLength]'
unsigned int _IM_NSMethodSignature_frameLength(NSMethodSignature *_self);

// method '-[NSMethodSignature getArgumentTypeAtIndex:]'
const char* _IM_NSMethodSignature_getArgumentTypeAtIndex_C(NSMethodSignature *_self, unsigned int index);

// method '-[NSMethodSignature isOneway]'
BOOL _IM_NSMethodSignature_isOneway(NSMethodSignature *_self);

// method '-[NSMethodSignature methodReturnLength]'
unsigned int _IM_NSMethodSignature_methodReturnLength(NSMethodSignature *_self);

// method '-[NSMethodSignature methodReturnType]'
const char* _IM_NSMethodSignature_methodReturnType(NSMethodSignature *_self);

// method '-[NSMethodSignature numberOfArguments]'
unsigned int _IM_NSMethodSignature_numberOfArguments(NSMethodSignature *_self);

// method '-[NSMoveCommand keySpecifier]'
NSScriptObjectSpecifier* _IM_NSMoveCommand_keySpecifier(NSMoveCommand *_self);

// method '-[NSMoveCommand setReceiversSpecifier:]'
void _IM_NSMoveCommand_setReceiversSpecifier_C(NSMoveCommand *_self, NSScriptObjectSpecifier* receiversRef);

// method '-[NSMutableArray addObject:]'
void _IM_NSMutableArray_addObject_C(NSMutableArray *_self, id anObject);

// method '-[NSMutableArray addObjectsFromArray:]'
void _IM_NSMutableArray_addObjectsFromArray_C(NSMutableArray *_self, NSArray* otherArray);

// method '+[NSMutableArray arrayWithCapacity:]'
id _CM_NSMutableArray_arrayWithCapacity_C(Class _class, unsigned int numItems);

// method '-[NSMutableArray exchangeObjectAtIndex:withObjectAtIndex:]'
void _IM_NSMutableArray_exchangeObjectAtIndex_CwithObjectAtIndex_C(NSMutableArray *_self, unsigned int idx1, unsigned int idx2);

// method '-[NSMutableArray filterUsingPredicate:]'
void _IM_NSMutableArray_filterUsingPredicate_C(NSMutableArray *_self, NSPredicate* predicate);

// method '-[NSMutableArray initWithCapacity:]'
NSMutableArray *_IM_NSMutableArray_initWithCapacity_C(NSMutableArray *_self, unsigned int numItems);

// method '-[NSMutableArray insertObject:atIndex:]'
void _IM_NSMutableArray_insertObject_CatIndex_C(NSMutableArray *_self, id anObject, unsigned int index);

// method '-[NSMutableArray insertObjects:atIndexes:]'
void _IM_NSMutableArray_insertObjects_CatIndexes_C(NSMutableArray *_self, NSArray* objects, NSIndexSet* indexes);

// method '-[NSMutableArray removeAllObjects]'
void _IM_NSMutableArray_removeAllObjects(NSMutableArray *_self);

// method '-[NSMutableArray removeLastObject]'
void _IM_NSMutableArray_removeLastObject(NSMutableArray *_self);

// method '-[NSMutableArray removeObject:]'
void _IM_NSMutableArray_removeObject_C(NSMutableArray *_self, id anObject);

// method '-[NSMutableArray removeObject:inRange:]'
void _IM_NSMutableArray_removeObject_CinRange_C(NSMutableArray *_self, id anObject, struct _NSRange range);

// method '-[NSMutableArray removeObjectAtIndex:]'
void _IM_NSMutableArray_removeObjectAtIndex_C(NSMutableArray *_self, unsigned int index);

// method '-[NSMutableArray removeObjectIdenticalTo:]'
void _IM_NSMutableArray_removeObjectIdenticalTo_C(NSMutableArray *_self, id anObject);

// method '-[NSMutableArray removeObjectIdenticalTo:inRange:]'
void _IM_NSMutableArray_removeObjectIdenticalTo_CinRange_C(NSMutableArray *_self, id anObject, struct _NSRange range);

// method '-[NSMutableArray removeObjectsAtIndexes:]'
void _IM_NSMutableArray_removeObjectsAtIndexes_C(NSMutableArray *_self, NSIndexSet* indexes);

// method '-[NSMutableArray removeObjectsFromIndices:numIndices:]'
void _IM_NSMutableArray_removeObjectsFromIndices_CnumIndices_C(NSMutableArray *_self, unsigned int *indices, unsigned int count);

// method '-[NSMutableArray removeObjectsInArray:]'
void _IM_NSMutableArray_removeObjectsInArray_C(NSMutableArray *_self, NSArray* otherArray);

// method '-[NSMutableArray removeObjectsInRange:]'
void _IM_NSMutableArray_removeObjectsInRange_C(NSMutableArray *_self, struct _NSRange range);

// method '-[NSMutableArray replaceObjectAtIndex:withObject:]'
void _IM_NSMutableArray_replaceObjectAtIndex_CwithObject_C(NSMutableArray *_self, unsigned int index, id anObject);

// method '-[NSMutableArray replaceObjectsAtIndexes:withObjects:]'
void _IM_NSMutableArray_replaceObjectsAtIndexes_CwithObjects_C(NSMutableArray *_self, NSIndexSet* indexes, NSArray* objects);

// method '-[NSMutableArray replaceObjectsInRange:withObjectsFromArray:]'
void _IM_NSMutableArray_replaceObjectsInRange_CwithObjectsFromArray_C(NSMutableArray *_self, struct _NSRange range, NSArray* otherArray);

// method '-[NSMutableArray replaceObjectsInRange:withObjectsFromArray:range:]'
void _IM_NSMutableArray_replaceObjectsInRange_CwithObjectsFromArray_Crange_C(NSMutableArray *_self, struct _NSRange range, NSArray* otherArray, struct _NSRange otherRange);

// method '-[NSMutableArray setArray:]'
void _IM_NSMutableArray_setArray_C(NSMutableArray *_self, NSArray* otherArray);

// method '-[NSMutableArray sortUsingDescriptors:]'
void _IM_NSMutableArray_sortUsingDescriptors_C(NSMutableArray *_self, NSArray* sortDescriptors);

// method '-[NSMutableArray sortUsingSelector:]'
void _IM_NSMutableArray_sortUsingSelector_C(NSMutableArray *_self, SEL comparator);

// method '-[NSMutableAttributedString addAttribute:value:range:]'
void _IM_NSMutableAttributedString_addAttribute_Cvalue_Crange_C(NSMutableAttributedString *_self, NSString* name, id value, struct _NSRange range);

// method '-[NSMutableAttributedString addAttributes:range:]'
void _IM_NSMutableAttributedString_addAttributes_Crange_C(NSMutableAttributedString *_self, NSDictionary* attrs, struct _NSRange range);

// method '-[NSMutableAttributedString appendAttributedString:]'
void _IM_NSMutableAttributedString_appendAttributedString_C(NSMutableAttributedString *_self, NSAttributedString* attrString);

// method '-[NSMutableAttributedString beginEditing]'
void _IM_NSMutableAttributedString_beginEditing(NSMutableAttributedString *_self);

// method '-[NSMutableAttributedString deleteCharactersInRange:]'
void _IM_NSMutableAttributedString_deleteCharactersInRange_C(NSMutableAttributedString *_self, struct _NSRange range);

// method '-[NSMutableAttributedString endEditing]'
void _IM_NSMutableAttributedString_endEditing(NSMutableAttributedString *_self);

// method '-[NSMutableAttributedString insertAttributedString:atIndex:]'
void _IM_NSMutableAttributedString_insertAttributedString_CatIndex_C(NSMutableAttributedString *_self, NSAttributedString* attrString, unsigned int loc);

// method '-[NSMutableAttributedString mutableString]'
NSMutableString* _IM_NSMutableAttributedString_mutableString(NSMutableAttributedString *_self);

// method '-[NSMutableAttributedString removeAttribute:range:]'
void _IM_NSMutableAttributedString_removeAttribute_Crange_C(NSMutableAttributedString *_self, NSString* name, struct _NSRange range);

// method '-[NSMutableAttributedString replaceCharactersInRange:withAttributedString:]'
void _IM_NSMutableAttributedString_replaceCharactersInRange_CwithAttributedString_C(NSMutableAttributedString *_self, struct _NSRange range, NSAttributedString* attrString);

// method '-[NSMutableAttributedString replaceCharactersInRange:withString:]'
void _IM_NSMutableAttributedString_replaceCharactersInRange_CwithString_C(NSMutableAttributedString *_self, struct _NSRange range, NSString* str);

// method '-[NSMutableAttributedString setAttributedString:]'
void _IM_NSMutableAttributedString_setAttributedString_C(NSMutableAttributedString *_self, NSAttributedString* attrString);

// method '-[NSMutableAttributedString setAttributes:range:]'
void _IM_NSMutableAttributedString_setAttributes_Crange_C(NSMutableAttributedString *_self, NSDictionary* attrs, struct _NSRange range);

// method '-[NSMutableCharacterSet addCharactersInRange:]'
void _IM_NSMutableCharacterSet_addCharactersInRange_C(NSMutableCharacterSet *_self, struct _NSRange aRange);

// method '-[NSMutableCharacterSet addCharactersInString:]'
void _IM_NSMutableCharacterSet_addCharactersInString_C(NSMutableCharacterSet *_self, NSString* aString);

// method '-[NSMutableCharacterSet formIntersectionWithCharacterSet:]'
void _IM_NSMutableCharacterSet_formIntersectionWithCharacterSet_C(NSMutableCharacterSet *_self, NSCharacterSet* otherSet);

// method '-[NSMutableCharacterSet formUnionWithCharacterSet:]'
void _IM_NSMutableCharacterSet_formUnionWithCharacterSet_C(NSMutableCharacterSet *_self, NSCharacterSet* otherSet);

// method '-[NSMutableCharacterSet invert]'
void _IM_NSMutableCharacterSet_invert(NSMutableCharacterSet *_self);

// method '-[NSMutableCharacterSet removeCharactersInRange:]'
void _IM_NSMutableCharacterSet_removeCharactersInRange_C(NSMutableCharacterSet *_self, struct _NSRange aRange);

// method '-[NSMutableCharacterSet removeCharactersInString:]'
void _IM_NSMutableCharacterSet_removeCharactersInString_C(NSMutableCharacterSet *_self, NSString* aString);

// method '-[NSMutableData appendBytes:length:]'
void _IM_NSMutableData_appendBytes_Clength_C(NSMutableData *_self, const void* bytes, unsigned int length);

// method '-[NSMutableData appendData:]'
void _IM_NSMutableData_appendData_C(NSMutableData *_self, NSData* other);

// method '+[NSMutableData dataWithCapacity:]'
id _CM_NSMutableData_dataWithCapacity_C(Class _class, unsigned int aNumItems);

// method '+[NSMutableData dataWithLength:]'
id _CM_NSMutableData_dataWithLength_C(Class _class, unsigned int length);

// method '-[NSMutableData increaseLengthBy:]'
void _IM_NSMutableData_increaseLengthBy_C(NSMutableData *_self, unsigned int extraLength);

// method '-[NSMutableData initWithCapacity:]'
NSMutableData *_IM_NSMutableData_initWithCapacity_C(NSMutableData *_self, unsigned int capacity);

// method '-[NSMutableData initWithLength:]'
NSMutableData *_IM_NSMutableData_initWithLength_C(NSMutableData *_self, unsigned int length);

// method '-[NSMutableData mutableBytes]'
void *_IM_NSMutableData_mutableBytes(NSMutableData *_self);

// method '-[NSMutableData replaceBytesInRange:withBytes:length:]'
void _IM_NSMutableData_replaceBytesInRange_CwithBytes_Clength_C(NSMutableData *_self, struct _NSRange range, const void* replacementBytes, unsigned int replacementLength);

// method '-[NSMutableData resetBytesInRange:]'
void _IM_NSMutableData_resetBytesInRange_C(NSMutableData *_self, struct _NSRange range);

// method '-[NSMutableData setData:]'
void _IM_NSMutableData_setData_C(NSMutableData *_self, NSData* data);

// method '-[NSMutableData setLength:]'
void _IM_NSMutableData_setLength_C(NSMutableData *_self, unsigned int length);

// method '-[NSMutableDictionary addEntriesFromDictionary:]'
void _IM_NSMutableDictionary_addEntriesFromDictionary_C(NSMutableDictionary *_self, NSDictionary* otherDictionary);

// method '+[NSMutableDictionary dictionaryWithCapacity:]'
id _CM_NSMutableDictionary_dictionaryWithCapacity_C(Class _class, unsigned int numItems);

// method '-[NSMutableDictionary initWithCapacity:]'
NSMutableDictionary *_IM_NSMutableDictionary_initWithCapacity_C(NSMutableDictionary *_self, unsigned int numItems);

// method '-[NSMutableDictionary removeAllObjects]'
void _IM_NSMutableDictionary_removeAllObjects(NSMutableDictionary *_self);

// method '-[NSMutableDictionary removeObjectForKey:]'
void _IM_NSMutableDictionary_removeObjectForKey_C(NSMutableDictionary *_self, id aKey);

// method '-[NSMutableDictionary removeObjectsForKeys:]'
void _IM_NSMutableDictionary_removeObjectsForKeys_C(NSMutableDictionary *_self, NSArray* keyArray);

// method '-[NSMutableDictionary setDictionary:]'
void _IM_NSMutableDictionary_setDictionary_C(NSMutableDictionary *_self, NSDictionary* otherDictionary);

// method '-[NSMutableDictionary setObject:forKey:]'
void _IM_NSMutableDictionary_setObject_CforKey_C(NSMutableDictionary *_self, id anObject, id aKey);

// method '-[NSMutableDictionary setValue:forKey:]'
void _IM_NSMutableDictionary_setValue_CforKey_C(NSMutableDictionary *_self, id value, NSString* key);

// method '-[NSMutableIndexSet addIndex:]'
void _IM_NSMutableIndexSet_addIndex_C(NSMutableIndexSet *_self, unsigned int value);

// method '-[NSMutableIndexSet addIndexes:]'
void _IM_NSMutableIndexSet_addIndexes_C(NSMutableIndexSet *_self, NSIndexSet* indexSet);

// method '-[NSMutableIndexSet addIndexesInRange:]'
void _IM_NSMutableIndexSet_addIndexesInRange_C(NSMutableIndexSet *_self, struct _NSRange range);

// method '-[NSMutableIndexSet removeAllIndexes]'
void _IM_NSMutableIndexSet_removeAllIndexes(NSMutableIndexSet *_self);

// method '-[NSMutableIndexSet removeIndex:]'
void _IM_NSMutableIndexSet_removeIndex_C(NSMutableIndexSet *_self, unsigned int value);

// method '-[NSMutableIndexSet removeIndexes:]'
void _IM_NSMutableIndexSet_removeIndexes_C(NSMutableIndexSet *_self, NSIndexSet* indexSet);

// method '-[NSMutableIndexSet removeIndexesInRange:]'
void _IM_NSMutableIndexSet_removeIndexesInRange_C(NSMutableIndexSet *_self, struct _NSRange range);

// method '-[NSMutableIndexSet shiftIndexesStartingAtIndex:by:]'
void _IM_NSMutableIndexSet_shiftIndexesStartingAtIndex_Cby_C(NSMutableIndexSet *_self, unsigned int index, int delta);

// method '-[NSMutableSet addObject:]'
void _IM_NSMutableSet_addObject_C(NSMutableSet *_self, id object);

// method '-[NSMutableSet addObjectsFromArray:]'
void _IM_NSMutableSet_addObjectsFromArray_C(NSMutableSet *_self, NSArray* array);

// method '-[NSMutableSet initWithCapacity:]'
NSMutableSet *_IM_NSMutableSet_initWithCapacity_C(NSMutableSet *_self, unsigned int numItems);

// method '-[NSMutableSet intersectSet:]'
void _IM_NSMutableSet_intersectSet_C(NSMutableSet *_self, NSSet* otherSet);

// method '-[NSMutableSet minusSet:]'
void _IM_NSMutableSet_minusSet_C(NSMutableSet *_self, NSSet* otherSet);

// method '-[NSMutableSet removeAllObjects]'
void _IM_NSMutableSet_removeAllObjects(NSMutableSet *_self);

// method '-[NSMutableSet removeObject:]'
void _IM_NSMutableSet_removeObject_C(NSMutableSet *_self, id object);

// method '-[NSMutableSet setSet:]'
void _IM_NSMutableSet_setSet_C(NSMutableSet *_self, NSSet* otherSet);

// method '+[NSMutableSet setWithCapacity:]'
id _CM_NSMutableSet_setWithCapacity_C(Class _class, unsigned int numItems);

// method '-[NSMutableSet unionSet:]'
void _IM_NSMutableSet_unionSet_C(NSMutableSet *_self, NSSet* otherSet);

// method '-[NSMutableString appendString:]'
void _IM_NSMutableString_appendString_C(NSMutableString *_self, NSString* aString);

// method '-[NSMutableString deleteCharactersInRange:]'
void _IM_NSMutableString_deleteCharactersInRange_C(NSMutableString *_self, struct _NSRange range);

// method '-[NSMutableString initWithCapacity:]'
NSMutableString *_IM_NSMutableString_initWithCapacity_C(NSMutableString *_self, unsigned int capacity);

// method '-[NSMutableString insertString:atIndex:]'
void _IM_NSMutableString_insertString_CatIndex_C(NSMutableString *_self, NSString* aString, unsigned int loc);

// method '-[NSMutableString replaceCharactersInRange:withString:]'
void _IM_NSMutableString_replaceCharactersInRange_CwithString_C(NSMutableString *_self, struct _NSRange range, NSString* aString);

// method '-[NSMutableString replaceOccurrencesOfString:withString:options:range:]'
unsigned int _IM_NSMutableString_replaceOccurrencesOfString_CwithString_Coptions_Crange_C(NSMutableString *_self, NSString* target, NSString* replacement, unsigned int opts, struct _NSRange searchRange);

// method '-[NSMutableString setString:]'
void _IM_NSMutableString_setString_C(NSMutableString *_self, NSString* aString);

// method '+[NSMutableString stringWithCapacity:]'
id _CM_NSMutableString_stringWithCapacity_C(Class _class, unsigned int capacity);

// method '-[NSMutableURLRequest addValue:forHTTPHeaderField:]'
void _IM_NSMutableURLRequest_addValue_CforHTTPHeaderField_C(NSMutableURLRequest *_self, NSString* value, NSString* field);

// method '-[NSMutableURLRequest setAllHTTPHeaderFields:]'
void _IM_NSMutableURLRequest_setAllHTTPHeaderFields_C(NSMutableURLRequest *_self, NSDictionary* headerFields);

// method '-[NSMutableURLRequest setCachePolicy:]'
void _IM_NSMutableURLRequest_setCachePolicy_C(NSMutableURLRequest *_self, int policy);

// method '-[NSMutableURLRequest setHTTPBody:]'
void _IM_NSMutableURLRequest_setHTTPBody_C(NSMutableURLRequest *_self, NSData* data);

// method '-[NSMutableURLRequest setHTTPBodyStream:]'
void _IM_NSMutableURLRequest_setHTTPBodyStream_C(NSMutableURLRequest *_self, NSInputStream* inputStream);

// method '-[NSMutableURLRequest setHTTPMethod:]'
void _IM_NSMutableURLRequest_setHTTPMethod_C(NSMutableURLRequest *_self, NSString* method);

// method '-[NSMutableURLRequest setHTTPShouldHandleCookies:]'
void _IM_NSMutableURLRequest_setHTTPShouldHandleCookies_C(NSMutableURLRequest *_self, BOOL should);

// method '-[NSMutableURLRequest setMainDocumentURL:]'
void _IM_NSMutableURLRequest_setMainDocumentURL_C(NSMutableURLRequest *_self, NSURL* URL);

// method '-[NSMutableURLRequest setTimeoutInterval:]'
void _IM_NSMutableURLRequest_setTimeoutInterval_C(NSMutableURLRequest *_self, double seconds);

// method '-[NSMutableURLRequest setURL:]'
void _IM_NSMutableURLRequest_setURL_C(NSMutableURLRequest *_self, NSURL* URL);

// method '-[NSMutableURLRequest setValue:forHTTPHeaderField:]'
void _IM_NSMutableURLRequest_setValue_CforHTTPHeaderField_C(NSMutableURLRequest *_self, NSString* value, NSString* field);

// method '-[NSNameSpecifier initWithContainerClassDescription:containerSpecifier:key:name:]'
NSNameSpecifier *_IM_NSNameSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_Cname_C(NSNameSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property, NSString* name);

// method '-[NSNameSpecifier name]'
NSString* _IM_NSNameSpecifier_name(NSNameSpecifier *_self);

// method '-[NSNameSpecifier setName:]'
void _IM_NSNameSpecifier_setName_C(NSNameSpecifier *_self, NSString* name);

// method '-[NSNetService TXTRecordData]'
NSData* _IM_NSNetService_TXTRecordData(NSNetService *_self);

// method '-[NSNetService addresses]'
NSArray* _IM_NSNetService_addresses(NSNetService *_self);

// method '+[NSNetService dataFromTXTRecordDictionary:]'
NSData* _CM_NSNetService_dataFromTXTRecordDictionary_C(Class _class, NSDictionary* txtDictionary);

// method '-[NSNetService delegate]'
id _IM_NSNetService_delegate(NSNetService *_self);

// method '+[NSNetService dictionaryFromTXTRecordData:]'
NSDictionary* _CM_NSNetService_dictionaryFromTXTRecordData_C(Class _class, NSData* txtData);

// method '-[NSNetService domain]'
NSString* _IM_NSNetService_domain(NSNetService *_self);

// method '-[NSNetService getInputStream:outputStream:]'
BOOL _IM_NSNetService_getInputStream_CoutputStream_C(NSNetService *_self, id *inputStream, id *outputStream);

// method '-[NSNetService hostName]'
NSString* _IM_NSNetService_hostName(NSNetService *_self);

// method '-[NSNetService initWithDomain:type:name:]'
NSNetService *_IM_NSNetService_initWithDomain_Ctype_Cname_C(NSNetService *_self, NSString* domain, NSString* type, NSString* name);

// method '-[NSNetService initWithDomain:type:name:port:]'
NSNetService *_IM_NSNetService_initWithDomain_Ctype_Cname_Cport_C(NSNetService *_self, NSString* domain, NSString* type, NSString* name, int port);

// method '-[NSNetService name]'
NSString* _IM_NSNetService_name(NSNetService *_self);

// method '-[NSNetService protocolSpecificInformation]'
NSString* _IM_NSNetService_protocolSpecificInformation(NSNetService *_self);

// method '-[NSNetService publish]'
void _IM_NSNetService_publish(NSNetService *_self);

// method '-[NSNetService removeFromRunLoop:forMode:]'
void _IM_NSNetService_removeFromRunLoop_CforMode_C(NSNetService *_self, NSRunLoop* aRunLoop, NSString* mode);

// method '-[NSNetService resolve]'
void _IM_NSNetService_resolve(NSNetService *_self);

// method '-[NSNetService resolveWithTimeout:]'
void _IM_NSNetService_resolveWithTimeout_C(NSNetService *_self, double timeout);

// method '-[NSNetService scheduleInRunLoop:forMode:]'
void _IM_NSNetService_scheduleInRunLoop_CforMode_C(NSNetService *_self, NSRunLoop* aRunLoop, NSString* mode);

// method '-[NSNetService setDelegate:]'
void _IM_NSNetService_setDelegate_C(NSNetService *_self, id delegate);

// method '-[NSNetService setProtocolSpecificInformation:]'
void _IM_NSNetService_setProtocolSpecificInformation_C(NSNetService *_self, NSString* specificInformation);

// method '-[NSNetService setTXTRecordData:]'
BOOL _IM_NSNetService_setTXTRecordData_C(NSNetService *_self, NSData* recordData);

// method '-[NSNetService startMonitoring]'
void _IM_NSNetService_startMonitoring(NSNetService *_self);

// method '-[NSNetService stop]'
void _IM_NSNetService_stop(NSNetService *_self);

// method '-[NSNetService stopMonitoring]'
void _IM_NSNetService_stopMonitoring(NSNetService *_self);

// method '-[NSNetService type]'
NSString* _IM_NSNetService_type(NSNetService *_self);

// method '-[NSNetServiceBrowser delegate]'
id _IM_NSNetServiceBrowser_delegate(NSNetServiceBrowser *_self);

// method '-[NSNetServiceBrowser init]'
NSNetServiceBrowser *_IM_NSNetServiceBrowser_init(NSNetServiceBrowser *_self);

// method '-[NSNetServiceBrowser removeFromRunLoop:forMode:]'
void _IM_NSNetServiceBrowser_removeFromRunLoop_CforMode_C(NSNetServiceBrowser *_self, NSRunLoop* aRunLoop, NSString* mode);

// method '-[NSNetServiceBrowser scheduleInRunLoop:forMode:]'
void _IM_NSNetServiceBrowser_scheduleInRunLoop_CforMode_C(NSNetServiceBrowser *_self, NSRunLoop* aRunLoop, NSString* mode);

// method '-[NSNetServiceBrowser searchForAllDomains]'
void _IM_NSNetServiceBrowser_searchForAllDomains(NSNetServiceBrowser *_self);

// method '-[NSNetServiceBrowser searchForBrowsableDomains]'
void _IM_NSNetServiceBrowser_searchForBrowsableDomains(NSNetServiceBrowser *_self);

// method '-[NSNetServiceBrowser searchForRegistrationDomains]'
void _IM_NSNetServiceBrowser_searchForRegistrationDomains(NSNetServiceBrowser *_self);

// method '-[NSNetServiceBrowser searchForServicesOfType:inDomain:]'
void _IM_NSNetServiceBrowser_searchForServicesOfType_CinDomain_C(NSNetServiceBrowser *_self, NSString* type, NSString* domainString);

// method '-[NSNetServiceBrowser setDelegate:]'
void _IM_NSNetServiceBrowser_setDelegate_C(NSNetServiceBrowser *_self, id delegate);

// method '-[NSNetServiceBrowser stop]'
void _IM_NSNetServiceBrowser_stop(NSNetServiceBrowser *_self);

// method '-[NSNotification name]'
NSString* _IM_NSNotification_name(NSNotification *_self);

// method '+[NSNotification notificationWithName:object:]'
id _CM_NSNotification_notificationWithName_Cobject_C(Class _class, NSString* aName, id anObject);

// method '+[NSNotification notificationWithName:object:userInfo:]'
id _CM_NSNotification_notificationWithName_Cobject_CuserInfo_C(Class _class, NSString* aName, id anObject, NSDictionary* aUserInfo);

// method '-[NSNotification object]'
id _IM_NSNotification_object(NSNotification *_self);

// method '-[NSNotification userInfo]'
NSDictionary* _IM_NSNotification_userInfo(NSNotification *_self);

// method '-[NSNotificationCenter addObserver:selector:name:object:]'
void _IM_NSNotificationCenter_addObserver_Cselector_Cname_Cobject_C(NSNotificationCenter *_self, id observer, SEL aSelector, NSString* aName, id anObject);

// method '+[NSNotificationCenter defaultCenter]'
id _CM_NSNotificationCenter_defaultCenter(Class _class);

// method '-[NSNotificationCenter postNotification:]'
void _IM_NSNotificationCenter_postNotification_C(NSNotificationCenter *_self, NSNotification* notification);

// method '-[NSNotificationCenter postNotificationName:object:]'
void _IM_NSNotificationCenter_postNotificationName_Cobject_C(NSNotificationCenter *_self, NSString* aName, id anObject);

// method '-[NSNotificationCenter postNotificationName:object:userInfo:]'
void _IM_NSNotificationCenter_postNotificationName_Cobject_CuserInfo_C(NSNotificationCenter *_self, NSString* aName, id anObject, NSDictionary* aUserInfo);

// method '-[NSNotificationCenter removeObserver:]'
void _IM_NSNotificationCenter_removeObserver_C(NSNotificationCenter *_self, id observer);

// method '-[NSNotificationCenter removeObserver:name:object:]'
void _IM_NSNotificationCenter_removeObserver_Cname_Cobject_C(NSNotificationCenter *_self, id observer, NSString* aName, id anObject);

// method '+[NSNotificationQueue defaultQueue]'
NSNotificationQueue* _CM_NSNotificationQueue_defaultQueue(Class _class);

// method '-[NSNotificationQueue dequeueNotificationsMatching:coalesceMask:]'
void _IM_NSNotificationQueue_dequeueNotificationsMatching_CcoalesceMask_C(NSNotificationQueue *_self, NSNotification* notification, unsigned int coalesceMask);

// method '-[NSNotificationQueue enqueueNotification:postingStyle:]'
void _IM_NSNotificationQueue_enqueueNotification_CpostingStyle_C(NSNotificationQueue *_self, NSNotification* notification, int postingStyle);

// method '-[NSNotificationQueue enqueueNotification:postingStyle:coalesceMask:forModes:]'
void _IM_NSNotificationQueue_enqueueNotification_CpostingStyle_CcoalesceMask_CforModes_C(NSNotificationQueue *_self, NSNotification* notification, int postingStyle, unsigned int coalesceMask, NSArray* modes);

// method '-[NSNotificationQueue initWithNotificationCenter:]'
NSNotificationQueue *_IM_NSNotificationQueue_initWithNotificationCenter_C(NSNotificationQueue *_self, NSNotificationCenter* notificationCenter);

// method '+[NSNull null]'
NSNull* _CM_NSNull_null(Class _class);

// method '-[NSNumber boolValue]'
BOOL _IM_NSNumber_boolValue(NSNumber *_self);

// method '-[NSNumber charValue]'
char _IM_NSNumber_charValue(NSNumber *_self);

// method '-[NSNumber compare:]'
int _IM_NSNumber_compare_C(NSNumber *_self, NSNumber* otherNumber);

// method '-[NSNumber descriptionWithLocale:]'
NSString* _IM_NSNumber_descriptionWithLocale_C(NSNumber *_self, NSDictionary* locale);

// method '-[NSNumber doubleValue]'
double _IM_NSNumber_doubleValue(NSNumber *_self);

// method '-[NSNumber floatValue]'
float _IM_NSNumber_floatValue(NSNumber *_self);

// method '-[NSNumber initWithBool:]'
NSNumber *_IM_NSNumber_initWithBool_C(NSNumber *_self, BOOL value);

// method '-[NSNumber initWithChar:]'
NSNumber *_IM_NSNumber_initWithChar_C(NSNumber *_self, char value);

// method '-[NSNumber initWithDouble:]'
NSNumber *_IM_NSNumber_initWithDouble_C(NSNumber *_self, double value);

// method '-[NSNumber initWithFloat:]'
NSNumber *_IM_NSNumber_initWithFloat_C(NSNumber *_self, float value);

// method '-[NSNumber initWithInt:]'
NSNumber *_IM_NSNumber_initWithInt_C(NSNumber *_self, int value);

// method '-[NSNumber initWithLong:]'
NSNumber *_IM_NSNumber_initWithLong_C(NSNumber *_self, long value);

// method '-[NSNumber initWithLongLong:]'
NSNumber *_IM_NSNumber_initWithLongLong_C(NSNumber *_self, long long value);

// method '-[NSNumber initWithShort:]'
NSNumber *_IM_NSNumber_initWithShort_C(NSNumber *_self, short value);

// method '-[NSNumber initWithUnsignedChar:]'
NSNumber *_IM_NSNumber_initWithUnsignedChar_C(NSNumber *_self, unsigned char value);

// method '-[NSNumber initWithUnsignedInt:]'
NSNumber *_IM_NSNumber_initWithUnsignedInt_C(NSNumber *_self, unsigned int value);

// method '-[NSNumber initWithUnsignedLong:]'
NSNumber *_IM_NSNumber_initWithUnsignedLong_C(NSNumber *_self, unsigned long value);

// method '-[NSNumber initWithUnsignedLongLong:]'
NSNumber *_IM_NSNumber_initWithUnsignedLongLong_C(NSNumber *_self, unsigned long long value);

// method '-[NSNumber initWithUnsignedShort:]'
NSNumber *_IM_NSNumber_initWithUnsignedShort_C(NSNumber *_self, unsigned short value);

// method '-[NSNumber intValue]'
int _IM_NSNumber_intValue(NSNumber *_self);

// method '-[NSNumber isEqualToNumber:]'
BOOL _IM_NSNumber_isEqualToNumber_C(NSNumber *_self, NSNumber* number);

// method '-[NSNumber longLongValue]'
long long _IM_NSNumber_longLongValue(NSNumber *_self);

// method '-[NSNumber longValue]'
long _IM_NSNumber_longValue(NSNumber *_self);

// method '+[NSNumber numberWithBool:]'
NSNumber* _CM_NSNumber_numberWithBool_C(Class _class, BOOL value);

// method '+[NSNumber numberWithChar:]'
NSNumber* _CM_NSNumber_numberWithChar_C(Class _class, char value);

// method '+[NSNumber numberWithDouble:]'
NSNumber* _CM_NSNumber_numberWithDouble_C(Class _class, double value);

// method '+[NSNumber numberWithFloat:]'
NSNumber* _CM_NSNumber_numberWithFloat_C(Class _class, float value);

// method '+[NSNumber numberWithInt:]'
NSNumber* _CM_NSNumber_numberWithInt_C(Class _class, int value);

// method '+[NSNumber numberWithLong:]'
NSNumber* _CM_NSNumber_numberWithLong_C(Class _class, long value);

// method '+[NSNumber numberWithLongLong:]'
NSNumber* _CM_NSNumber_numberWithLongLong_C(Class _class, long long value);

// method '+[NSNumber numberWithShort:]'
NSNumber* _CM_NSNumber_numberWithShort_C(Class _class, short value);

// method '+[NSNumber numberWithUnsignedChar:]'
NSNumber* _CM_NSNumber_numberWithUnsignedChar_C(Class _class, unsigned char value);

// method '+[NSNumber numberWithUnsignedInt:]'
NSNumber* _CM_NSNumber_numberWithUnsignedInt_C(Class _class, unsigned int value);

// method '+[NSNumber numberWithUnsignedLong:]'
NSNumber* _CM_NSNumber_numberWithUnsignedLong_C(Class _class, unsigned long value);

// method '+[NSNumber numberWithUnsignedLongLong:]'
NSNumber* _CM_NSNumber_numberWithUnsignedLongLong_C(Class _class, unsigned long long value);

// method '+[NSNumber numberWithUnsignedShort:]'
NSNumber* _CM_NSNumber_numberWithUnsignedShort_C(Class _class, unsigned short value);

// method '-[NSNumber shortValue]'
short _IM_NSNumber_shortValue(NSNumber *_self);

// method '-[NSNumber stringValue]'
NSString* _IM_NSNumber_stringValue(NSNumber *_self);

// method '-[NSNumber unsignedCharValue]'
unsigned char _IM_NSNumber_unsignedCharValue(NSNumber *_self);

// method '-[NSNumber unsignedIntValue]'
unsigned int _IM_NSNumber_unsignedIntValue(NSNumber *_self);

// method '-[NSNumber unsignedLongLongValue]'
unsigned long long _IM_NSNumber_unsignedLongLongValue(NSNumber *_self);

// method '-[NSNumber unsignedLongValue]'
unsigned long _IM_NSNumber_unsignedLongValue(NSNumber *_self);

// method '-[NSNumber unsignedShortValue]'
unsigned short _IM_NSNumber_unsignedShortValue(NSNumber *_self);

// method '-[NSNumberFormatter allowsFloats]'
BOOL _IM_NSNumberFormatter_allowsFloats(NSNumberFormatter *_self);

// method '-[NSNumberFormatter alwaysShowsDecimalSeparator]'
BOOL _IM_NSNumberFormatter_alwaysShowsDecimalSeparator(NSNumberFormatter *_self);

// method '-[NSNumberFormatter attributedStringForNil]'
NSAttributedString* _IM_NSNumberFormatter_attributedStringForNil(NSNumberFormatter *_self);

// method '-[NSNumberFormatter attributedStringForNotANumber]'
NSAttributedString* _IM_NSNumberFormatter_attributedStringForNotANumber(NSNumberFormatter *_self);

// method '-[NSNumberFormatter attributedStringForZero]'
NSAttributedString* _IM_NSNumberFormatter_attributedStringForZero(NSNumberFormatter *_self);

// method '-[NSNumberFormatter currencyCode]'
NSString* _IM_NSNumberFormatter_currencyCode(NSNumberFormatter *_self);

// method '-[NSNumberFormatter currencyDecimalSeparator]'
NSString* _IM_NSNumberFormatter_currencyDecimalSeparator(NSNumberFormatter *_self);

// method '-[NSNumberFormatter currencySymbol]'
NSString* _IM_NSNumberFormatter_currencySymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter decimalSeparator]'
NSString* _IM_NSNumberFormatter_decimalSeparator(NSNumberFormatter *_self);

// method '+[NSNumberFormatter defaultFormatterBehavior]'
int _CM_NSNumberFormatter_defaultFormatterBehavior(Class _class);

// method '-[NSNumberFormatter exponentSymbol]'
NSString* _IM_NSNumberFormatter_exponentSymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter format]'
NSString* _IM_NSNumberFormatter_format(NSNumberFormatter *_self);

// method '-[NSNumberFormatter formatWidth]'
unsigned int _IM_NSNumberFormatter_formatWidth(NSNumberFormatter *_self);

// method '-[NSNumberFormatter formatterBehavior]'
int _IM_NSNumberFormatter_formatterBehavior(NSNumberFormatter *_self);

// method '-[NSNumberFormatter generatesDecimalNumbers]'
BOOL _IM_NSNumberFormatter_generatesDecimalNumbers(NSNumberFormatter *_self);

// method '-[NSNumberFormatter getObjectValue:forString:range:error:]'
BOOL _IM_NSNumberFormatter_getObjectValue_CforString_Crange_Cerror_C(NSNumberFormatter *_self, id *obj, NSString* string, struct _NSRange *rangep, id *error);

// method '-[NSNumberFormatter groupingSeparator]'
NSString* _IM_NSNumberFormatter_groupingSeparator(NSNumberFormatter *_self);

// method '-[NSNumberFormatter groupingSize]'
unsigned int _IM_NSNumberFormatter_groupingSize(NSNumberFormatter *_self);

// method '-[NSNumberFormatter hasThousandSeparators]'
BOOL _IM_NSNumberFormatter_hasThousandSeparators(NSNumberFormatter *_self);

// method '-[NSNumberFormatter init]'
NSNumberFormatter *_IM_NSNumberFormatter_init(NSNumberFormatter *_self);

// method '-[NSNumberFormatter internationalCurrencySymbol]'
NSString* _IM_NSNumberFormatter_internationalCurrencySymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter locale]'
NSLocale* _IM_NSNumberFormatter_locale(NSNumberFormatter *_self);

// method '-[NSNumberFormatter localizesFormat]'
BOOL _IM_NSNumberFormatter_localizesFormat(NSNumberFormatter *_self);

// method '-[NSNumberFormatter maximum]'
NSNumber* _IM_NSNumberFormatter_maximum(NSNumberFormatter *_self);

// method '-[NSNumberFormatter maximumFractionDigits]'
unsigned int _IM_NSNumberFormatter_maximumFractionDigits(NSNumberFormatter *_self);

// method '-[NSNumberFormatter maximumIntegerDigits]'
unsigned int _IM_NSNumberFormatter_maximumIntegerDigits(NSNumberFormatter *_self);

// method '-[NSNumberFormatter minimum]'
NSNumber* _IM_NSNumberFormatter_minimum(NSNumberFormatter *_self);

// method '-[NSNumberFormatter minimumFractionDigits]'
unsigned int _IM_NSNumberFormatter_minimumFractionDigits(NSNumberFormatter *_self);

// method '-[NSNumberFormatter minimumIntegerDigits]'
unsigned int _IM_NSNumberFormatter_minimumIntegerDigits(NSNumberFormatter *_self);

// method '-[NSNumberFormatter minusSign]'
NSString* _IM_NSNumberFormatter_minusSign(NSNumberFormatter *_self);

// method '-[NSNumberFormatter multiplier]'
NSNumber* _IM_NSNumberFormatter_multiplier(NSNumberFormatter *_self);

// method '-[NSNumberFormatter negativeFormat]'
NSString* _IM_NSNumberFormatter_negativeFormat(NSNumberFormatter *_self);

// method '-[NSNumberFormatter negativeInfinitySymbol]'
NSString* _IM_NSNumberFormatter_negativeInfinitySymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter negativePrefix]'
NSString* _IM_NSNumberFormatter_negativePrefix(NSNumberFormatter *_self);

// method '-[NSNumberFormatter negativeSuffix]'
NSString* _IM_NSNumberFormatter_negativeSuffix(NSNumberFormatter *_self);

// method '-[NSNumberFormatter nilSymbol]'
NSString* _IM_NSNumberFormatter_nilSymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter notANumberSymbol]'
NSString* _IM_NSNumberFormatter_notANumberSymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter numberFromString:]'
NSNumber* _IM_NSNumberFormatter_numberFromString_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter numberStyle]'
int _IM_NSNumberFormatter_numberStyle(NSNumberFormatter *_self);

// method '-[NSNumberFormatter paddingCharacter]'
NSString* _IM_NSNumberFormatter_paddingCharacter(NSNumberFormatter *_self);

// method '-[NSNumberFormatter paddingPosition]'
int _IM_NSNumberFormatter_paddingPosition(NSNumberFormatter *_self);

// method '-[NSNumberFormatter perMillSymbol]'
NSString* _IM_NSNumberFormatter_perMillSymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter percentSymbol]'
NSString* _IM_NSNumberFormatter_percentSymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter plusSign]'
NSString* _IM_NSNumberFormatter_plusSign(NSNumberFormatter *_self);

// method '-[NSNumberFormatter positiveFormat]'
NSString* _IM_NSNumberFormatter_positiveFormat(NSNumberFormatter *_self);

// method '-[NSNumberFormatter positiveInfinitySymbol]'
NSString* _IM_NSNumberFormatter_positiveInfinitySymbol(NSNumberFormatter *_self);

// method '-[NSNumberFormatter positivePrefix]'
NSString* _IM_NSNumberFormatter_positivePrefix(NSNumberFormatter *_self);

// method '-[NSNumberFormatter positiveSuffix]'
NSString* _IM_NSNumberFormatter_positiveSuffix(NSNumberFormatter *_self);

// method '-[NSNumberFormatter roundingBehavior]'
NSDecimalNumberHandler* _IM_NSNumberFormatter_roundingBehavior(NSNumberFormatter *_self);

// method '-[NSNumberFormatter roundingIncrement]'
NSNumber* _IM_NSNumberFormatter_roundingIncrement(NSNumberFormatter *_self);

// method '-[NSNumberFormatter roundingMode]'
int _IM_NSNumberFormatter_roundingMode(NSNumberFormatter *_self);

// method '-[NSNumberFormatter secondaryGroupingSize]'
unsigned int _IM_NSNumberFormatter_secondaryGroupingSize(NSNumberFormatter *_self);

// method '-[NSNumberFormatter setAllowsFloats:]'
void _IM_NSNumberFormatter_setAllowsFloats_C(NSNumberFormatter *_self, BOOL flag);

// method '-[NSNumberFormatter setAlwaysShowsDecimalSeparator:]'
void _IM_NSNumberFormatter_setAlwaysShowsDecimalSeparator_C(NSNumberFormatter *_self, BOOL b);

// method '-[NSNumberFormatter setAttributedStringForNil:]'
void _IM_NSNumberFormatter_setAttributedStringForNil_C(NSNumberFormatter *_self, NSAttributedString* newAttributedString);

// method '-[NSNumberFormatter setAttributedStringForNotANumber:]'
void _IM_NSNumberFormatter_setAttributedStringForNotANumber_C(NSNumberFormatter *_self, NSAttributedString* newAttributedString);

// method '-[NSNumberFormatter setAttributedStringForZero:]'
void _IM_NSNumberFormatter_setAttributedStringForZero_C(NSNumberFormatter *_self, NSAttributedString* newAttributedString);

// method '-[NSNumberFormatter setCurrencyCode:]'
void _IM_NSNumberFormatter_setCurrencyCode_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setCurrencyDecimalSeparator:]'
void _IM_NSNumberFormatter_setCurrencyDecimalSeparator_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setCurrencySymbol:]'
void _IM_NSNumberFormatter_setCurrencySymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setDecimalSeparator:]'
void _IM_NSNumberFormatter_setDecimalSeparator_C(NSNumberFormatter *_self, NSString* string);

// method '+[NSNumberFormatter setDefaultFormatterBehavior:]'
void _CM_NSNumberFormatter_setDefaultFormatterBehavior_C(Class _class, int behavior);

// method '-[NSNumberFormatter setExponentSymbol:]'
void _IM_NSNumberFormatter_setExponentSymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setFormat:]'
void _IM_NSNumberFormatter_setFormat_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setFormatWidth:]'
void _IM_NSNumberFormatter_setFormatWidth_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setFormatterBehavior:]'
void _IM_NSNumberFormatter_setFormatterBehavior_C(NSNumberFormatter *_self, int behavior);

// method '-[NSNumberFormatter setGeneratesDecimalNumbers:]'
void _IM_NSNumberFormatter_setGeneratesDecimalNumbers_C(NSNumberFormatter *_self, BOOL b);

// method '-[NSNumberFormatter setGroupingSeparator:]'
void _IM_NSNumberFormatter_setGroupingSeparator_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setGroupingSize:]'
void _IM_NSNumberFormatter_setGroupingSize_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setHasThousandSeparators:]'
void _IM_NSNumberFormatter_setHasThousandSeparators_C(NSNumberFormatter *_self, BOOL flag);

// method '-[NSNumberFormatter setInternationalCurrencySymbol:]'
void _IM_NSNumberFormatter_setInternationalCurrencySymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setLocale:]'
void _IM_NSNumberFormatter_setLocale_C(NSNumberFormatter *_self, NSLocale* string);

// method '-[NSNumberFormatter setLocalizesFormat:]'
void _IM_NSNumberFormatter_setLocalizesFormat_C(NSNumberFormatter *_self, BOOL flag);

// method '-[NSNumberFormatter setMaximum:]'
void _IM_NSNumberFormatter_setMaximum_C(NSNumberFormatter *_self, NSNumber* number);

// method '-[NSNumberFormatter setMaximumFractionDigits:]'
void _IM_NSNumberFormatter_setMaximumFractionDigits_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setMaximumIntegerDigits:]'
void _IM_NSNumberFormatter_setMaximumIntegerDigits_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setMinimum:]'
void _IM_NSNumberFormatter_setMinimum_C(NSNumberFormatter *_self, NSNumber* number);

// method '-[NSNumberFormatter setMinimumFractionDigits:]'
void _IM_NSNumberFormatter_setMinimumFractionDigits_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setMinimumIntegerDigits:]'
void _IM_NSNumberFormatter_setMinimumIntegerDigits_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setMinusSign:]'
void _IM_NSNumberFormatter_setMinusSign_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setMultiplier:]'
void _IM_NSNumberFormatter_setMultiplier_C(NSNumberFormatter *_self, NSNumber* number);

// method '-[NSNumberFormatter setNegativeFormat:]'
void _IM_NSNumberFormatter_setNegativeFormat_C(NSNumberFormatter *_self, NSString* format);

// method '-[NSNumberFormatter setNegativeInfinitySymbol:]'
void _IM_NSNumberFormatter_setNegativeInfinitySymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setNegativePrefix:]'
void _IM_NSNumberFormatter_setNegativePrefix_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setNegativeSuffix:]'
void _IM_NSNumberFormatter_setNegativeSuffix_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setNilSymbol:]'
void _IM_NSNumberFormatter_setNilSymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setNotANumberSymbol:]'
void _IM_NSNumberFormatter_setNotANumberSymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setNumberStyle:]'
void _IM_NSNumberFormatter_setNumberStyle_C(NSNumberFormatter *_self, int style);

// method '-[NSNumberFormatter setPaddingCharacter:]'
void _IM_NSNumberFormatter_setPaddingCharacter_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setPaddingPosition:]'
void _IM_NSNumberFormatter_setPaddingPosition_C(NSNumberFormatter *_self, int position);

// method '-[NSNumberFormatter setPerMillSymbol:]'
void _IM_NSNumberFormatter_setPerMillSymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setPercentSymbol:]'
void _IM_NSNumberFormatter_setPercentSymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setPlusSign:]'
void _IM_NSNumberFormatter_setPlusSign_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setPositiveFormat:]'
void _IM_NSNumberFormatter_setPositiveFormat_C(NSNumberFormatter *_self, NSString* format);

// method '-[NSNumberFormatter setPositiveInfinitySymbol:]'
void _IM_NSNumberFormatter_setPositiveInfinitySymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setPositivePrefix:]'
void _IM_NSNumberFormatter_setPositivePrefix_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setPositiveSuffix:]'
void _IM_NSNumberFormatter_setPositiveSuffix_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter setRoundingBehavior:]'
void _IM_NSNumberFormatter_setRoundingBehavior_C(NSNumberFormatter *_self, NSDecimalNumberHandler* newRoundingBehavior);

// method '-[NSNumberFormatter setRoundingIncrement:]'
void _IM_NSNumberFormatter_setRoundingIncrement_C(NSNumberFormatter *_self, NSNumber* number);

// method '-[NSNumberFormatter setRoundingMode:]'
void _IM_NSNumberFormatter_setRoundingMode_C(NSNumberFormatter *_self, int mode);

// method '-[NSNumberFormatter setSecondaryGroupingSize:]'
void _IM_NSNumberFormatter_setSecondaryGroupingSize_C(NSNumberFormatter *_self, unsigned int number);

// method '-[NSNumberFormatter setTextAttributesForNegativeInfinity:]'
void _IM_NSNumberFormatter_setTextAttributesForNegativeInfinity_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setTextAttributesForNegativeValues:]'
void _IM_NSNumberFormatter_setTextAttributesForNegativeValues_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setTextAttributesForNil:]'
void _IM_NSNumberFormatter_setTextAttributesForNil_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setTextAttributesForNotANumber:]'
void _IM_NSNumberFormatter_setTextAttributesForNotANumber_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setTextAttributesForPositiveInfinity:]'
void _IM_NSNumberFormatter_setTextAttributesForPositiveInfinity_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setTextAttributesForPositiveValues:]'
void _IM_NSNumberFormatter_setTextAttributesForPositiveValues_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setTextAttributesForZero:]'
void _IM_NSNumberFormatter_setTextAttributesForZero_C(NSNumberFormatter *_self, NSDictionary* newAttributes);

// method '-[NSNumberFormatter setThousandSeparator:]'
void _IM_NSNumberFormatter_setThousandSeparator_C(NSNumberFormatter *_self, NSString* newSeparator);

// method '-[NSNumberFormatter setUsesGroupingSeparator:]'
void _IM_NSNumberFormatter_setUsesGroupingSeparator_C(NSNumberFormatter *_self, BOOL b);

// method '-[NSNumberFormatter setZeroSymbol:]'
void _IM_NSNumberFormatter_setZeroSymbol_C(NSNumberFormatter *_self, NSString* string);

// method '-[NSNumberFormatter stringFromNumber:]'
NSString* _IM_NSNumberFormatter_stringFromNumber_C(NSNumberFormatter *_self, NSNumber* number);

// method '-[NSNumberFormatter textAttributesForNegativeInfinity]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForNegativeInfinity(NSNumberFormatter *_self);

// method '-[NSNumberFormatter textAttributesForNegativeValues]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForNegativeValues(NSNumberFormatter *_self);

// method '-[NSNumberFormatter textAttributesForNil]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForNil(NSNumberFormatter *_self);

// method '-[NSNumberFormatter textAttributesForNotANumber]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForNotANumber(NSNumberFormatter *_self);

// method '-[NSNumberFormatter textAttributesForPositiveInfinity]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForPositiveInfinity(NSNumberFormatter *_self);

// method '-[NSNumberFormatter textAttributesForPositiveValues]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForPositiveValues(NSNumberFormatter *_self);

// method '-[NSNumberFormatter textAttributesForZero]'
NSDictionary* _IM_NSNumberFormatter_textAttributesForZero(NSNumberFormatter *_self);

// method '-[NSNumberFormatter thousandSeparator]'
NSString* _IM_NSNumberFormatter_thousandSeparator(NSNumberFormatter *_self);

// method '-[NSNumberFormatter usesGroupingSeparator]'
BOOL _IM_NSNumberFormatter_usesGroupingSeparator(NSNumberFormatter *_self);

// method '-[NSNumberFormatter zeroSymbol]'
NSString* _IM_NSNumberFormatter_zeroSymbol(NSNumberFormatter *_self);

// method '-[NSObject URL:resourceDataDidBecomeAvailable:]'
void _IM_NSObject_URL_CresourceDataDidBecomeAvailable_C(NSObject *_self, NSURL* sender, NSData* newBytes);

// method '-[NSObject URL:resourceDidFailLoadingWithReason:]'
void _IM_NSObject_URL_CresourceDidFailLoadingWithReason_C(NSObject *_self, NSURL* sender, NSString* reason);

// method '-[NSObject URLHandle:resourceDataDidBecomeAvailable:]'
void _IM_NSObject_URLHandle_CresourceDataDidBecomeAvailable_C(NSObject *_self, NSURLHandle* sender, NSData* newBytes);

// method '-[NSObject URLHandle:resourceDidFailLoadingWithReason:]'
void _IM_NSObject_URLHandle_CresourceDidFailLoadingWithReason_C(NSObject *_self, NSURLHandle* sender, NSString* reason);

// method '-[NSObject URLHandleResourceDidBeginLoading:]'
void _IM_NSObject_URLHandleResourceDidBeginLoading_C(NSObject *_self, NSURLHandle* sender);

// method '-[NSObject URLHandleResourceDidCancelLoading:]'
void _IM_NSObject_URLHandleResourceDidCancelLoading_C(NSObject *_self, NSURLHandle* sender);

// method '-[NSObject URLHandleResourceDidFinishLoading:]'
void _IM_NSObject_URLHandleResourceDidFinishLoading_C(NSObject *_self, NSURLHandle* sender);

// method '-[NSObject URLProtocol:cachedResponseIsValid:]'
void _IM_NSObject_URLProtocol_CcachedResponseIsValid_C(NSObject *_self, NSURLProtocol* protocol, NSCachedURLResponse* cachedResponse);

// method '-[NSObject URLProtocol:didCancelAuthenticationChallenge:]'
void _IM_NSObject_URLProtocol_CdidCancelAuthenticationChallenge_C(NSObject *_self, NSURLProtocol* protocol, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject URLProtocol:didFailWithError:]'
void _IM_NSObject_URLProtocol_CdidFailWithError_C(NSObject *_self, NSURLProtocol* protocol, NSError* error);

// method '-[NSObject URLProtocol:didLoadData:]'
void _IM_NSObject_URLProtocol_CdidLoadData_C(NSObject *_self, NSURLProtocol* protocol, NSData* data);

// method '-[NSObject URLProtocol:didReceiveAuthenticationChallenge:]'
void _IM_NSObject_URLProtocol_CdidReceiveAuthenticationChallenge_C(NSObject *_self, NSURLProtocol* protocol, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject URLProtocol:didReceiveResponse:cacheStoragePolicy:]'
void _IM_NSObject_URLProtocol_CdidReceiveResponse_CcacheStoragePolicy_C(NSObject *_self, NSURLProtocol* protocol, NSURLResponse* response, int policy);

// method '-[NSObject URLProtocol:wasRedirectedToRequest:redirectResponse:]'
void _IM_NSObject_URLProtocol_CwasRedirectedToRequest_CredirectResponse_C(NSObject *_self, NSURLProtocol* protocol, NSURLRequest* request, NSURLResponse* redirectResponse);

// method '-[NSObject URLProtocolDidFinishLoading:]'
void _IM_NSObject_URLProtocolDidFinishLoading_C(NSObject *_self, NSURLProtocol* protocol);

// method '-[NSObject URLResourceDidCancelLoading:]'
void _IM_NSObject_URLResourceDidCancelLoading_C(NSObject *_self, NSURL* sender);

// method '-[NSObject URLResourceDidFinishLoading:]'
void _IM_NSObject_URLResourceDidFinishLoading_C(NSObject *_self, NSURL* sender);

// method '+[NSObject accessInstanceVariablesDirectly]'
BOOL _CM_NSObject_accessInstanceVariablesDirectly(Class _class);

// method '-[NSObject addObserver:forKeyPath:options:context:]'
void _IM_NSObject_addObserver_CforKeyPath_Coptions_Ccontext_C(NSObject *_self, NSObject* observer, NSString* keyPath, unsigned int options, void *context);

// method '+[NSObject alloc]'
NSObject *_CM_NSObject_alloc(Class _class);

// method '+[NSObject allocWithZone:]'
NSObject *_CM_NSObject_allocWithZone_C(Class _class, struct _NSZone *zone);

// method '-[NSObject archiver:didEncodeObject:]'
void _IM_NSObject_archiver_CdidEncodeObject_C(NSObject *_self, NSKeyedArchiver* archiver, id object);

// method '-[NSObject archiver:willEncodeObject:]'
id _IM_NSObject_archiver_CwillEncodeObject_C(NSObject *_self, NSKeyedArchiver* archiver, id object);

// method '-[NSObject archiver:willReplaceObject:withObject:]'
void _IM_NSObject_archiver_CwillReplaceObject_CwithObject_C(NSObject *_self, NSKeyedArchiver* archiver, id object, id newObject);

// method '-[NSObject archiverDidFinish:]'
void _IM_NSObject_archiverDidFinish_C(NSObject *_self, NSKeyedArchiver* archiver);

// method '-[NSObject archiverWillFinish:]'
void _IM_NSObject_archiverWillFinish_C(NSObject *_self, NSKeyedArchiver* archiver);

// method '-[NSObject attemptRecoveryFromError:optionIndex:]'
BOOL _IM_NSObject_attemptRecoveryFromError_CoptionIndex_C(NSObject *_self, NSError* error, unsigned int recoveryOptionIndex);

// method '-[NSObject attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:]'
void _IM_NSObject_attemptRecoveryFromError_CoptionIndex_Cdelegate_CdidRecoverSelector_CcontextInfo_C(NSObject *_self, NSError* error, unsigned int recoveryOptionIndex, id delegate, SEL didRecoverSelector, void *contextInfo);

// method '-[NSObject attributeKeys]'
NSArray* _IM_NSObject_attributeKeys(NSObject *_self);

// method '-[NSObject authenticateComponents:withData:]'
BOOL _IM_NSObject_authenticateComponents_CwithData_C(NSObject *_self, NSArray* components, NSData* signature);

// method '-[NSObject authenticationDataForComponents:]'
NSData* _IM_NSObject_authenticationDataForComponents_C(NSObject *_self, NSArray* components);

// method '+[NSObject automaticallyNotifiesObserversForKey:]'
BOOL _CM_NSObject_automaticallyNotifiesObserversForKey_C(Class _class, NSString* key);

// method '-[NSObject autorelease]'
id _IM_NSObject_autorelease(NSObject *_self);

// method '-[NSObject awakeAfterUsingCoder:]'
id _IM_NSObject_awakeAfterUsingCoder_C(NSObject *_self, NSCoder* aDecoder);

// method '-[NSObject cancelAuthenticationChallenge:]'
void _IM_NSObject_cancelAuthenticationChallenge_C(NSObject *_self, NSURLAuthenticationChallenge* challenge);

// method '+[NSObject cancelPreviousPerformRequestsWithTarget:]'
void _CM_NSObject_cancelPreviousPerformRequestsWithTarget_C(Class _class, id aTarget);

// method '+[NSObject cancelPreviousPerformRequestsWithTarget:selector:object:]'
void _CM_NSObject_cancelPreviousPerformRequestsWithTarget_Cselector_Cobject_C(Class _class, id aTarget, SEL aSelector, id anArgument);

// method '+[NSObject class]'
Class _CM_NSObject_class(Class _class);

// method '-[NSObject class]'
Class _IM_NSObject_class(NSObject *_self);

// method '-[NSObject classCode]'
unsigned long _IM_NSObject_classCode(NSObject *_self);

// method '-[NSObject classDescription]'
NSClassDescription* _IM_NSObject_classDescription(NSObject *_self);

// method '+[NSObject classFallbacksForKeyedArchiver]'
NSArray* _CM_NSObject_classFallbacksForKeyedArchiver(Class _class);

// method '-[NSObject classForArchiver]'
Class _IM_NSObject_classForArchiver(NSObject *_self);

// method '-[NSObject classForCoder]'
Class _IM_NSObject_classForCoder(NSObject *_self);

// method '-[NSObject classForKeyedArchiver]'
Class _IM_NSObject_classForKeyedArchiver(NSObject *_self);

// method '+[NSObject classForKeyedUnarchiver]'
Class _CM_NSObject_classForKeyedUnarchiver(Class _class);

// method '-[NSObject classForPortCoder]'
Class _IM_NSObject_classForPortCoder(NSObject *_self);

// method '-[NSObject className]'
NSString* _IM_NSObject_className(NSObject *_self);

// method '-[NSObject coerceValue:forKey:]'
id _IM_NSObject_coerceValue_CforKey_C(NSObject *_self, id value, NSString* key);

// method '+[NSObject conformsToProtocol:]'
BOOL _CM_NSObject_conformsToProtocol_C(Class _class, id protocol);

// method '-[NSObject conformsToProtocol:]'
BOOL _IM_NSObject_conformsToProtocol_C(NSObject *_self, id aProtocol);

// method '-[NSObject connection:didCancelAuthenticationChallenge:]'
void _IM_NSObject_connection_CdidCancelAuthenticationChallenge_C(NSObject *_self, NSURLConnection* connection, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject connection:didFailWithError:]'
void _IM_NSObject_connection_CdidFailWithError_C(NSObject *_self, NSURLConnection* connection, NSError* error);

// method '-[NSObject connection:didReceiveAuthenticationChallenge:]'
void _IM_NSObject_connection_CdidReceiveAuthenticationChallenge_C(NSObject *_self, NSURLConnection* connection, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject connection:didReceiveData:]'
void _IM_NSObject_connection_CdidReceiveData_C(NSObject *_self, NSURLConnection* connection, NSData* data);

// method '-[NSObject connection:didReceiveResponse:]'
void _IM_NSObject_connection_CdidReceiveResponse_C(NSObject *_self, NSURLConnection* connection, NSURLResponse* response);

// method '-[NSObject connection:handleRequest:]'
BOOL _IM_NSObject_connection_ChandleRequest_C(NSObject *_self, NSConnection* connection, NSDistantObjectRequest* doreq);

// method '-[NSObject connection:shouldMakeNewConnection:]'
BOOL _IM_NSObject_connection_CshouldMakeNewConnection_C(NSObject *_self, NSConnection* ancestor, NSConnection* conn);

// method '-[NSObject connection:willCacheResponse:]'
NSCachedURLResponse* _IM_NSObject_connection_CwillCacheResponse_C(NSObject *_self, NSURLConnection* connection, NSCachedURLResponse* cachedResponse);

// method '-[NSObject connection:willSendRequest:redirectResponse:]'
NSURLRequest* _IM_NSObject_connection_CwillSendRequest_CredirectResponse_C(NSObject *_self, NSURLConnection* connection, NSURLRequest* request, NSURLResponse* response);

// method '-[NSObject connectionDidFinishLoading:]'
void _IM_NSObject_connectionDidFinishLoading_C(NSObject *_self, NSURLConnection* connection);

// method '-[NSObject continueWithoutCredentialForAuthenticationChallenge:]'
void _IM_NSObject_continueWithoutCredentialForAuthenticationChallenge_C(NSObject *_self, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject copy]'
id _IM_NSObject_copy(NSObject *_self);

// method '+[NSObject copyWithZone:]'
id _CM_NSObject_copyWithZone_C(Class _class, struct _NSZone *zone);

// method '-[NSObject copyWithZone:]'
id _IM_NSObject_copyWithZone_C(NSObject *_self, struct _NSZone *zone);

// method '-[NSObject createConversationForConnection:]'
id _IM_NSObject_createConversationForConnection_C(NSObject *_self, NSConnection* conn);

// method '-[NSObject dealloc]'
void _IM_NSObject_dealloc(NSObject *_self);

// method '+[NSObject description]'
NSString* _CM_NSObject_description(Class _class);

// method '-[NSObject description]'
NSString* _IM_NSObject_description(NSObject *_self);

// method '-[NSObject dictionaryWithValuesForKeys:]'
NSDictionary* _IM_NSObject_dictionaryWithValuesForKeys_C(NSObject *_self, NSArray* keys);

// method '-[NSObject didChange:valuesAtIndexes:forKey:]'
void _IM_NSObject_didChange_CvaluesAtIndexes_CforKey_C(NSObject *_self, int changeKind, NSIndexSet* indexes, NSString* key);

// method '-[NSObject didChangeValueForKey:]'
void _IM_NSObject_didChangeValueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject didChangeValueForKey:withSetMutation:usingObjects:]'
void _IM_NSObject_didChangeValueForKey_CwithSetMutation_CusingObjects_C(NSObject *_self, NSString* key, int mutationKind, NSSet* objects);

// method '-[NSObject doesContain:]'
BOOL _IM_NSObject_doesContain_C(NSObject *_self, id object);

// method '-[NSObject doesNotRecognizeSelector:]'
void _IM_NSObject_doesNotRecognizeSelector_C(NSObject *_self, SEL aSelector);

// method '-[NSObject download:decideDestinationWithSuggestedFilename:]'
void _IM_NSObject_download_CdecideDestinationWithSuggestedFilename_C(NSObject *_self, NSURLDownload* download, NSString* filename);

// method '-[NSObject download:didCancelAuthenticationChallenge:]'
void _IM_NSObject_download_CdidCancelAuthenticationChallenge_C(NSObject *_self, NSURLDownload* download, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject download:didCreateDestination:]'
void _IM_NSObject_download_CdidCreateDestination_C(NSObject *_self, NSURLDownload* download, NSString* path);

// method '-[NSObject download:didFailWithError:]'
void _IM_NSObject_download_CdidFailWithError_C(NSObject *_self, NSURLDownload* download, NSError* error);

// method '-[NSObject download:didReceiveAuthenticationChallenge:]'
void _IM_NSObject_download_CdidReceiveAuthenticationChallenge_C(NSObject *_self, NSURLDownload* download, NSURLAuthenticationChallenge* challenge);

// method '-[NSObject download:didReceiveDataOfLength:]'
void _IM_NSObject_download_CdidReceiveDataOfLength_C(NSObject *_self, NSURLDownload* download, unsigned int length);

// method '-[NSObject download:didReceiveResponse:]'
void _IM_NSObject_download_CdidReceiveResponse_C(NSObject *_self, NSURLDownload* download, NSURLResponse* response);

// method '-[NSObject download:shouldDecodeSourceDataOfMIMEType:]'
BOOL _IM_NSObject_download_CshouldDecodeSourceDataOfMIMEType_C(NSObject *_self, NSURLDownload* download, NSString* encodingType);

// method '-[NSObject download:willResumeWithResponse:fromByte:]'
void _IM_NSObject_download_CwillResumeWithResponse_CfromByte_C(NSObject *_self, NSURLDownload* download, NSURLResponse* response, long long startingByte);

// method '-[NSObject download:willSendRequest:redirectResponse:]'
NSURLRequest* _IM_NSObject_download_CwillSendRequest_CredirectResponse_C(NSObject *_self, NSURLDownload* download, NSURLRequest* request, NSURLResponse* redirectResponse);

// method '-[NSObject downloadDidBegin:]'
void _IM_NSObject_downloadDidBegin_C(NSObject *_self, NSURLDownload* download);

// method '-[NSObject downloadDidFinish:]'
void _IM_NSObject_downloadDidFinish_C(NSObject *_self, NSURLDownload* download);

// method '-[NSObject encodeWithCoder:]'
void _IM_NSObject_encodeWithCoder_C(NSObject *_self, NSCoder* aCoder);

// method '-[NSObject exceptionDuringOperation:error:leftOperand:rightOperand:]'
NSDecimalNumber* _IM_NSObject_exceptionDuringOperation_Cerror_CleftOperand_CrightOperand_C(NSObject *_self, SEL operation, int error, NSDecimalNumber* leftOperand, NSDecimalNumber* rightOperand);

// method '-[NSObject fileManager:shouldProceedAfterError:]'
BOOL _IM_NSObject_fileManager_CshouldProceedAfterError_C(NSObject *_self, NSFileManager* fm, NSDictionary* errorInfo);

// method '-[NSObject fileManager:willProcessPath:]'
void _IM_NSObject_fileManager_CwillProcessPath_C(NSObject *_self, NSFileManager* fm, NSString* path);

// method '-[NSObject finalize]'
void _IM_NSObject_finalize(NSObject *_self);

// method '-[NSObject forwardInvocation:]'
void _IM_NSObject_forwardInvocation_C(NSObject *_self, NSInvocation* anInvocation);

// method '-[NSObject handleMachMessage:]'
void _IM_NSObject_handleMachMessage_C(NSObject *_self, void *msg);

// method '-[NSObject handlePortMessage:]'
void _IM_NSObject_handlePortMessage_C(NSObject *_self, NSPortMessage* message);

// method '-[NSObject handleQueryWithUnboundKey:]'
id _IM_NSObject_handleQueryWithUnboundKey_C(NSObject *_self, NSString* key);

// method '-[NSObject handleTakeValue:forUnboundKey:]'
void _IM_NSObject_handleTakeValue_CforUnboundKey_C(NSObject *_self, id value, NSString* key);

// method '-[NSObject hash]'
unsigned int _IM_NSObject_hash(NSObject *_self);

// method '-[NSObject indicesOfObjectsByEvaluatingObjectSpecifier:]'
NSArray* _IM_NSObject_indicesOfObjectsByEvaluatingObjectSpecifier_C(NSObject *_self, NSScriptObjectSpecifier* specifier);

// method '-[NSObject init]'
NSObject *_IM_NSObject_init(NSObject *_self);

// method '-[NSObject initWithCoder:]'
NSObject *_IM_NSObject_initWithCoder_C(NSObject *_self, NSCoder* aDecoder);

// method '+[NSObject initialize]'
void _CM_NSObject_initialize(Class _class);

// method '-[NSObject insertValue:atIndex:inPropertyWithKey:]'
void _IM_NSObject_insertValue_CatIndex_CinPropertyWithKey_C(NSObject *_self, id value, unsigned int index, NSString* key);

// method '-[NSObject insertValue:inPropertyWithKey:]'
void _IM_NSObject_insertValue_CinPropertyWithKey_C(NSObject *_self, id value, NSString* key);

// method '+[NSObject instanceMethodSignatureForSelector:]'
NSMethodSignature* _CM_NSObject_instanceMethodSignatureForSelector_C(Class _class, SEL aSelector);

// method '+[NSObject instancesRespondToSelector:]'
BOOL _CM_NSObject_instancesRespondToSelector_C(Class _class, SEL aSelector);

// method '-[NSObject inverseForRelationshipKey:]'
NSString* _IM_NSObject_inverseForRelationshipKey_C(NSObject *_self, NSString* relationshipKey);

// method '-[NSObject isCaseInsensitiveLike:]'
BOOL _IM_NSObject_isCaseInsensitiveLike_C(NSObject *_self, NSString* object);

// method '-[NSObject isEqual:]'
BOOL _IM_NSObject_isEqual_C(NSObject *_self, id object);

// method '-[NSObject isEqualTo:]'
BOOL _IM_NSObject_isEqualTo_C(NSObject *_self, id object);

// method '-[NSObject isGreaterThan:]'
BOOL _IM_NSObject_isGreaterThan_C(NSObject *_self, id object);

// method '-[NSObject isGreaterThanOrEqualTo:]'
BOOL _IM_NSObject_isGreaterThanOrEqualTo_C(NSObject *_self, id object);

// method '-[NSObject isKindOfClass:]'
BOOL _IM_NSObject_isKindOfClass_C(NSObject *_self, Class aClass);

// method '-[NSObject isLessThan:]'
BOOL _IM_NSObject_isLessThan_C(NSObject *_self, id object);

// method '-[NSObject isLessThanOrEqualTo:]'
BOOL _IM_NSObject_isLessThanOrEqualTo_C(NSObject *_self, id object);

// method '-[NSObject isLike:]'
BOOL _IM_NSObject_isLike_C(NSObject *_self, NSString* object);

// method '-[NSObject isMemberOfClass:]'
BOOL _IM_NSObject_isMemberOfClass_C(NSObject *_self, Class aClass);

// method '-[NSObject isNotEqualTo:]'
BOOL _IM_NSObject_isNotEqualTo_C(NSObject *_self, id object);

// method '-[NSObject isProxy]'
BOOL _IM_NSObject_isProxy(NSObject *_self);

// method '+[NSObject isSubclassOfClass:]'
BOOL _CM_NSObject_isSubclassOfClass_C(Class _class, Class aClass);

// method '+[NSObject load]'
void _CM_NSObject_load(Class _class);

// method '-[NSObject lock]'
void _IM_NSObject_lock(NSObject *_self);

// method '-[NSObject makeNewConnection:sender:]'
BOOL _IM_NSObject_makeNewConnection_Csender_C(NSObject *_self, NSConnection* conn, NSConnection* ancestor);

// method '-[NSObject metadataQuery:replacementObjectForResultObject:]'
id _IM_NSObject_metadataQuery_CreplacementObjectForResultObject_C(NSObject *_self, NSMetadataQuery* query, NSMetadataItem* result);

// method '-[NSObject metadataQuery:replacementValueForAttribute:value:]'
id _IM_NSObject_metadataQuery_CreplacementValueForAttribute_Cvalue_C(NSObject *_self, NSMetadataQuery* query, NSString* attrName, id attrValue);

// method '-[NSObject methodSignatureForSelector:]'
NSMethodSignature* _IM_NSObject_methodSignatureForSelector_C(NSObject *_self, SEL aSelector);

// method '-[NSObject mutableArrayValueForKey:]'
NSMutableArray* _IM_NSObject_mutableArrayValueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject mutableArrayValueForKeyPath:]'
NSMutableArray* _IM_NSObject_mutableArrayValueForKeyPath_C(NSObject *_self, NSString* keyPath);

// method '-[NSObject mutableCopy]'
id _IM_NSObject_mutableCopy(NSObject *_self);

// method '+[NSObject mutableCopyWithZone:]'
id _CM_NSObject_mutableCopyWithZone_C(Class _class, struct _NSZone *zone);

// method '-[NSObject mutableCopyWithZone:]'
id _IM_NSObject_mutableCopyWithZone_C(NSObject *_self, struct _NSZone *zone);

// method '-[NSObject mutableSetValueForKey:]'
NSMutableSet* _IM_NSObject_mutableSetValueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject mutableSetValueForKeyPath:]'
NSMutableSet* _IM_NSObject_mutableSetValueForKeyPath_C(NSObject *_self, NSString* keyPath);

// method '-[NSObject netService:didNotPublish:]'
void _IM_NSObject_netService_CdidNotPublish_C(NSObject *_self, NSNetService* sender, NSDictionary* errorDict);

// method '-[NSObject netService:didNotResolve:]'
void _IM_NSObject_netService_CdidNotResolve_C(NSObject *_self, NSNetService* sender, NSDictionary* errorDict);

// method '-[NSObject netService:didUpdateTXTRecordData:]'
void _IM_NSObject_netService_CdidUpdateTXTRecordData_C(NSObject *_self, NSNetService* sender, NSData* data);

// method '-[NSObject netServiceBrowser:didFindDomain:moreComing:]'
void _IM_NSObject_netServiceBrowser_CdidFindDomain_CmoreComing_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser, NSString* domainString, BOOL moreComing);

// method '-[NSObject netServiceBrowser:didFindService:moreComing:]'
void _IM_NSObject_netServiceBrowser_CdidFindService_CmoreComing_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser, NSNetService* aNetService, BOOL moreComing);

// method '-[NSObject netServiceBrowser:didNotSearch:]'
void _IM_NSObject_netServiceBrowser_CdidNotSearch_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser, NSDictionary* errorDict);

// method '-[NSObject netServiceBrowser:didRemoveDomain:moreComing:]'
void _IM_NSObject_netServiceBrowser_CdidRemoveDomain_CmoreComing_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser, NSString* domainString, BOOL moreComing);

// method '-[NSObject netServiceBrowser:didRemoveService:moreComing:]'
void _IM_NSObject_netServiceBrowser_CdidRemoveService_CmoreComing_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser, NSNetService* aNetService, BOOL moreComing);

// method '-[NSObject netServiceBrowserDidStopSearch:]'
void _IM_NSObject_netServiceBrowserDidStopSearch_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser);

// method '-[NSObject netServiceBrowserWillSearch:]'
void _IM_NSObject_netServiceBrowserWillSearch_C(NSObject *_self, NSNetServiceBrowser* aNetServiceBrowser);

// method '-[NSObject netServiceDidPublish:]'
void _IM_NSObject_netServiceDidPublish_C(NSObject *_self, NSNetService* sender);

// method '-[NSObject netServiceDidResolveAddress:]'
void _IM_NSObject_netServiceDidResolveAddress_C(NSObject *_self, NSNetService* sender);

// method '-[NSObject netServiceDidStop:]'
void _IM_NSObject_netServiceDidStop_C(NSObject *_self, NSNetService* sender);

// method '-[NSObject netServiceWillPublish:]'
void _IM_NSObject_netServiceWillPublish_C(NSObject *_self, NSNetService* sender);

// method '-[NSObject netServiceWillResolve:]'
void _IM_NSObject_netServiceWillResolve_C(NSObject *_self, NSNetService* sender);

// method '+[NSObject new]'
NSObject *_CM_NSObject_new(Class _class);

// method '-[NSObject objectSpecifier]'
NSScriptObjectSpecifier* _IM_NSObject_objectSpecifier(NSObject *_self);

// method '-[NSObject observationInfo]'
void *_IM_NSObject_observationInfo(NSObject *_self);

// method '-[NSObject observeValueForKeyPath:ofObject:change:context:]'
void _IM_NSObject_observeValueForKeyPath_CofObject_Cchange_Ccontext_C(NSObject *_self, NSString* keyPath, id object, NSDictionary* change, void *context);

// method '-[NSObject parser:didEndElement:namespaceURI:qualifiedName:]'
void _IM_NSObject_parser_CdidEndElement_CnamespaceURI_CqualifiedName_C(NSObject *_self, NSXMLParser* parser, NSString* elementName, NSString* namespaceURI, NSString* qName);

// method '-[NSObject parser:didEndMappingPrefix:]'
void _IM_NSObject_parser_CdidEndMappingPrefix_C(NSObject *_self, NSXMLParser* parser, NSString* prefix);

// method '-[NSObject parser:didStartElement:namespaceURI:qualifiedName:attributes:]'
void _IM_NSObject_parser_CdidStartElement_CnamespaceURI_CqualifiedName_Cattributes_C(NSObject *_self, NSXMLParser* parser, NSString* elementName, NSString* namespaceURI, NSString* qName, NSDictionary* attributeDict);

// method '-[NSObject parser:didStartMappingPrefix:toURI:]'
void _IM_NSObject_parser_CdidStartMappingPrefix_CtoURI_C(NSObject *_self, NSXMLParser* parser, NSString* prefix, NSString* namespaceURI);

// method '-[NSObject parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:]'
void _IM_NSObject_parser_CfoundAttributeDeclarationWithName_CforElement_Ctype_CdefaultValue_C(NSObject *_self, NSXMLParser* parser, NSString* attributeName, NSString* elementName, NSString* type, NSString* defaultValue);

// method '-[NSObject parser:foundCDATA:]'
void _IM_NSObject_parser_CfoundCDATA_C(NSObject *_self, NSXMLParser* parser, NSData* CDATABlock);

// method '-[NSObject parser:foundCharacters:]'
void _IM_NSObject_parser_CfoundCharacters_C(NSObject *_self, NSXMLParser* parser, NSString* string);

// method '-[NSObject parser:foundComment:]'
void _IM_NSObject_parser_CfoundComment_C(NSObject *_self, NSXMLParser* parser, NSString* comment);

// method '-[NSObject parser:foundElementDeclarationWithName:model:]'
void _IM_NSObject_parser_CfoundElementDeclarationWithName_Cmodel_C(NSObject *_self, NSXMLParser* parser, NSString* elementName, NSString* model);

// method '-[NSObject parser:foundExternalEntityDeclarationWithName:publicID:systemID:]'
void _IM_NSObject_parser_CfoundExternalEntityDeclarationWithName_CpublicID_CsystemID_C(NSObject *_self, NSXMLParser* parser, NSString* name, NSString* publicID, NSString* systemID);

// method '-[NSObject parser:foundIgnorableWhitespace:]'
void _IM_NSObject_parser_CfoundIgnorableWhitespace_C(NSObject *_self, NSXMLParser* parser, NSString* whitespaceString);

// method '-[NSObject parser:foundInternalEntityDeclarationWithName:value:]'
void _IM_NSObject_parser_CfoundInternalEntityDeclarationWithName_Cvalue_C(NSObject *_self, NSXMLParser* parser, NSString* name, NSString* value);

// method '-[NSObject parser:foundNotationDeclarationWithName:publicID:systemID:]'
void _IM_NSObject_parser_CfoundNotationDeclarationWithName_CpublicID_CsystemID_C(NSObject *_self, NSXMLParser* parser, NSString* name, NSString* publicID, NSString* systemID);

// method '-[NSObject parser:foundProcessingInstructionWithTarget:data:]'
void _IM_NSObject_parser_CfoundProcessingInstructionWithTarget_Cdata_C(NSObject *_self, NSXMLParser* parser, NSString* target, NSString* data);

// method '-[NSObject parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:]'
void _IM_NSObject_parser_CfoundUnparsedEntityDeclarationWithName_CpublicID_CsystemID_CnotationName_C(NSObject *_self, NSXMLParser* parser, NSString* name, NSString* publicID, NSString* systemID, NSString* notationName);

// method '-[NSObject parser:parseErrorOccurred:]'
void _IM_NSObject_parser_CparseErrorOccurred_C(NSObject *_self, NSXMLParser* parser, NSError* parseError);

// method '-[NSObject parser:resolveExternalEntityName:systemID:]'
NSData* _IM_NSObject_parser_CresolveExternalEntityName_CsystemID_C(NSObject *_self, NSXMLParser* parser, NSString* name, NSString* systemID);

// method '-[NSObject parser:validationErrorOccurred:]'
void _IM_NSObject_parser_CvalidationErrorOccurred_C(NSObject *_self, NSXMLParser* parser, NSError* validationError);

// method '-[NSObject parserDidEndDocument:]'
void _IM_NSObject_parserDidEndDocument_C(NSObject *_self, NSXMLParser* parser);

// method '-[NSObject parserDidStartDocument:]'
void _IM_NSObject_parserDidStartDocument_C(NSObject *_self, NSXMLParser* parser);

// method '-[NSObject performSelector:]'
id _IM_NSObject_performSelector_C(NSObject *_self, SEL aSelector);

// method '-[NSObject performSelector:withObject:]'
id _IM_NSObject_performSelector_CwithObject_C(NSObject *_self, SEL aSelector, id object);

// method '-[NSObject performSelector:withObject:afterDelay:]'
void _IM_NSObject_performSelector_CwithObject_CafterDelay_C(NSObject *_self, SEL aSelector, id anArgument, double delay);

// method '-[NSObject performSelector:withObject:afterDelay:inModes:]'
void _IM_NSObject_performSelector_CwithObject_CafterDelay_CinModes_C(NSObject *_self, SEL aSelector, id anArgument, double delay, NSArray* modes);

// method '-[NSObject performSelector:withObject:withObject:]'
id _IM_NSObject_performSelector_CwithObject_CwithObject_C(NSObject *_self, SEL aSelector, id object1, id object2);

// method '-[NSObject performSelectorOnMainThread:withObject:waitUntilDone:]'
void _IM_NSObject_performSelectorOnMainThread_CwithObject_CwaitUntilDone_C(NSObject *_self, SEL aSelector, id arg, BOOL wait);

// method '-[NSObject performSelectorOnMainThread:withObject:waitUntilDone:modes:]'
void _IM_NSObject_performSelectorOnMainThread_CwithObject_CwaitUntilDone_Cmodes_C(NSObject *_self, SEL aSelector, id arg, BOOL wait, NSArray* array);

// method '+[NSObject poseAsClass:]'
void _CM_NSObject_poseAsClass_C(Class _class, Class aClass);

// method '-[NSObject release]'
void _IM_NSObject_release(NSObject *_self);

// method '-[NSObject removeObserver:forKeyPath:]'
void _IM_NSObject_removeObserver_CforKeyPath_C(NSObject *_self, NSObject* observer, NSString* keyPath);

// method '-[NSObject removeValueAtIndex:fromPropertyWithKey:]'
void _IM_NSObject_removeValueAtIndex_CfromPropertyWithKey_C(NSObject *_self, unsigned int index, NSString* key);

// method '-[NSObject replaceValueAtIndex:inPropertyWithKey:withValue:]'
void _IM_NSObject_replaceValueAtIndex_CinPropertyWithKey_CwithValue_C(NSObject *_self, unsigned int index, NSString* key, id value);

// method '-[NSObject replacementObjectForArchiver:]'
id _IM_NSObject_replacementObjectForArchiver_C(NSObject *_self, NSArchiver* archiver);

// method '-[NSObject replacementObjectForCoder:]'
id _IM_NSObject_replacementObjectForCoder_C(NSObject *_self, NSCoder* aCoder);

// method '-[NSObject replacementObjectForKeyedArchiver:]'
id _IM_NSObject_replacementObjectForKeyedArchiver_C(NSObject *_self, NSKeyedArchiver* archiver);

// method '-[NSObject replacementObjectForPortCoder:]'
id _IM_NSObject_replacementObjectForPortCoder_C(NSObject *_self, NSPortCoder* coder);

// method '-[NSObject respondsToSelector:]'
BOOL _IM_NSObject_respondsToSelector_C(NSObject *_self, SEL aSelector);

// method '-[NSObject retain]'
id _IM_NSObject_retain(NSObject *_self);

// method '-[NSObject retainCount]'
unsigned int _IM_NSObject_retainCount(NSObject *_self);

// method '-[NSObject roundingMode]'
int _IM_NSObject_roundingMode(NSObject *_self);

// method '-[NSObject scale]'
short _IM_NSObject_scale(NSObject *_self);

// method '-[NSObject scriptingBeginsWith:]'
BOOL _IM_NSObject_scriptingBeginsWith_C(NSObject *_self, id object);

// method '-[NSObject scriptingContains:]'
BOOL _IM_NSObject_scriptingContains_C(NSObject *_self, id object);

// method '-[NSObject scriptingEndsWith:]'
BOOL _IM_NSObject_scriptingEndsWith_C(NSObject *_self, id object);

// method '-[NSObject scriptingIsEqualTo:]'
BOOL _IM_NSObject_scriptingIsEqualTo_C(NSObject *_self, id object);

// method '-[NSObject scriptingIsGreaterThan:]'
BOOL _IM_NSObject_scriptingIsGreaterThan_C(NSObject *_self, id object);

// method '-[NSObject scriptingIsGreaterThanOrEqualTo:]'
BOOL _IM_NSObject_scriptingIsGreaterThanOrEqualTo_C(NSObject *_self, id object);

// method '-[NSObject scriptingIsLessThan:]'
BOOL _IM_NSObject_scriptingIsLessThan_C(NSObject *_self, id object);

// method '-[NSObject scriptingIsLessThanOrEqualTo:]'
BOOL _IM_NSObject_scriptingIsLessThanOrEqualTo_C(NSObject *_self, id object);

// method '-[NSObject scriptingProperties]'
NSDictionary* _IM_NSObject_scriptingProperties(NSObject *_self);

// method '-[NSObject self]'
id _IM_NSObject_self(NSObject *_self);

// method '+[NSObject setKeys:triggerChangeNotificationsForDependentKey:]'
void _CM_NSObject_setKeys_CtriggerChangeNotificationsForDependentKey_C(Class _class, NSArray* keys, NSString* dependentKey);

// method '-[NSObject setNilValueForKey:]'
void _IM_NSObject_setNilValueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject setObservationInfo:]'
void _IM_NSObject_setObservationInfo_C(NSObject *_self, void *observationInfo);

// method '-[NSObject setScriptingProperties:]'
void _IM_NSObject_setScriptingProperties_C(NSObject *_self, NSDictionary* properties);

// method '-[NSObject setValue:forKey:]'
void _IM_NSObject_setValue_CforKey_C(NSObject *_self, id value, NSString* key);

// method '-[NSObject setValue:forKeyPath:]'
void _IM_NSObject_setValue_CforKeyPath_C(NSObject *_self, id value, NSString* keyPath);

// method '-[NSObject setValue:forUndefinedKey:]'
void _IM_NSObject_setValue_CforUndefinedKey_C(NSObject *_self, id value, NSString* key);

// method '-[NSObject setValuesForKeysWithDictionary:]'
void _IM_NSObject_setValuesForKeysWithDictionary_C(NSObject *_self, NSDictionary* keyedValues);

// method '+[NSObject setVersion:]'
void _CM_NSObject_setVersion_C(Class _class, int aVersion);

// method '-[NSObject spellServer:didForgetWord:inLanguage:]'
void _IM_NSObject_spellServer_CdidForgetWord_CinLanguage_C(NSObject *_self, NSSpellServer* sender, NSString* word, NSString* language);

// method '-[NSObject spellServer:didLearnWord:inLanguage:]'
void _IM_NSObject_spellServer_CdidLearnWord_CinLanguage_C(NSObject *_self, NSSpellServer* sender, NSString* word, NSString* language);

// method '-[NSObject spellServer:findMisspelledWordInString:language:wordCount:countOnly:]'
struct _NSRange _IM_NSObject_spellServer_CfindMisspelledWordInString_Clanguage_CwordCount_CcountOnly_C(NSObject *_self, NSSpellServer* sender, NSString* stringToCheck, NSString* language, int *wordCount, BOOL countOnly);

// method '-[NSObject spellServer:suggestCompletionsForPartialWordRange:inString:language:]'
NSArray* _IM_NSObject_spellServer_CsuggestCompletionsForPartialWordRange_CinString_Clanguage_C(NSObject *_self, NSSpellServer* sender, struct _NSRange range, NSString* string, NSString* language);

// method '-[NSObject spellServer:suggestGuessesForWord:inLanguage:]'
NSArray* _IM_NSObject_spellServer_CsuggestGuessesForWord_CinLanguage_C(NSObject *_self, NSSpellServer* sender, NSString* word, NSString* language);

// method '-[NSObject storedValueForKey:]'
id _IM_NSObject_storedValueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject stream:handleEvent:]'
void _IM_NSObject_stream_ChandleEvent_C(NSObject *_self, NSStream* aStream, int eventCode);

// method '+[NSObject superclass]'
Class _CM_NSObject_superclass(Class _class);

// method '-[NSObject superclass]'
Class _IM_NSObject_superclass(NSObject *_self);

// method '-[NSObject takeStoredValue:forKey:]'
void _IM_NSObject_takeStoredValue_CforKey_C(NSObject *_self, id value, NSString* key);

// method '-[NSObject takeValue:forKey:]'
void _IM_NSObject_takeValue_CforKey_C(NSObject *_self, id value, NSString* key);

// method '-[NSObject takeValue:forKeyPath:]'
void _IM_NSObject_takeValue_CforKeyPath_C(NSObject *_self, id value, NSString* keyPath);

// method '-[NSObject takeValuesFromDictionary:]'
void _IM_NSObject_takeValuesFromDictionary_C(NSObject *_self, NSDictionary* properties);

// method '-[NSObject toManyRelationshipKeys]'
NSArray* _IM_NSObject_toManyRelationshipKeys(NSObject *_self);

// method '-[NSObject toOneRelationshipKeys]'
NSArray* _IM_NSObject_toOneRelationshipKeys(NSObject *_self);

// method '-[NSObject unableToSetNilForKey:]'
void _IM_NSObject_unableToSetNilForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject unarchiver:cannotDecodeObjectOfClassName:originalClasses:]'
Class _IM_NSObject_unarchiver_CcannotDecodeObjectOfClassName_CoriginalClasses_C(NSObject *_self, NSKeyedUnarchiver* unarchiver, NSString* name, NSArray* classNames);

// method '-[NSObject unarchiver:didDecodeObject:]'
id _IM_NSObject_unarchiver_CdidDecodeObject_C(NSObject *_self, NSKeyedUnarchiver* unarchiver, id object);

// method '-[NSObject unarchiver:willReplaceObject:withObject:]'
void _IM_NSObject_unarchiver_CwillReplaceObject_CwithObject_C(NSObject *_self, NSKeyedUnarchiver* unarchiver, id object, id newObject);

// method '-[NSObject unarchiverDidFinish:]'
void _IM_NSObject_unarchiverDidFinish_C(NSObject *_self, NSKeyedUnarchiver* unarchiver);

// method '-[NSObject unarchiverWillFinish:]'
void _IM_NSObject_unarchiverWillFinish_C(NSObject *_self, NSKeyedUnarchiver* unarchiver);

// method '-[NSObject unlock]'
void _IM_NSObject_unlock(NSObject *_self);

// method '-[NSObject useCredential:forAuthenticationChallenge:]'
void _IM_NSObject_useCredential_CforAuthenticationChallenge_C(NSObject *_self, NSURLCredential* credential, NSURLAuthenticationChallenge* challenge);

// method '+[NSObject useStoredAccessor]'
BOOL _CM_NSObject_useStoredAccessor(Class _class);

// method '-[NSObject validateValue:forKey:error:]'
BOOL _IM_NSObject_validateValue_CforKey_Cerror_C(NSObject *_self, id *ioValue, NSString* inKey, id *outError);

// method '-[NSObject validateValue:forKeyPath:error:]'
BOOL _IM_NSObject_validateValue_CforKeyPath_Cerror_C(NSObject *_self, id *ioValue, NSString* inKeyPath, id *outError);

// method '-[NSObject valueAtIndex:inPropertyWithKey:]'
id _IM_NSObject_valueAtIndex_CinPropertyWithKey_C(NSObject *_self, unsigned int index, NSString* key);

// method '-[NSObject valueForKey:]'
id _IM_NSObject_valueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject valueForKeyPath:]'
id _IM_NSObject_valueForKeyPath_C(NSObject *_self, NSString* keyPath);

// method '-[NSObject valueForUndefinedKey:]'
id _IM_NSObject_valueForUndefinedKey_C(NSObject *_self, NSString* key);

// method '-[NSObject valueWithName:inPropertyWithKey:]'
id _IM_NSObject_valueWithName_CinPropertyWithKey_C(NSObject *_self, NSString* name, NSString* key);

// method '-[NSObject valueWithUniqueID:inPropertyWithKey:]'
id _IM_NSObject_valueWithUniqueID_CinPropertyWithKey_C(NSObject *_self, id uniqueID, NSString* key);

// method '-[NSObject valuesForKeys:]'
NSDictionary* _IM_NSObject_valuesForKeys_C(NSObject *_self, NSArray* keys);

// method '+[NSObject version]'
int _CM_NSObject_version(Class _class);

// method '-[NSObject willChange:valuesAtIndexes:forKey:]'
void _IM_NSObject_willChange_CvaluesAtIndexes_CforKey_C(NSObject *_self, int changeKind, NSIndexSet* indexes, NSString* key);

// method '-[NSObject willChangeValueForKey:]'
void _IM_NSObject_willChangeValueForKey_C(NSObject *_self, NSString* key);

// method '-[NSObject willChangeValueForKey:withSetMutation:usingObjects:]'
void _IM_NSObject_willChangeValueForKey_CwithSetMutation_CusingObjects_C(NSObject *_self, NSString* key, int mutationKind, NSSet* objects);

// method '-[NSObject zone]'
struct _NSZone *_IM_NSObject_zone(NSObject *_self);

// method '-[NSOutputStream hasSpaceAvailable]'
BOOL _IM_NSOutputStream_hasSpaceAvailable(NSOutputStream *_self);

// method '-[NSOutputStream initToBuffer:capacity:]'
NSOutputStream *_IM_NSOutputStream_initToBuffer_Ccapacity_C(NSOutputStream *_self, uint8_t* buffer, unsigned int capacity);

// method '-[NSOutputStream initToFileAtPath:append:]'
NSOutputStream *_IM_NSOutputStream_initToFileAtPath_Cappend_C(NSOutputStream *_self, NSString* path, BOOL shouldAppend);

// method '-[NSOutputStream initToMemory]'
NSOutputStream *_IM_NSOutputStream_initToMemory(NSOutputStream *_self);

// method '+[NSOutputStream outputStreamToBuffer:capacity:]'
id _CM_NSOutputStream_outputStreamToBuffer_Ccapacity_C(Class _class, uint8_t* buffer, unsigned int capacity);

// method '+[NSOutputStream outputStreamToFileAtPath:append:]'
id _CM_NSOutputStream_outputStreamToFileAtPath_Cappend_C(Class _class, NSString* path, BOOL shouldAppend);

// method '+[NSOutputStream outputStreamToMemory]'
id _CM_NSOutputStream_outputStreamToMemory(Class _class);

// method '-[NSOutputStream write:maxLength:]'
int _IM_NSOutputStream_write_CmaxLength_C(NSOutputStream *_self, const uint8_t* buffer, unsigned int len);

// method '-[NSPipe fileHandleForReading]'
NSFileHandle* _IM_NSPipe_fileHandleForReading(NSPipe *_self);

// method '-[NSPipe fileHandleForWriting]'
NSFileHandle* _IM_NSPipe_fileHandleForWriting(NSPipe *_self);

// method '-[NSPipe init]'
NSPipe *_IM_NSPipe_init(NSPipe *_self);

// method '+[NSPipe pipe]'
id _CM_NSPipe_pipe(Class _class);

// method '-[NSPort addConnection:toRunLoop:forMode:]'
void _IM_NSPort_addConnection_CtoRunLoop_CforMode_C(NSPort *_self, NSConnection* conn, NSRunLoop* runLoop, NSString* mode);

// method '+[NSPort allocWithZone:]'
NSPort *_CM_NSPort_allocWithZone_C(Class _class, struct _NSZone *zone);

// method '-[NSPort delegate]'
id _IM_NSPort_delegate(NSPort *_self);

// method '-[NSPort invalidate]'
void _IM_NSPort_invalidate(NSPort *_self);

// method '-[NSPort isValid]'
BOOL _IM_NSPort_isValid(NSPort *_self);

// method '+[NSPort port]'
NSPort* _CM_NSPort_port(Class _class);

// method '-[NSPort removeConnection:fromRunLoop:forMode:]'
void _IM_NSPort_removeConnection_CfromRunLoop_CforMode_C(NSPort *_self, NSConnection* conn, NSRunLoop* runLoop, NSString* mode);

// method '-[NSPort removeFromRunLoop:forMode:]'
void _IM_NSPort_removeFromRunLoop_CforMode_C(NSPort *_self, NSRunLoop* runLoop, NSString* mode);

// method '-[NSPort reservedSpaceLength]'
unsigned int _IM_NSPort_reservedSpaceLength(NSPort *_self);

// method '-[NSPort scheduleInRunLoop:forMode:]'
void _IM_NSPort_scheduleInRunLoop_CforMode_C(NSPort *_self, NSRunLoop* runLoop, NSString* mode);

// method '-[NSPort sendBeforeDate:components:from:reserved:]'
BOOL _IM_NSPort_sendBeforeDate_Ccomponents_Cfrom_Creserved_C(NSPort *_self, NSDate* limitDate, NSMutableArray* components, NSPort* receivePort, unsigned int headerSpaceReserved);

// method '-[NSPort sendBeforeDate:msgid:components:from:reserved:]'
BOOL _IM_NSPort_sendBeforeDate_Cmsgid_Ccomponents_Cfrom_Creserved_C(NSPort *_self, NSDate* limitDate, unsigned int msgID, NSMutableArray* components, NSPort* receivePort, unsigned int headerSpaceReserved);

// method '-[NSPort setDelegate:]'
void _IM_NSPort_setDelegate_C(NSPort *_self, id anId);

// method '-[NSPortCoder connection]'
NSConnection* _IM_NSPortCoder_connection(NSPortCoder *_self);

// method '-[NSPortCoder decodePortObject]'
NSPort* _IM_NSPortCoder_decodePortObject(NSPortCoder *_self);

// method '-[NSPortCoder dispatch]'
void _IM_NSPortCoder_dispatch(NSPortCoder *_self);

// method '-[NSPortCoder encodePortObject:]'
void _IM_NSPortCoder_encodePortObject_C(NSPortCoder *_self, NSPort* aport);

// method '-[NSPortCoder initWithReceivePort:sendPort:components:]'
NSPortCoder *_IM_NSPortCoder_initWithReceivePort_CsendPort_Ccomponents_C(NSPortCoder *_self, NSPort* rcvPort, NSPort* sndPort, NSArray* comps);

// method '-[NSPortCoder isBycopy]'
BOOL _IM_NSPortCoder_isBycopy(NSPortCoder *_self);

// method '-[NSPortCoder isByref]'
BOOL _IM_NSPortCoder_isByref(NSPortCoder *_self);

// method '+[NSPortCoder portCoderWithReceivePort:sendPort:components:]'
id _CM_NSPortCoder_portCoderWithReceivePort_CsendPort_Ccomponents_C(Class _class, NSPort* rcvPort, NSPort* sndPort, NSArray* comps);

// method '-[NSPortMessage components]'
NSArray* _IM_NSPortMessage_components(NSPortMessage *_self);

// method '-[NSPortMessage initWithSendPort:receivePort:components:]'
NSPortMessage *_IM_NSPortMessage_initWithSendPort_CreceivePort_Ccomponents_C(NSPortMessage *_self, NSPort* sendPort, NSPort* replyPort, NSArray* components);

// method '-[NSPortMessage msgid]'
unsigned int _IM_NSPortMessage_msgid(NSPortMessage *_self);

// method '-[NSPortMessage receivePort]'
NSPort* _IM_NSPortMessage_receivePort(NSPortMessage *_self);

// method '-[NSPortMessage sendBeforeDate:]'
BOOL _IM_NSPortMessage_sendBeforeDate_C(NSPortMessage *_self, NSDate* date);

// method '-[NSPortMessage sendPort]'
NSPort* _IM_NSPortMessage_sendPort(NSPortMessage *_self);

// method '-[NSPortMessage setMsgid:]'
void _IM_NSPortMessage_setMsgid_C(NSPortMessage *_self, unsigned int msgid);

// method '-[NSPortNameServer portForName:]'
NSPort* _IM_NSPortNameServer_portForName_C(NSPortNameServer *_self, NSString* name);

// method '-[NSPortNameServer portForName:host:]'
NSPort* _IM_NSPortNameServer_portForName_Chost_C(NSPortNameServer *_self, NSString* name, NSString* host);

// method '-[NSPortNameServer registerPort:name:]'
BOOL _IM_NSPortNameServer_registerPort_Cname_C(NSPortNameServer *_self, NSPort* port, NSString* name);

// method '-[NSPortNameServer removePortForName:]'
BOOL _IM_NSPortNameServer_removePortForName_C(NSPortNameServer *_self, NSString* name);

// method '+[NSPortNameServer systemDefaultPortNameServer]'
NSPortNameServer* _CM_NSPortNameServer_systemDefaultPortNameServer(Class _class);

// method '-[NSPositionalSpecifier evaluate]'
void _IM_NSPositionalSpecifier_evaluate(NSPositionalSpecifier *_self);

// method '-[NSPositionalSpecifier initWithPosition:objectSpecifier:]'
NSPositionalSpecifier *_IM_NSPositionalSpecifier_initWithPosition_CobjectSpecifier_C(NSPositionalSpecifier *_self, int position, NSScriptObjectSpecifier* specifier);

// method '-[NSPositionalSpecifier insertionContainer]'
id _IM_NSPositionalSpecifier_insertionContainer(NSPositionalSpecifier *_self);

// method '-[NSPositionalSpecifier insertionIndex]'
int _IM_NSPositionalSpecifier_insertionIndex(NSPositionalSpecifier *_self);

// method '-[NSPositionalSpecifier insertionKey]'
NSString* _IM_NSPositionalSpecifier_insertionKey(NSPositionalSpecifier *_self);

// method '-[NSPositionalSpecifier insertionReplaces]'
BOOL _IM_NSPositionalSpecifier_insertionReplaces(NSPositionalSpecifier *_self);

// method '-[NSPositionalSpecifier setInsertionClassDescription:]'
void _IM_NSPositionalSpecifier_setInsertionClassDescription_C(NSPositionalSpecifier *_self, NSScriptClassDescription* classDescription);

// method '-[NSPredicate evaluateWithObject:]'
BOOL _IM_NSPredicate_evaluateWithObject_C(NSPredicate *_self, id object);

// method '-[NSPredicate predicateFormat]'
NSString* _IM_NSPredicate_predicateFormat(NSPredicate *_self);

// method '+[NSPredicate predicateWithFormat:argumentArray:]'
NSPredicate* _CM_NSPredicate_predicateWithFormat_CargumentArray_C(Class _class, NSString* predicateFormat, NSArray* arguments);

// method '-[NSPredicate predicateWithSubstitutionVariables:]'
NSPredicate* _IM_NSPredicate_predicateWithSubstitutionVariables_C(NSPredicate *_self, NSDictionary* variables);

// method '+[NSPredicate predicateWithValue:]'
NSPredicate* _CM_NSPredicate_predicateWithValue_C(Class _class, BOOL value);

// method '-[NSProcessInfo arguments]'
NSArray* _IM_NSProcessInfo_arguments(NSProcessInfo *_self);

// method '-[NSProcessInfo environment]'
NSDictionary* _IM_NSProcessInfo_environment(NSProcessInfo *_self);

// method '-[NSProcessInfo globallyUniqueString]'
NSString* _IM_NSProcessInfo_globallyUniqueString(NSProcessInfo *_self);

// method '-[NSProcessInfo hostName]'
NSString* _IM_NSProcessInfo_hostName(NSProcessInfo *_self);

// method '-[NSProcessInfo operatingSystem]'
unsigned int _IM_NSProcessInfo_operatingSystem(NSProcessInfo *_self);

// method '-[NSProcessInfo operatingSystemName]'
NSString* _IM_NSProcessInfo_operatingSystemName(NSProcessInfo *_self);

// method '-[NSProcessInfo operatingSystemVersionString]'
NSString* _IM_NSProcessInfo_operatingSystemVersionString(NSProcessInfo *_self);

// method '-[NSProcessInfo processIdentifier]'
int _IM_NSProcessInfo_processIdentifier(NSProcessInfo *_self);

// method '+[NSProcessInfo processInfo]'
NSProcessInfo* _CM_NSProcessInfo_processInfo(Class _class);

// method '-[NSProcessInfo processName]'
NSString* _IM_NSProcessInfo_processName(NSProcessInfo *_self);

// method '-[NSProcessInfo setProcessName:]'
void _IM_NSProcessInfo_setProcessName_C(NSProcessInfo *_self, NSString* newName);

// method '+[NSPropertyListSerialization dataFromPropertyList:format:errorDescription:]'
NSData* _CM_NSPropertyListSerialization_dataFromPropertyList_Cformat_CerrorDescription_C(Class _class, id plist, int format, id *errorString);

// method '+[NSPropertyListSerialization propertyList:isValidForFormat:]'
BOOL _CM_NSPropertyListSerialization_propertyList_CisValidForFormat_C(Class _class, id plist, int format);

// method '+[NSPropertyListSerialization propertyListFromData:mutabilityOption:format:errorDescription:]'
id _CM_NSPropertyListSerialization_propertyListFromData_CmutabilityOption_Cformat_CerrorDescription_C(Class _class, NSData* data, int opt, int *format, id *errorString);

// method '-[NSProtocolChecker initWithTarget:protocol:]'
NSProtocolChecker *_IM_NSProtocolChecker_initWithTarget_Cprotocol_C(NSProtocolChecker *_self, NSObject* anObject, id aProtocol);

// method '-[NSProtocolChecker protocol]'
id _IM_NSProtocolChecker_protocol(NSProtocolChecker *_self);

// method '+[NSProtocolChecker protocolCheckerWithTarget:protocol:]'
id _CM_NSProtocolChecker_protocolCheckerWithTarget_Cprotocol_C(Class _class, NSObject* anObject, id aProtocol);

// method '-[NSProtocolChecker target]'
NSObject* _IM_NSProtocolChecker_target(NSProtocolChecker *_self);

// method '+[NSProxy alloc]'
NSProxy *_CM_NSProxy_alloc(Class _class);

// method '+[NSProxy allocWithZone:]'
NSProxy *_CM_NSProxy_allocWithZone_C(Class _class, struct _NSZone *zone);

// method '+[NSProxy class]'
Class _CM_NSProxy_class(Class _class);

// method '-[NSProxy dealloc]'
void _IM_NSProxy_dealloc(NSProxy *_self);

// method '-[NSProxy description]'
NSString* _IM_NSProxy_description(NSProxy *_self);

// method '-[NSProxy forwardInvocation:]'
void _IM_NSProxy_forwardInvocation_C(NSProxy *_self, NSInvocation* invocation);

// method '-[NSProxy methodSignatureForSelector:]'
NSMethodSignature* _IM_NSProxy_methodSignatureForSelector_C(NSProxy *_self, SEL sel);

// method '+[NSProxy respondsToSelector:]'
BOOL _CM_NSProxy_respondsToSelector_C(Class _class, SEL aSelector);

// method '-[NSQuitCommand saveOptions]'
int _IM_NSQuitCommand_saveOptions(NSQuitCommand *_self);

// method '-[NSRangeSpecifier endSpecifier]'
NSScriptObjectSpecifier* _IM_NSRangeSpecifier_endSpecifier(NSRangeSpecifier *_self);

// method '-[NSRangeSpecifier initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:]'
NSRangeSpecifier *_IM_NSRangeSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_CstartSpecifier_CendSpecifier_C(NSRangeSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property, NSScriptObjectSpecifier* startSpec, NSScriptObjectSpecifier* endSpec);

// method '-[NSRangeSpecifier setEndSpecifier:]'
void _IM_NSRangeSpecifier_setEndSpecifier_C(NSRangeSpecifier *_self, NSScriptObjectSpecifier* endSpec);

// method '-[NSRangeSpecifier setStartSpecifier:]'
void _IM_NSRangeSpecifier_setStartSpecifier_C(NSRangeSpecifier *_self, NSScriptObjectSpecifier* startSpec);

// method '-[NSRangeSpecifier startSpecifier]'
NSScriptObjectSpecifier* _IM_NSRangeSpecifier_startSpecifier(NSRangeSpecifier *_self);

// method '-[NSRecursiveLock lockBeforeDate:]'
BOOL _IM_NSRecursiveLock_lockBeforeDate_C(NSRecursiveLock *_self, NSDate* limit);

// method '-[NSRecursiveLock tryLock]'
BOOL _IM_NSRecursiveLock_tryLock(NSRecursiveLock *_self);

// method '-[NSRelativeSpecifier baseSpecifier]'
NSScriptObjectSpecifier* _IM_NSRelativeSpecifier_baseSpecifier(NSRelativeSpecifier *_self);

// method '-[NSRelativeSpecifier initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:]'
NSRelativeSpecifier *_IM_NSRelativeSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_CrelativePosition_CbaseSpecifier_C(NSRelativeSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property, int relPos, NSScriptObjectSpecifier* baseSpecifier);

// method '-[NSRelativeSpecifier relativePosition]'
int _IM_NSRelativeSpecifier_relativePosition(NSRelativeSpecifier *_self);

// method '-[NSRelativeSpecifier setBaseSpecifier:]'
void _IM_NSRelativeSpecifier_setBaseSpecifier_C(NSRelativeSpecifier *_self, NSScriptObjectSpecifier* baseSpecifier);

// method '-[NSRelativeSpecifier setRelativePosition:]'
void _IM_NSRelativeSpecifier_setRelativePosition_C(NSRelativeSpecifier *_self, int relPos);

// method '-[NSRunLoop acceptInputForMode:beforeDate:]'
void _IM_NSRunLoop_acceptInputForMode_CbeforeDate_C(NSRunLoop *_self, NSString* mode, NSDate* limitDate);

// method '-[NSRunLoop addPort:forMode:]'
void _IM_NSRunLoop_addPort_CforMode_C(NSRunLoop *_self, NSPort* aPort, NSString* mode);

// method '-[NSRunLoop addTimer:forMode:]'
void _IM_NSRunLoop_addTimer_CforMode_C(NSRunLoop *_self, NSTimer* timer, NSString* mode);

// method '-[NSRunLoop cancelPerformSelector:target:argument:]'
void _IM_NSRunLoop_cancelPerformSelector_Ctarget_Cargument_C(NSRunLoop *_self, SEL aSelector, id target, id arg);

// method '-[NSRunLoop cancelPerformSelectorsWithTarget:]'
void _IM_NSRunLoop_cancelPerformSelectorsWithTarget_C(NSRunLoop *_self, id target);

// method '-[NSRunLoop configureAsServer]'
void _IM_NSRunLoop_configureAsServer(NSRunLoop *_self);

// method '-[NSRunLoop currentMode]'
NSString* _IM_NSRunLoop_currentMode(NSRunLoop *_self);

// method '+[NSRunLoop currentRunLoop]'
NSRunLoop* _CM_NSRunLoop_currentRunLoop(Class _class);

// method '-[NSRunLoop getCFRunLoop]'
struct __CFRunLoop *_IM_NSRunLoop_getCFRunLoop(NSRunLoop *_self);

// method '-[NSRunLoop limitDateForMode:]'
NSDate* _IM_NSRunLoop_limitDateForMode_C(NSRunLoop *_self, NSString* mode);

// method '-[NSRunLoop performSelector:target:argument:order:modes:]'
void _IM_NSRunLoop_performSelector_Ctarget_Cargument_Corder_Cmodes_C(NSRunLoop *_self, SEL aSelector, id target, id arg, unsigned int order, NSArray* modes);

// method '-[NSRunLoop removePort:forMode:]'
void _IM_NSRunLoop_removePort_CforMode_C(NSRunLoop *_self, NSPort* aPort, NSString* mode);

// method '-[NSRunLoop run]'
void _IM_NSRunLoop_run(NSRunLoop *_self);

// method '-[NSRunLoop runMode:beforeDate:]'
BOOL _IM_NSRunLoop_runMode_CbeforeDate_C(NSRunLoop *_self, NSString* mode, NSDate* limitDate);

// method '-[NSRunLoop runUntilDate:]'
void _IM_NSRunLoop_runUntilDate_C(NSRunLoop *_self, NSDate* limitDate);

// method '-[NSScanner caseSensitive]'
BOOL _IM_NSScanner_caseSensitive(NSScanner *_self);

// method '-[NSScanner charactersToBeSkipped]'
NSCharacterSet* _IM_NSScanner_charactersToBeSkipped(NSScanner *_self);

// method '-[NSScanner initWithString:]'
NSScanner *_IM_NSScanner_initWithString_C(NSScanner *_self, NSString* string);

// method '-[NSScanner isAtEnd]'
BOOL _IM_NSScanner_isAtEnd(NSScanner *_self);

// method '-[NSScanner locale]'
NSDictionary* _IM_NSScanner_locale(NSScanner *_self);

// method '+[NSScanner localizedScannerWithString:]'
id _CM_NSScanner_localizedScannerWithString_C(Class _class, NSString* string);

// method '-[NSScanner scanCharactersFromSet:intoString:]'
BOOL _IM_NSScanner_scanCharactersFromSet_CintoString_C(NSScanner *_self, NSCharacterSet* set, id *value);

// method '-[NSScanner scanDouble:]'
BOOL _IM_NSScanner_scanDouble_C(NSScanner *_self, double *value);

// method '-[NSScanner scanFloat:]'
BOOL _IM_NSScanner_scanFloat_C(NSScanner *_self, float *value);

// method '-[NSScanner scanHexInt:]'
BOOL _IM_NSScanner_scanHexInt_C(NSScanner *_self, unsigned int *value);

// method '-[NSScanner scanInt:]'
BOOL _IM_NSScanner_scanInt_C(NSScanner *_self, int *value);

// method '-[NSScanner scanLocation]'
unsigned int _IM_NSScanner_scanLocation(NSScanner *_self);

// method '-[NSScanner scanLongLong:]'
BOOL _IM_NSScanner_scanLongLong_C(NSScanner *_self, long long *value);

// method '-[NSScanner scanString:intoString:]'
BOOL _IM_NSScanner_scanString_CintoString_C(NSScanner *_self, NSString* string, id *value);

// method '-[NSScanner scanUpToCharactersFromSet:intoString:]'
BOOL _IM_NSScanner_scanUpToCharactersFromSet_CintoString_C(NSScanner *_self, NSCharacterSet* set, id *value);

// method '-[NSScanner scanUpToString:intoString:]'
BOOL _IM_NSScanner_scanUpToString_CintoString_C(NSScanner *_self, NSString* string, id *value);

// method '+[NSScanner scannerWithString:]'
id _CM_NSScanner_scannerWithString_C(Class _class, NSString* string);

// method '-[NSScanner setCaseSensitive:]'
void _IM_NSScanner_setCaseSensitive_C(NSScanner *_self, BOOL flag);

// method '-[NSScanner setCharactersToBeSkipped:]'
void _IM_NSScanner_setCharactersToBeSkipped_C(NSScanner *_self, NSCharacterSet* set);

// method '-[NSScanner setLocale:]'
void _IM_NSScanner_setLocale_C(NSScanner *_self, NSDictionary* dict);

// method '-[NSScanner setScanLocation:]'
void _IM_NSScanner_setScanLocation_C(NSScanner *_self, unsigned int pos);

// method '-[NSScanner string]'
NSString* _IM_NSScanner_string(NSScanner *_self);

// method '-[NSScriptClassDescription appleEventCode]'
unsigned long _IM_NSScriptClassDescription_appleEventCode(NSScriptClassDescription *_self);

// method '-[NSScriptClassDescription appleEventCodeForKey:]'
unsigned long _IM_NSScriptClassDescription_appleEventCodeForKey_C(NSScriptClassDescription *_self, NSString* key);

// method '-[NSScriptClassDescription classDescriptionForKey:]'
NSScriptClassDescription* _IM_NSScriptClassDescription_classDescriptionForKey_C(NSScriptClassDescription *_self, NSString* key);

// method '-[NSScriptClassDescription className]'
NSString* _IM_NSScriptClassDescription_className(NSScriptClassDescription *_self);

// method '-[NSScriptClassDescription defaultSubcontainerAttributeKey]'
NSString* _IM_NSScriptClassDescription_defaultSubcontainerAttributeKey(NSScriptClassDescription *_self);

// method '-[NSScriptClassDescription initWithSuiteName:className:dictionary:]'
NSScriptClassDescription *_IM_NSScriptClassDescription_initWithSuiteName_CclassName_Cdictionary_C(NSScriptClassDescription *_self, NSString* suiteName, NSString* className, NSDictionary* classDeclaration);

// method '-[NSScriptClassDescription isLocationRequiredToCreateForKey:]'
BOOL _IM_NSScriptClassDescription_isLocationRequiredToCreateForKey_C(NSScriptClassDescription *_self, NSString* toManyRelationshipKey);

// method '-[NSScriptClassDescription isReadOnlyKey:]'
BOOL _IM_NSScriptClassDescription_isReadOnlyKey_C(NSScriptClassDescription *_self, NSString* key);

// method '-[NSScriptClassDescription keyWithAppleEventCode:]'
NSString* _IM_NSScriptClassDescription_keyWithAppleEventCode_C(NSScriptClassDescription *_self, unsigned long appleEventCode);

// method '-[NSScriptClassDescription matchesAppleEventCode:]'
BOOL _IM_NSScriptClassDescription_matchesAppleEventCode_C(NSScriptClassDescription *_self, unsigned long appleEventCode);

// method '-[NSScriptClassDescription selectorForCommand:]'
SEL _IM_NSScriptClassDescription_selectorForCommand_C(NSScriptClassDescription *_self, NSScriptCommandDescription* commandDescription);

// method '-[NSScriptClassDescription suiteName]'
NSString* _IM_NSScriptClassDescription_suiteName(NSScriptClassDescription *_self);

// method '-[NSScriptClassDescription superclassDescription]'
NSScriptClassDescription* _IM_NSScriptClassDescription_superclassDescription(NSScriptClassDescription *_self);

// method '-[NSScriptClassDescription supportsCommand:]'
BOOL _IM_NSScriptClassDescription_supportsCommand_C(NSScriptClassDescription *_self, NSScriptCommandDescription* commandDescription);

// method '-[NSScriptClassDescription typeForKey:]'
NSString* _IM_NSScriptClassDescription_typeForKey_C(NSScriptClassDescription *_self, NSString* key);

// method '-[NSScriptCoercionHandler coerceValue:toClass:]'
id _IM_NSScriptCoercionHandler_coerceValue_CtoClass_C(NSScriptCoercionHandler *_self, id value, Class toClass);

// method '-[NSScriptCoercionHandler registerCoercer:selector:toConvertFromClass:toClass:]'
void _IM_NSScriptCoercionHandler_registerCoercer_Cselector_CtoConvertFromClass_CtoClass_C(NSScriptCoercionHandler *_self, id coercer, SEL selector, Class fromClass, Class toClass);

// method '+[NSScriptCoercionHandler sharedCoercionHandler]'
NSScriptCoercionHandler* _CM_NSScriptCoercionHandler_sharedCoercionHandler(Class _class);

// method '-[NSScriptCommand appleEvent]'
NSAppleEventDescriptor* _IM_NSScriptCommand_appleEvent(NSScriptCommand *_self);

// method '-[NSScriptCommand arguments]'
NSDictionary* _IM_NSScriptCommand_arguments(NSScriptCommand *_self);

// method '-[NSScriptCommand commandDescription]'
NSScriptCommandDescription* _IM_NSScriptCommand_commandDescription(NSScriptCommand *_self);

// method '+[NSScriptCommand currentCommand]'
NSScriptCommand* _CM_NSScriptCommand_currentCommand(Class _class);

// method '-[NSScriptCommand directParameter]'
id _IM_NSScriptCommand_directParameter(NSScriptCommand *_self);

// method '-[NSScriptCommand evaluatedArguments]'
NSDictionary* _IM_NSScriptCommand_evaluatedArguments(NSScriptCommand *_self);

// method '-[NSScriptCommand evaluatedReceivers]'
id _IM_NSScriptCommand_evaluatedReceivers(NSScriptCommand *_self);

// method '-[NSScriptCommand executeCommand]'
id _IM_NSScriptCommand_executeCommand(NSScriptCommand *_self);

// method '-[NSScriptCommand initWithCommandDescription:]'
NSScriptCommand *_IM_NSScriptCommand_initWithCommandDescription_C(NSScriptCommand *_self, NSScriptCommandDescription* commandDef);

// method '-[NSScriptCommand isWellFormed]'
BOOL _IM_NSScriptCommand_isWellFormed(NSScriptCommand *_self);

// method '-[NSScriptCommand performDefaultImplementation]'
id _IM_NSScriptCommand_performDefaultImplementation(NSScriptCommand *_self);

// method '-[NSScriptCommand receiversSpecifier]'
NSScriptObjectSpecifier* _IM_NSScriptCommand_receiversSpecifier(NSScriptCommand *_self);

// method '-[NSScriptCommand resumeExecutionWithResult:]'
void _IM_NSScriptCommand_resumeExecutionWithResult_C(NSScriptCommand *_self, id result);

// method '-[NSScriptCommand scriptErrorNumber]'
int _IM_NSScriptCommand_scriptErrorNumber(NSScriptCommand *_self);

// method '-[NSScriptCommand scriptErrorString]'
NSString* _IM_NSScriptCommand_scriptErrorString(NSScriptCommand *_self);

// method '-[NSScriptCommand setArguments:]'
void _IM_NSScriptCommand_setArguments_C(NSScriptCommand *_self, NSDictionary* args);

// method '-[NSScriptCommand setDirectParameter:]'
void _IM_NSScriptCommand_setDirectParameter_C(NSScriptCommand *_self, id directParameter);

// method '-[NSScriptCommand setReceiversSpecifier:]'
void _IM_NSScriptCommand_setReceiversSpecifier_C(NSScriptCommand *_self, NSScriptObjectSpecifier* receiversRef);

// method '-[NSScriptCommand setScriptErrorNumber:]'
void _IM_NSScriptCommand_setScriptErrorNumber_C(NSScriptCommand *_self, int errorNumber);

// method '-[NSScriptCommand setScriptErrorString:]'
void _IM_NSScriptCommand_setScriptErrorString_C(NSScriptCommand *_self, NSString* errorString);

// method '-[NSScriptCommand suspendExecution]'
void _IM_NSScriptCommand_suspendExecution(NSScriptCommand *_self);

// method '-[NSScriptCommandDescription appleEventClassCode]'
unsigned long _IM_NSScriptCommandDescription_appleEventClassCode(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription appleEventCode]'
unsigned long _IM_NSScriptCommandDescription_appleEventCode(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription appleEventCodeForArgumentWithName:]'
unsigned long _IM_NSScriptCommandDescription_appleEventCodeForArgumentWithName_C(NSScriptCommandDescription *_self, NSString* argumentName);

// method '-[NSScriptCommandDescription appleEventCodeForReturnType]'
unsigned long _IM_NSScriptCommandDescription_appleEventCodeForReturnType(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription argumentNames]'
NSArray* _IM_NSScriptCommandDescription_argumentNames(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription commandClassName]'
NSString* _IM_NSScriptCommandDescription_commandClassName(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription commandName]'
NSString* _IM_NSScriptCommandDescription_commandName(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription createCommandInstance]'
NSScriptCommand* _IM_NSScriptCommandDescription_createCommandInstance(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription createCommandInstanceWithZone:]'
NSScriptCommand* _IM_NSScriptCommandDescription_createCommandInstanceWithZone_C(NSScriptCommandDescription *_self, struct _NSZone *zone);

// method '-[NSScriptCommandDescription initWithSuiteName:commandName:dictionary:]'
NSScriptCommandDescription *_IM_NSScriptCommandDescription_initWithSuiteName_CcommandName_Cdictionary_C(NSScriptCommandDescription *_self, NSString* suiteName, NSString* commandName, NSDictionary* commandDeclaration);

// method '-[NSScriptCommandDescription isOptionalArgumentWithName:]'
BOOL _IM_NSScriptCommandDescription_isOptionalArgumentWithName_C(NSScriptCommandDescription *_self, NSString* argumentName);

// method '-[NSScriptCommandDescription returnType]'
NSString* _IM_NSScriptCommandDescription_returnType(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription suiteName]'
NSString* _IM_NSScriptCommandDescription_suiteName(NSScriptCommandDescription *_self);

// method '-[NSScriptCommandDescription typeForArgumentWithName:]'
NSString* _IM_NSScriptCommandDescription_typeForArgumentWithName_C(NSScriptCommandDescription *_self, NSString* argumentName);

// method '-[NSScriptExecutionContext objectBeingTested]'
id _IM_NSScriptExecutionContext_objectBeingTested(NSScriptExecutionContext *_self);

// method '-[NSScriptExecutionContext rangeContainerObject]'
id _IM_NSScriptExecutionContext_rangeContainerObject(NSScriptExecutionContext *_self);

// method '-[NSScriptExecutionContext setObjectBeingTested:]'
void _IM_NSScriptExecutionContext_setObjectBeingTested_C(NSScriptExecutionContext *_self, id obj);

// method '-[NSScriptExecutionContext setRangeContainerObject:]'
void _IM_NSScriptExecutionContext_setRangeContainerObject_C(NSScriptExecutionContext *_self, id obj);

// method '-[NSScriptExecutionContext setTopLevelObject:]'
void _IM_NSScriptExecutionContext_setTopLevelObject_C(NSScriptExecutionContext *_self, id obj);

// method '+[NSScriptExecutionContext sharedScriptExecutionContext]'
NSScriptExecutionContext* _CM_NSScriptExecutionContext_sharedScriptExecutionContext(Class _class);

// method '-[NSScriptExecutionContext topLevelObject]'
id _IM_NSScriptExecutionContext_topLevelObject(NSScriptExecutionContext *_self);

// method '-[NSScriptObjectSpecifier childSpecifier]'
NSScriptObjectSpecifier* _IM_NSScriptObjectSpecifier_childSpecifier(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier containerClassDescription]'
NSScriptClassDescription* _IM_NSScriptObjectSpecifier_containerClassDescription(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier containerIsObjectBeingTested]'
BOOL _IM_NSScriptObjectSpecifier_containerIsObjectBeingTested(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier containerIsRangeContainerObject]'
BOOL _IM_NSScriptObjectSpecifier_containerIsRangeContainerObject(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier containerSpecifier]'
NSScriptObjectSpecifier* _IM_NSScriptObjectSpecifier_containerSpecifier(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier evaluationErrorNumber]'
int _IM_NSScriptObjectSpecifier_evaluationErrorNumber(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier evaluationErrorSpecifier]'
NSScriptObjectSpecifier* _IM_NSScriptObjectSpecifier_evaluationErrorSpecifier(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier indicesOfObjectsByEvaluatingWithContainer:count:]'
int *_IM_NSScriptObjectSpecifier_indicesOfObjectsByEvaluatingWithContainer_Ccount_C(NSScriptObjectSpecifier *_self, id container, int *count);

// method '-[NSScriptObjectSpecifier initWithContainerClassDescription:containerSpecifier:key:]'
NSScriptObjectSpecifier *_IM_NSScriptObjectSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_C(NSScriptObjectSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property);

// method '-[NSScriptObjectSpecifier initWithContainerSpecifier:key:]'
NSScriptObjectSpecifier *_IM_NSScriptObjectSpecifier_initWithContainerSpecifier_Ckey_C(NSScriptObjectSpecifier *_self, NSScriptObjectSpecifier* container, NSString* property);

// method '-[NSScriptObjectSpecifier key]'
NSString* _IM_NSScriptObjectSpecifier_key(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier keyClassDescription]'
NSScriptClassDescription* _IM_NSScriptObjectSpecifier_keyClassDescription(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier objectsByEvaluatingSpecifier]'
id _IM_NSScriptObjectSpecifier_objectsByEvaluatingSpecifier(NSScriptObjectSpecifier *_self);

// method '-[NSScriptObjectSpecifier objectsByEvaluatingWithContainers:]'
id _IM_NSScriptObjectSpecifier_objectsByEvaluatingWithContainers_C(NSScriptObjectSpecifier *_self, id containers);

// method '-[NSScriptObjectSpecifier setChildSpecifier:]'
void _IM_NSScriptObjectSpecifier_setChildSpecifier_C(NSScriptObjectSpecifier *_self, NSScriptObjectSpecifier* child);

// method '-[NSScriptObjectSpecifier setContainerClassDescription:]'
void _IM_NSScriptObjectSpecifier_setContainerClassDescription_C(NSScriptObjectSpecifier *_self, NSScriptClassDescription* classDesc);

// method '-[NSScriptObjectSpecifier setContainerIsObjectBeingTested:]'
void _IM_NSScriptObjectSpecifier_setContainerIsObjectBeingTested_C(NSScriptObjectSpecifier *_self, BOOL flag);

// method '-[NSScriptObjectSpecifier setContainerIsRangeContainerObject:]'
void _IM_NSScriptObjectSpecifier_setContainerIsRangeContainerObject_C(NSScriptObjectSpecifier *_self, BOOL flag);

// method '-[NSScriptObjectSpecifier setContainerSpecifier:]'
void _IM_NSScriptObjectSpecifier_setContainerSpecifier_C(NSScriptObjectSpecifier *_self, NSScriptObjectSpecifier* subRef);

// method '-[NSScriptObjectSpecifier setEvaluationErrorNumber:]'
void _IM_NSScriptObjectSpecifier_setEvaluationErrorNumber_C(NSScriptObjectSpecifier *_self, int error);

// method '-[NSScriptObjectSpecifier setKey:]'
void _IM_NSScriptObjectSpecifier_setKey_C(NSScriptObjectSpecifier *_self, NSString* key);

// method '-[NSScriptSuiteRegistry aeteResource:]'
NSData* _IM_NSScriptSuiteRegistry_aeteResource_C(NSScriptSuiteRegistry *_self, NSString* languageName);

// method '-[NSScriptSuiteRegistry appleEventCodeForSuite:]'
unsigned long _IM_NSScriptSuiteRegistry_appleEventCodeForSuite_C(NSScriptSuiteRegistry *_self, NSString* suiteName);

// method '-[NSScriptSuiteRegistry bundleForSuite:]'
NSBundle* _IM_NSScriptSuiteRegistry_bundleForSuite_C(NSScriptSuiteRegistry *_self, NSString* suiteName);

// method '-[NSScriptSuiteRegistry classDescriptionWithAppleEventCode:]'
NSScriptClassDescription* _IM_NSScriptSuiteRegistry_classDescriptionWithAppleEventCode_C(NSScriptSuiteRegistry *_self, unsigned long appleEventCode);

// method '-[NSScriptSuiteRegistry classDescriptionsInSuite:]'
NSDictionary* _IM_NSScriptSuiteRegistry_classDescriptionsInSuite_C(NSScriptSuiteRegistry *_self, NSString* suiteName);

// method '-[NSScriptSuiteRegistry commandDescriptionWithAppleEventClass:andAppleEventCode:]'
NSScriptCommandDescription* _IM_NSScriptSuiteRegistry_commandDescriptionWithAppleEventClass_CandAppleEventCode_C(NSScriptSuiteRegistry *_self, unsigned long appleEventClassCode, unsigned long appleEventIDCode);

// method '-[NSScriptSuiteRegistry commandDescriptionsInSuite:]'
NSDictionary* _IM_NSScriptSuiteRegistry_commandDescriptionsInSuite_C(NSScriptSuiteRegistry *_self, NSString* suiteName);

// method '-[NSScriptSuiteRegistry loadSuiteWithDictionary:fromBundle:]'
void _IM_NSScriptSuiteRegistry_loadSuiteWithDictionary_CfromBundle_C(NSScriptSuiteRegistry *_self, NSDictionary* suiteDeclaration, NSBundle* bundle);

// method '-[NSScriptSuiteRegistry loadSuitesFromBundle:]'
void _IM_NSScriptSuiteRegistry_loadSuitesFromBundle_C(NSScriptSuiteRegistry *_self, NSBundle* bundle);

// method '-[NSScriptSuiteRegistry registerClassDescription:]'
void _IM_NSScriptSuiteRegistry_registerClassDescription_C(NSScriptSuiteRegistry *_self, NSScriptClassDescription* classDescription);

// method '-[NSScriptSuiteRegistry registerCommandDescription:]'
void _IM_NSScriptSuiteRegistry_registerCommandDescription_C(NSScriptSuiteRegistry *_self, NSScriptCommandDescription* commandDescription);

// method '+[NSScriptSuiteRegistry setSharedScriptSuiteRegistry:]'
void _CM_NSScriptSuiteRegistry_setSharedScriptSuiteRegistry_C(Class _class, NSScriptSuiteRegistry* registry);

// method '+[NSScriptSuiteRegistry sharedScriptSuiteRegistry]'
NSScriptSuiteRegistry* _CM_NSScriptSuiteRegistry_sharedScriptSuiteRegistry(Class _class);

// method '-[NSScriptSuiteRegistry suiteForAppleEventCode:]'
NSString* _IM_NSScriptSuiteRegistry_suiteForAppleEventCode_C(NSScriptSuiteRegistry *_self, unsigned long appleEventCode);

// method '-[NSScriptSuiteRegistry suiteNames]'
NSArray* _IM_NSScriptSuiteRegistry_suiteNames(NSScriptSuiteRegistry *_self);

// method '-[NSScriptWhoseTest isTrue]'
BOOL _IM_NSScriptWhoseTest_isTrue(NSScriptWhoseTest *_self);

// method '-[NSSet addObserver:forKeyPath:options:context:]'
void _IM_NSSet_addObserver_CforKeyPath_Coptions_Ccontext_C(NSSet *_self, NSObject* observer, NSString* keyPath, unsigned int options, void *context);

// method '-[NSSet allObjects]'
NSArray* _IM_NSSet_allObjects(NSSet *_self);

// method '-[NSSet anyObject]'
id _IM_NSSet_anyObject(NSSet *_self);

// method '-[NSSet containsObject:]'
BOOL _IM_NSSet_containsObject_C(NSSet *_self, id anObject);

// method '-[NSSet count]'
unsigned int _IM_NSSet_count(NSSet *_self);

// method '-[NSSet description]'
NSString* _IM_NSSet_description(NSSet *_self);

// method '-[NSSet descriptionWithLocale:]'
NSString* _IM_NSSet_descriptionWithLocale_C(NSSet *_self, NSDictionary* locale);

// method '-[NSSet initWithArray:]'
NSSet *_IM_NSSet_initWithArray_C(NSSet *_self, NSArray* array);

// method '-[NSSet initWithObjects:count:]'
NSSet *_IM_NSSet_initWithObjects_Ccount_C(NSSet *_self, id *objects, unsigned int count);

// method '-[NSSet initWithSet:]'
NSSet *_IM_NSSet_initWithSet_C(NSSet *_self, NSSet* set);

// method '-[NSSet initWithSet:copyItems:]'
NSSet *_IM_NSSet_initWithSet_CcopyItems_C(NSSet *_self, NSSet* set, BOOL flag);

// method '-[NSSet intersectsSet:]'
BOOL _IM_NSSet_intersectsSet_C(NSSet *_self, NSSet* otherSet);

// method '-[NSSet isEqualToSet:]'
BOOL _IM_NSSet_isEqualToSet_C(NSSet *_self, NSSet* otherSet);

// method '-[NSSet isSubsetOfSet:]'
BOOL _IM_NSSet_isSubsetOfSet_C(NSSet *_self, NSSet* otherSet);

// method '-[NSSet makeObjectsPerformSelector:]'
void _IM_NSSet_makeObjectsPerformSelector_C(NSSet *_self, SEL aSelector);

// method '-[NSSet makeObjectsPerformSelector:withObject:]'
void _IM_NSSet_makeObjectsPerformSelector_CwithObject_C(NSSet *_self, SEL aSelector, id argument);

// method '-[NSSet member:]'
id _IM_NSSet_member_C(NSSet *_self, id object);

// method '-[NSSet objectEnumerator]'
NSEnumerator* _IM_NSSet_objectEnumerator(NSSet *_self);

// method '-[NSSet removeObserver:forKeyPath:]'
void _IM_NSSet_removeObserver_CforKeyPath_C(NSSet *_self, NSObject* observer, NSString* keyPath);

// method '+[NSSet set]'
id _CM_NSSet_set(Class _class);

// method '-[NSSet setValue:forKey:]'
void _IM_NSSet_setValue_CforKey_C(NSSet *_self, id value, NSString* key);

// method '+[NSSet setWithArray:]'
id _CM_NSSet_setWithArray_C(Class _class, NSArray* array);

// method '+[NSSet setWithObject:]'
id _CM_NSSet_setWithObject_C(Class _class, id object);

// method '+[NSSet setWithObjects:count:]'
id _CM_NSSet_setWithObjects_Ccount_C(Class _class, id *objs, unsigned int cnt);

// method '+[NSSet setWithSet:]'
id _CM_NSSet_setWithSet_C(Class _class, NSSet* set);

// method '-[NSSet valueForKey:]'
id _IM_NSSet_valueForKey_C(NSSet *_self, NSString* key);

// method '-[NSSetCommand keySpecifier]'
NSScriptObjectSpecifier* _IM_NSSetCommand_keySpecifier(NSSetCommand *_self);

// method '-[NSSetCommand setReceiversSpecifier:]'
void _IM_NSSetCommand_setReceiversSpecifier_C(NSSetCommand *_self, NSScriptObjectSpecifier* receiversRef);

// method '-[NSSocketPort address]'
NSData* _IM_NSSocketPort_address(NSSocketPort *_self);

// method '-[NSSocketPort init]'
NSSocketPort *_IM_NSSocketPort_init(NSSocketPort *_self);

// method '-[NSSocketPort initRemoteWithProtocolFamily:socketType:protocol:address:]'
NSSocketPort *_IM_NSSocketPort_initRemoteWithProtocolFamily_CsocketType_Cprotocol_Caddress_C(NSSocketPort *_self, int family, int type, int protocol, NSData* address);

// method '-[NSSocketPort initRemoteWithTCPPort:host:]'
NSSocketPort *_IM_NSSocketPort_initRemoteWithTCPPort_Chost_C(NSSocketPort *_self, unsigned short port, NSString* hostName);

// method '-[NSSocketPort initWithProtocolFamily:socketType:protocol:address:]'
NSSocketPort *_IM_NSSocketPort_initWithProtocolFamily_CsocketType_Cprotocol_Caddress_C(NSSocketPort *_self, int family, int type, int protocol, NSData* address);

// method '-[NSSocketPort initWithProtocolFamily:socketType:protocol:socket:]'
NSSocketPort *_IM_NSSocketPort_initWithProtocolFamily_CsocketType_Cprotocol_Csocket_C(NSSocketPort *_self, int family, int type, int protocol, int sock);

// method '-[NSSocketPort initWithTCPPort:]'
NSSocketPort *_IM_NSSocketPort_initWithTCPPort_C(NSSocketPort *_self, unsigned short port);

// method '-[NSSocketPort protocol]'
int _IM_NSSocketPort_protocol(NSSocketPort *_self);

// method '-[NSSocketPort protocolFamily]'
int _IM_NSSocketPort_protocolFamily(NSSocketPort *_self);

// method '-[NSSocketPort socket]'
int _IM_NSSocketPort_socket(NSSocketPort *_self);

// method '-[NSSocketPort socketType]'
int _IM_NSSocketPort_socketType(NSSocketPort *_self);

// method '-[NSSocketPortNameServer defaultNameServerPortNumber]'
unsigned short _IM_NSSocketPortNameServer_defaultNameServerPortNumber(NSSocketPortNameServer *_self);

// method '-[NSSocketPortNameServer portForName:]'
NSPort* _IM_NSSocketPortNameServer_portForName_C(NSSocketPortNameServer *_self, NSString* name);

// method '-[NSSocketPortNameServer portForName:host:]'
NSPort* _IM_NSSocketPortNameServer_portForName_Chost_C(NSSocketPortNameServer *_self, NSString* name, NSString* host);

// method '-[NSSocketPortNameServer portForName:host:nameServerPortNumber:]'
NSPort* _IM_NSSocketPortNameServer_portForName_Chost_CnameServerPortNumber_C(NSSocketPortNameServer *_self, NSString* name, NSString* host, unsigned short portNumber);

// method '-[NSSocketPortNameServer registerPort:name:]'
BOOL _IM_NSSocketPortNameServer_registerPort_Cname_C(NSSocketPortNameServer *_self, NSPort* port, NSString* name);

// method '-[NSSocketPortNameServer registerPort:name:nameServerPortNumber:]'
BOOL _IM_NSSocketPortNameServer_registerPort_Cname_CnameServerPortNumber_C(NSSocketPortNameServer *_self, NSPort* port, NSString* name, unsigned short portNumber);

// method '-[NSSocketPortNameServer removePortForName:]'
BOOL _IM_NSSocketPortNameServer_removePortForName_C(NSSocketPortNameServer *_self, NSString* name);

// method '-[NSSocketPortNameServer setDefaultNameServerPortNumber:]'
void _IM_NSSocketPortNameServer_setDefaultNameServerPortNumber_C(NSSocketPortNameServer *_self, unsigned short portNumber);

// method '+[NSSocketPortNameServer sharedInstance]'
id _CM_NSSocketPortNameServer_sharedInstance(Class _class);

// method '-[NSSortDescriptor ascending]'
BOOL _IM_NSSortDescriptor_ascending(NSSortDescriptor *_self);

// method '-[NSSortDescriptor compareObject:toObject:]'
int _IM_NSSortDescriptor_compareObject_CtoObject_C(NSSortDescriptor *_self, id object1, id object2);

// method '-[NSSortDescriptor initWithKey:ascending:]'
NSSortDescriptor *_IM_NSSortDescriptor_initWithKey_Cascending_C(NSSortDescriptor *_self, NSString* key, BOOL ascending);

// method '-[NSSortDescriptor initWithKey:ascending:selector:]'
NSSortDescriptor *_IM_NSSortDescriptor_initWithKey_Cascending_Cselector_C(NSSortDescriptor *_self, NSString* key, BOOL ascending, SEL selector);

// method '-[NSSortDescriptor key]'
NSString* _IM_NSSortDescriptor_key(NSSortDescriptor *_self);

// method '-[NSSortDescriptor reversedSortDescriptor]'
id _IM_NSSortDescriptor_reversedSortDescriptor(NSSortDescriptor *_self);

// method '-[NSSortDescriptor selector]'
SEL _IM_NSSortDescriptor_selector(NSSortDescriptor *_self);

// method '-[NSSpecifierTest initWithObjectSpecifier:comparisonOperator:testObject:]'
NSSpecifierTest *_IM_NSSpecifierTest_initWithObjectSpecifier_CcomparisonOperator_CtestObject_C(NSSpecifierTest *_self, NSScriptObjectSpecifier* obj1, int compOp, id obj2);

// method '-[NSSpellServer delegate]'
id _IM_NSSpellServer_delegate(NSSpellServer *_self);

// method '-[NSSpellServer isWordInUserDictionaries:caseSensitive:]'
BOOL _IM_NSSpellServer_isWordInUserDictionaries_CcaseSensitive_C(NSSpellServer *_self, NSString* word, BOOL flag);

// method '-[NSSpellServer registerLanguage:byVendor:]'
BOOL _IM_NSSpellServer_registerLanguage_CbyVendor_C(NSSpellServer *_self, NSString* language, NSString* vendor);

// method '-[NSSpellServer run]'
void _IM_NSSpellServer_run(NSSpellServer *_self);

// method '-[NSSpellServer setDelegate:]'
void _IM_NSSpellServer_setDelegate_C(NSSpellServer *_self, id anObject);

// method '-[NSStream close]'
void _IM_NSStream_close(NSStream *_self);

// method '-[NSStream delegate]'
id _IM_NSStream_delegate(NSStream *_self);

// method '+[NSStream getStreamsToHost:port:inputStream:outputStream:]'
void _CM_NSStream_getStreamsToHost_Cport_CinputStream_CoutputStream_C(Class _class, NSHost* host, int port, id *inputStream, id *outputStream);

// method '-[NSStream open]'
void _IM_NSStream_open(NSStream *_self);

// method '-[NSStream propertyForKey:]'
id _IM_NSStream_propertyForKey_C(NSStream *_self, NSString* key);

// method '-[NSStream removeFromRunLoop:forMode:]'
void _IM_NSStream_removeFromRunLoop_CforMode_C(NSStream *_self, NSRunLoop* aRunLoop, NSString* mode);

// method '-[NSStream scheduleInRunLoop:forMode:]'
void _IM_NSStream_scheduleInRunLoop_CforMode_C(NSStream *_self, NSRunLoop* aRunLoop, NSString* mode);

// method '-[NSStream setDelegate:]'
void _IM_NSStream_setDelegate_C(NSStream *_self, id delegate);

// method '-[NSStream setProperty:forKey:]'
BOOL _IM_NSStream_setProperty_CforKey_C(NSStream *_self, id property, NSString* key);

// method '-[NSStream streamError]'
NSError* _IM_NSStream_streamError(NSStream *_self);

// method '-[NSStream streamStatus]'
int _IM_NSStream_streamStatus(NSStream *_self);

// method '-[NSString UTF8String]'
const char* _IM_NSString_UTF8String(NSString *_self);

// method '+[NSString availableStringEncodings]'
const unsigned int* _CM_NSString_availableStringEncodings(Class _class);

// method '-[NSString cString]'
const char* _IM_NSString_cString(NSString *_self);

// method '-[NSString cStringLength]'
unsigned int _IM_NSString_cStringLength(NSString *_self);

// method '-[NSString cStringUsingEncoding:]'
const char* _IM_NSString_cStringUsingEncoding_C(NSString *_self, unsigned int encoding);

// method '-[NSString canBeConvertedToEncoding:]'
BOOL _IM_NSString_canBeConvertedToEncoding_C(NSString *_self, unsigned int encoding);

// method '-[NSString capitalizedString]'
NSString* _IM_NSString_capitalizedString(NSString *_self);

// method '-[NSString caseInsensitiveCompare:]'
int _IM_NSString_caseInsensitiveCompare_C(NSString *_self, NSString* string);

// method '-[NSString characterAtIndex:]'
unsigned short _IM_NSString_characterAtIndex_C(NSString *_self, unsigned int index);

// method '-[NSString commonPrefixWithString:options:]'
NSString* _IM_NSString_commonPrefixWithString_Coptions_C(NSString *_self, NSString* aString, unsigned int mask);

// method '-[NSString compare:]'
int _IM_NSString_compare_C(NSString *_self, NSString* string);

// method '-[NSString compare:options:]'
int _IM_NSString_compare_Coptions_C(NSString *_self, NSString* string, unsigned int mask);

// method '-[NSString compare:options:range:]'
int _IM_NSString_compare_Coptions_Crange_C(NSString *_self, NSString* string, unsigned int mask, struct _NSRange compareRange);

// method '-[NSString compare:options:range:locale:]'
int _IM_NSString_compare_Coptions_Crange_Clocale_C(NSString *_self, NSString* string, unsigned int mask, struct _NSRange compareRange, NSDictionary* dict);

// method '-[NSString completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:]'
unsigned int _IM_NSString_completePathIntoString_CcaseSensitive_CmatchesIntoArray_CfilterTypes_C(NSString *_self, id *outputName, BOOL flag, id *outputArray, NSArray* filterTypes);

// method '-[NSString componentsSeparatedByString:]'
NSArray* _IM_NSString_componentsSeparatedByString_C(NSString *_self, NSString* separator);

// method '-[NSString dataUsingEncoding:]'
NSData* _IM_NSString_dataUsingEncoding_C(NSString *_self, unsigned int encoding);

// method '-[NSString dataUsingEncoding:allowLossyConversion:]'
NSData* _IM_NSString_dataUsingEncoding_CallowLossyConversion_C(NSString *_self, unsigned int encoding, BOOL lossy);

// method '-[NSString decomposedStringWithCanonicalMapping]'
NSString* _IM_NSString_decomposedStringWithCanonicalMapping(NSString *_self);

// method '-[NSString decomposedStringWithCompatibilityMapping]'
NSString* _IM_NSString_decomposedStringWithCompatibilityMapping(NSString *_self);

// method '+[NSString defaultCStringEncoding]'
unsigned int _CM_NSString_defaultCStringEncoding(Class _class);

// method '-[NSString description]'
NSString* _IM_NSString_description(NSString *_self);

// method '-[NSString doubleValue]'
double _IM_NSString_doubleValue(NSString *_self);

// method '-[NSString fastestEncoding]'
unsigned int _IM_NSString_fastestEncoding(NSString *_self);

// method '-[NSString fileSystemRepresentation]'
const char* _IM_NSString_fileSystemRepresentation(NSString *_self);

// method '-[NSString floatValue]'
float _IM_NSString_floatValue(NSString *_self);

// method '-[NSString getCString:]'
void _IM_NSString_getCString_C(NSString *_self, char* bytes);

// method '-[NSString getCString:maxLength:]'
void _IM_NSString_getCString_CmaxLength_C(NSString *_self, char* bytes, unsigned int maxLength);

// method '-[NSString getCString:maxLength:encoding:]'
BOOL _IM_NSString_getCString_CmaxLength_Cencoding_C(NSString *_self, char* buffer, unsigned int maxBufferCount, unsigned int encoding);

// method '-[NSString getCString:maxLength:range:remainingRange:]'
void _IM_NSString_getCString_CmaxLength_Crange_CremainingRange_C(NSString *_self, char* bytes, unsigned int maxLength, struct _NSRange aRange, struct _NSRange *leftoverRange);

// method '-[NSString getFileSystemRepresentation:maxLength:]'
BOOL _IM_NSString_getFileSystemRepresentation_CmaxLength_C(NSString *_self, char* cname, unsigned int max);

// method '-[NSString getLineStart:end:contentsEnd:forRange:]'
void _IM_NSString_getLineStart_Cend_CcontentsEnd_CforRange_C(NSString *_self, unsigned int *startPtr, unsigned int *lineEndPtr, unsigned int *contentsEndPtr, struct _NSRange range);

// method '-[NSString getParagraphStart:end:contentsEnd:forRange:]'
void _IM_NSString_getParagraphStart_Cend_CcontentsEnd_CforRange_C(NSString *_self, unsigned int *startPtr, unsigned int *parEndPtr, unsigned int *contentsEndPtr, struct _NSRange range);

// method '-[NSString hasPrefix:]'
BOOL _IM_NSString_hasPrefix_C(NSString *_self, NSString* aString);

// method '-[NSString hasSuffix:]'
BOOL _IM_NSString_hasSuffix_C(NSString *_self, NSString* aString);

// method '-[NSString hash]'
unsigned int _IM_NSString_hash(NSString *_self);

// method '-[NSString init]'
NSString *_IM_NSString_init(NSString *_self);

// method '-[NSString initWithBytes:length:encoding:]'
NSString *_IM_NSString_initWithBytes_Clength_Cencoding_C(NSString *_self, const void* bytes, unsigned int len, unsigned int encoding);

// method '-[NSString initWithCString:]'
NSString *_IM_NSString_initWithCString_C(NSString *_self, const char* bytes);

// method '-[NSString initWithCString:encoding:]'
NSString *_IM_NSString_initWithCString_Cencoding_C(NSString *_self, const char* nullTerminatedCString, unsigned int encoding);

// method '-[NSString initWithCString:length:]'
NSString *_IM_NSString_initWithCString_Clength_C(NSString *_self, const char* bytes, unsigned int length);

// method '-[NSString initWithCStringNoCopy:length:freeWhenDone:]'
NSString *_IM_NSString_initWithCStringNoCopy_Clength_CfreeWhenDone_C(NSString *_self, char* bytes, unsigned int length, BOOL freeBuffer);

// method '-[NSString initWithCharacters:length:]'
NSString *_IM_NSString_initWithCharacters_Clength_C(NSString *_self, const unsigned short* characters, unsigned int length);

// method '-[NSString initWithContentsOfFile:]'
NSString *_IM_NSString_initWithContentsOfFile_C(NSString *_self, NSString* path);

// method '-[NSString initWithContentsOfFile:encoding:error:]'
NSString *_IM_NSString_initWithContentsOfFile_Cencoding_Cerror_C(NSString *_self, NSString* path, unsigned int enc, id *error);

// method '-[NSString initWithContentsOfFile:usedEncoding:error:]'
NSString *_IM_NSString_initWithContentsOfFile_CusedEncoding_Cerror_C(NSString *_self, NSString* path, unsigned int *enc, id *error);

// method '-[NSString initWithContentsOfURL:]'
NSString *_IM_NSString_initWithContentsOfURL_C(NSString *_self, NSURL* url);

// method '-[NSString initWithContentsOfURL:encoding:error:]'
NSString *_IM_NSString_initWithContentsOfURL_Cencoding_Cerror_C(NSString *_self, NSURL* url, unsigned int enc, id *error);

// method '-[NSString initWithContentsOfURL:usedEncoding:error:]'
NSString *_IM_NSString_initWithContentsOfURL_CusedEncoding_Cerror_C(NSString *_self, NSURL* url, unsigned int *enc, id *error);

// method '-[NSString initWithData:encoding:]'
NSString *_IM_NSString_initWithData_Cencoding_C(NSString *_self, NSData* data, unsigned int encoding);

// method '-[NSString initWithString:]'
NSString *_IM_NSString_initWithString_C(NSString *_self, NSString* aString);

// method '-[NSString initWithUTF8String:]'
NSString *_IM_NSString_initWithUTF8String_C(NSString *_self, const char* nullTerminatedCString);

// method '-[NSString intValue]'
int _IM_NSString_intValue(NSString *_self);

// method '-[NSString isAbsolutePath]'
BOOL _IM_NSString_isAbsolutePath(NSString *_self);

// method '-[NSString isEqualToString:]'
BOOL _IM_NSString_isEqualToString_C(NSString *_self, NSString* aString);

// method '-[NSString lastPathComponent]'
NSString* _IM_NSString_lastPathComponent(NSString *_self);

// method '-[NSString length]'
unsigned int _IM_NSString_length(NSString *_self);

// method '-[NSString lengthOfBytesUsingEncoding:]'
unsigned int _IM_NSString_lengthOfBytesUsingEncoding_C(NSString *_self, unsigned int enc);

// method '-[NSString lineRangeForRange:]'
struct _NSRange _IM_NSString_lineRangeForRange_C(NSString *_self, struct _NSRange range);

// method '-[NSString localizedCaseInsensitiveCompare:]'
int _IM_NSString_localizedCaseInsensitiveCompare_C(NSString *_self, NSString* string);

// method '-[NSString localizedCompare:]'
int _IM_NSString_localizedCompare_C(NSString *_self, NSString* string);

// method '+[NSString localizedNameOfStringEncoding:]'
NSString* _CM_NSString_localizedNameOfStringEncoding_C(Class _class, unsigned int encoding);

// method '-[NSString lossyCString]'
const char* _IM_NSString_lossyCString(NSString *_self);

// method '-[NSString lowercaseString]'
NSString* _IM_NSString_lowercaseString(NSString *_self);

// method '-[NSString maximumLengthOfBytesUsingEncoding:]'
unsigned int _IM_NSString_maximumLengthOfBytesUsingEncoding_C(NSString *_self, unsigned int enc);

// method '-[NSString paragraphRangeForRange:]'
struct _NSRange _IM_NSString_paragraphRangeForRange_C(NSString *_self, struct _NSRange range);

// method '-[NSString pathComponents]'
NSArray* _IM_NSString_pathComponents(NSString *_self);

// method '-[NSString pathExtension]'
NSString* _IM_NSString_pathExtension(NSString *_self);

// method '+[NSString pathWithComponents:]'
NSString* _CM_NSString_pathWithComponents_C(Class _class, NSArray* components);

// method '-[NSString precomposedStringWithCanonicalMapping]'
NSString* _IM_NSString_precomposedStringWithCanonicalMapping(NSString *_self);

// method '-[NSString precomposedStringWithCompatibilityMapping]'
NSString* _IM_NSString_precomposedStringWithCompatibilityMapping(NSString *_self);

// method '-[NSString propertyList]'
id _IM_NSString_propertyList(NSString *_self);

// method '-[NSString propertyListFromStringsFileFormat]'
NSDictionary* _IM_NSString_propertyListFromStringsFileFormat(NSString *_self);

// method '-[NSString rangeOfCharacterFromSet:]'
struct _NSRange _IM_NSString_rangeOfCharacterFromSet_C(NSString *_self, NSCharacterSet* aSet);

// method '-[NSString rangeOfCharacterFromSet:options:]'
struct _NSRange _IM_NSString_rangeOfCharacterFromSet_Coptions_C(NSString *_self, NSCharacterSet* aSet, unsigned int mask);

// method '-[NSString rangeOfCharacterFromSet:options:range:]'
struct _NSRange _IM_NSString_rangeOfCharacterFromSet_Coptions_Crange_C(NSString *_self, NSCharacterSet* aSet, unsigned int mask, struct _NSRange searchRange);

// method '-[NSString rangeOfComposedCharacterSequenceAtIndex:]'
struct _NSRange _IM_NSString_rangeOfComposedCharacterSequenceAtIndex_C(NSString *_self, unsigned int index);

// method '-[NSString rangeOfString:]'
struct _NSRange _IM_NSString_rangeOfString_C(NSString *_self, NSString* aString);

// method '-[NSString rangeOfString:options:]'
struct _NSRange _IM_NSString_rangeOfString_Coptions_C(NSString *_self, NSString* aString, unsigned int mask);

// method '-[NSString rangeOfString:options:range:]'
struct _NSRange _IM_NSString_rangeOfString_Coptions_Crange_C(NSString *_self, NSString* aString, unsigned int mask, struct _NSRange searchRange);

// method '-[NSString smallestEncoding]'
unsigned int _IM_NSString_smallestEncoding(NSString *_self);

// method '+[NSString string]'
id _CM_NSString_string(Class _class);

// method '-[NSString stringByAbbreviatingWithTildeInPath]'
NSString* _IM_NSString_stringByAbbreviatingWithTildeInPath(NSString *_self);

// method '-[NSString stringByAddingPercentEscapesUsingEncoding:]'
NSString* _IM_NSString_stringByAddingPercentEscapesUsingEncoding_C(NSString *_self, unsigned int enc);

// method '-[NSString stringByAppendingPathComponent:]'
NSString* _IM_NSString_stringByAppendingPathComponent_C(NSString *_self, NSString* str);

// method '-[NSString stringByAppendingPathExtension:]'
NSString* _IM_NSString_stringByAppendingPathExtension_C(NSString *_self, NSString* str);

// method '-[NSString stringByAppendingString:]'
NSString* _IM_NSString_stringByAppendingString_C(NSString *_self, NSString* aString);

// method '-[NSString stringByDeletingLastPathComponent]'
NSString* _IM_NSString_stringByDeletingLastPathComponent(NSString *_self);

// method '-[NSString stringByDeletingPathExtension]'
NSString* _IM_NSString_stringByDeletingPathExtension(NSString *_self);

// method '-[NSString stringByExpandingTildeInPath]'
NSString* _IM_NSString_stringByExpandingTildeInPath(NSString *_self);

// method '-[NSString stringByPaddingToLength:withString:startingAtIndex:]'
NSString* _IM_NSString_stringByPaddingToLength_CwithString_CstartingAtIndex_C(NSString *_self, unsigned int newLength, NSString* padString, unsigned int padIndex);

// method '-[NSString stringByReplacingPercentEscapesUsingEncoding:]'
NSString* _IM_NSString_stringByReplacingPercentEscapesUsingEncoding_C(NSString *_self, unsigned int enc);

// method '-[NSString stringByResolvingSymlinksInPath]'
NSString* _IM_NSString_stringByResolvingSymlinksInPath(NSString *_self);

// method '-[NSString stringByStandardizingPath]'
NSString* _IM_NSString_stringByStandardizingPath(NSString *_self);

// method '-[NSString stringByTrimmingCharactersInSet:]'
NSString* _IM_NSString_stringByTrimmingCharactersInSet_C(NSString *_self, NSCharacterSet* set);

// method '+[NSString stringWithCString:]'
id _CM_NSString_stringWithCString_C(Class _class, const char* bytes);

// method '+[NSString stringWithCString:encoding:]'
id _CM_NSString_stringWithCString_Cencoding_C(Class _class, const char* cString, unsigned int enc);

// method '+[NSString stringWithCString:length:]'
id _CM_NSString_stringWithCString_Clength_C(Class _class, const char* bytes, unsigned int length);

// method '+[NSString stringWithCharacters:length:]'
id _CM_NSString_stringWithCharacters_Clength_C(Class _class, const unsigned short* characters, unsigned int length);

// method '+[NSString stringWithContentsOfFile:]'
id _CM_NSString_stringWithContentsOfFile_C(Class _class, NSString* path);

// method '+[NSString stringWithContentsOfFile:encoding:error:]'
id _CM_NSString_stringWithContentsOfFile_Cencoding_Cerror_C(Class _class, NSString* path, unsigned int enc, id *error);

// method '+[NSString stringWithContentsOfFile:usedEncoding:error:]'
id _CM_NSString_stringWithContentsOfFile_CusedEncoding_Cerror_C(Class _class, NSString* path, unsigned int *enc, id *error);

// method '+[NSString stringWithContentsOfURL:]'
id _CM_NSString_stringWithContentsOfURL_C(Class _class, NSURL* url);

// method '+[NSString stringWithContentsOfURL:encoding:error:]'
id _CM_NSString_stringWithContentsOfURL_Cencoding_Cerror_C(Class _class, NSURL* url, unsigned int enc, id *error);

// method '+[NSString stringWithContentsOfURL:usedEncoding:error:]'
id _CM_NSString_stringWithContentsOfURL_CusedEncoding_Cerror_C(Class _class, NSURL* url, unsigned int *enc, id *error);

// method '+[NSString stringWithString:]'
id _CM_NSString_stringWithString_C(Class _class, NSString* string);

// method '+[NSString stringWithUTF8String:]'
id _CM_NSString_stringWithUTF8String_C(Class _class, const char* nullTerminatedCString);

// method '-[NSString stringsByAppendingPaths:]'
NSArray* _IM_NSString_stringsByAppendingPaths_C(NSString *_self, NSArray* paths);

// method '-[NSString substringFromIndex:]'
NSString* _IM_NSString_substringFromIndex_C(NSString *_self, unsigned int from);

// method '-[NSString substringToIndex:]'
NSString* _IM_NSString_substringToIndex_C(NSString *_self, unsigned int to);

// method '-[NSString substringWithRange:]'
NSString* _IM_NSString_substringWithRange_C(NSString *_self, struct _NSRange range);

// method '-[NSString uppercaseString]'
NSString* _IM_NSString_uppercaseString(NSString *_self);

// method '-[NSString writeToFile:atomically:]'
BOOL _IM_NSString_writeToFile_Catomically_C(NSString *_self, NSString* path, BOOL useAuxiliaryFile);

// method '-[NSString writeToFile:atomically:encoding:error:]'
BOOL _IM_NSString_writeToFile_Catomically_Cencoding_Cerror_C(NSString *_self, NSString* path, BOOL useAuxiliaryFile, unsigned int enc, id *error);

// method '-[NSString writeToURL:atomically:]'
BOOL _IM_NSString_writeToURL_Catomically_C(NSString *_self, NSURL* url, BOOL atomically);

// method '-[NSString writeToURL:atomically:encoding:error:]'
BOOL _IM_NSString_writeToURL_Catomically_Cencoding_Cerror_C(NSString *_self, NSURL* url, BOOL useAuxiliaryFile, unsigned int enc, id *error);

// method '-[NSTask arguments]'
NSArray* _IM_NSTask_arguments(NSTask *_self);

// method '-[NSTask currentDirectoryPath]'
NSString* _IM_NSTask_currentDirectoryPath(NSTask *_self);

// method '-[NSTask environment]'
NSDictionary* _IM_NSTask_environment(NSTask *_self);

// method '-[NSTask init]'
NSTask *_IM_NSTask_init(NSTask *_self);

// method '-[NSTask interrupt]'
void _IM_NSTask_interrupt(NSTask *_self);

// method '-[NSTask isRunning]'
BOOL _IM_NSTask_isRunning(NSTask *_self);

// method '-[NSTask launch]'
void _IM_NSTask_launch(NSTask *_self);

// method '-[NSTask launchPath]'
NSString* _IM_NSTask_launchPath(NSTask *_self);

// method '+[NSTask launchedTaskWithLaunchPath:arguments:]'
NSTask* _CM_NSTask_launchedTaskWithLaunchPath_Carguments_C(Class _class, NSString* path, NSArray* arguments);

// method '-[NSTask processIdentifier]'
int _IM_NSTask_processIdentifier(NSTask *_self);

// method '-[NSTask resume]'
BOOL _IM_NSTask_resume(NSTask *_self);

// method '-[NSTask setArguments:]'
void _IM_NSTask_setArguments_C(NSTask *_self, NSArray* arguments);

// method '-[NSTask setCurrentDirectoryPath:]'
void _IM_NSTask_setCurrentDirectoryPath_C(NSTask *_self, NSString* path);

// method '-[NSTask setEnvironment:]'
void _IM_NSTask_setEnvironment_C(NSTask *_self, NSDictionary* dict);

// method '-[NSTask setLaunchPath:]'
void _IM_NSTask_setLaunchPath_C(NSTask *_self, NSString* path);

// method '-[NSTask setStandardError:]'
void _IM_NSTask_setStandardError_C(NSTask *_self, id error);

// method '-[NSTask setStandardInput:]'
void _IM_NSTask_setStandardInput_C(NSTask *_self, id input);

// method '-[NSTask setStandardOutput:]'
void _IM_NSTask_setStandardOutput_C(NSTask *_self, id output);

// method '-[NSTask standardError]'
id _IM_NSTask_standardError(NSTask *_self);

// method '-[NSTask standardInput]'
id _IM_NSTask_standardInput(NSTask *_self);

// method '-[NSTask standardOutput]'
id _IM_NSTask_standardOutput(NSTask *_self);

// method '-[NSTask suspend]'
BOOL _IM_NSTask_suspend(NSTask *_self);

// method '-[NSTask terminate]'
void _IM_NSTask_terminate(NSTask *_self);

// method '-[NSTask terminationStatus]'
int _IM_NSTask_terminationStatus(NSTask *_self);

// method '-[NSTask waitUntilExit]'
void _IM_NSTask_waitUntilExit(NSTask *_self);

// method '+[NSThread currentThread]'
NSThread* _CM_NSThread_currentThread(Class _class);

// method '+[NSThread detachNewThreadSelector:toTarget:withObject:]'
void _CM_NSThread_detachNewThreadSelector_CtoTarget_CwithObject_C(Class _class, SEL selector, id target, id argument);

// method '+[NSThread exit]'
void _CM_NSThread_exit(Class _class);

// method '+[NSThread isMultiThreaded]'
BOOL _CM_NSThread_isMultiThreaded(Class _class);

// method '+[NSThread setThreadPriority:]'
BOOL _CM_NSThread_setThreadPriority_C(Class _class, double priority);

// method '+[NSThread sleepUntilDate:]'
void _CM_NSThread_sleepUntilDate_C(Class _class, NSDate* date);

// method '-[NSThread threadDictionary]'
NSMutableDictionary* _IM_NSThread_threadDictionary(NSThread *_self);

// method '+[NSThread threadPriority]'
double _CM_NSThread_threadPriority(Class _class);

// method '-[NSTimeZone abbreviation]'
NSString* _IM_NSTimeZone_abbreviation(NSTimeZone *_self);

// method '+[NSTimeZone abbreviationDictionary]'
NSDictionary* _CM_NSTimeZone_abbreviationDictionary(Class _class);

// method '-[NSTimeZone abbreviationForDate:]'
NSString* _IM_NSTimeZone_abbreviationForDate_C(NSTimeZone *_self, NSDate* aDate);

// method '-[NSTimeZone data]'
NSData* _IM_NSTimeZone_data(NSTimeZone *_self);

// method '+[NSTimeZone defaultTimeZone]'
NSTimeZone* _CM_NSTimeZone_defaultTimeZone(Class _class);

// method '-[NSTimeZone description]'
NSString* _IM_NSTimeZone_description(NSTimeZone *_self);

// method '-[NSTimeZone initWithName:]'
NSTimeZone *_IM_NSTimeZone_initWithName_C(NSTimeZone *_self, NSString* tzName);

// method '-[NSTimeZone initWithName:data:]'
NSTimeZone *_IM_NSTimeZone_initWithName_Cdata_C(NSTimeZone *_self, NSString* tzName, NSData* aData);

// method '-[NSTimeZone isDaylightSavingTime]'
BOOL _IM_NSTimeZone_isDaylightSavingTime(NSTimeZone *_self);

// method '-[NSTimeZone isDaylightSavingTimeForDate:]'
BOOL _IM_NSTimeZone_isDaylightSavingTimeForDate_C(NSTimeZone *_self, NSDate* aDate);

// method '-[NSTimeZone isEqualToTimeZone:]'
BOOL _IM_NSTimeZone_isEqualToTimeZone_C(NSTimeZone *_self, NSTimeZone* aTimeZone);

// method '+[NSTimeZone knownTimeZoneNames]'
NSArray* _CM_NSTimeZone_knownTimeZoneNames(Class _class);

// method '+[NSTimeZone localTimeZone]'
NSTimeZone* _CM_NSTimeZone_localTimeZone(Class _class);

// method '-[NSTimeZone name]'
NSString* _IM_NSTimeZone_name(NSTimeZone *_self);

// method '+[NSTimeZone resetSystemTimeZone]'
void _CM_NSTimeZone_resetSystemTimeZone(Class _class);

// method '-[NSTimeZone secondsFromGMT]'
int _IM_NSTimeZone_secondsFromGMT(NSTimeZone *_self);

// method '-[NSTimeZone secondsFromGMTForDate:]'
int _IM_NSTimeZone_secondsFromGMTForDate_C(NSTimeZone *_self, NSDate* aDate);

// method '+[NSTimeZone setDefaultTimeZone:]'
void _CM_NSTimeZone_setDefaultTimeZone_C(Class _class, NSTimeZone* aTimeZone);

// method '+[NSTimeZone systemTimeZone]'
NSTimeZone* _CM_NSTimeZone_systemTimeZone(Class _class);

// method '+[NSTimeZone timeZoneForSecondsFromGMT:]'
id _CM_NSTimeZone_timeZoneForSecondsFromGMT_C(Class _class, int seconds);

// method '+[NSTimeZone timeZoneWithAbbreviation:]'
id _CM_NSTimeZone_timeZoneWithAbbreviation_C(Class _class, NSString* abbreviation);

// method '+[NSTimeZone timeZoneWithName:]'
id _CM_NSTimeZone_timeZoneWithName_C(Class _class, NSString* tzName);

// method '+[NSTimeZone timeZoneWithName:data:]'
id _CM_NSTimeZone_timeZoneWithName_Cdata_C(Class _class, NSString* tzName, NSData* aData);

// method '-[NSTimer fire]'
void _IM_NSTimer_fire(NSTimer *_self);

// method '-[NSTimer fireDate]'
NSDate* _IM_NSTimer_fireDate(NSTimer *_self);

// method '-[NSTimer initWithFireDate:interval:target:selector:userInfo:repeats:]'
NSTimer *_IM_NSTimer_initWithFireDate_Cinterval_Ctarget_Cselector_CuserInfo_Crepeats_C(NSTimer *_self, NSDate* date, double ti, id t, SEL s, id ui, BOOL rep);

// method '-[NSTimer invalidate]'
void _IM_NSTimer_invalidate(NSTimer *_self);

// method '-[NSTimer isValid]'
BOOL _IM_NSTimer_isValid(NSTimer *_self);

// method '+[NSTimer scheduledTimerWithTimeInterval:invocation:repeats:]'
NSTimer* _CM_NSTimer_scheduledTimerWithTimeInterval_Cinvocation_Crepeats_C(Class _class, double ti, NSInvocation* invocation, BOOL yesOrNo);

// method '+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]'
NSTimer* _CM_NSTimer_scheduledTimerWithTimeInterval_Ctarget_Cselector_CuserInfo_Crepeats_C(Class _class, double ti, id aTarget, SEL aSelector, id userInfo, BOOL yesOrNo);

// method '-[NSTimer setFireDate:]'
void _IM_NSTimer_setFireDate_C(NSTimer *_self, NSDate* date);

// method '-[NSTimer timeInterval]'
double _IM_NSTimer_timeInterval(NSTimer *_self);

// method '+[NSTimer timerWithTimeInterval:invocation:repeats:]'
NSTimer* _CM_NSTimer_timerWithTimeInterval_Cinvocation_Crepeats_C(Class _class, double ti, NSInvocation* invocation, BOOL yesOrNo);

// method '+[NSTimer timerWithTimeInterval:target:selector:userInfo:repeats:]'
NSTimer* _CM_NSTimer_timerWithTimeInterval_Ctarget_Cselector_CuserInfo_Crepeats_C(Class _class, double ti, id aTarget, SEL aSelector, id userInfo, BOOL yesOrNo);

// method '-[NSTimer userInfo]'
id _IM_NSTimer_userInfo(NSTimer *_self);

// method '-[NSURL URLHandleUsingCache:]'
NSURLHandle* _IM_NSURL_URLHandleUsingCache_C(NSURL *_self, BOOL shouldUseCache);

// method '+[NSURL URLWithString:]'
id _CM_NSURL_URLWithString_C(Class _class, NSString* URLString);

// method '+[NSURL URLWithString:relativeToURL:]'
id _CM_NSURL_URLWithString_CrelativeToURL_C(Class _class, NSString* URLString, NSURL* baseURL);

// method '-[NSURL absoluteString]'
NSString* _IM_NSURL_absoluteString(NSURL *_self);

// method '-[NSURL absoluteURL]'
NSURL* _IM_NSURL_absoluteURL(NSURL *_self);

// method '-[NSURL baseURL]'
NSURL* _IM_NSURL_baseURL(NSURL *_self);

// method '+[NSURL fileURLWithPath:]'
id _CM_NSURL_fileURLWithPath_C(Class _class, NSString* path);

// method '-[NSURL fragment]'
NSString* _IM_NSURL_fragment(NSURL *_self);

// method '-[NSURL host]'
NSString* _IM_NSURL_host(NSURL *_self);

// method '-[NSURL initFileURLWithPath:]'
NSURL *_IM_NSURL_initFileURLWithPath_C(NSURL *_self, NSString* path);

// method '-[NSURL initWithScheme:host:path:]'
NSURL *_IM_NSURL_initWithScheme_Chost_Cpath_C(NSURL *_self, NSString* scheme, NSString* host, NSString* path);

// method '-[NSURL initWithString:]'
NSURL *_IM_NSURL_initWithString_C(NSURL *_self, NSString* URLString);

// method '-[NSURL initWithString:relativeToURL:]'
NSURL *_IM_NSURL_initWithString_CrelativeToURL_C(NSURL *_self, NSString* URLString, NSURL* baseURL);

// method '-[NSURL isFileURL]'
BOOL _IM_NSURL_isFileURL(NSURL *_self);

// method '-[NSURL loadResourceDataNotifyingClient:usingCache:]'
void _IM_NSURL_loadResourceDataNotifyingClient_CusingCache_C(NSURL *_self, id client, BOOL shouldUseCache);

// method '-[NSURL parameterString]'
NSString* _IM_NSURL_parameterString(NSURL *_self);

// method '-[NSURL password]'
NSString* _IM_NSURL_password(NSURL *_self);

// method '-[NSURL path]'
NSString* _IM_NSURL_path(NSURL *_self);

// method '-[NSURL port]'
NSNumber* _IM_NSURL_port(NSURL *_self);

// method '-[NSURL propertyForKey:]'
id _IM_NSURL_propertyForKey_C(NSURL *_self, NSString* propertyKey);

// method '-[NSURL query]'
NSString* _IM_NSURL_query(NSURL *_self);

// method '-[NSURL relativePath]'
NSString* _IM_NSURL_relativePath(NSURL *_self);

// method '-[NSURL relativeString]'
NSString* _IM_NSURL_relativeString(NSURL *_self);

// method '-[NSURL resourceDataUsingCache:]'
NSData* _IM_NSURL_resourceDataUsingCache_C(NSURL *_self, BOOL shouldUseCache);

// method '-[NSURL resourceSpecifier]'
NSString* _IM_NSURL_resourceSpecifier(NSURL *_self);

// method '-[NSURL scheme]'
NSString* _IM_NSURL_scheme(NSURL *_self);

// method '-[NSURL setProperty:forKey:]'
BOOL _IM_NSURL_setProperty_CforKey_C(NSURL *_self, id property, NSString* propertyKey);

// method '-[NSURL setResourceData:]'
BOOL _IM_NSURL_setResourceData_C(NSURL *_self, NSData* data);

// method '-[NSURL standardizedURL]'
NSURL* _IM_NSURL_standardizedURL(NSURL *_self);

// method '-[NSURL user]'
NSString* _IM_NSURL_user(NSURL *_self);

// method '-[NSURLAuthenticationChallenge error]'
NSError* _IM_NSURLAuthenticationChallenge_error(NSURLAuthenticationChallenge *_self);

// method '-[NSURLAuthenticationChallenge failureResponse]'
NSURLResponse* _IM_NSURLAuthenticationChallenge_failureResponse(NSURLAuthenticationChallenge *_self);

// method '-[NSURLAuthenticationChallenge initWithAuthenticationChallenge:sender:]'
NSURLAuthenticationChallenge *_IM_NSURLAuthenticationChallenge_initWithAuthenticationChallenge_Csender_C(NSURLAuthenticationChallenge *_self, NSURLAuthenticationChallenge* challenge, id sender);

// method '-[NSURLAuthenticationChallenge initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:]'
NSURLAuthenticationChallenge *_IM_NSURLAuthenticationChallenge_initWithProtectionSpace_CproposedCredential_CpreviousFailureCount_CfailureResponse_Cerror_Csender_C(NSURLAuthenticationChallenge *_self, NSURLProtectionSpace* space, NSURLCredential* credential, int previousFailureCount, NSURLResponse* response, NSError* error, id sender);

// method '-[NSURLAuthenticationChallenge previousFailureCount]'
int _IM_NSURLAuthenticationChallenge_previousFailureCount(NSURLAuthenticationChallenge *_self);

// method '-[NSURLAuthenticationChallenge proposedCredential]'
NSURLCredential* _IM_NSURLAuthenticationChallenge_proposedCredential(NSURLAuthenticationChallenge *_self);

// method '-[NSURLAuthenticationChallenge protectionSpace]'
NSURLProtectionSpace* _IM_NSURLAuthenticationChallenge_protectionSpace(NSURLAuthenticationChallenge *_self);

// method '-[NSURLAuthenticationChallenge sender]'
id _IM_NSURLAuthenticationChallenge_sender(NSURLAuthenticationChallenge *_self);

// method '-[NSURLCache cachedResponseForRequest:]'
NSCachedURLResponse* _IM_NSURLCache_cachedResponseForRequest_C(NSURLCache *_self, NSURLRequest* request);

// method '-[NSURLCache currentDiskUsage]'
unsigned int _IM_NSURLCache_currentDiskUsage(NSURLCache *_self);

// method '-[NSURLCache currentMemoryUsage]'
unsigned int _IM_NSURLCache_currentMemoryUsage(NSURLCache *_self);

// method '-[NSURLCache diskCapacity]'
unsigned int _IM_NSURLCache_diskCapacity(NSURLCache *_self);

// method '-[NSURLCache initWithMemoryCapacity:diskCapacity:diskPath:]'
NSURLCache *_IM_NSURLCache_initWithMemoryCapacity_CdiskCapacity_CdiskPath_C(NSURLCache *_self, unsigned int memoryCapacity, unsigned int diskCapacity, NSString* path);

// method '-[NSURLCache memoryCapacity]'
unsigned int _IM_NSURLCache_memoryCapacity(NSURLCache *_self);

// method '-[NSURLCache removeAllCachedResponses]'
void _IM_NSURLCache_removeAllCachedResponses(NSURLCache *_self);

// method '-[NSURLCache removeCachedResponseForRequest:]'
void _IM_NSURLCache_removeCachedResponseForRequest_C(NSURLCache *_self, NSURLRequest* request);

// method '-[NSURLCache setDiskCapacity:]'
void _IM_NSURLCache_setDiskCapacity_C(NSURLCache *_self, unsigned int diskCapacity);

// method '-[NSURLCache setMemoryCapacity:]'
void _IM_NSURLCache_setMemoryCapacity_C(NSURLCache *_self, unsigned int memoryCapacity);

// method '+[NSURLCache setSharedURLCache:]'
void _CM_NSURLCache_setSharedURLCache_C(Class _class, NSURLCache* cache);

// method '+[NSURLCache sharedURLCache]'
NSURLCache* _CM_NSURLCache_sharedURLCache(Class _class);

// method '-[NSURLCache storeCachedResponse:forRequest:]'
void _IM_NSURLCache_storeCachedResponse_CforRequest_C(NSURLCache *_self, NSCachedURLResponse* cachedResponse, NSURLRequest* request);

// method '+[NSURLConnection canHandleRequest:]'
BOOL _CM_NSURLConnection_canHandleRequest_C(Class _class, NSURLRequest* request);

// method '-[NSURLConnection cancel]'
void _IM_NSURLConnection_cancel(NSURLConnection *_self);

// method '+[NSURLConnection connectionWithRequest:delegate:]'
NSURLConnection* _CM_NSURLConnection_connectionWithRequest_Cdelegate_C(Class _class, NSURLRequest* request, id delegate);

// method '-[NSURLConnection initWithRequest:delegate:]'
NSURLConnection *_IM_NSURLConnection_initWithRequest_Cdelegate_C(NSURLConnection *_self, NSURLRequest* request, id delegate);

// method '+[NSURLConnection sendSynchronousRequest:returningResponse:error:]'
NSData* _CM_NSURLConnection_sendSynchronousRequest_CreturningResponse_Cerror_C(Class _class, NSURLRequest* request, id *response, id *error);

// method '+[NSURLCredential credentialWithUser:password:persistence:]'
NSURLCredential* _CM_NSURLCredential_credentialWithUser_Cpassword_Cpersistence_C(Class _class, NSString* user, NSString* password, int persistence);

// method '-[NSURLCredential hasPassword]'
BOOL _IM_NSURLCredential_hasPassword(NSURLCredential *_self);

// method '-[NSURLCredential initWithUser:password:persistence:]'
NSURLCredential *_IM_NSURLCredential_initWithUser_Cpassword_Cpersistence_C(NSURLCredential *_self, NSString* user, NSString* password, int persistence);

// method '-[NSURLCredential password]'
NSString* _IM_NSURLCredential_password(NSURLCredential *_self);

// method '-[NSURLCredential persistence]'
int _IM_NSURLCredential_persistence(NSURLCredential *_self);

// method '-[NSURLCredential user]'
NSString* _IM_NSURLCredential_user(NSURLCredential *_self);

// method '-[NSURLCredentialStorage allCredentials]'
NSDictionary* _IM_NSURLCredentialStorage_allCredentials(NSURLCredentialStorage *_self);

// method '-[NSURLCredentialStorage credentialsForProtectionSpace:]'
NSDictionary* _IM_NSURLCredentialStorage_credentialsForProtectionSpace_C(NSURLCredentialStorage *_self, NSURLProtectionSpace* space);

// method '-[NSURLCredentialStorage defaultCredentialForProtectionSpace:]'
NSURLCredential* _IM_NSURLCredentialStorage_defaultCredentialForProtectionSpace_C(NSURLCredentialStorage *_self, NSURLProtectionSpace* space);

// method '-[NSURLCredentialStorage removeCredential:forProtectionSpace:]'
void _IM_NSURLCredentialStorage_removeCredential_CforProtectionSpace_C(NSURLCredentialStorage *_self, NSURLCredential* credential, NSURLProtectionSpace* space);

// method '-[NSURLCredentialStorage setCredential:forProtectionSpace:]'
void _IM_NSURLCredentialStorage_setCredential_CforProtectionSpace_C(NSURLCredentialStorage *_self, NSURLCredential* credential, NSURLProtectionSpace* space);

// method '-[NSURLCredentialStorage setDefaultCredential:forProtectionSpace:]'
void _IM_NSURLCredentialStorage_setDefaultCredential_CforProtectionSpace_C(NSURLCredentialStorage *_self, NSURLCredential* credential, NSURLProtectionSpace* space);

// method '+[NSURLCredentialStorage sharedCredentialStorage]'
NSURLCredentialStorage* _CM_NSURLCredentialStorage_sharedCredentialStorage(Class _class);

// method '+[NSURLDownload canResumeDownloadDecodedWithEncodingMIMEType:]'
BOOL _CM_NSURLDownload_canResumeDownloadDecodedWithEncodingMIMEType_C(Class _class, NSString* MIMEType);

// method '-[NSURLDownload cancel]'
void _IM_NSURLDownload_cancel(NSURLDownload *_self);

// method '-[NSURLDownload deletesFileUponFailure]'
BOOL _IM_NSURLDownload_deletesFileUponFailure(NSURLDownload *_self);

// method '-[NSURLDownload initWithRequest:delegate:]'
NSURLDownload *_IM_NSURLDownload_initWithRequest_Cdelegate_C(NSURLDownload *_self, NSURLRequest* request, id delegate);

// method '-[NSURLDownload initWithResumeData:delegate:path:]'
NSURLDownload *_IM_NSURLDownload_initWithResumeData_Cdelegate_Cpath_C(NSURLDownload *_self, NSData* resumeData, id delegate, NSString* path);

// method '-[NSURLDownload request]'
NSURLRequest* _IM_NSURLDownload_request(NSURLDownload *_self);

// method '-[NSURLDownload resumeData]'
NSData* _IM_NSURLDownload_resumeData(NSURLDownload *_self);

// method '-[NSURLDownload setDeletesFileUponFailure:]'
void _IM_NSURLDownload_setDeletesFileUponFailure_C(NSURLDownload *_self, BOOL deletesFileUponFailure);

// method '-[NSURLDownload setDestination:allowOverwrite:]'
void _IM_NSURLDownload_setDestination_CallowOverwrite_C(NSURLDownload *_self, NSString* path, BOOL allowOverwrite);

// method '+[NSURLHandle URLHandleClassForURL:]'
Class _CM_NSURLHandle_URLHandleClassForURL_C(Class _class, NSURL* anURL);

// method '-[NSURLHandle addClient:]'
void _IM_NSURLHandle_addClient_C(NSURLHandle *_self, id client);

// method '-[NSURLHandle availableResourceData]'
NSData* _IM_NSURLHandle_availableResourceData(NSURLHandle *_self);

// method '-[NSURLHandle backgroundLoadDidFailWithReason:]'
void _IM_NSURLHandle_backgroundLoadDidFailWithReason_C(NSURLHandle *_self, NSString* reason);

// method '-[NSURLHandle beginLoadInBackground]'
void _IM_NSURLHandle_beginLoadInBackground(NSURLHandle *_self);

// method '+[NSURLHandle cachedHandleForURL:]'
NSURLHandle* _CM_NSURLHandle_cachedHandleForURL_C(Class _class, NSURL* anURL);

// method '+[NSURLHandle canInitWithURL:]'
BOOL _CM_NSURLHandle_canInitWithURL_C(Class _class, NSURL* anURL);

// method '-[NSURLHandle cancelLoadInBackground]'
void _IM_NSURLHandle_cancelLoadInBackground(NSURLHandle *_self);

// method '-[NSURLHandle didLoadBytes:loadComplete:]'
void _IM_NSURLHandle_didLoadBytes_CloadComplete_C(NSURLHandle *_self, NSData* newBytes, BOOL yorn);

// method '-[NSURLHandle endLoadInBackground]'
void _IM_NSURLHandle_endLoadInBackground(NSURLHandle *_self);

// method '-[NSURLHandle expectedResourceDataSize]'
long long _IM_NSURLHandle_expectedResourceDataSize(NSURLHandle *_self);

// method '-[NSURLHandle failureReason]'
NSString* _IM_NSURLHandle_failureReason(NSURLHandle *_self);

// method '-[NSURLHandle flushCachedData]'
void _IM_NSURLHandle_flushCachedData(NSURLHandle *_self);

// method '-[NSURLHandle initWithURL:cached:]'
NSURLHandle *_IM_NSURLHandle_initWithURL_Ccached_C(NSURLHandle *_self, NSURL* anURL, BOOL willCache);

// method '-[NSURLHandle loadInBackground]'
void _IM_NSURLHandle_loadInBackground(NSURLHandle *_self);

// method '-[NSURLHandle loadInForeground]'
NSData* _IM_NSURLHandle_loadInForeground(NSURLHandle *_self);

// method '-[NSURLHandle propertyForKey:]'
id _IM_NSURLHandle_propertyForKey_C(NSURLHandle *_self, NSString* propertyKey);

// method '-[NSURLHandle propertyForKeyIfAvailable:]'
id _IM_NSURLHandle_propertyForKeyIfAvailable_C(NSURLHandle *_self, NSString* propertyKey);

// method '+[NSURLHandle registerURLHandleClass:]'
void _CM_NSURLHandle_registerURLHandleClass_C(Class _class, Class anURLHandleSubclass);

// method '-[NSURLHandle removeClient:]'
void _IM_NSURLHandle_removeClient_C(NSURLHandle *_self, id client);

// method '-[NSURLHandle resourceData]'
NSData* _IM_NSURLHandle_resourceData(NSURLHandle *_self);

// method '-[NSURLHandle status]'
int _IM_NSURLHandle_status(NSURLHandle *_self);

// method '-[NSURLHandle writeData:]'
BOOL _IM_NSURLHandle_writeData_C(NSURLHandle *_self, NSData* data);

// method '-[NSURLHandle writeProperty:forKey:]'
BOOL _IM_NSURLHandle_writeProperty_CforKey_C(NSURLHandle *_self, id propertyValue, NSString* propertyKey);

// method '-[NSURLProtectionSpace authenticationMethod]'
NSString* _IM_NSURLProtectionSpace_authenticationMethod(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace host]'
NSString* _IM_NSURLProtectionSpace_host(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace initWithHost:port:protocol:realm:authenticationMethod:]'
NSURLProtectionSpace *_IM_NSURLProtectionSpace_initWithHost_Cport_Cprotocol_Crealm_CauthenticationMethod_C(NSURLProtectionSpace *_self, NSString* host, int port, NSString* protocol, NSString* realm, NSString* authenticationMethod);

// method '-[NSURLProtectionSpace initWithProxyHost:port:type:realm:authenticationMethod:]'
NSURLProtectionSpace *_IM_NSURLProtectionSpace_initWithProxyHost_Cport_Ctype_Crealm_CauthenticationMethod_C(NSURLProtectionSpace *_self, NSString* host, int port, NSString* type, NSString* realm, NSString* authenticationMethod);

// method '-[NSURLProtectionSpace isProxy]'
BOOL _IM_NSURLProtectionSpace_isProxy(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace port]'
int _IM_NSURLProtectionSpace_port(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace protocol]'
NSString* _IM_NSURLProtectionSpace_protocol(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace proxyType]'
NSString* _IM_NSURLProtectionSpace_proxyType(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace realm]'
NSString* _IM_NSURLProtectionSpace_realm(NSURLProtectionSpace *_self);

// method '-[NSURLProtectionSpace receivesCredentialSecurely]'
BOOL _IM_NSURLProtectionSpace_receivesCredentialSecurely(NSURLProtectionSpace *_self);

// method '-[NSURLProtocol cachedResponse]'
NSCachedURLResponse* _IM_NSURLProtocol_cachedResponse(NSURLProtocol *_self);

// method '+[NSURLProtocol canInitWithRequest:]'
BOOL _CM_NSURLProtocol_canInitWithRequest_C(Class _class, NSURLRequest* request);

// method '+[NSURLProtocol canonicalRequestForRequest:]'
NSURLRequest* _CM_NSURLProtocol_canonicalRequestForRequest_C(Class _class, NSURLRequest* request);

// method '-[NSURLProtocol client]'
id _IM_NSURLProtocol_client(NSURLProtocol *_self);

// method '-[NSURLProtocol initWithRequest:cachedResponse:client:]'
NSURLProtocol *_IM_NSURLProtocol_initWithRequest_CcachedResponse_Cclient_C(NSURLProtocol *_self, NSURLRequest* request, NSCachedURLResponse* cachedResponse, id client);

// method '+[NSURLProtocol propertyForKey:inRequest:]'
id _CM_NSURLProtocol_propertyForKey_CinRequest_C(Class _class, NSString* key, NSURLRequest* request);

// method '+[NSURLProtocol registerClass:]'
BOOL _CM_NSURLProtocol_registerClass_C(Class _class, Class protocolClass);

// method '-[NSURLProtocol request]'
NSURLRequest* _IM_NSURLProtocol_request(NSURLProtocol *_self);

// method '+[NSURLProtocol requestIsCacheEquivalent:toRequest:]'
BOOL _CM_NSURLProtocol_requestIsCacheEquivalent_CtoRequest_C(Class _class, NSURLRequest* a, NSURLRequest* b);

// method '+[NSURLProtocol setProperty:forKey:inRequest:]'
void _CM_NSURLProtocol_setProperty_CforKey_CinRequest_C(Class _class, id value, NSString* key, NSMutableURLRequest* request);

// method '-[NSURLProtocol startLoading]'
void _IM_NSURLProtocol_startLoading(NSURLProtocol *_self);

// method '-[NSURLProtocol stopLoading]'
void _IM_NSURLProtocol_stopLoading(NSURLProtocol *_self);

// method '+[NSURLProtocol unregisterClass:]'
void _CM_NSURLProtocol_unregisterClass_C(Class _class, Class protocolClass);

// method '-[NSURLRequest HTTPBody]'
NSData* _IM_NSURLRequest_HTTPBody(NSURLRequest *_self);

// method '-[NSURLRequest HTTPBodyStream]'
NSInputStream* _IM_NSURLRequest_HTTPBodyStream(NSURLRequest *_self);

// method '-[NSURLRequest HTTPMethod]'
NSString* _IM_NSURLRequest_HTTPMethod(NSURLRequest *_self);

// method '-[NSURLRequest HTTPShouldHandleCookies]'
BOOL _IM_NSURLRequest_HTTPShouldHandleCookies(NSURLRequest *_self);

// method '-[NSURLRequest URL]'
NSURL* _IM_NSURLRequest_URL(NSURLRequest *_self);

// method '-[NSURLRequest allHTTPHeaderFields]'
NSDictionary* _IM_NSURLRequest_allHTTPHeaderFields(NSURLRequest *_self);

// method '-[NSURLRequest cachePolicy]'
int _IM_NSURLRequest_cachePolicy(NSURLRequest *_self);

// method '-[NSURLRequest initWithURL:]'
NSURLRequest *_IM_NSURLRequest_initWithURL_C(NSURLRequest *_self, NSURL* URL);

// method '-[NSURLRequest initWithURL:cachePolicy:timeoutInterval:]'
NSURLRequest *_IM_NSURLRequest_initWithURL_CcachePolicy_CtimeoutInterval_C(NSURLRequest *_self, NSURL* URL, int cachePolicy, double timeoutInterval);

// method '-[NSURLRequest mainDocumentURL]'
NSURL* _IM_NSURLRequest_mainDocumentURL(NSURLRequest *_self);

// method '+[NSURLRequest requestWithURL:]'
id _CM_NSURLRequest_requestWithURL_C(Class _class, NSURL* URL);

// method '+[NSURLRequest requestWithURL:cachePolicy:timeoutInterval:]'
id _CM_NSURLRequest_requestWithURL_CcachePolicy_CtimeoutInterval_C(Class _class, NSURL* URL, int cachePolicy, double timeoutInterval);

// method '-[NSURLRequest timeoutInterval]'
double _IM_NSURLRequest_timeoutInterval(NSURLRequest *_self);

// method '-[NSURLRequest valueForHTTPHeaderField:]'
NSString* _IM_NSURLRequest_valueForHTTPHeaderField_C(NSURLRequest *_self, NSString* field);

// method '-[NSURLResponse MIMEType]'
NSString* _IM_NSURLResponse_MIMEType(NSURLResponse *_self);

// method '-[NSURLResponse URL]'
NSURL* _IM_NSURLResponse_URL(NSURLResponse *_self);

// method '-[NSURLResponse expectedContentLength]'
long long _IM_NSURLResponse_expectedContentLength(NSURLResponse *_self);

// method '-[NSURLResponse initWithURL:MIMEType:expectedContentLength:textEncodingName:]'
NSURLResponse *_IM_NSURLResponse_initWithURL_CMIMEType_CexpectedContentLength_CtextEncodingName_C(NSURLResponse *_self, NSURL* URL, NSString* MIMEType, int length, NSString* name);

// method '-[NSURLResponse suggestedFilename]'
NSString* _IM_NSURLResponse_suggestedFilename(NSURLResponse *_self);

// method '-[NSURLResponse textEncodingName]'
NSString* _IM_NSURLResponse_textEncodingName(NSURLResponse *_self);

// method '+[NSUnarchiver classNameDecodedForArchiveClassName:]'
NSString* _CM_NSUnarchiver_classNameDecodedForArchiveClassName_C(Class _class, NSString* inArchiveName);

// method '-[NSUnarchiver classNameDecodedForArchiveClassName:]'
NSString* _IM_NSUnarchiver_classNameDecodedForArchiveClassName_C(NSUnarchiver *_self, NSString* inArchiveName);

// method '+[NSUnarchiver decodeClassName:asClassName:]'
void _CM_NSUnarchiver_decodeClassName_CasClassName_C(Class _class, NSString* inArchiveName, NSString* trueName);

// method '-[NSUnarchiver decodeClassName:asClassName:]'
void _IM_NSUnarchiver_decodeClassName_CasClassName_C(NSUnarchiver *_self, NSString* inArchiveName, NSString* trueName);

// method '-[NSUnarchiver initForReadingWithData:]'
NSUnarchiver *_IM_NSUnarchiver_initForReadingWithData_C(NSUnarchiver *_self, NSData* data);

// method '-[NSUnarchiver isAtEnd]'
BOOL _IM_NSUnarchiver_isAtEnd(NSUnarchiver *_self);

// method '-[NSUnarchiver objectZone]'
struct _NSZone *_IM_NSUnarchiver_objectZone(NSUnarchiver *_self);

// method '-[NSUnarchiver replaceObject:withObject:]'
void _IM_NSUnarchiver_replaceObject_CwithObject_C(NSUnarchiver *_self, id object, id newObject);

// method '-[NSUnarchiver setObjectZone:]'
void _IM_NSUnarchiver_setObjectZone_C(NSUnarchiver *_self, struct _NSZone *zone);

// method '-[NSUnarchiver systemVersion]'
unsigned int _IM_NSUnarchiver_systemVersion(NSUnarchiver *_self);

// method '+[NSUnarchiver unarchiveObjectWithData:]'
id _CM_NSUnarchiver_unarchiveObjectWithData_C(Class _class, NSData* data);

// method '+[NSUnarchiver unarchiveObjectWithFile:]'
id _CM_NSUnarchiver_unarchiveObjectWithFile_C(Class _class, NSString* path);

// method '-[NSUndoManager beginUndoGrouping]'
void _IM_NSUndoManager_beginUndoGrouping(NSUndoManager *_self);

// method '-[NSUndoManager canRedo]'
BOOL _IM_NSUndoManager_canRedo(NSUndoManager *_self);

// method '-[NSUndoManager canUndo]'
BOOL _IM_NSUndoManager_canUndo(NSUndoManager *_self);

// method '-[NSUndoManager disableUndoRegistration]'
void _IM_NSUndoManager_disableUndoRegistration(NSUndoManager *_self);

// method '-[NSUndoManager enableUndoRegistration]'
void _IM_NSUndoManager_enableUndoRegistration(NSUndoManager *_self);

// method '-[NSUndoManager endUndoGrouping]'
void _IM_NSUndoManager_endUndoGrouping(NSUndoManager *_self);

// method '-[NSUndoManager forwardInvocation:]'
void _IM_NSUndoManager_forwardInvocation_C(NSUndoManager *_self, NSInvocation* anInvocation);

// method '-[NSUndoManager groupingLevel]'
int _IM_NSUndoManager_groupingLevel(NSUndoManager *_self);

// method '-[NSUndoManager groupsByEvent]'
BOOL _IM_NSUndoManager_groupsByEvent(NSUndoManager *_self);

// method '-[NSUndoManager isRedoing]'
BOOL _IM_NSUndoManager_isRedoing(NSUndoManager *_self);

// method '-[NSUndoManager isUndoRegistrationEnabled]'
BOOL _IM_NSUndoManager_isUndoRegistrationEnabled(NSUndoManager *_self);

// method '-[NSUndoManager isUndoing]'
BOOL _IM_NSUndoManager_isUndoing(NSUndoManager *_self);

// method '-[NSUndoManager levelsOfUndo]'
unsigned int _IM_NSUndoManager_levelsOfUndo(NSUndoManager *_self);

// method '-[NSUndoManager prepareWithInvocationTarget:]'
id _IM_NSUndoManager_prepareWithInvocationTarget_C(NSUndoManager *_self, id target);

// method '-[NSUndoManager redo]'
void _IM_NSUndoManager_redo(NSUndoManager *_self);

// method '-[NSUndoManager redoActionName]'
NSString* _IM_NSUndoManager_redoActionName(NSUndoManager *_self);

// method '-[NSUndoManager redoMenuItemTitle]'
NSString* _IM_NSUndoManager_redoMenuItemTitle(NSUndoManager *_self);

// method '-[NSUndoManager redoMenuTitleForUndoActionName:]'
NSString* _IM_NSUndoManager_redoMenuTitleForUndoActionName_C(NSUndoManager *_self, NSString* actionName);

// method '-[NSUndoManager registerUndoWithTarget:selector:object:]'
void _IM_NSUndoManager_registerUndoWithTarget_Cselector_Cobject_C(NSUndoManager *_self, id target, SEL selector, id anObject);

// method '-[NSUndoManager removeAllActions]'
void _IM_NSUndoManager_removeAllActions(NSUndoManager *_self);

// method '-[NSUndoManager removeAllActionsWithTarget:]'
void _IM_NSUndoManager_removeAllActionsWithTarget_C(NSUndoManager *_self, id target);

// method '-[NSUndoManager runLoopModes]'
NSArray* _IM_NSUndoManager_runLoopModes(NSUndoManager *_self);

// method '-[NSUndoManager setActionName:]'
void _IM_NSUndoManager_setActionName_C(NSUndoManager *_self, NSString* actionName);

// method '-[NSUndoManager setGroupsByEvent:]'
void _IM_NSUndoManager_setGroupsByEvent_C(NSUndoManager *_self, BOOL groupsByEvent);

// method '-[NSUndoManager setLevelsOfUndo:]'
void _IM_NSUndoManager_setLevelsOfUndo_C(NSUndoManager *_self, unsigned int levels);

// method '-[NSUndoManager setRunLoopModes:]'
void _IM_NSUndoManager_setRunLoopModes_C(NSUndoManager *_self, NSArray* runLoopModes);

// method '-[NSUndoManager undo]'
void _IM_NSUndoManager_undo(NSUndoManager *_self);

// method '-[NSUndoManager undoActionName]'
NSString* _IM_NSUndoManager_undoActionName(NSUndoManager *_self);

// method '-[NSUndoManager undoMenuItemTitle]'
NSString* _IM_NSUndoManager_undoMenuItemTitle(NSUndoManager *_self);

// method '-[NSUndoManager undoMenuTitleForUndoActionName:]'
NSString* _IM_NSUndoManager_undoMenuTitleForUndoActionName_C(NSUndoManager *_self, NSString* actionName);

// method '-[NSUndoManager undoNestedGroup]'
void _IM_NSUndoManager_undoNestedGroup(NSUndoManager *_self);

// method '-[NSUniqueIDSpecifier initWithContainerClassDescription:containerSpecifier:key:uniqueID:]'
NSUniqueIDSpecifier *_IM_NSUniqueIDSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_CuniqueID_C(NSUniqueIDSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property, id uniqueID);

// method '-[NSUniqueIDSpecifier setUniqueID:]'
void _IM_NSUniqueIDSpecifier_setUniqueID_C(NSUniqueIDSpecifier *_self, id uniqueID);

// method '-[NSUniqueIDSpecifier uniqueID]'
id _IM_NSUniqueIDSpecifier_uniqueID(NSUniqueIDSpecifier *_self);

// method '-[NSUserDefaults addSuiteNamed:]'
void _IM_NSUserDefaults_addSuiteNamed_C(NSUserDefaults *_self, NSString* suiteName);

// method '-[NSUserDefaults arrayForKey:]'
NSArray* _IM_NSUserDefaults_arrayForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults boolForKey:]'
BOOL _IM_NSUserDefaults_boolForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults dataForKey:]'
NSData* _IM_NSUserDefaults_dataForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults dictionaryForKey:]'
NSDictionary* _IM_NSUserDefaults_dictionaryForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults dictionaryRepresentation]'
NSDictionary* _IM_NSUserDefaults_dictionaryRepresentation(NSUserDefaults *_self);

// method '-[NSUserDefaults floatForKey:]'
float _IM_NSUserDefaults_floatForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults init]'
NSUserDefaults *_IM_NSUserDefaults_init(NSUserDefaults *_self);

// method '-[NSUserDefaults initWithUser:]'
NSUserDefaults *_IM_NSUserDefaults_initWithUser_C(NSUserDefaults *_self, NSString* username);

// method '-[NSUserDefaults integerForKey:]'
int _IM_NSUserDefaults_integerForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults objectForKey:]'
id _IM_NSUserDefaults_objectForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults objectIsForcedForKey:]'
BOOL _IM_NSUserDefaults_objectIsForcedForKey_C(NSUserDefaults *_self, NSString* key);

// method '-[NSUserDefaults objectIsForcedForKey:inDomain:]'
BOOL _IM_NSUserDefaults_objectIsForcedForKey_CinDomain_C(NSUserDefaults *_self, NSString* key, NSString* domain);

// method '-[NSUserDefaults persistentDomainForName:]'
NSDictionary* _IM_NSUserDefaults_persistentDomainForName_C(NSUserDefaults *_self, NSString* domainName);

// method '-[NSUserDefaults persistentDomainNames]'
NSArray* _IM_NSUserDefaults_persistentDomainNames(NSUserDefaults *_self);

// method '-[NSUserDefaults registerDefaults:]'
void _IM_NSUserDefaults_registerDefaults_C(NSUserDefaults *_self, NSDictionary* registrationDictionary);

// method '-[NSUserDefaults removeObjectForKey:]'
void _IM_NSUserDefaults_removeObjectForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults removePersistentDomainForName:]'
void _IM_NSUserDefaults_removePersistentDomainForName_C(NSUserDefaults *_self, NSString* domainName);

// method '-[NSUserDefaults removeSuiteNamed:]'
void _IM_NSUserDefaults_removeSuiteNamed_C(NSUserDefaults *_self, NSString* suiteName);

// method '-[NSUserDefaults removeVolatileDomainForName:]'
void _IM_NSUserDefaults_removeVolatileDomainForName_C(NSUserDefaults *_self, NSString* domainName);

// method '+[NSUserDefaults resetStandardUserDefaults]'
void _CM_NSUserDefaults_resetStandardUserDefaults(Class _class);

// method '-[NSUserDefaults setBool:forKey:]'
void _IM_NSUserDefaults_setBool_CforKey_C(NSUserDefaults *_self, BOOL value, NSString* defaultName);

// method '-[NSUserDefaults setFloat:forKey:]'
void _IM_NSUserDefaults_setFloat_CforKey_C(NSUserDefaults *_self, float value, NSString* defaultName);

// method '-[NSUserDefaults setInteger:forKey:]'
void _IM_NSUserDefaults_setInteger_CforKey_C(NSUserDefaults *_self, int value, NSString* defaultName);

// method '-[NSUserDefaults setObject:forKey:]'
void _IM_NSUserDefaults_setObject_CforKey_C(NSUserDefaults *_self, id value, NSString* defaultName);

// method '-[NSUserDefaults setPersistentDomain:forName:]'
void _IM_NSUserDefaults_setPersistentDomain_CforName_C(NSUserDefaults *_self, NSDictionary* domain, NSString* domainName);

// method '-[NSUserDefaults setVolatileDomain:forName:]'
void _IM_NSUserDefaults_setVolatileDomain_CforName_C(NSUserDefaults *_self, NSDictionary* domain, NSString* domainName);

// method '+[NSUserDefaults standardUserDefaults]'
NSUserDefaults* _CM_NSUserDefaults_standardUserDefaults(Class _class);

// method '-[NSUserDefaults stringArrayForKey:]'
NSArray* _IM_NSUserDefaults_stringArrayForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults stringForKey:]'
NSString* _IM_NSUserDefaults_stringForKey_C(NSUserDefaults *_self, NSString* defaultName);

// method '-[NSUserDefaults synchronize]'
BOOL _IM_NSUserDefaults_synchronize(NSUserDefaults *_self);

// method '-[NSUserDefaults volatileDomainForName:]'
NSDictionary* _IM_NSUserDefaults_volatileDomainForName_C(NSUserDefaults *_self, NSString* domainName);

// method '-[NSUserDefaults volatileDomainNames]'
NSArray* _IM_NSUserDefaults_volatileDomainNames(NSUserDefaults *_self);

// method '-[NSValue initWithBytes:objCType:]'
NSValue *_IM_NSValue_initWithBytes_CobjCType_C(NSValue *_self, const void* value, const char* type);

// method '-[NSValue isEqualToValue:]'
BOOL _IM_NSValue_isEqualToValue_C(NSValue *_self, NSValue* value);

// method '-[NSValue nonretainedObjectValue]'
id _IM_NSValue_nonretainedObjectValue(NSValue *_self);

// method '-[NSValue objCType]'
const char* _IM_NSValue_objCType(NSValue *_self);

// method '-[NSValue pointValue]'
struct _NSPoint _IM_NSValue_pointValue(NSValue *_self);

// method '-[NSValue pointerValue]'
void *_IM_NSValue_pointerValue(NSValue *_self);

// method '-[NSValue rangeValue]'
struct _NSRange _IM_NSValue_rangeValue(NSValue *_self);

// method '-[NSValue rectValue]'
struct _NSRect _IM_NSValue_rectValue(NSValue *_self);

// method '-[NSValue sizeValue]'
struct _NSSize _IM_NSValue_sizeValue(NSValue *_self);

// method '+[NSValue value:withObjCType:]'
NSValue* _CM_NSValue_value_CwithObjCType_C(Class _class, const void* value, const char* type);

// method '+[NSValue valueWithBytes:objCType:]'
NSValue* _CM_NSValue_valueWithBytes_CobjCType_C(Class _class, const void* value, const char* type);

// method '+[NSValue valueWithNonretainedObject:]'
NSValue* _CM_NSValue_valueWithNonretainedObject_C(Class _class, id anObject);

// method '+[NSValue valueWithPoint:]'
NSValue* _CM_NSValue_valueWithPoint_C(Class _class, struct _NSPoint point);

// method '+[NSValue valueWithPointer:]'
NSValue* _CM_NSValue_valueWithPointer_C(Class _class, const void* pointer);

// method '+[NSValue valueWithRange:]'
NSValue* _CM_NSValue_valueWithRange_C(Class _class, struct _NSRange range);

// method '+[NSValue valueWithRect:]'
NSValue* _CM_NSValue_valueWithRect_C(Class _class, struct _NSRect rect);

// method '+[NSValue valueWithSize:]'
NSValue* _CM_NSValue_valueWithSize_C(Class _class, struct _NSSize size);

// method '+[NSValueTransformer allowsReverseTransformation]'
BOOL _CM_NSValueTransformer_allowsReverseTransformation(Class _class);

// method '-[NSValueTransformer reverseTransformedValue:]'
id _IM_NSValueTransformer_reverseTransformedValue_C(NSValueTransformer *_self, id value);

// method '+[NSValueTransformer setValueTransformer:forName:]'
void _CM_NSValueTransformer_setValueTransformer_CforName_C(Class _class, NSValueTransformer* transformer, NSString* name);

// method '-[NSValueTransformer transformedValue:]'
id _IM_NSValueTransformer_transformedValue_C(NSValueTransformer *_self, id value);

// method '+[NSValueTransformer transformedValueClass]'
Class _CM_NSValueTransformer_transformedValueClass(Class _class);

// method '+[NSValueTransformer valueTransformerForName:]'
NSValueTransformer* _CM_NSValueTransformer_valueTransformerForName_C(Class _class, NSString* name);

// method '+[NSValueTransformer valueTransformerNames]'
NSArray* _CM_NSValueTransformer_valueTransformerNames(Class _class);

// method '-[NSWhoseSpecifier endSubelementIdentifier]'
int _IM_NSWhoseSpecifier_endSubelementIdentifier(NSWhoseSpecifier *_self);

// method '-[NSWhoseSpecifier endSubelementIndex]'
int _IM_NSWhoseSpecifier_endSubelementIndex(NSWhoseSpecifier *_self);

// method '-[NSWhoseSpecifier initWithContainerClassDescription:containerSpecifier:key:test:]'
NSWhoseSpecifier *_IM_NSWhoseSpecifier_initWithContainerClassDescription_CcontainerSpecifier_Ckey_Ctest_C(NSWhoseSpecifier *_self, NSScriptClassDescription* classDesc, NSScriptObjectSpecifier* container, NSString* property, NSScriptWhoseTest* test);

// method '-[NSWhoseSpecifier setEndSubelementIdentifier:]'
void _IM_NSWhoseSpecifier_setEndSubelementIdentifier_C(NSWhoseSpecifier *_self, int subelement);

// method '-[NSWhoseSpecifier setEndSubelementIndex:]'
void _IM_NSWhoseSpecifier_setEndSubelementIndex_C(NSWhoseSpecifier *_self, int index);

// method '-[NSWhoseSpecifier setStartSubelementIdentifier:]'
void _IM_NSWhoseSpecifier_setStartSubelementIdentifier_C(NSWhoseSpecifier *_self, int subelement);

// method '-[NSWhoseSpecifier setStartSubelementIndex:]'
void _IM_NSWhoseSpecifier_setStartSubelementIndex_C(NSWhoseSpecifier *_self, int index);

// method '-[NSWhoseSpecifier setTest:]'
void _IM_NSWhoseSpecifier_setTest_C(NSWhoseSpecifier *_self, NSScriptWhoseTest* test);

// method '-[NSWhoseSpecifier startSubelementIdentifier]'
int _IM_NSWhoseSpecifier_startSubelementIdentifier(NSWhoseSpecifier *_self);

// method '-[NSWhoseSpecifier startSubelementIndex]'
int _IM_NSWhoseSpecifier_startSubelementIndex(NSWhoseSpecifier *_self);

// method '-[NSWhoseSpecifier test]'
NSScriptWhoseTest* _IM_NSWhoseSpecifier_test(NSWhoseSpecifier *_self);

// method '-[NSXMLDTD addChild:]'
void _IM_NSXMLDTD_addChild_C(NSXMLDTD *_self, NSXMLNode* child);

// method '-[NSXMLDTD attributeDeclarationForName:elementName:]'
NSXMLDTDNode* _IM_NSXMLDTD_attributeDeclarationForName_CelementName_C(NSXMLDTD *_self, NSString* name, NSString* elementName);

// method '-[NSXMLDTD elementDeclarationForName:]'
NSXMLDTDNode* _IM_NSXMLDTD_elementDeclarationForName_C(NSXMLDTD *_self, NSString* name);

// method '-[NSXMLDTD entityDeclarationForName:]'
NSXMLDTDNode* _IM_NSXMLDTD_entityDeclarationForName_C(NSXMLDTD *_self, NSString* name);

// method '-[NSXMLDTD initWithContentsOfURL:options:error:]'
NSXMLDTD *_IM_NSXMLDTD_initWithContentsOfURL_Coptions_Cerror_C(NSXMLDTD *_self, NSURL* url, unsigned int mask, id *error);

// method '-[NSXMLDTD initWithData:options:error:]'
NSXMLDTD *_IM_NSXMLDTD_initWithData_Coptions_Cerror_C(NSXMLDTD *_self, NSData* data, unsigned int mask, id *error);

// method '-[NSXMLDTD insertChild:atIndex:]'
void _IM_NSXMLDTD_insertChild_CatIndex_C(NSXMLDTD *_self, NSXMLNode* child, unsigned int index);

// method '-[NSXMLDTD insertChildren:atIndex:]'
void _IM_NSXMLDTD_insertChildren_CatIndex_C(NSXMLDTD *_self, NSArray* children, unsigned int index);

// method '-[NSXMLDTD notationDeclarationForName:]'
NSXMLDTDNode* _IM_NSXMLDTD_notationDeclarationForName_C(NSXMLDTD *_self, NSString* name);

// method '+[NSXMLDTD predefinedEntityDeclarationForName:]'
NSXMLDTDNode* _CM_NSXMLDTD_predefinedEntityDeclarationForName_C(Class _class, NSString* name);

// method '-[NSXMLDTD publicID]'
NSString* _IM_NSXMLDTD_publicID(NSXMLDTD *_self);

// method '-[NSXMLDTD removeChildAtIndex:]'
void _IM_NSXMLDTD_removeChildAtIndex_C(NSXMLDTD *_self, unsigned int index);

// method '-[NSXMLDTD replaceChildAtIndex:withNode:]'
void _IM_NSXMLDTD_replaceChildAtIndex_CwithNode_C(NSXMLDTD *_self, unsigned int index, NSXMLNode* node);

// method '-[NSXMLDTD setChildren:]'
void _IM_NSXMLDTD_setChildren_C(NSXMLDTD *_self, NSArray* children);

// method '-[NSXMLDTD setPublicID:]'
void _IM_NSXMLDTD_setPublicID_C(NSXMLDTD *_self, NSString* publicID);

// method '-[NSXMLDTD setSystemID:]'
void _IM_NSXMLDTD_setSystemID_C(NSXMLDTD *_self, NSString* systemID);

// method '-[NSXMLDTD systemID]'
NSString* _IM_NSXMLDTD_systemID(NSXMLDTD *_self);

// method '-[NSXMLDTDNode DTDKind]'
int _IM_NSXMLDTDNode_DTDKind(NSXMLDTDNode *_self);

// method '-[NSXMLDTDNode initWithXMLString:]'
NSXMLDTDNode *_IM_NSXMLDTDNode_initWithXMLString_C(NSXMLDTDNode *_self, NSString* string);

// method '-[NSXMLDTDNode isExternal]'
BOOL _IM_NSXMLDTDNode_isExternal(NSXMLDTDNode *_self);

// method '-[NSXMLDTDNode notationName]'
NSString* _IM_NSXMLDTDNode_notationName(NSXMLDTDNode *_self);

// method '-[NSXMLDTDNode publicID]'
NSString* _IM_NSXMLDTDNode_publicID(NSXMLDTDNode *_self);

// method '-[NSXMLDTDNode setDTDKind:]'
void _IM_NSXMLDTDNode_setDTDKind_C(NSXMLDTDNode *_self, int kind);

// method '-[NSXMLDTDNode setNotationName:]'
void _IM_NSXMLDTDNode_setNotationName_C(NSXMLDTDNode *_self, NSString* notationName);

// method '-[NSXMLDTDNode setPublicID:]'
void _IM_NSXMLDTDNode_setPublicID_C(NSXMLDTDNode *_self, NSString* publicID);

// method '-[NSXMLDTDNode setSystemID:]'
void _IM_NSXMLDTDNode_setSystemID_C(NSXMLDTDNode *_self, NSString* systemID);

// method '-[NSXMLDTDNode systemID]'
NSString* _IM_NSXMLDTDNode_systemID(NSXMLDTDNode *_self);

// method '-[NSXMLDocument DTD]'
NSXMLDTD* _IM_NSXMLDocument_DTD(NSXMLDocument *_self);

// method '-[NSXMLDocument MIMEType]'
NSString* _IM_NSXMLDocument_MIMEType(NSXMLDocument *_self);

// method '-[NSXMLDocument XMLData]'
NSData* _IM_NSXMLDocument_XMLData(NSXMLDocument *_self);

// method '-[NSXMLDocument XMLDataWithOptions:]'
NSData* _IM_NSXMLDocument_XMLDataWithOptions_C(NSXMLDocument *_self, unsigned int options);

// method '-[NSXMLDocument addChild:]'
void _IM_NSXMLDocument_addChild_C(NSXMLDocument *_self, NSXMLNode* child);

// method '-[NSXMLDocument characterEncoding]'
NSString* _IM_NSXMLDocument_characterEncoding(NSXMLDocument *_self);

// method '-[NSXMLDocument documentContentKind]'
int _IM_NSXMLDocument_documentContentKind(NSXMLDocument *_self);

// method '-[NSXMLDocument initWithContentsOfURL:options:error:]'
NSXMLDocument *_IM_NSXMLDocument_initWithContentsOfURL_Coptions_Cerror_C(NSXMLDocument *_self, NSURL* url, unsigned int mask, id *error);

// method '-[NSXMLDocument initWithData:options:error:]'
NSXMLDocument *_IM_NSXMLDocument_initWithData_Coptions_Cerror_C(NSXMLDocument *_self, NSData* data, unsigned int mask, id *error);

// method '-[NSXMLDocument initWithRootElement:]'
NSXMLDocument *_IM_NSXMLDocument_initWithRootElement_C(NSXMLDocument *_self, NSXMLElement* element);

// method '-[NSXMLDocument initWithXMLString:options:error:]'
NSXMLDocument *_IM_NSXMLDocument_initWithXMLString_Coptions_Cerror_C(NSXMLDocument *_self, NSString* string, unsigned int mask, id *error);

// method '-[NSXMLDocument insertChild:atIndex:]'
void _IM_NSXMLDocument_insertChild_CatIndex_C(NSXMLDocument *_self, NSXMLNode* child, unsigned int index);

// method '-[NSXMLDocument insertChildren:atIndex:]'
void _IM_NSXMLDocument_insertChildren_CatIndex_C(NSXMLDocument *_self, NSArray* children, unsigned int index);

// method '-[NSXMLDocument isStandalone]'
BOOL _IM_NSXMLDocument_isStandalone(NSXMLDocument *_self);

// method '-[NSXMLDocument objectByApplyingXSLT:arguments:error:]'
id _IM_NSXMLDocument_objectByApplyingXSLT_Carguments_Cerror_C(NSXMLDocument *_self, NSData* xslt, NSDictionary* arguments, id *error);

// method '-[NSXMLDocument objectByApplyingXSLTAtURL:arguments:error:]'
id _IM_NSXMLDocument_objectByApplyingXSLTAtURL_Carguments_Cerror_C(NSXMLDocument *_self, NSURL* xsltURL, NSDictionary* argument, id *error);

// method '-[NSXMLDocument objectByApplyingXSLTString:arguments:error:]'
id _IM_NSXMLDocument_objectByApplyingXSLTString_Carguments_Cerror_C(NSXMLDocument *_self, NSString* xslt, NSDictionary* arguments, id *error);

// method '-[NSXMLDocument removeChildAtIndex:]'
void _IM_NSXMLDocument_removeChildAtIndex_C(NSXMLDocument *_self, unsigned int index);

// method '-[NSXMLDocument replaceChildAtIndex:withNode:]'
void _IM_NSXMLDocument_replaceChildAtIndex_CwithNode_C(NSXMLDocument *_self, unsigned int index, NSXMLNode* node);

// method '+[NSXMLDocument replacementClassForClass:]'
Class _CM_NSXMLDocument_replacementClassForClass_C(Class _class, Class cls);

// method '-[NSXMLDocument rootElement]'
NSXMLElement* _IM_NSXMLDocument_rootElement(NSXMLDocument *_self);

// method '-[NSXMLDocument setCharacterEncoding:]'
void _IM_NSXMLDocument_setCharacterEncoding_C(NSXMLDocument *_self, NSString* encoding);

// method '-[NSXMLDocument setChildren:]'
void _IM_NSXMLDocument_setChildren_C(NSXMLDocument *_self, NSArray* children);

// method '-[NSXMLDocument setDTD:]'
void _IM_NSXMLDocument_setDTD_C(NSXMLDocument *_self, NSXMLDTD* documentTypeDeclaration);

// method '-[NSXMLDocument setDocumentContentKind:]'
void _IM_NSXMLDocument_setDocumentContentKind_C(NSXMLDocument *_self, int kind);

// method '-[NSXMLDocument setMIMEType:]'
void _IM_NSXMLDocument_setMIMEType_C(NSXMLDocument *_self, NSString* MIMEType);

// method '-[NSXMLDocument setRootElement:]'
void _IM_NSXMLDocument_setRootElement_C(NSXMLDocument *_self, NSXMLNode* root);

// method '-[NSXMLDocument setStandalone:]'
void _IM_NSXMLDocument_setStandalone_C(NSXMLDocument *_self, BOOL standalone);

// method '-[NSXMLDocument setVersion:]'
void _IM_NSXMLDocument_setVersion_C(NSXMLDocument *_self, NSString* version);

// method '-[NSXMLDocument validateAndReturnError:]'
BOOL _IM_NSXMLDocument_validateAndReturnError_C(NSXMLDocument *_self, id *error);

// method '-[NSXMLDocument version]'
NSString* _IM_NSXMLDocument_version(NSXMLDocument *_self);

// method '-[NSXMLElement addAttribute:]'
void _IM_NSXMLElement_addAttribute_C(NSXMLElement *_self, NSXMLNode* attribute);

// method '-[NSXMLElement addChild:]'
void _IM_NSXMLElement_addChild_C(NSXMLElement *_self, NSXMLNode* child);

// method '-[NSXMLElement addNamespace:]'
void _IM_NSXMLElement_addNamespace_C(NSXMLElement *_self, NSXMLNode* aNamespace);

// method '-[NSXMLElement attributeForLocalName:URI:]'
NSXMLNode* _IM_NSXMLElement_attributeForLocalName_CURI_C(NSXMLElement *_self, NSString* localName, NSString* URI);

// method '-[NSXMLElement attributeForName:]'
NSXMLNode* _IM_NSXMLElement_attributeForName_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement attributes]'
NSArray* _IM_NSXMLElement_attributes(NSXMLElement *_self);

// method '-[NSXMLElement elementsForLocalName:URI:]'
NSArray* _IM_NSXMLElement_elementsForLocalName_CURI_C(NSXMLElement *_self, NSString* localName, NSString* URI);

// method '-[NSXMLElement elementsForName:]'
NSArray* _IM_NSXMLElement_elementsForName_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement initWithName:]'
NSXMLElement *_IM_NSXMLElement_initWithName_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement initWithName:URI:]'
NSXMLElement *_IM_NSXMLElement_initWithName_CURI_C(NSXMLElement *_self, NSString* name, NSString* URI);

// method '-[NSXMLElement initWithName:stringValue:]'
NSXMLElement *_IM_NSXMLElement_initWithName_CstringValue_C(NSXMLElement *_self, NSString* name, NSString* string);

// method '-[NSXMLElement initWithXMLString:error:]'
NSXMLElement *_IM_NSXMLElement_initWithXMLString_Cerror_C(NSXMLElement *_self, NSString* string, id *error);

// method '-[NSXMLElement insertChild:atIndex:]'
void _IM_NSXMLElement_insertChild_CatIndex_C(NSXMLElement *_self, NSXMLNode* child, unsigned int index);

// method '-[NSXMLElement insertChildren:atIndex:]'
void _IM_NSXMLElement_insertChildren_CatIndex_C(NSXMLElement *_self, NSArray* children, unsigned int index);

// method '-[NSXMLElement namespaceForPrefix:]'
NSXMLNode* _IM_NSXMLElement_namespaceForPrefix_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement namespaces]'
NSArray* _IM_NSXMLElement_namespaces(NSXMLElement *_self);

// method '-[NSXMLElement normalizeAdjacentTextNodesPreservingCDATA:]'
void _IM_NSXMLElement_normalizeAdjacentTextNodesPreservingCDATA_C(NSXMLElement *_self, BOOL preserve);

// method '-[NSXMLElement removeAttributeForName:]'
void _IM_NSXMLElement_removeAttributeForName_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement removeChildAtIndex:]'
void _IM_NSXMLElement_removeChildAtIndex_C(NSXMLElement *_self, unsigned int index);

// method '-[NSXMLElement removeNamespaceForPrefix:]'
void _IM_NSXMLElement_removeNamespaceForPrefix_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement replaceChildAtIndex:withNode:]'
void _IM_NSXMLElement_replaceChildAtIndex_CwithNode_C(NSXMLElement *_self, unsigned int index, NSXMLNode* node);

// method '-[NSXMLElement resolveNamespaceForName:]'
NSXMLNode* _IM_NSXMLElement_resolveNamespaceForName_C(NSXMLElement *_self, NSString* name);

// method '-[NSXMLElement resolvePrefixForNamespaceURI:]'
NSString* _IM_NSXMLElement_resolvePrefixForNamespaceURI_C(NSXMLElement *_self, NSString* namespaceURI);

// method '-[NSXMLElement setAttributes:]'
void _IM_NSXMLElement_setAttributes_C(NSXMLElement *_self, NSArray* attributes);

// method '-[NSXMLElement setAttributesAsDictionary:]'
void _IM_NSXMLElement_setAttributesAsDictionary_C(NSXMLElement *_self, NSDictionary* attributes);

// method '-[NSXMLElement setChildren:]'
void _IM_NSXMLElement_setChildren_C(NSXMLElement *_self, NSArray* children);

// method '-[NSXMLElement setNamespaces:]'
void _IM_NSXMLElement_setNamespaces_C(NSXMLElement *_self, NSArray* namespaces);

// method '+[NSXMLNode DTDNodeWithXMLString:]'
id _CM_NSXMLNode_DTDNodeWithXMLString_C(Class _class, NSString* string);

// method '-[NSXMLNode URI]'
NSString* _IM_NSXMLNode_URI(NSXMLNode *_self);

// method '-[NSXMLNode XMLString]'
NSString* _IM_NSXMLNode_XMLString(NSXMLNode *_self);

// method '-[NSXMLNode XMLStringWithOptions:]'
NSString* _IM_NSXMLNode_XMLStringWithOptions_C(NSXMLNode *_self, unsigned int options);

// method '-[NSXMLNode XPath]'
NSString* _IM_NSXMLNode_XPath(NSXMLNode *_self);

// method '+[NSXMLNode attributeWithName:URI:stringValue:]'
id _CM_NSXMLNode_attributeWithName_CURI_CstringValue_C(Class _class, NSString* name, NSString* URI, NSString* stringValue);

// method '+[NSXMLNode attributeWithName:stringValue:]'
id _CM_NSXMLNode_attributeWithName_CstringValue_C(Class _class, NSString* name, NSString* stringValue);

// method '-[NSXMLNode canonicalXMLStringPreservingComments:]'
NSString* _IM_NSXMLNode_canonicalXMLStringPreservingComments_C(NSXMLNode *_self, BOOL comments);

// method '-[NSXMLNode childAtIndex:]'
NSXMLNode* _IM_NSXMLNode_childAtIndex_C(NSXMLNode *_self, unsigned int index);

// method '-[NSXMLNode childCount]'
unsigned int _IM_NSXMLNode_childCount(NSXMLNode *_self);

// method '-[NSXMLNode children]'
NSArray* _IM_NSXMLNode_children(NSXMLNode *_self);

// method '+[NSXMLNode commentWithStringValue:]'
id _CM_NSXMLNode_commentWithStringValue_C(Class _class, NSString* stringValue);

// method '-[NSXMLNode description]'
NSString* _IM_NSXMLNode_description(NSXMLNode *_self);

// method '-[NSXMLNode detach]'
void _IM_NSXMLNode_detach(NSXMLNode *_self);

// method '+[NSXMLNode document]'
id _CM_NSXMLNode_document(Class _class);

// method '+[NSXMLNode documentWithRootElement:]'
id _CM_NSXMLNode_documentWithRootElement_C(Class _class, NSXMLElement* element);

// method '+[NSXMLNode elementWithName:]'
id _CM_NSXMLNode_elementWithName_C(Class _class, NSString* name);

// method '+[NSXMLNode elementWithName:URI:]'
id _CM_NSXMLNode_elementWithName_CURI_C(Class _class, NSString* name, NSString* URI);

// method '+[NSXMLNode elementWithName:children:attributes:]'
id _CM_NSXMLNode_elementWithName_Cchildren_Cattributes_C(Class _class, NSString* name, NSArray* children, NSArray* attributes);

// method '+[NSXMLNode elementWithName:stringValue:]'
id _CM_NSXMLNode_elementWithName_CstringValue_C(Class _class, NSString* name, NSString* string);

// method '-[NSXMLNode index]'
unsigned int _IM_NSXMLNode_index(NSXMLNode *_self);

// method '-[NSXMLNode initWithKind:]'
NSXMLNode *_IM_NSXMLNode_initWithKind_C(NSXMLNode *_self, int kind);

// method '-[NSXMLNode initWithKind:options:]'
NSXMLNode *_IM_NSXMLNode_initWithKind_Coptions_C(NSXMLNode *_self, int kind, unsigned int options);

// method '-[NSXMLNode kind]'
int _IM_NSXMLNode_kind(NSXMLNode *_self);

// method '-[NSXMLNode level]'
unsigned int _IM_NSXMLNode_level(NSXMLNode *_self);

// method '-[NSXMLNode localName]'
NSString* _IM_NSXMLNode_localName(NSXMLNode *_self);

// method '+[NSXMLNode localNameForName:]'
NSString* _CM_NSXMLNode_localNameForName_C(Class _class, NSString* name);

// method '-[NSXMLNode name]'
NSString* _IM_NSXMLNode_name(NSXMLNode *_self);

// method '+[NSXMLNode namespaceWithName:stringValue:]'
id _CM_NSXMLNode_namespaceWithName_CstringValue_C(Class _class, NSString* name, NSString* stringValue);

// method '-[NSXMLNode nextNode]'
NSXMLNode* _IM_NSXMLNode_nextNode(NSXMLNode *_self);

// method '-[NSXMLNode nextSibling]'
NSXMLNode* _IM_NSXMLNode_nextSibling(NSXMLNode *_self);

// method '-[NSXMLNode nodesForXPath:error:]'
NSArray* _IM_NSXMLNode_nodesForXPath_Cerror_C(NSXMLNode *_self, NSString* xpath, id *error);

// method '-[NSXMLNode objectValue]'
id _IM_NSXMLNode_objectValue(NSXMLNode *_self);

// method '-[NSXMLNode objectsForXQuery:constants:error:]'
NSArray* _IM_NSXMLNode_objectsForXQuery_Cconstants_Cerror_C(NSXMLNode *_self, NSString* xquery, NSDictionary* constants, id *error);

// method '-[NSXMLNode objectsForXQuery:error:]'
NSArray* _IM_NSXMLNode_objectsForXQuery_Cerror_C(NSXMLNode *_self, NSString* xquery, id *error);

// method '-[NSXMLNode parent]'
NSXMLNode* _IM_NSXMLNode_parent(NSXMLNode *_self);

// method '+[NSXMLNode predefinedNamespaceForPrefix:]'
NSXMLNode* _CM_NSXMLNode_predefinedNamespaceForPrefix_C(Class _class, NSString* name);

// method '-[NSXMLNode prefix]'
NSString* _IM_NSXMLNode_prefix(NSXMLNode *_self);

// method '+[NSXMLNode prefixForName:]'
NSString* _CM_NSXMLNode_prefixForName_C(Class _class, NSString* name);

// method '-[NSXMLNode previousNode]'
NSXMLNode* _IM_NSXMLNode_previousNode(NSXMLNode *_self);

// method '-[NSXMLNode previousSibling]'
NSXMLNode* _IM_NSXMLNode_previousSibling(NSXMLNode *_self);

// method '+[NSXMLNode processingInstructionWithName:stringValue:]'
id _CM_NSXMLNode_processingInstructionWithName_CstringValue_C(Class _class, NSString* name, NSString* stringValue);

// method '-[NSXMLNode rootDocument]'
NSXMLDocument* _IM_NSXMLNode_rootDocument(NSXMLNode *_self);

// method '-[NSXMLNode setName:]'
void _IM_NSXMLNode_setName_C(NSXMLNode *_self, NSString* name);

// method '-[NSXMLNode setObjectValue:]'
void _IM_NSXMLNode_setObjectValue_C(NSXMLNode *_self, id value);

// method '-[NSXMLNode setStringValue:]'
void _IM_NSXMLNode_setStringValue_C(NSXMLNode *_self, NSString* string);

// method '-[NSXMLNode setStringValue:resolvingEntities:]'
void _IM_NSXMLNode_setStringValue_CresolvingEntities_C(NSXMLNode *_self, NSString* string, BOOL resolve);

// method '-[NSXMLNode setURI:]'
void _IM_NSXMLNode_setURI_C(NSXMLNode *_self, NSString* URI);

// method '-[NSXMLNode stringValue]'
NSString* _IM_NSXMLNode_stringValue(NSXMLNode *_self);

// method '+[NSXMLNode textWithStringValue:]'
id _CM_NSXMLNode_textWithStringValue_C(Class _class, NSString* stringValue);

// method '-[NSXMLParser abortParsing]'
void _IM_NSXMLParser_abortParsing(NSXMLParser *_self);

// method '-[NSXMLParser columnNumber]'
int _IM_NSXMLParser_columnNumber(NSXMLParser *_self);

// method '-[NSXMLParser delegate]'
id _IM_NSXMLParser_delegate(NSXMLParser *_self);

// method '-[NSXMLParser initWithContentsOfURL:]'
NSXMLParser *_IM_NSXMLParser_initWithContentsOfURL_C(NSXMLParser *_self, NSURL* url);

// method '-[NSXMLParser initWithData:]'
NSXMLParser *_IM_NSXMLParser_initWithData_C(NSXMLParser *_self, NSData* data);

// method '-[NSXMLParser lineNumber]'
int _IM_NSXMLParser_lineNumber(NSXMLParser *_self);

// method '-[NSXMLParser parse]'
BOOL _IM_NSXMLParser_parse(NSXMLParser *_self);

// method '-[NSXMLParser parserError]'
NSError* _IM_NSXMLParser_parserError(NSXMLParser *_self);

// method '-[NSXMLParser publicID]'
NSString* _IM_NSXMLParser_publicID(NSXMLParser *_self);

// method '-[NSXMLParser setDelegate:]'
void _IM_NSXMLParser_setDelegate_C(NSXMLParser *_self, id delegate);

// method '-[NSXMLParser setShouldProcessNamespaces:]'
void _IM_NSXMLParser_setShouldProcessNamespaces_C(NSXMLParser *_self, BOOL shouldProcessNamespaces);

// method '-[NSXMLParser setShouldReportNamespacePrefixes:]'
void _IM_NSXMLParser_setShouldReportNamespacePrefixes_C(NSXMLParser *_self, BOOL shouldReportNamespacePrefixes);

// method '-[NSXMLParser setShouldResolveExternalEntities:]'
void _IM_NSXMLParser_setShouldResolveExternalEntities_C(NSXMLParser *_self, BOOL shouldResolveExternalEntities);

// method '-[NSXMLParser shouldProcessNamespaces]'
BOOL _IM_NSXMLParser_shouldProcessNamespaces(NSXMLParser *_self);

// method '-[NSXMLParser shouldReportNamespacePrefixes]'
BOOL _IM_NSXMLParser_shouldReportNamespacePrefixes(NSXMLParser *_self);

// method '-[NSXMLParser shouldResolveExternalEntities]'
BOOL _IM_NSXMLParser_shouldResolveExternalEntities(NSXMLParser *_self);

// method '-[NSXMLParser systemID]'
NSString* _IM_NSXMLParser_systemID(NSXMLParser *_self);


// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'CGColorRef'
typedef struct CGColor *CGColorRef;

// CoreFoundation type 'CGColorSpaceRef'
typedef struct CGColorSpace *CGColorSpaceRef;

// CoreFoundation type 'CGContextRef'
typedef struct CGContext *CGContextRef;

// CoreFoundation type 'CGDataConsumerRef'
typedef struct CGDataConsumer *CGDataConsumerRef;

// CoreFoundation type 'CGDataProviderRef'
typedef struct CGDataProvider *CGDataProviderRef;

// CoreFoundation type 'CGDirectPaletteRef'
typedef struct _CGDirectPaletteRef *CGDirectPaletteRef;

// CoreFoundation type 'CGDisplayConfigRef'
typedef struct _CGDisplayConfigRef *CGDisplayConfigRef;

// CoreFoundation type 'CGEventRef'
typedef struct __CGEvent *CGEventRef;

// CoreFoundation type 'CGEventSourceRef'
typedef struct __CGEventSource *CGEventSourceRef;

// CoreFoundation type 'CGFontRef'
typedef struct CGFont *CGFontRef;

// CoreFoundation type 'CGFunctionRef'
typedef struct CGFunction *CGFunctionRef;

// CoreFoundation type 'CGImageRef'
typedef struct CGImage *CGImageRef;

// CoreFoundation type 'CGLayerRef'
typedef struct CGLayer *CGLayerRef;

// CoreFoundation type 'CGMutablePathRef'
typedef struct CGPath *CGMutablePathRef;

// CoreFoundation type 'CGPDFArrayRef'
typedef struct CGPDFArray *CGPDFArrayRef;

// CoreFoundation type 'CGPDFContentStreamRef'
typedef struct CGPDFContentStream *CGPDFContentStreamRef;

// CoreFoundation type 'CGPDFDictionaryRef'
typedef struct CGPDFDictionary *CGPDFDictionaryRef;

// CoreFoundation type 'CGPDFDocumentRef'
typedef struct CGPDFDocument *CGPDFDocumentRef;

// CoreFoundation type 'CGPDFOperatorTableRef'
typedef struct CGPDFOperatorTable *CGPDFOperatorTableRef;

// CoreFoundation type 'CGPDFPageRef'
typedef struct CGPDFPage *CGPDFPageRef;

// CoreFoundation type 'CGPDFScannerRef'
typedef struct CGPDFScanner *CGPDFScannerRef;

// CoreFoundation type 'CGPDFStreamRef'
typedef struct CGPDFStream *CGPDFStreamRef;

// CoreFoundation type 'CGPDFStringRef'
typedef struct CGPDFString *CGPDFStringRef;

// CoreFoundation type 'CGPSConverterRef'
typedef struct CGPSConverter *CGPSConverterRef;

// CoreFoundation type 'CGPathRef'
typedef struct CGPath *CGPathRef;

// CoreFoundation type 'CGPatternRef'
typedef struct CGPattern *CGPatternRef;

// CoreFoundation type 'CGShadingRef'
typedef struct CGShading *CGShadingRef;

// opaque 'CGDirectDisplayID'
typedef struct _CGDirectDisplayID *CGDirectDisplayID;

// opaque 'CGEventTapProxy'
typedef struct __CGEventTapProxy *CGEventTapProxy;

// struct '_CGScreenUpdateMoveDelta'
struct _CGScreenUpdateMoveDelta {
    int dX;
    int dY;
};

typedef struct _CGScreenUpdateMoveDelta CGScreenUpdateMoveDelta;

// struct '_CGDeviceByteColor'
struct _CGDeviceByteColor {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
};

typedef struct _CGDeviceByteColor CGDeviceByteColor;

// struct 'CGAffineTransform'
struct CGAffineTransform {
    float a;
    float b;
    float c;
    float d;
    float tx;
    float ty;
};

// struct 'CGSize'
struct CGSize {
    float width;
    float height;
};

// struct '_CGDeviceColor'
struct _CGDeviceColor {
    float red;
    float green;
    float blue;
};

typedef struct _CGDeviceColor CGDeviceColor;

// struct 'CGPoint'
struct CGPoint {
    float x;
    float y;
};

// struct 'CGPathElement'
struct CGPathElement {
    int type;
    struct CGPoint *points;
};

// struct 'CGRect'
struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

// struct 'CGEventTapInformation'
struct CGEventTapInformation {
    unsigned int eventTapID;
    unsigned int tapPoint;
    unsigned int options;
    unsigned long long eventsOfInterest;
    int tappingProcess;
    int processBeingTapped;
    _Bool enabled;
    float minUsecLatency;
    float avgUsecLatency;
    float maxUsecLatency;
};

// getter for constant 'CGAffineTransformIdentity'
struct CGAffineTransform _get_CGAffineTransformIdentity(void);

// getter for constant 'CGPointZero'
struct CGPoint _get_CGPointZero(void);

// getter for constant 'CGRectInfinite'
struct CGRect _get_CGRectInfinite(void);

// getter for constant 'CGRectNull'
struct CGRect _get_CGRectNull(void);

// getter for constant 'CGRectZero'
struct CGRect _get_CGRectZero(void);

// getter for constant 'CGSizeZero'
struct CGSize _get_CGSizeZero(void);

// getter for constant 'kCGColorSpaceGenericCMYK'
struct __CFString *_get_kCGColorSpaceGenericCMYK(void);

// setter for constant 'kCGColorSpaceGenericCMYK'
void _set_kCGColorSpaceGenericCMYK(struct __CFString *value);

// getter for constant 'kCGColorSpaceGenericGray'
struct __CFString *_get_kCGColorSpaceGenericGray(void);

// setter for constant 'kCGColorSpaceGenericGray'
void _set_kCGColorSpaceGenericGray(struct __CFString *value);

// getter for constant 'kCGColorSpaceGenericRGB'
struct __CFString *_get_kCGColorSpaceGenericRGB(void);

// setter for constant 'kCGColorSpaceGenericRGB'
void _set_kCGColorSpaceGenericRGB(struct __CFString *value);

// getter for constant 'kCGFontVariationAxisDefaultValue'
struct __CFString *_get_kCGFontVariationAxisDefaultValue(void);

// setter for constant 'kCGFontVariationAxisDefaultValue'
void _set_kCGFontVariationAxisDefaultValue(struct __CFString *value);

// getter for constant 'kCGFontVariationAxisMaxValue'
struct __CFString *_get_kCGFontVariationAxisMaxValue(void);

// setter for constant 'kCGFontVariationAxisMaxValue'
void _set_kCGFontVariationAxisMaxValue(struct __CFString *value);

// getter for constant 'kCGFontVariationAxisMinValue'
struct __CFString *_get_kCGFontVariationAxisMinValue(void);

// setter for constant 'kCGFontVariationAxisMinValue'
void _set_kCGFontVariationAxisMinValue(struct __CFString *value);

// getter for constant 'kCGFontVariationAxisName'
struct __CFString *_get_kCGFontVariationAxisName(void);

// setter for constant 'kCGFontVariationAxisName'
void _set_kCGFontVariationAxisName(struct __CFString *value);

// getter for constant 'kCGPDFContextAllowsCopying'
struct __CFString *_get_kCGPDFContextAllowsCopying(void);

// setter for constant 'kCGPDFContextAllowsCopying'
void _set_kCGPDFContextAllowsCopying(struct __CFString *value);

// getter for constant 'kCGPDFContextAllowsPrinting'
struct __CFString *_get_kCGPDFContextAllowsPrinting(void);

// setter for constant 'kCGPDFContextAllowsPrinting'
void _set_kCGPDFContextAllowsPrinting(struct __CFString *value);

// getter for constant 'kCGPDFContextArtBox'
struct __CFString *_get_kCGPDFContextArtBox(void);

// setter for constant 'kCGPDFContextArtBox'
void _set_kCGPDFContextArtBox(struct __CFString *value);

// getter for constant 'kCGPDFContextAuthor'
struct __CFString *_get_kCGPDFContextAuthor(void);

// setter for constant 'kCGPDFContextAuthor'
void _set_kCGPDFContextAuthor(struct __CFString *value);

// getter for constant 'kCGPDFContextBleedBox'
struct __CFString *_get_kCGPDFContextBleedBox(void);

// setter for constant 'kCGPDFContextBleedBox'
void _set_kCGPDFContextBleedBox(struct __CFString *value);

// getter for constant 'kCGPDFContextCreator'
struct __CFString *_get_kCGPDFContextCreator(void);

// setter for constant 'kCGPDFContextCreator'
void _set_kCGPDFContextCreator(struct __CFString *value);

// getter for constant 'kCGPDFContextCropBox'
struct __CFString *_get_kCGPDFContextCropBox(void);

// setter for constant 'kCGPDFContextCropBox'
void _set_kCGPDFContextCropBox(struct __CFString *value);

// getter for constant 'kCGPDFContextMediaBox'
struct __CFString *_get_kCGPDFContextMediaBox(void);

// setter for constant 'kCGPDFContextMediaBox'
void _set_kCGPDFContextMediaBox(struct __CFString *value);

// getter for constant 'kCGPDFContextOutputIntent'
struct __CFString *_get_kCGPDFContextOutputIntent(void);

// setter for constant 'kCGPDFContextOutputIntent'
void _set_kCGPDFContextOutputIntent(struct __CFString *value);

// getter for constant 'kCGPDFContextOutputIntents'
struct __CFString *_get_kCGPDFContextOutputIntents(void);

// setter for constant 'kCGPDFContextOutputIntents'
void _set_kCGPDFContextOutputIntents(struct __CFString *value);

// getter for constant 'kCGPDFContextOwnerPassword'
struct __CFString *_get_kCGPDFContextOwnerPassword(void);

// setter for constant 'kCGPDFContextOwnerPassword'
void _set_kCGPDFContextOwnerPassword(struct __CFString *value);

// getter for constant 'kCGPDFContextTitle'
struct __CFString *_get_kCGPDFContextTitle(void);

// setter for constant 'kCGPDFContextTitle'
void _set_kCGPDFContextTitle(struct __CFString *value);

// getter for constant 'kCGPDFContextTrimBox'
struct __CFString *_get_kCGPDFContextTrimBox(void);

// setter for constant 'kCGPDFContextTrimBox'
void _set_kCGPDFContextTrimBox(struct __CFString *value);

// getter for constant 'kCGPDFContextUserPassword'
struct __CFString *_get_kCGPDFContextUserPassword(void);

// setter for constant 'kCGPDFContextUserPassword'
void _set_kCGPDFContextUserPassword(struct __CFString *value);

// getter for constant 'kCGPDFXDestinationOutputProfile'
struct __CFString *_get_kCGPDFXDestinationOutputProfile(void);

// setter for constant 'kCGPDFXDestinationOutputProfile'
void _set_kCGPDFXDestinationOutputProfile(struct __CFString *value);

// getter for constant 'kCGPDFXInfo'
struct __CFString *_get_kCGPDFXInfo(void);

// setter for constant 'kCGPDFXInfo'
void _set_kCGPDFXInfo(struct __CFString *value);

// getter for constant 'kCGPDFXOutputCondition'
struct __CFString *_get_kCGPDFXOutputCondition(void);

// setter for constant 'kCGPDFXOutputCondition'
void _set_kCGPDFXOutputCondition(struct __CFString *value);

// getter for constant 'kCGPDFXOutputConditionIdentifier'
struct __CFString *_get_kCGPDFXOutputConditionIdentifier(void);

// setter for constant 'kCGPDFXOutputConditionIdentifier'
void _set_kCGPDFXOutputConditionIdentifier(struct __CFString *value);

// getter for constant 'kCGPDFXOutputIntentSubtype'
struct __CFString *_get_kCGPDFXOutputIntentSubtype(void);

// setter for constant 'kCGPDFXOutputIntentSubtype'
void _set_kCGPDFXOutputIntentSubtype(struct __CFString *value);

// getter for constant 'kCGPDFXRegistryName'
struct __CFString *_get_kCGPDFXRegistryName(void);

// setter for constant 'kCGPDFXRegistryName'
void _set_kCGPDFXRegistryName(struct __CFString *value);

enum { CGDisplayNoErr = 0 };

enum { CGEventNoErr = 0 };

enum { CGGlyphMax = 65534 };

enum { CGGlyphMin = 0 };

enum { CGPDFDataFormatJPEG2000 = 2 };

enum { CGPDFDataFormatJPEGEncoded = 1 };

enum { CGPDFDataFormatRaw = 0 };

enum { CGRectMaxXEdge = 2 };

enum { CGRectMaxYEdge = 3 };

enum { CGRectMinXEdge = 0 };

enum { CGRectMinYEdge = 1 };

enum { kCGAnnotatedSessionEventTap = 2 };

enum { kCGAnyInputEventType = 4294967295 };

enum { kCGAssistiveTechHighWindowLevel = 1500 };

enum { kCGAssistiveTechHighWindowLevelKey = 20 };

enum { kCGBackstopMenuLevel = -20 };

enum { kCGBackstopMenuLevelKey = 3 };

enum { kCGBaseWindowLevel = -2147483648 };

enum { kCGBaseWindowLevelKey = 0 };

enum { kCGBitmapAlphaInfoMask = 31 };

enum { kCGBitmapByteOrder16Big = 12288 };

enum { kCGBitmapByteOrder16Host = 4096 };

enum { kCGBitmapByteOrder16Little = 4096 };

enum { kCGBitmapByteOrder32Big = 16384 };

enum { kCGBitmapByteOrder32Host = 8192 };

enum { kCGBitmapByteOrder32Little = 8192 };

enum { kCGBitmapByteOrderDefault = 0 };

enum { kCGBitmapByteOrderMask = 28672 };

enum { kCGBitmapFloatComponents = 256 };

enum { kCGBlendModeColor = 14 };

enum { kCGBlendModeColorBurn = 7 };

enum { kCGBlendModeColorDodge = 6 };

enum { kCGBlendModeDarken = 4 };

enum { kCGBlendModeDifference = 10 };

enum { kCGBlendModeExclusion = 11 };

enum { kCGBlendModeHardLight = 9 };

enum { kCGBlendModeHue = 12 };

enum { kCGBlendModeLighten = 5 };

enum { kCGBlendModeLuminosity = 15 };

enum { kCGBlendModeMultiply = 1 };

enum { kCGBlendModeNormal = 0 };

enum { kCGBlendModeOverlay = 3 };

enum { kCGBlendModeSaturation = 13 };

enum { kCGBlendModeScreen = 2 };

enum { kCGBlendModeSoftLight = 8 };

enum { kCGCaptureNoFill = 1 };

enum { kCGCaptureNoOptions = 0 };

enum { kCGConfigureForAppOnly = 0 };

enum { kCGConfigureForSession = 1 };

enum { kCGConfigurePermanently = 2 };

enum { kCGCursorWindowLevel = 2000 };

enum { kCGCursorWindowLevelKey = 19 };

enum { kCGDesktopIconWindowLevel = -2147483607 };

enum { kCGDesktopIconWindowLevelKey = 18 };

enum { kCGDesktopWindowLevel = -2147483627 };

enum { kCGDesktopWindowLevelKey = 2 };

enum { kCGDisplayAddFlag = 16 };

enum { kCGDisplayBeginConfigurationFlag = 1 };

#define kCGDisplayBlendNormal 0.0

#define kCGDisplayBlendSolidColor 1.0

enum { kCGDisplayDisabledFlag = 512 };

enum { kCGDisplayEnabledFlag = 256 };

enum { kCGDisplayFadeReservationInvalidToken = 0 };

enum { kCGDisplayMirrorFlag = 1024 };

enum { kCGDisplayMovedFlag = 2 };

enum { kCGDisplayRemoveFlag = 32 };

enum { kCGDisplaySetMainFlag = 4 };

enum { kCGDisplaySetModeFlag = 8 };

enum { kCGDisplayUnMirrorFlag = 2048 };

enum { kCGDockWindowLevel = 20 };

enum { kCGDockWindowLevelKey = 7 };

enum { kCGDraggingWindowLevel = 500 };

enum { kCGDraggingWindowLevelKey = 12 };

enum { kCGEncodingFontSpecific = 0 };

enum { kCGEncodingMacRoman = 1 };

enum { kCGErrorApplicationAlreadyRunning = 1025 };

enum { kCGErrorApplicationCanOnlyBeRunInOneSessionAtATime = 1026 };

enum { kCGErrorApplicationIncorrectExecutableFormatFound = 1023 };

enum { kCGErrorApplicationIsLaunching = 1024 };

enum { kCGErrorApplicationNotPermittedToExecute = 1016 };

enum { kCGErrorApplicationRequiresNewerSystem = 1015 };

enum { kCGErrorCannotComplete = 1004 };

enum { kCGErrorClassicApplicationsMustBeLaunchedByClassic = 1027 };

enum { kCGErrorFailure = 1000 };

enum { kCGErrorFirst = 1000 };

enum { kCGErrorForkFailed = 1028 };

enum { kCGErrorIllegalArgument = 1001 };

enum { kCGErrorInvalidConnection = 1002 };

enum { kCGErrorInvalidContext = 1003 };

enum { kCGErrorInvalidOperation = 1010 };

enum { kCGErrorLast = 1028 };

enum { kCGErrorNameTooLong = 1005 };

enum { kCGErrorNoCurrentPoint = 1009 };

enum { kCGErrorNoneAvailable = 1011 };

enum { kCGErrorNotImplemented = 1006 };

enum { kCGErrorRangeCheck = 1007 };

enum { kCGErrorSuccess = 0 };

enum { kCGErrorTypeCheck = 1008 };

enum { kCGEventFilterMaskPermitAllEvents = 7 };

enum { kCGEventFilterMaskPermitLocalKeyboardEvents = 2 };

enum { kCGEventFilterMaskPermitLocalMouseEvents = 1 };

enum { kCGEventFilterMaskPermitSystemDefinedEvents = 4 };

enum { kCGEventFlagMaskAlphaShift = 65536 };

enum { kCGEventFlagMaskAlternate = 524288 };

enum { kCGEventFlagMaskCommand = 1048576 };

enum { kCGEventFlagMaskControl = 262144 };

enum { kCGEventFlagMaskHelp = 4194304 };

enum { kCGEventFlagMaskNonCoalesced = 256 };

enum { kCGEventFlagMaskNumericPad = 2097152 };

enum { kCGEventFlagMaskSecondaryFn = 8388608 };

enum { kCGEventFlagMaskShift = 131072 };

enum { kCGEventFlagsChanged = 12 };

enum { kCGEventKeyDown = 10 };

enum { kCGEventKeyUp = 11 };

enum { kCGEventLeftMouseDown = 1 };

enum { kCGEventLeftMouseDragged = 6 };

enum { kCGEventLeftMouseUp = 2 };

enum { kCGEventMaskForAllEvents = 18446744073709551615 };

enum { kCGEventMouseMoved = 5 };

enum { kCGEventMouseSubtypeDefault = 0 };

enum { kCGEventMouseSubtypeTabletPoint = 1 };

enum { kCGEventMouseSubtypeTabletProximity = 2 };

enum { kCGEventNull = 0 };

enum { kCGEventOtherMouseDown = 25 };

enum { kCGEventOtherMouseDragged = 27 };

enum { kCGEventOtherMouseUp = 26 };

enum { kCGEventRightMouseDown = 3 };

enum { kCGEventRightMouseDragged = 7 };

enum { kCGEventRightMouseUp = 4 };

enum { kCGEventScrollWheel = 22 };

enum { kCGEventSourceGroupID = 44 };

enum { kCGEventSourceStateCombinedSessionState = 0 };

enum { kCGEventSourceStateHIDSystemState = 1 };

enum { kCGEventSourceStateID = 45 };

enum { kCGEventSourceStatePrivate = -1 };

enum { kCGEventSourceUnixProcessID = 41 };

enum { kCGEventSourceUserData = 42 };

enum { kCGEventSourceUserID = 43 };

enum { kCGEventSuppressionStateRemoteMouseDrag = 1 };

enum { kCGEventSuppressionStateSuppressionInterval = 0 };

enum { kCGEventSupressionStateRemoteMouseDrag = 1 };

enum { kCGEventSupressionStateSupressionInterval = 0 };

enum { kCGEventTabletPointer = 23 };

enum { kCGEventTabletProximity = 24 };

enum { kCGEventTapDisabledByTimeout = 4294967294 };

enum { kCGEventTapDisabledByUserInput = 4294967295 };

enum { kCGEventTapOptionListenOnly = 1 };

enum { kCGEventTargetProcessSerialNumber = 39 };

enum { kCGEventTargetUnixProcessID = 40 };

enum { kCGFloatingWindowLevel = 3 };

enum { kCGFloatingWindowLevelKey = 5 };

enum { kCGFontIndexInvalid = 65535 };

enum { kCGFontIndexMax = 65534 };

enum { kCGFontPostScriptFormatType1 = 1 };

enum { kCGFontPostScriptFormatType3 = 3 };

enum { kCGFontPostScriptFormatType42 = 42 };

enum { kCGGlyphMax = 65534 };

enum { kCGHIDEventTap = 0 };

enum { kCGHeadInsertEventTap = 0 };

enum { kCGHelpWindowLevel = 102 };

enum { kCGHelpWindowLevelKey = 16 };

enum { kCGImageAlphaFirst = 4 };

enum { kCGImageAlphaLast = 3 };

enum { kCGImageAlphaNone = 0 };

enum { kCGImageAlphaNoneSkipFirst = 6 };

enum { kCGImageAlphaNoneSkipLast = 5 };

enum { kCGImageAlphaOnly = 7 };

enum { kCGImageAlphaPremultipliedFirst = 2 };

enum { kCGImageAlphaPremultipliedLast = 1 };

enum { kCGInterpolationDefault = 0 };

enum { kCGInterpolationHigh = 3 };

enum { kCGInterpolationLow = 2 };

enum { kCGInterpolationNone = 1 };

enum { kCGKeyboardEventAutorepeat = 8 };

enum { kCGKeyboardEventKeyboardType = 10 };

enum { kCGKeyboardEventKeycode = 9 };

enum { kCGLineCapButt = 0 };

enum { kCGLineCapRound = 1 };

enum { kCGLineCapSquare = 2 };

enum { kCGLineJoinBevel = 2 };

enum { kCGLineJoinMiter = 0 };

enum { kCGLineJoinRound = 1 };

enum { kCGMainMenuWindowLevel = 24 };

enum { kCGMainMenuWindowLevelKey = 8 };

#define kCGMaxDisplayReservationInterval 15.0

enum { kCGMaximumWindowLevel = 2147483631 };

enum { kCGMaximumWindowLevelKey = 14 };

enum { kCGMinimumWindowLevel = -2147483647 };

enum { kCGMinimumWindowLevelKey = 1 };

enum { kCGModalPanelWindowLevel = 8 };

enum { kCGModalPanelWindowLevelKey = 10 };

enum { kCGMouseButtonCenter = 2 };

enum { kCGMouseButtonLeft = 0 };

enum { kCGMouseButtonRight = 1 };

#define kCGMouseDownEventMaskingDeadSwitchTimeout 60.0

enum { kCGMouseEventButtonNumber = 3 };

enum { kCGMouseEventClickState = 1 };

enum { kCGMouseEventDeltaX = 4 };

enum { kCGMouseEventDeltaY = 5 };

enum { kCGMouseEventInstantMouser = 6 };

enum { kCGMouseEventNumber = 0 };

enum { kCGMouseEventPressure = 2 };

enum { kCGMouseEventSubtype = 7 };

enum { kCGNormalWindowLevel = 0 };

enum { kCGNormalWindowLevelKey = 4 };

enum { kCGNumReservedWindowLevels = 16 };

enum { kCGNumberOfEventSuppressionStates = 2 };

enum { kCGNumberOfEventSupressionStates = 2 };

enum { kCGNumberOfWindowLevelKeys = 21 };

enum { kCGOverlayWindowLevel = 102 };

enum { kCGOverlayWindowLevelKey = 15 };

enum { kCGPDFArtBox = 4 };

enum { kCGPDFBleedBox = 2 };

enum { kCGPDFCropBox = 1 };

enum { kCGPDFMediaBox = 0 };

enum { kCGPDFObjectTypeArray = 7 };

enum { kCGPDFObjectTypeBoolean = 2 };

enum { kCGPDFObjectTypeDictionary = 8 };

enum { kCGPDFObjectTypeInteger = 3 };

enum { kCGPDFObjectTypeName = 5 };

enum { kCGPDFObjectTypeNull = 1 };

enum { kCGPDFObjectTypeReal = 4 };

enum { kCGPDFObjectTypeStream = 9 };

enum { kCGPDFObjectTypeString = 6 };

enum { kCGPDFTrimBox = 3 };

enum { kCGPathEOFill = 1 };

enum { kCGPathEOFillStroke = 4 };

enum { kCGPathElementAddCurveToPoint = 3 };

enum { kCGPathElementAddLineToPoint = 1 };

enum { kCGPathElementAddQuadCurveToPoint = 2 };

enum { kCGPathElementCloseSubpath = 4 };

enum { kCGPathElementMoveToPoint = 0 };

enum { kCGPathFill = 0 };

enum { kCGPathFillStroke = 3 };

enum { kCGPathStroke = 2 };

enum { kCGPatternTilingConstantSpacing = 2 };

enum { kCGPatternTilingConstantSpacingMinimalDistortion = 1 };

enum { kCGPatternTilingNoDistortion = 0 };

enum { kCGPopUpMenuWindowLevel = 101 };

enum { kCGPopUpMenuWindowLevelKey = 11 };

enum { kCGRenderingIntentAbsoluteColorimetric = 1 };

enum { kCGRenderingIntentDefault = 0 };

enum { kCGRenderingIntentPerceptual = 3 };

enum { kCGRenderingIntentRelativeColorimetric = 2 };

enum { kCGRenderingIntentSaturation = 4 };

enum { kCGScreenSaverWindowLevel = 1000 };

enum { kCGScreenSaverWindowLevelKey = 13 };

enum { kCGScreenUpdateOperationMove = 1 };

enum { kCGScreenUpdateOperationReducedDirtyRectangleCount = -2147483648 };

enum { kCGScreenUpdateOperationRefresh = 0 };

enum { kCGScrollWheelEventDeltaAxis1 = 11 };

enum { kCGScrollWheelEventDeltaAxis2 = 12 };

enum { kCGScrollWheelEventDeltaAxis3 = 13 };

enum { kCGScrollWheelEventInstantMouser = 14 };

enum { kCGSessionEventTap = 1 };

enum { kCGStatusWindowLevel = 25 };

enum { kCGStatusWindowLevelKey = 9 };

enum { kCGTabletEventDeviceID = 24 };

enum { kCGTabletEventPointButtons = 18 };

enum { kCGTabletEventPointPressure = 19 };

enum { kCGTabletEventPointX = 15 };

enum { kCGTabletEventPointY = 16 };

enum { kCGTabletEventPointZ = 17 };

enum { kCGTabletEventRotation = 22 };

enum { kCGTabletEventTangentialPressure = 23 };

enum { kCGTabletEventTiltX = 20 };

enum { kCGTabletEventTiltY = 21 };

enum { kCGTabletEventVendor1 = 25 };

enum { kCGTabletEventVendor2 = 26 };

enum { kCGTabletEventVendor3 = 27 };

enum { kCGTabletProximityEventCapabilityMask = 36 };

enum { kCGTabletProximityEventDeviceID = 31 };

enum { kCGTabletProximityEventEnterProximity = 38 };

enum { kCGTabletProximityEventPointerID = 30 };

enum { kCGTabletProximityEventPointerType = 37 };

enum { kCGTabletProximityEventSystemTabletID = 32 };

enum { kCGTabletProximityEventTabletID = 29 };

enum { kCGTabletProximityEventVendorID = 28 };

enum { kCGTabletProximityEventVendorPointerSerialNumber = 34 };

enum { kCGTabletProximityEventVendorPointerType = 33 };

enum { kCGTabletProximityEventVendorUniqueID = 35 };

enum { kCGTailAppendEventTap = 1 };

enum { kCGTextClip = 7 };

enum { kCGTextFill = 0 };

enum { kCGTextFillClip = 4 };

enum { kCGTextFillStroke = 2 };

enum { kCGTextFillStrokeClip = 6 };

enum { kCGTextInvisible = 3 };

enum { kCGTextStroke = 1 };

enum { kCGTextStrokeClip = 5 };

enum { kCGTornOffMenuWindowLevel = 3 };

enum { kCGTornOffMenuWindowLevelKey = 6 };

enum { kCGUtilityWindowLevel = 19 };

enum { kCGUtilityWindowLevelKey = 17 };

// function 'CGAcquireDisplayFadeReservation'
int CGAcquireDisplayFadeReservation(float seconds, unsigned int *pNewToken);

// function 'CGAffineTransformConcat'
struct CGAffineTransform CGAffineTransformConcat(struct CGAffineTransform t1, struct CGAffineTransform t2);

// function 'CGAffineTransformEqualToTransform'
_Bool CGAffineTransformEqualToTransform(struct CGAffineTransform t1, struct CGAffineTransform t2);

// function 'CGAffineTransformInvert'
struct CGAffineTransform CGAffineTransformInvert(struct CGAffineTransform t);

// function 'CGAffineTransformIsIdentity'
_Bool CGAffineTransformIsIdentity(struct CGAffineTransform t);

// function 'CGAffineTransformMake'
struct CGAffineTransform CGAffineTransformMake(float a, float b, float c, float d, float tx, float ty);

// function 'CGAffineTransformMakeRotation'
struct CGAffineTransform CGAffineTransformMakeRotation(float angle);

// function 'CGAffineTransformMakeScale'
struct CGAffineTransform CGAffineTransformMakeScale(float sx, float sy);

// function 'CGAffineTransformMakeTranslation'
struct CGAffineTransform CGAffineTransformMakeTranslation(float tx, float ty);

// function 'CGAffineTransformRotate'
struct CGAffineTransform CGAffineTransformRotate(struct CGAffineTransform t, float angle);

// function 'CGAffineTransformScale'
struct CGAffineTransform CGAffineTransformScale(struct CGAffineTransform t, float sx, float sy);

// function 'CGAffineTransformTranslate'
struct CGAffineTransform CGAffineTransformTranslate(struct CGAffineTransform t, float tx, float ty);

// function 'CGAssociateMouseAndMouseCursorPosition'
int CGAssociateMouseAndMouseCursorPosition(int connected);

// function 'CGBeginDisplayConfiguration'
int CGBeginDisplayConfiguration(struct _CGDisplayConfigRef **pConfigRef);

// function 'CGBitmapContextCreate'
struct CGContext *CGBitmapContextCreate(void *data, unsigned long width, unsigned long height, unsigned long bitsPerComponent, unsigned long bytesPerRow, struct CGColorSpace *colorspace, unsigned int bitmapInfo);

// function 'CGBitmapContextCreateImage'
struct CGImage *CGBitmapContextCreateImage(struct CGContext *c);

// function 'CGBitmapContextGetAlphaInfo'
int CGBitmapContextGetAlphaInfo(struct CGContext *c);

// function 'CGBitmapContextGetBitmapInfo'
unsigned int CGBitmapContextGetBitmapInfo(struct CGContext *c);

// function 'CGBitmapContextGetBitsPerComponent'
unsigned long CGBitmapContextGetBitsPerComponent(struct CGContext *c);

// function 'CGBitmapContextGetBitsPerPixel'
unsigned long CGBitmapContextGetBitsPerPixel(struct CGContext *c);

// function 'CGBitmapContextGetBytesPerRow'
unsigned long CGBitmapContextGetBytesPerRow(struct CGContext *c);

// function 'CGBitmapContextGetColorSpace'
struct CGColorSpace *CGBitmapContextGetColorSpace(struct CGContext *c);

// function 'CGBitmapContextGetData'
void *CGBitmapContextGetData(struct CGContext *c);

// function 'CGBitmapContextGetHeight'
unsigned long CGBitmapContextGetHeight(struct CGContext *c);

// function 'CGBitmapContextGetWidth'
unsigned long CGBitmapContextGetWidth(struct CGContext *c);

// function 'CGCancelDisplayConfiguration'
int CGCancelDisplayConfiguration(struct _CGDisplayConfigRef *configRef);

// function 'CGCaptureAllDisplays'
int CGCaptureAllDisplays(void);

// function 'CGCaptureAllDisplaysWithOptions'
int CGCaptureAllDisplaysWithOptions(unsigned int options);

// function 'CGColorCreate'
struct CGColor *CGColorCreate(struct CGColorSpace *colorspace, const float* components);

// function 'CGColorCreateCopy'
struct CGColor *CGColorCreateCopy(struct CGColor *color);

// function 'CGColorCreateCopyWithAlpha'
struct CGColor *CGColorCreateCopyWithAlpha(struct CGColor *color, float alpha);

// function 'CGColorCreateWithPattern'
struct CGColor *CGColorCreateWithPattern(struct CGColorSpace *colorspace, struct CGPattern *pattern, const float* components);

// function 'CGColorEqualToColor'
_Bool CGColorEqualToColor(struct CGColor *color1, struct CGColor *color2);

// function 'CGColorGetAlpha'
float CGColorGetAlpha(struct CGColor *color);

// function 'CGColorGetColorSpace'
struct CGColorSpace *CGColorGetColorSpace(struct CGColor *color);

// function 'CGColorGetComponents'
const float* CGColorGetComponents(struct CGColor *color);

// function 'CGColorGetNumberOfComponents'
unsigned long CGColorGetNumberOfComponents(struct CGColor *color);

// function 'CGColorGetPattern'
struct CGPattern *CGColorGetPattern(struct CGColor *color);

// function 'CGColorGetTypeID'
unsigned long CGColorGetTypeID(void);

// function 'CGColorRelease'
void CGColorRelease(struct CGColor *color);

// function 'CGColorRetain'
struct CGColor *CGColorRetain(struct CGColor *color);

// function 'CGColorSpaceCreateCalibratedGray'
struct CGColorSpace *CGColorSpaceCreateCalibratedGray(const float* whitePoint, const float* blackPoint, float gamma);

// function 'CGColorSpaceCreateCalibratedRGB'
struct CGColorSpace *CGColorSpaceCreateCalibratedRGB(const float* whitePoint, const float* blackPoint, const float* gamma, const float* matrix);

// function 'CGColorSpaceCreateDeviceCMYK'
struct CGColorSpace *CGColorSpaceCreateDeviceCMYK(void);

// function 'CGColorSpaceCreateDeviceGray'
struct CGColorSpace *CGColorSpaceCreateDeviceGray(void);

// function 'CGColorSpaceCreateDeviceRGB'
struct CGColorSpace *CGColorSpaceCreateDeviceRGB(void);

// function 'CGColorSpaceCreateICCBased'
struct CGColorSpace *CGColorSpaceCreateICCBased(unsigned long nComponents, const float* range, struct CGDataProvider *profile, struct CGColorSpace *alternate);

// function 'CGColorSpaceCreateIndexed'
struct CGColorSpace *CGColorSpaceCreateIndexed(struct CGColorSpace *baseSpace, unsigned long lastIndex, const unsigned char* colorTable);

// function 'CGColorSpaceCreateLab'
struct CGColorSpace *CGColorSpaceCreateLab(const float* whitePoint, const float* blackPoint, const float* range);

// function 'CGColorSpaceCreatePattern'
struct CGColorSpace *CGColorSpaceCreatePattern(struct CGColorSpace *baseSpace);

// function 'CGColorSpaceCreateWithName'
struct CGColorSpace *CGColorSpaceCreateWithName(struct __CFString *name);

// function 'CGColorSpaceCreateWithPlatformColorSpace'
struct CGColorSpace *CGColorSpaceCreateWithPlatformColorSpace(struct OpaqueCMProfileRef *platformColorSpaceReference);

// function 'CGColorSpaceGetNumberOfComponents'
unsigned long CGColorSpaceGetNumberOfComponents(const struct CGColorSpace* cs);

// function 'CGColorSpaceGetTypeID'
unsigned long CGColorSpaceGetTypeID(void);

// function 'CGColorSpaceRelease'
void CGColorSpaceRelease(struct CGColorSpace *cs);

// function 'CGColorSpaceRetain'
struct CGColorSpace *CGColorSpaceRetain(struct CGColorSpace *cs);

// function 'CGCompleteDisplayConfiguration'
int CGCompleteDisplayConfiguration(struct _CGDisplayConfigRef *configRef, unsigned int option);

// function 'CGConfigureDisplayFadeEffect'
int CGConfigureDisplayFadeEffect(struct _CGDisplayConfigRef *configRef, float fadeOutSeconds, float fadeInSeconds, float fadeRed, float fadeGreen, float fadeBlue);

// function 'CGConfigureDisplayMirrorOfDisplay'
int CGConfigureDisplayMirrorOfDisplay(struct _CGDisplayConfigRef *configRef, struct _CGDirectDisplayID *display, struct _CGDirectDisplayID *masterDisplay);

// function 'CGConfigureDisplayMode'
int CGConfigureDisplayMode(struct _CGDisplayConfigRef *configRef, struct _CGDirectDisplayID *display, struct __CFDictionary *mode);

// function 'CGConfigureDisplayOrigin'
int CGConfigureDisplayOrigin(struct _CGDisplayConfigRef *configRef, struct _CGDirectDisplayID *display, int x, int y);

// function 'CGConfigureDisplayStereoOperation'
int CGConfigureDisplayStereoOperation(struct _CGDisplayConfigRef *configRef, struct _CGDirectDisplayID *display, int stereo, int forceBlueLine);

// function 'CGContextAddArc'
void CGContextAddArc(struct CGContext *c, float x, float y, float radius, float startAngle, float endAngle, int clockwise);

// function 'CGContextAddArcToPoint'
void CGContextAddArcToPoint(struct CGContext *c, float x1, float y1, float x2, float y2, float radius);

// function 'CGContextAddCurveToPoint'
void CGContextAddCurveToPoint(struct CGContext *c, float cp1x, float cp1y, float cp2x, float cp2y, float x, float y);

// function 'CGContextAddEllipseInRect'
void CGContextAddEllipseInRect(struct CGContext *context, struct CGRect rect);

// function 'CGContextAddLineToPoint'
void CGContextAddLineToPoint(struct CGContext *c, float x, float y);

// function 'CGContextAddLines'
void CGContextAddLines(struct CGContext *c, const struct CGPoint* points, unsigned long count);

// function 'CGContextAddPath'
void CGContextAddPath(struct CGContext *context, struct CGPath *path);

// function 'CGContextAddQuadCurveToPoint'
void CGContextAddQuadCurveToPoint(struct CGContext *c, float cpx, float cpy, float x, float y);

// function 'CGContextAddRect'
void CGContextAddRect(struct CGContext *c, struct CGRect rect);

// function 'CGContextAddRects'
void CGContextAddRects(struct CGContext *c, const struct CGRect* rects, unsigned long count);

// function 'CGContextBeginPage'
void CGContextBeginPage(struct CGContext *c, const struct CGRect* mediaBox);

// function 'CGContextBeginPath'
void CGContextBeginPath(struct CGContext *c);

// function 'CGContextBeginTransparencyLayer'
void CGContextBeginTransparencyLayer(struct CGContext *context, struct __CFDictionary *auxiliaryInfo);

// function 'CGContextClearRect'
void CGContextClearRect(struct CGContext *c, struct CGRect rect);

// function 'CGContextClip'
void CGContextClip(struct CGContext *c);

// function 'CGContextClipToMask'
void CGContextClipToMask(struct CGContext *c, struct CGRect rect, struct CGImage *mask);

// function 'CGContextClipToRect'
void CGContextClipToRect(struct CGContext *c, struct CGRect rect);

// function 'CGContextClipToRects'
void CGContextClipToRects(struct CGContext *c, const struct CGRect* rects, unsigned long count);

// function 'CGContextClosePath'
void CGContextClosePath(struct CGContext *c);

// function 'CGContextConcatCTM'
void CGContextConcatCTM(struct CGContext *c, struct CGAffineTransform transform);

// function 'CGContextConvertPointToDeviceSpace'
struct CGPoint CGContextConvertPointToDeviceSpace(struct CGContext *c, struct CGPoint point);

// function 'CGContextConvertPointToUserSpace'
struct CGPoint CGContextConvertPointToUserSpace(struct CGContext *c, struct CGPoint point);

// function 'CGContextConvertRectToDeviceSpace'
struct CGRect CGContextConvertRectToDeviceSpace(struct CGContext *c, struct CGRect rect);

// function 'CGContextConvertRectToUserSpace'
struct CGRect CGContextConvertRectToUserSpace(struct CGContext *c, struct CGRect rect);

// function 'CGContextConvertSizeToDeviceSpace'
struct CGSize CGContextConvertSizeToDeviceSpace(struct CGContext *c, struct CGSize size);

// function 'CGContextConvertSizeToUserSpace'
struct CGSize CGContextConvertSizeToUserSpace(struct CGContext *c, struct CGSize size);

// function 'CGContextDrawImage'
void CGContextDrawImage(struct CGContext *c, struct CGRect rect, struct CGImage *image);

// function 'CGContextDrawLayerAtPoint'
void CGContextDrawLayerAtPoint(struct CGContext *context, struct CGPoint point, struct CGLayer *layer);

// function 'CGContextDrawLayerInRect'
void CGContextDrawLayerInRect(struct CGContext *context, struct CGRect rect, struct CGLayer *layer);

// function 'CGContextDrawPDFDocument'
void CGContextDrawPDFDocument(struct CGContext *c, struct CGRect rect, struct CGPDFDocument *document, int page);

// function 'CGContextDrawPDFPage'
void CGContextDrawPDFPage(struct CGContext *c, struct CGPDFPage *page);

// function 'CGContextDrawPath'
void CGContextDrawPath(struct CGContext *c, int mode);

// function 'CGContextDrawShading'
void CGContextDrawShading(struct CGContext *c, struct CGShading *shading);

// function 'CGContextEOClip'
void CGContextEOClip(struct CGContext *c);

// function 'CGContextEOFillPath'
void CGContextEOFillPath(struct CGContext *c);

// function 'CGContextEndPage'
void CGContextEndPage(struct CGContext *c);

// function 'CGContextEndTransparencyLayer'
void CGContextEndTransparencyLayer(struct CGContext *context);

// function 'CGContextFillEllipseInRect'
void CGContextFillEllipseInRect(struct CGContext *context, struct CGRect rect);

// function 'CGContextFillPath'
void CGContextFillPath(struct CGContext *c);

// function 'CGContextFillRect'
void CGContextFillRect(struct CGContext *c, struct CGRect rect);

// function 'CGContextFillRects'
void CGContextFillRects(struct CGContext *c, const struct CGRect* rects, unsigned long count);

// function 'CGContextFlush'
void CGContextFlush(struct CGContext *c);

// function 'CGContextGetCTM'
struct CGAffineTransform CGContextGetCTM(struct CGContext *c);

// function 'CGContextGetClipBoundingBox'
struct CGRect CGContextGetClipBoundingBox(struct CGContext *c);

// function 'CGContextGetInterpolationQuality'
int CGContextGetInterpolationQuality(struct CGContext *c);

// function 'CGContextGetPathBoundingBox'
struct CGRect CGContextGetPathBoundingBox(struct CGContext *c);

// function 'CGContextGetPathCurrentPoint'
struct CGPoint CGContextGetPathCurrentPoint(struct CGContext *c);

// function 'CGContextGetTextMatrix'
struct CGAffineTransform CGContextGetTextMatrix(struct CGContext *c);

// function 'CGContextGetTextPosition'
struct CGPoint CGContextGetTextPosition(struct CGContext *c);

// function 'CGContextGetTypeID'
unsigned long CGContextGetTypeID(void);

// function 'CGContextGetUserSpaceToDeviceSpaceTransform'
struct CGAffineTransform CGContextGetUserSpaceToDeviceSpaceTransform(struct CGContext *c);

// function 'CGContextIsPathEmpty'
_Bool CGContextIsPathEmpty(struct CGContext *c);

// function 'CGContextMoveToPoint'
void CGContextMoveToPoint(struct CGContext *c, float x, float y);

// function 'CGContextPathContainsPoint'
_Bool CGContextPathContainsPoint(struct CGContext *context, struct CGPoint point, int mode);

// function 'CGContextRelease'
void CGContextRelease(struct CGContext *c);

// function 'CGContextReplacePathWithStrokedPath'
void CGContextReplacePathWithStrokedPath(struct CGContext *c);

// function 'CGContextRestoreGState'
void CGContextRestoreGState(struct CGContext *c);

// function 'CGContextRetain'
struct CGContext *CGContextRetain(struct CGContext *c);

// function 'CGContextRotateCTM'
void CGContextRotateCTM(struct CGContext *c, float angle);

// function 'CGContextSaveGState'
void CGContextSaveGState(struct CGContext *c);

// function 'CGContextScaleCTM'
void CGContextScaleCTM(struct CGContext *c, float sx, float sy);

// function 'CGContextSelectFont'
void CGContextSelectFont(struct CGContext *c, const char* name, float size, int textEncoding);

// function 'CGContextSetAllowsAntialiasing'
void CGContextSetAllowsAntialiasing(struct CGContext *context, _Bool allowsAntialiasing);

// function 'CGContextSetAlpha'
void CGContextSetAlpha(struct CGContext *c, float alpha);

// function 'CGContextSetBlendMode'
void CGContextSetBlendMode(struct CGContext *context, int mode);

// function 'CGContextSetCMYKFillColor'
void CGContextSetCMYKFillColor(struct CGContext *c, float cyan, float magenta, float yellow, float black, float alpha);

// function 'CGContextSetCMYKStrokeColor'
void CGContextSetCMYKStrokeColor(struct CGContext *c, float cyan, float magenta, float yellow, float black, float alpha);

// function 'CGContextSetCharacterSpacing'
void CGContextSetCharacterSpacing(struct CGContext *c, float spacing);

// function 'CGContextSetFillColor'
void CGContextSetFillColor(struct CGContext *c, const float* components);

// function 'CGContextSetFillColorSpace'
void CGContextSetFillColorSpace(struct CGContext *c, struct CGColorSpace *colorspace);

// function 'CGContextSetFillColorWithColor'
void CGContextSetFillColorWithColor(struct CGContext *c, struct CGColor *color);

// function 'CGContextSetFillPattern'
void CGContextSetFillPattern(struct CGContext *c, struct CGPattern *pattern, const float* components);

// function 'CGContextSetFlatness'
void CGContextSetFlatness(struct CGContext *c, float flatness);

// function 'CGContextSetFont'
void CGContextSetFont(struct CGContext *c, struct CGFont *font);

// function 'CGContextSetFontSize'
void CGContextSetFontSize(struct CGContext *c, float size);

// function 'CGContextSetGrayFillColor'
void CGContextSetGrayFillColor(struct CGContext *c, float gray, float alpha);

// function 'CGContextSetGrayStrokeColor'
void CGContextSetGrayStrokeColor(struct CGContext *c, float gray, float alpha);

// function 'CGContextSetInterpolationQuality'
void CGContextSetInterpolationQuality(struct CGContext *c, int quality);

// function 'CGContextSetLineCap'
void CGContextSetLineCap(struct CGContext *c, int cap);

// function 'CGContextSetLineDash'
void CGContextSetLineDash(struct CGContext *c, float phase, const float* lengths, unsigned long count);

// function 'CGContextSetLineJoin'
void CGContextSetLineJoin(struct CGContext *c, int join);

// function 'CGContextSetLineWidth'
void CGContextSetLineWidth(struct CGContext *c, float width);

// function 'CGContextSetMiterLimit'
void CGContextSetMiterLimit(struct CGContext *c, float limit);

// function 'CGContextSetPatternPhase'
void CGContextSetPatternPhase(struct CGContext *c, struct CGSize phase);

// function 'CGContextSetRGBFillColor'
void CGContextSetRGBFillColor(struct CGContext *c, float red, float green, float blue, float alpha);

// function 'CGContextSetRGBStrokeColor'
void CGContextSetRGBStrokeColor(struct CGContext *c, float red, float green, float blue, float alpha);

// function 'CGContextSetRenderingIntent'
void CGContextSetRenderingIntent(struct CGContext *c, int intent);

// function 'CGContextSetShadow'
void CGContextSetShadow(struct CGContext *context, struct CGSize offset, float blur);

// function 'CGContextSetShadowWithColor'
void CGContextSetShadowWithColor(struct CGContext *context, struct CGSize offset, float blur, struct CGColor *color);

// function 'CGContextSetShouldAntialias'
void CGContextSetShouldAntialias(struct CGContext *c, _Bool shouldAntialias);

// function 'CGContextSetShouldSmoothFonts'
void CGContextSetShouldSmoothFonts(struct CGContext *c, _Bool shouldSmoothFonts);

// function 'CGContextSetStrokeColor'
void CGContextSetStrokeColor(struct CGContext *c, const float* components);

// function 'CGContextSetStrokeColorSpace'
void CGContextSetStrokeColorSpace(struct CGContext *c, struct CGColorSpace *colorspace);

// function 'CGContextSetStrokeColorWithColor'
void CGContextSetStrokeColorWithColor(struct CGContext *c, struct CGColor *color);

// function 'CGContextSetStrokePattern'
void CGContextSetStrokePattern(struct CGContext *c, struct CGPattern *pattern, const float* components);

// function 'CGContextSetTextDrawingMode'
void CGContextSetTextDrawingMode(struct CGContext *c, int mode);

// function 'CGContextSetTextMatrix'
void CGContextSetTextMatrix(struct CGContext *c, struct CGAffineTransform t);

// function 'CGContextSetTextPosition'
void CGContextSetTextPosition(struct CGContext *c, float x, float y);

// function 'CGContextShowGlyphs'
void CGContextShowGlyphs(struct CGContext *c, const unsigned short* g, unsigned long count);

// function 'CGContextShowGlyphsAtPoint'
void CGContextShowGlyphsAtPoint(struct CGContext *c, float x, float y, const unsigned short* glyphs, unsigned long count);

// function 'CGContextShowGlyphsWithAdvances'
void CGContextShowGlyphsWithAdvances(struct CGContext *c, const unsigned short* glyphs, const struct CGSize* advances, unsigned long count);

// function 'CGContextShowText'
void CGContextShowText(struct CGContext *c, const char* string, unsigned long length);

// function 'CGContextShowTextAtPoint'
void CGContextShowTextAtPoint(struct CGContext *c, float x, float y, const char* string, unsigned long length);

// function 'CGContextStrokeEllipseInRect'
void CGContextStrokeEllipseInRect(struct CGContext *context, struct CGRect rect);

// function 'CGContextStrokeLineSegments'
void CGContextStrokeLineSegments(struct CGContext *c, const struct CGPoint* points, unsigned long count);

// function 'CGContextStrokePath'
void CGContextStrokePath(struct CGContext *c);

// function 'CGContextStrokeRect'
void CGContextStrokeRect(struct CGContext *c, struct CGRect rect);

// function 'CGContextStrokeRectWithWidth'
void CGContextStrokeRectWithWidth(struct CGContext *c, struct CGRect rect, float width);

// function 'CGContextSynchronize'
void CGContextSynchronize(struct CGContext *c);

// function 'CGContextTranslateCTM'
void CGContextTranslateCTM(struct CGContext *c, float tx, float ty);

// function 'CGCursorIsDrawnInFramebuffer'
int CGCursorIsDrawnInFramebuffer(void);

// function 'CGCursorIsVisible'
int CGCursorIsVisible(void);

// function 'CGDataConsumerCreateWithCFData'
struct CGDataConsumer *CGDataConsumerCreateWithCFData(struct __CFData *data);

// function 'CGDataConsumerCreateWithURL'
struct CGDataConsumer *CGDataConsumerCreateWithURL(struct __CFURL *url);

// function 'CGDataConsumerGetTypeID'
unsigned long CGDataConsumerGetTypeID(void);

// function 'CGDataConsumerRelease'
void CGDataConsumerRelease(struct CGDataConsumer *consumer);

// function 'CGDataConsumerRetain'
struct CGDataConsumer *CGDataConsumerRetain(struct CGDataConsumer *consumer);

// function 'CGDataProviderCreateWithCFData'
struct CGDataProvider *CGDataProviderCreateWithCFData(struct __CFData *data);

// function 'CGDataProviderCreateWithFilename'
struct CGDataProvider *CGDataProviderCreateWithFilename(const char* filename);

// function 'CGDataProviderCreateWithURL'
struct CGDataProvider *CGDataProviderCreateWithURL(struct __CFURL *url);

// function 'CGDataProviderGetTypeID'
unsigned long CGDataProviderGetTypeID(void);

// function 'CGDataProviderRelease'
void CGDataProviderRelease(struct CGDataProvider *provider);

// function 'CGDataProviderRetain'
struct CGDataProvider *CGDataProviderRetain(struct CGDataProvider *provider);

// function 'CGDisplayAddressForPosition'
void *CGDisplayAddressForPosition(struct _CGDirectDisplayID *display, int x, int y);

// function 'CGDisplayAvailableModes'
struct __CFArray *CGDisplayAvailableModes(struct _CGDirectDisplayID *display);

// function 'CGDisplayBaseAddress'
void *CGDisplayBaseAddress(struct _CGDirectDisplayID *display);

// function 'CGDisplayBeamPosition'
unsigned int CGDisplayBeamPosition(struct _CGDirectDisplayID *display);

// function 'CGDisplayBestModeForParameters'
struct __CFDictionary *CGDisplayBestModeForParameters(struct _CGDirectDisplayID *display, unsigned long bitsPerPixel, unsigned long width, unsigned long height, int *exactMatch);

// function 'CGDisplayBestModeForParametersAndRefreshRate'
struct __CFDictionary *CGDisplayBestModeForParametersAndRefreshRate(struct _CGDirectDisplayID *display, unsigned long bitsPerPixel, unsigned long width, unsigned long height, double refresh, int *exactMatch);

// function 'CGDisplayBestModeForParametersAndRefreshRateWithProperty'
struct __CFDictionary *CGDisplayBestModeForParametersAndRefreshRateWithProperty(struct _CGDirectDisplayID *display, unsigned long bitsPerPixel, unsigned long width, unsigned long height, double refresh, struct __CFString *property, int *exactMatch);

// function 'CGDisplayBitsPerPixel'
unsigned long CGDisplayBitsPerPixel(struct _CGDirectDisplayID *display);

// function 'CGDisplayBitsPerSample'
unsigned long CGDisplayBitsPerSample(struct _CGDirectDisplayID *display);

// function 'CGDisplayBounds'
struct CGRect CGDisplayBounds(struct _CGDirectDisplayID *display);

// function 'CGDisplayBytesPerRow'
unsigned long CGDisplayBytesPerRow(struct _CGDirectDisplayID *display);

// function 'CGDisplayCanSetPalette'
int CGDisplayCanSetPalette(struct _CGDirectDisplayID *display);

// function 'CGDisplayCapture'
int CGDisplayCapture(struct _CGDirectDisplayID *display);

// function 'CGDisplayCaptureWithOptions'
int CGDisplayCaptureWithOptions(struct _CGDirectDisplayID *display, unsigned int options);

// function 'CGDisplayCurrentMode'
struct __CFDictionary *CGDisplayCurrentMode(struct _CGDirectDisplayID *display);

// function 'CGDisplayFade'
int CGDisplayFade(unsigned int myToken, float seconds, float startBlend, float endBlend, float redBlend, float greenBlend, float blueBlend, int synchronous);

// function 'CGDisplayFadeOperationInProgress'
int CGDisplayFadeOperationInProgress(void);

// function 'CGDisplayGammaTableCapacity'
unsigned int CGDisplayGammaTableCapacity(struct _CGDirectDisplayID *display);

// function 'CGDisplayGetDrawingContext'
struct CGContext *CGDisplayGetDrawingContext(struct _CGDirectDisplayID *display);

// function 'CGDisplayHideCursor'
int CGDisplayHideCursor(struct _CGDirectDisplayID *display);

// function 'CGDisplayIDToOpenGLDisplayMask'
unsigned int CGDisplayIDToOpenGLDisplayMask(struct _CGDirectDisplayID *display);

// function 'CGDisplayIOServicePort'
unsigned int CGDisplayIOServicePort(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsActive'
int CGDisplayIsActive(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsAlwaysInMirrorSet'
int CGDisplayIsAlwaysInMirrorSet(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsAsleep'
int CGDisplayIsAsleep(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsBuiltin'
int CGDisplayIsBuiltin(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsCaptured'
int CGDisplayIsCaptured(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsInHWMirrorSet'
int CGDisplayIsInHWMirrorSet(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsInMirrorSet'
int CGDisplayIsInMirrorSet(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsMain'
int CGDisplayIsMain(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsOnline'
int CGDisplayIsOnline(struct _CGDirectDisplayID *display);

// function 'CGDisplayIsStereo'
int CGDisplayIsStereo(struct _CGDirectDisplayID *display);

// function 'CGDisplayMirrorsDisplay'
struct _CGDirectDisplayID *CGDisplayMirrorsDisplay(struct _CGDirectDisplayID *display);

// function 'CGDisplayModelNumber'
unsigned int CGDisplayModelNumber(struct _CGDirectDisplayID *display);

// function 'CGDisplayMoveCursorToPoint'
int CGDisplayMoveCursorToPoint(struct _CGDirectDisplayID *display, struct CGPoint point);

// function 'CGDisplayPixelsHigh'
unsigned long CGDisplayPixelsHigh(struct _CGDirectDisplayID *display);

// function 'CGDisplayPixelsWide'
unsigned long CGDisplayPixelsWide(struct _CGDirectDisplayID *display);

// function 'CGDisplayPrimaryDisplay'
struct _CGDirectDisplayID *CGDisplayPrimaryDisplay(struct _CGDirectDisplayID *display);

// function 'CGDisplayRelease'
int CGDisplayRelease(struct _CGDirectDisplayID *display);

// function 'CGDisplayRestoreColorSyncSettings'
void CGDisplayRestoreColorSyncSettings(void);

// function 'CGDisplaySamplesPerPixel'
unsigned long CGDisplaySamplesPerPixel(struct _CGDirectDisplayID *display);

// function 'CGDisplayScreenSize'
struct CGSize CGDisplayScreenSize(struct _CGDirectDisplayID *display);

// function 'CGDisplaySerialNumber'
unsigned int CGDisplaySerialNumber(struct _CGDirectDisplayID *display);

// function 'CGDisplaySetPalette'
int CGDisplaySetPalette(struct _CGDirectDisplayID *display, const struct _CGDirectPaletteRef* palette);

// function 'CGDisplaySetStereoOperation'
int CGDisplaySetStereoOperation(struct _CGDirectDisplayID *display, int stereo, int forceBlueLine, unsigned int option);

// function 'CGDisplayShowCursor'
int CGDisplayShowCursor(struct _CGDirectDisplayID *display);

// function 'CGDisplaySwitchToMode'
int CGDisplaySwitchToMode(struct _CGDirectDisplayID *display, struct __CFDictionary *mode);

// function 'CGDisplayUnitNumber'
unsigned int CGDisplayUnitNumber(struct _CGDirectDisplayID *display);

// function 'CGDisplayUsesOpenGLAcceleration'
int CGDisplayUsesOpenGLAcceleration(struct _CGDirectDisplayID *display);

// function 'CGDisplayVendorNumber'
unsigned int CGDisplayVendorNumber(struct _CGDirectDisplayID *display);

// function 'CGDisplayWaitForBeamPositionOutsideLines'
int CGDisplayWaitForBeamPositionOutsideLines(struct _CGDirectDisplayID *display, unsigned int upperScanLine, unsigned int lowerScanLine);

// function 'CGEnableEventStateCombining'
int CGEnableEventStateCombining(int doCombineState);

// function 'CGEventCreate'
struct __CGEvent *CGEventCreate(struct __CGEventSource *source);

// function 'CGEventCreateCopy'
struct __CGEvent *CGEventCreateCopy(struct __CGEvent *event);

// function 'CGEventCreateData'
struct __CFData *CGEventCreateData(struct __CFAllocator *allocator, struct __CGEvent *event);

// function 'CGEventCreateFromData'
struct __CGEvent *CGEventCreateFromData(struct __CFAllocator *allocator, struct __CFData *eventData);

// function 'CGEventCreateKeyboardEvent'
struct __CGEvent *CGEventCreateKeyboardEvent(struct __CGEventSource *source, unsigned short virtualKey, _Bool keyDown);

// function 'CGEventCreateMouseEvent'
struct __CGEvent *CGEventCreateMouseEvent(struct __CGEventSource *source, unsigned int mouseType, struct CGPoint mouseCursorPosition, unsigned int mouseButton);

// function 'CGEventCreateSourceFromEvent'
struct __CGEventSource *CGEventCreateSourceFromEvent(struct __CGEvent *event);

// function 'CGEventGetDoubleValueField'
double CGEventGetDoubleValueField(struct __CGEvent *event, unsigned int field);

// function 'CGEventGetFlags'
unsigned long long CGEventGetFlags(struct __CGEvent *event);

// function 'CGEventGetIntegerValueField'
long long CGEventGetIntegerValueField(struct __CGEvent *event, unsigned int field);

// function 'CGEventGetLocation'
struct CGPoint CGEventGetLocation(struct __CGEvent *event);

// function 'CGEventGetSource'
struct __CGEventSource *CGEventGetSource(struct __CGEvent *event);

// function 'CGEventGetTimestamp'
unsigned long long CGEventGetTimestamp(struct __CGEvent *event);

// function 'CGEventGetType'
unsigned int CGEventGetType(struct __CGEvent *event);

// function 'CGEventGetTypeID'
unsigned long CGEventGetTypeID(void);

// function 'CGEventKeyboardGetUnicodeString'
void CGEventKeyboardGetUnicodeString(struct __CGEvent *event, unsigned long maxStringLength, unsigned int *actualStringLength, unsigned short *unicodeString);

// function 'CGEventKeyboardSetUnicodeString'
void CGEventKeyboardSetUnicodeString(struct __CGEvent *event, unsigned long stringLength, const unsigned short* unicodeString);

// function 'CGEventPost'
void CGEventPost(unsigned int tap, struct __CGEvent *event);

// function 'CGEventPostToPSN'
void CGEventPostToPSN(struct ProcessSerialNumber *processSerialNumber, struct __CGEvent *event);

// function 'CGEventSetDoubleValueField'
void CGEventSetDoubleValueField(struct __CGEvent *event, unsigned int field, double value);

// function 'CGEventSetFlags'
void CGEventSetFlags(struct __CGEvent *event, unsigned long long flags);

// function 'CGEventSetIntegerValueField'
void CGEventSetIntegerValueField(struct __CGEvent *event, unsigned int field, long long value);

// function 'CGEventSetLocation'
void CGEventSetLocation(struct __CGEvent *event, struct CGPoint location);

// function 'CGEventSetSource'
void CGEventSetSource(struct __CGEvent *event, struct __CGEventSource *source);

// function 'CGEventSetTimestamp'
void CGEventSetTimestamp(struct __CGEvent *event, unsigned long long timestamp);

// function 'CGEventSetType'
void CGEventSetType(struct __CGEvent *event, unsigned int type);

// function 'CGEventSourceButtonState'
_Bool CGEventSourceButtonState(unsigned int sourceState, unsigned int button);

// function 'CGEventSourceCounterForEventType'
unsigned int CGEventSourceCounterForEventType(unsigned int source, unsigned int evType);

// function 'CGEventSourceCreate'
struct __CGEventSource *CGEventSourceCreate(unsigned int sourceState);

// function 'CGEventSourceFlagsState'
unsigned long long CGEventSourceFlagsState(unsigned int sourceState);

// function 'CGEventSourceGetKeyboardType'
unsigned int CGEventSourceGetKeyboardType(struct __CGEventSource *source);

// function 'CGEventSourceGetLocalEventsFilterDuringSuppressionState'
unsigned int CGEventSourceGetLocalEventsFilterDuringSuppressionState(struct __CGEventSource *source, unsigned int state);

// function 'CGEventSourceGetLocalEventsSuppressionInterval'
double CGEventSourceGetLocalEventsSuppressionInterval(struct __CGEventSource *source);

// function 'CGEventSourceGetSourceStateID'
unsigned int CGEventSourceGetSourceStateID(struct __CGEventSource *source);

// function 'CGEventSourceGetTypeID'
unsigned long CGEventSourceGetTypeID(void);

// function 'CGEventSourceGetUserData'
long long CGEventSourceGetUserData(struct __CGEventSource *source);

// function 'CGEventSourceKeyState'
_Bool CGEventSourceKeyState(unsigned int sourceState, unsigned short key);

// function 'CGEventSourceSecondsSinceLastEventType'
double CGEventSourceSecondsSinceLastEventType(unsigned int source, unsigned int eventType);

// function 'CGEventSourceSetKeyboardType'
void CGEventSourceSetKeyboardType(struct __CGEventSource *source, unsigned int keyboardType);

// function 'CGEventSourceSetLocalEventsFilterDuringSuppressionState'
void CGEventSourceSetLocalEventsFilterDuringSuppressionState(struct __CGEventSource *source, unsigned int filter, unsigned int state);

// function 'CGEventSourceSetLocalEventsSuppressionInterval'
void CGEventSourceSetLocalEventsSuppressionInterval(struct __CGEventSource *source, double seconds);

// function 'CGEventSourceSetUserData'
void CGEventSourceSetUserData(struct __CGEventSource *source, long long userData);

// function 'CGEventTapEnable'
void CGEventTapEnable(struct __CFMachPort *myTap, _Bool enable);

// function 'CGEventTapIsEnabled'
_Bool CGEventTapIsEnabled(struct __CFMachPort *myTap);

// function 'CGEventTapPostEvent'
void CGEventTapPostEvent(struct __CGEventTapProxy *proxy, struct __CGEvent *event);

// function 'CGFontCanCreatePostScriptSubset'
_Bool CGFontCanCreatePostScriptSubset(struct CGFont *font, int format);

// function 'CGFontCopyPostScriptName'
struct __CFString *CGFontCopyPostScriptName(struct CGFont *font);

// function 'CGFontCopyVariationAxes'
struct __CFArray *CGFontCopyVariationAxes(struct CGFont *font);

// function 'CGFontCopyVariations'
struct __CFDictionary *CGFontCopyVariations(struct CGFont *font);

// function 'CGFontCreateCopyWithVariations'
struct CGFont *CGFontCreateCopyWithVariations(struct CGFont *font, struct __CFDictionary *variations);

// function 'CGFontCreatePostScriptEncoding'
struct __CFData *CGFontCreatePostScriptEncoding(struct CGFont *font, const unsigned short* encoding);

// function 'CGFontCreatePostScriptSubset'
struct __CFData *CGFontCreatePostScriptSubset(struct CGFont *font, struct __CFString *subsetName, int format, const unsigned short* glyphs, unsigned long count, const unsigned short* encoding);

// function 'CGFontCreateWithPlatformFont'
struct CGFont *CGFontCreateWithPlatformFont(unsigned long platformFontReference);

// function 'CGFontGetTypeID'
unsigned long CGFontGetTypeID(void);

// function 'CGFontRelease'
void CGFontRelease(struct CGFont *font);

// function 'CGFontRetain'
struct CGFont *CGFontRetain(struct CGFont *font);

// function 'CGFunctionGetTypeID'
unsigned long CGFunctionGetTypeID(void);

// function 'CGFunctionRelease'
void CGFunctionRelease(struct CGFunction *function);

// function 'CGFunctionRetain'
struct CGFunction *CGFunctionRetain(struct CGFunction *function);

// function 'CGGLContextCreate'
struct CGContext *CGGLContextCreate(int glContext, struct CGSize size, struct CGColorSpace *colorspace);

// function 'CGGLContextUpdateViewportSize'
void CGGLContextUpdateViewportSize(struct CGContext *c, struct CGSize size);

// function 'CGGetActiveDisplayList'
int CGGetActiveDisplayList(unsigned int maxDisplays, struct _CGDirectDisplayID **activeDspys, unsigned int *dspyCnt);

// function 'CGGetDisplayTransferByFormula'
int CGGetDisplayTransferByFormula(struct _CGDirectDisplayID *display, float *redMin, float *redMax, float *redGamma, float *greenMin, float *greenMax, float *greenGamma, float *blueMin, float *blueMax, float *blueGamma);

// function 'CGGetDisplayTransferByTable'
int CGGetDisplayTransferByTable(struct _CGDirectDisplayID *display, unsigned int capacity, float *redTable, float *greenTable, float *blueTable, unsigned int *sampleCount);

// function 'CGGetDisplaysWithOpenGLDisplayMask'
int CGGetDisplaysWithOpenGLDisplayMask(unsigned int mask, unsigned int maxDisplays, struct _CGDirectDisplayID **dspys, unsigned int *dspyCnt);

// function 'CGGetDisplaysWithPoint'
int CGGetDisplaysWithPoint(struct CGPoint point, unsigned int maxDisplays, struct _CGDirectDisplayID **dspys, unsigned int *dspyCnt);

// function 'CGGetDisplaysWithRect'
int CGGetDisplaysWithRect(struct CGRect rect, unsigned int maxDisplays, struct _CGDirectDisplayID **dspys, unsigned int *dspyCnt);

// function 'CGGetEventTapList'
int CGGetEventTapList(unsigned int maxNumberOfTaps, struct CGEventTapInformation *tapList, unsigned int *eventTapCount);

// function 'CGGetLastMouseDelta'
void CGGetLastMouseDelta(int *deltaX, int *deltaY);

// function 'CGGetOnlineDisplayList'
int CGGetOnlineDisplayList(unsigned int maxDisplays, struct _CGDirectDisplayID **onlineDspys, unsigned int *dspyCnt);

// function 'CGImageCreate'
struct CGImage *CGImageCreate(unsigned long width, unsigned long height, unsigned long bitsPerComponent, unsigned long bitsPerPixel, unsigned long bytesPerRow, struct CGColorSpace *colorspace, unsigned int bitmapInfo, struct CGDataProvider *provider, const float* decode, _Bool shouldInterpolate, int intent);

// function 'CGImageCreateCopy'
struct CGImage *CGImageCreateCopy(struct CGImage *image);

// function 'CGImageCreateCopyWithColorSpace'
struct CGImage *CGImageCreateCopyWithColorSpace(struct CGImage *image, struct CGColorSpace *colorspace);

// function 'CGImageCreateWithImageInRect'
struct CGImage *CGImageCreateWithImageInRect(struct CGImage *image, struct CGRect rect);

// function 'CGImageCreateWithJPEGDataProvider'
struct CGImage *CGImageCreateWithJPEGDataProvider(struct CGDataProvider *source, const float* decode, _Bool shouldInterpolate, int intent);

// function 'CGImageCreateWithMask'
struct CGImage *CGImageCreateWithMask(struct CGImage *image, struct CGImage *mask);

// function 'CGImageCreateWithMaskingColors'
struct CGImage *CGImageCreateWithMaskingColors(struct CGImage *image, const float* components);

// function 'CGImageCreateWithPNGDataProvider'
struct CGImage *CGImageCreateWithPNGDataProvider(struct CGDataProvider *source, const float* decode, _Bool shouldInterpolate, int intent);

// function 'CGImageGetAlphaInfo'
int CGImageGetAlphaInfo(struct CGImage *image);

// function 'CGImageGetBitmapInfo'
unsigned int CGImageGetBitmapInfo(struct CGImage *image);

// function 'CGImageGetBitsPerComponent'
unsigned long CGImageGetBitsPerComponent(struct CGImage *image);

// function 'CGImageGetBitsPerPixel'
unsigned long CGImageGetBitsPerPixel(struct CGImage *image);

// function 'CGImageGetBytesPerRow'
unsigned long CGImageGetBytesPerRow(struct CGImage *image);

// function 'CGImageGetColorSpace'
struct CGColorSpace *CGImageGetColorSpace(struct CGImage *image);

// function 'CGImageGetDataProvider'
struct CGDataProvider *CGImageGetDataProvider(struct CGImage *image);

// function 'CGImageGetDecode'
const float* CGImageGetDecode(struct CGImage *image);

// function 'CGImageGetHeight'
unsigned long CGImageGetHeight(struct CGImage *image);

// function 'CGImageGetRenderingIntent'
int CGImageGetRenderingIntent(struct CGImage *image);

// function 'CGImageGetShouldInterpolate'
_Bool CGImageGetShouldInterpolate(struct CGImage *image);

// function 'CGImageGetTypeID'
unsigned long CGImageGetTypeID(void);

// function 'CGImageGetWidth'
unsigned long CGImageGetWidth(struct CGImage *image);

// function 'CGImageIsMask'
_Bool CGImageIsMask(struct CGImage *image);

// function 'CGImageMaskCreate'
struct CGImage *CGImageMaskCreate(unsigned long width, unsigned long height, unsigned long bitsPerComponent, unsigned long bitsPerPixel, unsigned long bytesPerRow, struct CGDataProvider *provider, const float* decode, _Bool shouldInterpolate);

// function 'CGImageRelease'
void CGImageRelease(struct CGImage *image);

// function 'CGImageRetain'
struct CGImage *CGImageRetain(struct CGImage *image);

// function 'CGInhibitLocalEvents'
int CGInhibitLocalEvents(int doInhibit);

// function 'CGLayerCreateWithContext'
struct CGLayer *CGLayerCreateWithContext(struct CGContext *context, struct CGSize size, struct __CFDictionary *auxiliaryInfo);

// function 'CGLayerGetContext'
struct CGContext *CGLayerGetContext(struct CGLayer *layer);

// function 'CGLayerGetSize'
struct CGSize CGLayerGetSize(struct CGLayer *layer);

// function 'CGLayerGetTypeID'
unsigned long CGLayerGetTypeID(void);

// function 'CGLayerRelease'
void CGLayerRelease(struct CGLayer *layer);

// function 'CGLayerRetain'
struct CGLayer *CGLayerRetain(struct CGLayer *layer);

// function 'CGMainDisplayID'
struct _CGDirectDisplayID *CGMainDisplayID(void);

// function 'CGOpenGLDisplayMaskToDisplayID'
struct _CGDirectDisplayID *CGOpenGLDisplayMaskToDisplayID(unsigned int mask);

// function 'CGPDFArrayGetArray'
_Bool CGPDFArrayGetArray(struct CGPDFArray *array, unsigned long index, struct CGPDFArray **value);

// function 'CGPDFArrayGetBoolean'
_Bool CGPDFArrayGetBoolean(struct CGPDFArray *array, unsigned long index, CGPDFBoolean* value);

// function 'CGPDFArrayGetCount'
unsigned long CGPDFArrayGetCount(struct CGPDFArray *array);

// function 'CGPDFArrayGetDictionary'
_Bool CGPDFArrayGetDictionary(struct CGPDFArray *array, unsigned long index, struct CGPDFDictionary **value);

// function 'CGPDFArrayGetInteger'
_Bool CGPDFArrayGetInteger(struct CGPDFArray *array, unsigned long index, int *value);

// function 'CGPDFArrayGetName'
_Bool CGPDFArrayGetName(struct CGPDFArray *array, unsigned long index, const char** value);

// function 'CGPDFArrayGetNull'
_Bool CGPDFArrayGetNull(struct CGPDFArray *array, unsigned long index);

// function 'CGPDFArrayGetNumber'
_Bool CGPDFArrayGetNumber(struct CGPDFArray *array, unsigned long index, float *value);

// function 'CGPDFArrayGetStream'
_Bool CGPDFArrayGetStream(struct CGPDFArray *array, unsigned long index, struct CGPDFStream **value);

// function 'CGPDFArrayGetString'
_Bool CGPDFArrayGetString(struct CGPDFArray *array, unsigned long index, struct CGPDFString **value);

// function 'CGPDFContentStreamCreateWithPage'
struct CGPDFContentStream *CGPDFContentStreamCreateWithPage(struct CGPDFPage *page);

// function 'CGPDFContentStreamCreateWithStream'
struct CGPDFContentStream *CGPDFContentStreamCreateWithStream(struct CGPDFStream *stream, struct CGPDFDictionary *streamResources, struct CGPDFContentStream *parent);

// function 'CGPDFContentStreamGetStreams'
struct __CFArray *CGPDFContentStreamGetStreams(struct CGPDFContentStream *cs);

// function 'CGPDFContentStreamRelease'
void CGPDFContentStreamRelease(struct CGPDFContentStream *cs);

// function 'CGPDFContentStreamRetain'
struct CGPDFContentStream *CGPDFContentStreamRetain(struct CGPDFContentStream *cs);

// function 'CGPDFContextAddDestinationAtPoint'
void CGPDFContextAddDestinationAtPoint(struct CGContext *context, struct __CFString *name, struct CGPoint point);

// function 'CGPDFContextBeginPage'
void CGPDFContextBeginPage(struct CGContext *context, struct __CFDictionary *pageInfo);

// function 'CGPDFContextCreate'
struct CGContext *CGPDFContextCreate(struct CGDataConsumer *consumer, const struct CGRect* mediaBox, struct __CFDictionary *auxiliaryInfo);

// function 'CGPDFContextCreateWithURL'
struct CGContext *CGPDFContextCreateWithURL(struct __CFURL *url, const struct CGRect* mediaBox, struct __CFDictionary *auxiliaryInfo);

// function 'CGPDFContextEndPage'
void CGPDFContextEndPage(struct CGContext *context);

// function 'CGPDFContextSetDestinationForRect'
void CGPDFContextSetDestinationForRect(struct CGContext *context, struct __CFString *name, struct CGRect rect);

// function 'CGPDFContextSetURLForRect'
void CGPDFContextSetURLForRect(struct CGContext *context, struct __CFURL *url, struct CGRect rect);

// function 'CGPDFDictionaryGetArray'
_Bool CGPDFDictionaryGetArray(struct CGPDFDictionary *dict, const char* key, struct CGPDFArray **value);

// function 'CGPDFDictionaryGetBoolean'
_Bool CGPDFDictionaryGetBoolean(struct CGPDFDictionary *dict, const char* key, CGPDFBoolean* value);

// function 'CGPDFDictionaryGetCount'
unsigned long CGPDFDictionaryGetCount(struct CGPDFDictionary *dict);

// function 'CGPDFDictionaryGetDictionary'
_Bool CGPDFDictionaryGetDictionary(struct CGPDFDictionary *dict, const char* key, struct CGPDFDictionary **value);

// function 'CGPDFDictionaryGetInteger'
_Bool CGPDFDictionaryGetInteger(struct CGPDFDictionary *dict, const char* key, int *value);

// function 'CGPDFDictionaryGetName'
_Bool CGPDFDictionaryGetName(struct CGPDFDictionary *dict, const char* key, const char** value);

// function 'CGPDFDictionaryGetNumber'
_Bool CGPDFDictionaryGetNumber(struct CGPDFDictionary *dict, const char* key, float *value);

// function 'CGPDFDictionaryGetStream'
_Bool CGPDFDictionaryGetStream(struct CGPDFDictionary *dict, const char* key, struct CGPDFStream **value);

// function 'CGPDFDictionaryGetString'
_Bool CGPDFDictionaryGetString(struct CGPDFDictionary *dict, const char* key, struct CGPDFString **value);

// function 'CGPDFDocumentAllowsCopying'
_Bool CGPDFDocumentAllowsCopying(struct CGPDFDocument *document);

// function 'CGPDFDocumentAllowsPrinting'
_Bool CGPDFDocumentAllowsPrinting(struct CGPDFDocument *document);

// function 'CGPDFDocumentCreateWithProvider'
struct CGPDFDocument *CGPDFDocumentCreateWithProvider(struct CGDataProvider *provider);

// function 'CGPDFDocumentCreateWithURL'
struct CGPDFDocument *CGPDFDocumentCreateWithURL(struct __CFURL *url);

// function 'CGPDFDocumentGetArtBox'
struct CGRect CGPDFDocumentGetArtBox(struct CGPDFDocument *document, int page);

// function 'CGPDFDocumentGetBleedBox'
struct CGRect CGPDFDocumentGetBleedBox(struct CGPDFDocument *document, int page);

// function 'CGPDFDocumentGetCatalog'
struct CGPDFDictionary *CGPDFDocumentGetCatalog(struct CGPDFDocument *document);

// function 'CGPDFDocumentGetCropBox'
struct CGRect CGPDFDocumentGetCropBox(struct CGPDFDocument *document, int page);

// function 'CGPDFDocumentGetID'
struct CGPDFArray *CGPDFDocumentGetID(struct CGPDFDocument *document);

// function 'CGPDFDocumentGetInfo'
struct CGPDFDictionary *CGPDFDocumentGetInfo(struct CGPDFDocument *document);

// function 'CGPDFDocumentGetMediaBox'
struct CGRect CGPDFDocumentGetMediaBox(struct CGPDFDocument *document, int page);

// function 'CGPDFDocumentGetNumberOfPages'
unsigned long CGPDFDocumentGetNumberOfPages(struct CGPDFDocument *document);

// function 'CGPDFDocumentGetPage'
struct CGPDFPage *CGPDFDocumentGetPage(struct CGPDFDocument *document, unsigned long pageNumber);

// function 'CGPDFDocumentGetRotationAngle'
int CGPDFDocumentGetRotationAngle(struct CGPDFDocument *document, int page);

// function 'CGPDFDocumentGetTrimBox'
struct CGRect CGPDFDocumentGetTrimBox(struct CGPDFDocument *document, int page);

// function 'CGPDFDocumentGetTypeID'
unsigned long CGPDFDocumentGetTypeID(void);

// function 'CGPDFDocumentGetVersion'
void CGPDFDocumentGetVersion(struct CGPDFDocument *document, int *majorVersion, int *minorVersion);

// function 'CGPDFDocumentIsEncrypted'
_Bool CGPDFDocumentIsEncrypted(struct CGPDFDocument *document);

// function 'CGPDFDocumentIsUnlocked'
_Bool CGPDFDocumentIsUnlocked(struct CGPDFDocument *document);

// function 'CGPDFDocumentRelease'
void CGPDFDocumentRelease(struct CGPDFDocument *document);

// function 'CGPDFDocumentRetain'
struct CGPDFDocument *CGPDFDocumentRetain(struct CGPDFDocument *document);

// function 'CGPDFDocumentUnlockWithPassword'
_Bool CGPDFDocumentUnlockWithPassword(struct CGPDFDocument *document, const char* password);

// function 'CGPDFOperatorTableCreate'
struct CGPDFOperatorTable *CGPDFOperatorTableCreate(void);

// function 'CGPDFOperatorTableRelease'
void CGPDFOperatorTableRelease(struct CGPDFOperatorTable *table);

// function 'CGPDFOperatorTableRetain'
struct CGPDFOperatorTable *CGPDFOperatorTableRetain(struct CGPDFOperatorTable *table);

// function 'CGPDFPageGetBoxRect'
struct CGRect CGPDFPageGetBoxRect(struct CGPDFPage *page, int box);

// function 'CGPDFPageGetDictionary'
struct CGPDFDictionary *CGPDFPageGetDictionary(struct CGPDFPage *page);

// function 'CGPDFPageGetDocument'
struct CGPDFDocument *CGPDFPageGetDocument(struct CGPDFPage *page);

// function 'CGPDFPageGetDrawingTransform'
struct CGAffineTransform CGPDFPageGetDrawingTransform(struct CGPDFPage *page, int box, struct CGRect rect, int rotate, _Bool preserveAspectRatio);

// function 'CGPDFPageGetPageNumber'
unsigned long CGPDFPageGetPageNumber(struct CGPDFPage *page);

// function 'CGPDFPageGetRotationAngle'
int CGPDFPageGetRotationAngle(struct CGPDFPage *page);

// function 'CGPDFPageGetTypeID'
unsigned long CGPDFPageGetTypeID(void);

// function 'CGPDFPageRelease'
void CGPDFPageRelease(struct CGPDFPage *page);

// function 'CGPDFPageRetain'
struct CGPDFPage *CGPDFPageRetain(struct CGPDFPage *page);

// function 'CGPDFScannerCreate'
struct CGPDFScanner *CGPDFScannerCreate(struct CGPDFContentStream *cs, struct CGPDFOperatorTable *table, void *info);

// function 'CGPDFScannerGetContentStream'
struct CGPDFContentStream *CGPDFScannerGetContentStream(struct CGPDFScanner *scanner);

// function 'CGPDFScannerPopArray'
_Bool CGPDFScannerPopArray(struct CGPDFScanner *scanner, struct CGPDFArray **value);

// function 'CGPDFScannerPopBoolean'
_Bool CGPDFScannerPopBoolean(struct CGPDFScanner *scanner, CGPDFBoolean* value);

// function 'CGPDFScannerPopDictionary'
_Bool CGPDFScannerPopDictionary(struct CGPDFScanner *scanner, struct CGPDFDictionary **value);

// function 'CGPDFScannerPopInteger'
_Bool CGPDFScannerPopInteger(struct CGPDFScanner *scanner, int *value);

// function 'CGPDFScannerPopName'
_Bool CGPDFScannerPopName(struct CGPDFScanner *scanner, const char** value);

// function 'CGPDFScannerPopNumber'
_Bool CGPDFScannerPopNumber(struct CGPDFScanner *scanner, float *value);

// function 'CGPDFScannerPopStream'
_Bool CGPDFScannerPopStream(struct CGPDFScanner *scanner, struct CGPDFStream **value);

// function 'CGPDFScannerPopString'
_Bool CGPDFScannerPopString(struct CGPDFScanner *scanner, struct CGPDFString **value);

// function 'CGPDFScannerRelease'
void CGPDFScannerRelease(struct CGPDFScanner *scanner);

// function 'CGPDFScannerRetain'
struct CGPDFScanner *CGPDFScannerRetain(struct CGPDFScanner *scanner);

// function 'CGPDFScannerScan'
_Bool CGPDFScannerScan(struct CGPDFScanner *scanner);

// function 'CGPDFStreamCopyData'
struct __CFData *CGPDFStreamCopyData(struct CGPDFStream *stream, int *format);

// function 'CGPDFStreamGetDictionary'
struct CGPDFDictionary *CGPDFStreamGetDictionary(struct CGPDFStream *stream);

// function 'CGPDFStringCopyDate'
struct __CFDate *CGPDFStringCopyDate(struct CGPDFString *string);

// function 'CGPDFStringCopyTextString'
struct __CFString *CGPDFStringCopyTextString(struct CGPDFString *string);

// function 'CGPDFStringGetBytePtr'
const unsigned char* CGPDFStringGetBytePtr(struct CGPDFString *string);

// function 'CGPDFStringGetLength'
unsigned long CGPDFStringGetLength(struct CGPDFString *string);

// function 'CGPSConverterAbort'
_Bool CGPSConverterAbort(struct CGPSConverter *converter);

// function 'CGPSConverterConvert'
_Bool CGPSConverterConvert(struct CGPSConverter *converter, struct CGDataProvider *provider, struct CGDataConsumer *consumer, struct __CFDictionary *options);

// function 'CGPSConverterGetTypeID'
unsigned long CGPSConverterGetTypeID(void);

// function 'CGPSConverterIsConverting'
_Bool CGPSConverterIsConverting(struct CGPSConverter *converter);

// function 'CGPaletteCreateCopy'
struct _CGDirectPaletteRef *CGPaletteCreateCopy(struct _CGDirectPaletteRef *palette);

// function 'CGPaletteCreateDefaultColorPalette'
struct _CGDirectPaletteRef *CGPaletteCreateDefaultColorPalette(void);

// function 'CGPaletteCreateFromPaletteBlendedWithColor'
struct _CGDirectPaletteRef *CGPaletteCreateFromPaletteBlendedWithColor(struct _CGDirectPaletteRef *palette, float fraction, struct _CGDeviceColor color);

// function 'CGPaletteCreateWithByteSamples'
struct _CGDirectPaletteRef *CGPaletteCreateWithByteSamples(struct _CGDeviceByteColor *sampleTable, unsigned int sampleCount);

// function 'CGPaletteCreateWithCapacity'
struct _CGDirectPaletteRef *CGPaletteCreateWithCapacity(unsigned int capacity);

// function 'CGPaletteCreateWithDisplay'
struct _CGDirectPaletteRef *CGPaletteCreateWithDisplay(struct _CGDirectDisplayID *display);

// function 'CGPaletteCreateWithSamples'
struct _CGDirectPaletteRef *CGPaletteCreateWithSamples(struct _CGDeviceColor *sampleTable, unsigned int sampleCount);

// function 'CGPaletteGetColorAtIndex'
struct _CGDeviceColor CGPaletteGetColorAtIndex(struct _CGDirectPaletteRef *palette, unsigned int index);

// function 'CGPaletteGetIndexForColor'
unsigned int CGPaletteGetIndexForColor(struct _CGDirectPaletteRef *palette, struct _CGDeviceColor color);

// function 'CGPaletteGetNumberOfSamples'
unsigned int CGPaletteGetNumberOfSamples(struct _CGDirectPaletteRef *palette);

// function 'CGPaletteIsEqualToPalette'
Boolean CGPaletteIsEqualToPalette(struct _CGDirectPaletteRef *palette1, struct _CGDirectPaletteRef *palette2);

// function 'CGPaletteRelease'
void CGPaletteRelease(struct _CGDirectPaletteRef *palette);

// function 'CGPaletteSetColorAtIndex'
void CGPaletteSetColorAtIndex(struct _CGDirectPaletteRef *palette, struct _CGDeviceColor color, unsigned int index);

// function 'CGPathAddArc'
void CGPathAddArc(struct CGPath *path, const struct CGAffineTransform* m, float x, float y, float radius, float startAngle, float endAngle, _Bool clockwise);

// function 'CGPathAddArcToPoint'
void CGPathAddArcToPoint(struct CGPath *path, const struct CGAffineTransform* m, float x1, float y1, float x2, float y2, float radius);

// function 'CGPathAddCurveToPoint'
void CGPathAddCurveToPoint(struct CGPath *path, const struct CGAffineTransform* m, float cp1x, float cp1y, float cp2x, float cp2y, float x, float y);

// function 'CGPathAddEllipseInRect'
void CGPathAddEllipseInRect(struct CGPath *path, const struct CGAffineTransform* m, struct CGRect rect);

// function 'CGPathAddLineToPoint'
void CGPathAddLineToPoint(struct CGPath *path, const struct CGAffineTransform* m, float x, float y);

// function 'CGPathAddLines'
void CGPathAddLines(struct CGPath *path, const struct CGAffineTransform* m, const struct CGPoint* points, unsigned long count);

// function 'CGPathAddPath'
void CGPathAddPath(struct CGPath *path1, const struct CGAffineTransform* m, struct CGPath *path2);

// function 'CGPathAddQuadCurveToPoint'
void CGPathAddQuadCurveToPoint(struct CGPath *path, const struct CGAffineTransform* m, float cpx, float cpy, float x, float y);

// function 'CGPathAddRect'
void CGPathAddRect(struct CGPath *path, const struct CGAffineTransform* m, struct CGRect rect);

// function 'CGPathAddRects'
void CGPathAddRects(struct CGPath *path, const struct CGAffineTransform* m, const struct CGRect* rects, unsigned long count);

// function 'CGPathCloseSubpath'
void CGPathCloseSubpath(struct CGPath *path);

// function 'CGPathContainsPoint'
_Bool CGPathContainsPoint(struct CGPath *path, const struct CGAffineTransform* m, struct CGPoint point, _Bool eoFill);

// function 'CGPathCreateCopy'
struct CGPath *CGPathCreateCopy(struct CGPath *path);

// function 'CGPathCreateMutable'
struct CGPath *CGPathCreateMutable(void);

// function 'CGPathCreateMutableCopy'
struct CGPath *CGPathCreateMutableCopy(struct CGPath *path);

// function 'CGPathEqualToPath'
_Bool CGPathEqualToPath(struct CGPath *path1, struct CGPath *path2);

// function 'CGPathGetBoundingBox'
struct CGRect CGPathGetBoundingBox(struct CGPath *path);

// function 'CGPathGetCurrentPoint'
struct CGPoint CGPathGetCurrentPoint(struct CGPath *path);

// function 'CGPathGetTypeID'
unsigned long CGPathGetTypeID(void);

// function 'CGPathIsEmpty'
_Bool CGPathIsEmpty(struct CGPath *path);

// function 'CGPathIsRect'
_Bool CGPathIsRect(struct CGPath *path, struct CGRect *rect);

// function 'CGPathMoveToPoint'
void CGPathMoveToPoint(struct CGPath *path, const struct CGAffineTransform* m, float x, float y);

// function 'CGPathRelease'
void CGPathRelease(struct CGPath *path);

// function 'CGPathRetain'
struct CGPath *CGPathRetain(struct CGPath *path);

// function 'CGPatternGetTypeID'
unsigned long CGPatternGetTypeID(void);

// function 'CGPatternRelease'
void CGPatternRelease(struct CGPattern *pattern);

// function 'CGPatternRetain'
struct CGPattern *CGPatternRetain(struct CGPattern *pattern);

// function 'CGPointApplyAffineTransform'
struct CGPoint CGPointApplyAffineTransform(struct CGPoint point, struct CGAffineTransform t);

// function 'CGPointEqualToPoint'
int CGPointEqualToPoint(struct CGPoint point1, struct CGPoint point2);

// function 'CGPointMake'
struct CGPoint CGPointMake(float x, float y);

// function 'CGPostKeyboardEvent'
int CGPostKeyboardEvent(unsigned short keyChar, unsigned short virtualKey, int keyDown);

// function 'CGRectApplyAffineTransform'
struct CGRect CGRectApplyAffineTransform(struct CGRect rect, struct CGAffineTransform t);

// function 'CGRectContainsPoint'
int CGRectContainsPoint(struct CGRect rect, struct CGPoint point);

// function 'CGRectContainsRect'
int CGRectContainsRect(struct CGRect rect1, struct CGRect rect2);

// function 'CGRectDivide'
void CGRectDivide(struct CGRect rect, struct CGRect *slice, struct CGRect *remainder, float amount, int edge);

// function 'CGRectEqualToRect'
int CGRectEqualToRect(struct CGRect rect1, struct CGRect rect2);

// function 'CGRectGetHeight'
float CGRectGetHeight(struct CGRect rect);

// function 'CGRectGetMaxX'
float CGRectGetMaxX(struct CGRect rect);

// function 'CGRectGetMaxY'
float CGRectGetMaxY(struct CGRect rect);

// function 'CGRectGetMidX'
float CGRectGetMidX(struct CGRect rect);

// function 'CGRectGetMidY'
float CGRectGetMidY(struct CGRect rect);

// function 'CGRectGetMinX'
float CGRectGetMinX(struct CGRect rect);

// function 'CGRectGetMinY'
float CGRectGetMinY(struct CGRect rect);

// function 'CGRectGetWidth'
float CGRectGetWidth(struct CGRect rect);

// function 'CGRectInset'
struct CGRect CGRectInset(struct CGRect rect, float dx, float dy);

// function 'CGRectIntegral'
struct CGRect CGRectIntegral(struct CGRect rect);

// function 'CGRectIntersection'
struct CGRect CGRectIntersection(struct CGRect r1, struct CGRect r2);

// function 'CGRectIntersectsRect'
int CGRectIntersectsRect(struct CGRect rect1, struct CGRect rect2);

// function 'CGRectIsEmpty'
int CGRectIsEmpty(struct CGRect rect);

// function 'CGRectIsInfinite'
_Bool CGRectIsInfinite(struct CGRect rect);

// function 'CGRectIsNull'
int CGRectIsNull(struct CGRect rect);

// function 'CGRectMake'
struct CGRect CGRectMake(float x, float y, float width, float height);

// function 'CGRectOffset'
struct CGRect CGRectOffset(struct CGRect rect, float dx, float dy);

// function 'CGRectStandardize'
struct CGRect CGRectStandardize(struct CGRect rect);

// function 'CGRectUnion'
struct CGRect CGRectUnion(struct CGRect r1, struct CGRect r2);

// function 'CGReleaseAllDisplays'
int CGReleaseAllDisplays(void);

// function 'CGReleaseDisplayFadeReservation'
int CGReleaseDisplayFadeReservation(unsigned int myToken);

// function 'CGReleaseScreenRefreshRects'
void CGReleaseScreenRefreshRects(struct CGRect *rectArray);

// function 'CGRestorePermanentDisplayConfiguration'
void CGRestorePermanentDisplayConfiguration(void);

// function 'CGSessionCopyCurrentDictionary'
struct __CFDictionary *CGSessionCopyCurrentDictionary(void);

// function 'CGSetDisplayTransferByByteTable'
int CGSetDisplayTransferByByteTable(struct _CGDirectDisplayID *display, unsigned int tableSize, const CGByteValue* redTable, const CGByteValue* greenTable, const CGByteValue* blueTable);

// function 'CGSetDisplayTransferByFormula'
int CGSetDisplayTransferByFormula(struct _CGDirectDisplayID *display, float redMin, float redMax, float redGamma, float greenMin, float greenMax, float greenGamma, float blueMin, float blueMax, float blueGamma);

// function 'CGSetDisplayTransferByTable'
int CGSetDisplayTransferByTable(struct _CGDirectDisplayID *display, unsigned int tableSize, const float* redTable, const float* greenTable, const float* blueTable);

// function 'CGSetLocalEventsFilterDuringSuppressionState'
int CGSetLocalEventsFilterDuringSuppressionState(unsigned int filter, unsigned int state);

// function 'CGSetLocalEventsSuppressionInterval'
int CGSetLocalEventsSuppressionInterval(double seconds);

// function 'CGShadingCreateAxial'
struct CGShading *CGShadingCreateAxial(struct CGColorSpace *colorspace, struct CGPoint start, struct CGPoint end, struct CGFunction *function, _Bool extendStart, _Bool extendEnd);

// function 'CGShadingCreateRadial'
struct CGShading *CGShadingCreateRadial(struct CGColorSpace *colorspace, struct CGPoint start, float startRadius, struct CGPoint end, float endRadius, struct CGFunction *function, _Bool extendStart, _Bool extendEnd);

// function 'CGShadingGetTypeID'
unsigned long CGShadingGetTypeID(void);

// function 'CGShadingRelease'
void CGShadingRelease(struct CGShading *shading);

// function 'CGShadingRetain'
struct CGShading *CGShadingRetain(struct CGShading *shading);

// function 'CGShieldingWindowID'
void *CGShieldingWindowID(struct _CGDirectDisplayID *display);

// function 'CGShieldingWindowLevel'
int CGShieldingWindowLevel(void);

// function 'CGSizeApplyAffineTransform'
struct CGSize CGSizeApplyAffineTransform(struct CGSize size, struct CGAffineTransform t);

// function 'CGSizeEqualToSize'
int CGSizeEqualToSize(struct CGSize size1, struct CGSize size2);

// function 'CGSizeMake'
struct CGSize CGSizeMake(float width, float height);

// function 'CGWaitForScreenRefreshRects'
int CGWaitForScreenRefreshRects(struct CGRect **pRectArray, unsigned int *pCount);

// function 'CGWaitForScreenUpdateRects'
int CGWaitForScreenUpdateRects(unsigned int requestedOperations, unsigned int *currentOperation, struct CGRect **pRectArray, unsigned int *pCount, struct _CGScreenUpdateMoveDelta *pDelta);

// function 'CGWarpMouseCursorPosition'
int CGWarpMouseCursorPosition(struct CGPoint newCursorPosition);

// function 'CGWindowLevelForKey'
int CGWindowLevelForKey(int key);

// function 'CGWindowServerCFMachPort'
struct __CFMachPort *CGWindowServerCFMachPort(void);

// function '__CGAffineTransformMake'
struct CGAffineTransform __CGAffineTransformMake(float a, float b, float c, float d, float tx, float ty);

// function '__CGPointApplyAffineTransform'
struct CGPoint __CGPointApplyAffineTransform(struct CGPoint point, struct CGAffineTransform t);

// function '__CGSizeApplyAffineTransform'
struct CGSize __CGSizeApplyAffineTransform(struct CGSize size, struct CGAffineTransform t);


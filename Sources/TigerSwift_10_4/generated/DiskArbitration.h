// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// CoreFoundation type 'DAApprovalSessionRef'
typedef struct __DAApprovalSession *DAApprovalSessionRef;

// CoreFoundation type 'DADiskRef'
typedef struct __DADisk *DADiskRef;

// CoreFoundation type 'DADissenterRef'
typedef struct __DADissenter *DADissenterRef;

// CoreFoundation type 'DASessionRef'
typedef struct __DASession *DASessionRef;

// getter for constant 'kDADiskDescriptionBusNameKey'
struct __CFString *_get_kDADiskDescriptionBusNameKey(void);

// getter for constant 'kDADiskDescriptionBusPathKey'
struct __CFString *_get_kDADiskDescriptionBusPathKey(void);

// getter for constant 'kDADiskDescriptionDeviceGUIDKey'
struct __CFString *_get_kDADiskDescriptionDeviceGUIDKey(void);

// getter for constant 'kDADiskDescriptionDeviceInternalKey'
struct __CFString *_get_kDADiskDescriptionDeviceInternalKey(void);

// getter for constant 'kDADiskDescriptionDeviceModelKey'
struct __CFString *_get_kDADiskDescriptionDeviceModelKey(void);

// getter for constant 'kDADiskDescriptionDevicePathKey'
struct __CFString *_get_kDADiskDescriptionDevicePathKey(void);

// getter for constant 'kDADiskDescriptionDeviceProtocolKey'
struct __CFString *_get_kDADiskDescriptionDeviceProtocolKey(void);

// getter for constant 'kDADiskDescriptionDeviceRevisionKey'
struct __CFString *_get_kDADiskDescriptionDeviceRevisionKey(void);

// getter for constant 'kDADiskDescriptionDeviceUnitKey'
struct __CFString *_get_kDADiskDescriptionDeviceUnitKey(void);

// getter for constant 'kDADiskDescriptionDeviceVendorKey'
struct __CFString *_get_kDADiskDescriptionDeviceVendorKey(void);

// getter for constant 'kDADiskDescriptionMatchMediaUnformatted'
struct __CFDictionary *_get_kDADiskDescriptionMatchMediaUnformatted(void);

// setter for constant 'kDADiskDescriptionMatchMediaUnformatted'
void _set_kDADiskDescriptionMatchMediaUnformatted(struct __CFDictionary *value);

// getter for constant 'kDADiskDescriptionMatchMediaWhole'
struct __CFDictionary *_get_kDADiskDescriptionMatchMediaWhole(void);

// setter for constant 'kDADiskDescriptionMatchMediaWhole'
void _set_kDADiskDescriptionMatchMediaWhole(struct __CFDictionary *value);

// getter for constant 'kDADiskDescriptionMatchVolumeMountable'
struct __CFDictionary *_get_kDADiskDescriptionMatchVolumeMountable(void);

// setter for constant 'kDADiskDescriptionMatchVolumeMountable'
void _set_kDADiskDescriptionMatchVolumeMountable(struct __CFDictionary *value);

// getter for constant 'kDADiskDescriptionMatchVolumeUnrecognized'
struct __CFDictionary *_get_kDADiskDescriptionMatchVolumeUnrecognized(void);

// setter for constant 'kDADiskDescriptionMatchVolumeUnrecognized'
void _set_kDADiskDescriptionMatchVolumeUnrecognized(struct __CFDictionary *value);

// getter for constant 'kDADiskDescriptionMediaBSDMajorKey'
struct __CFString *_get_kDADiskDescriptionMediaBSDMajorKey(void);

// getter for constant 'kDADiskDescriptionMediaBSDMinorKey'
struct __CFString *_get_kDADiskDescriptionMediaBSDMinorKey(void);

// getter for constant 'kDADiskDescriptionMediaBSDNameKey'
struct __CFString *_get_kDADiskDescriptionMediaBSDNameKey(void);

// getter for constant 'kDADiskDescriptionMediaBSDUnitKey'
struct __CFString *_get_kDADiskDescriptionMediaBSDUnitKey(void);

// getter for constant 'kDADiskDescriptionMediaBlockSizeKey'
struct __CFString *_get_kDADiskDescriptionMediaBlockSizeKey(void);

// getter for constant 'kDADiskDescriptionMediaContentKey'
struct __CFString *_get_kDADiskDescriptionMediaContentKey(void);

// getter for constant 'kDADiskDescriptionMediaEjectableKey'
struct __CFString *_get_kDADiskDescriptionMediaEjectableKey(void);

// getter for constant 'kDADiskDescriptionMediaIconKey'
struct __CFString *_get_kDADiskDescriptionMediaIconKey(void);

// getter for constant 'kDADiskDescriptionMediaKindKey'
struct __CFString *_get_kDADiskDescriptionMediaKindKey(void);

// getter for constant 'kDADiskDescriptionMediaLeafKey'
struct __CFString *_get_kDADiskDescriptionMediaLeafKey(void);

// getter for constant 'kDADiskDescriptionMediaNameKey'
struct __CFString *_get_kDADiskDescriptionMediaNameKey(void);

// getter for constant 'kDADiskDescriptionMediaPathKey'
struct __CFString *_get_kDADiskDescriptionMediaPathKey(void);

// getter for constant 'kDADiskDescriptionMediaRemovableKey'
struct __CFString *_get_kDADiskDescriptionMediaRemovableKey(void);

// getter for constant 'kDADiskDescriptionMediaSizeKey'
struct __CFString *_get_kDADiskDescriptionMediaSizeKey(void);

// getter for constant 'kDADiskDescriptionMediaTypeKey'
struct __CFString *_get_kDADiskDescriptionMediaTypeKey(void);

// getter for constant 'kDADiskDescriptionMediaWholeKey'
struct __CFString *_get_kDADiskDescriptionMediaWholeKey(void);

// getter for constant 'kDADiskDescriptionMediaWritableKey'
struct __CFString *_get_kDADiskDescriptionMediaWritableKey(void);

// getter for constant 'kDADiskDescriptionVolumeKindKey'
struct __CFString *_get_kDADiskDescriptionVolumeKindKey(void);

// getter for constant 'kDADiskDescriptionVolumeMountableKey'
struct __CFString *_get_kDADiskDescriptionVolumeMountableKey(void);

// getter for constant 'kDADiskDescriptionVolumeNameKey'
struct __CFString *_get_kDADiskDescriptionVolumeNameKey(void);

// getter for constant 'kDADiskDescriptionVolumeNetworkKey'
struct __CFString *_get_kDADiskDescriptionVolumeNetworkKey(void);

// getter for constant 'kDADiskDescriptionVolumePathKey'
struct __CFString *_get_kDADiskDescriptionVolumePathKey(void);

// getter for constant 'kDADiskDescriptionVolumeUUIDKey'
struct __CFString *_get_kDADiskDescriptionVolumeUUIDKey(void);

// getter for constant 'kDADiskDescriptionWatchVolumeName'
struct __CFArray *_get_kDADiskDescriptionWatchVolumeName(void);

// setter for constant 'kDADiskDescriptionWatchVolumeName'
void _set_kDADiskDescriptionWatchVolumeName(struct __CFArray *value);

// getter for constant 'kDADiskDescriptionWatchVolumePath'
struct __CFArray *_get_kDADiskDescriptionWatchVolumePath(void);

// setter for constant 'kDADiskDescriptionWatchVolumePath'
void _set_kDADiskDescriptionWatchVolumePath(struct __CFArray *value);

enum { err_local_diskarbitration = 14286848 };

enum { kDADiskClaimOptionDefault = 0 };

enum { kDADiskEjectOptionDefault = 0 };

enum { kDADiskMountOptionDefault = 0 };

enum { kDADiskMountOptionWhole = 1 };

enum { kDADiskOptionDefault = 0 };

enum { kDADiskOptionEjectUponLogout = 1 };

enum { kDADiskOptionMountAutomatic = 16 };

enum { kDADiskOptionMountAutomaticNoDefer = 32 };

enum { kDADiskOptionPrivate = 256 };

enum { kDADiskRenameOptionDefault = 0 };

enum { kDADiskUnmountOptionDefault = 0 };

enum { kDADiskUnmountOptionForce = 524288 };

enum { kDADiskUnmountOptionWhole = 1 };

enum { kDAReturnBadArgument = -119930877 };

enum { kDAReturnBusy = -119930878 };

enum { kDAReturnError = -119930879 };

enum { kDAReturnExclusiveAccess = -119930876 };

enum { kDAReturnNoResources = -119930875 };

enum { kDAReturnNotFound = -119930874 };

enum { kDAReturnNotMounted = -119930873 };

enum { kDAReturnNotPermitted = -119930872 };

enum { kDAReturnNotPrivileged = -119930871 };

enum { kDAReturnNotReady = -119930870 };

enum { kDAReturnNotWritable = -119930869 };

enum { kDAReturnSuccess = 0 };

enum { kDAReturnUnsupported = -119930868 };

// function 'DAApprovalSessionCreate'
struct __DAApprovalSession *DAApprovalSessionCreate(struct __CFAllocator *allocator);

// function 'DAApprovalSessionGetTypeID'
unsigned long DAApprovalSessionGetTypeID(void);

// function 'DAApprovalSessionScheduleWithRunLoop'
void DAApprovalSessionScheduleWithRunLoop(struct __DAApprovalSession *session, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'DAApprovalSessionUnscheduleFromRunLoop'
void DAApprovalSessionUnscheduleFromRunLoop(struct __DAApprovalSession *session, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'DADiskCopyDescription'
struct __CFDictionary *DADiskCopyDescription(struct __DADisk *disk);

// function 'DADiskCopyIOMedia'
unsigned int DADiskCopyIOMedia(struct __DADisk *disk);

// function 'DADiskCopyWholeDisk'
struct __DADisk *DADiskCopyWholeDisk(struct __DADisk *disk);

// function 'DADiskCreateFromBSDName'
struct __DADisk *DADiskCreateFromBSDName(struct __CFAllocator *allocator, struct __DASession *session, const char* name);

// function 'DADiskCreateFromIOMedia'
struct __DADisk *DADiskCreateFromIOMedia(struct __CFAllocator *allocator, struct __DASession *session, unsigned int media);

// function 'DADiskGetBSDName'
const char* DADiskGetBSDName(struct __DADisk *disk);

// function 'DADiskGetOptions'
unsigned long DADiskGetOptions(struct __DADisk *disk);

// function 'DADiskGetTypeID'
unsigned long DADiskGetTypeID(void);

// function 'DADiskIsClaimed'
Boolean DADiskIsClaimed(struct __DADisk *disk);

// function 'DADiskSetOptions'
int DADiskSetOptions(struct __DADisk *disk, unsigned long options, Boolean value);

// function 'DADiskUnclaim'
void DADiskUnclaim(struct __DADisk *disk);

// function 'DADissenterCreate'
struct __DADissenter *DADissenterCreate(struct __CFAllocator *allocator, int status, struct __CFString *string);

// function 'DADissenterGetStatus'
int DADissenterGetStatus(struct __DADissenter *dissenter);

// function 'DADissenterGetStatusString'
struct __CFString *DADissenterGetStatusString(struct __DADissenter *dissenter);

// function 'DASessionCreate'
struct __DASession *DASessionCreate(struct __CFAllocator *allocator);

// function 'DASessionGetTypeID'
unsigned long DASessionGetTypeID(void);

// function 'DASessionScheduleWithRunLoop'
void DASessionScheduleWithRunLoop(struct __DASession *session, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'DASessionUnscheduleFromRunLoop'
void DASessionUnscheduleFromRunLoop(struct __DASession *session, struct __CFRunLoop *runLoop, struct __CFString *runLoopMode);

// function 'DAUnregisterApprovalCallback'
void DAUnregisterApprovalCallback(struct __DAApprovalSession *session, void *callback, void *context);

// function 'DAUnregisterCallback'
void DAUnregisterCallback(struct __DASession *session, void *callback, void *context);


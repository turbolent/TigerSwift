// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// class 'NSObject'
typedef struct objc_object NSObject;

// class 'PDFAnnotation'
typedef struct objc_object PDFAnnotation;

// class 'PDFAnnotationButtonWidget'
typedef struct objc_object PDFAnnotationButtonWidget;

// class 'PDFAnnotationCircle'
typedef struct objc_object PDFAnnotationCircle;

// class 'PDFAnnotationFreeText'
typedef struct objc_object PDFAnnotationFreeText;

// class 'PDFAnnotationInk'
typedef struct objc_object PDFAnnotationInk;

// class 'PDFAnnotationLine'
typedef struct objc_object PDFAnnotationLine;

// class 'PDFAnnotationLink'
typedef struct objc_object PDFAnnotationLink;

// class 'PDFAnnotationMarkup'
typedef struct objc_object PDFAnnotationMarkup;

// class 'PDFAnnotationSquare'
typedef struct objc_object PDFAnnotationSquare;

// class 'PDFAnnotationText'
typedef struct objc_object PDFAnnotationText;

// class 'PDFAnnotationTextWidget'
typedef struct objc_object PDFAnnotationTextWidget;

// class 'PDFBorder'
typedef struct objc_object PDFBorder;

// class 'PDFDestination'
typedef struct objc_object PDFDestination;

// class 'PDFDocument'
typedef struct objc_object PDFDocument;

// class 'PDFOutline'
typedef struct objc_object PDFOutline;

// class 'PDFPage'
typedef struct objc_object PDFPage;

// class 'PDFSelection'
typedef struct objc_object PDFSelection;

// class 'PDFView'
typedef struct objc_object PDFView;

// getter for constant 'PDFDocumentAuthorAttribute'
id _get_PDFDocumentAuthorAttribute(void);

// setter for constant 'PDFDocumentAuthorAttribute'
void _set_PDFDocumentAuthorAttribute(id value);

// getter for constant 'PDFDocumentCreationDateAttribute'
id _get_PDFDocumentCreationDateAttribute(void);

// setter for constant 'PDFDocumentCreationDateAttribute'
void _set_PDFDocumentCreationDateAttribute(id value);

// getter for constant 'PDFDocumentCreatorAttribute'
id _get_PDFDocumentCreatorAttribute(void);

// setter for constant 'PDFDocumentCreatorAttribute'
void _set_PDFDocumentCreatorAttribute(id value);

// getter for constant 'PDFDocumentDidBeginFindNotification'
id _get_PDFDocumentDidBeginFindNotification(void);

// setter for constant 'PDFDocumentDidBeginFindNotification'
void _set_PDFDocumentDidBeginFindNotification(id value);

// getter for constant 'PDFDocumentDidBeginPageFindNotification'
id _get_PDFDocumentDidBeginPageFindNotification(void);

// setter for constant 'PDFDocumentDidBeginPageFindNotification'
void _set_PDFDocumentDidBeginPageFindNotification(id value);

// getter for constant 'PDFDocumentDidEndFindNotification'
id _get_PDFDocumentDidEndFindNotification(void);

// setter for constant 'PDFDocumentDidEndFindNotification'
void _set_PDFDocumentDidEndFindNotification(id value);

// getter for constant 'PDFDocumentDidEndPageFindNotification'
id _get_PDFDocumentDidEndPageFindNotification(void);

// setter for constant 'PDFDocumentDidEndPageFindNotification'
void _set_PDFDocumentDidEndPageFindNotification(id value);

// getter for constant 'PDFDocumentDidFindMatchNotification'
id _get_PDFDocumentDidFindMatchNotification(void);

// setter for constant 'PDFDocumentDidFindMatchNotification'
void _set_PDFDocumentDidFindMatchNotification(id value);

// getter for constant 'PDFDocumentDidUnlockNotification'
id _get_PDFDocumentDidUnlockNotification(void);

// setter for constant 'PDFDocumentDidUnlockNotification'
void _set_PDFDocumentDidUnlockNotification(id value);

// getter for constant 'PDFDocumentKeywordsAttribute'
id _get_PDFDocumentKeywordsAttribute(void);

// setter for constant 'PDFDocumentKeywordsAttribute'
void _set_PDFDocumentKeywordsAttribute(id value);

// getter for constant 'PDFDocumentModificationDateAttribute'
id _get_PDFDocumentModificationDateAttribute(void);

// setter for constant 'PDFDocumentModificationDateAttribute'
void _set_PDFDocumentModificationDateAttribute(id value);

// getter for constant 'PDFDocumentProducerAttribute'
id _get_PDFDocumentProducerAttribute(void);

// setter for constant 'PDFDocumentProducerAttribute'
void _set_PDFDocumentProducerAttribute(id value);

// getter for constant 'PDFDocumentSubjectAttribute'
id _get_PDFDocumentSubjectAttribute(void);

// setter for constant 'PDFDocumentSubjectAttribute'
void _set_PDFDocumentSubjectAttribute(id value);

// getter for constant 'PDFDocumentTitleAttribute'
id _get_PDFDocumentTitleAttribute(void);

// setter for constant 'PDFDocumentTitleAttribute'
void _set_PDFDocumentTitleAttribute(id value);

// getter for constant 'PDFViewAnnotationHitNotification'
id _get_PDFViewAnnotationHitNotification(void);

// setter for constant 'PDFViewAnnotationHitNotification'
void _set_PDFViewAnnotationHitNotification(id value);

// getter for constant 'PDFViewChangedHistoryNotification'
id _get_PDFViewChangedHistoryNotification(void);

// setter for constant 'PDFViewChangedHistoryNotification'
void _set_PDFViewChangedHistoryNotification(id value);

// getter for constant 'PDFViewCopyPermissionNotification'
id _get_PDFViewCopyPermissionNotification(void);

// setter for constant 'PDFViewCopyPermissionNotification'
void _set_PDFViewCopyPermissionNotification(id value);

// getter for constant 'PDFViewDocumentChangedNotification'
id _get_PDFViewDocumentChangedNotification(void);

// setter for constant 'PDFViewDocumentChangedNotification'
void _set_PDFViewDocumentChangedNotification(id value);

// getter for constant 'PDFViewPageChangedNotification'
id _get_PDFViewPageChangedNotification(void);

// setter for constant 'PDFViewPageChangedNotification'
void _set_PDFViewPageChangedNotification(id value);

// getter for constant 'PDFViewPrintPermissionNotification'
id _get_PDFViewPrintPermissionNotification(void);

// setter for constant 'PDFViewPrintPermissionNotification'
void _set_PDFViewPrintPermissionNotification(id value);

// getter for constant 'PDFViewScaleChangedNotification'
id _get_PDFViewScaleChangedNotification(void);

// setter for constant 'PDFViewScaleChangedNotification'
void _set_PDFViewScaleChangedNotification(id value);

enum { kPDFAnnotationArea = 4 };

enum { kPDFBorderStyleBeveled = 2 };

enum { kPDFBorderStyleDashed = 1 };

enum { kPDFBorderStyleInset = 3 };

enum { kPDFBorderStyleSolid = 0 };

enum { kPDFBorderStyleUnderline = 4 };

enum { kPDFControlArea = 16 };

enum { kPDFDisplayBoxArtBox = 4 };

enum { kPDFDisplayBoxBleedBox = 2 };

enum { kPDFDisplayBoxCropBox = 1 };

enum { kPDFDisplayBoxMediaBox = 0 };

enum { kPDFDisplayBoxTrimBox = 3 };

enum { kPDFDisplaySinglePage = 0 };

enum { kPDFDisplaySinglePageContinuous = 1 };

enum { kPDFDisplayTwoUp = 2 };

enum { kPDFDisplayTwoUpContinuous = 3 };

enum { kPDFLineStyleCircle = 2 };

enum { kPDFLineStyleClosedArrow = 5 };

enum { kPDFLineStyleDiamond = 3 };

enum { kPDFLineStyleNone = 0 };

enum { kPDFLineStyleOpenArrow = 4 };

enum { kPDFLineStyleSquare = 1 };

enum { kPDFLinkArea = 8 };

enum { kPDFMarkupTypeHighlight = 0 };

enum { kPDFMarkupTypeStrikeOut = 1 };

enum { kPDFMarkupTypeUnderline = 2 };

enum { kPDFNoArea = 0 };

enum { kPDFPageArea = 1 };

enum { kPDFPopupArea = 64 };

enum { kPDFTextAnnotationIconComment = 0 };

enum { kPDFTextAnnotationIconHelp = 3 };

enum { kPDFTextAnnotationIconInsert = 6 };

enum { kPDFTextAnnotationIconKey = 1 };

enum { kPDFTextAnnotationIconNewParagraph = 4 };

enum { kPDFTextAnnotationIconNote = 2 };

enum { kPDFTextAnnotationIconParagraph = 5 };

enum { kPDFTextArea = 2 };

enum { kPDFTextFieldArea = 32 };

enum { kPDFWidgetCheckBoxControl = 2 };

enum { kPDFWidgetPushButtonControl = 0 };

enum { kPDFWidgetRadioButtonControl = 1 };

enum { kPDFWidgetUnknownControl = -1 };

// method '-[NSObject PDFViewWillChangeScaleFactor:toScale:]'
float _IM_NSObject_PDFViewWillChangeScaleFactor_CtoScale_C(NSObject *_self, PDFView* sender, float scale);

// method '-[NSObject PDFViewWillClickOnLink:withURL:]'
void _IM_NSObject_PDFViewWillClickOnLink_CwithURL_C(NSObject *_self, PDFView* sender, id url);

// method '-[NSObject didMatchString:]'
void _IM_NSObject_didMatchString_C(NSObject *_self, PDFSelection* instance);

// method '-[NSObject documentDidBeginDocumentFind:]'
void _IM_NSObject_documentDidBeginDocumentFind_C(NSObject *_self, id notification);

// method '-[NSObject documentDidBeginPageFind:]'
void _IM_NSObject_documentDidBeginPageFind_C(NSObject *_self, id notification);

// method '-[NSObject documentDidEndDocumentFind:]'
void _IM_NSObject_documentDidEndDocumentFind_C(NSObject *_self, id notification);

// method '-[NSObject documentDidEndPageFind:]'
void _IM_NSObject_documentDidEndPageFind_C(NSObject *_self, id notification);

// method '-[NSObject documentDidFindMatch:]'
void _IM_NSObject_documentDidFindMatch_C(NSObject *_self, id notification);

// method '-[NSObject documentDidUnlock:]'
void _IM_NSObject_documentDidUnlock_C(NSObject *_self, id notification);

// method '-[PDFAnnotation border]'
PDFBorder* _IM_PDFAnnotation_border(PDFAnnotation *_self);

// method '-[PDFAnnotation bounds]'
struct _NSRect _IM_PDFAnnotation_bounds(PDFAnnotation *_self);

// method '-[PDFAnnotation color]'
id _IM_PDFAnnotation_color(PDFAnnotation *_self);

// method '-[PDFAnnotation contents]'
id _IM_PDFAnnotation_contents(PDFAnnotation *_self);

// method '-[PDFAnnotation drawWithBox:]'
void _IM_PDFAnnotation_drawWithBox_C(PDFAnnotation *_self, int box);

// method '-[PDFAnnotation hasAppearanceStream]'
BOOL _IM_PDFAnnotation_hasAppearanceStream(PDFAnnotation *_self);

// method '-[PDFAnnotation initWithBounds:]'
PDFAnnotation *_IM_PDFAnnotation_initWithBounds_C(PDFAnnotation *_self, struct _NSRect bounds);

// method '-[PDFAnnotation page]'
PDFPage* _IM_PDFAnnotation_page(PDFAnnotation *_self);

// method '-[PDFAnnotation setBorder:]'
void _IM_PDFAnnotation_setBorder_C(PDFAnnotation *_self, PDFBorder* border);

// method '-[PDFAnnotation setBounds:]'
void _IM_PDFAnnotation_setBounds_C(PDFAnnotation *_self, struct _NSRect bounds);

// method '-[PDFAnnotation setColor:]'
void _IM_PDFAnnotation_setColor_C(PDFAnnotation *_self, id color);

// method '-[PDFAnnotation setContents:]'
void _IM_PDFAnnotation_setContents_C(PDFAnnotation *_self, id contents);

// method '-[PDFAnnotation setShouldDisplay:]'
void _IM_PDFAnnotation_setShouldDisplay_C(PDFAnnotation *_self, BOOL display);

// method '-[PDFAnnotation setShouldPrint:]'
void _IM_PDFAnnotation_setShouldPrint_C(PDFAnnotation *_self, BOOL print);

// method '-[PDFAnnotation shouldDisplay]'
BOOL _IM_PDFAnnotation_shouldDisplay(PDFAnnotation *_self);

// method '-[PDFAnnotation shouldPrint]'
BOOL _IM_PDFAnnotation_shouldPrint(PDFAnnotation *_self);

// method '-[PDFAnnotation toolTip]'
id _IM_PDFAnnotation_toolTip(PDFAnnotation *_self);

// method '-[PDFAnnotation type]'
id _IM_PDFAnnotation_type(PDFAnnotation *_self);

// method '-[PDFAnnotationButtonWidget backgroundColor]'
id _IM_PDFAnnotationButtonWidget_backgroundColor(PDFAnnotationButtonWidget *_self);

// method '-[PDFAnnotationButtonWidget controlType]'
int _IM_PDFAnnotationButtonWidget_controlType(PDFAnnotationButtonWidget *_self);

// method '-[PDFAnnotationButtonWidget parentID]'
unsigned int _IM_PDFAnnotationButtonWidget_parentID(PDFAnnotationButtonWidget *_self);

// method '-[PDFAnnotationButtonWidget setBackgroundColor:]'
void _IM_PDFAnnotationButtonWidget_setBackgroundColor_C(PDFAnnotationButtonWidget *_self, id color);

// method '-[PDFAnnotationButtonWidget setHighlighted:]'
void _IM_PDFAnnotationButtonWidget_setHighlighted_C(PDFAnnotationButtonWidget *_self, BOOL flag);

// method '-[PDFAnnotationButtonWidget setState:]'
void _IM_PDFAnnotationButtonWidget_setState_C(PDFAnnotationButtonWidget *_self, int value);

// method '-[PDFAnnotationButtonWidget state]'
int _IM_PDFAnnotationButtonWidget_state(PDFAnnotationButtonWidget *_self);

// method '-[PDFAnnotationCircle interiorColor]'
id _IM_PDFAnnotationCircle_interiorColor(PDFAnnotationCircle *_self);

// method '-[PDFAnnotationCircle setInteriorColor:]'
void _IM_PDFAnnotationCircle_setInteriorColor_C(PDFAnnotationCircle *_self, id color);

// method '-[PDFAnnotationFreeText alignment]'
int _IM_PDFAnnotationFreeText_alignment(PDFAnnotationFreeText *_self);

// method '-[PDFAnnotationFreeText font]'
id _IM_PDFAnnotationFreeText_font(PDFAnnotationFreeText *_self);

// method '-[PDFAnnotationFreeText setAlignment:]'
void _IM_PDFAnnotationFreeText_setAlignment_C(PDFAnnotationFreeText *_self, int alignment);

// method '-[PDFAnnotationFreeText setFont:]'
void _IM_PDFAnnotationFreeText_setFont_C(PDFAnnotationFreeText *_self, id font);

// method '-[PDFAnnotationInk addBezierPath:]'
void _IM_PDFAnnotationInk_addBezierPath_C(PDFAnnotationInk *_self, id path);

// method '-[PDFAnnotationInk paths]'
id _IM_PDFAnnotationInk_paths(PDFAnnotationInk *_self);

// method '-[PDFAnnotationInk removeBezierPath:]'
void _IM_PDFAnnotationInk_removeBezierPath_C(PDFAnnotationInk *_self, id path);

// method '-[PDFAnnotationLine endLineStyle]'
int _IM_PDFAnnotationLine_endLineStyle(PDFAnnotationLine *_self);

// method '-[PDFAnnotationLine endPoint]'
struct _NSPoint _IM_PDFAnnotationLine_endPoint(PDFAnnotationLine *_self);

// method '-[PDFAnnotationLine setEndLineStyle:]'
void _IM_PDFAnnotationLine_setEndLineStyle_C(PDFAnnotationLine *_self, int style);

// method '-[PDFAnnotationLine setEndPoint:]'
void _IM_PDFAnnotationLine_setEndPoint_C(PDFAnnotationLine *_self, struct _NSPoint point);

// method '-[PDFAnnotationLine setStartLineStyle:]'
void _IM_PDFAnnotationLine_setStartLineStyle_C(PDFAnnotationLine *_self, int style);

// method '-[PDFAnnotationLine setStartPoint:]'
void _IM_PDFAnnotationLine_setStartPoint_C(PDFAnnotationLine *_self, struct _NSPoint point);

// method '-[PDFAnnotationLine startLineStyle]'
int _IM_PDFAnnotationLine_startLineStyle(PDFAnnotationLine *_self);

// method '-[PDFAnnotationLine startPoint]'
struct _NSPoint _IM_PDFAnnotationLine_startPoint(PDFAnnotationLine *_self);

// method '-[PDFAnnotationLink URL]'
id _IM_PDFAnnotationLink_URL(PDFAnnotationLink *_self);

// method '-[PDFAnnotationLink destination]'
PDFDestination* _IM_PDFAnnotationLink_destination(PDFAnnotationLink *_self);

// method '-[PDFAnnotationLink setDestination:]'
void _IM_PDFAnnotationLink_setDestination_C(PDFAnnotationLink *_self, PDFDestination* destination);

// method '-[PDFAnnotationLink setHighlighted:]'
void _IM_PDFAnnotationLink_setHighlighted_C(PDFAnnotationLink *_self, BOOL flag);

// method '-[PDFAnnotationLink setURL:]'
void _IM_PDFAnnotationLink_setURL_C(PDFAnnotationLink *_self, id url);

// method '-[PDFAnnotationMarkup markupType]'
int _IM_PDFAnnotationMarkup_markupType(PDFAnnotationMarkup *_self);

// method '-[PDFAnnotationMarkup quadrilateralPoints]'
id _IM_PDFAnnotationMarkup_quadrilateralPoints(PDFAnnotationMarkup *_self);

// method '-[PDFAnnotationMarkup setMarkupType:]'
void _IM_PDFAnnotationMarkup_setMarkupType_C(PDFAnnotationMarkup *_self, int type);

// method '-[PDFAnnotationMarkup setQuadrilateralPoints:]'
void _IM_PDFAnnotationMarkup_setQuadrilateralPoints_C(PDFAnnotationMarkup *_self, id points);

// method '-[PDFAnnotationSquare interiorColor]'
id _IM_PDFAnnotationSquare_interiorColor(PDFAnnotationSquare *_self);

// method '-[PDFAnnotationSquare setInteriorColor:]'
void _IM_PDFAnnotationSquare_setInteriorColor_C(PDFAnnotationSquare *_self, id color);

// method '-[PDFAnnotationText iconType]'
int _IM_PDFAnnotationText_iconType(PDFAnnotationText *_self);

// method '-[PDFAnnotationText setIconType:]'
void _IM_PDFAnnotationText_setIconType_C(PDFAnnotationText *_self, int type);

// method '-[PDFAnnotationText setWindowIsOpen:]'
void _IM_PDFAnnotationText_setWindowIsOpen_C(PDFAnnotationText *_self, BOOL isOpen);

// method '-[PDFAnnotationText windowIsOpen]'
BOOL _IM_PDFAnnotationText_windowIsOpen(PDFAnnotationText *_self);

// method '-[PDFAnnotationTextWidget alignment]'
int _IM_PDFAnnotationTextWidget_alignment(PDFAnnotationTextWidget *_self);

// method '-[PDFAnnotationTextWidget font]'
id _IM_PDFAnnotationTextWidget_font(PDFAnnotationTextWidget *_self);

// method '-[PDFAnnotationTextWidget setAlignment:]'
void _IM_PDFAnnotationTextWidget_setAlignment_C(PDFAnnotationTextWidget *_self, int alignment);

// method '-[PDFAnnotationTextWidget setFont:]'
void _IM_PDFAnnotationTextWidget_setFont_C(PDFAnnotationTextWidget *_self, id font);

// method '-[PDFAnnotationTextWidget setStringValue:]'
void _IM_PDFAnnotationTextWidget_setStringValue_C(PDFAnnotationTextWidget *_self, id value);

// method '-[PDFAnnotationTextWidget stringValue]'
id _IM_PDFAnnotationTextWidget_stringValue(PDFAnnotationTextWidget *_self);

// method '-[PDFBorder dashPattern]'
id _IM_PDFBorder_dashPattern(PDFBorder *_self);

// method '-[PDFBorder drawInRect:]'
void _IM_PDFBorder_drawInRect_C(PDFBorder *_self, struct _NSRect rect);

// method '-[PDFBorder horizontalCornerRadius]'
float _IM_PDFBorder_horizontalCornerRadius(PDFBorder *_self);

// method '-[PDFBorder lineWidth]'
float _IM_PDFBorder_lineWidth(PDFBorder *_self);

// method '-[PDFBorder setDashPattern:]'
void _IM_PDFBorder_setDashPattern_C(PDFBorder *_self, id pattern);

// method '-[PDFBorder setHorizontalCornerRadius:]'
void _IM_PDFBorder_setHorizontalCornerRadius_C(PDFBorder *_self, float radius);

// method '-[PDFBorder setLineWidth:]'
void _IM_PDFBorder_setLineWidth_C(PDFBorder *_self, float width);

// method '-[PDFBorder setStyle:]'
void _IM_PDFBorder_setStyle_C(PDFBorder *_self, int style);

// method '-[PDFBorder setVerticalCornerRadius:]'
void _IM_PDFBorder_setVerticalCornerRadius_C(PDFBorder *_self, float radius);

// method '-[PDFBorder style]'
int _IM_PDFBorder_style(PDFBorder *_self);

// method '-[PDFBorder verticalCornerRadius]'
float _IM_PDFBorder_verticalCornerRadius(PDFBorder *_self);

// method '-[PDFDestination initWithPage:atPoint:]'
PDFDestination *_IM_PDFDestination_initWithPage_CatPoint_C(PDFDestination *_self, PDFPage* page, struct _NSPoint point);

// method '-[PDFDestination page]'
PDFPage* _IM_PDFDestination_page(PDFDestination *_self);

// method '-[PDFDestination point]'
struct _NSPoint _IM_PDFDestination_point(PDFDestination *_self);

// method '-[PDFDocument allowsCopying]'
BOOL _IM_PDFDocument_allowsCopying(PDFDocument *_self);

// method '-[PDFDocument allowsPrinting]'
BOOL _IM_PDFDocument_allowsPrinting(PDFDocument *_self);

// method '-[PDFDocument beginFindString:withOptions:]'
void _IM_PDFDocument_beginFindString_CwithOptions_C(PDFDocument *_self, id string, int options);

// method '-[PDFDocument cancelFindString]'
void _IM_PDFDocument_cancelFindString(PDFDocument *_self);

// method '-[PDFDocument dataRepresentation]'
id _IM_PDFDocument_dataRepresentation(PDFDocument *_self);

// method '-[PDFDocument delegate]'
id _IM_PDFDocument_delegate(PDFDocument *_self);

// method '-[PDFDocument documentAttributes]'
id _IM_PDFDocument_documentAttributes(PDFDocument *_self);

// method '-[PDFDocument documentURL]'
id _IM_PDFDocument_documentURL(PDFDocument *_self);

// method '-[PDFDocument exchangePageAtIndex:withPageAtIndex:]'
void _IM_PDFDocument_exchangePageAtIndex_CwithPageAtIndex_C(PDFDocument *_self, unsigned int indexA, unsigned int indexB);

// method '-[PDFDocument findString:fromSelection:withOptions:]'
PDFSelection* _IM_PDFDocument_findString_CfromSelection_CwithOptions_C(PDFDocument *_self, id string, PDFSelection* selection, int options);

// method '-[PDFDocument findString:withOptions:]'
id _IM_PDFDocument_findString_CwithOptions_C(PDFDocument *_self, id string, int options);

// method '-[PDFDocument indexForPage:]'
unsigned int _IM_PDFDocument_indexForPage_C(PDFDocument *_self, PDFPage* page);

// method '-[PDFDocument initWithData:]'
PDFDocument *_IM_PDFDocument_initWithData_C(PDFDocument *_self, id data);

// method '-[PDFDocument initWithURL:]'
PDFDocument *_IM_PDFDocument_initWithURL_C(PDFDocument *_self, id url);

// method '-[PDFDocument insertPage:atIndex:]'
void _IM_PDFDocument_insertPage_CatIndex_C(PDFDocument *_self, PDFPage* page, unsigned int index);

// method '-[PDFDocument isEncrypted]'
BOOL _IM_PDFDocument_isEncrypted(PDFDocument *_self);

// method '-[PDFDocument isFinding]'
BOOL _IM_PDFDocument_isFinding(PDFDocument *_self);

// method '-[PDFDocument isLocked]'
BOOL _IM_PDFDocument_isLocked(PDFDocument *_self);

// method '-[PDFDocument majorVersion]'
int _IM_PDFDocument_majorVersion(PDFDocument *_self);

// method '-[PDFDocument minorVersion]'
int _IM_PDFDocument_minorVersion(PDFDocument *_self);

// method '-[PDFDocument outlineItemForSelection:]'
PDFOutline* _IM_PDFDocument_outlineItemForSelection_C(PDFDocument *_self, PDFSelection* selection);

// method '-[PDFDocument outlineRoot]'
PDFOutline* _IM_PDFDocument_outlineRoot(PDFDocument *_self);

// method '-[PDFDocument pageAtIndex:]'
PDFPage* _IM_PDFDocument_pageAtIndex_C(PDFDocument *_self, unsigned int index);

// method '-[PDFDocument pageCount]'
unsigned int _IM_PDFDocument_pageCount(PDFDocument *_self);

// method '-[PDFDocument removePageAtIndex:]'
void _IM_PDFDocument_removePageAtIndex_C(PDFDocument *_self, unsigned int index);

// method '-[PDFDocument selectionForEntireDocument]'
PDFSelection* _IM_PDFDocument_selectionForEntireDocument(PDFDocument *_self);

// method '-[PDFDocument selectionFromPage:atCharacterIndex:toPage:atCharacterIndex:]'
PDFSelection* _IM_PDFDocument_selectionFromPage_CatCharacterIndex_CtoPage_CatCharacterIndex_C(PDFDocument *_self, PDFPage* startPage, unsigned int startChar, PDFPage* endPage, unsigned int endChar);

// method '-[PDFDocument selectionFromPage:atPoint:toPage:atPoint:]'
PDFSelection* _IM_PDFDocument_selectionFromPage_CatPoint_CtoPage_CatPoint_C(PDFDocument *_self, PDFPage* startPage, struct _NSPoint startPt, PDFPage* endPage, struct _NSPoint endPt);

// method '-[PDFDocument setDelegate:]'
void _IM_PDFDocument_setDelegate_C(PDFDocument *_self, id anObject);

// method '-[PDFDocument setDocumentAttributes:]'
void _IM_PDFDocument_setDocumentAttributes_C(PDFDocument *_self, id attributes);

// method '-[PDFDocument string]'
id _IM_PDFDocument_string(PDFDocument *_self);

// method '-[PDFDocument unlockWithPassword:]'
BOOL _IM_PDFDocument_unlockWithPassword_C(PDFDocument *_self, id password);

// method '-[PDFDocument writeToFile:]'
BOOL _IM_PDFDocument_writeToFile_C(PDFDocument *_self, id path);

// method '-[PDFDocument writeToFile:withOptions:]'
BOOL _IM_PDFDocument_writeToFile_CwithOptions_C(PDFDocument *_self, id path, id options);

// method '-[PDFDocument writeToURL:]'
BOOL _IM_PDFDocument_writeToURL_C(PDFDocument *_self, id url);

// method '-[PDFDocument writeToURL:withOptions:]'
BOOL _IM_PDFDocument_writeToURL_CwithOptions_C(PDFDocument *_self, id url, id options);

// method '-[PDFOutline childAtIndex:]'
PDFOutline* _IM_PDFOutline_childAtIndex_C(PDFOutline *_self, int index);

// method '-[PDFOutline destination]'
PDFDestination* _IM_PDFOutline_destination(PDFOutline *_self);

// method '-[PDFOutline document]'
PDFDocument* _IM_PDFOutline_document(PDFOutline *_self);

// method '-[PDFOutline initWithDocument:]'
PDFOutline *_IM_PDFOutline_initWithDocument_C(PDFOutline *_self, PDFDocument* document);

// method '-[PDFOutline label]'
id _IM_PDFOutline_label(PDFOutline *_self);

// method '-[PDFOutline numberOfChildren]'
int _IM_PDFOutline_numberOfChildren(PDFOutline *_self);

// method '-[PDFPage addAnnotation:]'
void _IM_PDFPage_addAnnotation_C(PDFPage *_self, PDFAnnotation* annotation);

// method '-[PDFPage annotationAtPoint:]'
PDFAnnotation* _IM_PDFPage_annotationAtPoint_C(PDFPage *_self, struct _NSPoint point);

// method '-[PDFPage annotations]'
id _IM_PDFPage_annotations(PDFPage *_self);

// method '-[PDFPage attributedString]'
id _IM_PDFPage_attributedString(PDFPage *_self);

// method '-[PDFPage boundsForBox:]'
struct _NSRect _IM_PDFPage_boundsForBox_C(PDFPage *_self, int box);

// method '-[PDFPage characterBoundsAtIndex:]'
struct _NSRect _IM_PDFPage_characterBoundsAtIndex_C(PDFPage *_self, int index);

// method '-[PDFPage characterIndexAtPoint:]'
int _IM_PDFPage_characterIndexAtPoint_C(PDFPage *_self, struct _NSPoint point);

// method '-[PDFPage dataRepresentation]'
id _IM_PDFPage_dataRepresentation(PDFPage *_self);

// method '-[PDFPage displaysAnnotations]'
BOOL _IM_PDFPage_displaysAnnotations(PDFPage *_self);

// method '-[PDFPage document]'
PDFDocument* _IM_PDFPage_document(PDFPage *_self);

// method '-[PDFPage drawWithBox:]'
void _IM_PDFPage_drawWithBox_C(PDFPage *_self, int box);

// method '-[PDFPage initWithDocument:]'
PDFPage *_IM_PDFPage_initWithDocument_C(PDFPage *_self, PDFDocument* document);

// method '-[PDFPage label]'
id _IM_PDFPage_label(PDFPage *_self);

// method '-[PDFPage numberOfCharacters]'
unsigned int _IM_PDFPage_numberOfCharacters(PDFPage *_self);

// method '-[PDFPage removeAnnotation:]'
void _IM_PDFPage_removeAnnotation_C(PDFPage *_self, PDFAnnotation* annotation);

// method '-[PDFPage rotation]'
int _IM_PDFPage_rotation(PDFPage *_self);

// method '-[PDFPage selectionForLineAtPoint:]'
PDFSelection* _IM_PDFPage_selectionForLineAtPoint_C(PDFPage *_self, struct _NSPoint point);

// method '-[PDFPage selectionForRange:]'
PDFSelection* _IM_PDFPage_selectionForRange_C(PDFPage *_self, struct _NSRange range);

// method '-[PDFPage selectionForRect:]'
PDFSelection* _IM_PDFPage_selectionForRect_C(PDFPage *_self, struct _NSRect rect);

// method '-[PDFPage selectionForWordAtPoint:]'
PDFSelection* _IM_PDFPage_selectionForWordAtPoint_C(PDFPage *_self, struct _NSPoint point);

// method '-[PDFPage selectionFromPoint:toPoint:]'
PDFSelection* _IM_PDFPage_selectionFromPoint_CtoPoint_C(PDFPage *_self, struct _NSPoint startPoint, struct _NSPoint endPoint);

// method '-[PDFPage setBounds:forBox:]'
void _IM_PDFPage_setBounds_CforBox_C(PDFPage *_self, struct _NSRect bounds, int box);

// method '-[PDFPage setDisplaysAnnotations:]'
void _IM_PDFPage_setDisplaysAnnotations_C(PDFPage *_self, BOOL display);

// method '-[PDFPage setRotation:]'
void _IM_PDFPage_setRotation_C(PDFPage *_self, int angle);

// method '-[PDFPage string]'
id _IM_PDFPage_string(PDFPage *_self);

// method '-[PDFSelection addSelection:]'
void _IM_PDFSelection_addSelection_C(PDFSelection *_self, PDFSelection* selection);

// method '-[PDFSelection attributedString]'
id _IM_PDFSelection_attributedString(PDFSelection *_self);

// method '-[PDFSelection boundsForPage:]'
struct _NSRect _IM_PDFSelection_boundsForPage_C(PDFSelection *_self, PDFPage* page);

// method '-[PDFSelection drawForPage:active:]'
void _IM_PDFSelection_drawForPage_Cactive_C(PDFSelection *_self, PDFPage* page, BOOL active);

// method '-[PDFSelection drawForPage:withBox:active:]'
void _IM_PDFSelection_drawForPage_CwithBox_Cactive_C(PDFSelection *_self, PDFPage* page, int box, BOOL active);

// method '-[PDFSelection extendSelectionAtEnd:]'
void _IM_PDFSelection_extendSelectionAtEnd_C(PDFSelection *_self, int chars);

// method '-[PDFSelection extendSelectionAtStart:]'
void _IM_PDFSelection_extendSelectionAtStart_C(PDFSelection *_self, int chars);

// method '-[PDFSelection pages]'
id _IM_PDFSelection_pages(PDFSelection *_self);

// method '-[PDFSelection string]'
id _IM_PDFSelection_string(PDFSelection *_self);

// method '-[PDFView allowsDragging]'
BOOL _IM_PDFView_allowsDragging(PDFView *_self);

// method '-[PDFView areaOfInterestForMouse:]'
int _IM_PDFView_areaOfInterestForMouse_C(PDFView *_self, id theEvent);

// method '-[PDFView autoScales]'
BOOL _IM_PDFView_autoScales(PDFView *_self);

// method '-[PDFView backgroundColor]'
id _IM_PDFView_backgroundColor(PDFView *_self);

// method '-[PDFView canGoBack]'
BOOL _IM_PDFView_canGoBack(PDFView *_self);

// method '-[PDFView canGoForward]'
BOOL _IM_PDFView_canGoForward(PDFView *_self);

// method '-[PDFView canGoToFirstPage]'
BOOL _IM_PDFView_canGoToFirstPage(PDFView *_self);

// method '-[PDFView canGoToLastPage]'
BOOL _IM_PDFView_canGoToLastPage(PDFView *_self);

// method '-[PDFView canGoToNextPage]'
BOOL _IM_PDFView_canGoToNextPage(PDFView *_self);

// method '-[PDFView canGoToPreviousPage]'
BOOL _IM_PDFView_canGoToPreviousPage(PDFView *_self);

// method '-[PDFView canZoomIn]'
BOOL _IM_PDFView_canZoomIn(PDFView *_self);

// method '-[PDFView canZoomOut]'
BOOL _IM_PDFView_canZoomOut(PDFView *_self);

// method '-[PDFView clearSelection]'
void _IM_PDFView_clearSelection(PDFView *_self);

// method '-[PDFView convertPoint:fromPage:]'
struct _NSPoint _IM_PDFView_convertPoint_CfromPage_C(PDFView *_self, struct _NSPoint point, PDFPage* page);

// method '-[PDFView convertPoint:toPage:]'
struct _NSPoint _IM_PDFView_convertPoint_CtoPage_C(PDFView *_self, struct _NSPoint point, PDFPage* page);

// method '-[PDFView convertRect:fromPage:]'
struct _NSRect _IM_PDFView_convertRect_CfromPage_C(PDFView *_self, struct _NSRect rect, PDFPage* page);

// method '-[PDFView convertRect:toPage:]'
struct _NSRect _IM_PDFView_convertRect_CtoPage_C(PDFView *_self, struct _NSRect rect, PDFPage* page);

// method '-[PDFView copy:]'
void _IM_PDFView_copy_C(PDFView *_self, id sender);

// method '-[PDFView currentDestination]'
PDFDestination* _IM_PDFView_currentDestination(PDFView *_self);

// method '-[PDFView currentPage]'
PDFPage* _IM_PDFView_currentPage(PDFView *_self);

// method '-[PDFView currentSelection]'
PDFSelection* _IM_PDFView_currentSelection(PDFView *_self);

// method '-[PDFView delegate]'
id _IM_PDFView_delegate(PDFView *_self);

// method '-[PDFView displayBox]'
int _IM_PDFView_displayBox(PDFView *_self);

// method '-[PDFView displayMode]'
int _IM_PDFView_displayMode(PDFView *_self);

// method '-[PDFView displaysAsBook]'
BOOL _IM_PDFView_displaysAsBook(PDFView *_self);

// method '-[PDFView displaysPageBreaks]'
BOOL _IM_PDFView_displaysPageBreaks(PDFView *_self);

// method '-[PDFView document]'
PDFDocument* _IM_PDFView_document(PDFView *_self);

// method '-[PDFView documentView]'
id _IM_PDFView_documentView(PDFView *_self);

// method '-[PDFView drawPage:]'
void _IM_PDFView_drawPage_C(PDFView *_self, PDFPage* page);

// method '-[PDFView goBack:]'
void _IM_PDFView_goBack_C(PDFView *_self, id sender);

// method '-[PDFView goForward:]'
void _IM_PDFView_goForward_C(PDFView *_self, id sender);

// method '-[PDFView goToDestination:]'
void _IM_PDFView_goToDestination_C(PDFView *_self, PDFDestination* destination);

// method '-[PDFView goToFirstPage:]'
void _IM_PDFView_goToFirstPage_C(PDFView *_self, id sender);

// method '-[PDFView goToLastPage:]'
void _IM_PDFView_goToLastPage_C(PDFView *_self, id sender);

// method '-[PDFView goToNextPage:]'
void _IM_PDFView_goToNextPage_C(PDFView *_self, id sender);

// method '-[PDFView goToPage:]'
void _IM_PDFView_goToPage_C(PDFView *_self, PDFPage* page);

// method '-[PDFView goToPreviousPage:]'
void _IM_PDFView_goToPreviousPage_C(PDFView *_self, id sender);

// method '-[PDFView goToSelection:]'
void _IM_PDFView_goToSelection_C(PDFView *_self, PDFSelection* selection);

// method '-[PDFView greekingThreshold]'
float _IM_PDFView_greekingThreshold(PDFView *_self);

// method '-[PDFView layoutDocumentView]'
void _IM_PDFView_layoutDocumentView(PDFView *_self);

// method '-[PDFView pageForPoint:nearest:]'
PDFPage* _IM_PDFView_pageForPoint_Cnearest_C(PDFView *_self, struct _NSPoint point, BOOL nearest);

// method '-[PDFView printWithInfo:autoRotate:]'
void _IM_PDFView_printWithInfo_CautoRotate_C(PDFView *_self, id printInfo, BOOL doRotate);

// method '-[PDFView rowSizeForPage:]'
struct _NSSize _IM_PDFView_rowSizeForPage_C(PDFView *_self, PDFPage* page);

// method '-[PDFView scaleFactor]'
float _IM_PDFView_scaleFactor(PDFView *_self);

// method '-[PDFView scrollSelectionToVisible:]'
void _IM_PDFView_scrollSelectionToVisible_C(PDFView *_self, id sender);

// method '-[PDFView selectAll:]'
void _IM_PDFView_selectAll_C(PDFView *_self, id sender);

// method '-[PDFView setAllowsDragging:]'
void _IM_PDFView_setAllowsDragging_C(PDFView *_self, BOOL allow);

// method '-[PDFView setAutoScales:]'
void _IM_PDFView_setAutoScales_C(PDFView *_self, BOOL newAuto);

// method '-[PDFView setBackgroundColor:]'
void _IM_PDFView_setBackgroundColor_C(PDFView *_self, id newColor);

// method '-[PDFView setCurrentSelection:]'
void _IM_PDFView_setCurrentSelection_C(PDFView *_self, PDFSelection* selection);

// method '-[PDFView setCursorForAreaOfInterest:]'
void _IM_PDFView_setCursorForAreaOfInterest_C(PDFView *_self, int area);

// method '-[PDFView setDelegate:]'
void _IM_PDFView_setDelegate_C(PDFView *_self, id anObject);

// method '-[PDFView setDisplayBox:]'
void _IM_PDFView_setDisplayBox_C(PDFView *_self, int box);

// method '-[PDFView setDisplayMode:]'
void _IM_PDFView_setDisplayMode_C(PDFView *_self, int mode);

// method '-[PDFView setDisplaysAsBook:]'
void _IM_PDFView_setDisplaysAsBook_C(PDFView *_self, BOOL asBook);

// method '-[PDFView setDisplaysPageBreaks:]'
void _IM_PDFView_setDisplaysPageBreaks_C(PDFView *_self, BOOL breaks);

// method '-[PDFView setDocument:]'
void _IM_PDFView_setDocument_C(PDFView *_self, PDFDocument* document);

// method '-[PDFView setGreekingThreshold:]'
void _IM_PDFView_setGreekingThreshold_C(PDFView *_self, float threshold);

// method '-[PDFView setScaleFactor:]'
void _IM_PDFView_setScaleFactor_C(PDFView *_self, float scale);

// method '-[PDFView setShouldAntiAlias:]'
void _IM_PDFView_setShouldAntiAlias_C(PDFView *_self, BOOL aliasing);

// method '-[PDFView shouldAntiAlias]'
BOOL _IM_PDFView_shouldAntiAlias(PDFView *_self);

// method '-[PDFView takeBackgroundColorFrom:]'
void _IM_PDFView_takeBackgroundColorFrom_C(PDFView *_self, id sender);

// method '-[PDFView takePasswordFrom:]'
void _IM_PDFView_takePasswordFrom_C(PDFView *_self, id sender);

// method '-[PDFView zoomIn:]'
void _IM_PDFView_zoomIn_C(PDFView *_self, id sender);

// method '-[PDFView zoomOut:]'
void _IM_PDFView_zoomOut_C(PDFView *_self, id sender);


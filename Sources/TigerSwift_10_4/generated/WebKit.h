// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// opaque 'DOMObjectInternal'
typedef struct DOMObjectInternal *DOMObjectInternal;

// class 'DOMAbstractView'
typedef struct objc_object DOMAbstractView;

// class 'DOMAttr'
typedef struct objc_object DOMAttr;

// class 'DOMCSSCharsetRule'
typedef struct objc_object DOMCSSCharsetRule;

// class 'DOMCSSFontFaceRule'
typedef struct objc_object DOMCSSFontFaceRule;

// class 'DOMCSSImportRule'
typedef struct objc_object DOMCSSImportRule;

// class 'DOMCSSMediaRule'
typedef struct objc_object DOMCSSMediaRule;

// class 'DOMCSSPageRule'
typedef struct objc_object DOMCSSPageRule;

// class 'DOMCSSPrimitiveValue'
typedef struct objc_object DOMCSSPrimitiveValue;

// class 'DOMCSSRule'
typedef struct objc_object DOMCSSRule;

// class 'DOMCSSRuleList'
typedef struct objc_object DOMCSSRuleList;

// class 'DOMCSSStyleDeclaration'
typedef struct objc_object DOMCSSStyleDeclaration;

// class 'DOMCSSStyleRule'
typedef struct objc_object DOMCSSStyleRule;

// class 'DOMCSSStyleSheet'
typedef struct objc_object DOMCSSStyleSheet;

// class 'DOMCSSValue'
typedef struct objc_object DOMCSSValue;

// class 'DOMCSSValueList'
typedef struct objc_object DOMCSSValueList;

// class 'DOMCharacterData'
typedef struct objc_object DOMCharacterData;

// class 'DOMCounter'
typedef struct objc_object DOMCounter;

// class 'DOMDocument'
typedef struct objc_object DOMDocument;

// class 'DOMDocumentType'
typedef struct objc_object DOMDocumentType;

// class 'DOMElement'
typedef struct objc_object DOMElement;

// class 'DOMEntity'
typedef struct objc_object DOMEntity;

// class 'DOMEvent'
typedef struct objc_object DOMEvent;

// class 'DOMHTMLAnchorElement'
typedef struct objc_object DOMHTMLAnchorElement;

// class 'DOMHTMLAppletElement'
typedef struct objc_object DOMHTMLAppletElement;

// class 'DOMHTMLAreaElement'
typedef struct objc_object DOMHTMLAreaElement;

// class 'DOMHTMLBRElement'
typedef struct objc_object DOMHTMLBRElement;

// class 'DOMHTMLBaseElement'
typedef struct objc_object DOMHTMLBaseElement;

// class 'DOMHTMLBaseFontElement'
typedef struct objc_object DOMHTMLBaseFontElement;

// class 'DOMHTMLBodyElement'
typedef struct objc_object DOMHTMLBodyElement;

// class 'DOMHTMLButtonElement'
typedef struct objc_object DOMHTMLButtonElement;

// class 'DOMHTMLCollection'
typedef struct objc_object DOMHTMLCollection;

// class 'DOMHTMLDListElement'
typedef struct objc_object DOMHTMLDListElement;

// class 'DOMHTMLDirectoryElement'
typedef struct objc_object DOMHTMLDirectoryElement;

// class 'DOMHTMLDivElement'
typedef struct objc_object DOMHTMLDivElement;

// class 'DOMHTMLDocument'
typedef struct objc_object DOMHTMLDocument;

// class 'DOMHTMLElement'
typedef struct objc_object DOMHTMLElement;

// class 'DOMHTMLEmbedElement'
typedef struct objc_object DOMHTMLEmbedElement;

// class 'DOMHTMLFieldSetElement'
typedef struct objc_object DOMHTMLFieldSetElement;

// class 'DOMHTMLFontElement'
typedef struct objc_object DOMHTMLFontElement;

// class 'DOMHTMLFormElement'
typedef struct objc_object DOMHTMLFormElement;

// class 'DOMHTMLFrameElement'
typedef struct objc_object DOMHTMLFrameElement;

// class 'DOMHTMLFrameSetElement'
typedef struct objc_object DOMHTMLFrameSetElement;

// class 'DOMHTMLHRElement'
typedef struct objc_object DOMHTMLHRElement;

// class 'DOMHTMLHeadElement'
typedef struct objc_object DOMHTMLHeadElement;

// class 'DOMHTMLHeadingElement'
typedef struct objc_object DOMHTMLHeadingElement;

// class 'DOMHTMLHtmlElement'
typedef struct objc_object DOMHTMLHtmlElement;

// class 'DOMHTMLIFrameElement'
typedef struct objc_object DOMHTMLIFrameElement;

// class 'DOMHTMLImageElement'
typedef struct objc_object DOMHTMLImageElement;

// class 'DOMHTMLInputElement'
typedef struct objc_object DOMHTMLInputElement;

// class 'DOMHTMLIsIndexElement'
typedef struct objc_object DOMHTMLIsIndexElement;

// class 'DOMHTMLLIElement'
typedef struct objc_object DOMHTMLLIElement;

// class 'DOMHTMLLabelElement'
typedef struct objc_object DOMHTMLLabelElement;

// class 'DOMHTMLLegendElement'
typedef struct objc_object DOMHTMLLegendElement;

// class 'DOMHTMLLinkElement'
typedef struct objc_object DOMHTMLLinkElement;

// class 'DOMHTMLMapElement'
typedef struct objc_object DOMHTMLMapElement;

// class 'DOMHTMLMenuElement'
typedef struct objc_object DOMHTMLMenuElement;

// class 'DOMHTMLMetaElement'
typedef struct objc_object DOMHTMLMetaElement;

// class 'DOMHTMLModElement'
typedef struct objc_object DOMHTMLModElement;

// class 'DOMHTMLOListElement'
typedef struct objc_object DOMHTMLOListElement;

// class 'DOMHTMLObjectElement'
typedef struct objc_object DOMHTMLObjectElement;

// class 'DOMHTMLOptGroupElement'
typedef struct objc_object DOMHTMLOptGroupElement;

// class 'DOMHTMLOptionElement'
typedef struct objc_object DOMHTMLOptionElement;

// class 'DOMHTMLOptionsCollection'
typedef struct objc_object DOMHTMLOptionsCollection;

// class 'DOMHTMLParagraphElement'
typedef struct objc_object DOMHTMLParagraphElement;

// class 'DOMHTMLParamElement'
typedef struct objc_object DOMHTMLParamElement;

// class 'DOMHTMLPreElement'
typedef struct objc_object DOMHTMLPreElement;

// class 'DOMHTMLQuoteElement'
typedef struct objc_object DOMHTMLQuoteElement;

// class 'DOMHTMLScriptElement'
typedef struct objc_object DOMHTMLScriptElement;

// class 'DOMHTMLSelectElement'
typedef struct objc_object DOMHTMLSelectElement;

// class 'DOMHTMLStyleElement'
typedef struct objc_object DOMHTMLStyleElement;

// class 'DOMHTMLTableCaptionElement'
typedef struct objc_object DOMHTMLTableCaptionElement;

// class 'DOMHTMLTableCellElement'
typedef struct objc_object DOMHTMLTableCellElement;

// class 'DOMHTMLTableColElement'
typedef struct objc_object DOMHTMLTableColElement;

// class 'DOMHTMLTableElement'
typedef struct objc_object DOMHTMLTableElement;

// class 'DOMHTMLTableRowElement'
typedef struct objc_object DOMHTMLTableRowElement;

// class 'DOMHTMLTableSectionElement'
typedef struct objc_object DOMHTMLTableSectionElement;

// class 'DOMHTMLTextAreaElement'
typedef struct objc_object DOMHTMLTextAreaElement;

// class 'DOMHTMLTitleElement'
typedef struct objc_object DOMHTMLTitleElement;

// class 'DOMHTMLUListElement'
typedef struct objc_object DOMHTMLUListElement;

// class 'DOMImplementation'
typedef struct objc_object DOMImplementation;

// class 'DOMMediaList'
typedef struct objc_object DOMMediaList;

// class 'DOMMouseEvent'
typedef struct objc_object DOMMouseEvent;

// class 'DOMMutationEvent'
typedef struct objc_object DOMMutationEvent;

// class 'DOMNamedNodeMap'
typedef struct objc_object DOMNamedNodeMap;

// class 'DOMNode'
typedef struct objc_object DOMNode;

// class 'DOMNodeIterator'
typedef struct objc_object DOMNodeIterator;

// class 'DOMNodeList'
typedef struct objc_object DOMNodeList;

// class 'DOMNotation'
typedef struct objc_object DOMNotation;

// class 'DOMObject'
typedef struct objc_object DOMObject;

// class 'DOMProcessingInstruction'
typedef struct objc_object DOMProcessingInstruction;

// class 'DOMRGBColor'
typedef struct objc_object DOMRGBColor;

// class 'DOMRange'
typedef struct objc_object DOMRange;

// class 'DOMRect'
typedef struct objc_object DOMRect;

// class 'DOMStyleSheet'
typedef struct objc_object DOMStyleSheet;

// class 'DOMStyleSheetList'
typedef struct objc_object DOMStyleSheetList;

// class 'DOMText'
typedef struct objc_object DOMText;

// class 'DOMTreeWalker'
typedef struct objc_object DOMTreeWalker;

// class 'DOMUIEvent'
typedef struct objc_object DOMUIEvent;

// class 'NSObject'
typedef struct objc_object NSObject;

// class 'WebArchive'
typedef struct objc_object WebArchive;

// class 'WebBackForwardList'
typedef struct objc_object WebBackForwardList;

// class 'WebDataSource'
typedef struct objc_object WebDataSource;

// class 'WebFrame'
typedef struct objc_object WebFrame;

// class 'WebFrameView'
typedef struct objc_object WebFrameView;

// class 'WebHistory'
typedef struct objc_object WebHistory;

// class 'WebHistoryItem'
typedef struct objc_object WebHistoryItem;

// class 'WebPreferences'
typedef struct objc_object WebPreferences;

// class 'WebResource'
typedef struct objc_object WebResource;

// class 'WebScriptObject'
typedef struct objc_object WebScriptObject;

// class 'WebUndefined'
typedef struct objc_object WebUndefined;

// class 'WebView'
typedef struct objc_object WebView;

// getter for constant 'DOMEventException'
id _get_DOMEventException(void);

// getter for constant 'DOMException'
id _get_DOMException(void);

// getter for constant 'DOMRangeException'
id _get_DOMRangeException(void);

// getter for constant 'WebActionButtonKey'
id _get_WebActionButtonKey(void);

// setter for constant 'WebActionButtonKey'
void _set_WebActionButtonKey(id value);

// getter for constant 'WebActionElementKey'
id _get_WebActionElementKey(void);

// setter for constant 'WebActionElementKey'
void _set_WebActionElementKey(id value);

// getter for constant 'WebActionModifierFlagsKey'
id _get_WebActionModifierFlagsKey(void);

// setter for constant 'WebActionModifierFlagsKey'
void _set_WebActionModifierFlagsKey(id value);

// getter for constant 'WebActionNavigationTypeKey'
id _get_WebActionNavigationTypeKey(void);

// setter for constant 'WebActionNavigationTypeKey'
void _set_WebActionNavigationTypeKey(id value);

// getter for constant 'WebActionOriginalURLKey'
id _get_WebActionOriginalURLKey(void);

// setter for constant 'WebActionOriginalURLKey'
void _set_WebActionOriginalURLKey(id value);

// getter for constant 'WebArchivePboardType'
id _get_WebArchivePboardType(void);

// setter for constant 'WebArchivePboardType'
void _set_WebArchivePboardType(id value);

// getter for constant 'WebElementDOMNodeKey'
id _get_WebElementDOMNodeKey(void);

// setter for constant 'WebElementDOMNodeKey'
void _set_WebElementDOMNodeKey(id value);

// getter for constant 'WebElementFrameKey'
id _get_WebElementFrameKey(void);

// setter for constant 'WebElementFrameKey'
void _set_WebElementFrameKey(id value);

// getter for constant 'WebElementImageAltStringKey'
id _get_WebElementImageAltStringKey(void);

// setter for constant 'WebElementImageAltStringKey'
void _set_WebElementImageAltStringKey(id value);

// getter for constant 'WebElementImageKey'
id _get_WebElementImageKey(void);

// setter for constant 'WebElementImageKey'
void _set_WebElementImageKey(id value);

// getter for constant 'WebElementImageRectKey'
id _get_WebElementImageRectKey(void);

// setter for constant 'WebElementImageRectKey'
void _set_WebElementImageRectKey(id value);

// getter for constant 'WebElementImageURLKey'
id _get_WebElementImageURLKey(void);

// setter for constant 'WebElementImageURLKey'
void _set_WebElementImageURLKey(id value);

// getter for constant 'WebElementIsSelectedKey'
id _get_WebElementIsSelectedKey(void);

// setter for constant 'WebElementIsSelectedKey'
void _set_WebElementIsSelectedKey(id value);

// getter for constant 'WebElementLinkLabelKey'
id _get_WebElementLinkLabelKey(void);

// setter for constant 'WebElementLinkLabelKey'
void _set_WebElementLinkLabelKey(id value);

// getter for constant 'WebElementLinkTargetFrameKey'
id _get_WebElementLinkTargetFrameKey(void);

// setter for constant 'WebElementLinkTargetFrameKey'
void _set_WebElementLinkTargetFrameKey(id value);

// getter for constant 'WebElementLinkTitleKey'
id _get_WebElementLinkTitleKey(void);

// setter for constant 'WebElementLinkTitleKey'
void _set_WebElementLinkTitleKey(id value);

// getter for constant 'WebElementLinkURLKey'
id _get_WebElementLinkURLKey(void);

// setter for constant 'WebElementLinkURLKey'
void _set_WebElementLinkURLKey(id value);

// getter for constant 'WebHistoryAllItemsRemovedNotification'
id _get_WebHistoryAllItemsRemovedNotification(void);

// setter for constant 'WebHistoryAllItemsRemovedNotification'
void _set_WebHistoryAllItemsRemovedNotification(id value);

// getter for constant 'WebHistoryItemChangedNotification'
id _get_WebHistoryItemChangedNotification(void);

// setter for constant 'WebHistoryItemChangedNotification'
void _set_WebHistoryItemChangedNotification(id value);

// getter for constant 'WebHistoryItemsAddedNotification'
id _get_WebHistoryItemsAddedNotification(void);

// setter for constant 'WebHistoryItemsAddedNotification'
void _set_WebHistoryItemsAddedNotification(id value);

// getter for constant 'WebHistoryItemsKey'
id _get_WebHistoryItemsKey(void);

// setter for constant 'WebHistoryItemsKey'
void _set_WebHistoryItemsKey(id value);

// getter for constant 'WebHistoryItemsRemovedNotification'
id _get_WebHistoryItemsRemovedNotification(void);

// setter for constant 'WebHistoryItemsRemovedNotification'
void _set_WebHistoryItemsRemovedNotification(id value);

// getter for constant 'WebHistoryLoadedNotification'
id _get_WebHistoryLoadedNotification(void);

// setter for constant 'WebHistoryLoadedNotification'
void _set_WebHistoryLoadedNotification(id value);

// getter for constant 'WebHistorySavedNotification'
id _get_WebHistorySavedNotification(void);

// setter for constant 'WebHistorySavedNotification'
void _set_WebHistorySavedNotification(id value);

// getter for constant 'WebKitErrorDomain'
id _get_WebKitErrorDomain(void);

// setter for constant 'WebKitErrorDomain'
void _set_WebKitErrorDomain(id value);

// getter for constant 'WebKitErrorMIMETypeKey'
id _get_WebKitErrorMIMETypeKey(void);

// getter for constant 'WebKitErrorPlugInNameKey'
id _get_WebKitErrorPlugInNameKey(void);

// getter for constant 'WebKitErrorPlugInPageURLStringKey'
id _get_WebKitErrorPlugInPageURLStringKey(void);

// getter for constant 'WebPlugInAttributesKey'
id _get_WebPlugInAttributesKey(void);

// setter for constant 'WebPlugInAttributesKey'
void _set_WebPlugInAttributesKey(id value);

// getter for constant 'WebPlugInBaseURLKey'
id _get_WebPlugInBaseURLKey(void);

// setter for constant 'WebPlugInBaseURLKey'
void _set_WebPlugInBaseURLKey(id value);

// getter for constant 'WebPlugInContainerKey'
id _get_WebPlugInContainerKey(void);

// setter for constant 'WebPlugInContainerKey'
void _set_WebPlugInContainerKey(id value);

// getter for constant 'WebPlugInContainingElementKey'
id _get_WebPlugInContainingElementKey(void);

// setter for constant 'WebPlugInContainingElementKey'
void _set_WebPlugInContainingElementKey(id value);

// getter for constant 'WebPreferencesChangedNotification'
id _get_WebPreferencesChangedNotification(void);

// setter for constant 'WebPreferencesChangedNotification'
void _set_WebPreferencesChangedNotification(id value);

// getter for constant 'WebViewDidBeginEditingNotification'
id _get_WebViewDidBeginEditingNotification(void);

// getter for constant 'WebViewDidChangeNotification'
id _get_WebViewDidChangeNotification(void);

// getter for constant 'WebViewDidChangeSelectionNotification'
id _get_WebViewDidChangeSelectionNotification(void);

// getter for constant 'WebViewDidChangeTypingStyleNotification'
id _get_WebViewDidChangeTypingStyleNotification(void);

// getter for constant 'WebViewDidEndEditingNotification'
id _get_WebViewDidEndEditingNotification(void);

// getter for constant 'WebViewProgressEstimateChangedNotification'
id _get_WebViewProgressEstimateChangedNotification(void);

// setter for constant 'WebViewProgressEstimateChangedNotification'
void _set_WebViewProgressEstimateChangedNotification(id value);

// getter for constant 'WebViewProgressFinishedNotification'
id _get_WebViewProgressFinishedNotification(void);

// setter for constant 'WebViewProgressFinishedNotification'
void _set_WebViewProgressFinishedNotification(id value);

// getter for constant 'WebViewProgressStartedNotification'
id _get_WebViewProgressStartedNotification(void);

// setter for constant 'WebViewProgressStartedNotification'
void _set_WebViewProgressStartedNotification(id value);

enum { DOM_ADDITION = 2 };

enum { DOM_ATTRIBUTE_NODE = 2 };

enum { DOM_AT_TARGET = 2 };

enum { DOM_BAD_BOUNDARYPOINTS_ERR = 1 };

enum { DOM_BUBBLING_PHASE = 3 };

enum { DOM_CAPTURING_PHASE = 1 };

enum { DOM_CDATA_SECTION_NODE = 4 };

enum { DOM_CHARSET_RULE = 2 };

enum { DOM_COMMENT_NODE = 8 };

enum { DOM_CSS_ATTR = 22 };

enum { DOM_CSS_CM = 6 };

enum { DOM_CSS_COUNTER = 23 };

enum { DOM_CSS_CUSTOM = 3 };

enum { DOM_CSS_DEG = 11 };

enum { DOM_CSS_DIMENSION = 18 };

enum { DOM_CSS_EMS = 3 };

enum { DOM_CSS_EXS = 4 };

enum { DOM_CSS_GRAD = 13 };

enum { DOM_CSS_HZ = 16 };

enum { DOM_CSS_IDENT = 21 };

enum { DOM_CSS_IN = 8 };

enum { DOM_CSS_INHERIT = 0 };

enum { DOM_CSS_KHZ = 17 };

enum { DOM_CSS_MM = 7 };

enum { DOM_CSS_MS = 14 };

enum { DOM_CSS_NUMBER = 1 };

enum { DOM_CSS_PC = 10 };

enum { DOM_CSS_PERCENTAGE = 2 };

enum { DOM_CSS_PRIMITIVE_VALUE = 1 };

enum { DOM_CSS_PT = 9 };

enum { DOM_CSS_PX = 5 };

enum { DOM_CSS_RAD = 12 };

enum { DOM_CSS_RECT = 24 };

enum { DOM_CSS_RGBCOLOR = 25 };

enum { DOM_CSS_S = 15 };

enum { DOM_CSS_STRING = 19 };

enum { DOM_CSS_UNKNOWN = 0 };

enum { DOM_CSS_URI = 20 };

enum { DOM_CSS_VALUE_LIST = 2 };

enum { DOM_DOCUMENT_FRAGMENT_NODE = 11 };

enum { DOM_DOCUMENT_NODE = 9 };

enum { DOM_DOCUMENT_TYPE_NODE = 10 };

enum { DOM_DOMSTRING_SIZE_ERR = 2 };

enum { DOM_ELEMENT_NODE = 1 };

enum { DOM_END_TO_END = 2 };

enum { DOM_END_TO_START = 3 };

enum { DOM_ENTITY_NODE = 6 };

enum { DOM_ENTITY_REFERENCE_NODE = 5 };

enum { DOM_FILTER_ACCEPT = 1 };

enum { DOM_FILTER_REJECT = 2 };

enum { DOM_FILTER_SKIP = 3 };

enum { DOM_FONT_FACE_RULE = 5 };

enum { DOM_HIERARCHY_REQUEST_ERR = 3 };

enum { DOM_IMPORT_RULE = 3 };

enum { DOM_INDEX_SIZE_ERR = 1 };

enum { DOM_INUSE_ATTRIBUTE_ERR = 10 };

enum { DOM_INVALID_ACCESS_ERR = 15 };

enum { DOM_INVALID_CHARACTER_ERR = 5 };

enum { DOM_INVALID_MODIFICATION_ERR = 13 };

enum { DOM_INVALID_NODE_TYPE_ERR = 2 };

enum { DOM_INVALID_STATE_ERR = 11 };

enum { DOM_MEDIA_RULE = 4 };

enum { DOM_MODIFICATION = 1 };

enum { DOM_NAMESPACE_ERR = 14 };

enum { DOM_NOTATION_NODE = 12 };

enum { DOM_NOT_FOUND_ERR = 8 };

enum { DOM_NOT_SUPPORTED_ERR = 9 };

enum { DOM_NO_DATA_ALLOWED_ERR = 6 };

enum { DOM_NO_MODIFICATION_ALLOWED_ERR = 7 };

enum { DOM_PAGE_RULE = 6 };

enum { DOM_PROCESSING_INSTRUCTION_NODE = 7 };

enum { DOM_REMOVAL = 3 };

enum { DOM_SHOW_ALL = 4294967295 };

enum { DOM_SHOW_ATTRIBUTE = 2 };

enum { DOM_SHOW_CDATA_SECTION = 8 };

enum { DOM_SHOW_COMMENT = 128 };

enum { DOM_SHOW_DOCUMENT = 256 };

enum { DOM_SHOW_DOCUMENT_FRAGMENT = 1024 };

enum { DOM_SHOW_DOCUMENT_TYPE = 512 };

enum { DOM_SHOW_ELEMENT = 1 };

enum { DOM_SHOW_ENTITY = 32 };

enum { DOM_SHOW_ENTITY_REFERENCE = 16 };

enum { DOM_SHOW_NOTATION = 2048 };

enum { DOM_SHOW_PROCESSING_INSTRUCTION = 64 };

enum { DOM_SHOW_TEXT = 4 };

enum { DOM_START_TO_END = 1 };

enum { DOM_START_TO_START = 0 };

enum { DOM_STYLE_RULE = 1 };

enum { DOM_SYNTAX_ERR = 12 };

enum { DOM_TEXT_NODE = 3 };

enum { DOM_UNKNOWN_RULE = 0 };

enum { DOM_UNSPECIFIED_EVENT_TYPE_ERR = 0 };

enum { DOM_WRONG_DOCUMENT_ERR = 4 };

enum { WebDragDestinationActionAny = 4294967295 };

enum { WebDragDestinationActionDHTML = 1 };

enum { WebDragDestinationActionEdit = 2 };

enum { WebDragDestinationActionLoad = 4 };

enum { WebDragDestinationActionNone = 0 };

enum { WebDragSourceActionAny = 4294967295 };

enum { WebDragSourceActionDHTML = 1 };

enum { WebDragSourceActionImage = 2 };

enum { WebDragSourceActionLink = 4 };

enum { WebDragSourceActionNone = 0 };

enum { WebDragSourceActionSelection = 8 };

enum { WebJNIReturnTypeBoolean = 3 };

enum { WebJNIReturnTypeByte = 4 };

enum { WebJNIReturnTypeChar = 5 };

enum { WebJNIReturnTypeDouble = 10 };

enum { WebJNIReturnTypeFloat = 9 };

enum { WebJNIReturnTypeInt = 7 };

enum { WebJNIReturnTypeInvalid = 0 };

enum { WebJNIReturnTypeLong = 8 };

enum { WebJNIReturnTypeObject = 2 };

enum { WebJNIReturnTypeShort = 6 };

enum { WebJNIReturnTypeVoid = 1 };

enum { WebKitErrorCannotFindPlugIn = 200 };

enum { WebKitErrorCannotLoadPlugIn = 201 };

enum { WebKitErrorCannotShowMIMEType = 100 };

enum { WebKitErrorCannotShowURL = 101 };

enum { WebKitErrorFrameLoadInterruptedByPolicyChange = 102 };

enum { WebKitErrorJavaUnavailable = 202 };

enum { WebMenuItemTagCopy = 8 };

enum { WebMenuItemTagCopyImageToClipboard = 6 };

enum { WebMenuItemTagCopyLinkToClipboard = 3 };

enum { WebMenuItemTagCut = 13 };

enum { WebMenuItemTagDownloadImageToDisk = 5 };

enum { WebMenuItemTagDownloadLinkToDisk = 2 };

enum { WebMenuItemTagGoBack = 9 };

enum { WebMenuItemTagGoForward = 10 };

enum { WebMenuItemTagIgnoreSpelling = 17 };

enum { WebMenuItemTagLearnSpelling = 18 };

enum { WebMenuItemTagNoGuessesFound = 16 };

enum { WebMenuItemTagOpenFrameInNewWindow = 7 };

enum { WebMenuItemTagOpenImageInNewWindow = 4 };

enum { WebMenuItemTagOpenLinkInNewWindow = 1 };

enum { WebMenuItemTagOther = 19 };

enum { WebMenuItemTagPaste = 14 };

enum { WebMenuItemTagReload = 12 };

enum { WebMenuItemTagSpellingGuess = 15 };

enum { WebMenuItemTagStop = 11 };

enum { WebNavigationTypeBackForward = 2 };

enum { WebNavigationTypeFormResubmitted = 4 };

enum { WebNavigationTypeFormSubmitted = 1 };

enum { WebNavigationTypeLinkClicked = 0 };

enum { WebNavigationTypeOther = 5 };

enum { WebNavigationTypeReload = 3 };

enum { WebViewInsertActionDropped = 2 };

enum { WebViewInsertActionPasted = 1 };

enum { WebViewInsertActionTyped = 0 };

// function 'HIWebViewCreate'
long HIWebViewCreate(struct OpaqueControlRef **outControl);

// function 'HIWebViewCreateWithClass'
long HIWebViewCreateWithClass(Class aClass, struct OpaqueControlRef **outControl);

// function 'HIWebViewGetWebView'
WebView* HIWebViewGetWebView(struct OpaqueControlRef *inView);

// function 'WebConvertNSImageToCGImageRef'
struct CGImage *WebConvertNSImageToCGImageRef(id inImage);

// function 'WebInitForCarbon'
void WebInitForCarbon(void);

// method '-[DOMAbstractView document]'
DOMDocument* _IM_DOMAbstractView_document(DOMAbstractView *_self);

// method '-[DOMAttr name]'
id _IM_DOMAttr_name(DOMAttr *_self);

// method '-[DOMAttr ownerElement]'
DOMElement* _IM_DOMAttr_ownerElement(DOMAttr *_self);

// method '-[DOMAttr setValue:]'
void _IM_DOMAttr_setValue_C(DOMAttr *_self, id value);

// method '-[DOMAttr specified]'
BOOL _IM_DOMAttr_specified(DOMAttr *_self);

// method '-[DOMAttr value]'
id _IM_DOMAttr_value(DOMAttr *_self);

// method '-[DOMCSSCharsetRule encoding]'
id _IM_DOMCSSCharsetRule_encoding(DOMCSSCharsetRule *_self);

// method '-[DOMCSSFontFaceRule style]'
DOMCSSStyleDeclaration* _IM_DOMCSSFontFaceRule_style(DOMCSSFontFaceRule *_self);

// method '-[DOMCSSImportRule href]'
id _IM_DOMCSSImportRule_href(DOMCSSImportRule *_self);

// method '-[DOMCSSImportRule media]'
DOMMediaList* _IM_DOMCSSImportRule_media(DOMCSSImportRule *_self);

// method '-[DOMCSSImportRule styleSheet]'
DOMCSSStyleSheet* _IM_DOMCSSImportRule_styleSheet(DOMCSSImportRule *_self);

// method '-[DOMCSSMediaRule cssRules]'
DOMCSSRuleList* _IM_DOMCSSMediaRule_cssRules(DOMCSSMediaRule *_self);

// method '-[DOMCSSMediaRule deleteRule:]'
void _IM_DOMCSSMediaRule_deleteRule_C(DOMCSSMediaRule *_self, unsigned long index);

// method '-[DOMCSSMediaRule insertRule::]'
unsigned long _IM_DOMCSSMediaRule_insertRule_C_C(DOMCSSMediaRule *_self, id rule, unsigned long index);

// method '-[DOMCSSMediaRule media]'
DOMMediaList* _IM_DOMCSSMediaRule_media(DOMCSSMediaRule *_self);

// method '-[DOMCSSPageRule selectorText]'
id _IM_DOMCSSPageRule_selectorText(DOMCSSPageRule *_self);

// method '-[DOMCSSPageRule setSelectorText:]'
void _IM_DOMCSSPageRule_setSelectorText_C(DOMCSSPageRule *_self, id selectorText);

// method '-[DOMCSSPageRule style]'
DOMCSSStyleDeclaration* _IM_DOMCSSPageRule_style(DOMCSSPageRule *_self);

// method '-[DOMCSSPrimitiveValue getCounterValue]'
DOMCounter* _IM_DOMCSSPrimitiveValue_getCounterValue(DOMCSSPrimitiveValue *_self);

// method '-[DOMCSSPrimitiveValue getFloatValue:]'
float _IM_DOMCSSPrimitiveValue_getFloatValue_C(DOMCSSPrimitiveValue *_self, unsigned short unitType);

// method '-[DOMCSSPrimitiveValue getRGBColorValue]'
DOMRGBColor* _IM_DOMCSSPrimitiveValue_getRGBColorValue(DOMCSSPrimitiveValue *_self);

// method '-[DOMCSSPrimitiveValue getRectValue]'
DOMRect* _IM_DOMCSSPrimitiveValue_getRectValue(DOMCSSPrimitiveValue *_self);

// method '-[DOMCSSPrimitiveValue getStringValue]'
id _IM_DOMCSSPrimitiveValue_getStringValue(DOMCSSPrimitiveValue *_self);

// method '-[DOMCSSPrimitiveValue primitiveType]'
unsigned short _IM_DOMCSSPrimitiveValue_primitiveType(DOMCSSPrimitiveValue *_self);

// method '-[DOMCSSPrimitiveValue setFloatValue::]'
void _IM_DOMCSSPrimitiveValue_setFloatValue_C_C(DOMCSSPrimitiveValue *_self, unsigned short unitType, float floatValue);

// method '-[DOMCSSPrimitiveValue setStringValue::]'
void _IM_DOMCSSPrimitiveValue_setStringValue_C_C(DOMCSSPrimitiveValue *_self, unsigned short stringType, id stringValue);

// method '-[DOMCSSRule cssText]'
id _IM_DOMCSSRule_cssText(DOMCSSRule *_self);

// method '-[DOMCSSRule parentRule]'
DOMCSSRule* _IM_DOMCSSRule_parentRule(DOMCSSRule *_self);

// method '-[DOMCSSRule parentStyleSheet]'
DOMCSSStyleSheet* _IM_DOMCSSRule_parentStyleSheet(DOMCSSRule *_self);

// method '-[DOMCSSRule setCssText:]'
void _IM_DOMCSSRule_setCssText_C(DOMCSSRule *_self, id cssText);

// method '-[DOMCSSRule type]'
unsigned short _IM_DOMCSSRule_type(DOMCSSRule *_self);

// method '-[DOMCSSRuleList item:]'
DOMCSSRule* _IM_DOMCSSRuleList_item_C(DOMCSSRuleList *_self, unsigned long index);

// method '-[DOMCSSRuleList length]'
unsigned long _IM_DOMCSSRuleList_length(DOMCSSRuleList *_self);

// method '-[DOMCSSStyleDeclaration azimuth]'
id _IM_DOMCSSStyleDeclaration_azimuth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration background]'
id _IM_DOMCSSStyleDeclaration_background(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration backgroundAttachment]'
id _IM_DOMCSSStyleDeclaration_backgroundAttachment(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration backgroundColor]'
id _IM_DOMCSSStyleDeclaration_backgroundColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration backgroundImage]'
id _IM_DOMCSSStyleDeclaration_backgroundImage(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration backgroundPosition]'
id _IM_DOMCSSStyleDeclaration_backgroundPosition(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration backgroundRepeat]'
id _IM_DOMCSSStyleDeclaration_backgroundRepeat(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration border]'
id _IM_DOMCSSStyleDeclaration_border(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderBottom]'
id _IM_DOMCSSStyleDeclaration_borderBottom(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderBottomColor]'
id _IM_DOMCSSStyleDeclaration_borderBottomColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderBottomStyle]'
id _IM_DOMCSSStyleDeclaration_borderBottomStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderBottomWidth]'
id _IM_DOMCSSStyleDeclaration_borderBottomWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderCollapse]'
id _IM_DOMCSSStyleDeclaration_borderCollapse(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderColor]'
id _IM_DOMCSSStyleDeclaration_borderColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderLeft]'
id _IM_DOMCSSStyleDeclaration_borderLeft(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderLeftColor]'
id _IM_DOMCSSStyleDeclaration_borderLeftColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderLeftStyle]'
id _IM_DOMCSSStyleDeclaration_borderLeftStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderLeftWidth]'
id _IM_DOMCSSStyleDeclaration_borderLeftWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderRight]'
id _IM_DOMCSSStyleDeclaration_borderRight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderRightColor]'
id _IM_DOMCSSStyleDeclaration_borderRightColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderRightStyle]'
id _IM_DOMCSSStyleDeclaration_borderRightStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderRightWidth]'
id _IM_DOMCSSStyleDeclaration_borderRightWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderSpacing]'
id _IM_DOMCSSStyleDeclaration_borderSpacing(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderStyle]'
id _IM_DOMCSSStyleDeclaration_borderStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderTop]'
id _IM_DOMCSSStyleDeclaration_borderTop(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderTopColor]'
id _IM_DOMCSSStyleDeclaration_borderTopColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderTopStyle]'
id _IM_DOMCSSStyleDeclaration_borderTopStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderTopWidth]'
id _IM_DOMCSSStyleDeclaration_borderTopWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration borderWidth]'
id _IM_DOMCSSStyleDeclaration_borderWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration bottom]'
id _IM_DOMCSSStyleDeclaration_bottom(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration captionSide]'
id _IM_DOMCSSStyleDeclaration_captionSide(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration clear]'
id _IM_DOMCSSStyleDeclaration_clear(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration clip]'
id _IM_DOMCSSStyleDeclaration_clip(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration color]'
id _IM_DOMCSSStyleDeclaration_color(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration content]'
id _IM_DOMCSSStyleDeclaration_content(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration counterIncrement]'
id _IM_DOMCSSStyleDeclaration_counterIncrement(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration counterReset]'
id _IM_DOMCSSStyleDeclaration_counterReset(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration cssFloat]'
id _IM_DOMCSSStyleDeclaration_cssFloat(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration cssText]'
id _IM_DOMCSSStyleDeclaration_cssText(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration cue]'
id _IM_DOMCSSStyleDeclaration_cue(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration cueAfter]'
id _IM_DOMCSSStyleDeclaration_cueAfter(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration cueBefore]'
id _IM_DOMCSSStyleDeclaration_cueBefore(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration cursor]'
id _IM_DOMCSSStyleDeclaration_cursor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration direction]'
id _IM_DOMCSSStyleDeclaration_direction(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration display]'
id _IM_DOMCSSStyleDeclaration_display(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration elevation]'
id _IM_DOMCSSStyleDeclaration_elevation(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration emptyCells]'
id _IM_DOMCSSStyleDeclaration_emptyCells(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration font]'
id _IM_DOMCSSStyleDeclaration_font(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontFamily]'
id _IM_DOMCSSStyleDeclaration_fontFamily(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontSize]'
id _IM_DOMCSSStyleDeclaration_fontSize(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontSizeAdjust]'
id _IM_DOMCSSStyleDeclaration_fontSizeAdjust(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontStretch]'
id _IM_DOMCSSStyleDeclaration_fontStretch(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontStyle]'
id _IM_DOMCSSStyleDeclaration_fontStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontVariant]'
id _IM_DOMCSSStyleDeclaration_fontVariant(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration fontWeight]'
id _IM_DOMCSSStyleDeclaration_fontWeight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration getPropertyCSSValue:]'
DOMCSSValue* _IM_DOMCSSStyleDeclaration_getPropertyCSSValue_C(DOMCSSStyleDeclaration *_self, id propertyName);

// method '-[DOMCSSStyleDeclaration getPropertyPriority:]'
id _IM_DOMCSSStyleDeclaration_getPropertyPriority_C(DOMCSSStyleDeclaration *_self, id propertyName);

// method '-[DOMCSSStyleDeclaration getPropertyValue:]'
id _IM_DOMCSSStyleDeclaration_getPropertyValue_C(DOMCSSStyleDeclaration *_self, id propertyName);

// method '-[DOMCSSStyleDeclaration height]'
id _IM_DOMCSSStyleDeclaration_height(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration item:]'
id _IM_DOMCSSStyleDeclaration_item_C(DOMCSSStyleDeclaration *_self, unsigned long index);

// method '-[DOMCSSStyleDeclaration left]'
id _IM_DOMCSSStyleDeclaration_left(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration length]'
unsigned long _IM_DOMCSSStyleDeclaration_length(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration letterSpacing]'
id _IM_DOMCSSStyleDeclaration_letterSpacing(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration lineHeight]'
id _IM_DOMCSSStyleDeclaration_lineHeight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration listStyle]'
id _IM_DOMCSSStyleDeclaration_listStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration listStyleImage]'
id _IM_DOMCSSStyleDeclaration_listStyleImage(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration listStylePosition]'
id _IM_DOMCSSStyleDeclaration_listStylePosition(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration listStyleType]'
id _IM_DOMCSSStyleDeclaration_listStyleType(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration margin]'
id _IM_DOMCSSStyleDeclaration_margin(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration marginBottom]'
id _IM_DOMCSSStyleDeclaration_marginBottom(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration marginLeft]'
id _IM_DOMCSSStyleDeclaration_marginLeft(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration marginRight]'
id _IM_DOMCSSStyleDeclaration_marginRight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration marginTop]'
id _IM_DOMCSSStyleDeclaration_marginTop(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration markerOffset]'
id _IM_DOMCSSStyleDeclaration_markerOffset(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration marks]'
id _IM_DOMCSSStyleDeclaration_marks(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration maxHeight]'
id _IM_DOMCSSStyleDeclaration_maxHeight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration maxWidth]'
id _IM_DOMCSSStyleDeclaration_maxWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration minHeight]'
id _IM_DOMCSSStyleDeclaration_minHeight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration minWidth]'
id _IM_DOMCSSStyleDeclaration_minWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration orphans]'
id _IM_DOMCSSStyleDeclaration_orphans(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration outline]'
id _IM_DOMCSSStyleDeclaration_outline(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration outlineColor]'
id _IM_DOMCSSStyleDeclaration_outlineColor(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration outlineStyle]'
id _IM_DOMCSSStyleDeclaration_outlineStyle(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration outlineWidth]'
id _IM_DOMCSSStyleDeclaration_outlineWidth(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration overflow]'
id _IM_DOMCSSStyleDeclaration_overflow(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration padding]'
id _IM_DOMCSSStyleDeclaration_padding(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration paddingBottom]'
id _IM_DOMCSSStyleDeclaration_paddingBottom(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration paddingLeft]'
id _IM_DOMCSSStyleDeclaration_paddingLeft(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration paddingRight]'
id _IM_DOMCSSStyleDeclaration_paddingRight(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration paddingTop]'
id _IM_DOMCSSStyleDeclaration_paddingTop(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration page]'
id _IM_DOMCSSStyleDeclaration_page(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pageBreakAfter]'
id _IM_DOMCSSStyleDeclaration_pageBreakAfter(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pageBreakBefore]'
id _IM_DOMCSSStyleDeclaration_pageBreakBefore(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pageBreakInside]'
id _IM_DOMCSSStyleDeclaration_pageBreakInside(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration parentRule]'
DOMCSSRule* _IM_DOMCSSStyleDeclaration_parentRule(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pause]'
id _IM_DOMCSSStyleDeclaration_pause(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pauseAfter]'
id _IM_DOMCSSStyleDeclaration_pauseAfter(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pauseBefore]'
id _IM_DOMCSSStyleDeclaration_pauseBefore(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pitch]'
id _IM_DOMCSSStyleDeclaration_pitch(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration pitchRange]'
id _IM_DOMCSSStyleDeclaration_pitchRange(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration playDuring]'
id _IM_DOMCSSStyleDeclaration_playDuring(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration position]'
id _IM_DOMCSSStyleDeclaration_position(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration quotes]'
id _IM_DOMCSSStyleDeclaration_quotes(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration removeProperty:]'
id _IM_DOMCSSStyleDeclaration_removeProperty_C(DOMCSSStyleDeclaration *_self, id propertyName);

// method '-[DOMCSSStyleDeclaration richness]'
id _IM_DOMCSSStyleDeclaration_richness(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration right]'
id _IM_DOMCSSStyleDeclaration_right(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration setAzimuth:]'
void _IM_DOMCSSStyleDeclaration_setAzimuth_C(DOMCSSStyleDeclaration *_self, id azimuth);

// method '-[DOMCSSStyleDeclaration setBackground:]'
void _IM_DOMCSSStyleDeclaration_setBackground_C(DOMCSSStyleDeclaration *_self, id background);

// method '-[DOMCSSStyleDeclaration setBackgroundAttachment:]'
void _IM_DOMCSSStyleDeclaration_setBackgroundAttachment_C(DOMCSSStyleDeclaration *_self, id backgroundAttachment);

// method '-[DOMCSSStyleDeclaration setBackgroundColor:]'
void _IM_DOMCSSStyleDeclaration_setBackgroundColor_C(DOMCSSStyleDeclaration *_self, id backgroundColor);

// method '-[DOMCSSStyleDeclaration setBackgroundImage:]'
void _IM_DOMCSSStyleDeclaration_setBackgroundImage_C(DOMCSSStyleDeclaration *_self, id backgroundImage);

// method '-[DOMCSSStyleDeclaration setBackgroundPosition:]'
void _IM_DOMCSSStyleDeclaration_setBackgroundPosition_C(DOMCSSStyleDeclaration *_self, id backgroundPosition);

// method '-[DOMCSSStyleDeclaration setBackgroundRepeat:]'
void _IM_DOMCSSStyleDeclaration_setBackgroundRepeat_C(DOMCSSStyleDeclaration *_self, id backgroundRepeat);

// method '-[DOMCSSStyleDeclaration setBorder:]'
void _IM_DOMCSSStyleDeclaration_setBorder_C(DOMCSSStyleDeclaration *_self, id border);

// method '-[DOMCSSStyleDeclaration setBorderBottom:]'
void _IM_DOMCSSStyleDeclaration_setBorderBottom_C(DOMCSSStyleDeclaration *_self, id borderBottom);

// method '-[DOMCSSStyleDeclaration setBorderBottomColor:]'
void _IM_DOMCSSStyleDeclaration_setBorderBottomColor_C(DOMCSSStyleDeclaration *_self, id borderBottomColor);

// method '-[DOMCSSStyleDeclaration setBorderBottomStyle:]'
void _IM_DOMCSSStyleDeclaration_setBorderBottomStyle_C(DOMCSSStyleDeclaration *_self, id borderBottomStyle);

// method '-[DOMCSSStyleDeclaration setBorderBottomWidth:]'
void _IM_DOMCSSStyleDeclaration_setBorderBottomWidth_C(DOMCSSStyleDeclaration *_self, id borderBottomWidth);

// method '-[DOMCSSStyleDeclaration setBorderCollapse:]'
void _IM_DOMCSSStyleDeclaration_setBorderCollapse_C(DOMCSSStyleDeclaration *_self, id borderCollapse);

// method '-[DOMCSSStyleDeclaration setBorderColor:]'
void _IM_DOMCSSStyleDeclaration_setBorderColor_C(DOMCSSStyleDeclaration *_self, id borderColor);

// method '-[DOMCSSStyleDeclaration setBorderLeft:]'
void _IM_DOMCSSStyleDeclaration_setBorderLeft_C(DOMCSSStyleDeclaration *_self, id borderLeft);

// method '-[DOMCSSStyleDeclaration setBorderLeftColor:]'
void _IM_DOMCSSStyleDeclaration_setBorderLeftColor_C(DOMCSSStyleDeclaration *_self, id borderLeftColor);

// method '-[DOMCSSStyleDeclaration setBorderLeftStyle:]'
void _IM_DOMCSSStyleDeclaration_setBorderLeftStyle_C(DOMCSSStyleDeclaration *_self, id borderLeftStyle);

// method '-[DOMCSSStyleDeclaration setBorderLeftWidth:]'
void _IM_DOMCSSStyleDeclaration_setBorderLeftWidth_C(DOMCSSStyleDeclaration *_self, id borderLeftWidth);

// method '-[DOMCSSStyleDeclaration setBorderRight:]'
void _IM_DOMCSSStyleDeclaration_setBorderRight_C(DOMCSSStyleDeclaration *_self, id borderRight);

// method '-[DOMCSSStyleDeclaration setBorderRightColor:]'
void _IM_DOMCSSStyleDeclaration_setBorderRightColor_C(DOMCSSStyleDeclaration *_self, id borderRightColor);

// method '-[DOMCSSStyleDeclaration setBorderRightStyle:]'
void _IM_DOMCSSStyleDeclaration_setBorderRightStyle_C(DOMCSSStyleDeclaration *_self, id borderRightStyle);

// method '-[DOMCSSStyleDeclaration setBorderRightWidth:]'
void _IM_DOMCSSStyleDeclaration_setBorderRightWidth_C(DOMCSSStyleDeclaration *_self, id borderRightWidth);

// method '-[DOMCSSStyleDeclaration setBorderSpacing:]'
void _IM_DOMCSSStyleDeclaration_setBorderSpacing_C(DOMCSSStyleDeclaration *_self, id borderSpacing);

// method '-[DOMCSSStyleDeclaration setBorderStyle:]'
void _IM_DOMCSSStyleDeclaration_setBorderStyle_C(DOMCSSStyleDeclaration *_self, id borderStyle);

// method '-[DOMCSSStyleDeclaration setBorderTop:]'
void _IM_DOMCSSStyleDeclaration_setBorderTop_C(DOMCSSStyleDeclaration *_self, id borderTop);

// method '-[DOMCSSStyleDeclaration setBorderTopColor:]'
void _IM_DOMCSSStyleDeclaration_setBorderTopColor_C(DOMCSSStyleDeclaration *_self, id borderTopColor);

// method '-[DOMCSSStyleDeclaration setBorderTopStyle:]'
void _IM_DOMCSSStyleDeclaration_setBorderTopStyle_C(DOMCSSStyleDeclaration *_self, id borderTopStyle);

// method '-[DOMCSSStyleDeclaration setBorderTopWidth:]'
void _IM_DOMCSSStyleDeclaration_setBorderTopWidth_C(DOMCSSStyleDeclaration *_self, id borderTopWidth);

// method '-[DOMCSSStyleDeclaration setBorderWidth:]'
void _IM_DOMCSSStyleDeclaration_setBorderWidth_C(DOMCSSStyleDeclaration *_self, id borderWidth);

// method '-[DOMCSSStyleDeclaration setBottom:]'
void _IM_DOMCSSStyleDeclaration_setBottom_C(DOMCSSStyleDeclaration *_self, id bottom);

// method '-[DOMCSSStyleDeclaration setCaptionSide:]'
void _IM_DOMCSSStyleDeclaration_setCaptionSide_C(DOMCSSStyleDeclaration *_self, id captionSide);

// method '-[DOMCSSStyleDeclaration setClear:]'
void _IM_DOMCSSStyleDeclaration_setClear_C(DOMCSSStyleDeclaration *_self, id clear);

// method '-[DOMCSSStyleDeclaration setClip:]'
void _IM_DOMCSSStyleDeclaration_setClip_C(DOMCSSStyleDeclaration *_self, id clip);

// method '-[DOMCSSStyleDeclaration setColor:]'
void _IM_DOMCSSStyleDeclaration_setColor_C(DOMCSSStyleDeclaration *_self, id color);

// method '-[DOMCSSStyleDeclaration setContent:]'
void _IM_DOMCSSStyleDeclaration_setContent_C(DOMCSSStyleDeclaration *_self, id content);

// method '-[DOMCSSStyleDeclaration setCounterIncrement:]'
void _IM_DOMCSSStyleDeclaration_setCounterIncrement_C(DOMCSSStyleDeclaration *_self, id counterIncrement);

// method '-[DOMCSSStyleDeclaration setCounterReset:]'
void _IM_DOMCSSStyleDeclaration_setCounterReset_C(DOMCSSStyleDeclaration *_self, id counterReset);

// method '-[DOMCSSStyleDeclaration setCssFloat:]'
void _IM_DOMCSSStyleDeclaration_setCssFloat_C(DOMCSSStyleDeclaration *_self, id cssFloat);

// method '-[DOMCSSStyleDeclaration setCssText:]'
void _IM_DOMCSSStyleDeclaration_setCssText_C(DOMCSSStyleDeclaration *_self, id cssText);

// method '-[DOMCSSStyleDeclaration setCue:]'
void _IM_DOMCSSStyleDeclaration_setCue_C(DOMCSSStyleDeclaration *_self, id cue);

// method '-[DOMCSSStyleDeclaration setCueAfter:]'
void _IM_DOMCSSStyleDeclaration_setCueAfter_C(DOMCSSStyleDeclaration *_self, id cueAfter);

// method '-[DOMCSSStyleDeclaration setCueBefore:]'
void _IM_DOMCSSStyleDeclaration_setCueBefore_C(DOMCSSStyleDeclaration *_self, id cueBefore);

// method '-[DOMCSSStyleDeclaration setCursor:]'
void _IM_DOMCSSStyleDeclaration_setCursor_C(DOMCSSStyleDeclaration *_self, id cursor);

// method '-[DOMCSSStyleDeclaration setDirection:]'
void _IM_DOMCSSStyleDeclaration_setDirection_C(DOMCSSStyleDeclaration *_self, id direction);

// method '-[DOMCSSStyleDeclaration setDisplay:]'
void _IM_DOMCSSStyleDeclaration_setDisplay_C(DOMCSSStyleDeclaration *_self, id display);

// method '-[DOMCSSStyleDeclaration setElevation:]'
void _IM_DOMCSSStyleDeclaration_setElevation_C(DOMCSSStyleDeclaration *_self, id elevation);

// method '-[DOMCSSStyleDeclaration setEmptyCells:]'
void _IM_DOMCSSStyleDeclaration_setEmptyCells_C(DOMCSSStyleDeclaration *_self, id emptyCells);

// method '-[DOMCSSStyleDeclaration setFont:]'
void _IM_DOMCSSStyleDeclaration_setFont_C(DOMCSSStyleDeclaration *_self, id font);

// method '-[DOMCSSStyleDeclaration setFontFamily:]'
void _IM_DOMCSSStyleDeclaration_setFontFamily_C(DOMCSSStyleDeclaration *_self, id fontFamily);

// method '-[DOMCSSStyleDeclaration setFontSize:]'
void _IM_DOMCSSStyleDeclaration_setFontSize_C(DOMCSSStyleDeclaration *_self, id fontSize);

// method '-[DOMCSSStyleDeclaration setFontSizeAdjust:]'
void _IM_DOMCSSStyleDeclaration_setFontSizeAdjust_C(DOMCSSStyleDeclaration *_self, id fontSizeAdjust);

// method '-[DOMCSSStyleDeclaration setFontStretch:]'
void _IM_DOMCSSStyleDeclaration_setFontStretch_C(DOMCSSStyleDeclaration *_self, id fontStretch);

// method '-[DOMCSSStyleDeclaration setFontStyle:]'
void _IM_DOMCSSStyleDeclaration_setFontStyle_C(DOMCSSStyleDeclaration *_self, id fontStyle);

// method '-[DOMCSSStyleDeclaration setFontVariant:]'
void _IM_DOMCSSStyleDeclaration_setFontVariant_C(DOMCSSStyleDeclaration *_self, id fontVariant);

// method '-[DOMCSSStyleDeclaration setFontWeight:]'
void _IM_DOMCSSStyleDeclaration_setFontWeight_C(DOMCSSStyleDeclaration *_self, id fontWeight);

// method '-[DOMCSSStyleDeclaration setHeight:]'
void _IM_DOMCSSStyleDeclaration_setHeight_C(DOMCSSStyleDeclaration *_self, id height);

// method '-[DOMCSSStyleDeclaration setLeft:]'
void _IM_DOMCSSStyleDeclaration_setLeft_C(DOMCSSStyleDeclaration *_self, id left);

// method '-[DOMCSSStyleDeclaration setLetterSpacing:]'
void _IM_DOMCSSStyleDeclaration_setLetterSpacing_C(DOMCSSStyleDeclaration *_self, id letterSpacing);

// method '-[DOMCSSStyleDeclaration setLineHeight:]'
void _IM_DOMCSSStyleDeclaration_setLineHeight_C(DOMCSSStyleDeclaration *_self, id lineHeight);

// method '-[DOMCSSStyleDeclaration setListStyle:]'
void _IM_DOMCSSStyleDeclaration_setListStyle_C(DOMCSSStyleDeclaration *_self, id listStyle);

// method '-[DOMCSSStyleDeclaration setListStyleImage:]'
void _IM_DOMCSSStyleDeclaration_setListStyleImage_C(DOMCSSStyleDeclaration *_self, id listStyleImage);

// method '-[DOMCSSStyleDeclaration setListStylePosition:]'
void _IM_DOMCSSStyleDeclaration_setListStylePosition_C(DOMCSSStyleDeclaration *_self, id listStylePosition);

// method '-[DOMCSSStyleDeclaration setListStyleType:]'
void _IM_DOMCSSStyleDeclaration_setListStyleType_C(DOMCSSStyleDeclaration *_self, id listStyleType);

// method '-[DOMCSSStyleDeclaration setMargin:]'
void _IM_DOMCSSStyleDeclaration_setMargin_C(DOMCSSStyleDeclaration *_self, id margin);

// method '-[DOMCSSStyleDeclaration setMarginBottom:]'
void _IM_DOMCSSStyleDeclaration_setMarginBottom_C(DOMCSSStyleDeclaration *_self, id marginBottom);

// method '-[DOMCSSStyleDeclaration setMarginLeft:]'
void _IM_DOMCSSStyleDeclaration_setMarginLeft_C(DOMCSSStyleDeclaration *_self, id marginLeft);

// method '-[DOMCSSStyleDeclaration setMarginRight:]'
void _IM_DOMCSSStyleDeclaration_setMarginRight_C(DOMCSSStyleDeclaration *_self, id marginRight);

// method '-[DOMCSSStyleDeclaration setMarginTop:]'
void _IM_DOMCSSStyleDeclaration_setMarginTop_C(DOMCSSStyleDeclaration *_self, id marginTop);

// method '-[DOMCSSStyleDeclaration setMarkerOffset:]'
void _IM_DOMCSSStyleDeclaration_setMarkerOffset_C(DOMCSSStyleDeclaration *_self, id markerOffset);

// method '-[DOMCSSStyleDeclaration setMarks:]'
void _IM_DOMCSSStyleDeclaration_setMarks_C(DOMCSSStyleDeclaration *_self, id marks);

// method '-[DOMCSSStyleDeclaration setMaxHeight:]'
void _IM_DOMCSSStyleDeclaration_setMaxHeight_C(DOMCSSStyleDeclaration *_self, id maxHeight);

// method '-[DOMCSSStyleDeclaration setMaxWidth:]'
void _IM_DOMCSSStyleDeclaration_setMaxWidth_C(DOMCSSStyleDeclaration *_self, id maxWidth);

// method '-[DOMCSSStyleDeclaration setMinHeight:]'
void _IM_DOMCSSStyleDeclaration_setMinHeight_C(DOMCSSStyleDeclaration *_self, id minHeight);

// method '-[DOMCSSStyleDeclaration setMinWidth:]'
void _IM_DOMCSSStyleDeclaration_setMinWidth_C(DOMCSSStyleDeclaration *_self, id minWidth);

// method '-[DOMCSSStyleDeclaration setOrphans:]'
void _IM_DOMCSSStyleDeclaration_setOrphans_C(DOMCSSStyleDeclaration *_self, id orphans);

// method '-[DOMCSSStyleDeclaration setOutline:]'
void _IM_DOMCSSStyleDeclaration_setOutline_C(DOMCSSStyleDeclaration *_self, id outline);

// method '-[DOMCSSStyleDeclaration setOutlineColor:]'
void _IM_DOMCSSStyleDeclaration_setOutlineColor_C(DOMCSSStyleDeclaration *_self, id outlineColor);

// method '-[DOMCSSStyleDeclaration setOutlineStyle:]'
void _IM_DOMCSSStyleDeclaration_setOutlineStyle_C(DOMCSSStyleDeclaration *_self, id outlineStyle);

// method '-[DOMCSSStyleDeclaration setOutlineWidth:]'
void _IM_DOMCSSStyleDeclaration_setOutlineWidth_C(DOMCSSStyleDeclaration *_self, id outlineWidth);

// method '-[DOMCSSStyleDeclaration setOverflow:]'
void _IM_DOMCSSStyleDeclaration_setOverflow_C(DOMCSSStyleDeclaration *_self, id overflow);

// method '-[DOMCSSStyleDeclaration setPadding:]'
void _IM_DOMCSSStyleDeclaration_setPadding_C(DOMCSSStyleDeclaration *_self, id padding);

// method '-[DOMCSSStyleDeclaration setPaddingBottom:]'
void _IM_DOMCSSStyleDeclaration_setPaddingBottom_C(DOMCSSStyleDeclaration *_self, id paddingBottom);

// method '-[DOMCSSStyleDeclaration setPaddingLeft:]'
void _IM_DOMCSSStyleDeclaration_setPaddingLeft_C(DOMCSSStyleDeclaration *_self, id paddingLeft);

// method '-[DOMCSSStyleDeclaration setPaddingRight:]'
void _IM_DOMCSSStyleDeclaration_setPaddingRight_C(DOMCSSStyleDeclaration *_self, id paddingRight);

// method '-[DOMCSSStyleDeclaration setPaddingTop:]'
void _IM_DOMCSSStyleDeclaration_setPaddingTop_C(DOMCSSStyleDeclaration *_self, id paddingTop);

// method '-[DOMCSSStyleDeclaration setPage:]'
void _IM_DOMCSSStyleDeclaration_setPage_C(DOMCSSStyleDeclaration *_self, id page);

// method '-[DOMCSSStyleDeclaration setPageBreakAfter:]'
void _IM_DOMCSSStyleDeclaration_setPageBreakAfter_C(DOMCSSStyleDeclaration *_self, id pageBreakAfter);

// method '-[DOMCSSStyleDeclaration setPageBreakBefore:]'
void _IM_DOMCSSStyleDeclaration_setPageBreakBefore_C(DOMCSSStyleDeclaration *_self, id pageBreakBefore);

// method '-[DOMCSSStyleDeclaration setPageBreakInside:]'
void _IM_DOMCSSStyleDeclaration_setPageBreakInside_C(DOMCSSStyleDeclaration *_self, id pageBreakInside);

// method '-[DOMCSSStyleDeclaration setPause:]'
void _IM_DOMCSSStyleDeclaration_setPause_C(DOMCSSStyleDeclaration *_self, id pause);

// method '-[DOMCSSStyleDeclaration setPauseAfter:]'
void _IM_DOMCSSStyleDeclaration_setPauseAfter_C(DOMCSSStyleDeclaration *_self, id pauseAfter);

// method '-[DOMCSSStyleDeclaration setPauseBefore:]'
void _IM_DOMCSSStyleDeclaration_setPauseBefore_C(DOMCSSStyleDeclaration *_self, id pauseBefore);

// method '-[DOMCSSStyleDeclaration setPitch:]'
void _IM_DOMCSSStyleDeclaration_setPitch_C(DOMCSSStyleDeclaration *_self, id pitch);

// method '-[DOMCSSStyleDeclaration setPitchRange:]'
void _IM_DOMCSSStyleDeclaration_setPitchRange_C(DOMCSSStyleDeclaration *_self, id pitchRange);

// method '-[DOMCSSStyleDeclaration setPlayDuring:]'
void _IM_DOMCSSStyleDeclaration_setPlayDuring_C(DOMCSSStyleDeclaration *_self, id playDuring);

// method '-[DOMCSSStyleDeclaration setPosition:]'
void _IM_DOMCSSStyleDeclaration_setPosition_C(DOMCSSStyleDeclaration *_self, id position);

// method '-[DOMCSSStyleDeclaration setProperty:::]'
void _IM_DOMCSSStyleDeclaration_setProperty_C_C_C(DOMCSSStyleDeclaration *_self, id propertyName, id value, id priority);

// method '-[DOMCSSStyleDeclaration setQuotes:]'
void _IM_DOMCSSStyleDeclaration_setQuotes_C(DOMCSSStyleDeclaration *_self, id quotes);

// method '-[DOMCSSStyleDeclaration setRichness:]'
void _IM_DOMCSSStyleDeclaration_setRichness_C(DOMCSSStyleDeclaration *_self, id richness);

// method '-[DOMCSSStyleDeclaration setRight:]'
void _IM_DOMCSSStyleDeclaration_setRight_C(DOMCSSStyleDeclaration *_self, id right);

// method '-[DOMCSSStyleDeclaration setSize:]'
void _IM_DOMCSSStyleDeclaration_setSize_C(DOMCSSStyleDeclaration *_self, id size);

// method '-[DOMCSSStyleDeclaration setSpeak:]'
void _IM_DOMCSSStyleDeclaration_setSpeak_C(DOMCSSStyleDeclaration *_self, id speak);

// method '-[DOMCSSStyleDeclaration setSpeakHeader:]'
void _IM_DOMCSSStyleDeclaration_setSpeakHeader_C(DOMCSSStyleDeclaration *_self, id speakHeader);

// method '-[DOMCSSStyleDeclaration setSpeakNumeral:]'
void _IM_DOMCSSStyleDeclaration_setSpeakNumeral_C(DOMCSSStyleDeclaration *_self, id speakNumeral);

// method '-[DOMCSSStyleDeclaration setSpeakPunctuation:]'
void _IM_DOMCSSStyleDeclaration_setSpeakPunctuation_C(DOMCSSStyleDeclaration *_self, id speakPunctuation);

// method '-[DOMCSSStyleDeclaration setSpeechRate:]'
void _IM_DOMCSSStyleDeclaration_setSpeechRate_C(DOMCSSStyleDeclaration *_self, id speechRate);

// method '-[DOMCSSStyleDeclaration setStress:]'
void _IM_DOMCSSStyleDeclaration_setStress_C(DOMCSSStyleDeclaration *_self, id stress);

// method '-[DOMCSSStyleDeclaration setTableLayout:]'
void _IM_DOMCSSStyleDeclaration_setTableLayout_C(DOMCSSStyleDeclaration *_self, id tableLayout);

// method '-[DOMCSSStyleDeclaration setTextAlign:]'
void _IM_DOMCSSStyleDeclaration_setTextAlign_C(DOMCSSStyleDeclaration *_self, id textAlign);

// method '-[DOMCSSStyleDeclaration setTextDecoration:]'
void _IM_DOMCSSStyleDeclaration_setTextDecoration_C(DOMCSSStyleDeclaration *_self, id textDecoration);

// method '-[DOMCSSStyleDeclaration setTextIndent:]'
void _IM_DOMCSSStyleDeclaration_setTextIndent_C(DOMCSSStyleDeclaration *_self, id textIndent);

// method '-[DOMCSSStyleDeclaration setTextShadow:]'
void _IM_DOMCSSStyleDeclaration_setTextShadow_C(DOMCSSStyleDeclaration *_self, id textShadow);

// method '-[DOMCSSStyleDeclaration setTextTransform:]'
void _IM_DOMCSSStyleDeclaration_setTextTransform_C(DOMCSSStyleDeclaration *_self, id textTransform);

// method '-[DOMCSSStyleDeclaration setTop:]'
void _IM_DOMCSSStyleDeclaration_setTop_C(DOMCSSStyleDeclaration *_self, id top);

// method '-[DOMCSSStyleDeclaration setUnicodeBidi:]'
void _IM_DOMCSSStyleDeclaration_setUnicodeBidi_C(DOMCSSStyleDeclaration *_self, id unicodeBidi);

// method '-[DOMCSSStyleDeclaration setVerticalAlign:]'
void _IM_DOMCSSStyleDeclaration_setVerticalAlign_C(DOMCSSStyleDeclaration *_self, id verticalAlign);

// method '-[DOMCSSStyleDeclaration setVisibility:]'
void _IM_DOMCSSStyleDeclaration_setVisibility_C(DOMCSSStyleDeclaration *_self, id visibility);

// method '-[DOMCSSStyleDeclaration setVoiceFamily:]'
void _IM_DOMCSSStyleDeclaration_setVoiceFamily_C(DOMCSSStyleDeclaration *_self, id voiceFamily);

// method '-[DOMCSSStyleDeclaration setVolume:]'
void _IM_DOMCSSStyleDeclaration_setVolume_C(DOMCSSStyleDeclaration *_self, id volume);

// method '-[DOMCSSStyleDeclaration setWhiteSpace:]'
void _IM_DOMCSSStyleDeclaration_setWhiteSpace_C(DOMCSSStyleDeclaration *_self, id whiteSpace);

// method '-[DOMCSSStyleDeclaration setWidows:]'
void _IM_DOMCSSStyleDeclaration_setWidows_C(DOMCSSStyleDeclaration *_self, id widows);

// method '-[DOMCSSStyleDeclaration setWidth:]'
void _IM_DOMCSSStyleDeclaration_setWidth_C(DOMCSSStyleDeclaration *_self, id width);

// method '-[DOMCSSStyleDeclaration setWordSpacing:]'
void _IM_DOMCSSStyleDeclaration_setWordSpacing_C(DOMCSSStyleDeclaration *_self, id wordSpacing);

// method '-[DOMCSSStyleDeclaration setZIndex:]'
void _IM_DOMCSSStyleDeclaration_setZIndex_C(DOMCSSStyleDeclaration *_self, id zIndex);

// method '-[DOMCSSStyleDeclaration size]'
id _IM_DOMCSSStyleDeclaration_size(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration speak]'
id _IM_DOMCSSStyleDeclaration_speak(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration speakHeader]'
id _IM_DOMCSSStyleDeclaration_speakHeader(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration speakNumeral]'
id _IM_DOMCSSStyleDeclaration_speakNumeral(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration speakPunctuation]'
id _IM_DOMCSSStyleDeclaration_speakPunctuation(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration speechRate]'
id _IM_DOMCSSStyleDeclaration_speechRate(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration stress]'
id _IM_DOMCSSStyleDeclaration_stress(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration tableLayout]'
id _IM_DOMCSSStyleDeclaration_tableLayout(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration textAlign]'
id _IM_DOMCSSStyleDeclaration_textAlign(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration textDecoration]'
id _IM_DOMCSSStyleDeclaration_textDecoration(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration textIndent]'
id _IM_DOMCSSStyleDeclaration_textIndent(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration textShadow]'
id _IM_DOMCSSStyleDeclaration_textShadow(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration textTransform]'
id _IM_DOMCSSStyleDeclaration_textTransform(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration top]'
id _IM_DOMCSSStyleDeclaration_top(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration unicodeBidi]'
id _IM_DOMCSSStyleDeclaration_unicodeBidi(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration verticalAlign]'
id _IM_DOMCSSStyleDeclaration_verticalAlign(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration visibility]'
id _IM_DOMCSSStyleDeclaration_visibility(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration voiceFamily]'
id _IM_DOMCSSStyleDeclaration_voiceFamily(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration volume]'
id _IM_DOMCSSStyleDeclaration_volume(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration whiteSpace]'
id _IM_DOMCSSStyleDeclaration_whiteSpace(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration widows]'
id _IM_DOMCSSStyleDeclaration_widows(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration width]'
id _IM_DOMCSSStyleDeclaration_width(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration wordSpacing]'
id _IM_DOMCSSStyleDeclaration_wordSpacing(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleDeclaration zIndex]'
id _IM_DOMCSSStyleDeclaration_zIndex(DOMCSSStyleDeclaration *_self);

// method '-[DOMCSSStyleRule selectorText]'
id _IM_DOMCSSStyleRule_selectorText(DOMCSSStyleRule *_self);

// method '-[DOMCSSStyleRule setSelectorText:]'
void _IM_DOMCSSStyleRule_setSelectorText_C(DOMCSSStyleRule *_self, id selectorText);

// method '-[DOMCSSStyleRule style]'
DOMCSSStyleDeclaration* _IM_DOMCSSStyleRule_style(DOMCSSStyleRule *_self);

// method '-[DOMCSSStyleSheet cssRules]'
DOMCSSRuleList* _IM_DOMCSSStyleSheet_cssRules(DOMCSSStyleSheet *_self);

// method '-[DOMCSSStyleSheet deleteRule:]'
void _IM_DOMCSSStyleSheet_deleteRule_C(DOMCSSStyleSheet *_self, unsigned long index);

// method '-[DOMCSSStyleSheet insertRule::]'
unsigned long _IM_DOMCSSStyleSheet_insertRule_C_C(DOMCSSStyleSheet *_self, id rule, unsigned long index);

// method '-[DOMCSSStyleSheet ownerRule]'
DOMCSSRule* _IM_DOMCSSStyleSheet_ownerRule(DOMCSSStyleSheet *_self);

// method '-[DOMCSSValue cssText]'
id _IM_DOMCSSValue_cssText(DOMCSSValue *_self);

// method '-[DOMCSSValue cssValueType]'
unsigned short _IM_DOMCSSValue_cssValueType(DOMCSSValue *_self);

// method '-[DOMCSSValue setCssText:]'
void _IM_DOMCSSValue_setCssText_C(DOMCSSValue *_self, id cssText);

// method '-[DOMCSSValueList item:]'
DOMCSSValue* _IM_DOMCSSValueList_item_C(DOMCSSValueList *_self, unsigned long index);

// method '-[DOMCSSValueList length]'
unsigned long _IM_DOMCSSValueList_length(DOMCSSValueList *_self);

// method '-[DOMCharacterData appendData:]'
void _IM_DOMCharacterData_appendData_C(DOMCharacterData *_self, id arg);

// method '-[DOMCharacterData data]'
id _IM_DOMCharacterData_data(DOMCharacterData *_self);

// method '-[DOMCharacterData deleteData::]'
void _IM_DOMCharacterData_deleteData_C_C(DOMCharacterData *_self, unsigned long offset, unsigned long count);

// method '-[DOMCharacterData insertData::]'
void _IM_DOMCharacterData_insertData_C_C(DOMCharacterData *_self, unsigned long offset, id arg);

// method '-[DOMCharacterData length]'
unsigned long _IM_DOMCharacterData_length(DOMCharacterData *_self);

// method '-[DOMCharacterData replaceData:::]'
void _IM_DOMCharacterData_replaceData_C_C_C(DOMCharacterData *_self, unsigned long offset, unsigned long count, id arg);

// method '-[DOMCharacterData setData:]'
void _IM_DOMCharacterData_setData_C(DOMCharacterData *_self, id data);

// method '-[DOMCharacterData substringData::]'
id _IM_DOMCharacterData_substringData_C_C(DOMCharacterData *_self, unsigned long offset, unsigned long count);

// method '-[DOMCounter identifier]'
id _IM_DOMCounter_identifier(DOMCounter *_self);

// method '-[DOMCounter listStyle]'
id _IM_DOMCounter_listStyle(DOMCounter *_self);

// method '-[DOMCounter separator]'
id _IM_DOMCounter_separator(DOMCounter *_self);

// method '-[DOMDocument URLWithAttributeString:]'
id _IM_DOMDocument_URLWithAttributeString_C(DOMDocument *_self, id string);

// method '-[DOMDocument createAttribute:]'
DOMAttr* _IM_DOMDocument_createAttribute_C(DOMDocument *_self, id name);

// method '-[DOMDocument createAttributeNS::]'
DOMAttr* _IM_DOMDocument_createAttributeNS_C_C(DOMDocument *_self, id namespaceURI, id qualifiedName);

// method '-[DOMDocument createCDATASection:]'
id _IM_DOMDocument_createCDATASection_C(DOMDocument *_self, id data);

// method '-[DOMDocument createCSSStyleDeclaration]'
DOMCSSStyleDeclaration* _IM_DOMDocument_createCSSStyleDeclaration(DOMDocument *_self);

// method '-[DOMDocument createComment:]'
id _IM_DOMDocument_createComment_C(DOMDocument *_self, id data);

// method '-[DOMDocument createDocumentFragment]'
id _IM_DOMDocument_createDocumentFragment(DOMDocument *_self);

// method '-[DOMDocument createElement:]'
DOMElement* _IM_DOMDocument_createElement_C(DOMDocument *_self, id tagName);

// method '-[DOMDocument createElementNS::]'
DOMElement* _IM_DOMDocument_createElementNS_C_C(DOMDocument *_self, id namespaceURI, id qualifiedName);

// method '-[DOMDocument createEntityReference:]'
id _IM_DOMDocument_createEntityReference_C(DOMDocument *_self, id name);

// method '-[DOMDocument createEvent:]'
DOMEvent* _IM_DOMDocument_createEvent_C(DOMDocument *_self, id eventType);

// method '-[DOMDocument createNodeIterator::::]'
DOMNodeIterator* _IM_DOMDocument_createNodeIterator_C_C_C_C(DOMDocument *_self, DOMNode* root, unsigned long whatToShow, id filter, BOOL expandEntityReferences);

// method '-[DOMDocument createProcessingInstruction::]'
DOMProcessingInstruction* _IM_DOMDocument_createProcessingInstruction_C_C(DOMDocument *_self, id target, id data);

// method '-[DOMDocument createRange]'
DOMRange* _IM_DOMDocument_createRange(DOMDocument *_self);

// method '-[DOMDocument createTextNode:]'
DOMText* _IM_DOMDocument_createTextNode_C(DOMDocument *_self, id data);

// method '-[DOMDocument createTreeWalker::::]'
DOMTreeWalker* _IM_DOMDocument_createTreeWalker_C_C_C_C(DOMDocument *_self, DOMNode* root, unsigned long whatToShow, id filter, BOOL expandEntityReferences);

// method '-[DOMDocument defaultView]'
DOMAbstractView* _IM_DOMDocument_defaultView(DOMDocument *_self);

// method '-[DOMDocument doctype]'
DOMDocumentType* _IM_DOMDocument_doctype(DOMDocument *_self);

// method '-[DOMDocument documentElement]'
DOMElement* _IM_DOMDocument_documentElement(DOMDocument *_self);

// method '-[DOMDocument getComputedStyle::]'
DOMCSSStyleDeclaration* _IM_DOMDocument_getComputedStyle_C_C(DOMDocument *_self, DOMElement* elt, id pseudoElt);

// method '-[DOMDocument getElementById:]'
DOMElement* _IM_DOMDocument_getElementById_C(DOMDocument *_self, id elementId);

// method '-[DOMDocument getElementsByTagName:]'
DOMNodeList* _IM_DOMDocument_getElementsByTagName_C(DOMDocument *_self, id tagname);

// method '-[DOMDocument getElementsByTagNameNS::]'
DOMNodeList* _IM_DOMDocument_getElementsByTagNameNS_C_C(DOMDocument *_self, id namespaceURI, id localName);

// method '-[DOMDocument getOverrideStyle::]'
DOMCSSStyleDeclaration* _IM_DOMDocument_getOverrideStyle_C_C(DOMDocument *_self, DOMElement* elt, id pseudoElt);

// method '-[DOMDocument implementation]'
DOMImplementation* _IM_DOMDocument_implementation(DOMDocument *_self);

// method '-[DOMDocument importNode::]'
DOMNode* _IM_DOMDocument_importNode_C_C(DOMDocument *_self, DOMNode* importedNode, BOOL deep);

// method '-[DOMDocument styleSheets]'
DOMStyleSheetList* _IM_DOMDocument_styleSheets(DOMDocument *_self);

// method '-[DOMDocument webFrame]'
WebFrame* _IM_DOMDocument_webFrame(DOMDocument *_self);

// method '-[DOMDocumentType entities]'
DOMNamedNodeMap* _IM_DOMDocumentType_entities(DOMDocumentType *_self);

// method '-[DOMDocumentType internalSubset]'
id _IM_DOMDocumentType_internalSubset(DOMDocumentType *_self);

// method '-[DOMDocumentType name]'
id _IM_DOMDocumentType_name(DOMDocumentType *_self);

// method '-[DOMDocumentType notations]'
DOMNamedNodeMap* _IM_DOMDocumentType_notations(DOMDocumentType *_self);

// method '-[DOMDocumentType publicId]'
id _IM_DOMDocumentType_publicId(DOMDocumentType *_self);

// method '-[DOMDocumentType systemId]'
id _IM_DOMDocumentType_systemId(DOMDocumentType *_self);

// method '-[DOMElement getAttribute:]'
id _IM_DOMElement_getAttribute_C(DOMElement *_self, id name);

// method '-[DOMElement getAttributeNS::]'
id _IM_DOMElement_getAttributeNS_C_C(DOMElement *_self, id namespaceURI, id localName);

// method '-[DOMElement getAttributeNode:]'
DOMAttr* _IM_DOMElement_getAttributeNode_C(DOMElement *_self, id name);

// method '-[DOMElement getAttributeNodeNS::]'
DOMAttr* _IM_DOMElement_getAttributeNodeNS_C_C(DOMElement *_self, id namespaceURI, id localName);

// method '-[DOMElement getElementsByTagName:]'
DOMNodeList* _IM_DOMElement_getElementsByTagName_C(DOMElement *_self, id name);

// method '-[DOMElement getElementsByTagNameNS::]'
DOMNodeList* _IM_DOMElement_getElementsByTagNameNS_C_C(DOMElement *_self, id namespaceURI, id localName);

// method '-[DOMElement hasAttribute:]'
BOOL _IM_DOMElement_hasAttribute_C(DOMElement *_self, id name);

// method '-[DOMElement hasAttributeNS::]'
BOOL _IM_DOMElement_hasAttributeNS_C_C(DOMElement *_self, id namespaceURI, id localName);

// method '-[DOMElement removeAttribute:]'
void _IM_DOMElement_removeAttribute_C(DOMElement *_self, id name);

// method '-[DOMElement removeAttributeNS::]'
void _IM_DOMElement_removeAttributeNS_C_C(DOMElement *_self, id namespaceURI, id localName);

// method '-[DOMElement removeAttributeNode:]'
DOMAttr* _IM_DOMElement_removeAttributeNode_C(DOMElement *_self, DOMAttr* oldAttr);

// method '-[DOMElement setAttribute::]'
void _IM_DOMElement_setAttribute_C_C(DOMElement *_self, id name, id value);

// method '-[DOMElement setAttributeNS:::]'
void _IM_DOMElement_setAttributeNS_C_C_C(DOMElement *_self, id namespaceURI, id qualifiedName, id value);

// method '-[DOMElement setAttributeNode:]'
DOMAttr* _IM_DOMElement_setAttributeNode_C(DOMElement *_self, DOMAttr* newAttr);

// method '-[DOMElement setAttributeNodeNS:]'
DOMAttr* _IM_DOMElement_setAttributeNodeNS_C(DOMElement *_self, DOMAttr* newAttr);

// method '-[DOMElement style]'
DOMCSSStyleDeclaration* _IM_DOMElement_style(DOMElement *_self);

// method '-[DOMElement tagName]'
id _IM_DOMElement_tagName(DOMElement *_self);

// method '-[DOMEntity notationName]'
id _IM_DOMEntity_notationName(DOMEntity *_self);

// method '-[DOMEntity publicId]'
id _IM_DOMEntity_publicId(DOMEntity *_self);

// method '-[DOMEntity systemId]'
id _IM_DOMEntity_systemId(DOMEntity *_self);

// method '-[DOMEvent bubbles]'
BOOL _IM_DOMEvent_bubbles(DOMEvent *_self);

// method '-[DOMEvent cancelable]'
BOOL _IM_DOMEvent_cancelable(DOMEvent *_self);

// method '-[DOMEvent currentTarget]'
id _IM_DOMEvent_currentTarget(DOMEvent *_self);

// method '-[DOMEvent eventPhase]'
unsigned short _IM_DOMEvent_eventPhase(DOMEvent *_self);

// method '-[DOMEvent initEvent:::]'
void _IM_DOMEvent_initEvent_C_C_C(DOMEvent *_self, id eventTypeArg, BOOL canBubbleArg, BOOL cancelableArg);

// method '-[DOMEvent preventDefault]'
void _IM_DOMEvent_preventDefault(DOMEvent *_self);

// method '-[DOMEvent stopPropagation]'
void _IM_DOMEvent_stopPropagation(DOMEvent *_self);

// method '-[DOMEvent target]'
id _IM_DOMEvent_target(DOMEvent *_self);

// method '-[DOMEvent timeStamp]'
unsigned long long _IM_DOMEvent_timeStamp(DOMEvent *_self);

// method '-[DOMEvent type]'
id _IM_DOMEvent_type(DOMEvent *_self);

// method '-[DOMHTMLAnchorElement accessKey]'
id _IM_DOMHTMLAnchorElement_accessKey(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement blur]'
void _IM_DOMHTMLAnchorElement_blur(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement charset]'
id _IM_DOMHTMLAnchorElement_charset(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement coords]'
id _IM_DOMHTMLAnchorElement_coords(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement focus]'
void _IM_DOMHTMLAnchorElement_focus(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement href]'
id _IM_DOMHTMLAnchorElement_href(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement hreflang]'
id _IM_DOMHTMLAnchorElement_hreflang(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement name]'
id _IM_DOMHTMLAnchorElement_name(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement rel]'
id _IM_DOMHTMLAnchorElement_rel(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement rev]'
id _IM_DOMHTMLAnchorElement_rev(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement setAccessKey:]'
void _IM_DOMHTMLAnchorElement_setAccessKey_C(DOMHTMLAnchorElement *_self, id accessKey);

// method '-[DOMHTMLAnchorElement setCharset:]'
void _IM_DOMHTMLAnchorElement_setCharset_C(DOMHTMLAnchorElement *_self, id charset);

// method '-[DOMHTMLAnchorElement setCoords:]'
void _IM_DOMHTMLAnchorElement_setCoords_C(DOMHTMLAnchorElement *_self, id coords);

// method '-[DOMHTMLAnchorElement setHref:]'
void _IM_DOMHTMLAnchorElement_setHref_C(DOMHTMLAnchorElement *_self, id href);

// method '-[DOMHTMLAnchorElement setHreflang:]'
void _IM_DOMHTMLAnchorElement_setHreflang_C(DOMHTMLAnchorElement *_self, id hreflang);

// method '-[DOMHTMLAnchorElement setName:]'
void _IM_DOMHTMLAnchorElement_setName_C(DOMHTMLAnchorElement *_self, id name);

// method '-[DOMHTMLAnchorElement setRel:]'
void _IM_DOMHTMLAnchorElement_setRel_C(DOMHTMLAnchorElement *_self, id rel);

// method '-[DOMHTMLAnchorElement setRev:]'
void _IM_DOMHTMLAnchorElement_setRev_C(DOMHTMLAnchorElement *_self, id rev);

// method '-[DOMHTMLAnchorElement setShape:]'
void _IM_DOMHTMLAnchorElement_setShape_C(DOMHTMLAnchorElement *_self, id shape);

// method '-[DOMHTMLAnchorElement setTabIndex:]'
void _IM_DOMHTMLAnchorElement_setTabIndex_C(DOMHTMLAnchorElement *_self, long tabIndex);

// method '-[DOMHTMLAnchorElement setTarget:]'
void _IM_DOMHTMLAnchorElement_setTarget_C(DOMHTMLAnchorElement *_self, id target);

// method '-[DOMHTMLAnchorElement setType:]'
void _IM_DOMHTMLAnchorElement_setType_C(DOMHTMLAnchorElement *_self, id type);

// method '-[DOMHTMLAnchorElement shape]'
id _IM_DOMHTMLAnchorElement_shape(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement tabIndex]'
long _IM_DOMHTMLAnchorElement_tabIndex(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement target]'
id _IM_DOMHTMLAnchorElement_target(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAnchorElement type]'
id _IM_DOMHTMLAnchorElement_type(DOMHTMLAnchorElement *_self);

// method '-[DOMHTMLAppletElement align]'
id _IM_DOMHTMLAppletElement_align(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement alt]'
id _IM_DOMHTMLAppletElement_alt(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement archive]'
id _IM_DOMHTMLAppletElement_archive(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement code]'
id _IM_DOMHTMLAppletElement_code(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement codeBase]'
id _IM_DOMHTMLAppletElement_codeBase(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement height]'
id _IM_DOMHTMLAppletElement_height(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement hspace]'
long _IM_DOMHTMLAppletElement_hspace(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement name]'
id _IM_DOMHTMLAppletElement_name(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement object]'
id _IM_DOMHTMLAppletElement_object(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement setAlign:]'
void _IM_DOMHTMLAppletElement_setAlign_C(DOMHTMLAppletElement *_self, id align);

// method '-[DOMHTMLAppletElement setAlt:]'
void _IM_DOMHTMLAppletElement_setAlt_C(DOMHTMLAppletElement *_self, id alt);

// method '-[DOMHTMLAppletElement setArchive:]'
void _IM_DOMHTMLAppletElement_setArchive_C(DOMHTMLAppletElement *_self, id archive);

// method '-[DOMHTMLAppletElement setCode:]'
void _IM_DOMHTMLAppletElement_setCode_C(DOMHTMLAppletElement *_self, id code);

// method '-[DOMHTMLAppletElement setCodeBase:]'
void _IM_DOMHTMLAppletElement_setCodeBase_C(DOMHTMLAppletElement *_self, id codeBase);

// method '-[DOMHTMLAppletElement setHeight:]'
void _IM_DOMHTMLAppletElement_setHeight_C(DOMHTMLAppletElement *_self, id height);

// method '-[DOMHTMLAppletElement setHspace:]'
void _IM_DOMHTMLAppletElement_setHspace_C(DOMHTMLAppletElement *_self, long hspace);

// method '-[DOMHTMLAppletElement setName:]'
void _IM_DOMHTMLAppletElement_setName_C(DOMHTMLAppletElement *_self, id name);

// method '-[DOMHTMLAppletElement setObject:]'
void _IM_DOMHTMLAppletElement_setObject_C(DOMHTMLAppletElement *_self, id object);

// method '-[DOMHTMLAppletElement setVspace:]'
void _IM_DOMHTMLAppletElement_setVspace_C(DOMHTMLAppletElement *_self, long vspace);

// method '-[DOMHTMLAppletElement setWidth:]'
void _IM_DOMHTMLAppletElement_setWidth_C(DOMHTMLAppletElement *_self, id width);

// method '-[DOMHTMLAppletElement vspace]'
long _IM_DOMHTMLAppletElement_vspace(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAppletElement width]'
id _IM_DOMHTMLAppletElement_width(DOMHTMLAppletElement *_self);

// method '-[DOMHTMLAreaElement accessKey]'
id _IM_DOMHTMLAreaElement_accessKey(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement alt]'
id _IM_DOMHTMLAreaElement_alt(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement coords]'
id _IM_DOMHTMLAreaElement_coords(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement href]'
id _IM_DOMHTMLAreaElement_href(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement noHref]'
BOOL _IM_DOMHTMLAreaElement_noHref(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement setAccessKey:]'
void _IM_DOMHTMLAreaElement_setAccessKey_C(DOMHTMLAreaElement *_self, id accessKey);

// method '-[DOMHTMLAreaElement setAlt:]'
void _IM_DOMHTMLAreaElement_setAlt_C(DOMHTMLAreaElement *_self, id alt);

// method '-[DOMHTMLAreaElement setCoords:]'
void _IM_DOMHTMLAreaElement_setCoords_C(DOMHTMLAreaElement *_self, id coords);

// method '-[DOMHTMLAreaElement setHref:]'
void _IM_DOMHTMLAreaElement_setHref_C(DOMHTMLAreaElement *_self, id href);

// method '-[DOMHTMLAreaElement setNoHref:]'
void _IM_DOMHTMLAreaElement_setNoHref_C(DOMHTMLAreaElement *_self, BOOL noHref);

// method '-[DOMHTMLAreaElement setShape:]'
void _IM_DOMHTMLAreaElement_setShape_C(DOMHTMLAreaElement *_self, id shape);

// method '-[DOMHTMLAreaElement setTabIndex:]'
void _IM_DOMHTMLAreaElement_setTabIndex_C(DOMHTMLAreaElement *_self, long tabIndex);

// method '-[DOMHTMLAreaElement setTarget:]'
void _IM_DOMHTMLAreaElement_setTarget_C(DOMHTMLAreaElement *_self, id target);

// method '-[DOMHTMLAreaElement shape]'
id _IM_DOMHTMLAreaElement_shape(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement tabIndex]'
long _IM_DOMHTMLAreaElement_tabIndex(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLAreaElement target]'
id _IM_DOMHTMLAreaElement_target(DOMHTMLAreaElement *_self);

// method '-[DOMHTMLBRElement clear]'
id _IM_DOMHTMLBRElement_clear(DOMHTMLBRElement *_self);

// method '-[DOMHTMLBRElement setClear:]'
void _IM_DOMHTMLBRElement_setClear_C(DOMHTMLBRElement *_self, id clear);

// method '-[DOMHTMLBaseElement href]'
id _IM_DOMHTMLBaseElement_href(DOMHTMLBaseElement *_self);

// method '-[DOMHTMLBaseElement setHref:]'
void _IM_DOMHTMLBaseElement_setHref_C(DOMHTMLBaseElement *_self, id href);

// method '-[DOMHTMLBaseElement setTarget:]'
void _IM_DOMHTMLBaseElement_setTarget_C(DOMHTMLBaseElement *_self, id target);

// method '-[DOMHTMLBaseElement target]'
id _IM_DOMHTMLBaseElement_target(DOMHTMLBaseElement *_self);

// method '-[DOMHTMLBaseFontElement color]'
id _IM_DOMHTMLBaseFontElement_color(DOMHTMLBaseFontElement *_self);

// method '-[DOMHTMLBaseFontElement face]'
id _IM_DOMHTMLBaseFontElement_face(DOMHTMLBaseFontElement *_self);

// method '-[DOMHTMLBaseFontElement setColor:]'
void _IM_DOMHTMLBaseFontElement_setColor_C(DOMHTMLBaseFontElement *_self, id color);

// method '-[DOMHTMLBaseFontElement setFace:]'
void _IM_DOMHTMLBaseFontElement_setFace_C(DOMHTMLBaseFontElement *_self, id face);

// method '-[DOMHTMLBaseFontElement setSize:]'
void _IM_DOMHTMLBaseFontElement_setSize_C(DOMHTMLBaseFontElement *_self, id size);

// method '-[DOMHTMLBaseFontElement size]'
id _IM_DOMHTMLBaseFontElement_size(DOMHTMLBaseFontElement *_self);

// method '-[DOMHTMLBodyElement aLink]'
id _IM_DOMHTMLBodyElement_aLink(DOMHTMLBodyElement *_self);

// method '-[DOMHTMLBodyElement background]'
id _IM_DOMHTMLBodyElement_background(DOMHTMLBodyElement *_self);

// method '-[DOMHTMLBodyElement bgColor]'
id _IM_DOMHTMLBodyElement_bgColor(DOMHTMLBodyElement *_self);

// method '-[DOMHTMLBodyElement link]'
id _IM_DOMHTMLBodyElement_link(DOMHTMLBodyElement *_self);

// method '-[DOMHTMLBodyElement setALink:]'
void _IM_DOMHTMLBodyElement_setALink_C(DOMHTMLBodyElement *_self, id aLink);

// method '-[DOMHTMLBodyElement setBackground:]'
void _IM_DOMHTMLBodyElement_setBackground_C(DOMHTMLBodyElement *_self, id background);

// method '-[DOMHTMLBodyElement setBgColor:]'
void _IM_DOMHTMLBodyElement_setBgColor_C(DOMHTMLBodyElement *_self, id bgColor);

// method '-[DOMHTMLBodyElement setLink:]'
void _IM_DOMHTMLBodyElement_setLink_C(DOMHTMLBodyElement *_self, id link);

// method '-[DOMHTMLBodyElement setText:]'
void _IM_DOMHTMLBodyElement_setText_C(DOMHTMLBodyElement *_self, id text);

// method '-[DOMHTMLBodyElement setVLink:]'
void _IM_DOMHTMLBodyElement_setVLink_C(DOMHTMLBodyElement *_self, id vLink);

// method '-[DOMHTMLBodyElement text]'
id _IM_DOMHTMLBodyElement_text(DOMHTMLBodyElement *_self);

// method '-[DOMHTMLBodyElement vLink]'
id _IM_DOMHTMLBodyElement_vLink(DOMHTMLBodyElement *_self);

// method '-[DOMHTMLButtonElement accessKey]'
id _IM_DOMHTMLButtonElement_accessKey(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLButtonElement disabled]'
BOOL _IM_DOMHTMLButtonElement_disabled(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLButtonElement form]'
DOMHTMLFormElement* _IM_DOMHTMLButtonElement_form(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLButtonElement name]'
id _IM_DOMHTMLButtonElement_name(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLButtonElement setAccessKey:]'
void _IM_DOMHTMLButtonElement_setAccessKey_C(DOMHTMLButtonElement *_self, id accessKey);

// method '-[DOMHTMLButtonElement setDisabled:]'
void _IM_DOMHTMLButtonElement_setDisabled_C(DOMHTMLButtonElement *_self, BOOL disabled);

// method '-[DOMHTMLButtonElement setName:]'
void _IM_DOMHTMLButtonElement_setName_C(DOMHTMLButtonElement *_self, id name);

// method '-[DOMHTMLButtonElement setTabIndex:]'
void _IM_DOMHTMLButtonElement_setTabIndex_C(DOMHTMLButtonElement *_self, long tabIndex);

// method '-[DOMHTMLButtonElement setValue:]'
void _IM_DOMHTMLButtonElement_setValue_C(DOMHTMLButtonElement *_self, id value);

// method '-[DOMHTMLButtonElement tabIndex]'
long _IM_DOMHTMLButtonElement_tabIndex(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLButtonElement type]'
id _IM_DOMHTMLButtonElement_type(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLButtonElement value]'
id _IM_DOMHTMLButtonElement_value(DOMHTMLButtonElement *_self);

// method '-[DOMHTMLCollection item:]'
DOMNode* _IM_DOMHTMLCollection_item_C(DOMHTMLCollection *_self, unsigned long index);

// method '-[DOMHTMLCollection length]'
unsigned long _IM_DOMHTMLCollection_length(DOMHTMLCollection *_self);

// method '-[DOMHTMLCollection namedItem:]'
DOMNode* _IM_DOMHTMLCollection_namedItem_C(DOMHTMLCollection *_self, id name);

// method '-[DOMHTMLDListElement compact]'
BOOL _IM_DOMHTMLDListElement_compact(DOMHTMLDListElement *_self);

// method '-[DOMHTMLDListElement setCompact:]'
void _IM_DOMHTMLDListElement_setCompact_C(DOMHTMLDListElement *_self, BOOL compact);

// method '-[DOMHTMLDirectoryElement compact]'
BOOL _IM_DOMHTMLDirectoryElement_compact(DOMHTMLDirectoryElement *_self);

// method '-[DOMHTMLDirectoryElement setCompact:]'
void _IM_DOMHTMLDirectoryElement_setCompact_C(DOMHTMLDirectoryElement *_self, BOOL compact);

// method '-[DOMHTMLDivElement align]'
id _IM_DOMHTMLDivElement_align(DOMHTMLDivElement *_self);

// method '-[DOMHTMLDivElement setAlign:]'
void _IM_DOMHTMLDivElement_setAlign_C(DOMHTMLDivElement *_self, id align);

// method '-[DOMHTMLDocument URL]'
id _IM_DOMHTMLDocument_URL(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument anchors]'
DOMHTMLCollection* _IM_DOMHTMLDocument_anchors(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument applets]'
DOMHTMLCollection* _IM_DOMHTMLDocument_applets(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument body]'
DOMHTMLElement* _IM_DOMHTMLDocument_body(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument close]'
void _IM_DOMHTMLDocument_close(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument cookie]'
id _IM_DOMHTMLDocument_cookie(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument domain]'
id _IM_DOMHTMLDocument_domain(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument forms]'
DOMHTMLCollection* _IM_DOMHTMLDocument_forms(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument getElementById:]'
DOMElement* _IM_DOMHTMLDocument_getElementById_C(DOMHTMLDocument *_self, id elementId);

// method '-[DOMHTMLDocument getElementsByName:]'
DOMNodeList* _IM_DOMHTMLDocument_getElementsByName_C(DOMHTMLDocument *_self, id elementName);

// method '-[DOMHTMLDocument images]'
DOMHTMLCollection* _IM_DOMHTMLDocument_images(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument links]'
DOMHTMLCollection* _IM_DOMHTMLDocument_links(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument open]'
void _IM_DOMHTMLDocument_open(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument referrer]'
id _IM_DOMHTMLDocument_referrer(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument setBody:]'
void _IM_DOMHTMLDocument_setBody_C(DOMHTMLDocument *_self, DOMHTMLElement* body);

// method '-[DOMHTMLDocument setCookie:]'
void _IM_DOMHTMLDocument_setCookie_C(DOMHTMLDocument *_self, id cookie);

// method '-[DOMHTMLDocument setTitle:]'
void _IM_DOMHTMLDocument_setTitle_C(DOMHTMLDocument *_self, id title);

// method '-[DOMHTMLDocument title]'
id _IM_DOMHTMLDocument_title(DOMHTMLDocument *_self);

// method '-[DOMHTMLDocument write:]'
void _IM_DOMHTMLDocument_write_C(DOMHTMLDocument *_self, id text);

// method '-[DOMHTMLDocument writeln:]'
void _IM_DOMHTMLDocument_writeln_C(DOMHTMLDocument *_self, id text);

// method '-[DOMHTMLElement children]'
DOMHTMLCollection* _IM_DOMHTMLElement_children(DOMHTMLElement *_self);

// method '-[DOMHTMLElement className]'
id _IM_DOMHTMLElement_className(DOMHTMLElement *_self);

// method '-[DOMHTMLElement contentEditable]'
id _IM_DOMHTMLElement_contentEditable(DOMHTMLElement *_self);

// method '-[DOMHTMLElement dir]'
id _IM_DOMHTMLElement_dir(DOMHTMLElement *_self);

// method '-[DOMHTMLElement idName]'
id _IM_DOMHTMLElement_idName(DOMHTMLElement *_self);

// method '-[DOMHTMLElement innerHTML]'
id _IM_DOMHTMLElement_innerHTML(DOMHTMLElement *_self);

// method '-[DOMHTMLElement innerText]'
id _IM_DOMHTMLElement_innerText(DOMHTMLElement *_self);

// method '-[DOMHTMLElement isContentEditable]'
BOOL _IM_DOMHTMLElement_isContentEditable(DOMHTMLElement *_self);

// method '-[DOMHTMLElement lang]'
id _IM_DOMHTMLElement_lang(DOMHTMLElement *_self);

// method '-[DOMHTMLElement outerHTML]'
id _IM_DOMHTMLElement_outerHTML(DOMHTMLElement *_self);

// method '-[DOMHTMLElement outerText]'
id _IM_DOMHTMLElement_outerText(DOMHTMLElement *_self);

// method '-[DOMHTMLElement setClassName:]'
void _IM_DOMHTMLElement_setClassName_C(DOMHTMLElement *_self, id className);

// method '-[DOMHTMLElement setContentEditable:]'
void _IM_DOMHTMLElement_setContentEditable_C(DOMHTMLElement *_self, id contentEditable);

// method '-[DOMHTMLElement setDir:]'
void _IM_DOMHTMLElement_setDir_C(DOMHTMLElement *_self, id dir);

// method '-[DOMHTMLElement setIdName:]'
void _IM_DOMHTMLElement_setIdName_C(DOMHTMLElement *_self, id idName);

// method '-[DOMHTMLElement setInnerHTML:]'
void _IM_DOMHTMLElement_setInnerHTML_C(DOMHTMLElement *_self, id innerHTML);

// method '-[DOMHTMLElement setInnerText:]'
void _IM_DOMHTMLElement_setInnerText_C(DOMHTMLElement *_self, id innerText);

// method '-[DOMHTMLElement setLang:]'
void _IM_DOMHTMLElement_setLang_C(DOMHTMLElement *_self, id lang);

// method '-[DOMHTMLElement setOuterHTML:]'
void _IM_DOMHTMLElement_setOuterHTML_C(DOMHTMLElement *_self, id outerHTML);

// method '-[DOMHTMLElement setOuterText:]'
void _IM_DOMHTMLElement_setOuterText_C(DOMHTMLElement *_self, id outerText);

// method '-[DOMHTMLElement setTitle:]'
void _IM_DOMHTMLElement_setTitle_C(DOMHTMLElement *_self, id title);

// method '-[DOMHTMLElement title]'
id _IM_DOMHTMLElement_title(DOMHTMLElement *_self);

// method '-[DOMHTMLEmbedElement align]'
id _IM_DOMHTMLEmbedElement_align(DOMHTMLEmbedElement *_self);

// method '-[DOMHTMLEmbedElement height]'
long _IM_DOMHTMLEmbedElement_height(DOMHTMLEmbedElement *_self);

// method '-[DOMHTMLEmbedElement name]'
id _IM_DOMHTMLEmbedElement_name(DOMHTMLEmbedElement *_self);

// method '-[DOMHTMLEmbedElement setAlign:]'
void _IM_DOMHTMLEmbedElement_setAlign_C(DOMHTMLEmbedElement *_self, id align);

// method '-[DOMHTMLEmbedElement setHeight:]'
void _IM_DOMHTMLEmbedElement_setHeight_C(DOMHTMLEmbedElement *_self, long height);

// method '-[DOMHTMLEmbedElement setName:]'
void _IM_DOMHTMLEmbedElement_setName_C(DOMHTMLEmbedElement *_self, id name);

// method '-[DOMHTMLEmbedElement setSrc:]'
void _IM_DOMHTMLEmbedElement_setSrc_C(DOMHTMLEmbedElement *_self, id src);

// method '-[DOMHTMLEmbedElement setType:]'
void _IM_DOMHTMLEmbedElement_setType_C(DOMHTMLEmbedElement *_self, id type);

// method '-[DOMHTMLEmbedElement setWidth:]'
void _IM_DOMHTMLEmbedElement_setWidth_C(DOMHTMLEmbedElement *_self, long width);

// method '-[DOMHTMLEmbedElement src]'
id _IM_DOMHTMLEmbedElement_src(DOMHTMLEmbedElement *_self);

// method '-[DOMHTMLEmbedElement type]'
id _IM_DOMHTMLEmbedElement_type(DOMHTMLEmbedElement *_self);

// method '-[DOMHTMLEmbedElement width]'
long _IM_DOMHTMLEmbedElement_width(DOMHTMLEmbedElement *_self);

// method '-[DOMHTMLFieldSetElement form]'
DOMHTMLFormElement* _IM_DOMHTMLFieldSetElement_form(DOMHTMLFieldSetElement *_self);

// method '-[DOMHTMLFontElement color]'
id _IM_DOMHTMLFontElement_color(DOMHTMLFontElement *_self);

// method '-[DOMHTMLFontElement face]'
id _IM_DOMHTMLFontElement_face(DOMHTMLFontElement *_self);

// method '-[DOMHTMLFontElement setColor:]'
void _IM_DOMHTMLFontElement_setColor_C(DOMHTMLFontElement *_self, id color);

// method '-[DOMHTMLFontElement setFace:]'
void _IM_DOMHTMLFontElement_setFace_C(DOMHTMLFontElement *_self, id face);

// method '-[DOMHTMLFontElement setSize:]'
void _IM_DOMHTMLFontElement_setSize_C(DOMHTMLFontElement *_self, id size);

// method '-[DOMHTMLFontElement size]'
id _IM_DOMHTMLFontElement_size(DOMHTMLFontElement *_self);

// method '-[DOMHTMLFormElement acceptCharset]'
id _IM_DOMHTMLFormElement_acceptCharset(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement action]'
id _IM_DOMHTMLFormElement_action(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement elements]'
DOMHTMLCollection* _IM_DOMHTMLFormElement_elements(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement enctype]'
id _IM_DOMHTMLFormElement_enctype(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement length]'
long _IM_DOMHTMLFormElement_length(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement method]'
id _IM_DOMHTMLFormElement_method(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement name]'
id _IM_DOMHTMLFormElement_name(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement reset]'
void _IM_DOMHTMLFormElement_reset(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement setAcceptCharset:]'
void _IM_DOMHTMLFormElement_setAcceptCharset_C(DOMHTMLFormElement *_self, id acceptCharset);

// method '-[DOMHTMLFormElement setAction:]'
void _IM_DOMHTMLFormElement_setAction_C(DOMHTMLFormElement *_self, id action);

// method '-[DOMHTMLFormElement setEnctype:]'
void _IM_DOMHTMLFormElement_setEnctype_C(DOMHTMLFormElement *_self, id enctype);

// method '-[DOMHTMLFormElement setMethod:]'
void _IM_DOMHTMLFormElement_setMethod_C(DOMHTMLFormElement *_self, id method);

// method '-[DOMHTMLFormElement setName:]'
void _IM_DOMHTMLFormElement_setName_C(DOMHTMLFormElement *_self, id name);

// method '-[DOMHTMLFormElement setTarget:]'
void _IM_DOMHTMLFormElement_setTarget_C(DOMHTMLFormElement *_self, id target);

// method '-[DOMHTMLFormElement submit]'
void _IM_DOMHTMLFormElement_submit(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFormElement target]'
id _IM_DOMHTMLFormElement_target(DOMHTMLFormElement *_self);

// method '-[DOMHTMLFrameElement contentDocument]'
DOMDocument* _IM_DOMHTMLFrameElement_contentDocument(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement contentFrame]'
WebFrame* _IM_DOMHTMLFrameElement_contentFrame(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement frameBorder]'
id _IM_DOMHTMLFrameElement_frameBorder(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement longDesc]'
id _IM_DOMHTMLFrameElement_longDesc(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement marginHeight]'
id _IM_DOMHTMLFrameElement_marginHeight(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement marginWidth]'
id _IM_DOMHTMLFrameElement_marginWidth(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement name]'
id _IM_DOMHTMLFrameElement_name(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement noResize]'
BOOL _IM_DOMHTMLFrameElement_noResize(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement scrolling]'
id _IM_DOMHTMLFrameElement_scrolling(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameElement setFrameBorder:]'
void _IM_DOMHTMLFrameElement_setFrameBorder_C(DOMHTMLFrameElement *_self, id frameBorder);

// method '-[DOMHTMLFrameElement setLongDesc:]'
void _IM_DOMHTMLFrameElement_setLongDesc_C(DOMHTMLFrameElement *_self, id longDesc);

// method '-[DOMHTMLFrameElement setMarginHeight:]'
void _IM_DOMHTMLFrameElement_setMarginHeight_C(DOMHTMLFrameElement *_self, id marginHeight);

// method '-[DOMHTMLFrameElement setMarginWidth:]'
void _IM_DOMHTMLFrameElement_setMarginWidth_C(DOMHTMLFrameElement *_self, id marginWidth);

// method '-[DOMHTMLFrameElement setName:]'
void _IM_DOMHTMLFrameElement_setName_C(DOMHTMLFrameElement *_self, id name);

// method '-[DOMHTMLFrameElement setNoResize:]'
void _IM_DOMHTMLFrameElement_setNoResize_C(DOMHTMLFrameElement *_self, BOOL noResize);

// method '-[DOMHTMLFrameElement setScrolling:]'
void _IM_DOMHTMLFrameElement_setScrolling_C(DOMHTMLFrameElement *_self, id scrolling);

// method '-[DOMHTMLFrameElement setSrc:]'
void _IM_DOMHTMLFrameElement_setSrc_C(DOMHTMLFrameElement *_self, id src);

// method '-[DOMHTMLFrameElement src]'
id _IM_DOMHTMLFrameElement_src(DOMHTMLFrameElement *_self);

// method '-[DOMHTMLFrameSetElement cols]'
id _IM_DOMHTMLFrameSetElement_cols(DOMHTMLFrameSetElement *_self);

// method '-[DOMHTMLFrameSetElement rows]'
id _IM_DOMHTMLFrameSetElement_rows(DOMHTMLFrameSetElement *_self);

// method '-[DOMHTMLFrameSetElement setCols:]'
void _IM_DOMHTMLFrameSetElement_setCols_C(DOMHTMLFrameSetElement *_self, id cols);

// method '-[DOMHTMLFrameSetElement setRows:]'
void _IM_DOMHTMLFrameSetElement_setRows_C(DOMHTMLFrameSetElement *_self, id rows);

// method '-[DOMHTMLHRElement align]'
id _IM_DOMHTMLHRElement_align(DOMHTMLHRElement *_self);

// method '-[DOMHTMLHRElement noShade]'
BOOL _IM_DOMHTMLHRElement_noShade(DOMHTMLHRElement *_self);

// method '-[DOMHTMLHRElement setAlign:]'
void _IM_DOMHTMLHRElement_setAlign_C(DOMHTMLHRElement *_self, id align);

// method '-[DOMHTMLHRElement setNoShade:]'
void _IM_DOMHTMLHRElement_setNoShade_C(DOMHTMLHRElement *_self, BOOL noShade);

// method '-[DOMHTMLHRElement setSize:]'
void _IM_DOMHTMLHRElement_setSize_C(DOMHTMLHRElement *_self, id size);

// method '-[DOMHTMLHRElement setWidth:]'
void _IM_DOMHTMLHRElement_setWidth_C(DOMHTMLHRElement *_self, id width);

// method '-[DOMHTMLHRElement size]'
id _IM_DOMHTMLHRElement_size(DOMHTMLHRElement *_self);

// method '-[DOMHTMLHRElement width]'
id _IM_DOMHTMLHRElement_width(DOMHTMLHRElement *_self);

// method '-[DOMHTMLHeadElement profile]'
id _IM_DOMHTMLHeadElement_profile(DOMHTMLHeadElement *_self);

// method '-[DOMHTMLHeadElement setProfile:]'
void _IM_DOMHTMLHeadElement_setProfile_C(DOMHTMLHeadElement *_self, id profile);

// method '-[DOMHTMLHeadingElement align]'
id _IM_DOMHTMLHeadingElement_align(DOMHTMLHeadingElement *_self);

// method '-[DOMHTMLHeadingElement setAlign:]'
void _IM_DOMHTMLHeadingElement_setAlign_C(DOMHTMLHeadingElement *_self, id align);

// method '-[DOMHTMLHtmlElement setVersion:]'
void _IM_DOMHTMLHtmlElement_setVersion_C(DOMHTMLHtmlElement *_self, id version);

// method '-[DOMHTMLHtmlElement version]'
id _IM_DOMHTMLHtmlElement_version(DOMHTMLHtmlElement *_self);

// method '-[DOMHTMLIFrameElement align]'
id _IM_DOMHTMLIFrameElement_align(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement contentDocument]'
DOMDocument* _IM_DOMHTMLIFrameElement_contentDocument(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement contentFrame]'
WebFrame* _IM_DOMHTMLIFrameElement_contentFrame(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement frameBorder]'
id _IM_DOMHTMLIFrameElement_frameBorder(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement height]'
id _IM_DOMHTMLIFrameElement_height(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement longDesc]'
id _IM_DOMHTMLIFrameElement_longDesc(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement marginHeight]'
id _IM_DOMHTMLIFrameElement_marginHeight(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement marginWidth]'
id _IM_DOMHTMLIFrameElement_marginWidth(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement name]'
id _IM_DOMHTMLIFrameElement_name(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement scrolling]'
id _IM_DOMHTMLIFrameElement_scrolling(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement setAlign:]'
void _IM_DOMHTMLIFrameElement_setAlign_C(DOMHTMLIFrameElement *_self, id align);

// method '-[DOMHTMLIFrameElement setFrameBorder:]'
void _IM_DOMHTMLIFrameElement_setFrameBorder_C(DOMHTMLIFrameElement *_self, id frameBorder);

// method '-[DOMHTMLIFrameElement setHeight:]'
void _IM_DOMHTMLIFrameElement_setHeight_C(DOMHTMLIFrameElement *_self, id height);

// method '-[DOMHTMLIFrameElement setLongDesc:]'
void _IM_DOMHTMLIFrameElement_setLongDesc_C(DOMHTMLIFrameElement *_self, id longDesc);

// method '-[DOMHTMLIFrameElement setMarginHeight:]'
void _IM_DOMHTMLIFrameElement_setMarginHeight_C(DOMHTMLIFrameElement *_self, id marginHeight);

// method '-[DOMHTMLIFrameElement setMarginWidth:]'
void _IM_DOMHTMLIFrameElement_setMarginWidth_C(DOMHTMLIFrameElement *_self, id marginWidth);

// method '-[DOMHTMLIFrameElement setName:]'
void _IM_DOMHTMLIFrameElement_setName_C(DOMHTMLIFrameElement *_self, id name);

// method '-[DOMHTMLIFrameElement setScrolling:]'
void _IM_DOMHTMLIFrameElement_setScrolling_C(DOMHTMLIFrameElement *_self, id scrolling);

// method '-[DOMHTMLIFrameElement setSrc:]'
void _IM_DOMHTMLIFrameElement_setSrc_C(DOMHTMLIFrameElement *_self, id src);

// method '-[DOMHTMLIFrameElement setWidth:]'
void _IM_DOMHTMLIFrameElement_setWidth_C(DOMHTMLIFrameElement *_self, id width);

// method '-[DOMHTMLIFrameElement src]'
id _IM_DOMHTMLIFrameElement_src(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLIFrameElement width]'
id _IM_DOMHTMLIFrameElement_width(DOMHTMLIFrameElement *_self);

// method '-[DOMHTMLImageElement align]'
id _IM_DOMHTMLImageElement_align(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement alt]'
id _IM_DOMHTMLImageElement_alt(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement border]'
id _IM_DOMHTMLImageElement_border(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement height]'
long _IM_DOMHTMLImageElement_height(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement hspace]'
long _IM_DOMHTMLImageElement_hspace(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement isMap]'
BOOL _IM_DOMHTMLImageElement_isMap(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement longDesc]'
id _IM_DOMHTMLImageElement_longDesc(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement name]'
id _IM_DOMHTMLImageElement_name(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement setAlign:]'
void _IM_DOMHTMLImageElement_setAlign_C(DOMHTMLImageElement *_self, id align);

// method '-[DOMHTMLImageElement setAlt:]'
void _IM_DOMHTMLImageElement_setAlt_C(DOMHTMLImageElement *_self, id alt);

// method '-[DOMHTMLImageElement setBorder:]'
void _IM_DOMHTMLImageElement_setBorder_C(DOMHTMLImageElement *_self, id border);

// method '-[DOMHTMLImageElement setHeight:]'
void _IM_DOMHTMLImageElement_setHeight_C(DOMHTMLImageElement *_self, long height);

// method '-[DOMHTMLImageElement setHspace:]'
void _IM_DOMHTMLImageElement_setHspace_C(DOMHTMLImageElement *_self, long hspace);

// method '-[DOMHTMLImageElement setIsMap:]'
void _IM_DOMHTMLImageElement_setIsMap_C(DOMHTMLImageElement *_self, BOOL isMap);

// method '-[DOMHTMLImageElement setLongDesc:]'
void _IM_DOMHTMLImageElement_setLongDesc_C(DOMHTMLImageElement *_self, id longDesc);

// method '-[DOMHTMLImageElement setName:]'
void _IM_DOMHTMLImageElement_setName_C(DOMHTMLImageElement *_self, id name);

// method '-[DOMHTMLImageElement setSrc:]'
void _IM_DOMHTMLImageElement_setSrc_C(DOMHTMLImageElement *_self, id src);

// method '-[DOMHTMLImageElement setUseMap:]'
void _IM_DOMHTMLImageElement_setUseMap_C(DOMHTMLImageElement *_self, id useMap);

// method '-[DOMHTMLImageElement setVspace:]'
void _IM_DOMHTMLImageElement_setVspace_C(DOMHTMLImageElement *_self, long vspace);

// method '-[DOMHTMLImageElement setWidth:]'
void _IM_DOMHTMLImageElement_setWidth_C(DOMHTMLImageElement *_self, long width);

// method '-[DOMHTMLImageElement src]'
id _IM_DOMHTMLImageElement_src(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement useMap]'
id _IM_DOMHTMLImageElement_useMap(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement vspace]'
long _IM_DOMHTMLImageElement_vspace(DOMHTMLImageElement *_self);

// method '-[DOMHTMLImageElement width]'
long _IM_DOMHTMLImageElement_width(DOMHTMLImageElement *_self);

// method '-[DOMHTMLInputElement accept]'
id _IM_DOMHTMLInputElement_accept(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement accessKey]'
id _IM_DOMHTMLInputElement_accessKey(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement align]'
id _IM_DOMHTMLInputElement_align(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement alt]'
id _IM_DOMHTMLInputElement_alt(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement blur]'
void _IM_DOMHTMLInputElement_blur(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement checked]'
BOOL _IM_DOMHTMLInputElement_checked(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement click]'
void _IM_DOMHTMLInputElement_click(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement defaultChecked]'
BOOL _IM_DOMHTMLInputElement_defaultChecked(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement defaultValue]'
id _IM_DOMHTMLInputElement_defaultValue(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement disabled]'
BOOL _IM_DOMHTMLInputElement_disabled(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement focus]'
void _IM_DOMHTMLInputElement_focus(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement form]'
DOMHTMLFormElement* _IM_DOMHTMLInputElement_form(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement maxLength]'
long _IM_DOMHTMLInputElement_maxLength(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement name]'
id _IM_DOMHTMLInputElement_name(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement readOnly]'
BOOL _IM_DOMHTMLInputElement_readOnly(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement select]'
void _IM_DOMHTMLInputElement_select(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement setAccept:]'
void _IM_DOMHTMLInputElement_setAccept_C(DOMHTMLInputElement *_self, id accept);

// method '-[DOMHTMLInputElement setAccessKey:]'
void _IM_DOMHTMLInputElement_setAccessKey_C(DOMHTMLInputElement *_self, id accessKey);

// method '-[DOMHTMLInputElement setAlign:]'
void _IM_DOMHTMLInputElement_setAlign_C(DOMHTMLInputElement *_self, id align);

// method '-[DOMHTMLInputElement setAlt:]'
void _IM_DOMHTMLInputElement_setAlt_C(DOMHTMLInputElement *_self, id alt);

// method '-[DOMHTMLInputElement setChecked:]'
void _IM_DOMHTMLInputElement_setChecked_C(DOMHTMLInputElement *_self, BOOL checked);

// method '-[DOMHTMLInputElement setDefaultChecked:]'
void _IM_DOMHTMLInputElement_setDefaultChecked_C(DOMHTMLInputElement *_self, BOOL defaultChecked);

// method '-[DOMHTMLInputElement setDefaultValue:]'
void _IM_DOMHTMLInputElement_setDefaultValue_C(DOMHTMLInputElement *_self, id defaultValue);

// method '-[DOMHTMLInputElement setDisabled:]'
void _IM_DOMHTMLInputElement_setDisabled_C(DOMHTMLInputElement *_self, BOOL disabled);

// method '-[DOMHTMLInputElement setMaxLength:]'
void _IM_DOMHTMLInputElement_setMaxLength_C(DOMHTMLInputElement *_self, long maxLength);

// method '-[DOMHTMLInputElement setName:]'
void _IM_DOMHTMLInputElement_setName_C(DOMHTMLInputElement *_self, id name);

// method '-[DOMHTMLInputElement setReadOnly:]'
void _IM_DOMHTMLInputElement_setReadOnly_C(DOMHTMLInputElement *_self, BOOL readOnly);

// method '-[DOMHTMLInputElement setSize:]'
void _IM_DOMHTMLInputElement_setSize_C(DOMHTMLInputElement *_self, id size);

// method '-[DOMHTMLInputElement setSrc:]'
void _IM_DOMHTMLInputElement_setSrc_C(DOMHTMLInputElement *_self, id src);

// method '-[DOMHTMLInputElement setTabIndex:]'
void _IM_DOMHTMLInputElement_setTabIndex_C(DOMHTMLInputElement *_self, long tabIndex);

// method '-[DOMHTMLInputElement setType:]'
void _IM_DOMHTMLInputElement_setType_C(DOMHTMLInputElement *_self, id type);

// method '-[DOMHTMLInputElement setUseMap:]'
void _IM_DOMHTMLInputElement_setUseMap_C(DOMHTMLInputElement *_self, id useMap);

// method '-[DOMHTMLInputElement setValue:]'
void _IM_DOMHTMLInputElement_setValue_C(DOMHTMLInputElement *_self, id value);

// method '-[DOMHTMLInputElement size]'
id _IM_DOMHTMLInputElement_size(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement src]'
id _IM_DOMHTMLInputElement_src(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement tabIndex]'
long _IM_DOMHTMLInputElement_tabIndex(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement type]'
id _IM_DOMHTMLInputElement_type(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement useMap]'
id _IM_DOMHTMLInputElement_useMap(DOMHTMLInputElement *_self);

// method '-[DOMHTMLInputElement value]'
id _IM_DOMHTMLInputElement_value(DOMHTMLInputElement *_self);

// method '-[DOMHTMLIsIndexElement form]'
DOMHTMLFormElement* _IM_DOMHTMLIsIndexElement_form(DOMHTMLIsIndexElement *_self);

// method '-[DOMHTMLIsIndexElement prompt]'
id _IM_DOMHTMLIsIndexElement_prompt(DOMHTMLIsIndexElement *_self);

// method '-[DOMHTMLIsIndexElement setPrompt:]'
void _IM_DOMHTMLIsIndexElement_setPrompt_C(DOMHTMLIsIndexElement *_self, id prompt);

// method '-[DOMHTMLLIElement setType:]'
void _IM_DOMHTMLLIElement_setType_C(DOMHTMLLIElement *_self, id type);

// method '-[DOMHTMLLIElement setValue:]'
void _IM_DOMHTMLLIElement_setValue_C(DOMHTMLLIElement *_self, long value);

// method '-[DOMHTMLLIElement type]'
id _IM_DOMHTMLLIElement_type(DOMHTMLLIElement *_self);

// method '-[DOMHTMLLIElement value]'
long _IM_DOMHTMLLIElement_value(DOMHTMLLIElement *_self);

// method '-[DOMHTMLLabelElement accessKey]'
id _IM_DOMHTMLLabelElement_accessKey(DOMHTMLLabelElement *_self);

// method '-[DOMHTMLLabelElement form]'
DOMHTMLFormElement* _IM_DOMHTMLLabelElement_form(DOMHTMLLabelElement *_self);

// method '-[DOMHTMLLabelElement htmlFor]'
id _IM_DOMHTMLLabelElement_htmlFor(DOMHTMLLabelElement *_self);

// method '-[DOMHTMLLabelElement setAccessKey:]'
void _IM_DOMHTMLLabelElement_setAccessKey_C(DOMHTMLLabelElement *_self, id accessKey);

// method '-[DOMHTMLLabelElement setHtmlFor:]'
void _IM_DOMHTMLLabelElement_setHtmlFor_C(DOMHTMLLabelElement *_self, id htmlFor);

// method '-[DOMHTMLLegendElement accessKey]'
id _IM_DOMHTMLLegendElement_accessKey(DOMHTMLLegendElement *_self);

// method '-[DOMHTMLLegendElement align]'
id _IM_DOMHTMLLegendElement_align(DOMHTMLLegendElement *_self);

// method '-[DOMHTMLLegendElement form]'
DOMHTMLFormElement* _IM_DOMHTMLLegendElement_form(DOMHTMLLegendElement *_self);

// method '-[DOMHTMLLegendElement setAccessKey:]'
void _IM_DOMHTMLLegendElement_setAccessKey_C(DOMHTMLLegendElement *_self, id accessKey);

// method '-[DOMHTMLLegendElement setAlign:]'
void _IM_DOMHTMLLegendElement_setAlign_C(DOMHTMLLegendElement *_self, id align);

// method '-[DOMHTMLLinkElement charset]'
id _IM_DOMHTMLLinkElement_charset(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement disabled]'
BOOL _IM_DOMHTMLLinkElement_disabled(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement href]'
id _IM_DOMHTMLLinkElement_href(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement hreflang]'
id _IM_DOMHTMLLinkElement_hreflang(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement media]'
id _IM_DOMHTMLLinkElement_media(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement rel]'
id _IM_DOMHTMLLinkElement_rel(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement rev]'
id _IM_DOMHTMLLinkElement_rev(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement setCharset:]'
void _IM_DOMHTMLLinkElement_setCharset_C(DOMHTMLLinkElement *_self, id charset);

// method '-[DOMHTMLLinkElement setDisabled:]'
void _IM_DOMHTMLLinkElement_setDisabled_C(DOMHTMLLinkElement *_self, BOOL disabled);

// method '-[DOMHTMLLinkElement setHref:]'
void _IM_DOMHTMLLinkElement_setHref_C(DOMHTMLLinkElement *_self, id href);

// method '-[DOMHTMLLinkElement setHreflang:]'
void _IM_DOMHTMLLinkElement_setHreflang_C(DOMHTMLLinkElement *_self, id hreflang);

// method '-[DOMHTMLLinkElement setMedia:]'
void _IM_DOMHTMLLinkElement_setMedia_C(DOMHTMLLinkElement *_self, id media);

// method '-[DOMHTMLLinkElement setRel:]'
void _IM_DOMHTMLLinkElement_setRel_C(DOMHTMLLinkElement *_self, id rel);

// method '-[DOMHTMLLinkElement setRev:]'
void _IM_DOMHTMLLinkElement_setRev_C(DOMHTMLLinkElement *_self, id rev);

// method '-[DOMHTMLLinkElement setTarget:]'
void _IM_DOMHTMLLinkElement_setTarget_C(DOMHTMLLinkElement *_self, id target);

// method '-[DOMHTMLLinkElement setType:]'
void _IM_DOMHTMLLinkElement_setType_C(DOMHTMLLinkElement *_self, id type);

// method '-[DOMHTMLLinkElement target]'
id _IM_DOMHTMLLinkElement_target(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLLinkElement type]'
id _IM_DOMHTMLLinkElement_type(DOMHTMLLinkElement *_self);

// method '-[DOMHTMLMapElement areas]'
DOMHTMLCollection* _IM_DOMHTMLMapElement_areas(DOMHTMLMapElement *_self);

// method '-[DOMHTMLMapElement name]'
id _IM_DOMHTMLMapElement_name(DOMHTMLMapElement *_self);

// method '-[DOMHTMLMapElement setName:]'
void _IM_DOMHTMLMapElement_setName_C(DOMHTMLMapElement *_self, id name);

// method '-[DOMHTMLMenuElement compact]'
BOOL _IM_DOMHTMLMenuElement_compact(DOMHTMLMenuElement *_self);

// method '-[DOMHTMLMenuElement setCompact:]'
void _IM_DOMHTMLMenuElement_setCompact_C(DOMHTMLMenuElement *_self, BOOL compact);

// method '-[DOMHTMLMetaElement content]'
id _IM_DOMHTMLMetaElement_content(DOMHTMLMetaElement *_self);

// method '-[DOMHTMLMetaElement httpEquiv]'
id _IM_DOMHTMLMetaElement_httpEquiv(DOMHTMLMetaElement *_self);

// method '-[DOMHTMLMetaElement name]'
id _IM_DOMHTMLMetaElement_name(DOMHTMLMetaElement *_self);

// method '-[DOMHTMLMetaElement scheme]'
id _IM_DOMHTMLMetaElement_scheme(DOMHTMLMetaElement *_self);

// method '-[DOMHTMLMetaElement setContent:]'
void _IM_DOMHTMLMetaElement_setContent_C(DOMHTMLMetaElement *_self, id content);

// method '-[DOMHTMLMetaElement setHttpEquiv:]'
void _IM_DOMHTMLMetaElement_setHttpEquiv_C(DOMHTMLMetaElement *_self, id httpEquiv);

// method '-[DOMHTMLMetaElement setName:]'
void _IM_DOMHTMLMetaElement_setName_C(DOMHTMLMetaElement *_self, id name);

// method '-[DOMHTMLMetaElement setScheme:]'
void _IM_DOMHTMLMetaElement_setScheme_C(DOMHTMLMetaElement *_self, id scheme);

// method '-[DOMHTMLModElement cite]'
id _IM_DOMHTMLModElement_cite(DOMHTMLModElement *_self);

// method '-[DOMHTMLModElement dateTime]'
id _IM_DOMHTMLModElement_dateTime(DOMHTMLModElement *_self);

// method '-[DOMHTMLModElement setCite:]'
void _IM_DOMHTMLModElement_setCite_C(DOMHTMLModElement *_self, id cite);

// method '-[DOMHTMLModElement setDateTime:]'
void _IM_DOMHTMLModElement_setDateTime_C(DOMHTMLModElement *_self, id dateTime);

// method '-[DOMHTMLOListElement compact]'
BOOL _IM_DOMHTMLOListElement_compact(DOMHTMLOListElement *_self);

// method '-[DOMHTMLOListElement setCompact:]'
void _IM_DOMHTMLOListElement_setCompact_C(DOMHTMLOListElement *_self, BOOL compact);

// method '-[DOMHTMLOListElement setStart:]'
void _IM_DOMHTMLOListElement_setStart_C(DOMHTMLOListElement *_self, long start);

// method '-[DOMHTMLOListElement setType:]'
void _IM_DOMHTMLOListElement_setType_C(DOMHTMLOListElement *_self, id type);

// method '-[DOMHTMLOListElement start]'
long _IM_DOMHTMLOListElement_start(DOMHTMLOListElement *_self);

// method '-[DOMHTMLOListElement type]'
id _IM_DOMHTMLOListElement_type(DOMHTMLOListElement *_self);

// method '-[DOMHTMLObjectElement align]'
id _IM_DOMHTMLObjectElement_align(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement archive]'
id _IM_DOMHTMLObjectElement_archive(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement border]'
id _IM_DOMHTMLObjectElement_border(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement code]'
id _IM_DOMHTMLObjectElement_code(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement codeBase]'
id _IM_DOMHTMLObjectElement_codeBase(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement codeType]'
id _IM_DOMHTMLObjectElement_codeType(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement contentDocument]'
DOMDocument* _IM_DOMHTMLObjectElement_contentDocument(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement contentFrame]'
WebFrame* _IM_DOMHTMLObjectElement_contentFrame(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement data]'
id _IM_DOMHTMLObjectElement_data(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement declare]'
BOOL _IM_DOMHTMLObjectElement_declare(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement form]'
DOMHTMLFormElement* _IM_DOMHTMLObjectElement_form(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement height]'
id _IM_DOMHTMLObjectElement_height(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement hspace]'
long _IM_DOMHTMLObjectElement_hspace(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement name]'
id _IM_DOMHTMLObjectElement_name(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement setAlign:]'
void _IM_DOMHTMLObjectElement_setAlign_C(DOMHTMLObjectElement *_self, id align);

// method '-[DOMHTMLObjectElement setArchive:]'
void _IM_DOMHTMLObjectElement_setArchive_C(DOMHTMLObjectElement *_self, id archive);

// method '-[DOMHTMLObjectElement setBorder:]'
void _IM_DOMHTMLObjectElement_setBorder_C(DOMHTMLObjectElement *_self, id border);

// method '-[DOMHTMLObjectElement setCode:]'
void _IM_DOMHTMLObjectElement_setCode_C(DOMHTMLObjectElement *_self, id code);

// method '-[DOMHTMLObjectElement setCodeBase:]'
void _IM_DOMHTMLObjectElement_setCodeBase_C(DOMHTMLObjectElement *_self, id codeBase);

// method '-[DOMHTMLObjectElement setCodeType:]'
void _IM_DOMHTMLObjectElement_setCodeType_C(DOMHTMLObjectElement *_self, id codeType);

// method '-[DOMHTMLObjectElement setData:]'
void _IM_DOMHTMLObjectElement_setData_C(DOMHTMLObjectElement *_self, id data);

// method '-[DOMHTMLObjectElement setDeclare:]'
void _IM_DOMHTMLObjectElement_setDeclare_C(DOMHTMLObjectElement *_self, BOOL declare);

// method '-[DOMHTMLObjectElement setHeight:]'
void _IM_DOMHTMLObjectElement_setHeight_C(DOMHTMLObjectElement *_self, id height);

// method '-[DOMHTMLObjectElement setHspace:]'
void _IM_DOMHTMLObjectElement_setHspace_C(DOMHTMLObjectElement *_self, long hspace);

// method '-[DOMHTMLObjectElement setName:]'
void _IM_DOMHTMLObjectElement_setName_C(DOMHTMLObjectElement *_self, id name);

// method '-[DOMHTMLObjectElement setStandby:]'
void _IM_DOMHTMLObjectElement_setStandby_C(DOMHTMLObjectElement *_self, id standby);

// method '-[DOMHTMLObjectElement setTabIndex:]'
void _IM_DOMHTMLObjectElement_setTabIndex_C(DOMHTMLObjectElement *_self, long tabIndex);

// method '-[DOMHTMLObjectElement setType:]'
void _IM_DOMHTMLObjectElement_setType_C(DOMHTMLObjectElement *_self, id type);

// method '-[DOMHTMLObjectElement setUseMap:]'
void _IM_DOMHTMLObjectElement_setUseMap_C(DOMHTMLObjectElement *_self, id useMap);

// method '-[DOMHTMLObjectElement setVspace:]'
void _IM_DOMHTMLObjectElement_setVspace_C(DOMHTMLObjectElement *_self, long vspace);

// method '-[DOMHTMLObjectElement setWidth:]'
void _IM_DOMHTMLObjectElement_setWidth_C(DOMHTMLObjectElement *_self, id width);

// method '-[DOMHTMLObjectElement standby]'
id _IM_DOMHTMLObjectElement_standby(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement tabIndex]'
long _IM_DOMHTMLObjectElement_tabIndex(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement type]'
id _IM_DOMHTMLObjectElement_type(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement useMap]'
id _IM_DOMHTMLObjectElement_useMap(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement vspace]'
long _IM_DOMHTMLObjectElement_vspace(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLObjectElement width]'
id _IM_DOMHTMLObjectElement_width(DOMHTMLObjectElement *_self);

// method '-[DOMHTMLOptGroupElement disabled]'
BOOL _IM_DOMHTMLOptGroupElement_disabled(DOMHTMLOptGroupElement *_self);

// method '-[DOMHTMLOptGroupElement label]'
id _IM_DOMHTMLOptGroupElement_label(DOMHTMLOptGroupElement *_self);

// method '-[DOMHTMLOptGroupElement setDisabled:]'
void _IM_DOMHTMLOptGroupElement_setDisabled_C(DOMHTMLOptGroupElement *_self, BOOL disabled);

// method '-[DOMHTMLOptGroupElement setLabel:]'
void _IM_DOMHTMLOptGroupElement_setLabel_C(DOMHTMLOptGroupElement *_self, id label);

// method '-[DOMHTMLOptionElement defaultSelected]'
BOOL _IM_DOMHTMLOptionElement_defaultSelected(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement disabled]'
BOOL _IM_DOMHTMLOptionElement_disabled(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement form]'
DOMHTMLFormElement* _IM_DOMHTMLOptionElement_form(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement index]'
long _IM_DOMHTMLOptionElement_index(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement label]'
id _IM_DOMHTMLOptionElement_label(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement selected]'
BOOL _IM_DOMHTMLOptionElement_selected(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement setDefaultSelected:]'
void _IM_DOMHTMLOptionElement_setDefaultSelected_C(DOMHTMLOptionElement *_self, BOOL defaultSelected);

// method '-[DOMHTMLOptionElement setDisabled:]'
void _IM_DOMHTMLOptionElement_setDisabled_C(DOMHTMLOptionElement *_self, BOOL disabled);

// method '-[DOMHTMLOptionElement setLabel:]'
void _IM_DOMHTMLOptionElement_setLabel_C(DOMHTMLOptionElement *_self, id label);

// method '-[DOMHTMLOptionElement setSelected:]'
void _IM_DOMHTMLOptionElement_setSelected_C(DOMHTMLOptionElement *_self, BOOL selected);

// method '-[DOMHTMLOptionElement setValue:]'
void _IM_DOMHTMLOptionElement_setValue_C(DOMHTMLOptionElement *_self, id value);

// method '-[DOMHTMLOptionElement text]'
id _IM_DOMHTMLOptionElement_text(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionElement value]'
id _IM_DOMHTMLOptionElement_value(DOMHTMLOptionElement *_self);

// method '-[DOMHTMLOptionsCollection item:]'
DOMNode* _IM_DOMHTMLOptionsCollection_item_C(DOMHTMLOptionsCollection *_self, unsigned long index);

// method '-[DOMHTMLOptionsCollection length]'
unsigned long _IM_DOMHTMLOptionsCollection_length(DOMHTMLOptionsCollection *_self);

// method '-[DOMHTMLOptionsCollection namedItem:]'
DOMNode* _IM_DOMHTMLOptionsCollection_namedItem_C(DOMHTMLOptionsCollection *_self, id name);

// method '-[DOMHTMLOptionsCollection setLength:]'
void _IM_DOMHTMLOptionsCollection_setLength_C(DOMHTMLOptionsCollection *_self, unsigned long length);

// method '-[DOMHTMLParagraphElement align]'
id _IM_DOMHTMLParagraphElement_align(DOMHTMLParagraphElement *_self);

// method '-[DOMHTMLParagraphElement setAlign:]'
void _IM_DOMHTMLParagraphElement_setAlign_C(DOMHTMLParagraphElement *_self, id align);

// method '-[DOMHTMLParamElement name]'
id _IM_DOMHTMLParamElement_name(DOMHTMLParamElement *_self);

// method '-[DOMHTMLParamElement setName:]'
void _IM_DOMHTMLParamElement_setName_C(DOMHTMLParamElement *_self, id name);

// method '-[DOMHTMLParamElement setType:]'
void _IM_DOMHTMLParamElement_setType_C(DOMHTMLParamElement *_self, id type);

// method '-[DOMHTMLParamElement setValue:]'
void _IM_DOMHTMLParamElement_setValue_C(DOMHTMLParamElement *_self, id value);

// method '-[DOMHTMLParamElement setValueType:]'
void _IM_DOMHTMLParamElement_setValueType_C(DOMHTMLParamElement *_self, id valueType);

// method '-[DOMHTMLParamElement type]'
id _IM_DOMHTMLParamElement_type(DOMHTMLParamElement *_self);

// method '-[DOMHTMLParamElement value]'
id _IM_DOMHTMLParamElement_value(DOMHTMLParamElement *_self);

// method '-[DOMHTMLParamElement valueType]'
id _IM_DOMHTMLParamElement_valueType(DOMHTMLParamElement *_self);

// method '-[DOMHTMLPreElement setWidth:]'
void _IM_DOMHTMLPreElement_setWidth_C(DOMHTMLPreElement *_self, long width);

// method '-[DOMHTMLPreElement width]'
long _IM_DOMHTMLPreElement_width(DOMHTMLPreElement *_self);

// method '-[DOMHTMLQuoteElement cite]'
id _IM_DOMHTMLQuoteElement_cite(DOMHTMLQuoteElement *_self);

// method '-[DOMHTMLQuoteElement setCite:]'
void _IM_DOMHTMLQuoteElement_setCite_C(DOMHTMLQuoteElement *_self, id cite);

// method '-[DOMHTMLScriptElement charset]'
id _IM_DOMHTMLScriptElement_charset(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLScriptElement defer]'
BOOL _IM_DOMHTMLScriptElement_defer(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLScriptElement event]'
id _IM_DOMHTMLScriptElement_event(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLScriptElement htmlFor]'
id _IM_DOMHTMLScriptElement_htmlFor(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLScriptElement setCharset:]'
void _IM_DOMHTMLScriptElement_setCharset_C(DOMHTMLScriptElement *_self, id charset);

// method '-[DOMHTMLScriptElement setDefer:]'
void _IM_DOMHTMLScriptElement_setDefer_C(DOMHTMLScriptElement *_self, BOOL defer);

// method '-[DOMHTMLScriptElement setEvent:]'
void _IM_DOMHTMLScriptElement_setEvent_C(DOMHTMLScriptElement *_self, id event);

// method '-[DOMHTMLScriptElement setHtmlFor:]'
void _IM_DOMHTMLScriptElement_setHtmlFor_C(DOMHTMLScriptElement *_self, id htmlFor);

// method '-[DOMHTMLScriptElement setSrc:]'
void _IM_DOMHTMLScriptElement_setSrc_C(DOMHTMLScriptElement *_self, id src);

// method '-[DOMHTMLScriptElement setText:]'
void _IM_DOMHTMLScriptElement_setText_C(DOMHTMLScriptElement *_self, id text);

// method '-[DOMHTMLScriptElement setType:]'
void _IM_DOMHTMLScriptElement_setType_C(DOMHTMLScriptElement *_self, id type);

// method '-[DOMHTMLScriptElement src]'
id _IM_DOMHTMLScriptElement_src(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLScriptElement text]'
id _IM_DOMHTMLScriptElement_text(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLScriptElement type]'
id _IM_DOMHTMLScriptElement_type(DOMHTMLScriptElement *_self);

// method '-[DOMHTMLSelectElement add::]'
void _IM_DOMHTMLSelectElement_add_C_C(DOMHTMLSelectElement *_self, DOMHTMLElement* element, DOMHTMLElement* before);

// method '-[DOMHTMLSelectElement blur]'
void _IM_DOMHTMLSelectElement_blur(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement disabled]'
BOOL _IM_DOMHTMLSelectElement_disabled(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement focus]'
void _IM_DOMHTMLSelectElement_focus(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement form]'
DOMHTMLFormElement* _IM_DOMHTMLSelectElement_form(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement length]'
long _IM_DOMHTMLSelectElement_length(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement multiple]'
BOOL _IM_DOMHTMLSelectElement_multiple(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement name]'
id _IM_DOMHTMLSelectElement_name(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement options]'
DOMHTMLOptionsCollection* _IM_DOMHTMLSelectElement_options(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement remove:]'
void _IM_DOMHTMLSelectElement_remove_C(DOMHTMLSelectElement *_self, long index);

// method '-[DOMHTMLSelectElement selectedIndex]'
long _IM_DOMHTMLSelectElement_selectedIndex(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement setDisabled:]'
void _IM_DOMHTMLSelectElement_setDisabled_C(DOMHTMLSelectElement *_self, BOOL disabled);

// method '-[DOMHTMLSelectElement setMultiple:]'
void _IM_DOMHTMLSelectElement_setMultiple_C(DOMHTMLSelectElement *_self, BOOL multiple);

// method '-[DOMHTMLSelectElement setName:]'
void _IM_DOMHTMLSelectElement_setName_C(DOMHTMLSelectElement *_self, id name);

// method '-[DOMHTMLSelectElement setSelectedIndex:]'
void _IM_DOMHTMLSelectElement_setSelectedIndex_C(DOMHTMLSelectElement *_self, long selectedIndex);

// method '-[DOMHTMLSelectElement setSize:]'
void _IM_DOMHTMLSelectElement_setSize_C(DOMHTMLSelectElement *_self, long size);

// method '-[DOMHTMLSelectElement setTabIndex:]'
void _IM_DOMHTMLSelectElement_setTabIndex_C(DOMHTMLSelectElement *_self, long tabIndex);

// method '-[DOMHTMLSelectElement setValue:]'
void _IM_DOMHTMLSelectElement_setValue_C(DOMHTMLSelectElement *_self, id value);

// method '-[DOMHTMLSelectElement size]'
long _IM_DOMHTMLSelectElement_size(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement tabIndex]'
long _IM_DOMHTMLSelectElement_tabIndex(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement type]'
id _IM_DOMHTMLSelectElement_type(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLSelectElement value]'
id _IM_DOMHTMLSelectElement_value(DOMHTMLSelectElement *_self);

// method '-[DOMHTMLStyleElement disabled]'
BOOL _IM_DOMHTMLStyleElement_disabled(DOMHTMLStyleElement *_self);

// method '-[DOMHTMLStyleElement media]'
id _IM_DOMHTMLStyleElement_media(DOMHTMLStyleElement *_self);

// method '-[DOMHTMLStyleElement setDisabled:]'
void _IM_DOMHTMLStyleElement_setDisabled_C(DOMHTMLStyleElement *_self, BOOL disabled);

// method '-[DOMHTMLStyleElement setMedia:]'
void _IM_DOMHTMLStyleElement_setMedia_C(DOMHTMLStyleElement *_self, id media);

// method '-[DOMHTMLStyleElement setType:]'
void _IM_DOMHTMLStyleElement_setType_C(DOMHTMLStyleElement *_self, id type);

// method '-[DOMHTMLStyleElement type]'
id _IM_DOMHTMLStyleElement_type(DOMHTMLStyleElement *_self);

// method '-[DOMHTMLTableCaptionElement align]'
id _IM_DOMHTMLTableCaptionElement_align(DOMHTMLTableCaptionElement *_self);

// method '-[DOMHTMLTableCaptionElement setAlign:]'
void _IM_DOMHTMLTableCaptionElement_setAlign_C(DOMHTMLTableCaptionElement *_self, id align);

// method '-[DOMHTMLTableCellElement abbr]'
id _IM_DOMHTMLTableCellElement_abbr(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement align]'
id _IM_DOMHTMLTableCellElement_align(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement axis]'
id _IM_DOMHTMLTableCellElement_axis(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement bgColor]'
id _IM_DOMHTMLTableCellElement_bgColor(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement cellIndex]'
long _IM_DOMHTMLTableCellElement_cellIndex(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement ch]'
id _IM_DOMHTMLTableCellElement_ch(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement chOff]'
id _IM_DOMHTMLTableCellElement_chOff(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement colSpan]'
long _IM_DOMHTMLTableCellElement_colSpan(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement headers]'
id _IM_DOMHTMLTableCellElement_headers(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement height]'
id _IM_DOMHTMLTableCellElement_height(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement noWrap]'
BOOL _IM_DOMHTMLTableCellElement_noWrap(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement rowSpan]'
long _IM_DOMHTMLTableCellElement_rowSpan(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement scope]'
id _IM_DOMHTMLTableCellElement_scope(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement setAbbr:]'
void _IM_DOMHTMLTableCellElement_setAbbr_C(DOMHTMLTableCellElement *_self, id abbr);

// method '-[DOMHTMLTableCellElement setAlign:]'
void _IM_DOMHTMLTableCellElement_setAlign_C(DOMHTMLTableCellElement *_self, id align);

// method '-[DOMHTMLTableCellElement setAxis:]'
void _IM_DOMHTMLTableCellElement_setAxis_C(DOMHTMLTableCellElement *_self, id axis);

// method '-[DOMHTMLTableCellElement setBgColor:]'
void _IM_DOMHTMLTableCellElement_setBgColor_C(DOMHTMLTableCellElement *_self, id bgColor);

// method '-[DOMHTMLTableCellElement setCh:]'
void _IM_DOMHTMLTableCellElement_setCh_C(DOMHTMLTableCellElement *_self, id ch);

// method '-[DOMHTMLTableCellElement setChOff:]'
void _IM_DOMHTMLTableCellElement_setChOff_C(DOMHTMLTableCellElement *_self, id chOff);

// method '-[DOMHTMLTableCellElement setColSpan:]'
void _IM_DOMHTMLTableCellElement_setColSpan_C(DOMHTMLTableCellElement *_self, long colSpan);

// method '-[DOMHTMLTableCellElement setHeaders:]'
void _IM_DOMHTMLTableCellElement_setHeaders_C(DOMHTMLTableCellElement *_self, id headers);

// method '-[DOMHTMLTableCellElement setHeight:]'
void _IM_DOMHTMLTableCellElement_setHeight_C(DOMHTMLTableCellElement *_self, id height);

// method '-[DOMHTMLTableCellElement setNoWrap:]'
void _IM_DOMHTMLTableCellElement_setNoWrap_C(DOMHTMLTableCellElement *_self, BOOL noWrap);

// method '-[DOMHTMLTableCellElement setRowSpan:]'
void _IM_DOMHTMLTableCellElement_setRowSpan_C(DOMHTMLTableCellElement *_self, long rowSpan);

// method '-[DOMHTMLTableCellElement setScope:]'
void _IM_DOMHTMLTableCellElement_setScope_C(DOMHTMLTableCellElement *_self, id scope);

// method '-[DOMHTMLTableCellElement setVAlign:]'
void _IM_DOMHTMLTableCellElement_setVAlign_C(DOMHTMLTableCellElement *_self, id vAlign);

// method '-[DOMHTMLTableCellElement setWidth:]'
void _IM_DOMHTMLTableCellElement_setWidth_C(DOMHTMLTableCellElement *_self, id width);

// method '-[DOMHTMLTableCellElement vAlign]'
id _IM_DOMHTMLTableCellElement_vAlign(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableCellElement width]'
id _IM_DOMHTMLTableCellElement_width(DOMHTMLTableCellElement *_self);

// method '-[DOMHTMLTableColElement align]'
id _IM_DOMHTMLTableColElement_align(DOMHTMLTableColElement *_self);

// method '-[DOMHTMLTableColElement ch]'
id _IM_DOMHTMLTableColElement_ch(DOMHTMLTableColElement *_self);

// method '-[DOMHTMLTableColElement chOff]'
id _IM_DOMHTMLTableColElement_chOff(DOMHTMLTableColElement *_self);

// method '-[DOMHTMLTableColElement setAlign:]'
void _IM_DOMHTMLTableColElement_setAlign_C(DOMHTMLTableColElement *_self, id align);

// method '-[DOMHTMLTableColElement setCh:]'
void _IM_DOMHTMLTableColElement_setCh_C(DOMHTMLTableColElement *_self, id ch);

// method '-[DOMHTMLTableColElement setChOff:]'
void _IM_DOMHTMLTableColElement_setChOff_C(DOMHTMLTableColElement *_self, id chOff);

// method '-[DOMHTMLTableColElement setSpan:]'
void _IM_DOMHTMLTableColElement_setSpan_C(DOMHTMLTableColElement *_self, long span);

// method '-[DOMHTMLTableColElement setVAlign:]'
void _IM_DOMHTMLTableColElement_setVAlign_C(DOMHTMLTableColElement *_self, id vAlign);

// method '-[DOMHTMLTableColElement setWidth:]'
void _IM_DOMHTMLTableColElement_setWidth_C(DOMHTMLTableColElement *_self, id width);

// method '-[DOMHTMLTableColElement span]'
long _IM_DOMHTMLTableColElement_span(DOMHTMLTableColElement *_self);

// method '-[DOMHTMLTableColElement vAlign]'
id _IM_DOMHTMLTableColElement_vAlign(DOMHTMLTableColElement *_self);

// method '-[DOMHTMLTableColElement width]'
id _IM_DOMHTMLTableColElement_width(DOMHTMLTableColElement *_self);

// method '-[DOMHTMLTableElement align]'
id _IM_DOMHTMLTableElement_align(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement bgColor]'
id _IM_DOMHTMLTableElement_bgColor(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement border]'
id _IM_DOMHTMLTableElement_border(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement caption]'
DOMHTMLTableCaptionElement* _IM_DOMHTMLTableElement_caption(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement cellPadding]'
id _IM_DOMHTMLTableElement_cellPadding(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement cellSpacing]'
id _IM_DOMHTMLTableElement_cellSpacing(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement createCaption]'
DOMHTMLElement* _IM_DOMHTMLTableElement_createCaption(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement createTFoot]'
DOMHTMLElement* _IM_DOMHTMLTableElement_createTFoot(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement createTHead]'
DOMHTMLElement* _IM_DOMHTMLTableElement_createTHead(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement deleteCaption]'
void _IM_DOMHTMLTableElement_deleteCaption(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement deleteRow:]'
void _IM_DOMHTMLTableElement_deleteRow_C(DOMHTMLTableElement *_self, long index);

// method '-[DOMHTMLTableElement deleteTFoot]'
void _IM_DOMHTMLTableElement_deleteTFoot(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement deleteTHead]'
void _IM_DOMHTMLTableElement_deleteTHead(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement frameBorders]'
id _IM_DOMHTMLTableElement_frameBorders(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement insertRow:]'
DOMHTMLElement* _IM_DOMHTMLTableElement_insertRow_C(DOMHTMLTableElement *_self, long index);

// method '-[DOMHTMLTableElement rows]'
DOMHTMLCollection* _IM_DOMHTMLTableElement_rows(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement rules]'
id _IM_DOMHTMLTableElement_rules(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement setAlign:]'
void _IM_DOMHTMLTableElement_setAlign_C(DOMHTMLTableElement *_self, id align);

// method '-[DOMHTMLTableElement setBgColor:]'
void _IM_DOMHTMLTableElement_setBgColor_C(DOMHTMLTableElement *_self, id bgColor);

// method '-[DOMHTMLTableElement setBorder:]'
void _IM_DOMHTMLTableElement_setBorder_C(DOMHTMLTableElement *_self, id border);

// method '-[DOMHTMLTableElement setCaption:]'
void _IM_DOMHTMLTableElement_setCaption_C(DOMHTMLTableElement *_self, DOMHTMLTableCaptionElement* caption);

// method '-[DOMHTMLTableElement setCellPadding:]'
void _IM_DOMHTMLTableElement_setCellPadding_C(DOMHTMLTableElement *_self, id cellPadding);

// method '-[DOMHTMLTableElement setCellSpacing:]'
void _IM_DOMHTMLTableElement_setCellSpacing_C(DOMHTMLTableElement *_self, id cellSpacing);

// method '-[DOMHTMLTableElement setFrameBorders:]'
void _IM_DOMHTMLTableElement_setFrameBorders_C(DOMHTMLTableElement *_self, id frameBorders);

// method '-[DOMHTMLTableElement setRules:]'
void _IM_DOMHTMLTableElement_setRules_C(DOMHTMLTableElement *_self, id rules);

// method '-[DOMHTMLTableElement setSummary:]'
void _IM_DOMHTMLTableElement_setSummary_C(DOMHTMLTableElement *_self, id summary);

// method '-[DOMHTMLTableElement setTFoot:]'
void _IM_DOMHTMLTableElement_setTFoot_C(DOMHTMLTableElement *_self, DOMHTMLTableSectionElement* tFoot);

// method '-[DOMHTMLTableElement setTHead:]'
void _IM_DOMHTMLTableElement_setTHead_C(DOMHTMLTableElement *_self, DOMHTMLTableSectionElement* tHead);

// method '-[DOMHTMLTableElement setWidth:]'
void _IM_DOMHTMLTableElement_setWidth_C(DOMHTMLTableElement *_self, id width);

// method '-[DOMHTMLTableElement summary]'
id _IM_DOMHTMLTableElement_summary(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement tBodies]'
DOMHTMLCollection* _IM_DOMHTMLTableElement_tBodies(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement tFoot]'
DOMHTMLTableSectionElement* _IM_DOMHTMLTableElement_tFoot(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement tHead]'
DOMHTMLTableSectionElement* _IM_DOMHTMLTableElement_tHead(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableElement width]'
id _IM_DOMHTMLTableElement_width(DOMHTMLTableElement *_self);

// method '-[DOMHTMLTableRowElement align]'
id _IM_DOMHTMLTableRowElement_align(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement bgColor]'
id _IM_DOMHTMLTableRowElement_bgColor(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement cells]'
DOMHTMLCollection* _IM_DOMHTMLTableRowElement_cells(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement ch]'
id _IM_DOMHTMLTableRowElement_ch(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement chOff]'
id _IM_DOMHTMLTableRowElement_chOff(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement deleteCell:]'
void _IM_DOMHTMLTableRowElement_deleteCell_C(DOMHTMLTableRowElement *_self, long index);

// method '-[DOMHTMLTableRowElement insertCell:]'
DOMHTMLElement* _IM_DOMHTMLTableRowElement_insertCell_C(DOMHTMLTableRowElement *_self, long index);

// method '-[DOMHTMLTableRowElement rowIndex]'
long _IM_DOMHTMLTableRowElement_rowIndex(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement sectionRowIndex]'
long _IM_DOMHTMLTableRowElement_sectionRowIndex(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableRowElement setAlign:]'
void _IM_DOMHTMLTableRowElement_setAlign_C(DOMHTMLTableRowElement *_self, id align);

// method '-[DOMHTMLTableRowElement setBgColor:]'
void _IM_DOMHTMLTableRowElement_setBgColor_C(DOMHTMLTableRowElement *_self, id bgColor);

// method '-[DOMHTMLTableRowElement setCh:]'
void _IM_DOMHTMLTableRowElement_setCh_C(DOMHTMLTableRowElement *_self, id ch);

// method '-[DOMHTMLTableRowElement setChOff:]'
void _IM_DOMHTMLTableRowElement_setChOff_C(DOMHTMLTableRowElement *_self, id chOff);

// method '-[DOMHTMLTableRowElement setVAlign:]'
void _IM_DOMHTMLTableRowElement_setVAlign_C(DOMHTMLTableRowElement *_self, id vAlign);

// method '-[DOMHTMLTableRowElement vAlign]'
id _IM_DOMHTMLTableRowElement_vAlign(DOMHTMLTableRowElement *_self);

// method '-[DOMHTMLTableSectionElement align]'
id _IM_DOMHTMLTableSectionElement_align(DOMHTMLTableSectionElement *_self);

// method '-[DOMHTMLTableSectionElement ch]'
id _IM_DOMHTMLTableSectionElement_ch(DOMHTMLTableSectionElement *_self);

// method '-[DOMHTMLTableSectionElement chOff]'
id _IM_DOMHTMLTableSectionElement_chOff(DOMHTMLTableSectionElement *_self);

// method '-[DOMHTMLTableSectionElement deleteRow:]'
void _IM_DOMHTMLTableSectionElement_deleteRow_C(DOMHTMLTableSectionElement *_self, long index);

// method '-[DOMHTMLTableSectionElement insertRow:]'
DOMHTMLElement* _IM_DOMHTMLTableSectionElement_insertRow_C(DOMHTMLTableSectionElement *_self, long index);

// method '-[DOMHTMLTableSectionElement rows]'
DOMHTMLCollection* _IM_DOMHTMLTableSectionElement_rows(DOMHTMLTableSectionElement *_self);

// method '-[DOMHTMLTableSectionElement setAlign:]'
void _IM_DOMHTMLTableSectionElement_setAlign_C(DOMHTMLTableSectionElement *_self, id align);

// method '-[DOMHTMLTableSectionElement setCh:]'
void _IM_DOMHTMLTableSectionElement_setCh_C(DOMHTMLTableSectionElement *_self, id ch);

// method '-[DOMHTMLTableSectionElement setChOff:]'
void _IM_DOMHTMLTableSectionElement_setChOff_C(DOMHTMLTableSectionElement *_self, id chOff);

// method '-[DOMHTMLTableSectionElement setVAlign:]'
void _IM_DOMHTMLTableSectionElement_setVAlign_C(DOMHTMLTableSectionElement *_self, id vAlign);

// method '-[DOMHTMLTableSectionElement vAlign]'
id _IM_DOMHTMLTableSectionElement_vAlign(DOMHTMLTableSectionElement *_self);

// method '-[DOMHTMLTextAreaElement accessKey]'
id _IM_DOMHTMLTextAreaElement_accessKey(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement blur]'
void _IM_DOMHTMLTextAreaElement_blur(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement cols]'
long _IM_DOMHTMLTextAreaElement_cols(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement defaultValue]'
id _IM_DOMHTMLTextAreaElement_defaultValue(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement disabled]'
BOOL _IM_DOMHTMLTextAreaElement_disabled(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement focus]'
void _IM_DOMHTMLTextAreaElement_focus(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement form]'
DOMHTMLFormElement* _IM_DOMHTMLTextAreaElement_form(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement name]'
id _IM_DOMHTMLTextAreaElement_name(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement readOnly]'
BOOL _IM_DOMHTMLTextAreaElement_readOnly(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement rows]'
long _IM_DOMHTMLTextAreaElement_rows(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement select]'
void _IM_DOMHTMLTextAreaElement_select(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement setAccessKey:]'
void _IM_DOMHTMLTextAreaElement_setAccessKey_C(DOMHTMLTextAreaElement *_self, id accessKey);

// method '-[DOMHTMLTextAreaElement setCols:]'
void _IM_DOMHTMLTextAreaElement_setCols_C(DOMHTMLTextAreaElement *_self, long cols);

// method '-[DOMHTMLTextAreaElement setDefaultValue:]'
void _IM_DOMHTMLTextAreaElement_setDefaultValue_C(DOMHTMLTextAreaElement *_self, id defaultValue);

// method '-[DOMHTMLTextAreaElement setDisabled:]'
void _IM_DOMHTMLTextAreaElement_setDisabled_C(DOMHTMLTextAreaElement *_self, BOOL disabled);

// method '-[DOMHTMLTextAreaElement setName:]'
void _IM_DOMHTMLTextAreaElement_setName_C(DOMHTMLTextAreaElement *_self, id name);

// method '-[DOMHTMLTextAreaElement setReadOnly:]'
void _IM_DOMHTMLTextAreaElement_setReadOnly_C(DOMHTMLTextAreaElement *_self, BOOL readOnly);

// method '-[DOMHTMLTextAreaElement setRows:]'
void _IM_DOMHTMLTextAreaElement_setRows_C(DOMHTMLTextAreaElement *_self, long rows);

// method '-[DOMHTMLTextAreaElement setTabIndex:]'
void _IM_DOMHTMLTextAreaElement_setTabIndex_C(DOMHTMLTextAreaElement *_self, long tabIndex);

// method '-[DOMHTMLTextAreaElement setValue:]'
void _IM_DOMHTMLTextAreaElement_setValue_C(DOMHTMLTextAreaElement *_self, id value);

// method '-[DOMHTMLTextAreaElement tabIndex]'
long _IM_DOMHTMLTextAreaElement_tabIndex(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement type]'
id _IM_DOMHTMLTextAreaElement_type(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTextAreaElement value]'
id _IM_DOMHTMLTextAreaElement_value(DOMHTMLTextAreaElement *_self);

// method '-[DOMHTMLTitleElement setText:]'
void _IM_DOMHTMLTitleElement_setText_C(DOMHTMLTitleElement *_self, id text);

// method '-[DOMHTMLTitleElement text]'
id _IM_DOMHTMLTitleElement_text(DOMHTMLTitleElement *_self);

// method '-[DOMHTMLUListElement compact]'
BOOL _IM_DOMHTMLUListElement_compact(DOMHTMLUListElement *_self);

// method '-[DOMHTMLUListElement setCompact:]'
void _IM_DOMHTMLUListElement_setCompact_C(DOMHTMLUListElement *_self, BOOL compact);

// method '-[DOMHTMLUListElement setType:]'
void _IM_DOMHTMLUListElement_setType_C(DOMHTMLUListElement *_self, id type);

// method '-[DOMHTMLUListElement type]'
id _IM_DOMHTMLUListElement_type(DOMHTMLUListElement *_self);

// method '-[DOMImplementation createCSSStyleSheet::]'
DOMCSSStyleSheet* _IM_DOMImplementation_createCSSStyleSheet_C_C(DOMImplementation *_self, id title, id media);

// method '-[DOMImplementation createDocument:::]'
DOMDocument* _IM_DOMImplementation_createDocument_C_C_C(DOMImplementation *_self, id namespaceURI, id qualifiedName, DOMDocumentType* doctype);

// method '-[DOMImplementation createDocumentType:::]'
DOMDocumentType* _IM_DOMImplementation_createDocumentType_C_C_C(DOMImplementation *_self, id qualifiedName, id publicId, id systemId);

// method '-[DOMImplementation hasFeature::]'
BOOL _IM_DOMImplementation_hasFeature_C_C(DOMImplementation *_self, id feature, id version);

// method '-[DOMMediaList appendMedium:]'
void _IM_DOMMediaList_appendMedium_C(DOMMediaList *_self, id newMedium);

// method '-[DOMMediaList deleteMedium:]'
void _IM_DOMMediaList_deleteMedium_C(DOMMediaList *_self, id oldMedium);

// method '-[DOMMediaList item:]'
id _IM_DOMMediaList_item_C(DOMMediaList *_self, unsigned long index);

// method '-[DOMMediaList length]'
unsigned long _IM_DOMMediaList_length(DOMMediaList *_self);

// method '-[DOMMediaList mediaText]'
id _IM_DOMMediaList_mediaText(DOMMediaList *_self);

// method '-[DOMMediaList setMediaText:]'
void _IM_DOMMediaList_setMediaText_C(DOMMediaList *_self, id mediaText);

// method '-[DOMMouseEvent altKey]'
BOOL _IM_DOMMouseEvent_altKey(DOMMouseEvent *_self);

// method '-[DOMMouseEvent button]'
unsigned short _IM_DOMMouseEvent_button(DOMMouseEvent *_self);

// method '-[DOMMouseEvent clientX]'
long _IM_DOMMouseEvent_clientX(DOMMouseEvent *_self);

// method '-[DOMMouseEvent clientY]'
long _IM_DOMMouseEvent_clientY(DOMMouseEvent *_self);

// method '-[DOMMouseEvent ctrlKey]'
BOOL _IM_DOMMouseEvent_ctrlKey(DOMMouseEvent *_self);

// method '-[DOMMouseEvent initMouseEvent:::::::::::::::]'
void _IM_DOMMouseEvent_initMouseEvent_C_C_C_C_C_C_C_C_C_C_C_C_C_C_C(DOMMouseEvent *_self, id typeArg, BOOL canBubbleArg, BOOL cancelableArg, DOMAbstractView* viewArg, long detailArg, long screenXArg, long screenYArg, long clientX, long clientY, BOOL ctrlKeyArg, BOOL altKeyArg, BOOL shiftKeyArg, BOOL metaKeyArg, unsigned short buttonArg, id relatedTargetArg);

// method '-[DOMMouseEvent metaKey]'
BOOL _IM_DOMMouseEvent_metaKey(DOMMouseEvent *_self);

// method '-[DOMMouseEvent relatedTarget]'
id _IM_DOMMouseEvent_relatedTarget(DOMMouseEvent *_self);

// method '-[DOMMouseEvent screenX]'
long _IM_DOMMouseEvent_screenX(DOMMouseEvent *_self);

// method '-[DOMMouseEvent screenY]'
long _IM_DOMMouseEvent_screenY(DOMMouseEvent *_self);

// method '-[DOMMouseEvent shiftKey]'
BOOL _IM_DOMMouseEvent_shiftKey(DOMMouseEvent *_self);

// method '-[DOMMutationEvent attrChange]'
unsigned short _IM_DOMMutationEvent_attrChange(DOMMutationEvent *_self);

// method '-[DOMMutationEvent attrName]'
id _IM_DOMMutationEvent_attrName(DOMMutationEvent *_self);

// method '-[DOMMutationEvent initMutationEvent::::::::]'
void _IM_DOMMutationEvent_initMutationEvent_C_C_C_C_C_C_C_C(DOMMutationEvent *_self, id typeArg, BOOL canBubbleArg, BOOL cancelableArg, DOMNode* relatedNodeArg, id prevValueArg, id newValueArg, id attrNameArg, unsigned short attrChangeArg);

// method '-[DOMMutationEvent newValue]'
DOMMutationEvent *_IM_DOMMutationEvent_newValue(DOMMutationEvent *_self);

// method '-[DOMMutationEvent prevValue]'
id _IM_DOMMutationEvent_prevValue(DOMMutationEvent *_self);

// method '-[DOMMutationEvent relatedNode]'
DOMNode* _IM_DOMMutationEvent_relatedNode(DOMMutationEvent *_self);

// method '-[DOMNamedNodeMap getNamedItem:]'
DOMNode* _IM_DOMNamedNodeMap_getNamedItem_C(DOMNamedNodeMap *_self, id name);

// method '-[DOMNamedNodeMap getNamedItemNS::]'
DOMNode* _IM_DOMNamedNodeMap_getNamedItemNS_C_C(DOMNamedNodeMap *_self, id namespaceURI, id localName);

// method '-[DOMNamedNodeMap item:]'
DOMNode* _IM_DOMNamedNodeMap_item_C(DOMNamedNodeMap *_self, unsigned long index);

// method '-[DOMNamedNodeMap length]'
unsigned long _IM_DOMNamedNodeMap_length(DOMNamedNodeMap *_self);

// method '-[DOMNamedNodeMap removeNamedItem:]'
DOMNode* _IM_DOMNamedNodeMap_removeNamedItem_C(DOMNamedNodeMap *_self, id name);

// method '-[DOMNamedNodeMap removeNamedItemNS::]'
DOMNode* _IM_DOMNamedNodeMap_removeNamedItemNS_C_C(DOMNamedNodeMap *_self, id namespaceURI, id localName);

// method '-[DOMNamedNodeMap setNamedItem:]'
DOMNode* _IM_DOMNamedNodeMap_setNamedItem_C(DOMNamedNodeMap *_self, DOMNode* arg);

// method '-[DOMNamedNodeMap setNamedItemNS:]'
DOMNode* _IM_DOMNamedNodeMap_setNamedItemNS_C(DOMNamedNodeMap *_self, DOMNode* arg);

// method '-[DOMNode appendChild:]'
DOMNode* _IM_DOMNode_appendChild_C(DOMNode *_self, DOMNode* newChild);

// method '-[DOMNode attributes]'
DOMNamedNodeMap* _IM_DOMNode_attributes(DOMNode *_self);

// method '-[DOMNode childNodes]'
DOMNodeList* _IM_DOMNode_childNodes(DOMNode *_self);

// method '-[DOMNode cloneNode:]'
DOMNode* _IM_DOMNode_cloneNode_C(DOMNode *_self, BOOL deep);

// method '-[DOMNode firstChild]'
DOMNode* _IM_DOMNode_firstChild(DOMNode *_self);

// method '-[DOMNode hasAttributes]'
BOOL _IM_DOMNode_hasAttributes(DOMNode *_self);

// method '-[DOMNode hasChildNodes]'
BOOL _IM_DOMNode_hasChildNodes(DOMNode *_self);

// method '-[DOMNode insertBefore::]'
DOMNode* _IM_DOMNode_insertBefore_C_C(DOMNode *_self, DOMNode* newChild, DOMNode* refChild);

// method '-[DOMNode isSupported::]'
BOOL _IM_DOMNode_isSupported_C_C(DOMNode *_self, id feature, id version);

// method '-[DOMNode lastChild]'
DOMNode* _IM_DOMNode_lastChild(DOMNode *_self);

// method '-[DOMNode localName]'
id _IM_DOMNode_localName(DOMNode *_self);

// method '-[DOMNode namespaceURI]'
id _IM_DOMNode_namespaceURI(DOMNode *_self);

// method '-[DOMNode nextSibling]'
DOMNode* _IM_DOMNode_nextSibling(DOMNode *_self);

// method '-[DOMNode nodeName]'
id _IM_DOMNode_nodeName(DOMNode *_self);

// method '-[DOMNode nodeType]'
unsigned short _IM_DOMNode_nodeType(DOMNode *_self);

// method '-[DOMNode nodeValue]'
id _IM_DOMNode_nodeValue(DOMNode *_self);

// method '-[DOMNode normalize]'
void _IM_DOMNode_normalize(DOMNode *_self);

// method '-[DOMNode ownerDocument]'
DOMDocument* _IM_DOMNode_ownerDocument(DOMNode *_self);

// method '-[DOMNode parentNode]'
DOMNode* _IM_DOMNode_parentNode(DOMNode *_self);

// method '-[DOMNode prefix]'
id _IM_DOMNode_prefix(DOMNode *_self);

// method '-[DOMNode previousSibling]'
DOMNode* _IM_DOMNode_previousSibling(DOMNode *_self);

// method '-[DOMNode removeChild:]'
DOMNode* _IM_DOMNode_removeChild_C(DOMNode *_self, DOMNode* oldChild);

// method '-[DOMNode replaceChild::]'
DOMNode* _IM_DOMNode_replaceChild_C_C(DOMNode *_self, DOMNode* newChild, DOMNode* oldChild);

// method '-[DOMNode setNodeValue:]'
void _IM_DOMNode_setNodeValue_C(DOMNode *_self, id string);

// method '-[DOMNode setPrefix:]'
void _IM_DOMNode_setPrefix_C(DOMNode *_self, id prefix);

// method '-[DOMNode webArchive]'
WebArchive* _IM_DOMNode_webArchive(DOMNode *_self);

// method '-[DOMNodeIterator detach]'
void _IM_DOMNodeIterator_detach(DOMNodeIterator *_self);

// method '-[DOMNodeIterator expandEntityReferences]'
BOOL _IM_DOMNodeIterator_expandEntityReferences(DOMNodeIterator *_self);

// method '-[DOMNodeIterator filter]'
id _IM_DOMNodeIterator_filter(DOMNodeIterator *_self);

// method '-[DOMNodeIterator nextNode]'
DOMNode* _IM_DOMNodeIterator_nextNode(DOMNodeIterator *_self);

// method '-[DOMNodeIterator previousNode]'
DOMNode* _IM_DOMNodeIterator_previousNode(DOMNodeIterator *_self);

// method '-[DOMNodeIterator root]'
DOMNode* _IM_DOMNodeIterator_root(DOMNodeIterator *_self);

// method '-[DOMNodeIterator whatToShow]'
unsigned long _IM_DOMNodeIterator_whatToShow(DOMNodeIterator *_self);

// method '-[DOMNodeList item:]'
DOMNode* _IM_DOMNodeList_item_C(DOMNodeList *_self, unsigned long index);

// method '-[DOMNodeList length]'
unsigned long _IM_DOMNodeList_length(DOMNodeList *_self);

// method '-[DOMNotation publicId]'
id _IM_DOMNotation_publicId(DOMNotation *_self);

// method '-[DOMNotation systemId]'
id _IM_DOMNotation_systemId(DOMNotation *_self);

// method '-[DOMObject sheet]'
DOMStyleSheet* _IM_DOMObject_sheet(DOMObject *_self);

// method '-[DOMProcessingInstruction data]'
id _IM_DOMProcessingInstruction_data(DOMProcessingInstruction *_self);

// method '-[DOMProcessingInstruction setData:]'
void _IM_DOMProcessingInstruction_setData_C(DOMProcessingInstruction *_self, id data);

// method '-[DOMProcessingInstruction target]'
id _IM_DOMProcessingInstruction_target(DOMProcessingInstruction *_self);

// method '-[DOMRGBColor alpha]'
DOMCSSPrimitiveValue* _IM_DOMRGBColor_alpha(DOMRGBColor *_self);

// method '-[DOMRGBColor blue]'
DOMCSSPrimitiveValue* _IM_DOMRGBColor_blue(DOMRGBColor *_self);

// method '-[DOMRGBColor green]'
DOMCSSPrimitiveValue* _IM_DOMRGBColor_green(DOMRGBColor *_self);

// method '-[DOMRGBColor red]'
DOMCSSPrimitiveValue* _IM_DOMRGBColor_red(DOMRGBColor *_self);

// method '-[DOMRange cloneContents]'
id _IM_DOMRange_cloneContents(DOMRange *_self);

// method '-[DOMRange cloneRange]'
DOMRange* _IM_DOMRange_cloneRange(DOMRange *_self);

// method '-[DOMRange collapse:]'
void _IM_DOMRange_collapse_C(DOMRange *_self, BOOL toStart);

// method '-[DOMRange collapsed]'
BOOL _IM_DOMRange_collapsed(DOMRange *_self);

// method '-[DOMRange commonAncestorContainer]'
DOMNode* _IM_DOMRange_commonAncestorContainer(DOMRange *_self);

// method '-[DOMRange compareBoundaryPoints::]'
short _IM_DOMRange_compareBoundaryPoints_C_C(DOMRange *_self, unsigned short how, DOMRange* sourceRange);

// method '-[DOMRange deleteContents]'
void _IM_DOMRange_deleteContents(DOMRange *_self);

// method '-[DOMRange detach]'
void _IM_DOMRange_detach(DOMRange *_self);

// method '-[DOMRange endContainer]'
DOMNode* _IM_DOMRange_endContainer(DOMRange *_self);

// method '-[DOMRange endOffset]'
long _IM_DOMRange_endOffset(DOMRange *_self);

// method '-[DOMRange extractContents]'
id _IM_DOMRange_extractContents(DOMRange *_self);

// method '-[DOMRange insertNode:]'
void _IM_DOMRange_insertNode_C(DOMRange *_self, DOMNode* newNode);

// method '-[DOMRange markupString]'
id _IM_DOMRange_markupString(DOMRange *_self);

// method '-[DOMRange selectNode:]'
void _IM_DOMRange_selectNode_C(DOMRange *_self, DOMNode* refNode);

// method '-[DOMRange selectNodeContents:]'
void _IM_DOMRange_selectNodeContents_C(DOMRange *_self, DOMNode* refNode);

// method '-[DOMRange setEnd::]'
void _IM_DOMRange_setEnd_C_C(DOMRange *_self, DOMNode* refNode, long offset);

// method '-[DOMRange setEndAfter:]'
void _IM_DOMRange_setEndAfter_C(DOMRange *_self, DOMNode* refNode);

// method '-[DOMRange setEndBefore:]'
void _IM_DOMRange_setEndBefore_C(DOMRange *_self, DOMNode* refNode);

// method '-[DOMRange setStart::]'
void _IM_DOMRange_setStart_C_C(DOMRange *_self, DOMNode* refNode, long offset);

// method '-[DOMRange setStartAfter:]'
void _IM_DOMRange_setStartAfter_C(DOMRange *_self, DOMNode* refNode);

// method '-[DOMRange setStartBefore:]'
void _IM_DOMRange_setStartBefore_C(DOMRange *_self, DOMNode* refNode);

// method '-[DOMRange startContainer]'
DOMNode* _IM_DOMRange_startContainer(DOMRange *_self);

// method '-[DOMRange startOffset]'
long _IM_DOMRange_startOffset(DOMRange *_self);

// method '-[DOMRange surroundContents:]'
void _IM_DOMRange_surroundContents_C(DOMRange *_self, DOMNode* newParent);

// method '-[DOMRange toString]'
id _IM_DOMRange_toString(DOMRange *_self);

// method '-[DOMRange webArchive]'
WebArchive* _IM_DOMRange_webArchive(DOMRange *_self);

// method '-[DOMRect bottom]'
DOMCSSPrimitiveValue* _IM_DOMRect_bottom(DOMRect *_self);

// method '-[DOMRect left]'
DOMCSSPrimitiveValue* _IM_DOMRect_left(DOMRect *_self);

// method '-[DOMRect right]'
DOMCSSPrimitiveValue* _IM_DOMRect_right(DOMRect *_self);

// method '-[DOMRect top]'
DOMCSSPrimitiveValue* _IM_DOMRect_top(DOMRect *_self);

// method '-[DOMStyleSheet disabled]'
BOOL _IM_DOMStyleSheet_disabled(DOMStyleSheet *_self);

// method '-[DOMStyleSheet href]'
id _IM_DOMStyleSheet_href(DOMStyleSheet *_self);

// method '-[DOMStyleSheet media]'
DOMMediaList* _IM_DOMStyleSheet_media(DOMStyleSheet *_self);

// method '-[DOMStyleSheet ownerNode]'
DOMNode* _IM_DOMStyleSheet_ownerNode(DOMStyleSheet *_self);

// method '-[DOMStyleSheet parentStyleSheet]'
DOMStyleSheet* _IM_DOMStyleSheet_parentStyleSheet(DOMStyleSheet *_self);

// method '-[DOMStyleSheet setDisabled:]'
void _IM_DOMStyleSheet_setDisabled_C(DOMStyleSheet *_self, BOOL disabled);

// method '-[DOMStyleSheet title]'
id _IM_DOMStyleSheet_title(DOMStyleSheet *_self);

// method '-[DOMStyleSheet type]'
id _IM_DOMStyleSheet_type(DOMStyleSheet *_self);

// method '-[DOMStyleSheetList item:]'
DOMStyleSheet* _IM_DOMStyleSheetList_item_C(DOMStyleSheetList *_self, unsigned long index);

// method '-[DOMStyleSheetList length]'
unsigned long _IM_DOMStyleSheetList_length(DOMStyleSheetList *_self);

// method '-[DOMText splitText:]'
DOMText* _IM_DOMText_splitText_C(DOMText *_self, unsigned long offset);

// method '-[DOMTreeWalker currentNode]'
DOMNode* _IM_DOMTreeWalker_currentNode(DOMTreeWalker *_self);

// method '-[DOMTreeWalker expandEntityReferences]'
BOOL _IM_DOMTreeWalker_expandEntityReferences(DOMTreeWalker *_self);

// method '-[DOMTreeWalker filter]'
id _IM_DOMTreeWalker_filter(DOMTreeWalker *_self);

// method '-[DOMTreeWalker firstChild]'
DOMNode* _IM_DOMTreeWalker_firstChild(DOMTreeWalker *_self);

// method '-[DOMTreeWalker lastChild]'
DOMNode* _IM_DOMTreeWalker_lastChild(DOMTreeWalker *_self);

// method '-[DOMTreeWalker nextNode]'
DOMNode* _IM_DOMTreeWalker_nextNode(DOMTreeWalker *_self);

// method '-[DOMTreeWalker nextSibling]'
DOMNode* _IM_DOMTreeWalker_nextSibling(DOMTreeWalker *_self);

// method '-[DOMTreeWalker parentNode]'
DOMNode* _IM_DOMTreeWalker_parentNode(DOMTreeWalker *_self);

// method '-[DOMTreeWalker previousNode]'
DOMNode* _IM_DOMTreeWalker_previousNode(DOMTreeWalker *_self);

// method '-[DOMTreeWalker previousSibling]'
DOMNode* _IM_DOMTreeWalker_previousSibling(DOMTreeWalker *_self);

// method '-[DOMTreeWalker root]'
DOMNode* _IM_DOMTreeWalker_root(DOMTreeWalker *_self);

// method '-[DOMTreeWalker setCurrentNode:]'
void _IM_DOMTreeWalker_setCurrentNode_C(DOMTreeWalker *_self, DOMNode* currentNode);

// method '-[DOMTreeWalker whatToShow]'
unsigned long _IM_DOMTreeWalker_whatToShow(DOMTreeWalker *_self);

// method '-[DOMUIEvent detail]'
long _IM_DOMUIEvent_detail(DOMUIEvent *_self);

// method '-[DOMUIEvent initUIEvent:::::]'
void _IM_DOMUIEvent_initUIEvent_C_C_C_C_C(DOMUIEvent *_self, id typeArg, BOOL canBubbleArg, BOOL cancelableArg, DOMAbstractView* viewArg, long detailArg);

// method '-[DOMUIEvent view]'
DOMAbstractView* _IM_DOMUIEvent_view(DOMUIEvent *_self);

// method '-[NSObject acceptNode:]'
short _IM_NSObject_acceptNode_C(NSObject *_self, DOMNode* n);

// method '-[NSObject addEventListener:::]'
void _IM_NSObject_addEventListener_C_C_C(NSObject *_self, id type, id listener, BOOL useCapture);

// method '-[NSObject attributedString]'
id _IM_NSObject_attributedString(NSObject *_self);

// method '-[NSObject canProvideDocumentSource]'
BOOL _IM_NSObject_canProvideDocumentSource(NSObject *_self);

// method '-[NSObject cancel]'
void _IM_NSObject_cancel(NSObject *_self);

// method '-[NSObject chooseFilename:]'
void _IM_NSObject_chooseFilename_C(NSObject *_self, id fileName);

// method '-[NSObject dataSourceUpdated:]'
void _IM_NSObject_dataSourceUpdated_C(NSObject *_self, WebDataSource* dataSource);

// method '-[NSObject deselectAll]'
void _IM_NSObject_deselectAll(NSObject *_self);

// method '-[NSObject dispatchEvent:]'
BOOL _IM_NSObject_dispatchEvent_C(NSObject *_self, DOMEvent* event);

// method '-[NSObject documentSource]'
id _IM_NSObject_documentSource(NSObject *_self);

// method '-[NSObject download]'
void _IM_NSObject_download(NSObject *_self);

// method '-[NSObject downloadWindowForAuthenticationSheet:]'
id _IM_NSObject_downloadWindowForAuthenticationSheet_C(NSObject *_self, id download);

// method '-[NSObject finalizeForWebScript]'
void _IM_NSObject_finalizeForWebScript(NSObject *_self);

// method '-[NSObject finishedLoadingWithDataSource:]'
void _IM_NSObject_finishedLoadingWithDataSource_C(NSObject *_self, WebDataSource* dataSource);

// method '-[NSObject handleEvent:]'
void _IM_NSObject_handleEvent_C(NSObject *_self, DOMEvent* event);

// method '-[NSObject ignore]'
void _IM_NSObject_ignore(NSObject *_self);

// method '-[NSObject invokeDefaultMethodWithArguments:]'
id _IM_NSObject_invokeDefaultMethodWithArguments_C(NSObject *_self, id args);

// method '-[NSObject invokeUndefinedMethodFromWebScript:withArguments:]'
id _IM_NSObject_invokeUndefinedMethodFromWebScript_CwithArguments_C(NSObject *_self, id name, id args);

// method '+[NSObject isKeyExcludedFromWebScript:]'
BOOL _CM_NSObject_isKeyExcludedFromWebScript_C(Class _class, const char* name);

// method '+[NSObject isSelectorExcludedFromWebScript:]'
BOOL _CM_NSObject_isSelectorExcludedFromWebScript_C(Class _class, SEL aSelector);

// method '-[NSObject layout]'
void _IM_NSObject_layout(NSObject *_self);

// method '-[NSObject objectForWebScript]'
id _IM_NSObject_objectForWebScript(NSObject *_self);

// method '+[NSObject plugInViewWithArguments:]'
id _CM_NSObject_plugInViewWithArguments_C(Class _class, id arguments);

// method '-[NSObject receivedData:withDataSource:]'
void _IM_NSObject_receivedData_CwithDataSource_C(NSObject *_self, id data, WebDataSource* dataSource);

// method '-[NSObject receivedError:withDataSource:]'
void _IM_NSObject_receivedError_CwithDataSource_C(NSObject *_self, id error, WebDataSource* dataSource);

// method '-[NSObject removeEventListener:::]'
void _IM_NSObject_removeEventListener_C_C_C(NSObject *_self, id type, id listener, BOOL useCapture);

// method '-[NSObject searchFor:direction:caseSensitive:wrap:]'
BOOL _IM_NSObject_searchFor_Cdirection_CcaseSensitive_Cwrap_C(NSObject *_self, id string, BOOL forward, BOOL caseFlag, BOOL wrapFlag);

// method '-[NSObject selectAll]'
void _IM_NSObject_selectAll(NSObject *_self);

// method '-[NSObject selectedAttributedString]'
id _IM_NSObject_selectedAttributedString(NSObject *_self);

// method '-[NSObject selectedString]'
id _IM_NSObject_selectedString(NSObject *_self);

// method '-[NSObject setDataSource:]'
void _IM_NSObject_setDataSource_C(NSObject *_self, WebDataSource* dataSource);

// method '-[NSObject setNeedsLayout:]'
void _IM_NSObject_setNeedsLayout_C(NSObject *_self, BOOL flag);

// method '-[NSObject string]'
id _IM_NSObject_string(NSObject *_self);

// method '-[NSObject supportsTextEncoding]'
BOOL _IM_NSObject_supportsTextEncoding(NSObject *_self);

// method '-[NSObject title]'
id _IM_NSObject_title(NSObject *_self);

// method '-[NSObject undoManagerForWebView:]'
id _IM_NSObject_undoManagerForWebView_C(NSObject *_self, WebView* webView);

// method '-[NSObject use]'
void _IM_NSObject_use(NSObject *_self);

// method '-[NSObject viewDidMoveToHostWindow]'
void _IM_NSObject_viewDidMoveToHostWindow(NSObject *_self);

// method '-[NSObject viewWillMoveToHostWindow:]'
void _IM_NSObject_viewWillMoveToHostWindow_C(NSObject *_self, id hostWindow);

// method '-[NSObject webFrame]'
WebFrame* _IM_NSObject_webFrame(NSObject *_self);

// method '-[NSObject webPlugInContainerLoadRequest:inFrame:]'
void _IM_NSObject_webPlugInContainerLoadRequest_CinFrame_C(NSObject *_self, id request, id target);

// method '-[NSObject webPlugInContainerSelectionColor]'
id _IM_NSObject_webPlugInContainerSelectionColor(NSObject *_self);

// method '-[NSObject webPlugInContainerShowStatus:]'
void _IM_NSObject_webPlugInContainerShowStatus_C(NSObject *_self, id message);

// method '-[NSObject webPlugInDestroy]'
void _IM_NSObject_webPlugInDestroy(NSObject *_self);

// method '-[NSObject webPlugInGetApplet]'
struct _jobject *_IM_NSObject_webPlugInGetApplet(NSObject *_self);

// method '-[NSObject webPlugInInitialize]'
void _IM_NSObject_webPlugInInitialize(NSObject *_self);

// method '-[NSObject webPlugInSetIsSelected:]'
void _IM_NSObject_webPlugInSetIsSelected_C(NSObject *_self, BOOL isSelected);

// method '-[NSObject webPlugInStart]'
void _IM_NSObject_webPlugInStart(NSObject *_self);

// method '-[NSObject webPlugInStop]'
void _IM_NSObject_webPlugInStop(NSObject *_self);

// method '+[NSObject webScriptNameForKey:]'
id _CM_NSObject_webScriptNameForKey_C(Class _class, const char* name);

// method '+[NSObject webScriptNameForSelector:]'
id _CM_NSObject_webScriptNameForSelector_C(Class _class, SEL aSelector);

// method '-[NSObject webView:contextMenuItemsForElement:defaultMenuItems:]'
id _IM_NSObject_webView_CcontextMenuItemsForElement_CdefaultMenuItems_C(NSObject *_self, WebView* sender, id element, id defaultMenuItems);

// method '-[NSObject webView:createWebViewWithRequest:]'
WebView* _IM_NSObject_webView_CcreateWebViewWithRequest_C(NSObject *_self, WebView* sender, id request);

// method '-[NSObject webView:decidePolicyForMIMEType:request:frame:decisionListener:]'
void _IM_NSObject_webView_CdecidePolicyForMIMEType_Crequest_Cframe_CdecisionListener_C(NSObject *_self, WebView* webView, id type, id request, WebFrame* frame, id listener);

// method '-[NSObject webView:decidePolicyForNavigationAction:request:frame:decisionListener:]'
void _IM_NSObject_webView_CdecidePolicyForNavigationAction_Crequest_Cframe_CdecisionListener_C(NSObject *_self, WebView* webView, id actionInformation, id request, WebFrame* frame, id listener);

// method '-[NSObject webView:decidePolicyForNewWindowAction:request:newFrameName:decisionListener:]'
void _IM_NSObject_webView_CdecidePolicyForNewWindowAction_Crequest_CnewFrameName_CdecisionListener_C(NSObject *_self, WebView* webView, id actionInformation, id request, id frameName, id listener);

// method '-[NSObject webView:didCancelClientRedirectForFrame:]'
void _IM_NSObject_webView_CdidCancelClientRedirectForFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:didChangeLocationWithinPageForFrame:]'
void _IM_NSObject_webView_CdidChangeLocationWithinPageForFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:didCommitLoadForFrame:]'
void _IM_NSObject_webView_CdidCommitLoadForFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:didFailLoadWithError:forFrame:]'
void _IM_NSObject_webView_CdidFailLoadWithError_CforFrame_C(NSObject *_self, WebView* sender, id error, WebFrame* frame);

// method '-[NSObject webView:didFailProvisionalLoadWithError:forFrame:]'
void _IM_NSObject_webView_CdidFailProvisionalLoadWithError_CforFrame_C(NSObject *_self, WebView* sender, id error, WebFrame* frame);

// method '-[NSObject webView:didFinishLoadForFrame:]'
void _IM_NSObject_webView_CdidFinishLoadForFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:didReceiveIcon:forFrame:]'
void _IM_NSObject_webView_CdidReceiveIcon_CforFrame_C(NSObject *_self, WebView* sender, id image, WebFrame* frame);

// method '-[NSObject webView:didReceiveServerRedirectForProvisionalLoadForFrame:]'
void _IM_NSObject_webView_CdidReceiveServerRedirectForProvisionalLoadForFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:didReceiveTitle:forFrame:]'
void _IM_NSObject_webView_CdidReceiveTitle_CforFrame_C(NSObject *_self, WebView* sender, id title, WebFrame* frame);

// method '-[NSObject webView:didStartProvisionalLoadForFrame:]'
void _IM_NSObject_webView_CdidStartProvisionalLoadForFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:doCommandBySelector:]'
BOOL _IM_NSObject_webView_CdoCommandBySelector_C(NSObject *_self, WebView* webView, SEL selector);

// method '-[NSObject webView:dragDestinationActionMaskForDraggingInfo:]'
unsigned int _IM_NSObject_webView_CdragDestinationActionMaskForDraggingInfo_C(NSObject *_self, WebView* webView, id draggingInfo);

// method '-[NSObject webView:dragSourceActionMaskForPoint:]'
unsigned int _IM_NSObject_webView_CdragSourceActionMaskForPoint_C(NSObject *_self, WebView* webView, struct _NSPoint point);

// method '-[NSObject webView:identifierForInitialRequest:fromDataSource:]'
id _IM_NSObject_webView_CidentifierForInitialRequest_CfromDataSource_C(NSObject *_self, WebView* sender, id request, WebDataSource* dataSource);

// method '-[NSObject webView:makeFirstResponder:]'
void _IM_NSObject_webView_CmakeFirstResponder_C(NSObject *_self, WebView* sender, id responder);

// method '-[NSObject webView:mouseDidMoveOverElement:modifierFlags:]'
void _IM_NSObject_webView_CmouseDidMoveOverElement_CmodifierFlags_C(NSObject *_self, WebView* sender, id elementInformation, unsigned int modifierFlags);

// method '-[NSObject webView:plugInFailedWithError:dataSource:]'
void _IM_NSObject_webView_CplugInFailedWithError_CdataSource_C(NSObject *_self, WebView* sender, id error, WebDataSource* dataSource);

// method '-[NSObject webView:resource:didCancelAuthenticationChallenge:fromDataSource:]'
void _IM_NSObject_webView_Cresource_CdidCancelAuthenticationChallenge_CfromDataSource_C(NSObject *_self, WebView* sender, id identifier, id challenge, WebDataSource* dataSource);

// method '-[NSObject webView:resource:didFailLoadingWithError:fromDataSource:]'
void _IM_NSObject_webView_Cresource_CdidFailLoadingWithError_CfromDataSource_C(NSObject *_self, WebView* sender, id identifier, id error, WebDataSource* dataSource);

// method '-[NSObject webView:resource:didFinishLoadingFromDataSource:]'
void _IM_NSObject_webView_Cresource_CdidFinishLoadingFromDataSource_C(NSObject *_self, WebView* sender, id identifier, WebDataSource* dataSource);

// method '-[NSObject webView:resource:didReceiveAuthenticationChallenge:fromDataSource:]'
void _IM_NSObject_webView_Cresource_CdidReceiveAuthenticationChallenge_CfromDataSource_C(NSObject *_self, WebView* sender, id identifier, id challenge, WebDataSource* dataSource);

// method '-[NSObject webView:resource:didReceiveContentLength:fromDataSource:]'
void _IM_NSObject_webView_Cresource_CdidReceiveContentLength_CfromDataSource_C(NSObject *_self, WebView* sender, id identifier, unsigned int length, WebDataSource* dataSource);

// method '-[NSObject webView:resource:didReceiveResponse:fromDataSource:]'
void _IM_NSObject_webView_Cresource_CdidReceiveResponse_CfromDataSource_C(NSObject *_self, WebView* sender, id identifier, id response, WebDataSource* dataSource);

// method '-[NSObject webView:resource:willSendRequest:redirectResponse:fromDataSource:]'
id _IM_NSObject_webView_Cresource_CwillSendRequest_CredirectResponse_CfromDataSource_C(NSObject *_self, WebView* sender, id identifier, id request, id redirectResponse, WebDataSource* dataSource);

// method '-[NSObject webView:runJavaScriptAlertPanelWithMessage:]'
void _IM_NSObject_webView_CrunJavaScriptAlertPanelWithMessage_C(NSObject *_self, WebView* sender, id message);

// method '-[NSObject webView:runJavaScriptConfirmPanelWithMessage:]'
BOOL _IM_NSObject_webView_CrunJavaScriptConfirmPanelWithMessage_C(NSObject *_self, WebView* sender, id message);

// method '-[NSObject webView:runJavaScriptTextInputPanelWithPrompt:defaultText:]'
id _IM_NSObject_webView_CrunJavaScriptTextInputPanelWithPrompt_CdefaultText_C(NSObject *_self, WebView* sender, id prompt, id defaultText);

// method '-[NSObject webView:runOpenPanelForFileButtonWithResultListener:]'
void _IM_NSObject_webView_CrunOpenPanelForFileButtonWithResultListener_C(NSObject *_self, WebView* sender, id resultListener);

// method '-[NSObject webView:setContentRect:]'
void _IM_NSObject_webView_CsetContentRect_C(NSObject *_self, WebView* sender, struct _NSRect contentRect);

// method '-[NSObject webView:setFrame:]'
void _IM_NSObject_webView_CsetFrame_C(NSObject *_self, WebView* sender, struct _NSRect frame);

// method '-[NSObject webView:setResizable:]'
void _IM_NSObject_webView_CsetResizable_C(NSObject *_self, WebView* sender, BOOL resizable);

// method '-[NSObject webView:setStatusBarVisible:]'
void _IM_NSObject_webView_CsetStatusBarVisible_C(NSObject *_self, WebView* sender, BOOL visible);

// method '-[NSObject webView:setStatusText:]'
void _IM_NSObject_webView_CsetStatusText_C(NSObject *_self, WebView* sender, id text);

// method '-[NSObject webView:setToolbarsVisible:]'
void _IM_NSObject_webView_CsetToolbarsVisible_C(NSObject *_self, WebView* sender, BOOL visible);

// method '-[NSObject webView:shouldApplyStyle:toElementsInDOMRange:]'
BOOL _IM_NSObject_webView_CshouldApplyStyle_CtoElementsInDOMRange_C(NSObject *_self, WebView* webView, DOMCSSStyleDeclaration* style, DOMRange* range);

// method '-[NSObject webView:shouldBeginEditingInDOMRange:]'
BOOL _IM_NSObject_webView_CshouldBeginEditingInDOMRange_C(NSObject *_self, WebView* webView, DOMRange* range);

// method '-[NSObject webView:shouldChangeSelectedDOMRange:toDOMRange:affinity:stillSelecting:]'
BOOL _IM_NSObject_webView_CshouldChangeSelectedDOMRange_CtoDOMRange_Caffinity_CstillSelecting_C(NSObject *_self, WebView* webView, DOMRange* currentRange, DOMRange* proposedRange, int selectionAffinity, BOOL flag);

// method '-[NSObject webView:shouldChangeTypingStyle:toStyle:]'
BOOL _IM_NSObject_webView_CshouldChangeTypingStyle_CtoStyle_C(NSObject *_self, WebView* webView, DOMCSSStyleDeclaration* currentStyle, DOMCSSStyleDeclaration* proposedStyle);

// method '-[NSObject webView:shouldDeleteDOMRange:]'
BOOL _IM_NSObject_webView_CshouldDeleteDOMRange_C(NSObject *_self, WebView* webView, DOMRange* range);

// method '-[NSObject webView:shouldEndEditingInDOMRange:]'
BOOL _IM_NSObject_webView_CshouldEndEditingInDOMRange_C(NSObject *_self, WebView* webView, DOMRange* range);

// method '-[NSObject webView:shouldInsertNode:replacingDOMRange:givenAction:]'
BOOL _IM_NSObject_webView_CshouldInsertNode_CreplacingDOMRange_CgivenAction_C(NSObject *_self, WebView* webView, DOMNode* node, DOMRange* range, int action);

// method '-[NSObject webView:shouldInsertText:replacingDOMRange:givenAction:]'
BOOL _IM_NSObject_webView_CshouldInsertText_CreplacingDOMRange_CgivenAction_C(NSObject *_self, WebView* webView, id text, DOMRange* range, int action);

// method '-[NSObject webView:shouldPerformAction:fromSender:]'
BOOL _IM_NSObject_webView_CshouldPerformAction_CfromSender_C(NSObject *_self, WebView* webView, SEL action, id sender);

// method '-[NSObject webView:unableToImplementPolicyWithError:frame:]'
void _IM_NSObject_webView_CunableToImplementPolicyWithError_Cframe_C(NSObject *_self, WebView* webView, id error, WebFrame* frame);

// method '-[NSObject webView:validateUserInterfaceItem:defaultValidation:]'
BOOL _IM_NSObject_webView_CvalidateUserInterfaceItem_CdefaultValidation_C(NSObject *_self, WebView* webView, id item, BOOL defaultValidation);

// method '-[NSObject webView:willCloseFrame:]'
void _IM_NSObject_webView_CwillCloseFrame_C(NSObject *_self, WebView* sender, WebFrame* frame);

// method '-[NSObject webView:willPerformClientRedirectToURL:delay:fireDate:forFrame:]'
void _IM_NSObject_webView_CwillPerformClientRedirectToURL_Cdelay_CfireDate_CforFrame_C(NSObject *_self, WebView* sender, id URL, double seconds, id date, WebFrame* frame);

// method '-[NSObject webView:willPerformDragDestinationAction:forDraggingInfo:]'
void _IM_NSObject_webView_CwillPerformDragDestinationAction_CforDraggingInfo_C(NSObject *_self, WebView* webView, int action, id draggingInfo);

// method '-[NSObject webView:willPerformDragSourceAction:fromPoint:withPasteboard:]'
void _IM_NSObject_webView_CwillPerformDragSourceAction_CfromPoint_CwithPasteboard_C(NSObject *_self, WebView* webView, int action, struct _NSPoint point, id pasteboard);

// method '-[NSObject webView:windowScriptObjectAvailable:]'
void _IM_NSObject_webView_CwindowScriptObjectAvailable_C(NSObject *_self, WebView* webView, WebScriptObject* windowScriptObject);

// method '-[NSObject webViewAreToolbarsVisible:]'
BOOL _IM_NSObject_webViewAreToolbarsVisible_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewClose:]'
void _IM_NSObject_webViewClose_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewContentRect:]'
struct _NSRect _IM_NSObject_webViewContentRect_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewDidBeginEditing:]'
void _IM_NSObject_webViewDidBeginEditing_C(NSObject *_self, id notification);

// method '-[NSObject webViewDidChange:]'
void _IM_NSObject_webViewDidChange_C(NSObject *_self, id notification);

// method '-[NSObject webViewDidChangeSelection:]'
void _IM_NSObject_webViewDidChangeSelection_C(NSObject *_self, id notification);

// method '-[NSObject webViewDidChangeTypingStyle:]'
void _IM_NSObject_webViewDidChangeTypingStyle_C(NSObject *_self, id notification);

// method '-[NSObject webViewDidEndEditing:]'
void _IM_NSObject_webViewDidEndEditing_C(NSObject *_self, id notification);

// method '-[NSObject webViewFirstResponder:]'
id _IM_NSObject_webViewFirstResponder_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewFocus:]'
void _IM_NSObject_webViewFocus_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewFrame:]'
struct _NSRect _IM_NSObject_webViewFrame_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewIsResizable:]'
BOOL _IM_NSObject_webViewIsResizable_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewIsStatusBarVisible:]'
BOOL _IM_NSObject_webViewIsStatusBarVisible_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewShow:]'
void _IM_NSObject_webViewShow_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewStatusText:]'
id _IM_NSObject_webViewStatusText_C(NSObject *_self, WebView* sender);

// method '-[NSObject webViewUnfocus:]'
void _IM_NSObject_webViewUnfocus_C(NSObject *_self, WebView* sender);

// method '-[WebArchive data]'
id _IM_WebArchive_data(WebArchive *_self);

// method '-[WebArchive initWithData:]'
WebArchive *_IM_WebArchive_initWithData_C(WebArchive *_self, id data);

// method '-[WebArchive initWithMainResource:subresources:subframeArchives:]'
WebArchive *_IM_WebArchive_initWithMainResource_Csubresources_CsubframeArchives_C(WebArchive *_self, WebResource* mainResource, id subresources, id subframeArchives);

// method '-[WebArchive mainResource]'
WebResource* _IM_WebArchive_mainResource(WebArchive *_self);

// method '-[WebArchive subframeArchives]'
id _IM_WebArchive_subframeArchives(WebArchive *_self);

// method '-[WebArchive subresources]'
id _IM_WebArchive_subresources(WebArchive *_self);

// method '-[WebBackForwardList addItem:]'
void _IM_WebBackForwardList_addItem_C(WebBackForwardList *_self, WebHistoryItem* item);

// method '-[WebBackForwardList backItem]'
WebHistoryItem* _IM_WebBackForwardList_backItem(WebBackForwardList *_self);

// method '-[WebBackForwardList backListCount]'
int _IM_WebBackForwardList_backListCount(WebBackForwardList *_self);

// method '-[WebBackForwardList backListWithLimit:]'
id _IM_WebBackForwardList_backListWithLimit_C(WebBackForwardList *_self, int limit);

// method '-[WebBackForwardList capacity]'
int _IM_WebBackForwardList_capacity(WebBackForwardList *_self);

// method '-[WebBackForwardList containsItem:]'
BOOL _IM_WebBackForwardList_containsItem_C(WebBackForwardList *_self, WebHistoryItem* item);

// method '-[WebBackForwardList currentItem]'
WebHistoryItem* _IM_WebBackForwardList_currentItem(WebBackForwardList *_self);

// method '-[WebBackForwardList forwardItem]'
WebHistoryItem* _IM_WebBackForwardList_forwardItem(WebBackForwardList *_self);

// method '-[WebBackForwardList forwardListCount]'
int _IM_WebBackForwardList_forwardListCount(WebBackForwardList *_self);

// method '-[WebBackForwardList forwardListWithLimit:]'
id _IM_WebBackForwardList_forwardListWithLimit_C(WebBackForwardList *_self, int limit);

// method '-[WebBackForwardList goBack]'
void _IM_WebBackForwardList_goBack(WebBackForwardList *_self);

// method '-[WebBackForwardList goForward]'
void _IM_WebBackForwardList_goForward(WebBackForwardList *_self);

// method '-[WebBackForwardList goToItem:]'
void _IM_WebBackForwardList_goToItem_C(WebBackForwardList *_self, WebHistoryItem* item);

// method '-[WebBackForwardList itemAtIndex:]'
WebHistoryItem* _IM_WebBackForwardList_itemAtIndex_C(WebBackForwardList *_self, int index);

// method '-[WebBackForwardList pageCacheSize]'
unsigned int _IM_WebBackForwardList_pageCacheSize(WebBackForwardList *_self);

// method '-[WebBackForwardList setCapacity:]'
void _IM_WebBackForwardList_setCapacity_C(WebBackForwardList *_self, int size);

// method '-[WebBackForwardList setPageCacheSize:]'
void _IM_WebBackForwardList_setPageCacheSize_C(WebBackForwardList *_self, unsigned int size);

// method '-[WebDataSource addSubresource:]'
void _IM_WebDataSource_addSubresource_C(WebDataSource *_self, WebResource* subresource);

// method '-[WebDataSource data]'
id _IM_WebDataSource_data(WebDataSource *_self);

// method '-[WebDataSource initWithRequest:]'
WebDataSource *_IM_WebDataSource_initWithRequest_C(WebDataSource *_self, id request);

// method '-[WebDataSource initialRequest]'
id _IM_WebDataSource_initialRequest(WebDataSource *_self);

// method '-[WebDataSource isLoading]'
BOOL _IM_WebDataSource_isLoading(WebDataSource *_self);

// method '-[WebDataSource mainResource]'
WebResource* _IM_WebDataSource_mainResource(WebDataSource *_self);

// method '-[WebDataSource pageTitle]'
id _IM_WebDataSource_pageTitle(WebDataSource *_self);

// method '-[WebDataSource representation]'
id _IM_WebDataSource_representation(WebDataSource *_self);

// method '-[WebDataSource request]'
id _IM_WebDataSource_request(WebDataSource *_self);

// method '-[WebDataSource response]'
id _IM_WebDataSource_response(WebDataSource *_self);

// method '-[WebDataSource subresourceForURL:]'
WebResource* _IM_WebDataSource_subresourceForURL_C(WebDataSource *_self, id URL);

// method '-[WebDataSource subresources]'
id _IM_WebDataSource_subresources(WebDataSource *_self);

// method '-[WebDataSource textEncodingName]'
id _IM_WebDataSource_textEncodingName(WebDataSource *_self);

// method '-[WebDataSource unreachableURL]'
id _IM_WebDataSource_unreachableURL(WebDataSource *_self);

// method '-[WebDataSource webArchive]'
WebArchive* _IM_WebDataSource_webArchive(WebDataSource *_self);

// method '-[WebDataSource webFrame]'
WebFrame* _IM_WebDataSource_webFrame(WebDataSource *_self);

// method '-[WebFrame DOMDocument]'
DOMDocument* _IM_WebFrame_DOMDocument(WebFrame *_self);

// method '-[WebFrame childFrames]'
id _IM_WebFrame_childFrames(WebFrame *_self);

// method '-[WebFrame dataSource]'
WebDataSource* _IM_WebFrame_dataSource(WebFrame *_self);

// method '-[WebFrame findFrameNamed:]'
WebFrame* _IM_WebFrame_findFrameNamed_C(WebFrame *_self, id name);

// method '-[WebFrame frameElement]'
DOMHTMLElement* _IM_WebFrame_frameElement(WebFrame *_self);

// method '-[WebFrame frameView]'
WebFrameView* _IM_WebFrame_frameView(WebFrame *_self);

// method '-[WebFrame initWithName:webFrameView:webView:]'
WebFrame *_IM_WebFrame_initWithName_CwebFrameView_CwebView_C(WebFrame *_self, id name, WebFrameView* view, WebView* webView);

// method '-[WebFrame loadAlternateHTMLString:baseURL:forUnreachableURL:]'
void _IM_WebFrame_loadAlternateHTMLString_CbaseURL_CforUnreachableURL_C(WebFrame *_self, id string, id baseURL, id unreachableURL);

// method '-[WebFrame loadArchive:]'
void _IM_WebFrame_loadArchive_C(WebFrame *_self, WebArchive* archive);

// method '-[WebFrame loadData:MIMEType:textEncodingName:baseURL:]'
void _IM_WebFrame_loadData_CMIMEType_CtextEncodingName_CbaseURL_C(WebFrame *_self, id data, id MIMEType, id encodingName, id URL);

// method '-[WebFrame loadHTMLString:baseURL:]'
void _IM_WebFrame_loadHTMLString_CbaseURL_C(WebFrame *_self, id string, id URL);

// method '-[WebFrame loadRequest:]'
void _IM_WebFrame_loadRequest_C(WebFrame *_self, id request);

// method '-[WebFrame name]'
id _IM_WebFrame_name(WebFrame *_self);

// method '-[WebFrame parentFrame]'
WebFrame* _IM_WebFrame_parentFrame(WebFrame *_self);

// method '-[WebFrame provisionalDataSource]'
WebDataSource* _IM_WebFrame_provisionalDataSource(WebFrame *_self);

// method '-[WebFrame reload]'
void _IM_WebFrame_reload(WebFrame *_self);

// method '-[WebFrame stopLoading]'
void _IM_WebFrame_stopLoading(WebFrame *_self);

// method '-[WebFrame webView]'
WebView* _IM_WebFrame_webView(WebFrame *_self);

// method '-[WebFrameView allowsScrolling]'
BOOL _IM_WebFrameView_allowsScrolling(WebFrameView *_self);

// method '-[WebFrameView documentView]'
id _IM_WebFrameView_documentView(WebFrameView *_self);

// method '-[WebFrameView setAllowsScrolling:]'
void _IM_WebFrameView_setAllowsScrolling_C(WebFrameView *_self, BOOL flag);

// method '-[WebFrameView webFrame]'
WebFrame* _IM_WebFrameView_webFrame(WebFrameView *_self);

// method '-[WebHistory addItems:]'
void _IM_WebHistory_addItems_C(WebHistory *_self, id newItems);

// method '-[WebHistory historyAgeInDaysLimit]'
int _IM_WebHistory_historyAgeInDaysLimit(WebHistory *_self);

// method '-[WebHistory historyItemLimit]'
int _IM_WebHistory_historyItemLimit(WebHistory *_self);

// method '-[WebHistory itemForURL:]'
WebHistoryItem* _IM_WebHistory_itemForURL_C(WebHistory *_self, id URL);

// method '-[WebHistory loadFromURL:error:]'
BOOL _IM_WebHistory_loadFromURL_Cerror_C(WebHistory *_self, id URL, id *error);

// method '+[WebHistory optionalSharedHistory]'
WebHistory* _CM_WebHistory_optionalSharedHistory(Class _class);

// method '-[WebHistory orderedItemsLastVisitedOnDay:]'
id _IM_WebHistory_orderedItemsLastVisitedOnDay_C(WebHistory *_self, id calendarDate);

// method '-[WebHistory orderedLastVisitedDays]'
id _IM_WebHistory_orderedLastVisitedDays(WebHistory *_self);

// method '-[WebHistory removeAllItems]'
void _IM_WebHistory_removeAllItems(WebHistory *_self);

// method '-[WebHistory removeItems:]'
void _IM_WebHistory_removeItems_C(WebHistory *_self, id items);

// method '-[WebHistory saveToURL:error:]'
BOOL _IM_WebHistory_saveToURL_Cerror_C(WebHistory *_self, id URL, id *error);

// method '-[WebHistory setHistoryAgeInDaysLimit:]'
void _IM_WebHistory_setHistoryAgeInDaysLimit_C(WebHistory *_self, int limit);

// method '-[WebHistory setHistoryItemLimit:]'
void _IM_WebHistory_setHistoryItemLimit_C(WebHistory *_self, int limit);

// method '+[WebHistory setOptionalSharedHistory:]'
void _CM_WebHistory_setOptionalSharedHistory_C(Class _class, WebHistory* history);

// method '-[WebHistoryItem URLString]'
id _IM_WebHistoryItem_URLString(WebHistoryItem *_self);

// method '-[WebHistoryItem alternateTitle]'
id _IM_WebHistoryItem_alternateTitle(WebHistoryItem *_self);

// method '-[WebHistoryItem icon]'
id _IM_WebHistoryItem_icon(WebHistoryItem *_self);

// method '-[WebHistoryItem initWithURLString:title:lastVisitedTimeInterval:]'
WebHistoryItem *_IM_WebHistoryItem_initWithURLString_Ctitle_ClastVisitedTimeInterval_C(WebHistoryItem *_self, id URLString, id title, double time);

// method '-[WebHistoryItem lastVisitedTimeInterval]'
double _IM_WebHistoryItem_lastVisitedTimeInterval(WebHistoryItem *_self);

// method '-[WebHistoryItem originalURLString]'
id _IM_WebHistoryItem_originalURLString(WebHistoryItem *_self);

// method '-[WebHistoryItem setAlternateTitle:]'
void _IM_WebHistoryItem_setAlternateTitle_C(WebHistoryItem *_self, id alternateTitle);

// method '-[WebHistoryItem title]'
id _IM_WebHistoryItem_title(WebHistoryItem *_self);

// method '-[WebPreferences allowsAnimatedImageLooping]'
BOOL _IM_WebPreferences_allowsAnimatedImageLooping(WebPreferences *_self);

// method '-[WebPreferences allowsAnimatedImages]'
BOOL _IM_WebPreferences_allowsAnimatedImages(WebPreferences *_self);

// method '-[WebPreferences arePlugInsEnabled]'
BOOL _IM_WebPreferences_arePlugInsEnabled(WebPreferences *_self);

// method '-[WebPreferences autosaves]'
BOOL _IM_WebPreferences_autosaves(WebPreferences *_self);

// method '-[WebPreferences cursiveFontFamily]'
id _IM_WebPreferences_cursiveFontFamily(WebPreferences *_self);

// method '-[WebPreferences defaultFixedFontSize]'
int _IM_WebPreferences_defaultFixedFontSize(WebPreferences *_self);

// method '-[WebPreferences defaultFontSize]'
int _IM_WebPreferences_defaultFontSize(WebPreferences *_self);

// method '-[WebPreferences defaultTextEncodingName]'
id _IM_WebPreferences_defaultTextEncodingName(WebPreferences *_self);

// method '-[WebPreferences fantasyFontFamily]'
id _IM_WebPreferences_fantasyFontFamily(WebPreferences *_self);

// method '-[WebPreferences fixedFontFamily]'
id _IM_WebPreferences_fixedFontFamily(WebPreferences *_self);

// method '-[WebPreferences identifier]'
id _IM_WebPreferences_identifier(WebPreferences *_self);

// method '-[WebPreferences initWithIdentifier:]'
WebPreferences *_IM_WebPreferences_initWithIdentifier_C(WebPreferences *_self, id anIdentifier);

// method '-[WebPreferences isJavaEnabled]'
BOOL _IM_WebPreferences_isJavaEnabled(WebPreferences *_self);

// method '-[WebPreferences isJavaScriptEnabled]'
BOOL _IM_WebPreferences_isJavaScriptEnabled(WebPreferences *_self);

// method '-[WebPreferences javaScriptCanOpenWindowsAutomatically]'
BOOL _IM_WebPreferences_javaScriptCanOpenWindowsAutomatically(WebPreferences *_self);

// method '-[WebPreferences loadsImagesAutomatically]'
BOOL _IM_WebPreferences_loadsImagesAutomatically(WebPreferences *_self);

// method '-[WebPreferences minimumFontSize]'
int _IM_WebPreferences_minimumFontSize(WebPreferences *_self);

// method '-[WebPreferences minimumLogicalFontSize]'
int _IM_WebPreferences_minimumLogicalFontSize(WebPreferences *_self);

// method '-[WebPreferences privateBrowsingEnabled]'
BOOL _IM_WebPreferences_privateBrowsingEnabled(WebPreferences *_self);

// method '-[WebPreferences sansSerifFontFamily]'
id _IM_WebPreferences_sansSerifFontFamily(WebPreferences *_self);

// method '-[WebPreferences serifFontFamily]'
id _IM_WebPreferences_serifFontFamily(WebPreferences *_self);

// method '-[WebPreferences setAllowsAnimatedImageLooping:]'
void _IM_WebPreferences_setAllowsAnimatedImageLooping_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setAllowsAnimatedImages:]'
void _IM_WebPreferences_setAllowsAnimatedImages_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setAutosaves:]'
void _IM_WebPreferences_setAutosaves_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setCursiveFontFamily:]'
void _IM_WebPreferences_setCursiveFontFamily_C(WebPreferences *_self, id family);

// method '-[WebPreferences setDefaultFixedFontSize:]'
void _IM_WebPreferences_setDefaultFixedFontSize_C(WebPreferences *_self, int size);

// method '-[WebPreferences setDefaultFontSize:]'
void _IM_WebPreferences_setDefaultFontSize_C(WebPreferences *_self, int size);

// method '-[WebPreferences setDefaultTextEncodingName:]'
void _IM_WebPreferences_setDefaultTextEncodingName_C(WebPreferences *_self, id encoding);

// method '-[WebPreferences setFantasyFontFamily:]'
void _IM_WebPreferences_setFantasyFontFamily_C(WebPreferences *_self, id family);

// method '-[WebPreferences setFixedFontFamily:]'
void _IM_WebPreferences_setFixedFontFamily_C(WebPreferences *_self, id family);

// method '-[WebPreferences setJavaEnabled:]'
void _IM_WebPreferences_setJavaEnabled_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setJavaScriptCanOpenWindowsAutomatically:]'
void _IM_WebPreferences_setJavaScriptCanOpenWindowsAutomatically_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setJavaScriptEnabled:]'
void _IM_WebPreferences_setJavaScriptEnabled_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setLoadsImagesAutomatically:]'
void _IM_WebPreferences_setLoadsImagesAutomatically_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setMinimumFontSize:]'
void _IM_WebPreferences_setMinimumFontSize_C(WebPreferences *_self, int size);

// method '-[WebPreferences setMinimumLogicalFontSize:]'
void _IM_WebPreferences_setMinimumLogicalFontSize_C(WebPreferences *_self, int size);

// method '-[WebPreferences setPlugInsEnabled:]'
void _IM_WebPreferences_setPlugInsEnabled_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setPrivateBrowsingEnabled:]'
void _IM_WebPreferences_setPrivateBrowsingEnabled_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setSansSerifFontFamily:]'
void _IM_WebPreferences_setSansSerifFontFamily_C(WebPreferences *_self, id family);

// method '-[WebPreferences setSerifFontFamily:]'
void _IM_WebPreferences_setSerifFontFamily_C(WebPreferences *_self, id family);

// method '-[WebPreferences setShouldPrintBackgrounds:]'
void _IM_WebPreferences_setShouldPrintBackgrounds_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setStandardFontFamily:]'
void _IM_WebPreferences_setStandardFontFamily_C(WebPreferences *_self, id family);

// method '-[WebPreferences setTabsToLinks:]'
void _IM_WebPreferences_setTabsToLinks_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setUserStyleSheetEnabled:]'
void _IM_WebPreferences_setUserStyleSheetEnabled_C(WebPreferences *_self, BOOL flag);

// method '-[WebPreferences setUserStyleSheetLocation:]'
void _IM_WebPreferences_setUserStyleSheetLocation_C(WebPreferences *_self, id URL);

// method '-[WebPreferences shouldPrintBackgrounds]'
BOOL _IM_WebPreferences_shouldPrintBackgrounds(WebPreferences *_self);

// method '-[WebPreferences standardFontFamily]'
id _IM_WebPreferences_standardFontFamily(WebPreferences *_self);

// method '+[WebPreferences standardPreferences]'
WebPreferences* _CM_WebPreferences_standardPreferences(Class _class);

// method '-[WebPreferences tabsToLinks]'
BOOL _IM_WebPreferences_tabsToLinks(WebPreferences *_self);

// method '-[WebPreferences userStyleSheetEnabled]'
BOOL _IM_WebPreferences_userStyleSheetEnabled(WebPreferences *_self);

// method '-[WebPreferences userStyleSheetLocation]'
id _IM_WebPreferences_userStyleSheetLocation(WebPreferences *_self);

// method '-[WebResource MIMEType]'
id _IM_WebResource_MIMEType(WebResource *_self);

// method '-[WebResource URL]'
id _IM_WebResource_URL(WebResource *_self);

// method '-[WebResource data]'
id _IM_WebResource_data(WebResource *_self);

// method '-[WebResource frameName]'
id _IM_WebResource_frameName(WebResource *_self);

// method '-[WebResource initWithData:URL:MIMEType:textEncodingName:frameName:]'
WebResource *_IM_WebResource_initWithData_CURL_CMIMEType_CtextEncodingName_CframeName_C(WebResource *_self, id data, id URL, id MIMEType, id textEncodingName, id frameName);

// method '-[WebResource textEncodingName]'
id _IM_WebResource_textEncodingName(WebResource *_self);

// method '-[WebScriptObject callWebScriptMethod:withArguments:]'
id _IM_WebScriptObject_callWebScriptMethod_CwithArguments_C(WebScriptObject *_self, id name, id args);

// method '-[WebScriptObject evaluateWebScript:]'
id _IM_WebScriptObject_evaluateWebScript_C(WebScriptObject *_self, id script);

// method '-[WebScriptObject removeWebScriptKey:]'
void _IM_WebScriptObject_removeWebScriptKey_C(WebScriptObject *_self, id name);

// method '-[WebScriptObject setException:]'
void _IM_WebScriptObject_setException_C(WebScriptObject *_self, id description);

// method '-[WebScriptObject setWebScriptValueAtIndex:value:]'
void _IM_WebScriptObject_setWebScriptValueAtIndex_Cvalue_C(WebScriptObject *_self, unsigned int index, id value);

// method '-[WebScriptObject stringRepresentation]'
id _IM_WebScriptObject_stringRepresentation(WebScriptObject *_self);

// method '+[WebScriptObject throwException:]'
BOOL _CM_WebScriptObject_throwException_C(Class _class, id exceptionMessage);

// method '-[WebScriptObject webScriptValueAtIndex:]'
id _IM_WebScriptObject_webScriptValueAtIndex_C(WebScriptObject *_self, unsigned int index);

// method '+[WebUndefined undefined]'
WebUndefined* _CM_WebUndefined_undefined(Class _class);

// method '+[WebView MIMETypesShownAsHTML]'
id _CM_WebView_MIMETypesShownAsHTML(Class _class);

// method '-[WebView UIDelegate]'
id _IM_WebView_UIDelegate(WebView *_self);

// method '+[WebView URLFromPasteboard:]'
id _CM_WebView_URLFromPasteboard_C(Class _class, id pasteboard);

// method '+[WebView URLTitleFromPasteboard:]'
id _CM_WebView_URLTitleFromPasteboard_C(Class _class, id pasteboard);

// method '-[WebView alignCenter:]'
void _IM_WebView_alignCenter_C(WebView *_self, id sender);

// method '-[WebView alignJustified:]'
void _IM_WebView_alignJustified_C(WebView *_self, id sender);

// method '-[WebView alignLeft:]'
void _IM_WebView_alignLeft_C(WebView *_self, id sender);

// method '-[WebView alignRight:]'
void _IM_WebView_alignRight_C(WebView *_self, id sender);

// method '-[WebView applicationNameForUserAgent]'
id _IM_WebView_applicationNameForUserAgent(WebView *_self);

// method '-[WebView applyStyle:]'
void _IM_WebView_applyStyle_C(WebView *_self, DOMCSSStyleDeclaration* style);

// method '-[WebView backForwardList]'
WebBackForwardList* _IM_WebView_backForwardList(WebView *_self);

// method '-[WebView canGoBack]'
BOOL _IM_WebView_canGoBack(WebView *_self);

// method '-[WebView canGoForward]'
BOOL _IM_WebView_canGoForward(WebView *_self);

// method '-[WebView canMakeTextLarger]'
BOOL _IM_WebView_canMakeTextLarger(WebView *_self);

// method '-[WebView canMakeTextSmaller]'
BOOL _IM_WebView_canMakeTextSmaller(WebView *_self);

// method '+[WebView canShowMIMEType:]'
BOOL _CM_WebView_canShowMIMEType_C(Class _class, id MIMEType);

// method '+[WebView canShowMIMETypeAsHTML:]'
BOOL _CM_WebView_canShowMIMETypeAsHTML_C(Class _class, id MIMEType);

// method '-[WebView changeAttributes:]'
void _IM_WebView_changeAttributes_C(WebView *_self, id sender);

// method '-[WebView changeColor:]'
void _IM_WebView_changeColor_C(WebView *_self, id sender);

// method '-[WebView changeDocumentBackgroundColor:]'
void _IM_WebView_changeDocumentBackgroundColor_C(WebView *_self, id sender);

// method '-[WebView changeFont:]'
void _IM_WebView_changeFont_C(WebView *_self, id sender);

// method '-[WebView checkSpelling:]'
void _IM_WebView_checkSpelling_C(WebView *_self, id sender);

// method '-[WebView computedStyleForElement:pseudoElement:]'
DOMCSSStyleDeclaration* _IM_WebView_computedStyleForElement_CpseudoElement_C(WebView *_self, DOMElement* element, id pseudoElement);

// method '-[WebView copy:]'
void _IM_WebView_copy_C(WebView *_self, id sender);

// method '-[WebView copyFont:]'
void _IM_WebView_copyFont_C(WebView *_self, id sender);

// method '-[WebView customTextEncodingName]'
id _IM_WebView_customTextEncodingName(WebView *_self);

// method '-[WebView customUserAgent]'
id _IM_WebView_customUserAgent(WebView *_self);

// method '-[WebView cut:]'
void _IM_WebView_cut_C(WebView *_self, id sender);

// method '-[WebView delete:]'
void _IM_WebView_delete_C(WebView *_self, id sender);

// method '-[WebView deleteSelection]'
void _IM_WebView_deleteSelection(WebView *_self);

// method '-[WebView downloadDelegate]'
id _IM_WebView_downloadDelegate(WebView *_self);

// method '-[WebView editableDOMRangeForPoint:]'
DOMRange* _IM_WebView_editableDOMRangeForPoint_C(WebView *_self, struct _NSPoint point);

// method '-[WebView editingDelegate]'
id _IM_WebView_editingDelegate(WebView *_self);

// method '-[WebView elementAtPoint:]'
id _IM_WebView_elementAtPoint_C(WebView *_self, struct _NSPoint point);

// method '-[WebView estimatedProgress]'
double _IM_WebView_estimatedProgress(WebView *_self);

// method '-[WebView frameLoadDelegate]'
id _IM_WebView_frameLoadDelegate(WebView *_self);

// method '-[WebView goBack]'
BOOL _IM_WebView_goBack(WebView *_self);

// method '-[WebView goBack:]'
void _IM_WebView_goBack_C(WebView *_self, id sender);

// method '-[WebView goForward]'
BOOL _IM_WebView_goForward(WebView *_self);

// method '-[WebView goForward:]'
void _IM_WebView_goForward_C(WebView *_self, id sender);

// method '-[WebView goToBackForwardItem:]'
BOOL _IM_WebView_goToBackForwardItem_C(WebView *_self, WebHistoryItem* item);

// method '-[WebView groupName]'
id _IM_WebView_groupName(WebView *_self);

// method '-[WebView hostWindow]'
id _IM_WebView_hostWindow(WebView *_self);

// method '-[WebView initWithFrame:frameName:groupName:]'
WebView *_IM_WebView_initWithFrame_CframeName_CgroupName_C(WebView *_self, struct _NSRect frame, id frameName, id groupName);

// method '-[WebView isContinuousSpellCheckingEnabled]'
BOOL _IM_WebView_isContinuousSpellCheckingEnabled(WebView *_self);

// method '-[WebView isEditable]'
BOOL _IM_WebView_isEditable(WebView *_self);

// method '-[WebView mainFrame]'
WebFrame* _IM_WebView_mainFrame(WebView *_self);

// method '-[WebView makeTextLarger:]'
void _IM_WebView_makeTextLarger_C(WebView *_self, id sender);

// method '-[WebView makeTextSmaller:]'
void _IM_WebView_makeTextSmaller_C(WebView *_self, id sender);

// method '-[WebView mediaStyle]'
id _IM_WebView_mediaStyle(WebView *_self);

// method '-[WebView moveDragCaretToPoint:]'
void _IM_WebView_moveDragCaretToPoint_C(WebView *_self, struct _NSPoint point);

// method '-[WebView paste:]'
void _IM_WebView_paste_C(WebView *_self, id sender);

// method '-[WebView pasteAsPlainText:]'
void _IM_WebView_pasteAsPlainText_C(WebView *_self, id sender);

// method '-[WebView pasteAsRichText:]'
void _IM_WebView_pasteAsRichText_C(WebView *_self, id sender);

// method '-[WebView pasteFont:]'
void _IM_WebView_pasteFont_C(WebView *_self, id sender);

// method '-[WebView pasteboardTypesForElement:]'
id _IM_WebView_pasteboardTypesForElement_C(WebView *_self, id element);

// method '-[WebView pasteboardTypesForSelection]'
id _IM_WebView_pasteboardTypesForSelection(WebView *_self);

// method '-[WebView performFindPanelAction:]'
void _IM_WebView_performFindPanelAction_C(WebView *_self, id sender);

// method '-[WebView policyDelegate]'
id _IM_WebView_policyDelegate(WebView *_self);

// method '-[WebView preferences]'
WebPreferences* _IM_WebView_preferences(WebView *_self);

// method '-[WebView preferencesIdentifier]'
id _IM_WebView_preferencesIdentifier(WebView *_self);

// method '+[WebView registerViewClass:representationClass:forMIMEType:]'
void _CM_WebView_registerViewClass_CrepresentationClass_CforMIMEType_C(Class _class, Class viewClass, Class representationClass, id MIMEType);

// method '-[WebView reload:]'
void _IM_WebView_reload_C(WebView *_self, id sender);

// method '-[WebView removeDragCaret]'
void _IM_WebView_removeDragCaret(WebView *_self);

// method '-[WebView replaceSelectionWithArchive:]'
void _IM_WebView_replaceSelectionWithArchive_C(WebView *_self, WebArchive* archive);

// method '-[WebView replaceSelectionWithMarkupString:]'
void _IM_WebView_replaceSelectionWithMarkupString_C(WebView *_self, id markupString);

// method '-[WebView replaceSelectionWithNode:]'
void _IM_WebView_replaceSelectionWithNode_C(WebView *_self, DOMNode* node);

// method '-[WebView replaceSelectionWithText:]'
void _IM_WebView_replaceSelectionWithText_C(WebView *_self, id text);

// method '-[WebView resourceLoadDelegate]'
id _IM_WebView_resourceLoadDelegate(WebView *_self);

// method '-[WebView searchFor:direction:caseSensitive:wrap:]'
BOOL _IM_WebView_searchFor_Cdirection_CcaseSensitive_Cwrap_C(WebView *_self, id string, BOOL forward, BOOL caseFlag, BOOL wrapFlag);

// method '-[WebView selectedDOMRange]'
DOMRange* _IM_WebView_selectedDOMRange(WebView *_self);

// method '-[WebView selectionAffinity]'
int _IM_WebView_selectionAffinity(WebView *_self);

// method '-[WebView setApplicationNameForUserAgent:]'
void _IM_WebView_setApplicationNameForUserAgent_C(WebView *_self, id applicationName);

// method '-[WebView setContinuousSpellCheckingEnabled:]'
void _IM_WebView_setContinuousSpellCheckingEnabled_C(WebView *_self, BOOL flag);

// method '-[WebView setCustomTextEncodingName:]'
void _IM_WebView_setCustomTextEncodingName_C(WebView *_self, id encodingName);

// method '-[WebView setCustomUserAgent:]'
void _IM_WebView_setCustomUserAgent_C(WebView *_self, id userAgentString);

// method '-[WebView setDownloadDelegate:]'
void _IM_WebView_setDownloadDelegate_C(WebView *_self, id delegate);

// method '-[WebView setEditable:]'
void _IM_WebView_setEditable_C(WebView *_self, BOOL flag);

// method '-[WebView setEditingDelegate:]'
void _IM_WebView_setEditingDelegate_C(WebView *_self, id delegate);

// method '-[WebView setFrameLoadDelegate:]'
void _IM_WebView_setFrameLoadDelegate_C(WebView *_self, id delegate);

// method '-[WebView setGroupName:]'
void _IM_WebView_setGroupName_C(WebView *_self, id groupName);

// method '-[WebView setHostWindow:]'
void _IM_WebView_setHostWindow_C(WebView *_self, id hostWindow);

// method '+[WebView setMIMETypesShownAsHTML:]'
void _CM_WebView_setMIMETypesShownAsHTML_C(Class _class, id MIMETypes);

// method '-[WebView setMaintainsBackForwardList:]'
void _IM_WebView_setMaintainsBackForwardList_C(WebView *_self, BOOL flag);

// method '-[WebView setMediaStyle:]'
void _IM_WebView_setMediaStyle_C(WebView *_self, id mediaStyle);

// method '-[WebView setPolicyDelegate:]'
void _IM_WebView_setPolicyDelegate_C(WebView *_self, id delegate);

// method '-[WebView setPreferences:]'
void _IM_WebView_setPreferences_C(WebView *_self, WebPreferences* prefs);

// method '-[WebView setPreferencesIdentifier:]'
void _IM_WebView_setPreferencesIdentifier_C(WebView *_self, id anIdentifier);

// method '-[WebView setResourceLoadDelegate:]'
void _IM_WebView_setResourceLoadDelegate_C(WebView *_self, id delegate);

// method '-[WebView setSelectedDOMRange:affinity:]'
void _IM_WebView_setSelectedDOMRange_Caffinity_C(WebView *_self, DOMRange* range, int selectionAffinity);

// method '-[WebView setSmartInsertDeleteEnabled:]'
void _IM_WebView_setSmartInsertDeleteEnabled_C(WebView *_self, BOOL flag);

// method '-[WebView setTextSizeMultiplier:]'
void _IM_WebView_setTextSizeMultiplier_C(WebView *_self, float multiplier);

// method '-[WebView setTypingStyle:]'
void _IM_WebView_setTypingStyle_C(WebView *_self, DOMCSSStyleDeclaration* style);

// method '-[WebView setUIDelegate:]'
void _IM_WebView_setUIDelegate_C(WebView *_self, id delegate);

// method '-[WebView showGuessPanel:]'
void _IM_WebView_showGuessPanel_C(WebView *_self, id sender);

// method '-[WebView smartInsertDeleteEnabled]'
BOOL _IM_WebView_smartInsertDeleteEnabled(WebView *_self);

// method '-[WebView spellCheckerDocumentTag]'
int _IM_WebView_spellCheckerDocumentTag(WebView *_self);

// method '-[WebView startSpeaking:]'
void _IM_WebView_startSpeaking_C(WebView *_self, id sender);

// method '-[WebView stopLoading:]'
void _IM_WebView_stopLoading_C(WebView *_self, id sender);

// method '-[WebView stopSpeaking:]'
void _IM_WebView_stopSpeaking_C(WebView *_self, id sender);

// method '-[WebView stringByEvaluatingJavaScriptFromString:]'
id _IM_WebView_stringByEvaluatingJavaScriptFromString_C(WebView *_self, id script);

// method '-[WebView styleDeclarationWithText:]'
DOMCSSStyleDeclaration* _IM_WebView_styleDeclarationWithText_C(WebView *_self, id text);

// method '-[WebView supportsTextEncoding]'
BOOL _IM_WebView_supportsTextEncoding(WebView *_self);

// method '-[WebView takeStringURLFrom:]'
void _IM_WebView_takeStringURLFrom_C(WebView *_self, id sender);

// method '-[WebView textSizeMultiplier]'
float _IM_WebView_textSizeMultiplier(WebView *_self);

// method '-[WebView typingStyle]'
DOMCSSStyleDeclaration* _IM_WebView_typingStyle(WebView *_self);

// method '-[WebView undoManager]'
id _IM_WebView_undoManager(WebView *_self);

// method '-[WebView userAgentForURL:]'
id _IM_WebView_userAgentForURL_C(WebView *_self, id URL);

// method '-[WebView windowScriptObject]'
WebScriptObject* _IM_WebView_windowScriptObject(WebView *_self);

// method '-[WebView writeElement:withPasteboardTypes:toPasteboard:]'
void _IM_WebView_writeElement_CwithPasteboardTypes_CtoPasteboard_C(WebView *_self, id element, id types, id pasteboard);

// method '-[WebView writeSelectionWithPasteboardTypes:toPasteboard:]'
void _IM_WebView_writeSelectionWithPasteboardTypes_CtoPasteboard_C(WebView *_self, id types, id pasteboard);


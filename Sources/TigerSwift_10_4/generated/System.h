// Generated by W2C2BridgeGenerator
#include <stdarg.h>

// opaque 'aslclient'
typedef struct __aslclient *aslclient;

// opaque 'aslmsg'
typedef struct __aslmsg *aslmsg;

// opaque 'aslresponse'
typedef struct __aslresponse *aslresponse;

// opaque 'launch_data_t'
typedef struct _launch_data *launch_data_t;

enum { ASL_FILTER_MASK_ALERT = 2 };

enum { ASL_FILTER_MASK_CRIT = 4 };

enum { ASL_FILTER_MASK_DEBUG = 128 };

enum { ASL_FILTER_MASK_EMERG = 1 };

enum { ASL_FILTER_MASK_ERR = 8 };

enum { ASL_FILTER_MASK_INFO = 64 };

enum { ASL_FILTER_MASK_NOTICE = 32 };

enum { ASL_FILTER_MASK_WARNING = 16 };

enum { ASL_LEVEL_ALERT = 1 };

enum { ASL_LEVEL_CRIT = 2 };

enum { ASL_LEVEL_DEBUG = 7 };

enum { ASL_LEVEL_EMERG = 0 };

enum { ASL_LEVEL_ERR = 3 };

enum { ASL_LEVEL_INFO = 6 };

enum { ASL_LEVEL_NOTICE = 5 };

enum { ASL_LEVEL_WARNING = 4 };

enum { ASL_OPT_NO_DELAY = 2 };

enum { ASL_OPT_NO_REMOTE = 4 };

enum { ASL_OPT_STDERR = 1 };

enum { ASL_QUERY_OP_CASEFOLD = 16 };

enum { ASL_QUERY_OP_EQUAL = 1 };

enum { ASL_QUERY_OP_GREATER = 2 };

enum { ASL_QUERY_OP_GREATER_EQUAL = 3 };

enum { ASL_QUERY_OP_LESS = 4 };

enum { ASL_QUERY_OP_LESS_EQUAL = 5 };

enum { ASL_QUERY_OP_NOT_EQUAL = 6 };

enum { ASL_QUERY_OP_NUMERIC = 128 };

enum { ASL_QUERY_OP_PREFIX = 32 };

enum { ASL_QUERY_OP_REGEX = 256 };

enum { ASL_QUERY_OP_SUBSTRING = 96 };

enum { ASL_QUERY_OP_SUFFIX = 64 };

enum { ASL_QUERY_OP_TRUE = 7 };

enum { ASL_TYPE_MSG = 0 };

enum { ASL_TYPE_QUERY = 1 };

enum { CC_MD2_BLOCK_BYTES = 64 };

enum { CC_MD2_BLOCK_LONG = 16 };

enum { CC_MD2_DIGEST_LENGTH = 16 };

enum { CC_MD4_BLOCK_BYTES = 64 };

enum { CC_MD4_BLOCK_LONG = 16 };

enum { CC_MD4_DIGEST_LENGTH = 16 };

enum { CC_MD5_BLOCK_BYTES = 64 };

enum { CC_MD5_BLOCK_LONG = 16 };

enum { CC_MD5_DIGEST_LENGTH = 16 };

enum { CC_SHA1_BLOCK_BYTES = 64 };

enum { CC_SHA1_BLOCK_LONG = 16 };

enum { CC_SHA1_DIGEST_LENGTH = 20 };

enum { CC_SHA256_BLOCK_BYTES = 64 };

enum { CC_SHA256_DIGEST_LENGTH = 32 };

enum { CC_SHA384_BLOCK_BYTES = 128 };

enum { CC_SHA384_DIGEST_LENGTH = 48 };

enum { CC_SHA512_BLOCK_BYTES = 128 };

enum { CC_SHA512_DIGEST_LENGTH = 64 };

enum { LAUNCH_DATA_ARRAY = 2 };

enum { LAUNCH_DATA_BOOL = 6 };

enum { LAUNCH_DATA_DICTIONARY = 1 };

enum { LAUNCH_DATA_ERRNO = 9 };

enum { LAUNCH_DATA_FD = 3 };

enum { LAUNCH_DATA_INTEGER = 4 };

enum { LAUNCH_DATA_OPAQUE = 8 };

enum { LAUNCH_DATA_REAL = 5 };

enum { LAUNCH_DATA_STRING = 7 };

enum { NOTIFY_REUSE = 1 };

enum { NOTIFY_STATUS_FAILED = 1000000 };

enum { NOTIFY_STATUS_INVALID_FILE = 4 };

enum { NOTIFY_STATUS_INVALID_NAME = 1 };

enum { NOTIFY_STATUS_INVALID_PORT = 3 };

enum { NOTIFY_STATUS_INVALID_REQUEST = 6 };

enum { NOTIFY_STATUS_INVALID_SIGNAL = 5 };

enum { NOTIFY_STATUS_INVALID_TOKEN = 2 };

enum { NOTIFY_STATUS_NOT_AUTHORIZED = 7 };

enum { NOTIFY_STATUS_OK = 0 };

// function 'asl_add_log_file'
int asl_add_log_file(struct __aslclient *p1, int p2);

// function 'asl_close'
void asl_close(struct __aslclient *p1);

// function 'asl_free'
void asl_free(struct __aslmsg *p1);

// function 'asl_get'
char *asl_get(struct __aslmsg *p1, char *p2);

// function 'asl_key'
char *asl_key(struct __aslmsg *p1, unsigned int p2);

// function 'asl_new'
struct __aslmsg *asl_new(unsigned int p1);

// function 'asl_open'
struct __aslclient *asl_open(char *p1, char *p2, unsigned int p3);

// function 'asl_remove_log_file'
int asl_remove_log_file(struct __aslclient *p1, int p2);

// function 'asl_search'
struct __aslresponse *asl_search(struct __aslclient *p1, struct __aslmsg *p2);

// function 'asl_send'
int asl_send(struct __aslclient *p1, struct __aslmsg *p2);

// function 'asl_set'
int asl_set(struct __aslmsg *p1, char *p2, char *p3);

// function 'asl_set_filter'
int asl_set_filter(struct __aslclient *p1, int p2);

// function 'asl_set_query'
int asl_set_query(struct __aslmsg *p1, char *p2, char *p3, unsigned int p4);

// function 'asl_unset'
int asl_unset(struct __aslmsg *p1, char *p2);

// function 'asl_vlog'
int asl_vlog(struct __aslclient *p1, struct __aslmsg *p2, int p3, char *p4, char *p5);

// function 'aslresponse_free'
void aslresponse_free(struct __aslresponse *p1);

// function 'aslresponse_next'
struct __aslmsg *aslresponse_next(struct __aslresponse *p1);

// function 'launch_data_alloc'
struct _launch_data *launch_data_alloc(int p1);

// function 'launch_data_array_get_count'
unsigned long launch_data_array_get_count(struct _launch_data *p1);

// function 'launch_data_array_get_index'
struct _launch_data *launch_data_array_get_index(struct _launch_data *p1, unsigned long p2);

// function 'launch_data_array_set_index'
_Bool launch_data_array_set_index(struct _launch_data *p1, struct _launch_data *p2, unsigned long p3);

// function 'launch_data_copy'
struct _launch_data *launch_data_copy(struct _launch_data *p1);

// function 'launch_data_dict_get_count'
unsigned long launch_data_dict_get_count(struct _launch_data *p1);

// function 'launch_data_dict_insert'
_Bool launch_data_dict_insert(struct _launch_data *p1, struct _launch_data *p2, char *p3);

// function 'launch_data_dict_lookup'
struct _launch_data *launch_data_dict_lookup(struct _launch_data *p1, char *p2);

// function 'launch_data_dict_remove'
_Bool launch_data_dict_remove(struct _launch_data *p1, char *p2);

// function 'launch_data_free'
void launch_data_free(struct _launch_data *p1);

// function 'launch_data_get_bool'
_Bool launch_data_get_bool(struct _launch_data *p1);

// function 'launch_data_get_errno'
int launch_data_get_errno(struct _launch_data *p1);

// function 'launch_data_get_fd'
int launch_data_get_fd(struct _launch_data *p1);

// function 'launch_data_get_integer'
long long launch_data_get_integer(struct _launch_data *p1);

// function 'launch_data_get_opaque'
void *launch_data_get_opaque(struct _launch_data *p1);

// function 'launch_data_get_opaque_size'
unsigned long launch_data_get_opaque_size(struct _launch_data *p1);

// function 'launch_data_get_real'
double launch_data_get_real(struct _launch_data *p1);

// function 'launch_data_get_string'
char *launch_data_get_string(struct _launch_data *p1);

// function 'launch_data_get_type'
int launch_data_get_type(struct _launch_data *p1);

// function 'launch_data_new_bool'
struct _launch_data *launch_data_new_bool(_Bool p1);

// function 'launch_data_new_fd'
struct _launch_data *launch_data_new_fd(int p1);

// function 'launch_data_new_integer'
struct _launch_data *launch_data_new_integer(long long p1);

// function 'launch_data_new_opaque'
struct _launch_data *launch_data_new_opaque(void *p1, unsigned long p2);

// function 'launch_data_new_real'
struct _launch_data *launch_data_new_real(double p1);

// function 'launch_data_new_string'
struct _launch_data *launch_data_new_string(char *p1);

// function 'launch_data_set_bool'
_Bool launch_data_set_bool(struct _launch_data *p1, _Bool p2);

// function 'launch_data_set_fd'
_Bool launch_data_set_fd(struct _launch_data *p1, int p2);

// function 'launch_data_set_integer'
_Bool launch_data_set_integer(struct _launch_data *p1, long long p2);

// function 'launch_data_set_opaque'
_Bool launch_data_set_opaque(struct _launch_data *p1, void *p2, unsigned long p3);

// function 'launch_data_set_real'
_Bool launch_data_set_real(struct _launch_data *p1, double p2);

// function 'launch_data_set_string'
_Bool launch_data_set_string(struct _launch_data *p1, char *p2);

// function 'launch_get_fd'
int launch_get_fd(void);

// function 'launch_msg'
struct _launch_data *launch_msg(struct _launch_data *p1);

// function 'notify_cancel'
unsigned int notify_cancel(int p1);

// function 'notify_check'
unsigned int notify_check(int p1, int *p2);

// function 'notify_post'
unsigned int notify_post(char *p1);

// function 'notify_register_check'
unsigned int notify_register_check(char *p1, int *p2);

// function 'notify_register_file_descriptor'
unsigned int notify_register_file_descriptor(char *p1, int *p2, int p3, int *p4);

// function 'notify_register_mach_port'
unsigned int notify_register_mach_port(char *p1, unsigned int *p2, int p3, int *p4);

// function 'notify_register_signal'
unsigned int notify_register_signal(char *p1, int p2, int *p3);

